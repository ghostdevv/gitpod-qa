[["0",{"pageContent":"<script context=\"module\">\n  export const prerender = true;\n</script>\n<script>\n     import \"$lib/assets/markdown-commons.scss\";\n  import Header from \"$lib/components/header.svelte\";\n</script>\n\n<div class=\"prose max-w-none content-docs w-full\">\n<div class=\"text-center mt-8\">\n\n# Cookies Policy\n\n</div>\n\nDate: 13th of June, 2022","metadata":{"source":"https://www.gitpod.io/cookies","loc":{"lines":{"from":1,"to":16}}}}],["1",{"pageContent":"General statement on Cookies\n\nThe Website uses cookies and/or other similar technologies to collect and store certain information. This typically involves pieces of information or code transferred to or accessed from your computer hard drive or mobile device to store and sometimes track information about you, and to distinguish you from other users of the Website. This helps us to provide you with a good experience when you browse (e.g. storing searches and presenting personalised content) and also allows us to improve the Website. This document should be read in conjunction with [Gitpod's Privacy Policy](/privacy).\n\nA number of cookies and similar technologies last only for the duration of your web or app session and expire when you close your browser or exit the Website. Others are used to remembering you when you return to the Website and will last for longer.","metadata":{"source":"https://www.gitpod.io/cookies","loc":{"lines":{"from":18,"to":22}}}}],["2",{"pageContent":"We use strictly necessary cookies if they are necessary for the performance of a contract with you, or because using them is in our legitimate interests (where we have considered that these are not overridden by your rights). We use all other cookies with your consent.\n\nWe use the following types of cookies, the specific details of which are set out in the table further below:","metadata":{"source":"https://www.gitpod.io/cookies","loc":{"lines":{"from":24,"to":26}}}}],["3",{"pageContent":"Strictly necessary cookies\n\nThese are cookies that are required for the operation of our Site and under our terms with you. They include, for example, cookies that enable you to log into secure areas of our Site or (on other sites) use a shopping cart or make use of e-billing services.\n\n## Functionality cookies\n\nThese may be used to recognise you when you return to our Site. This enables us, subject to your choices and preferences, to personalise our content, greet you by name and remember your preferences (for example, choice of language or region).","metadata":{"source":"https://www.gitpod.io/cookies","loc":{"lines":{"from":28,"to":34}}}}],["4",{"pageContent":"Analytical / Performance cookies\n\nThese allow us to recognise and count the number of visitors and to see how visitors move around our Stie when they are using it. This helps us improve the way our Website works, for example, by ensuring that users are finding what they are looking for easily.\n\nTargeting/Advertising cookies\n\nThese cookies record your visit to our Website, the pages you have visited and the links you have followed. We will use this information subject to your choices and preferences to make our Website and the advertising displayed on it more relevant to your interests. We may also share this information with third parties for this purpose.","metadata":{"source":"https://www.gitpod.io/cookies","loc":{"lines":{"from":36,"to":42}}}}],["5",{"pageContent":"Disabling cookies\n\nThe effect of disabling cookies depends on which cookies you disable but, in general, the Site may not operate properly if all cookies are switched off. If you want to disable cookies on our Website, you can click on \"Cookie Preferences\" in the footer.\n\nYou can also change your browser settings to reject cookies. How you can do this will depend on the browser you use and you can find more information here: https://www.allaboutcookies.org/","metadata":{"source":"https://www.gitpod.io/cookies","loc":{"lines":{"from":44,"to":48}}}}],["6",{"pageContent":"Specific details on Cookies","metadata":{"source":"https://www.gitpod.io/cookies","loc":{"lines":{"from":50,"to":50}}}}],["7",{"pageContent":"| Product/Website  | Cookie Name                                                                                                                      | Type                  | Purpose                                                                                                                                                    | Cookie Duration | Third-Party Cookie | More Information                          |\n| ---------------- | -------------------------------------------------------------------------------------------------------------------------------- | --------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------- | ------------------ | ----------------------------------------- |","metadata":{"source":"https://www.gitpod.io/cookies","loc":{"lines":{"from":52,"to":53}}}}],["8",{"pageContent":"| Product, Website | gitpod-user                                                                                                                      | Strictly Necessary    | Recognises if a user visited the Gitpod product                                                                                                            | 1 year          | No                 |                                           |\n| Product          | _gitpod_io_                                                                                                                      | Strictly Necessary    | Session sign-in cookie to recognise user login status                                                                                                      | 1 week          | No                 |                                           |","metadata":{"source":"https://www.gitpod.io/cookies","loc":{"lines":{"from":54,"to":55}}}}],["9",{"pageContent":"| Website          | GCLB                                                                                                                             | Strictly Necessary    | Load balancing to quickly provide our website and services                                                                                                 | Session         | Yes                | https://policies.google.com/privacy?hl=en |\n| Product          | gitpod-ui-experiments                                                                                                            | Strictly Necessary    | Describes if a Gitpod user enabled UI beta                                                                                                                 | Persistent      | No                 |                                           |","metadata":{"source":"https://www.gitpod.io/cookies","loc":{"lines":{"from":56,"to":57}}}}],["10",{"pageContent":"| Product          | open-in-gitpod-search data                                                                                                       | Strictly Necessary    | Provides latest search results in Gitpod to enable better loading times                                                                                    | Persistent      | No                 |                                           |\n| Product          | team-selection <!-- TODO: Change After Resolution => https://github.com/gitpod-io/gitpod/pull/16050#issuecomment-1405985997  --> | Strictly Necessary    | Describes if a Gitpod user selected a team to be working with                                                                                              | Persistent      | No                 |                                           |","metadata":{"source":"https://www.gitpod.io/cookies","loc":{"lines":{"from":58,"to":59}}}}],["11",{"pageContent":"| Website          | algoliasearch-client-js                                                                                                          | Strictly Necessary    | Necessary in order to optimize the website's search -bar function . The cookie ensures accurate and fast search results.                                   | Persistent      | No                 |                                           |\n| Website          | CONSENT                                                                                                                          | Strictly Necessary    | Used to detect if the visitor has accepted cookies on our website. This is necessary for privacy compliance.                                               | 2 years         | Yes                | https://policies.google.com/privacy?hl=en |","metadata":{"source":"https://www.gitpod.io/cookies","loc":{"lines":{"from":60,"to":61}}}}],["12",{"pageContent":"| Website          | ajs_anonymous_id                                                                                                                 | Strictly Necessary    | Cookie used to identify reoccurring website visitors and contact form submissions                                                                          | 1 year          | Yes                | https://segment.com/legal/privacy/        |\n| Website          | ajs_anonymous_id                                                                                                                 | Strictly Necessary    | Local Browser Storage used to identify reoccurring website visitors and contact form submissions                                                           | Persistent      | Yes                | https://segment.com/legal/privacy/        |","metadata":{"source":"https://www.gitpod.io/cookies","loc":{"lines":{"from":62,"to":63}}}}],["13",{"pageContent":"| Product          | rc::a                                                                                                                            | Strictly Necessary    | This cookie is used to distinguish between humans and bots. This is necessary for the website, in order to make valid reports on the use of their website. | Persistent      | Yes                | https://policies.google.com/privacy?hl=en |\n| Product, Website | gp-analytical                                                                                                                    | Strictly Necessary    | Stores and indicates cookie consent preferences of an user for a certain category                                                                          | 1 year          | No                 |                                           |","metadata":{"source":"https://www.gitpod.io/cookies","loc":{"lines":{"from":64,"to":65}}}}],["14",{"pageContent":"| Product, Website | gp-necessary                                                                                                                     | Strictly Necessary    | Stores and indicates cookie consent preferences of an user for a certain category                                                                          | 1 year          | No                 |                                           |\n| Product, Website | gp-targeting                                                                                                                     | Strictly Necessary    | Stores and indicates cookie consent preferences of an user for a certain category                                                                          | 1 year          | No                 |                                           |","metadata":{"source":"https://www.gitpod.io/cookies","loc":{"lines":{"from":66,"to":67}}}}],["15",{"pageContent":"| Website          | \\_gcl_au                                                                                                                         | Targeting/Marketing   | Used by Google Ad sense to store and track conversions and advertising efficiency                                                                          | 3 months        | Yes                | https://policies.google.com/privacy?hl=en |\n| Website          | _tld_                                                                                                                            | Targeting/Marketing   | Used to track users across multiple website in order to present relevant advertisement                                                                     | Session         | No                 |                                           |","metadata":{"source":"https://www.gitpod.io/cookies","loc":{"lines":{"from":68,"to":69}}}}],["16",{"pageContent":"| Website          | VISITOR_INFO1_LIVE                                                                                                               | Targeting/Marketing   | Tries to estimate the users' bandwidth on pages with integrated YouTube videos                                                                             | 6 months        | Yes                | https://policies.google.com/privacy?hl=en |\n| Website          | YSC                                                                                                                              | Targeting/Marketing   | Registers a unique ID to keep statistics of what videos from You Tube the user has seen                                                                    | Session         | Yes                | https://policies.google.com/privacy?hl=en |","metadata":{"source":"https://www.gitpod.io/cookies","loc":{"lines":{"from":70,"to":71}}}}],["17",{"pageContent":"| Website          | yt.innertube::nextId                                                                                                             | Targeting/Marketing   | Registers a unique ID to keep statistics of what videos from You Tube the user has seen                                                                    | Persistent      | Yes                | https://policies.google.com/privacy?hl=en |\n| Website          | yt.innertube::requests                                                                                                           | Targeting/Marketing   | Registers a unique ID to keep statistics of what videos from You Tube the user has seen                                                                    | Persistent      | Yes                | https://policies.google.com/privacy?hl=en |","metadata":{"source":"https://www.gitpod.io/cookies","loc":{"lines":{"from":72,"to":73}}}}],["18",{"pageContent":"| Website          | ytidb::LAST_RESULT_ENTRY_KEY                                                                                                     | Targeting/Marketing   | Stores the user's video player preferences using embedded You Tube video                                                                                   | Persistent      | Yes                | https://policies.google.com/privacy?hl=en |\n| Website          | yt-remote-cast-available                                                                                                         | Targeting/Marketing   | Stores the user's video player preferences using embedded You Tube video                                                                                   | Persistent      | Yes                | https://policies.google.com/privacy?hl=en |","metadata":{"source":"https://www.gitpod.io/cookies","loc":{"lines":{"from":74,"to":75}}}}],["19",{"pageContent":"| Website          | yt-remote-cast-installed                                                                                                         | Targeting/Marketing   | Stores the user's video player preferences using embedded You Tube video                                                                                   | Persistent      | Yes                | https://policies.google.com/privacy?hl=en |\n| Website          | yt-remote-connected-devices                                                                                                      | Targeting/Marketing   | Stores the user's video player preferences using embedded You Tube video                                                                                   | Persistent      | Yes                | https://policies.google.com/privacy?hl=en |","metadata":{"source":"https://www.gitpod.io/cookies","loc":{"lines":{"from":76,"to":77}}}}],["20",{"pageContent":"| Website          | yt-remote-device-id                                                                                                              | Targeting/Marketing   | Stores the user's video player preferences using embedded You Tube video                                                                                   | Persistent      | Yes                | https://policies.google.com/privacy?hl=en |\n| Website          | yt-remote-fast-check-period                                                                                                      | Targeting/Marketing   | Stores the user's video player preferences using embedded You Tube video                                                                                   | Persistent      | Yes                | https://policies.google.com/privacy?hl=en |","metadata":{"source":"https://www.gitpod.io/cookies","loc":{"lines":{"from":78,"to":79}}}}],["21",{"pageContent":"| Website          | yt-remote-session-app                                                                                                            | Targeting/Marketing   | Stores the user's video player preferences using embedded You Tube video                                                                                   | Persistent      | Yes                | https://policies.google.com/privacy?hl=en |\n| Website          | yt-remote-session-name                                                                                                           | Targeting/Marketing   | Stores the user's video player preferences using embedded You Tube video                                                                                   | Persistent      | Yes                | https://policies.google.com/privacy?hl=en |","metadata":{"source":"https://www.gitpod.io/cookies","loc":{"lines":{"from":80,"to":81}}}}],["22",{"pageContent":"| Website          | ajs_user_id                                                                                                                      | Analytics/Performance | Generates a userID to identify reoccurring website visitors                                                                                                | Persistent      | Yes                | https://segment.com/legal/privacy/        |\n| Website          | gitpod-marketing-website-visited                                                                                                 | Analytics/Performance | Recognises if a user visited http://gitpod.io                                                                                                              | 1 year          | No                 |","metadata":{"source":"https://www.gitpod.io/cookies","loc":{"lines":{"from":82,"to":83}}}}],["23",{"pageContent":"</div>","metadata":{"source":"https://www.gitpod.io/cookies","loc":{"lines":{"from":83,"to":83}}}}],["24",{"pageContent":"<script context=\"module\">\n  export const prerender = true;\n</script>\n<script>\n     import \"$lib/assets/markdown-commons.scss\";\n</script>\n\n<div class=\"prose max-w-none content-docs w-full\">\n<div class=\"text-center mt-8\">","metadata":{"source":"https://www.gitpod.io/sub-processors","loc":{"lines":{"from":1,"to":9}}}}],["25",{"pageContent":"List of Sub-processors\n\nℹ️ This page has been created in the context of the European 🇪🇺 General Data Protection Regulation (GDPR) and sub processor relationships in Gitpos's Data Processing Agreement (DPA).\n\n</div>","metadata":{"source":"https://www.gitpod.io/sub-processors","loc":{"lines":{"from":11,"to":15}}}}],["26",{"pageContent":"| Processor entity name        | Location                 | Description of processing                                                |\n| ---------------------------- | ------------------------ | ------------------------------------------------------------------------ |\n| Google, LLC                  | United States of America | Cloud Infrastructure for gitpod.io                                       |\n| Amazon Web Services, Inc.    | United States of America | Cloud Infrastructure for Gitpod Dedicated                                |\n| Google, LLC                  | United States of America | Business Emails and Collaboration                                        |\n| Slack Technologies, LLC      | United States of America | Instant Messaging and Collaboration                                      |\n| FrontApp, Inc                | United States of America | Platform to handle customer support inquiries and questions              |","metadata":{"source":"https://www.gitpod.io/sub-processors","loc":{"lines":{"from":17,"to":23}}}}],["27",{"pageContent":"| FrontApp, Inc                | United States of America | Platform to handle customer support inquiries and questions              |\n| Salesforce, Inc              | United States of America | Customer Relationship Management                                         |\n| Twillo, Inc d/b/a Segment.io | United States of America | Customer Data Platform                                                   |\n| Pearberry Software, Inc      | United States of America | Email service for Account Notifications, Product Updates and Newsletters |\n| Twillo, Inc                  | United States of America | Phone number and user account verification service                       |\n| Stripe, Inc                  | United States of America | Payment Service                                                          |\n| Gong.io, Inc                 | United States of America | Meeting Transcript Service                                               |","metadata":{"source":"https://www.gitpod.io/sub-processors","loc":{"lines":{"from":23,"to":29}}}}],["28",{"pageContent":"| Gong.io, Inc                 | United States of America | Meeting Transcript Service                                               |\n| Lacework, Inc                | United States of America | Threat Detection Solution                                                |\n| StrongDM, Inc                | United States of America | Access Management Platform                                               |\n| Metabase, Inc                | United States of America | Business Analytics and Reporting Service                                 |","metadata":{"source":"https://www.gitpod.io/sub-processors","loc":{"lines":{"from":29,"to":32}}}}],["29",{"pageContent":"</div>","metadata":{"source":"https://www.gitpod.io/sub-processors","loc":{"lines":{"from":32,"to":32}}}}],["30",{"pageContent":"---\nauthor: ghuntley\ndate: Friday, 16 Apr 2021 11:00:00 UTC\nexcerpt: On the 27th of April there will be a one-day virtual conference where members from the Gitpod team will be spending dedicated time with you, our community.\nimage: teaser.jpg\nslug: a-day-with-gitpod\ntags: [\"Company building\"]\nsubtitle:\nteaserImage: teaser.jpg\ntitle: A day with Gitpod\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\nOn the <a class=\"no-nowrap\" href=\"https://gitpodcommunityday.org\">27th of April there will be a one-day virtual conference</a> where members from the Gitpod team will be spending dedicated time with you, our community.","metadata":{"source":"https://www.gitpod.io/blog/a-day-with-gitpod","loc":{"lines":{"from":1,"to":17}}}}],["31",{"pageContent":"At the Gitpod Community day you'll learn about the north stars that are guiding product development from our CEO - Sven Efftinge and the inner technical architecture of Gitpod from our Chief Architect - Christian Weichel. Michael Friedrich from GitLab will be making an appearance to provide insights into how Gitpod makes it easier for open-source maintainers to attract contributors and, finally, Gitpod will also be revealing some exciting initiatives but Shhh...Spoilers!\n\nAfter the talks, the conference is largely unstructured as it is about spending time with each other. Sven, Christian and other members of Gitpod will be available all day to spend time with you.","metadata":{"source":"https://www.gitpod.io/blog/a-day-with-gitpod","loc":{"lines":{"from":19,"to":21}}}}],["32",{"pageContent":"After the talks, the conference is largely unstructured as it is about spending time with each other. Sven, Christian and other members of Gitpod will be available all day to spend time with you.\n\nLast week we announced a [$13m funding round](/blog/next-chapter-for-gitpod) led by General Catalyst to accelerate our roadmap and continue to build out a fully distributed world-class team to define a new product category in modern software development and move software development to the cloud. [We are hiring](/careers) ([internationally + remote](https://ghuntley.com/a-new-chapter)) and this the perfect opportunity to ask any questions you may have about life at Gitpod.\n\nThe Gitpod [discord channel](https://www.gitpod.io/chat) is where the event will be taking place. Make sure you have your microphone + camera set up and ready as there will be many video breakout opportunities.","metadata":{"source":"https://www.gitpod.io/blog/a-day-with-gitpod","loc":{"lines":{"from":21,"to":25}}}}],["33",{"pageContent":"Registration for the Gitpod Community Day is now open and more information can be found at https://gitpodcommunityday.org/","metadata":{"source":"https://www.gitpod.io/blog/a-day-with-gitpod","loc":{"lines":{"from":27,"to":27}}}}],["34",{"pageContent":"---\nauthor: michaelaring\ndate: Thursday, 22 Dec 2022 16:00:00 UTC\nexcerpt: CDEs like Gitpod enable efficient container development on Apple M1. If you use an ARM-based device like an M1 or M2 Mac, you can move the workload of your applications to run in an x86-based Linux container in the cloud.\nslug: better-container-development-on-apple-m1-macbooks-with-gitpod\nteaserImage: teaser.webp\ntags: [\"Engineering\"]\nimage: teaser.webp\ntitle: Better container development on Apple M1 Macbooks with Gitpod\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n<script>\n  import LinkButton from \"$lib/components/ui-library/link-button/link-button.svelte\"\n</script>\n\n**TL;DR**","metadata":{"source":"https://www.gitpod.io/blog/better-container-development-on-apple-m1-macbooks-with-gitpod","loc":{"lines":{"from":1,"to":20}}}}],["35",{"pageContent":"<script context=\"module\">\n  export const prerender = true;\n</script>\n\n<script>\n  import LinkButton from \"$lib/components/ui-library/link-button/link-button.svelte\"\n</script>\n\n**TL;DR**\n\n- Apple M1 and M2 are not compatible with a lot of old and specialized software\n- Existing workarounds like Rosetta or Docker Desktop aren’t optimized for all software written for x86-based hardware\n- Gitpod moves the workload to a Linux container in the cloud and creates a uniform developer experience for everyone on the team independent of their hardware","metadata":{"source":"https://www.gitpod.io/blog/better-container-development-on-apple-m1-macbooks-with-gitpod","loc":{"lines":{"from":20,"to":32}}}}],["36",{"pageContent":"Apple’s introduction of M1 system-on-a-chip (SoC) processors in late 2020 marked a shift away from traditional x86 processors, and a step towards an ARM architecture across their devices. The key benefits of the M1 are high performance, energy efficiency, and importantly, the same CPU architecture type of their iPad and iPhone devices. Starting at [a thousand dollars per machine](https://www.apple.com/macbook-air-m1/specs/), developers get computers with 3.5x improved CPU performance and 2x improved battery life over their old MacBooks running on Intel’s architecture.\n\nUnfortunately, the difference in CPU architectures can lead to unexpected bugs in libraries originally written for x86-64.","metadata":{"source":"https://www.gitpod.io/blog/better-container-development-on-apple-m1-macbooks-with-gitpod","loc":{"lines":{"from":34,"to":36}}}}],["37",{"pageContent":"Unfortunately, the difference in CPU architectures can lead to unexpected bugs in libraries originally written for x86-64.\n\nThe M1 is based on [ARM architecture](https://en.wikipedia.org/wiki/AArch64), which is different from the x86 architecture used in most personal computers and servers. This means that the M1 is not natively compatible with all software that is available for x86 devices. Although Apple is working towards making a wider range of software available for M1 devices, developers frequently face compatibility issues.\n\nIn fact, the Apple M1 compatibility problem in container development even sparked the creation of a dedicated website: [Is Apple Silicon ready?](https://isapplesiliconready.com/)","metadata":{"source":"https://www.gitpod.io/blog/better-container-development-on-apple-m1-macbooks-with-gitpod","loc":{"lines":{"from":36,"to":40}}}}],["38",{"pageContent":"Existing workarounds\n\n[Rosetta](https://developer.apple.com/documentation/virtualization/running_intel_binaries_in_linux_vms_with_rosetta) is a virtualization layer provided by Apple to translate the x86-64 instructions to ARM-compatible instructions. It makes applications require more resources and run more slowly. An alternative, Docker Desktop on Mac M1 is considered a [“best-effort” solution](https://docs.docker.com/desktop/troubleshoot/known-issues/) that has to emulate Intel images for programs that don’t support ARM architecture. This can cause the program to break, run more slowly, and consume more resources.\n\nAs an example, existing containers written for the x86 CPU architecture can be built using [QEMU and Docker buildx](https://www.docker.com/blog/multi-arch-images/), allowing you to build containers for multiple platforms in a single command.","metadata":{"source":"https://www.gitpod.io/blog/better-container-development-on-apple-m1-macbooks-with-gitpod","loc":{"lines":{"from":42,"to":46}}}}],["39",{"pageContent":"This comes with a speed tradeoff during build processes. Some organizations find the speed worth it, and others set up [dedicated systems for build processes on native architecture](https://docs.docker.com/engine/reference/commandline/buildx_create/#driver-opt).\n\nIf you use an ARM-based device like an M1 or M2 Mac, you can move the working load of your applications to run in an x86-based Linux container in the cloud with Gitpod.","metadata":{"source":"https://www.gitpod.io/blog/better-container-development-on-apple-m1-macbooks-with-gitpod","loc":{"lines":{"from":48,"to":50}}}}],["40",{"pageContent":"CDEs help with developing x86-64 software on Mac\n\nCloud development environments like Gitpod offer a robust solution to do container development for x86-64 software on Apple M1. Gitpod enables you to use any Linux-based software, CLIs, or developer tools to use in your daily routine with more power and without hardware limitations. The setup cost is minimal as new users can start from any Git repository at the click of a button. Additionally, using Gitpod eliminates the need to pay for a Docker Desktop license.","metadata":{"source":"https://www.gitpod.io/blog/better-container-development-on-apple-m1-macbooks-with-gitpod","loc":{"lines":{"from":52,"to":54}}}}],["41",{"pageContent":"> “CDEs are like perfectly configured, high-powered developer laptops that you can use and discard as easily as sticky notes. One perfect laptop for every project you work on, so you can say goodbye to dependency collision issues between unrelated projects.\n>\n> Never again stress over updating your operating system, only to spend the next three days figuring out why iconv won't link properly anymore or spend hours tracking down why that one header file can't be found. Less time on StackOverflow means more time creating awesome stuff.\n>\n> Need to work on that project from five years ago? What do you think the probability is that your dev environment is still compatible? Exactly. CDEs make working on old stuff a breeze.”\n>\n> ~ [Tom Preston-Werner](https://twitter.com/mojombo/status/1588263791598325761)","metadata":{"source":"https://www.gitpod.io/blog/better-container-development-on-apple-m1-macbooks-with-gitpod","loc":{"lines":{"from":56,"to":62}}}}],["42",{"pageContent":"Using a CDE like Gitpod for software development, the laptop layer is abstracted away and every engineer gets access to a standardized development environment. This is most relevant to engineering teams that use different types of computers. Regardless of whether your team runs Mac with Intel, Mac with ARM, Linux, or Windows machines, everyone will get a uniform developer experience. The CDE does not dictate the choice of the editor and other developer tools, however. Running Gitpod, engineers can continue to use their local VS Code or JetBrains IDE but their code runs in a [CDE](/cde) in the cloud.\n\nIf you encounter M1 and M2 compatibility issues in your engineering org, [contact us](/contact/sales) to learn about our enterprise solutions. If you want to get a better idea of how a CDE works, spin up a Gitpod workspace from any git repository just now.\n\n<LinkButton href=\"https://gitpod.io/login\" variant=\"primary\" size=\"large\">Get started for free</LinkButton>","metadata":{"source":"https://www.gitpod.io/blog/better-container-development-on-apple-m1-macbooks-with-gitpod","loc":{"lines":{"from":64,"to":68}}}}],["43",{"pageContent":"---\nauthor: jankeromnes\ndate: Thu, 02 Jul 2020 14:00:00 UTC\nexcerpt: We’re excited to bring you instant developer environments for all Bitbucket projects.\nimage: teaser.jpg\nslug: bitbucket\nsubtitle: Instant dev environments for all Bitbucket projects\nteaserImage: teaser.jpg\ntags: [\"Gitpod updates\"]\ntitle: Gitpod for Bitbucket 🚀\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\nToday, we're excited to bring you instant developer environments for all Bitbucket projects.\n\nSimply type `gitpod.io/#` in front of any Bitbucket repository URL, and get a fully prebuilt and ready-to-code dev environment in seconds.\n\n`youtube: hIpFTGwsv-o`","metadata":{"source":"https://www.gitpod.io/blog/bitbucket","loc":{"lines":{"from":1,"to":21}}}}],["44",{"pageContent":"Getting started with Gitpod for Bitbucket\n\nStarting a fresh dev environment for a Bitbucket project works just as with GitLab and GitHub: Simply prefix your Bitbucket project URL with `gitpod.io/#`.\n\nFor example, you could try opening this Spring PetClinic (Java) repository in Gitpod:\n\nhttps://gitpod.io/#https://bitbucket.org/gitpod/spring-petclinic\n\nFor more convenience, you can also install Gitpod's browser extension (for [Chrome](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) and [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/)), which will add a `Gitpod` button to all Bitbucket projects or alternatively use our [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet).\n\nGitpod also supports other types of Bitbucket URLs, like:\n\n- Opening file URLs","metadata":{"source":"https://www.gitpod.io/blog/bitbucket","loc":{"lines":{"from":23,"to":35}}}}],["45",{"pageContent":"Gitpod also supports other types of Bitbucket URLs, like:\n\n- Opening file URLs\n\n  <p>Example: <a href=\"https://gitpod.io/#https://bitbucket.org/gitpod/spring-petclinic/src/master/src/main/java/org/springframework/samples/petclinic/PetClinicApplication.java\" target=\"blank\"><b style=\"font-weight:700;\">https://gitpod.io/#</b>https://bitbucket.org/gitpod/spring-petclinic/../petclinic/PetClinicApplication.java</a></p>\n\n- Opening branches\n\n  <p>Example: <a href=\"https://gitpod.io/#https://bitbucket.org/gitpod/spring-petclinic/src/my-branch/\" target=\"blank\"><b style=\"font-weight:700;\">https://gitpod.io/#</b>https://bitbucket.org/gitpod/spring-petclinic/src/my-branch/</a></p>\n\n- Opening issues\n\n  <p>Example: <a href=\"https://gitpod.io/#https://bitbucket.org/gitpod/spring-petclinic/issues/1/make-first-name-optional\" target=\"blank\"><b style=\"font-weight:700;\">https://gitpod.io/#</b>https://bitbucket.org/gitpod/spring-petclinic/issues/1/make-first-name-optional</a></p>\n\n- Opening pull requests","metadata":{"source":"https://www.gitpod.io/blog/bitbucket","loc":{"lines":{"from":35,"to":49}}}}],["46",{"pageContent":"- Opening pull requests\n\n  <p>Example: <a href=\"https://gitpod.io/#https://bitbucket.org/gitpod/spring-petclinic/pull-requests/1/allow-omitting-first-name/diff\" target=\"blank\"><b style=\"font-weight:700;\">https://gitpod.io/#</b>https://bitbucket.org/gitpod/spring-petclinic/pull-requests/1/allow-omitting-first-name/diff</a></p>\n\nDepending on the context, your dev environment will be initialized differently.\n\nFor instance, if you start a workspace from the issue context above, you’ll get a fresh workspace with a new local branch based on the repository's default branch (e.g. `master`).\n\nThe new local branch will be named like `<username>/<issue-title>-<issue-nr>`, in my case it is:\n`svenefftinge/allow-skip-first-name-1` (if the issue title is too long, only the first few words will be included in the branch name).\n\n![GitLab Issue Context](../../../static/images/blog/gitlab-support/gitlab-issue-context-status.png)","metadata":{"source":"https://www.gitpod.io/blog/bitbucket","loc":{"lines":{"from":49,"to":60}}}}],["47",{"pageContent":"Configure your project\n\nTo get the most out of Gitpod, you should describe your project's dev environment with code. Dev environments are based on containers which you can configure through a custom `Dockerfile`.\n\nFurthermore you can specify which tasks should run after a fresh checkout in a `.gitpod.yml` file. Usually these tasks include build steps, downloading dependencies and running some unit tests. Read the section below on prebuilds to make Gitpod automatically run these steps ahead of time, as a CI pipeline whenever some changes are pushed to your project.\n\nThere is much more you can do to make sure every organization member gets a ready-to-code dev environment when they need one. Please refer to the [docs](/docs/configure) for details.","metadata":{"source":"https://www.gitpod.io/blog/bitbucket","loc":{"lines":{"from":62,"to":68}}}}],["48",{"pageContent":"Prebuilds\n\nGitpod’s [prebuilt workspaces](/docs/configure/projects/prebuilds) are key to providing ephemeral, ready-to-code dev environments for your branches and projects. You can configure Gitpod to run your project's build asynchronously every time someone pushes new commits or branches to your repository. So when a developer wants to start coding, she can start immediately, because everything is already prepared.\n\nEnabling prebuilds on your Bitbucket project is done by configuring a Webhook. This can be done automatically: Just trigger the first prebuild on your project manually, and Gitpod will take it from there. To do that, use the prefix `https://gitpod.io/#prebuild/`, as in\n\n> **https://gitpod.io/#prebuild/**`https://bitbucket.org/<myuser>/<myrepo>`","metadata":{"source":"https://www.gitpod.io/blog/bitbucket","loc":{"lines":{"from":70,"to":76}}}}],["49",{"pageContent":"We Need Your Feedback\n\nIf you have ideas how Gitpod can be improved for you, or if you notice a bug, please always feel free to [let us know](https://github.com/gitpod-io/gitpod/issues). We would also be glad to welcome you in our [community](https://community.gitpod.io). ❤️","metadata":{"source":"https://www.gitpod.io/blog/bitbucket","loc":{"lines":{"from":78,"to":80}}}}],["50",{"pageContent":"---\nauthor: jankeromnes\ndate: Wed Jan 8 2020 09:00:00 GMT+0000 UTC\nexcerpt: Are you tired of apt-get? Can’t use sudo right now? ... You can now ’brew install anything’ in Gitpod! 🎉\nimage: teaser-brew.png\nslug: brew\nsubtitle: \"'brew install anything' in Gitpod\"\nteaserImage: teaser-brew.png\ntags: [\"Engineering\", \"Gitpod updates\"]\ntitle: Gitpod ❤️ Homebrew\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\nAre you tired of **apt-get**? Can't use **sudo** right now? …","metadata":{"source":"https://www.gitpod.io/blog/brew","loc":{"lines":{"from":1,"to":17}}}}],["51",{"pageContent":"You can now '**brew install anything**' in Gitpod! 🎉\n\n- ✓ Easily install any Linux tool or package with one command\n- ✓ Doesn't require `sudo` permission\n- ✓ Works in your [.gitpod.Dockerfile](/docs/configure/workspaces/workspace-image) or directly in Gitpod's Terminal\n\nIf you use a Mac, or have friends who use a Mac, you've probably heard of the trusty [brew](https://brew.sh/) command which allows you to install pretty much any software, from `git` to `clang` to `htop`.\n\nHomebrew is quite convenient, and its packages are very well maintained: You'll usually get the latest stable version of any tool (e.g. Git `2.24.1`) while other package managers can typically lag several versions behind (e.g. Ubuntu 18.04 only gives you Git `2.17.1` by default).","metadata":{"source":"https://www.gitpod.io/blog/brew","loc":{"lines":{"from":19,"to":27}}}}],["52",{"pageContent":"What you may not necessarily know is that Homebrew now works on Linux too (it was originally announced as \"Linuxbrew\", but now it's just called [Homebrew on Linux](https://docs.brew.sh/Homebrew-on-Linux)). This got us pretty excited, because we saw it as an opportunity for developers to easily install any software package in Gitpod, without needing to set up a Dockerfile and then fire up another workspace to test it. With Homebrew you can simply run `brew install z` and get going!\n\nWe've pre-installed `brew` for all Gitpod workspaces (using [workspace-full](https://github.com/gitpod-io/workspace-images/blob/d43c719bb2ff7b6849c0456fe21e3ca06c20168f/dazzle.yaml#L30)) and now that we've played with it for a while and are happy with the experience, we're excited to announce it so that you can try it too:","metadata":{"source":"https://www.gitpod.io/blog/brew","loc":{"lines":{"from":29,"to":31}}}}],["53",{"pageContent":"1. Just open any repository in Gitpod (e.g. the [Spring PetClinic](https://gitpod.io/#https://github.com/gitpod-io/spring-petclinic))\n2. Try running `brew install fzf` (this should give you the awesome [fzf](https://github.com/junegunn/fzf) tool)\n\n![Homebrew in Gitpod screenshot](../../../static/images/blog/brew/homebrew-in-gitpod.png)\n\nHere are a couple details to be aware of:\n\n- Packages installed with `brew` have a low priority in the `$PATH`. This means that if you `brew install` a package that already exists in Gitpod, you'll just continue using the old package. If you don't like that, simply `apt-get remove` the old package in your [.gitpod.Dockerfile](/docs/configure/workspaces/workspace-image).","metadata":{"source":"https://www.gitpod.io/blog/brew","loc":{"lines":{"from":33,"to":40}}}}],["54",{"pageContent":"- `brew` installs everything under `/home/linuxbrew/`, but Gitpod only backs up your Docker image plus everything inside `/workspace/`. This means that if you `brew install fzf` in a Gitpod terminal, and then your workspace stops running, when you restart it later the package `fzf` will be gone. If that's a problem, simply move the `brew install fzf` command into your [.gitpod.Dockerfile](/docs/configure/workspaces/workspace-image) to make it permanent.\n\nWe hope this feature makes you as happy as it made us! Please share any [feedback, thoughts](https://community.gitpod.io/) or [bugs](https://github.com/gitpod-io/gitpod/issues/new/choose) you found.","metadata":{"source":"https://www.gitpod.io/blog/brew","loc":{"lines":{"from":42,"to":44}}}}],["55",{"pageContent":"---\nauthor: anudeepreddy\ndate: Wed Jun 26 2019 11:57:00 GMT+0000 (UTC)\nexcerpt: Build your webhook for your Google Assistant action and host it temporarily on Gitpod and test your code.\nimage: Build-and-test-your-webhook.png\nslug: build-a-webhook-for-google-assistant\ntags: [\"Engineering\"]\nsubtitle: Build and test your webhook using Gitpod\ntitle: Build a Webhook for Google Assistant Action\nurl: https://blog.anudeepreddy.ml/build-a-webhook-for-google-assistant/\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\nThis post is all about how to build your webhook for your Google Assistant action and host it temporarily on Gitpod and test your code.\n\n## Prerequisites\n\n- Node JS\n- Express JS\n- Basics on how to use GitHub\n\nIf you have these in place, Let's get started.","metadata":{"source":"https://www.gitpod.io/blog/build-a-webhook-for-google-assistant","loc":{"lines":{"from":1,"to":25}}}}],["56",{"pageContent":"What is Gitpod?\n\nFirst of all I would like to start this section by saying, I ❤ Gitpod. Gitpod is an online IDE for GitHub. Gitpod provides you with a fully working developer environment, including a VS Code-powered IDE and a cloud-based Linux container configured specifically for the project at hand. Just prefix your GitHub repo URL with \"https://gitpod.io/#\", So that the final link looks something like this \"https://gitpod.io/#https://github.com/<username>/<repo-name>\" or you can also use the Gitpod [browser extension](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki?hl=en) to add the Gitpod button to GitHub page.\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube-nocookie.com/embed/bFZMKpDV3GQ\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" title=\"Gitpod Always Ready-to-Code video\" allowfullscreen></iframe>","metadata":{"source":"https://www.gitpod.io/blog/build-a-webhook-for-google-assistant","loc":{"lines":{"from":27,"to":31}}}}],["57",{"pageContent":"Let's start building\n\nI have created a GitHub repo which will help you get started without any hassle. The repo is basically a boilerplate to get started with building your webhook. The code is written in Node JS, So it would be easier for you to build on top of it if you are already familiar with Node JS. We will be using the [action-on-google](https://www.npmjs.com/package/actions-on-google) Node JS library (This client library makes it easy to create Actions for the Google Assistant and supports Dialogflow, Actions SDK, and Smart Home fulfillment.).","metadata":{"source":"https://www.gitpod.io/blog/build-a-webhook-for-google-assistant","loc":{"lines":{"from":33,"to":35}}}}],["58",{"pageContent":"Create your Action\n\n- Head over to https://console.actions.google.com/ and click on New Project.\n\n![Google Actions Console](https://res-2.cloudinary.com/anudeepc/image/upload/q_auto/v1/blog-images/Annotation-2019-06-28-141627.png)\n\n- Enter your project name and click on create project.\n\n![Google Actions Create New Project Prompt](https://res-1.cloudinary.com/anudeepc/image/upload/q_auto/v1/blog-images/gitpod-action.png)\n\n- Now select a category for your Action.\n- Now under the Develop menu, give your action a name.\n- Now head over to actions menu in Develop tab and click on **Add your first action**.\n\n!['Add your first action' button](https://res-1.cloudinary.com/anudeepc/image/upload/q_auto/v1/blog-images/temp2.png)\n\n- In the next section choose **custom intent** and click on **build**. Doing this will redirect you to the **Dialogflow console** and it should look something like this.\n\n![Dialogflow console](https://res-3.cloudinary.com/anudeepc/image/upload/q_auto/v1/blog-images/temp3.png)","metadata":{"source":"https://www.gitpod.io/blog/build-a-webhook-for-google-assistant","loc":{"lines":{"from":37,"to":55}}}}],["59",{"pageContent":"![Dialogflow console](https://res-3.cloudinary.com/anudeepc/image/upload/q_auto/v1/blog-images/temp3.png)\n\n- Click on create to **create** your agent on Dialogflow.\n- Once your agent is ready, you will already have two default Intents (Default Fallback Intent and Default Welcome Intent) in place and these two do pretty good at their job.\n- Now it's time to create a new intent and enable fulfillments for that intent so that we can serve responses from the webhook that we will be building in the next section.\n- Click on create a new intent, give it a name and training phrase (training phrase will be used to invoke the intent). Now that your intent is almost ready scroll down and under fulfillments **enable webhook call** for the new Default welcome intent and the new intent you just created.","metadata":{"source":"https://www.gitpod.io/blog/build-a-webhook-for-google-assistant","loc":{"lines":{"from":55,"to":60}}}}],["60",{"pageContent":"Understanding .gitpod.yml\n\nThe .gitpod.yml file is used to automate setting up the environment required to run your app.\n\n![.gitpod.yml environment setup for running your app](https://res-5.cloudinary.com/anudeepc/image/upload/q_auto/v1/blog-images/carbon--4-.png)\n\nIf you want to access services running in your workspace, e.g. a development HTTP server on port 8080, you need to expose that port first. Gitpod has two means of doing that:\n\n1. On-the-fly: when you start a process which listens on a port in your workspace, Gitpod will ask you if you want to expose that port to the internet.\n2. In your configuration: if you already know that you want a particular port exposed, you can configure it in the .gitpod.yml file and skip the extra click later on. For example:\n\n```yaml\nports:\n  - port: 3000","metadata":{"source":"https://www.gitpod.io/blog/build-a-webhook-for-google-assistant","loc":{"lines":{"from":62,"to":75}}}}],["61",{"pageContent":"When starting or restarting a workspace you typically want to run certain tasks. Most probably that includes the build and maybe also running tests and automatically start the application in e.g. a dev server.\n\nGitpod allows you to configure start tasks in the .gitpod.yml file.\n\nFor instance, the start script for this repository is defined as:\n\n```yaml\ntasks:\n  - init: npm install\n    command: npm start\n```\n\nYou can have multiple tasks, which are opened on separated terminals.\n\n```yaml\ntasks:\n  - init: npm install\n    command: npm start\n  - command: echo -e \"\\n\\nwebhook url - $(gp url 3000)/webhook \\n\\nCopy and paste this url in the Dialogflow console\"\n```","metadata":{"source":"https://www.gitpod.io/blog/build-a-webhook-for-google-assistant","loc":{"lines":{"from":78,"to":97}}}}],["62",{"pageContent":"`init` command\n\nThe init property can be used to specify shell commands that should only be executed after a workspace was freshly cloned and needs to be initialized somehow. Such tasks are usually builds or downloading dependencies. Anything you only want to do once but not when you restart a workspace or start a snapshot.\n\nIn our case the `init` command is\n\n```yaml\ntasks:\n  - init: npm install\n```","metadata":{"source":"https://www.gitpod.io/blog/build-a-webhook-for-google-assistant","loc":{"lines":{"from":99,"to":108}}}}],["63",{"pageContent":"Get the Gitpod setup running\n\n- Fork my <a class=\"no-nowrap\" href=\"https://github.com/anudeepreddy/dialogflow-webhook-boilerplate-nodejs\">repo (dialogflow-webhook-boilerplate-nodejs)</a> **or** just click on the run in gitpod button in my repo. (If you do this you have to fork it from the workspace so that you can commit your own changes to your repo).\n- Now you can just prefix your repo url with \"https://gitpod.io/#\". This should take you to Gitpod and start your workspace. The workspace take a little while to start.\n- Once the workspace is running you should see something like this.\n\n![Gitpod Workspace](https://res-2.cloudinary.com/anudeepc/image/upload/q_auto/v1/blog-images/Annotation-2019-06-25-171555.png)\n\n- If you notice the Node app is already running in the first terminal. This is automated by a Gitpod configuration file. And the webhook URL is printed on to the second terminal. All the dependencies that are required are also installed while creating the workspace.","metadata":{"source":"https://www.gitpod.io/blog/build-a-webhook-for-google-assistant","loc":{"lines":{"from":110,"to":118}}}}],["64",{"pageContent":"![Gitpod integrated Linux Terminals](https://res-5.cloudinary.com/anudeepc/image/upload/q_auto/v1/blog-images/Annotation-2019-06-25-171555-crop.png)\n\n- Now that the webhook is running and i presume that you already have your agent on Dialogflow (If not create an agent), Next thing you need to do is to copy the webhook URL from the terminal and paste it in the Fulfillments section in the Dialogflow Console.\n\n![Dialogflow console Fullfillments section](https://res-5.cloudinary.com/anudeepc/image/upload/q_auto/v1/blog-images/Annotation-2019-06-25-172359.png)\n\n- Open the index.js file which contains the code for the webhook.\n\n![File index.js which contains the source code for the webhook](https://res-1.cloudinary.com/anudeepc/image/upload/q_auto/v1/blog-images/carbon--1-.png)","metadata":{"source":"https://www.gitpod.io/blog/build-a-webhook-for-google-assistant","loc":{"lines":{"from":120,"to":128}}}}],["65",{"pageContent":"![File index.js which contains the source code for the webhook](https://res-1.cloudinary.com/anudeepc/image/upload/q_auto/v1/blog-images/carbon--1-.png)\n\nThe file initially contains this code. Now lets add some more code to it to display a card when we invoke the new intent we created in the previous section.\nactions-on-google library provides many functionalities to can simplify your task to render rich responses in your action.\n\nWe will be adding the following code to display a card when the new intent is invoked.\n\n![Code to display a card when the new intent is invoked](https://res-1.cloudinary.com/anudeepc/image/upload/q_auto/v1/blog-images/carbon--3-.png)\n\nReplace the URL's and other contents in the code and stop the previous instance of the app from running and start it again after you have made changes to the code by running `npm start` in the terminal.\n\n- To test your action you can click on **See how it works in Google Assistant** in the Dialogflow console.","metadata":{"source":"https://www.gitpod.io/blog/build-a-webhook-for-google-assistant","loc":{"lines":{"from":128,"to":139}}}}],["66",{"pageContent":"- To test your action you can click on **See how it works in Google Assistant** in the Dialogflow console.\n\n![See how it works in Google Assistant](https://res-3.cloudinary.com/anudeepc/image/upload/q_auto/v1/blog-images/Annotation-2019-06-28-175558.png)\n\n- Invoking the intent would give you response similar to this.\n\n![Response on invoking the intent](https://res-5.cloudinary.com/anudeepc/image/upload/q_auto/v1/blog-images/Screenshot_20190628-181019.png)\n\nRefer to the links below to add your own functionalities.","metadata":{"source":"https://www.gitpod.io/blog/build-a-webhook-for-google-assistant","loc":{"lines":{"from":139,"to":147}}}}],["67",{"pageContent":"Links to Refer\n\n- If you would like to learn more about the actions-on-google library, you can find it here - <a class=\"no-nowrap\" href=\"https://www.npmjs.com/package/actions-on-google\">https://www.npmjs.com/package/actions-on-google</a>\n- Go through these examples - <a class=\"no-nowrap\" href=\"https://developers.google.com/assistant/conversational/df-asdk/samples/github\">https://developers.google.com/assistant/conversational/df-asdk/samples/github</a>\n- Rich responses example - <a class=\"no-nowrap\" href=\"https://github.com/actions-on-google/dialogflow-conversation-components-nodejs\">https://github.com/actions-on-google/dialogflow-conversation-components-nodejs</a>","metadata":{"source":"https://www.gitpod.io/blog/build-a-webhook-for-google-assistant","loc":{"lines":{"from":149,"to":153}}}}],["68",{"pageContent":"Conclusion\n\nGitpod can make your life much simpler by automating your development setup just by adding a simple configuration file to your repo. You can refer to the Gitpod [Docs](/docs) to learn more about the platform. Gitpod lets you work with unlimited workspace but with 100hrs/month runtime. It also provides Personal and unlimited plans as well.\n\n![Animated character waving hand with a smile](https://res-3.cloudinary.com/anudeepc/image/upload/q_auto/v1/blog-images/character.gif)\n\n<div class=\"h3 text-important font-bold\">Happy coding with Gitpod ✨</div>","metadata":{"source":"https://www.gitpod.io/blog/build-a-webhook-for-google-assistant","loc":{"lines":{"from":155,"to":161}}}}],["69",{"pageContent":"---\nauthor: pawlean, mikenikles, loujaybee\ndate: Mon, 06 Dec 2021 11:00:00 UTC\nexcerpt: For our fourth edition of DevX Digest, we’d like to introduce our new podcast with a first episode all about building a developer experience team!\nimage: header.jpg\nslug: building-devx-teams\nsubtitle:\nteaserImage: header.jpg\ntitle: DevX Digest 04 - Building a Developer Experience team\ntags: [\"Developer experience\"]\ntype: digest\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n**Welcome to DevX Digest - the place to hear all about Developer Experience**, brought to you by Pauline Narvas [(@paulienuh)](https://twitter.com/paulienuh) and Mike Nikles [(@mikenikles)](https://twitter.com/mikenikles) from Gitpod. You're reading another newsletter from us 🎉! In this edition, we talk about developer experience in cloud-based,ephemeral dev environments.","metadata":{"source":"https://www.gitpod.io/blog/building-devx-teams","loc":{"lines":{"from":1,"to":18}}}}],["70",{"pageContent":"This edition is particularly exciting as we’ve launched **DevX Pod** which is a podcast ALL ABOUT developer experience. Inspired by the conversations from DevX Conf that we hosted earlier this year and the growing interest in DevX space recently... we were both like, 💡 _“People seem interested in this and there isn’t a lot of information out there on it yet. Let’s contribute to the space and do this!”_ 💡","metadata":{"source":"https://www.gitpod.io/blog/building-devx-teams","loc":{"lines":{"from":20,"to":20}}}}],["71",{"pageContent":"How do you build a DevX Team? 🛠\n\nOur first episode features [Cirpo](https://twitter.com/cirpo), Head of Developer Experience at DAZN Engineering and [Lou](https://twitter.com/loujaybee), Product Manager at Gitpod. In a previous life, Lou worked with Cirpo as one of the founding figures in DevX at DAZN, they even wrote [a blog post](https://medium.com/dazn-tech/developer-experience-dx-at-dazn-e6de9a0208d2) all about their values, focus, team structure, learnings and more.\n\n![DevX Podcast Episode 1](../../../static/images/blog/building-devx-teams/podcast.png)\n_DevX Pod is available wherever you get your podcasts!_\n\nUnlike more “external-facing” DevX content that is seen more often in the wild, this episode focused more on “internal-facing” DevX i.e. from the POV of an internal team (also known sometimes as platform/tooling/infrastructure teams) where improving developer experience was the full-time responsibility.","metadata":{"source":"https://www.gitpod.io/blog/building-devx-teams","loc":{"lines":{"from":22,"to":29}}}}],["72",{"pageContent":"There were so many gems in the episode, we encourage you to listen to it! However, if you prefer you can also read the full transcript [here.](https://www.buzzsprout.com/1895030/9637256)","metadata":{"source":"https://www.gitpod.io/blog/building-devx-teams","loc":{"lines":{"from":31,"to":31}}}}],["73",{"pageContent":"Our key take-home messages were:\n\n- Developer Experience is still a very new space, but clearly **a very hot topic!**\n\n- When we talk about developer experience, it **falls into two areas:** internal DevX (sometimes companies have a dedicated team to improving internal developer experience) or applying user experience to a developer product (e.g. Netlify)\n\n- **How do we measure the success of DevX? How can we get buy-in from leadership to invest in DevX?** There are no specific frameworks that can give you consistent data when it comes to tracking developer experience. This can make getting buy-in from stakeholders difficult, however, Cirpo shared that he thinks his main success in DAZN’s DevX team was the fact that they started small, showing the impact by the result of fewer complaints on using internal tooling (and the number of happy faces!) which led to gaining more trust and investment from leadership.","metadata":{"source":"https://www.gitpod.io/blog/building-devx-teams","loc":{"lines":{"from":33,"to":39}}}}],["74",{"pageContent":"- Although in the developer experience space there is a burning lens on tooling, it doesn’t end there. We discuss how it’s also all about **people, all about community and that empathy is important more than ever in DevX!**\n\n- “Tools got us into this, will tools get us out?” A great question by Lou. Technology is complicated nowadays. With the vast amount of tools we have at our disposal, it can be overwhelming trying to piece them all together so that they work seamlessly in our ecosystem. That glue itself is developer experience. **How can we productively use all these tools?**\n\n- The DevX that made Cirpo mind explode was the first time he customised his terminal to be colourful. The reason this was mind blowing was because “back in the day”, it was black and white. Now with the infinite customisation opportunities, **developers can really feel like their toolkit works _for_ them.**","metadata":{"source":"https://www.gitpod.io/blog/building-devx-teams","loc":{"lines":{"from":41,"to":45}}}}],["75",{"pageContent":"- Lou shared an integration that was built at DAZN. Something that he has wanted in every single tool since and that is **an integrated error map.** This error map helps devs understand what is going on when they hit an issue so they can unblock themselves quicker and stay in flow. This is exactly what developer experience is all about!\n\n- Even if you don’t have the time to integrate some StackOverFlow like solution into your product, Cirpo reminds us that **sometimes the most simple actions can have a big impact on DevX.** For instance, writing meaningful error suggestions could make someone’s experience trying to debug issues 100x better.\n\n- The final parts of our fun conversation, we all shared our hopes and dreams of DevX. Cirpo’s answer was one that we needed to highlight. He hopes that in the future, we all move towards a more **360 degrees approach** in DevX. Not just this obsession with tools, but equally with people and community.","metadata":{"source":"https://www.gitpod.io/blog/building-devx-teams","loc":{"lines":{"from":47,"to":51}}}}],["76",{"pageContent":"- It was also mentioned that having more content like this to help educate and bring more folks into the DevX world is so needed. **Sharing is caring:** we can collectively improve developer’s daily experience by just sharing our learnings with each other.","metadata":{"source":"https://www.gitpod.io/blog/building-devx-teams","loc":{"lines":{"from":53,"to":53}}}}],["77",{"pageContent":"DevX Digest is community-driven 🤝\n\nThere’s clearly folks excited about DevX, so let’s continue talking ⚡️ In fact, Lou’s recent [Twitter Thread](https://twitter.com/loujaybee/status/1466042887716720640) is a great reinforcement of why we are doing this.\n\nAs a result, we’ve recently improved the dedicated area in our Discord server to build up on the developer experience community. If you’re interested in developer experience either from a team-building perspective or from the tooling side of things, come and join us!\n\n![DevX Podcast Episode 1](../../../static/images/blog/building-devx-teams/DevX-Discord.png)\n\nThat’s it for now, thanks folks! See you over [on our Discord.](https://www.gitpod.io/chat) 👋🏼","metadata":{"source":"https://www.gitpod.io/blog/building-devx-teams","loc":{"lines":{"from":55,"to":63}}}}],["78",{"pageContent":"---\nauthor: JohannesLandgraf\ndate: Tue, 24 Jan 2023 17:00:00 UTC\nexcerpt: Today I have some tough news to share. I decided to reduce the size of the Gitpod team by 28%, saying goodbye to 21 Gitpodders. This is the most difficult decision I’ve made to-date and it impacts the lives and families of colleagues and friends we care about. It hurts, and I apologize for hiring too aggressively for the macroeconomic environment we are in today.\nimage: teaser.webp\nslug: building-for-the-long-run\nteaserImage: teaser.webp\ntags: [\"Gitpod updates\"]\ntitle: Building for the long run\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n> CEO Johannes Landgraf sent the following note earlier today to all Gitpod employees.","metadata":{"source":"https://www.gitpod.io/blog/building-for-the-long-run","loc":{"lines":{"from":1,"to":16}}}}],["79",{"pageContent":"<script context=\"module\">\n  export const prerender = true;\n</script>\n\n> CEO Johannes Landgraf sent the following note earlier today to all Gitpod employees.\n\nToday I have some tough news to share. I decided to reduce the size of the Gitpod team by 28%, saying goodbye to 21 Gitpodders. This is the most difficult decision I’ve made to-date and it impacts the lives and families of colleagues and friends we care about. It hurts, and I apologize for hiring too aggressively for the macroeconomic environment we are in today.\n\nWe want to treat Gitpodders leaving with respect and make the process as caring as possible. I want to openly share the reasons that led to the decision:","metadata":{"source":"https://www.gitpod.io/blog/building-for-the-long-run","loc":{"lines":{"from":16,"to":24}}}}],["80",{"pageContent":"We want to treat Gitpodders leaving with respect and make the process as caring as possible. I want to openly share the reasons that led to the decision:\n\n- During the market upswing of 2021 and early 2022, we built up the organization counting on a continued period of low interest rates and cheap capital. We increased operating costs too quickly and over-hired for the market environment we face today.\n- With the strategic decision on Nov-22 [to replace our self hosted product with an enterprise cloud offering](https://www.gitpod.io/blog/introducing-gitpod-dedicated), we turned away from immediate cash flow and have optimized for development velocity and eventually faster growth rates. This left us with a larger team than we needed for the phase we are now in.","metadata":{"source":"https://www.gitpod.io/blog/building-for-the-long-run","loc":{"lines":{"from":24,"to":27}}}}],["81",{"pageContent":"At that point I had all the data to make today’s call. Instead, the Nov-22 [announcement of our $25m Series A tripling our company valuation](https://www.gitpod.io/blog/future-of-software-cdes) lulled me into a false sense of security. I avoided fully embracing the new market reality we find ourselves in. I apologize for this and corrected that mistake today.","metadata":{"source":"https://www.gitpod.io/blog/building-for-the-long-run","loc":{"lines":{"from":29,"to":29}}}}],["82",{"pageContent":"Our world has now flipped. I agree with [Howard Marks](<https://en.wikipedia.org/wiki/Howard_Marks_(investor)>) when he writes about a macroeconomic [sea change](https://www.oaktreecapital.com/insights/memo/sea-change). Inflation and rising interest rates have led to cash becoming expensive and [efficiency paramount](https://shomik.substack.com/p/why-investors-are-focused-on-efficiency). Gitpod now operates under the premise that this will not change within the next 3 years. We will use the fresh capital we raised to scale from a venture-backed company to one that is capital-efficient, with profitability and independence within reach. **A company focused on sustainable growth that serves our customers for the long run.**\n\nHowever difficult, I am convinced this is the right decision.","metadata":{"source":"https://www.gitpod.io/blog/building-for-the-long-run","loc":{"lines":{"from":31,"to":33}}}}],["83",{"pageContent":"To those leaving\n\nWe are deeply grateful for your lasting impact on our culture, product and company. We want you to have confidence in your superpowers – knowing that you will bring them to your next job.\n\nHere are some ways we want to support you:","metadata":{"source":"https://www.gitpod.io/blog/building-for-the-long-run","loc":{"lines":{"from":35,"to":39}}}}],["84",{"pageContent":"Here are some ways we want to support you:\n\n- **Severance.** We are paying 5 weeks’ salary for anyone under 2 years and at least 10 weeks of salary for anyone over 2 years (this may vary by tenure-related local regulations).\n- **Equity.** We are shortening the vesting period by three months for everyone, and if you’ve had more than 2 years of tenure, we are shortening it by 6. We are also increasing the exercise window of all grants from 90 days to 10 years.\n- **Equipment.** You can keep all Gitpod-owned home office equipment including your laptop.\n- **Stipend.** Everyone will still have access to a $500 stipend to use in line with our existing education, physical and mental health benefits. You know what’s best for you.\n- **Career support.** You can opt-in to our talent and recruiting partners offer for resume and LinkedIn profile review, interview training and introductions to available job opportunities.","metadata":{"source":"https://www.gitpod.io/blog/building-for-the-long-run","loc":{"lines":{"from":39,"to":45}}}}],["85",{"pageContent":"This transition is not easy and my hope is that you remember just how valuable you are and find a place where you can thrive. And if you put the dedication that you put into Gitpod into yourself, I am certain you will.","metadata":{"source":"https://www.gitpod.io/blog/building-for-the-long-run","loc":{"lines":{"from":47,"to":47}}}}],["86",{"pageContent":"To those staying\n\nAny layoff necessitates space and time to process. This week all of us - including leadership and myself - are free to dedicate our time and energy to supporting our leaving teammates. Not from obligation or guilt, but from a place of gratitude and care.\n\nFor Gitpodders who want to be supported below are some ways you may choose to do:\n\n- Reach out and ask how you can be there for them - it might be different from what you assume\n- Offer access to your own networks and share a public message listing former Gitpodders you want to personally recommend on LinkedIn (make sure they opt-in)\n- Write a recommendation on individual LinkedIn profiles\n- Offer time for reference calls throughout their job search\n- Write one or two sentences about what you are grateful for about the other person. We will collate and share with those leaving","metadata":{"source":"https://www.gitpod.io/blog/building-for-the-long-run","loc":{"lines":{"from":49,"to":59}}}}],["87",{"pageContent":"Next week we’ll recalibrate, connect, and then move forward with a clear mind. We have ambitious goals and [there is a lot to do in 2023](https://redmonk.com/jgovernor/2022/12/01/the-year-of-the-cloud-development-environment/). This week, however, is not the right time to talk about that. Let’s live up to our core values and show gratitude to our leaving friends and colleagues with whom we loved working.","metadata":{"source":"https://www.gitpod.io/blog/building-for-the-long-run","loc":{"lines":{"from":61,"to":61}}}}],["88",{"pageContent":"---\nauthor: pawlean, michaelaring\ndate: Thursday, 27 Apr 2023 14:00:00 UTC\nexcerpt: Announcing \"CDE Universe\", the conference for Cloud Development Environments\nslug: cde-universe-2023\ntags: [\"Developer experience\"]\nimage: header.webp\nteaserImage: header.webp\ntitle: Why we're launching CDE Universe\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n<script>\n  import LinkButton from \"$lib/components/ui-library/link-button/link-button.svelte\"\n</script>\n\n[Cloud Development Environments](/cde) (CDEs) bring the creative workflow of writing software to the cloud. CDEs make software development more collaborative and powerful. Driven by the benefits of automation and the scale of the cloud, CDEs will bring about a huge leap in developer productivity.","metadata":{"source":"https://www.gitpod.io/blog/cde-universe-2023","loc":{"lines":{"from":1,"to":20}}}}],["89",{"pageContent":"Gitpod is hosting [CDE Universe](https://cdeuniverse.com/) - a 2-day single track conference with 100 participants in San Francisco on June 1-2, 2023. We are bringing together the visionaries, builders, and practitioners that make up the CDE Universe to network, learn, and discuss solutions.\n\nThis is the 3rd annual conference Gitpod is hosting for the ecosystem. After two virtual editions of [DevX Conf](https://devxconf.org/), focused on developer experience at large, we want to use the more intimate setting of an in-person conference for a focused topic: cloud development.\n\nDevelopers are shaping what the future looks like when it comes to building the next generation of tooling. CDE Universe is a place to choose and discuss what the future should be.","metadata":{"source":"https://www.gitpod.io/blog/cde-universe-2023","loc":{"lines":{"from":22,"to":26}}}}],["90",{"pageContent":"Developers are shaping what the future looks like when it comes to building the next generation of tooling. CDE Universe is a place to choose and discuss what the future should be.\n\nEngineering teams large and small are moving beyond local development in search of a more collaborative and seamless developer experience. Platform engineering and DevX teams are tasked with choosing the right software and systems that enable developer self-serve. Gitpod is hosting an in-person event for these practitioners to discuss how we can increase the velocity, autonomy, productivity and security of our development practices.\n\nDirectionally, the speakers at CDE Universe come from these groups: (1) internal platform teams at leading software companies who have built their own CDE solutions, (2) developer tools that make up the CDE Universe.\n\nAn excerpt of the speaker list:","metadata":{"source":"https://www.gitpod.io/blog/cde-universe-2023","loc":{"lines":{"from":26,"to":32}}}}],["91",{"pageContent":"- **Kent Beck** is a pioneer of software design patterns and methodologies. [Read his blog post on CDEs](https://medium.com/@kentbeck_7670/cloud-development-environments-tame-complexity-by-reducing-state-4a154ea7959f).\n- **Misty de Méo** is a Staff Production Engineer at Shopify. [Read about Shopify's CDE approach](https://shopify.engineering/shopifys-cloud-development-journey).\n- **Sylvestor George** is part of the Remote Development Environments project at Slack. [Read about Slack's CDE approach](https://slack.engineering/remote-development-at-slack/).\n- **Pamela Vagata** was the AI tech lead at Stripe and is now a founding partner at Pebblebed. [Learn more about Pebblebed]().\n- **Soam Vasani** is part of the Dev Environments team at Stripe. [Read about Stripe's CDE approach](https://www.infoq.com/presentations/stripe-dev-env-infrastructure/).","metadata":{"source":"https://www.gitpod.io/blog/cde-universe-2023","loc":{"lines":{"from":34,"to":38}}}}],["92",{"pageContent":"- **Soam Vasani** is part of the Dev Environments team at Stripe. [Read about Stripe's CDE approach](https://www.infoq.com/presentations/stripe-dev-env-infrastructure/).\n- **Shelby Carpenter** is a product marketeer at MongoDB. [Read about how MongoDB works with CDEs](https://www.mongodb.com/developer/products/atlas/streamlining-cloud-native-development-gitpod-atlas/).\n- **Matas Strukčinskas** is part of the Devpod team at Uber. [Read about Uber's CDE approach](https://www.uber.com/en-DE/blog/devpod-improving-developer-productivity-at-uber/).\n- **Johannes Landgraf** is the CEO & co-founder of Gitpod. [Read about Gitpod's vision for CDEs](/cde).","metadata":{"source":"https://www.gitpod.io/blog/cde-universe-2023","loc":{"lines":{"from":38,"to":41}}}}],["93",{"pageContent":"We’ll be announcing additional speakers over the coming days. The conference will be moderated by **Pauline Narvas**, Gitpod’s Head of Community.\n\nSee the full speaker list on the [conference website](https://cdeuniverse.com/).","metadata":{"source":"https://www.gitpod.io/blog/cde-universe-2023","loc":{"lines":{"from":43,"to":45}}}}],["94",{"pageContent":"Attend\n\nCDE Universe is a single track conference over two days. It will be hosted as in-person on June 1st and 2nd in San Francisco, CA. The conference space is limited. In this initial edition, we will have 100 attendees in order to keep this an intimate event that gives the CDE community a chance to have more personal interactions. Head to the [conference website](https://cdeuniverse.com/) to learn more and buy your ticket.","metadata":{"source":"https://www.gitpod.io/blog/cde-universe-2023","loc":{"lines":{"from":47,"to":49}}}}],["95",{"pageContent":"Call for Proposals\n\nOur CFP is live and hosted on [papercall.io](https://www.papercall.io/cde-universe).\n\n<p class='underline underline-offset-1'>If your company made the transition to cloud development environments, we want to hear your story.</p>\n\nJoin the stage at CDE Universe with companies like Uber, Slack, and Stripe who have all created CDE solutions, in search of higher developer productivity.\n\nCDEs allow us to rethink the tools we use to develop software. Topics we’re interested in include:\n\n    - Cloud Development - Secrets management - Ephemeral Databases - Development Infrastructure as Code - Collaboration\n\n    - Deployment - CI/CD Systems for Development - Reproducible builds - Dependencies Management - Testing in Production\n\n    - Development Tooling - Next-gen IDEs, Code Companions, Development containers\n\nThis is not an exhaustive list, but rather a peak at what is possible. For example, if you have a contribution around using LLMs in CDEs, we are interested in hearing it as well.","metadata":{"source":"https://www.gitpod.io/blog/cde-universe-2023","loc":{"lines":{"from":51,"to":67}}}}],["96",{"pageContent":"This is not an exhaustive list, but rather a peak at what is possible. For example, if you have a contribution around using LLMs in CDEs, we are interested in hearing it as well.\n\nWe are looking for 25 minute talks, with 5 minutes for Q&A.","metadata":{"source":"https://www.gitpod.io/blog/cde-universe-2023","loc":{"lines":{"from":67,"to":69}}}}],["97",{"pageContent":"Partnerships\n\nAre you interested in supporting the CDE Universe and get partnership access? You can find our prospectus [here](https://cdeuniverse.com/docs/partners-program-CDEuniverse.pdf). Let's partner up!\n\n## Thank You\n\nWe appreciate our community and look forward to working with you to build a better developer experience for all of us.\n\n<LinkButton href=\"https://cdeuniverse.com/\" variant=\"primary\" size=\"large\">Go to CDE Universe</LinkButton>","metadata":{"source":"https://www.gitpod.io/blog/cde-universe-2023","loc":{"lines":{"from":71,"to":79}}}}],["98",{"pageContent":"---\nauthor: ghuntley\ndate: Friday, 3 September 2021 09:00:00 UTC\nexcerpt: This is a story about a cake. Following a long-standing tradition in technology, we decided to send an edible Gitpod workspace to GitHub's San Francisco office.\nimage: teaser.jpg\nslug: cake\ntags: [\"Company building\"]\nsubtitle:\nteaserImage: teaser.jpg\ntitle: Gitpod shipped GitHub a launch cake for Codespaces\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\nThis is a story about a cake. Following a [long standing tradition in technology](https://www.theverge.com/2012/10/27/3563892/internet-explorer-and-firefox-teams-celebrate-new-versions-with-cakes) we decided to send an edible Gitpod workspace to GitHub's San Francisco office last week. No trojan horse - just a tasty 🎁 🎂 sending them kudos for their [GitHub Codespaces release](/blog/cloud-based-development-for-everyone).","metadata":{"source":"https://www.gitpod.io/blog/cake","loc":{"lines":{"from":1,"to":17}}}}],["99",{"pageContent":"![Credit: Rui Kowase](../../../static/images/blog/cake/github-sf.jpg)\n_Photo Credit: [Rui Kowase](https://www.google.com/maps/contrib/104088632471142363973/photos/@35.7990681,139.6037947,11z/data=!3m1!4b1!4m3!8m2!3m1!1e1)_\n\nI don't know if you have ever tried ordering a cake over the internet but let me tell you it's not the easiest thing in the world, especially when:\n\n- ☠️ We are in the middle of a pandemic.\n- 🎂 You don't know anything about cakes - at all.\n- 😱 Time-zones - Sunny Toowoomba in Queensland, Australia, is on the other side of the world to San Francisco.\n\n![Credit: Geoffrey Huntley](../../../static/images/blog/cake/gitpod-x-codespaces.jpg)\n_Photo Credit: [Geoffrey Huntley](https://twitter.com/geoffreyhuntley)_","metadata":{"source":"https://www.gitpod.io/blog/cake","loc":{"lines":{"from":19,"to":29}}}}],["100",{"pageContent":"![Credit: Geoffrey Huntley](../../../static/images/blog/cake/gitpod-x-codespaces.jpg)\n_Photo Credit: [Geoffrey Huntley](https://twitter.com/geoffreyhuntley)_\n\nAfter checking with an insider at GitHub, we got confirmation that people in the San Francisco office had started to return to the office, that food is being served in their cafeteria and that they would serve our cake. With that knowledge under our belt, at the crack of sparrows, skype was downloaded, and I was off to the races cold calling bakers in San Francisco. Gitpod needed a baker that we should trust [with our brand](/media-kit) and one that would act autonomously because timezones would make further communication impossible.\n\n\"Bakers in San Francisco\" was punched into Google Maps, and top-to-bottom, I called every single one. The responses were somewhat mixed:","metadata":{"source":"https://www.gitpod.io/blog/cake","loc":{"lines":{"from":29,"to":34}}}}],["101",{"pageContent":"\"Bakers in San Francisco\" was punched into Google Maps, and top-to-bottom, I called every single one. The responses were somewhat mixed:\n\n- 🦘 Wait, you are actually Australian and are calling from a McDonalds in Australia at 5am?\n- 🖨 We can print (😱) your logo on a cake, but that's it.\n- 💾 Please go to our website, we don't want to speak with you.\n- 🤷‍♀️ We aren't making custom cakes because we can't find any staff.\n- 🤫 I didn't tell you this, but our competitor might be able to help you out.\n\nThat last tip-off was the tasty butter...\n\n![Credit: Camisha's Cakes](../../../static/images/blog/cake/camishascakes.jpg)\n![Credit: Camisha's Cakes](../../../static/images/blog/cake/camishascakes-gallery.jpg)\n_Photo Credit: [Camisha's Cakes](https://www.camishascakes.com/)_","metadata":{"source":"https://www.gitpod.io/blog/cake","loc":{"lines":{"from":34,"to":46}}}}],["102",{"pageContent":"The brief\n\nThe baker of our cake was none other than Camisha Green of Camisha's Cakes. A professional, independent small business baker who is seriously talented...\n\n- 🌐 https://camishascakes.com\n- 📸 https://www.instagram.com/camishascakes/\n\n![Credit: Camisha's Cakes](../../../static/images/blog/cake/camishagreen.jpg)\n\nUnfortunately, due to timezones, I was unable to contact [camishascakes.com](https://camishascakes.com) by phone, so an email was dispatched:","metadata":{"source":"https://www.gitpod.io/blog/cake","loc":{"lines":{"from":48,"to":57}}}}],["103",{"pageContent":"> 👋 I'm Geoff, from [Gitpod](/), and this email is coming to you from Australia. A competitor of ours in San Francisco launched their product a couple hours ago, and Gitpod would love to send a Gitpod cake to their office in celebration. In the software industry, there is a [long standing tradition](https://timesofindia.indiatimes.com/gadgets-news/why-google-mozilla-sent-cakes-to-microsoft/articleshow/73664799.cms) between competitors sending each other cakes.\n>\n> We would like to know your availability and hear your thoughts about commissioning a cake that uses the Gitpod branding to serve 60-80 people by next Friday.\n>\n> Our style guide can be found at https://www.gitpod.io/assets/style-guide.pdf and the [Kumquat fruit](https://en.wikipedia.org/wiki/Kumquat) is a signature part of the Gitpod brand.\n>\n> Can you please confirm production availability and share your thoughts about cake designs?\n>","metadata":{"source":"https://www.gitpod.io/blog/cake","loc":{"lines":{"from":59,"to":66}}}}],["104",{"pageContent":">\n> Can you please confirm production availability and share your thoughts about cake designs?\n>\n> We are thinking something like [this](https://news-cdn.softpedia.com/images/news2/why-microsoft-google-and-mozilla-send-each-other-cakes-after-launching-browsers-528960-2.jpg) would be mint but instead of the Firefox logo use [our brand](https://www.gitpod.io/images/media-kit/logo-light-theme.png). The top text would be `CONGRATULATIONS ON SHIPPING CODESPACES` and the bottom text would be `LOVE GITPOD`.","metadata":{"source":"https://www.gitpod.io/blog/cake","loc":{"lines":{"from":66,"to":69}}}}],["105",{"pageContent":"Casmisha _promptly_ replied with:\n\n> Thank you for your email and what a fun idea! I'd be happy to give you a quote for this cake :) A half sheet cake, 3 layers high will serve about 60 guests And yes, we can take video and photos of the making as well! Here's the link to my [cake menu](https://www.camishascakes.com/flavors), let me know if you have any questions or if you'd like me to start an order for you\n\nand I promptly replied with:","metadata":{"source":"https://www.gitpod.io/blog/cake","loc":{"lines":{"from":71,"to":75}}}}],["106",{"pageContent":"and I promptly replied with:\n\n> I've been scrolling through your facebook page and would love 🧡 to work with you. Yes, around 60 people would suffice. What if we increased the price of the cake and we made the cake _really_ pop? What that means - I'll leave that up to you.\n>\n> Our style guide is at https://www.gitpod.io/assets/style-guide.pdf\n>\n> Have a look at our website at [https://www.gitpod.io/](/) and you'll notice:\n>\n> - the background colour is white\n> - we accentuate primary using orange\n> - there are other colours that can be optionally used\n>\n> The place where the cake is being sent to has a mascot called the Octocat - go check out Mona at https://octodex.github.com/","metadata":{"source":"https://www.gitpod.io/blog/cake","loc":{"lines":{"from":75,"to":87}}}}],["107",{"pageContent":"Expectations\n\nAs a person who knows nothing about cakes, here's what I had in mind and shared with Camisha...\n\n![Credit: Softpedia](../../../static/images/blog/cake/mozilla-cake.jpg)\n_Photo Credit: [Softpedia](https://news.softpedia.com/news/why-microsoft-google-and-mozilla-send-each-other-cakes-after-launching-browsers-528960.shtml)_\n\nTruth be told, I was 🤬 'ing myself. To trust someone in a completely different country that you haven't met before is a huge, huge leap of faith. Meanwhile, over in the company slack, a vote was cast:\n\n![Credit: Gitpod](../../../static/images/blog/cake/the-vote.jpg)\n\nWhilst Gitpod is a fully distributed company, that [hires people from anywhere in the world](/careers) our origins are from Kiel, Germany thus a lot of our employees are German. After an unfair vote, German Chocolate was declared the winner, but it wasn't without some office debate as to _what German Chocolate tastes like_:","metadata":{"source":"https://www.gitpod.io/blog/cake","loc":{"lines":{"from":89,"to":100}}}}],["108",{"pageContent":"- 🧔 \"German Chocolate\"? I only know of Swiss Chocolate.\n- 👩🏼 There are \"German Chocolate\" and \"True Chocolate\". It seems that they are implying something…\n- 👧🏼 We have a lot of cows up here. So they need to dump all the milk somewhere.","metadata":{"source":"https://www.gitpod.io/blog/cake","loc":{"lines":{"from":102,"to":104}}}}],["109",{"pageContent":"Concept\n\nCamisha, a couple days later, came back with:\n\n> Ok here's a rough looking idea I came up with. We create a desk scene with an edible mug, cube, monitor, keyboard, octocat, mouse, and kumquat all sitting on the desk that is the cake. On the front of the cake we write the congratulatory message. What do you think?\n\nand attached to the email was this image:\n\n![Credit: Camisha's Cakes](../../../static/images/blog/cake/concept.jpg)\n_Photo Credit: [Camisha's Cakes](https://www.camishascakes.com/)_\n\nI started 🤬 'ing myself. Had I chosen the wrong baker? I am IN OVER MY HEAD HERE as I absolutely could not imagine what the end result would look like from this concept. We jumped on a quick video call (which was the first time we had spoken with each other), and it became super clear that Gitpod had indeed found a baker we could trust with our brand.\n\n### Reality\n\n`youtube: urICsOsNd94`\n`youtube: zyR5MFojBXY`\n`youtube: dsKKJGaeL50`\n`youtube: ym_zuviJ25c`","metadata":{"source":"https://www.gitpod.io/blog/cake","loc":{"lines":{"from":106,"to":124}}}}],["110",{"pageContent":"Delivery\n\nCamisha, being the legend that she is, included 2 dozen gluten-free vegan cupcakes in the delivery just in case some wouldn't be able to have the actual cake.\n\n![Credit: Camisha's Cakes](../../../static/images/blog/cake/collage.jpg)\n_Photo Credit: [Camisha's Cakes](https://www.camishascakes.com/)_\n\nHere is the cake in all its glory. The edible Gitpod workspace was sent to the GitHub office - we know it arrived and made an extremely positive impression, but unfortunately never got feedback on how it tasted.\n\n> Dear GitHub please let us know as our office remains **heavily** divided over _what does German chocolate taste like?_ 🇩🇪🍫\n\nThanks for reading! Did you know our free tier is **open to every developer** with a GitLab, GitHub, and/or Bitbucket account? You will have access to both public and private repositories for 50 hours per month for free.\n\nGo ahead and experience the peace of mind and productivity boost on your own.","metadata":{"source":"https://www.gitpod.io/blog/cake","loc":{"lines":{"from":126,"to":139}}}}],["111",{"pageContent":"Go ahead and experience the peace of mind and productivity boost on your own.\n\nLearn how to [use Gitpod](/docs/introduction/getting-started) in less than 5 minutes!\n\n![Credit: Camisha's Cakes](../../../static/images/blog/cake/the-cake.jpg)\n_Photo Credit: [Camisha's Cakes](https://www.camishascakes.com/)_","metadata":{"source":"https://www.gitpod.io/blog/cake","loc":{"lines":{"from":139,"to":144}}}}],["112",{"pageContent":"---\nauthor: svenefftinge, JohannesLandgraf\ndate: Fr, 13 Aug 2021 3:00:00 UTC\nexcerpt: By 2023 working with ephemeral cloud-based dev environments will be the standard, just like CI/CD is today.\nimage: teaser.jpg\nslug: cloud-based-development-for-everyone\nteaserImage: teaser.jpg\ntags: [\"Gitpod updates\"]\ntitle: Cloud-based development for everyone\nsubtitle:\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n**TL;DR**\n\n- [Welcome to the party, GitHub Codespaces!](/blog/github-codespaces)\n- Gitpod is now free for public **and private** repositories!\n\nAt Gitpod, [we believe](https://www.notion.so/gitpod/Gitpod-s-Direction-be35d064c0704fbda61c542b84e07ef6) that\n\n> **By 2023 working with ephemeral cloud-based dev environments will be the standard. Just like CI/CD is today.**","metadata":{"source":"https://www.gitpod.io/blog/cloud-based-development-for-everyone","loc":{"lines":{"from":1,"to":24}}}}],["113",{"pageContent":"> **By 2023 working with ephemeral cloud-based dev environments will be the standard. Just like CI/CD is today.**\n\nThis week, we got a step closer to our product vision becoming a reality. We welcome Microsoft and GitHub Codespaces to join forces in improving the developer experience status quo with ephemeral, cloud-based developer environments. The obligatory [cake](https://twitter.com/gitpod/status/1425494676237340672?s=20) is on its way to our friends at GitHub and VS Code! 🎂","metadata":{"source":"https://www.gitpod.io/blog/cloud-based-development-for-everyone","loc":{"lines":{"from":24,"to":26}}}}],["114",{"pageContent":"Software development moves to the cloud\n\nToday's modern engineering teams use automation everywhere. They automate infrastructure, CI/CD build pipelines, linting, formatting and even writing code, and numerous other places where automation is used to help teams avoid costly errors and focus on product and customer value.\n\nDeveloper environments, however, have not experienced this same adoption rate. They are brittle, an intimidating hurdle during onboarding and a constant source of friction during development.\n\nThe question is not if but when ephemeral, container-based dev environments are becoming the norm. Based on conversations with users there are a couple of recurring reasons accelerating this:","metadata":{"source":"https://www.gitpod.io/blog/cloud-based-development-for-everyone","loc":{"lines":{"from":28,"to":34}}}}],["115",{"pageContent":"The question is not if but when ephemeral, container-based dev environments are becoming the norm. Based on conversations with users there are a couple of recurring reasons accelerating this:\n\n- **Multi-track development** (develop and review complicated features with ease)\n- **Local machine limits** (larger workloads, more data, more dependencies, more testing)\n- **Security** (no source code on laptops policies)\n- **Consistency** (end of all “works on my machine” problems)\n- **Onboarding** (shave off a few initial days of tedious workspace setups)\n- **Remote work** (fully distributed or hybrid companies)\n\nGoogle, Facebook and a few others have internally built solutions for these issues for a few years already. Gitpod and GitHub Codespaces bring container-based development in the cloud to the rest of the world.","metadata":{"source":"https://www.gitpod.io/blog/cloud-based-development-for-everyone","loc":{"lines":{"from":34,"to":43}}}}],["116",{"pageContent":"Ephemeral Developer Environments\n\nPutting developer experience first means working in developer environments that are fast, secure and most importantly **ephemeral**. Just moving your manually created and maintained dev environment to the cloud wouldn’t quite cut it. To get rid of configuration drift and “works on my machine” issues, we need to continuously create fresh dev environments based on configuration as code. Only then you are [**always ready-to-code™**](/).\n\nFor your day-to-day workflow this means that your developer environments become:","metadata":{"source":"https://www.gitpod.io/blog/cloud-based-development-for-everyone","loc":{"lines":{"from":45,"to":49}}}}],["117",{"pageContent":"For your day-to-day workflow this means that your developer environments become:\n\n- **Task-based** - for each Git context you start them, you code, you push your code, and you forget about them. For your next task, you’ll use a fresh one.\n- **Prebuilt** - Gitpod continuously builds all your Git branches like a CI server. Whenever your code changes (i.e. when new commits are pushed to your repository), Gitpod will prebuild workspaces, i.e. run the init commands in your .gitpod.yml configuration file before you even start a workspace.\n- **Shareable** - similar to preview environments in CI/CD dev environments ephemeral dev environments become easily shareable with your colleagues via a URL.\n\nIn the screencast below, [@paulienuh](https://twitter.com/paulienuh) explains how that workflow has supercharged our development velocity while developing Gitpod in Gitpod.\n\n`youtube: n7Ca3jHFtZg`","metadata":{"source":"https://www.gitpod.io/blog/cloud-based-development-for-everyone","loc":{"lines":{"from":49,"to":57}}}}],["118",{"pageContent":"In the screencast below, [@paulienuh](https://twitter.com/paulienuh) explains how that workflow has supercharged our development velocity while developing Gitpod in Gitpod.\n\n`youtube: n7Ca3jHFtZg`\n\nThe peace of mind, productivity boost and collaboration benefits you are experiencing once you adopt that task-based workflow make you never want to go back.","metadata":{"source":"https://www.gitpod.io/blog/cloud-based-development-for-everyone","loc":{"lines":{"from":57,"to":61}}}}],["119",{"pageContent":"Gitpod dev environments are available to everyone — today\n\nStarting today our free tier is **open to every developer** with a GitLab, GitHub, and/or Bitbucket account. You will have access to both public and private repositories for 50 hours per month for free.\n\nGo ahead and experience the peace of mind and productivity boost on your own.\n\nLearn how to [use Gitpod](/docs/introduction/getting-started) in less than 5 minutes!","metadata":{"source":"https://www.gitpod.io/blog/cloud-based-development-for-everyone","loc":{"lines":{"from":63,"to":69}}}}],["120",{"pageContent":"---\nauthor: akosyakov\ndate: Tuesday, 20 Oct 2021 13:00:00 UTC\nexcerpt: Background story about the last four years improving the editing experience of Cloud IDEs.\nimage: cover_cloudIDE.jpg\nslug: cloud-ide-history\ntags: [\"Company building\"]\nsubtitle:\nteaserImage: cover_cloudIDE.jpg\ntitle: From Theia to OpenVSCode Server - A history of Cloud IDEs\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\nI am [Anton](https://github.com/akosyakov) and I am leading IDE development at Gitpod. Almost a decade ago, I joined [Sven Efftinge](https://twitter.com/svenefftinge) and the team to work on open-source developer tools and help companies around the world to adopt them. We learned the intricacies of different desktop IDEs (Eclipse, IntelliJ, VS Code) and web editors (Monaco, Ace, Orion, and CodeMirror) - and eventually ended up building Gitpod.","metadata":{"source":"https://www.gitpod.io/blog/cloud-ide-history","loc":{"lines":{"from":1,"to":17}}}}],["121",{"pageContent":"A big part of my journey was shaped by the editing experience of cloud-based developer environments and today I want to **share our decisions, underlying thought process, connection to VS Code and where we go from here - both as an industry and as a company.**\n\nWhen we improved developer tooling for a San Francisco based client five years ago, we realized that the technology is now finally there to bring to the mainstream what Google, Facebook and several others already started years ago: moving software development to the cloud by providing fully automated and ephemeral developer environments.","metadata":{"source":"https://www.gitpod.io/blog/cloud-ide-history","loc":{"lines":{"from":19,"to":21}}}}],["122",{"pageContent":"> This recap is solely about the editing experience. This is important to stress because a big misconception in our ecosystem is that those remote, cloud-based developer environments are _web or online IDEs_. **While IDEs are an important building block, platforms such as Gitpod [are so much more](https://www.youtube.com/watch?v=svV-uE0Cdjk)**.\n> Think orchestration, provisioning, operating system, databases, compilers and all other tools you require to be productive.\n\n![Stackoverflow Survey 2021](../../../static/images/blog/cloud-ide-history/stackoverflow-ide.jpg)","metadata":{"source":"https://www.gitpod.io/blog/cloud-ide-history","loc":{"lines":{"from":23,"to":26}}}}],["123",{"pageContent":"The promise of VS Code\n\nTo convince developers [to say goodbye to local development](/blog/i-said-goodbye-to-local-development-and-so-can-you), it is important to not reinvent the wheel but offer an editing experience that:\n\n- Is backed by a thriving community\n- Wins hearts and minds of developers\n- Works on modern web technology\n\nThis is VS Code. The team around Erich Gamma [struck the right balance between an editor and a full-blown IDE](/blog/the-evolution-of-devx#vs-code-takes-over---why-is-that) building a lean but powerful product that today is the world's most popular editing experience and will continue to rise in popularity. \\*\\*I want to take this as an opportunity to thank the whole VS Code team for their hard work - me personally and also everybody at Gitpod is very grateful for what you are doing for the developer community. When we started working on the idea around Gitpod there was however a problem.\n\n&nbsp","metadata":{"source":"https://www.gitpod.io/blog/cloud-ide-history","loc":{"lines":{"from":28,"to":38}}}}],["124",{"pageContent":"&nbsp\n\n![Theia Logo](../../../static/images/blog/cloud-ide-history/theia-ide.jpg)","metadata":{"source":"https://www.gitpod.io/blog/cloud-ide-history","loc":{"lines":{"from":38,"to":40}}}}],["125",{"pageContent":"Why Theia?\n\nBack in late 2017 VS Code could not run in a browser and was not (yet) refactored to support remote development. Because we wanted to offer a VS Code-like developer experience in Gitpod, we started the open-source project [Theia](https://theia-ide.org/) under the roof of the Eclipse Foundation. The idea was to use VS Code technology (i.e. Monaco editor, LSP, DAP protocols, Xterm.js) to implement a vendor-neutral, remote-first IDE framework accessible from both browser and desktop. The framework was widely adopted by companies such as Gitpod, Google, Ericsson, SAP, RedHat, ARM, Arduino, and several others. While we at Gitpod moved to VS Code in late 2020 (more on that below), today Theia powers online IDEs such as [Eclipse Che](https://www.eclipse.org/che/), [Stackblitz](https://stackblitz.com/), [Google Cloud Shell Editor](https://cloud.google.com/shell/docs/editor-overview), [Acquia Cloud IDE](https://www.acquia.com/products/drupal-cloud/cloud-ide) and several others.\n\n&nbsp","metadata":{"source":"https://www.gitpod.io/blog/cloud-ide-history","loc":{"lines":{"from":42,"to":46}}}}],["126",{"pageContent":"&nbsp\n\n![OpenVSX](../../../static/images/blog/cloud-ide-history/openvsx-ide.jpg)","metadata":{"source":"https://www.gitpod.io/blog/cloud-ide-history","loc":{"lines":{"from":46,"to":48}}}}],["127",{"pageContent":"Why OpenVSX marketplace?","metadata":{"source":"https://www.gitpod.io/blog/cloud-ide-history","loc":{"lines":{"from":50,"to":50}}}}],["128",{"pageContent":"From the start the number one feature request for Theia was to support VS Code extensions out of the box. Building that required a steep learning curve as you need to understand the semantics behind all VS Code extensions APIs and port them to Theia. By early 2020, Theia was compatible with the most important APIs. It could securely run web views, apply themes, languages, and so on. There was one problem left: components that make VS Code as an application complete compared to the open source repository [Code - OSS](https://github.com/microsoft/vscode) are proprietary, including access to Microsoft services such as the VS Code extension marketplace. To fill that gap we built and released the [Open VSX marketplace](https://open-vsx.org/) as an open-source alternative, which we also donated to Eclipse. Today OpenVSX has almost extension parity for the most popular VS Code extensions and is used by Gitpod, [OpenVSCode Server](https://github.com/gitpod-io/openvscode-server/tree/web-server), [code-server](https://github.com/cdr/code-server), [Eclipse Che](https://www.eclipse.org/che/) and can be Self-Hosted on your own infrastructure.","metadata":{"source":"https://www.gitpod.io/blog/cloud-ide-history","loc":{"lines":{"from":52,"to":52}}}}],["129",{"pageContent":"&nbsp\n\n![VS Code](../../../static/images/blog/cloud-ide-history/vscode-logo.jpg)","metadata":{"source":"https://www.gitpod.io/blog/cloud-ide-history","loc":{"lines":{"from":54,"to":56}}}}],["130",{"pageContent":"VS Code refactoring for remote development\n\nBy 2020 the brilliant team behind VS Code added [remote support](https://code.visualstudio.com/docs/remote/remote-overview) and the web workbench ultimately powering [github.dev](https://github.dev/) was already open-sourced. However, they decided to not open-source the server implementing the remote protocol. In summer 2020, while porting a new VS Code file system API in Theia, I began to understand how the internal remote protocols are working and decided to build a quick prototype for a server implementation of stock VS Code. After 4 days of focused work we had a first [working version](https://github.com/gitpod-io/openvscode-server/commit/3f2a6da015cd9af62f61a0c55d81c5b124b9315d) at the beginning of September. There were still many missing pieces (auto-sync settings, port forwarding etc.), but it became clear that we can run stock VS Code in Gitpod.\n\n&nbsp\n\n![Gitpod](../../../static/images/blog/cloud-ide-history/gitpod-ide.jpg)","metadata":{"source":"https://www.gitpod.io/blog/cloud-ide-history","loc":{"lines":{"from":58,"to":64}}}}],["131",{"pageContent":"Gitpod switches to VS Code\n\nGitpod is an open-source orchestration and provisioning platform for developer environments. The goal was always to open Gitpod to all IDEs as soon as they support remote development ([we are very excited about the work of our friends at Jetbrains!](https://youtrack.jetbrains.com/issue/IDEA-226455)). We built Theia because we initially had to. The architecture of VS Code just wasn't there when we started back in 2017. Theia is the closest we could get, to offer a VS Code-like experience in Gitpod. With the prototype we showed that we could drop \"like'' and run actual VS Code in Gitpod.\n\nI admit that it was a hard decision to stop supporting Theia after almost 4 years, but the maintenance and catch-up effort required to support the ever growing and changing API surface became increasingly a burden. And more importantly: Theia did not allow us to provide the best developer experience we could.","metadata":{"source":"https://www.gitpod.io/blog/cloud-ide-history","loc":{"lines":{"from":66,"to":70}}}}],["132",{"pageContent":"We spent the next months polishing the server implementation and added missing pieces such as the setting sync server and port tunneling via the local companion app. In December 2020 we started giving users the [choice between Theia and VS Code](/blog/root-docker-and-vscode#vs-code-and-other-ides) and officially switched to VS Code as the [default editing experience in Gitpod in early 2021](/blog/next-chapter-for-gitpod).","metadata":{"source":"https://www.gitpod.io/blog/cloud-ide-history","loc":{"lines":{"from":72,"to":72}}}}],["133",{"pageContent":"Since then a lot of individual developers as well as larger companies building internal developer platforms reached out and asked how we run the latest VS Code in a browser. As everything happened in public repositories it was no secret and we happily shared pointers to the GitHub URLs. But our server implementation still was bound to Gitpod services. For example, we had a custom remote terminal implementation while MS open-sourced its `pty` service. After the requests became more and more frequent we decided to separate concerns and provide a clean-cut between the server and parts which we add to integrate with Gitpod. [OpenVSCode Server](https://github.com/gitpod-io/openvscode-server/tree/main) was born.","metadata":{"source":"https://www.gitpod.io/blog/cloud-ide-history","loc":{"lines":{"from":74,"to":74}}}}],["134",{"pageContent":"OpenVSCode Server\n\nHonestly, we never expected to receive such a positive response and were impressed with the feedback even before our [launch announcement](/blog/openvscode-server-launch). Within several days we were joined by large companies such as GitLab, VMware, Uber, SAP, Sourcegraph, RStudio and SUSE. We went from 62 to more than 1.6k stars in a week and are working now with a vibrant community to further improve the project.\n\n![OpenVSCodeServer](../../../static/images/blog/cloud-ide-history/openvscodeserver-stars.jpg)","metadata":{"source":"https://www.gitpod.io/blog/cloud-ide-history","loc":{"lines":{"from":76,"to":80}}}}],["135",{"pageContent":"![OpenVSCodeServer](../../../static/images/blog/cloud-ide-history/openvscodeserver-stars.jpg)\n\nAs a positive side effect, we streamlined the server implementation and dropped some unnecessary complexity. By imposing constraints such as never changing Microsoft code, we enabled a straightforward, fully automated upgrade path. We run a nightly sync job which brings all upstream changes to our fork. After that, we run smoke and integration tests from [Code - OSS](https://github.com/microsoft/vscode) with some additional tests for Open VSX. `This enables us to release OpenVSCode Server the same day when Microsoft releases its version of VS Code.`","metadata":{"source":"https://www.gitpod.io/blog/cloud-ide-history","loc":{"lines":{"from":80,"to":82}}}}],["136",{"pageContent":"I hope this gives some context on the origin and scope of [OpenVSCode Server](https://github.com/gitpod-io/openvscode-server/tree/web-server). Right now we see a lot of feature requests such as adding settings sync, GitHub auth, tunneling, secure access. As the project’s scope is to keep the changes to upstream VS Code as minimal as possible we will not bloat the server, but (similar to upstream VS Code) use their extension model and external services to add missing functionality. Examples of that would be syncing VS Code settings via a VS Code extension connecting to the Gitpod server or providing guides explaining how to put the server behind SSH or a reverse proxy.","metadata":{"source":"https://www.gitpod.io/blog/cloud-ide-history","loc":{"lines":{"from":84,"to":84}}}}],["137",{"pageContent":"Road ahead\n\nAs VS Code and cloud-based, remote development continue to grow in popularity, we hope to see the server-side implementation powering GitHub Codespaces being open-sourced in the upstream repository by Microsoft. Outside of VS Code, Jetbrains will give our whole ecosystem a big boost with their [remote development support](https://youtrack.jetbrains.com/issue/IDEA-226455#focus=Comments-27-5290105.0-0).\n\nThis means that more than 80% of the IDE market will have built-in functionality to connect to developer environments running in the cloud, while keeping the editing experience you are used to from your Desktop application. With Gitpod you can provision, automate and orchestrate those workloads for yourself and your team with the least friction possible. After four years it feels we are at a tipping point and I am excited about what comes next.","metadata":{"source":"https://www.gitpod.io/blog/cloud-ide-history","loc":{"lines":{"from":86,"to":90}}}}],["138",{"pageContent":"---\nauthor: svenefftinge\ndate: Wed Aug 07 2019 11:57:00 GMT+0000 (UTC)\nexcerpt: Continuous dev environments reduce friction in onboarding and task switching and improves reproducibility across the project.\nimage: devops.jpg\nslug: continuous-dev-environment-in-devops\nsubtitle: The Missing Piece in DevOps?\nteaserImage: devops.jpg\ntags: [\"Gitpod updates\"]\ntitle: Continuous Dev Environments\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n[DevOps](https://en.wikipedia.org/wiki/DevOps) has been all the rage for the last couple of years. Today, something like GitHub / GitLab with Continuous Integration seems to be the absolute minimum for a decent development toolchain. Such tools allow faster feedback cycles, better reproducibility, and generally more productivity.\n\n> However, in one crucial aspect most of us are still wasting many hours every day.","metadata":{"source":"https://www.gitpod.io/blog/continuous-dev-environment-in-devops","loc":{"lines":{"from":1,"to":19}}}}],["139",{"pageContent":"> However, in one crucial aspect most of us are still wasting many hours every day.\n\nGetting our dev environments into a ready-to-code state is usually still done manually, wasting an endless amount of precious developer time and energy.\n\n> Dev environment provisioning can and should be automated.\n\n**Continuous dev environments** are a crucial part in a fully optimized DevOps toolchain, that allow to instantaneously spin up a ready-to-code developer environment from any Git state. Continuous dev environments reduce friction in onboarding and task switching and improves reproducibility across the project.","metadata":{"source":"https://www.gitpod.io/blog/continuous-dev-environment-in-devops","loc":{"lines":{"from":19,"to":25}}}}],["140",{"pageContent":"Automated Dev Environments\n\nAutomating dev environments is not new and usually focuses on the initial setup, but that doesn't quite cut it. Of course, we all have felt the pain of being on-boarded in a new project, spending the first week figuring out what tools to install and how to configure them correctly. Manually setting up a dev environment is a waste of energy. Surprising that we still do such things, given that we developers are usually busy automating everything else in the world.\n\n![disposable dev environments](../../../static/images/blog/continuous-dev-environment-in-devops/gears.jpg)\n\nBut it is not only the one-off onboarding I want to discuss. Our projects change over time, and so do our dev environments. Developers are switching between different versions of a project. They, therefore, have to adjust parts of the dev environment accordingly, all the time.","metadata":{"source":"https://www.gitpod.io/blog/continuous-dev-environment-in-devops","loc":{"lines":{"from":27,"to":33}}}}],["141",{"pageContent":"We should automate dev environments using code, just as we do with testing, staging and production environments for continuous deployments.\n\n> When a developer wants to start a task, on some branch, in some project, she should be able to do so without spending hours on getting into the right environment.","metadata":{"source":"https://www.gitpod.io/blog/continuous-dev-environment-in-devops","loc":{"lines":{"from":35,"to":37}}}}],["142",{"pageContent":"Disposable Dev Environments\n\nAutomating a dev environment means we can recreate it any time. Starting fresh every time will make sure the setup works correctly and that you get a clean state. Since the build and the tests ran through and the dependencies are all fresh, you can be sure that any problems come from your changes. Such a setup makes it super easy to reproduce bugs, as well.\n\n![Self-service rack with available pairs of bowling shoes](../../../static/images/blog/continuous-dev-environment-in-devops/same-shoes.jpg)\n\nMoreover, a use-once dev environment frees you from cleaning up afterward. You never pollute your local system with any heavy checkouts, dependencies, builds, databases, and the like. Enter zero-waste coding.\n\nIt's almost 2020 and we understand that automating complex systems through code and configuration is vital. Now, let's apply those lessons learned to our dev environments.","metadata":{"source":"https://www.gitpod.io/blog/continuous-dev-environment-in-devops","loc":{"lines":{"from":39,"to":47}}}}],["143",{"pageContent":"Prebuilt Dev Environments - No More Waiting for Builds!\n\nInitial setups are annoying, but the real time sink is [waiting for builds](/blog/prebuilds). Compilers, generators, downloading dependencies, and running tests all need to be executed before you can use your dev environment.\n\nJust like CI tools that build your project after you have submitted a change, a continuous dev environment service builds your project **before** you need it. That way you can start on a clean state immediately.\n\n> A tool for providing continuous automated dev environments should prebuild your project, so you don't have to wait.\n\nGitpod prebuilds your branches continuously, so that you can start coding immediately without having to wait for builds to complete. Starting a new dev environment and seeing below output in the terminal makes me smile every time:","metadata":{"source":"https://www.gitpod.io/blog/continuous-dev-environment-in-devops","loc":{"lines":{"from":49,"to":57}}}}],["144",{"pageContent":"![🍌 This task ran as part of a workspace prebuild. 🎉 You just saved 5 minutes of watching your code build.](../../../static/images/blog/continuous-dev-environment-in-devops/prebuilds.png)\n\nTry below's example to see the effect of prebuilds in action. 👇","metadata":{"source":"https://www.gitpod.io/blog/continuous-dev-environment-in-devops","loc":{"lines":{"from":59,"to":61}}}}],["145",{"pageContent":"Browser-based Dev Environments?\n\n> \"Browser-based? I need professional tools!\"\n\nYes, I hear you. Until recently, browser-based tools haven't been as powerful as what we use locally.\n\nBut times have changed. Today, [we can run a VS Code compatible IDE in a browser tab](https://theia-ide.org) together with complete terminals to dedicated Linux containers. And everything is specially configured for your project.\n\nThe Theia IDE open-source project is fully configured with continuously prebuilt dev environments. You can try it out yourself by clicking the link below.\n\n> https://gitpod.io/#https://github.com/theia-ide/theia\n\n![Theia in Gitpod](../../../static/images/blog/continuous-dev-environment-in-devops/theia.png)","metadata":{"source":"https://www.gitpod.io/blog/continuous-dev-environment-in-devops","loc":{"lines":{"from":63,"to":75}}}}],["146",{"pageContent":"But my environment is different than those from my teammates!\n\nYes, of course, there are personal preferences like themes, keybindings, or even one or the other tool. Some developers heavily use command-line tools and have very advanced configurations. Others use particular VS Code extensions that improve their workflow significantly.\n\n![Individual](../../../static/images/blog/continuous-dev-environment-in-devops/share.jpg)\n\n> Why don't we share all that goodness within the team?\n\nWhile [Gitpod](/) lets you have user-specific settings, we see an opportunity in sharing the wisdom within the team to **_build a perfect, friction-free setup for everyone_**. This way, you can share your impressive terminal skills and configuration with your team, and you might learn a new thing or two as well.","metadata":{"source":"https://www.gitpod.io/blog/continuous-dev-environment-in-devops","loc":{"lines":{"from":77,"to":85}}}}],["147",{"pageContent":"The missing piece in DevOps\n\nI'm pretty sure, automated ready-to-code dev environments will become mainstream. The advantages and implications are just too good to be ignored. Everyone who has understood and experienced the benefits of a proper DevOps toolchain should understand how providing dev environments on-demand completes that experience. Ironing out that last area of non-reproducible and very annoying yak-shaving should be high on our todo list as it will improve developer productivity drastically.\n\nGitpod is available [to open-source projects for free and affordable for commercial projects](/pricing), through the Saas offering (www.gitpod.io). [Gitpod Enterprise](/pricing#enterprise) will soon be released, allows self-hosting Gitpod on any Kubernetes cluster, and integrates with GitHub Enterprise, GitLab, Jenkins, JIRA and other tools in your DevOps toolchain.\n\n[Comments?](https://dev.to/svenefftinge/continuous-dev-environments-the-next-step-in-devops-4ab7)","metadata":{"source":"https://www.gitpod.io/blog/continuous-dev-environment-in-devops","loc":{"lines":{"from":87,"to":93}}}}],["148",{"pageContent":"---\nauthor: iqqbot, loujaybee\ndate: Wednesday, 20 April 2022 13:00:00 UTC\nexcerpt: Easily access your Gitpod workspace by copy/pasting a single SSH command from the gitpod dashboard.\nslug: copy-paste-ssh-workspace-access\ntitle: SSH for workspaces as easy as copy/paste\ntags: [\"Engineering\"]\nimage: header.jpg\nteaserImage: header.jpg\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n> **Update (July 2022):** You can now also access workspaces with an [SSH key](/blog/ssh-key-upload).\n\nDeveloper experience is sometimes about making big changes, such as migrating to a new industry-defining tool or technology. But sometimes developer experience is about paying attention to the little things. Taking actions that we do as developers every day, and making them quicker, easier and removing friction.\n\nRecently, we shipped a feature on Gitpod that we’re excited to share with you, and we hope that it brings some more joy to your developer experience with Gitpod.","metadata":{"source":"https://www.gitpod.io/blog/copy-paste-ssh-workspace-access","loc":{"lines":{"from":1,"to":20}}}}],["149",{"pageContent":"Recently, we shipped a feature on Gitpod that we’re excited to share with you, and we hope that it brings some more joy to your developer experience with Gitpod.\n\n**As of today, in Gitpod you can now get access to a Gitpod workspace directly via SSH with a one-liner copy/paste from the Gitpod dashboard.**","metadata":{"source":"https://www.gitpod.io/blog/copy-paste-ssh-workspace-access","loc":{"lines":{"from":20,"to":22}}}}],["150",{"pageContent":"How does workspace access via copy/paste SSH work?\n\nFor those using Gitpod, you’ll know that you can already get SSH access into a Gitpod workspace via the [Gitpod Local Companion](https://www.gitpod.io/docs/references/ides-and-editors/local-companion) (currently in beta). However, we still saw the need from our users for a super easy, quick way to get direct SSH access to a workspace.\n\nAll you have to do is visit the Gitpod dashboard, click the more actions menu at the right-hand side of your workspace list, copy/paste the SSH command into a terminal, and voila!\n\nYou’re SSH’ed into your Gitpod workspace—“ready to code”.\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Copy pasting the SSH command from the dashboard\" src=\"/images/docs/ssh-copy-paste-dashboard.webm\" type=\"video/webm\"></video>\n    <figcaption>Copy pasting the SSH command from the dashboard</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/blog/copy-paste-ssh-workspace-access","loc":{"lines":{"from":24,"to":35}}}}],["151",{"pageContent":"You can also copy/paste your SSH access from the workspace start page, which is shown to users who have selected a desktop IDE or editor as their [preference](https://gitpod.io/preferences).\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Copy pasting the SSH command from the workspace start page\" src=\"/images/docs/ssh-copy-paste-workspace-start.webm\" type=\"video/webm\"></video>\n    <figcaption>Copy pasting the SSH command from the workspace start page</figcaption>\n</figure>\n\n**Note:** SSH authentication is provided using a shared workspace token that is refreshed on each workspace start. So, as always, be careful where you copy/paste the link.","metadata":{"source":"https://www.gitpod.io/blog/copy-paste-ssh-workspace-access","loc":{"lines":{"from":37,"to":44}}}}],["152",{"pageContent":"**Note:** SSH authentication is provided using a shared workspace token that is refreshed on each workspace start. So, as always, be careful where you copy/paste the link.\n\nIf you're one of our many users who lives in the [command-line](/docs/references/ides-and-editors/command-line), rather than in [an editor or IDE](/docs/references/ides-and-editors), you can also combine SSH copy/paste access to Gitpod workspaces with Gitpod features like [dotfiles](https://www.gitpod.io/docs/configure/user-settings/dotfiles), to get your workflow running just the way that you like it.\n\nNow, some of you might be wondering why we’re so excited about SSH copy/paste access to Gitpod workspaces? And that’s because it’s one of the many ways we’re making Gitpod seamless for professional teams to use Gitpod for developing using any language, technology or workflow.","metadata":{"source":"https://www.gitpod.io/blog/copy-paste-ssh-workspace-access","loc":{"lines":{"from":44,"to":48}}}}],["153",{"pageContent":"Remote Development for every team\n\nAt Gitpod, we’ve been working very closely with our [customers](https://www.gitpod.io/customers) to remove any friction we see for the professional development teams who are using Gitpod. Any developer should be able to use Gitpod in as seamless way as possible—certainly a challenge!\n\nBecause, not all tech companies are set up with the same architecture or technology. Not all developers work in exactly the same way, using the same tools, languages or frameworks. And not all development work looks exactly the same.\n\nBut that’s a good thing. Choice and flexibility to choose the right tool for the job is essential. And that’s precisely why we build Gitpod to be flexible, eg. by [building Gitpod on top of ubiquitous technologies like Docker](https://www.gitpod.io/docs/configure/workspaces/workspace-image). We integrate, we don’t dictate.","metadata":{"source":"https://www.gitpod.io/blog/copy-paste-ssh-workspace-access","loc":{"lines":{"from":50,"to":56}}}}],["154",{"pageContent":"For editing your code, you can use [VS Code in the browser](https://www.gitpod.io/docs/references/ides-and-editors/vscode-browser), [VS Code on desktop](https://www.gitpod.io/docs/references/ides-and-editors/vscode), and using JetBrains IDE’s via [JetBrains Gateway](https://www.gitpod.io/docs/integrations/jetbrains-gateway). Adding copy/paste SSH support just makes it that little bit easier for developers who prefer to work directly in their terminal, or for those times you need to hop into a Gitpod workspace to execute some commands.\n\nGive the new Gitpod copy/paste SSH access a go, and let us know what you think by [joining the community](https://www.gitpod.io/community). We look forward to hearing from you!","metadata":{"source":"https://www.gitpod.io/blog/copy-paste-ssh-workspace-access","loc":{"lines":{"from":58,"to":60}}}}],["155",{"pageContent":"---\nauthor: jakobhero\ndate: Friday, 5 May 2023 11:00:00 UTC\nexcerpt: Combine the rich feature set of your IDE with the ease of access of dbt Cloud by running dbt core in Gitpod\nslug: dbt-in-gitpod\ntags: [\"Data\", \"Developer Experience\"]\nimage: teaser.webp\nteaserImage: teaser.webp\ntitle: Enhance your Data Team's Productivity with dbt and Gitpod\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n<script>\n  import LinkButton from \"$lib/components/ui-library/link-button/link-button.svelte\"\n</script>\n\ndbt has made data transformation accessible to anyone with SQL knowledge. However, the most popular ways of running dbt in development have tradeoffs. dbt Cloud lacks extensibility, and dbt Core is complex to set up. Using dbt in Gitpod addresses these tradeoffs by providing powerful, on-demand cloud development environments that are easy to spin up, disposable, and extensible at will.","metadata":{"source":"https://www.gitpod.io/blog/dbt-in-gitpod","loc":{"lines":{"from":1,"to":20}}}}],["156",{"pageContent":"Pains of existing dbt dev environments\n\nThe management of local development environments is a time consuming chore for software developers, [taking 5h on average per engineer per week](https://www.gitpod.io/customers). Data teams are not exempt from this, and analytics engineers with little experience working in a shell environment [feel this pain in particular](https://discourse.getdbt.com/t/setting-up-vscode-to-use-with-the-dbt-cli/3291/6). Ultimately, team leads end up untangling messy local environments and coaching up their engineers on shell skills instead of focussing on bigger picture tasks.\n\nOn the other hand, the standard approach of running dbt in the Cloud forces developers to use dbt’s Cloud IDE, limiting the possibilities for customization and access to functionality that users expect from full-featured IDEs such as VS Code.","metadata":{"source":"https://www.gitpod.io/blog/dbt-in-gitpod","loc":{"lines":{"from":22,"to":26}}}}],["157",{"pageContent":"How Gitpod improves Developer Experience with dbt\n\nRunning dbt inside of Gitpod combines the rich feature set and extensibility of working with the IDE of choice with the ease of access of dbt’s Cloud IDE by standardizing the setup of the development environment for your team.\n\nWe are going to use the configuration of the [dbt + BigQuery demo project](https://github.com/gitpod-samples/template-dbt-bigquery) to illustrate how Gitpod works in practice. Try it out by following the instructions in the readme or use the [dbt + Snowflake demo project](https://github.com/gitpod-samples/template-dbt-snowflake) instead.","metadata":{"source":"https://www.gitpod.io/blog/dbt-in-gitpod","loc":{"lines":{"from":28,"to":32}}}}],["158",{"pageContent":"Standardization of development environments with `.gitpod.yml`\n\nThe `.gitpod.yml` file in a repository defines the development environment at startup. With Gitpod, the development environment is defined once per project and then reused by each collaborator. Think of the `.gitpod.yml` as a machine readable version of your readme. It entails:\n\n1. the installation of languages and dependencies\n2. the configuration of the terminal(s) and opened ports\n3. the installation of extensions in the IDE\n\nThe foundation for instances of development environments, what we refer to as workspaces, are Docker images. The default workspace image for Gitpod contains support for multiple languages such as Go, Java, Python, and JavaScript, but you can also use [slimmer images](https://hub.docker.com/u/gitpod/) or specify your own. This process can be straightforward even for Docker beginners, as the example `.gitpod.Dockerfile` from the demo project shows:","metadata":{"source":"https://www.gitpod.io/blog/dbt-in-gitpod","loc":{"lines":{"from":34,"to":42}}}}],["159",{"pageContent":"```dockerfile title=\".gitpod.Dockerfile\"\n# Gitpod's latest Python image\nFROM gitpod/workspace-python:latest\n\n# Set the path of dbt's profiles file\nENV DBT_PROFILES_DIR=./profiles/\n\n# Copy requirements file from host into Container\nCOPY requirements.txt /tmp\n\n# Install the requirements\nRUN cd /tmp && pip install -r requirements.txt","metadata":{"source":"https://www.gitpod.io/blog/dbt-in-gitpod","loc":{"lines":{"from":44,"to":55}}}}],["160",{"pageContent":"After using the standard Python image, setting up one environment variable, and installing the requirements (in this case just the `dbt-bigquery` package), dbt is now ready to be set up. Next, the `.gitpod.yml` contains commands that are executed after the Dockerfile has been processed. Each object in the tasks section creates a new terminal in the development environment. In our example, a terminal named `connect` executes three commands to complete and test the dbt configuration:\n\n```yaml title=\".gitpod.yml\"\nimage:\n  file: .gitpod.Dockerfile\n\n# Each task is a different terminal\ntasks:\n  - name: connect\n    command: |\n      echo $DBT_SERVICE_ACCOUNT > $GITPOD_REPO_ROOT/profiles/service_account.json\n      dbt debug\n      dbt deps","metadata":{"source":"https://www.gitpod.io/blog/dbt-in-gitpod","loc":{"lines":{"from":58,"to":70}}}}],["161",{"pageContent":"Following the reference to the custom Docker image, the Gitpod environment variable `DBT_SERVICE_ACCOUNT` is dumped inside a JSON file in the profiles directory, which is necessary to successfully connect to BigQuery. The most convenient way of making the service account accessible inside of the workspace is using Gitpod’s user-specific [environment variables](https://www.gitpod.io/docs/configure/projects/environment-variables#user-specific-environment-variables).\n\nThe `dbt debug` command tests the connection with the database. When executing this, dbt searches for the credentials to connect with the database in the `profiles.yml` file:","metadata":{"source":"https://www.gitpod.io/blog/dbt-in-gitpod","loc":{"lines":{"from":73,"to":75}}}}],["162",{"pageContent":"The `dbt debug` command tests the connection with the database. When executing this, dbt searches for the credentials to connect with the database in the `profiles.yml` file:\n\n```yaml title=\"profiles.yml\"\ndefault:\n  target: dev\n  outputs:\n    dev:\n      type: bigquery\n      method: service-account\n      project: \"{{ env_var('DBT_PROJECT') }}\"\n      dataset: \"{{ env_var('DBT_DEV_DATASET') }}\"\n      threads: 4\n      keyfile: \"{{ env_var('GITPOD_REPO_ROOT') }}/profiles/service_account.json\"\n      location: \"{{ env_var('DBT_LOCATION') }}\"","metadata":{"source":"https://www.gitpod.io/blog/dbt-in-gitpod","loc":{"lines":{"from":75,"to":88}}}}],["163",{"pageContent":"This file contains three more references to environment variables that have to be set by the user: `DBT_PROJECT`, `DBT_DEV_DATASET`, and `DBT_LOCATION`. This is the only step users of the repository have to do manually in order to launch a functional dbt dev environment once the configuration has been added to the repository.\n\nAfter the connection has been tested successfully, the workspace is ready to be used.","metadata":{"source":"https://www.gitpod.io/blog/dbt-in-gitpod","loc":{"lines":{"from":91,"to":93}}}}],["164",{"pageContent":"Bring your own IDE\n\nGitpod integrates with well-established IDEs in order to provide developers the full feature set they are used to. Teams running dbt on Gitpod can give their developers the freedom to choose from IDEs such as VS Code in the browser, VS Code Desktop, or PyCharm without compromising on the level of standardization as their state is not tied to their (local) IDE. For those developers who are attached to their own custom configurations, Gitpod also provides a solution by supporting [Dotfiles](https://www.gitpod.io/docs/configure/user-settings/dotfiles).\n\nComplementary to this degree of freedom, teams can standardize the tools available to their developers by adding extensions to the section of the respective IDE inside the `.gitpod.yml`:","metadata":{"source":"https://www.gitpod.io/blog/dbt-in-gitpod","loc":{"lines":{"from":95,"to":99}}}}],["165",{"pageContent":"Complementary to this degree of freedom, teams can standardize the tools available to their developers by adding extensions to the section of the respective IDE inside the `.gitpod.yml`:\n\n```yaml title=\".gitpod.yml\"\n# These installations are installed for each workspace running in VS Code\nvscode:\n  extensions:\n    - ms-python.python\n    - mechatroner.rainbow-csv\n    - innoverio.vscode-dbt-power-user\n    - ms-toolsai.jupyter\n    - ms-toolsai.jupyter-keymap\n    - ms-toolsai.jupyter-renderers\n    - ms-toolsai.vscode-jupyter-cell-tags\n    - ms-toolsai.vscode-jupyter-slideshow\n    - samuelcolvin.jinjahtml","metadata":{"source":"https://www.gitpod.io/blog/dbt-in-gitpod","loc":{"lines":{"from":99,"to":113}}}}],["166",{"pageContent":"Out of the box, VS Code does not provide any extensions to work with dbt. Making the same extensions accessible to everyone in your team ensures that each team member can have easy access to dbt-specific functionality such as following the lineage of models, running tests, and querying the warehouse.","metadata":{"source":"https://www.gitpod.io/blog/dbt-in-gitpod","loc":{"lines":{"from":116,"to":116}}}}],["167",{"pageContent":"The Best of both Worlds\n\nThe example in this article shows that a dbt project configured to run in Gitpod combines the strengths of both popular modes of running dbt.\nBy using Gitpod workspaces and a single dev environment configuration for the entire project, working dbt installations are rapidly launched anytime.\nBy surfacing the workspaces in VS Code and other full-feature IDEs, users have access to the same powerful code editors as if they were working locally.\n\nThe dev environment created by the demo project is a starting point, mostly replicating the functionality of the dbt Cloud IDE. You can fork the repository and extend the configuration by integrating your favorite tools from the dbt ecosystem. At Gitpod, we use [Lightdash](https://www.lightdash.com/) as BI tool for no-code analysis and include it into our main dbt project setup so that we can effortlessly jump from developing dbt models and metrics to testing them in a dev Lightdash project.","metadata":{"source":"https://www.gitpod.io/blog/dbt-in-gitpod","loc":{"lines":{"from":118,"to":124}}}}],["168",{"pageContent":"You can use Gitpod for free for up to 50 hours a month and onboard your team at no extra cost per user via our pay-as-you-go organizational pricing. Experience how easy it is to get started with dbt in Gitpod by going to one of the projects or following along the video walkthrough below. Feel free to reach out to [me](https://www.linkedin.com/in/jakob-herold/) to provide feedback or discuss how to use Gitpod in your data team.\n\n<LinkButton href=\"https://github.com/gitpod-samples/template-dbt-bigquery\" variant=\"primary\" size=\"medium\">dbt + BigQuery</LinkButton>\n<LinkButton href=\"https://github.com/gitpod-samples/template-dbt-snowflake\" variant=\"cta\" size=\"medium\">dbt + Snowflake</LinkButton>","metadata":{"source":"https://www.gitpod.io/blog/dbt-in-gitpod","loc":{"lines":{"from":126,"to":129}}}}],["169",{"pageContent":"Video Demo\n\n<div style=\"position: relative; padding-bottom: 64.63195691202873%; height: 0;\"><iframe src=\"https://www.loom.com/embed/803d19417e5a48ac8617e7c9582acf42?hide_owner=true&hide_title=true&hideEmbedTopBar=true\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%;\"></iframe></div>","metadata":{"source":"https://www.gitpod.io/blog/dbt-in-gitpod","loc":{"lines":{"from":131,"to":133}}}}],["170",{"pageContent":"---\nauthor: svenefftinge\ndate: Mon Nov 19 2018 15:39:56 GMT+0000 (UTC)\nexcerpt: Imagine that only a decade ago system administrators deployed, configured, and maintained software systems manually.\nimage: dev-env-gilbert.png\nslug: dev-env-as-code\ntags: [\"Engineering\"]\nsubtitle: How to streamline developer onboarding\ntitle: Dev environments as code\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n<figure>\n<video playsinline autoplay no-controls loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Dev environments as code\" src=\"/images/blog/dev-env-as-code/dev-env-gilbert.webm\" type=\"video/webm\"></video>\n    <figcaption>Source: http://dilbert.com/strip/2017-01-02</figcaption>\n</figure>\n\nImagine that only a decade ago system administrators deployed, configured, and maintained software systems manually. Doing so burned an endless amount of their precious lifetimes and energy.","metadata":{"source":"https://www.gitpod.io/blog/dev-env-as-code","loc":{"lines":{"from":1,"to":21}}}}],["171",{"pageContent":"Imagine that only a decade ago system administrators deployed, configured, and maintained software systems manually. Doing so burned an endless amount of their precious lifetimes and energy.\n\nToday, in the age of microservice architectures, systems have become even more complicated. Trying to maintain operations and deployments by hand isn’t optional anymore. These days we do “DevOps” or “Infrastructure as code”. We have learned that describing a software system in a declarative and formal way is mandatory to deploy applications automatically and continuously.","metadata":{"source":"https://www.gitpod.io/blog/dev-env-as-code","loc":{"lines":{"from":21,"to":23}}}}],["172",{"pageContent":"**What about our dev environments?**\n\nWhile we have automated deployments of our applications, most of us don’t apply the same techniques to developer environments, yet. Instead, on-boarding a new team member on any non-trivial project usually is a multiple hour (if not days) exercise.\n\nIt often goes like that:\n\n1. **A new developer gets pointed to the readme**\n\n1. **Reads lengthy, mostly outdated setup procedure**\n\n1. **Installs requirements on the developer machine,\n   updates/downgrades versions, etc.**\n\n1. **Tries to run the build … waits 20 minutes**\n\n1. **Build Fails. Try figure out what went wrong.**\n\n1. **Asks colleague. “Oh, yes. You also need to do X & Y”**\n\n1. **goto 3**","metadata":{"source":"https://www.gitpod.io/blog/dev-env-as-code","loc":{"lines":{"from":25,"to":44}}}}],["173",{"pageContent":"1. **Tries to run the build … waits 20 minutes**\n\n1. **Build Fails. Try figure out what went wrong.**\n\n1. **Asks colleague. “Oh, yes. You also need to do X & Y”**\n\n1. **goto 3**\n\nAfter many iterations at some point, the build somehow works. You don’t know why, but that doesn’t matter now. Of course, you are not updating the document, as you are not sure and don’t know how you ended up with a working setup. Is that current state even reproducible? So if you update the readme, you better only add what you figured out. You don’t dare to remove parts that you didn’t understand or skipped because they didn’t work for you.","metadata":{"source":"https://www.gitpod.io/blog/dev-env-as-code","loc":{"lines":{"from":44,"to":52}}}}],["174",{"pageContent":"Too bad the setup only worked on first glance. During the following weeks, you will have to solve smaller issues here and there and add some tools that were not listed. Maybe debugging doesn’t work yet, or you don’t see the sources from upstream dependencies. Eventually, it smoothes out. Only when a colleague changes something in the requirements, it usually takes two days until the whole team has noticed and changes their environments accordingly.\n\nUnfortunately, the pain doesn’t stop here.","metadata":{"source":"https://www.gitpod.io/blog/dev-env-as-code","loc":{"lines":{"from":54,"to":56}}}}],["175",{"pageContent":"**It works on my machine**\n\nYou probably know the famous phrase “It works on my machine”? The situation when a bug only appears on one machine and is hard to reproduce on others? **That feeling when a bad thing happens in production, but you can’t reproduce it locally?** Not very surprising, though, as long you are running the code on a different platform based on a different setup.\n\n![But it works... On my machine](https://cdn-images-1.medium.com/max/2000/1*I3-fRXyMaZDfesAxyA2eKw.jpeg)","metadata":{"source":"https://www.gitpod.io/blog/dev-env-as-code","loc":{"lines":{"from":58,"to":62}}}}],["176",{"pageContent":"**Going back to fix something on an old branch**\n\nAnother pet peeve is when you need to fix something on a maintenance branch. Fixing the actual bug could have been so easy, as you know how to fix it. However, before you can call it done you need to be able to build and test that old beast. This is costing you an endless amount of time.\n\nTinkering with a six months old technology stack can be so annoying. You have to deal with all those old libraries and versions of them. However, you still have to make it work somehow.\n\n![Woman biting a pen in front of a laptop](../../../static/images/blog/dev-env-as-code/jeeshoots.jpeg)_Photo by [JESHOOTS.COM](https://unsplash.com/@jeshoots?utm_source=medium&utm_medium=referral) on [Unsplash](https://unsplash.com?utm_source=medium&utm_medium=referral)_","metadata":{"source":"https://www.gitpod.io/blog/dev-env-as-code","loc":{"lines":{"from":64,"to":70}}}}],["177",{"pageContent":"All this suffering can end if we applied the ‘infrastructure as code’ idea to our dev environments, too. Why not make dev environment setups automated, reliably reproducible, and versioned by writing them down in an executable format and checking them into the project’s source code repository?","metadata":{"source":"https://www.gitpod.io/blog/dev-env-as-code","loc":{"lines":{"from":72,"to":72}}}}],["178",{"pageContent":"**Dev environment as code**\n\nAfter all, dev environments are often even more complicated than the runtime application they are used for. You typically need to add all the development tools such as build tools, compilers, linters, and a decent editor / IDE on top of the runtime requirements.\n\nIf you want to ensure that changes don’t break anything down the line, everybody needs to code, run, and test on the same environment the CI builds run on.\n\nSo let’s please stop polluting our readme files and start writing setup instructions down formally, so they can be executed.","metadata":{"source":"https://www.gitpod.io/blog/dev-env-as-code","loc":{"lines":{"from":74,"to":80}}}}],["179",{"pageContent":"Dockerfiles\n\nDocker files are a pretty neat way to describe a developer environment. Imagine you want to add something like ‘_asciidoctor_’ to your project’s toolchain. You could just add the following line to your dev environment’s Dockerfile:\n\n    RUN apt-get install -y asciidoctor\n\nOnce you push the change to the repository and the Docker image gets updated (automatically), all team members have the new tool in their developer environment. We need to get to coding with a single click.\n\n![Laptop with code on the screen](../../../static/images/blog/dev-env-as-code/clement-h.jpeg)_Photo by [Clément H](https://unsplash.com/@clemhlrdt?utm_source=medium&utm_medium=referral) on [Unsplash](https://unsplash.com?utm_source=medium&utm_medium=referral)_","metadata":{"source":"https://www.gitpod.io/blog/dev-env-as-code","loc":{"lines":{"from":82,"to":90}}}}],["180",{"pageContent":"**Automated IDE Setup**\n\nThe Docker approach gets a bit clumsy if your development tools have a UI such as a desktop IDE. You can package them in Docker, but you have to expose the IDE’s UI through X11. Another alternative is to go with a terminal editor like vim, but of course, that is not an option for most of us.\n\nSome desktop IDEs have tools that allow automating setups. Eclipse, for instance, has a tool called Oomph. Oomph allows you to declaratively describe an Eclipse IDE including plug-ins, configuration and even workspace setup. (i.e. Git information).\n\nBy far the best option is an IDE that runs in browsers, like the new [Theia](https://theia-ide.org) IDE. Theia is open-source under the Eclipse Foundation. It can be seen as VS Code that runs on browsers and desktops and is a bit more customizable.\n\nFor a simple Docker-based dev environment you could add Theia to your Docker image. It offers a full IDE including terminals to your workspace image.","metadata":{"source":"https://www.gitpod.io/blog/dev-env-as-code","loc":{"lines":{"from":92,"to":100}}}}],["181",{"pageContent":"For a simple Docker-based dev environment you could add Theia to your Docker image. It offers a full IDE including terminals to your workspace image.\n\nThe next step would be to treat your developer environment as some serverless function which you only spawn when needed and forget about when done. The online service [Gitpod](/) does exactly that.\n\nIt integrates with code hosting platforms such as GitHub. It eliminates all the tedious transitions by automating them. You see code on some website and want to give it a spin in a real dev environment? Gitpod does everything it can to get you there with a single click. It lets you provide custom Docker files or Docker images and runs Theia IDE.","metadata":{"source":"https://www.gitpod.io/blog/dev-env-as-code","loc":{"lines":{"from":100,"to":104}}}}],["182",{"pageContent":"**Summary**\n\nApplying the lessons learned from DevOps to our development setup can save us so much precious time and energy. <a class=\"no-nowrap\" href=\"https://www.activestate.com/developer-survey-2018-open-source-runtime-pains/\">ActiveState’s Developer Survey 2018 </a> underlines this with some numbers:\n\n![ActiveState’s Developer Survey 2018: How much time do you spent on managing dependencies and development tools](https://cdn-images-1.medium.com/max/3200/1*Vvl3N-1hDANiy15Pc9xeiQ.png)\n\nDo we really need to welcome new colleagues or contributors with a painful on-boarding experience? Let’s skip the prose in the _readme_ and write code to have our dev environment setup **automated, reproducible, and versioned.**","metadata":{"source":"https://www.gitpod.io/blog/dev-env-as-code","loc":{"lines":{"from":106,"to":112}}}}],["183",{"pageContent":"---\nurl: https://medium.com/gitpod/developing-a-nuxt-js-app-entirely-in-your-browser-94e7525f5eca\ndate: Fri Sep 21 2018 13:23:34 GMT+0000 (UTC)\nauthor: svenefftinge\ntitle: Developing a Nuxt.js app entirely in your browser\nimage: developing-nuxtjs-in-a-browser.jpeg\ntags: [\"Engineering\"]\nexcerpt: A walk-through to create a fully working Nuxt.js web application with only a browser, using Gitpod.io the online IDE for GitHub.\nslug: developing-nuxtjs-in-browser\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\nA walk-through to create a fully working Nuxt.js web application with only a browser, using Gitpod.io the online IDE for GitHub.","metadata":{"source":"https://www.gitpod.io/blog/developing-nuxtjs-in-browser","loc":{"lines":{"from":1,"to":16}}}}],["184",{"pageContent":"<script context=\"module\">\n  export const prerender = true;\n</script>\n\nA walk-through to create a fully working Nuxt.js web application with only a browser, using Gitpod.io the online IDE for GitHub.\n\nVersion 2.0 of [Nuxt.js has just been released](https://medium.com/@nuxt_js/nuxt-js-2-0-webpack-4-esm-modules-create-nuxt-app-and-more-6936ce80d94c). It comes with a convenient scaffolding tool that let’s you get started in no time. In the following I will explain the steps necessary to create, run and **develop a Nuxt.js application with only a browser using Gitpod.io**.","metadata":{"source":"https://www.gitpod.io/blog/developing-nuxtjs-in-browser","loc":{"lines":{"from":16,"to":22}}}}],["185",{"pageContent":"**Step 1: Go to GitHub and create a fresh repository.**\n\n[Gitpod.io](https://gitpod.io) uses GitHub as its dashboard. That means you start your workspaces from any states of any GitHub project. So new projects are created through GitHub, too:\n\n![GitHub Dashboard 'repositories' tab](https://cdn-images-1.medium.com/max/2048/0*I9sury8siGTS6GtF)\n\nClicking anywhere on GitHub’s Octocat logo on the top left will bring you to your dashboard, where you can create a new repository.\n\nEnter any name description, you can later change it.\n\n![GitHub 'Create a new repository' page](https://cdn-images-1.medium.com/max/3200/0*bY21cCYdJYoj7B48)\n\n## **Step 2: Start a Gitpod workspace**\n\nFrom your newly created but still empty project you can now start a Gitpod workspace. To do so prefix the GitHub URL with **gitpod.io/#**:\n\n![Start a new Gitpod workspace by prefixng the repo URL with gitpod.io#](https://cdn-images-1.medium.com/max/2776/0*NjvEmIjiTVwbTIaA)","metadata":{"source":"https://www.gitpod.io/blog/developing-nuxtjs-in-browser","loc":{"lines":{"from":24,"to":40}}}}],["186",{"pageContent":"**Step 3: Run `yarn create nuxt-app`.**\n\nNow a workspace with an online IDE is started for you. It will open up the readme (if you have created one) and a terminal.\n\nUsing the terminal you can use create-nuxt-app to create an initial project:\n\n```bash\n**yarn create nuxt-app**\n```\n\nNow simply answer all the prompts as you want.\n\n## **Step 4: Allow external access to the dev server**\n\nBy default the dev server doesn’t allow external IPs. To change that so we can access the application running in our cloud container, we need to pass an additional argument to the dev command.\n\nTo do so open the package.json file and add the parameter\n\n```bash\n**—-hostname 0.0.0.0**\n```\n\nas shown below:\n\n![package.json allow external access to the dev server](https://cdn-images-1.medium.com/max/2468/0*WrSSKAEkumvfIv6d)","metadata":{"source":"https://www.gitpod.io/blog/developing-nuxtjs-in-browser","loc":{"lines":{"from":42,"to":66}}}}],["187",{"pageContent":"Step 5: Start the dev server\n\nNow we can start the dev server and see the application in action.\n\nIn the terminal type\n\n```bash\n**yarn dev**\n```\n\nA notification window will pop up asking you to either open the web app externally or in a view side-by-side to the editor area.\n\n![Running app in the Gitpod workspace](https://cdn-images-1.medium.com/max/3200/0*psT2Ar8PKkWYVpKV)_Running app in the Gitpod workspace_\n\n## **Bonus Points**\n\nNow you can start changing the application and of course committing to your repo. Also you should consider adding a _.gitpod_ file to the root directory, so the build and dev server automatically startup next time you open a Gitpod workspace.\n\nHere’s the contents:\n\n```yaml\nports:\n    - port: 3000\n    protocol: \"http\"\ntasks:\n    - command: |\n        yarn install\n        yarn dev\n```","metadata":{"source":"https://www.gitpod.io/blog/developing-nuxtjs-in-browser","loc":{"lines":{"from":68,"to":96}}}}],["188",{"pageContent":"Dive deeper into Nuxt.js\n\nNow you are all set to dive a bit deeper into Nuxt.js. Checkout the [awesome-nuxt](https://github.com/nuxt-community/awesome-nuxt) repository or the [website](https://nuxtjs.org/) for further tips and tutorials.\n\nHave fun!","metadata":{"source":"https://www.gitpod.io/blog/developing-nuxtjs-in-browser","loc":{"lines":{"from":98,"to":102}}}}],["189",{"pageContent":"---\nauthor: pawlean, mikenikles\ndate: Tues, 08 Feb 2022 16:00:00 UTC\nexcerpt: For our seventh edition of DevX Digest, we look back at our conversation with Kurt Kemple from Forthright about the link between developer experience and developer relations.\nimage: teaser.jpg\nslug: devrel-link-devx\nsubtitle:\nteaserImage: teaser.jpg\ntitle: DevX Digest 07 -  Is DevX the new DevRel?\ntags: [\"Developer experience\"]\ntype: digest\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\nWelcome to DevX Digest - the place to hear all about Developer Experience, brought to you by Pauline Narvas [(@paulienuh)](https://twitter.com/paulienuh) and Mike Nikles [(@mikenikles)](https://twitter.com/mikenikles) from Gitpod. You’re reading another newsletter from us 🎉!","metadata":{"source":"https://www.gitpod.io/blog/devrel-link-devx","loc":{"lines":{"from":1,"to":18}}}}],["190",{"pageContent":"Developer Experience is the new DevRel\n\nAnother awesome guest which means another great DevXPod episode! This time, we spoke to Kurt Kemple from Forthright who talked to us about how developer experience is very much part of developer relations and how it could be “the new DevRel”.\n\nAs usual, we’ve summarised the key points from our conversation and[ you can also listen to the episode anywhere you get your podcasts!](https://www.buzzsprout.com/1895030/9940849-the-link-between-developer-experience-and-developer-relations-w-kurt-kemple-founder-and-principal-advisor-forthright.mp3?download=true) Don’t forget to subscribe and leave us a rating ⭐️\n\n![DevX Podcast Episode 1](../../../static/images/blog/devrel-link-devx/podcast.png)\n_DevX Pod is avaliable wherever you get your podcasts!_","metadata":{"source":"https://www.gitpod.io/blog/devrel-link-devx","loc":{"lines":{"from":20,"to":27}}}}],["191",{"pageContent":"Key Takeaways\n\n- Kurt joins us with a very interesting perspective on developer experience. Prior to founding Forthright - a developer experience consultancy - Kurt has extensive experience in **developer relations working in advocacy** at various companies from AWS, GraphQL to Gatsby.\n\n- Previous guests on DevXPod we’ve primarily discussed **developer experience in the context of in-product experience with the tools** itself. Kurt describes DevX as, _“an event or an occurrence within an ecosystem that leaves an impression on a developer.” _ This can include out-of-product experiences such as support, community, docs and content.","metadata":{"source":"https://www.gitpod.io/blog/devrel-link-devx","loc":{"lines":{"from":29,"to":33}}}}],["192",{"pageContent":"- _“If I'm asking even another person for help and I have a bad experience, I tie that to the company. So we can't pin developer experience down to just ‘I build integrations.’”_ With this in mind, **it naturally makes sense that developer relations which is often the out-of-product experience falls naturally in making sure developer experience is positive.** Kurt wrote a fantastic article about this, check it out [here](https://theworst.dev/developer-experience)!","metadata":{"source":"https://www.gitpod.io/blog/devrel-link-devx","loc":{"lines":{"from":35,"to":35}}}}],["193",{"pageContent":"- To be effective in the growing developer experience space, Kurt recommends that **the best skills to hone aren’t engineering-specific skills but technical writing, empathy and the ability to prioritise.** _“I actually think the lack of specificity it's going to do us a significant amount of damage as companies try and understand DevX and build that out as they grow.”_ Although these roles are very fluid, we’re starting to see specialisation areas including community builders, docs educator, DevX engineering (_i.e. building pipelines and infrastructure_.)\n\n- DevX is increasing in relevancy to everyone in tech. For example, Mike noted how many people have recently announced their new DevX jobs on Twitter. Kurt mentioned that he’s seen **a DevX role in the first 10 hires at start-ups.** Both of these showcase how important DevX is more than ever! _“2022 is the year of developer experience!”_","metadata":{"source":"https://www.gitpod.io/blog/devrel-link-devx","loc":{"lines":{"from":37,"to":39}}}}],["194",{"pageContent":"- Additionally, developer experience is important to bring more developers into tech. Our tools and product that we’re optimising for developer are opening the doors for more people, especially in a world that relies on software more than ever.\n\n- Not only does doubling down on developer experience benefit with accessibility and productivity, but it’s also in a company’s best interest as it’s seen as a competitive advantage for hires. Engineers are more likely to join a company with a better experience, in some cases that could be a determining factor.\n\n- When sharing some of the best developer experiences Kurt has seen, he reflected on the time he had built Bert CLI for PHP where he had the first taste of building to improve the lives of other developers. He also mentioned AWS Amplify as another DevX that folks should check out!","metadata":{"source":"https://www.gitpod.io/blog/devrel-link-devx","loc":{"lines":{"from":41,"to":45}}}}],["195",{"pageContent":"- Moving onto the future, Kurt shared that he’s excited to see the explosion of a diverse set of roles in out-of-product developer experience including content creators, illustrators, community engineers with more defined career ladders.","metadata":{"source":"https://www.gitpod.io/blog/devrel-link-devx","loc":{"lines":{"from":47,"to":47}}}}],["196",{"pageContent":"DevX Digest is community-driven\n\nAnother thing about Gitpodders is that we’re all driven by community feedback, and this newsletter is no exception! Please send us your thoughts, feedback and help us navigate this conversation. We may even feature some of your takes and comments in future newsletters!\n\nCome and hang out with us over on [our Discord](https://www.gitpod.io/chat). 👋🏼","metadata":{"source":"https://www.gitpod.io/blog/devrel-link-devx","loc":{"lines":{"from":49,"to":53}}}}],["197",{"pageContent":"---\nauthor: pawlean, mikenikles\ndate: Tues, 21 Dec 2021 11:00:00 UTC\nexcerpt: For our fifth edition of DevX Digest, we’d be breaking down the key highlights of our DevXPod conversation with Jamon from Infinite Red.\nimage: header.jpg\nslug: devx-evolution\nsubtitle:\nteaserImage: header.jpg\ntitle: DevX Digest 05 - How DevX has evolved\ntags: [\"Developer experience\"]\ntype: digest\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n**Welcome to DevX Digest - the place to hear all about Developer Experience**, brought to you by Pauline Narvas [(@paulienuh)](https://twitter.com/paulienuh) and Mike Nikles [(@mikenikles)](https://twitter.com/mikenikles) from Gitpod. You're reading another newsletter from us 🎉! In this edition, we talk about developer experience in cloud-based,ephemeral dev environments.","metadata":{"source":"https://www.gitpod.io/blog/devx-evolution","loc":{"lines":{"from":1,"to":18}}}}],["198",{"pageContent":"In this edition, we’re looking back on an awesome conversation we had for DevXPod with [Jamon Holmgreen](https://twitter.com/jamonholmgren), the Co-founder and CTO of [Infinite Red](https://infinite.red/). We encourage you to listen to the full episode, however, if you prefer reading our key takeaways from the episode, here they are! We also have a full transcript available [here](https://www.buzzsprout.com/1895030/9712066).\n\n![DevX Podcast Episode 2](../../../static/images/blog/devx-evolution/devx-pod.png)\n_DevX Pod is avaliable wherever you get your podcasts or over on our [Buzzsprout page](https://www.buzzsprout.com/1895030/9712066)!_","metadata":{"source":"https://www.gitpod.io/blog/devx-evolution","loc":{"lines":{"from":20,"to":23}}}}],["199",{"pageContent":"Key takeaways\n\n- 💬 If you’re building anything in the tech space, **you will always have developer experience. **The question is whether it’s going to be good, bad or indifferent. Developer experience has exploded recently, but it’s always been around. When Jamon first got started in tech, he recalls his initial developer experience with the “online” help tool on [QBasic](https://en.wikipedia.org/wiki/QBasic) which was essentially a help page that popped up after hitting F1.\n\n- 🙏🏼 **Developer experience has improved over the years, as we have become more mindful of when we create tools, libraries, APIs for others**! We discussed how nicer it is to for instance develop a headless CMS in comparison to the days of updating WordPress PHP theme files via FTP. _Throwback_, right?","metadata":{"source":"https://www.gitpod.io/blog/devx-evolution","loc":{"lines":{"from":25,"to":29}}}}],["200",{"pageContent":"- 💡 _“If you are contributing in some way to developer experience, you're sort of like giving a gift to the user who is going to be using or the next developer, which might be you.”_ Often when we talk about developer experience, we think about other developers, but Jamon points out that it might also be your future self trying to figure out the same thing. Therefore, **improving DevX is crucial and takes intentionality. **\n\n- 🚫 **Mental fatigue and low team morale are all signs of bad DevX.** If developers are constantly feeling frustrated by your onboarding experience or documentation that isn’t clear, it could do more harm than good. Constantly hitting issues is never a good experience._ “Coding is hard enough.”_ Jamon described, _“let’s not add more to it.”_","metadata":{"source":"https://www.gitpod.io/blog/devx-evolution","loc":{"lines":{"from":31,"to":33}}}}],["201",{"pageContent":"- 💻 **[React-native-popover-view](https://www.npmjs.com/package/react-native-popover-view) is a library that Jamon recommends as one of the best DevX that he has recently found**. It’s a simple, highly customisable Popover component for React-native and has a great API with plenty of examples in the README. It was also another great example of progressive disclosure, a concept we mentioned [in another Digest](https://gitpod.io/blog/psychology-of-devx).","metadata":{"source":"https://www.gitpod.io/blog/devx-evolution","loc":{"lines":{"from":35,"to":35}}}}],["202",{"pageContent":"- ♻️ Jamon wrote [React Native Colo Loco library](https://www.youtube.com/watch?v=gfORZXq4ZgE) with developer experience in mind, he spent more time intentionally making sure that documentation was clear, written in plain English and not overwhelming for new folks. It took a lot more time but is worth it long-term. This brought to our attention how we speak a lot about developer experience being mainly about the product, but we sometimes forget the other pieces including community, docs, error messages...i.e. **The Developer Experience Ecosystem.**","metadata":{"source":"https://www.gitpod.io/blog/devx-evolution","loc":{"lines":{"from":37,"to":37}}}}],["203",{"pageContent":"- 🚀 From painfully onboarding ourselves to interesting open-source environments to sandboxed developer environments like Gitpod; interactive documentation instead of docs that leave you with more questions; or more meaningful error messages (a good example is [Elm](https://elm-lang.org/)) and less searching the ends of the internet for answers dated back to 10 years ago… **DevX has changed so much over the years**. The approach towards _“the Developer Experience Ecosystem”_ as a whole is definitely something we all discussed as something we hope to see evolving in the future.","metadata":{"source":"https://www.gitpod.io/blog/devx-evolution","loc":{"lines":{"from":39,"to":39}}}}],["204",{"pageContent":"DevX Digest is community-driven ✨\n\nAnother thing about Gitpodders is that we’re all driven by community feedback, and this newsletter is no exception! Please send us your thoughts, feedback and help us drive this conversation. We may even feature some of your takes and comments in future newsletters!\n\nCome and hang out with us over on [our Discord](https://www.gitpod.io/chat). 👋🏼","metadata":{"source":"https://www.gitpod.io/blog/devx-evolution","loc":{"lines":{"from":41,"to":45}}}}],["205",{"pageContent":"---\nauthor: pawlean, mikenikles\ndate: Tues, 08 Mar 2022 16:00:00 UTC\nexcerpt: For our ninth edition of DevX Digest, we look back at our conversation with Brittney Postma.\nimage: header.jpg\nslug: devx-affects-us-all\nsubtitle:\nteaserImage: header.jpg\ntitle: DevX Digest 09 - How DevX affects us all\ntags: [\"Developer experience\"]\ntype: digest\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n**Welcome to DevX Digest - the place to hear all about Developer Experience**, brought to you by Pauline Narvas [(@paulienuh)](https://twitter.com/paulienuh) and Mike Nikles [(@mikenikles)](https://twitter.com/mikenikles) from Gitpod. You're reading another DevX Digest from us 🎉!","metadata":{"source":"https://www.gitpod.io/blog/devx-affects-us-all","loc":{"lines":{"from":1,"to":18}}}}],["206",{"pageContent":"On another episode of DevXPod, we sat down with [Brittney Postma](https://twitter.com/BrittneyPostma), Founder of [Svelte Sirens](https://sveltesirens.dev/), Content Creator at [CodingCat.dev](https://CodingCat.dev) and Software Engineer about her thoughts on the way developer experience affects all of us.\n\nAs usual, in today’s newsletter, we’ll be sharing some of our key takeaways from the podcast episode. If you’d like to listen to the full episode, head over to your favourite podcast platform and search for `DevXPod`. Don’t forget to subscribe and leave us a rating ⭐️ Alternatively, if you’d prefer to read a transcript of our conversation head over to [our Buzzsprout site](https://devxpod.buzzsprout.com/)!\n\n![DevX Podcast Episode 1](../../../static/images/blog/devx-affects-us-all/podcast.png)\n_DevX Pod is avaliable wherever you get your podcasts!_","metadata":{"source":"https://www.gitpod.io/blog/devx-affects-us-all","loc":{"lines":{"from":20,"to":25}}}}],["207",{"pageContent":"Key take-home messages\n\nBrittney started her tech journey learning React on[ FreeCodeCamp](https://www.freecodecamp.org/) and Udemy. She’s been recognised in several communities for her contributions and for being one of the first to finish[ the complete react developer by zero to mastery course](https://www.udemy.com/course/complete-react-native-mobile-development-zero-to-mastery-with-hooks/). Today, she focuses mostly on Svelte. Her story was particularly interesting coming as all got into tech in different ways and learned in different ways too!\n\nRelating to developer experience, the onboarding into the tech world is constantly evolving. For example, in the past developers would learn from books but today there are videos, playgrounds and more! Simply put, _“We’re all in the business of developer experience”_ Brittney shared. No matter what your role is, DevX affects us all from education to developer productivity.","metadata":{"source":"https://www.gitpod.io/blog/devx-affects-us-all","loc":{"lines":{"from":27,"to":31}}}}],["208",{"pageContent":"Closely related, DevX improves end user experience as it will allow developers to ship more, build faster and focus on other tasks. [Netlify](https://www.netlify.com/) once again received a shoutout for their brilliant developer experience. Brittney also commented on how she believes that the future of developer experience lies in automating as much of the developer lifecycle as possible which will boost all the developer productivity benefits.\n\nThis week’s shoutout by our guest is [Svelte Sirens](https://sveltesirens.dev/) - a place for women and non-binary folks to learn about Svelte and the [JAMStack Community](https://jamstack.org/community/). Don’t forget to check them out!","metadata":{"source":"https://www.gitpod.io/blog/devx-affects-us-all","loc":{"lines":{"from":33,"to":35}}}}],["209",{"pageContent":"DevX Digest is community-driven 🤝\n\nAnother thing about Gitpodders is that we’re all driven by community feedback, and this newsletter is no exception! Please send us your thoughts, feedback and help us navigate this conversation. We may even feature some of your takes and comments in future newsletters!\n\nCome and hang out with us over on [our Discord](https://www.gitpod.io/chat). 👋🏼","metadata":{"source":"https://www.gitpod.io/blog/devx-affects-us-all","loc":{"lines":{"from":37,"to":41}}}}],["210",{"pageContent":"---\nauthor: pawlean, mikenikles\ndate: Tues, 22 Mar 2022 16:00:00 UTC\nexcerpt: For our tenth edition of DevX Digest, we look back at our conversation with Chris Weichel\nimage: teaser.jpg\nslug: devx-with-chris\nsubtitle:\nteaserImage: teaser.jpg\ntitle: DevX Digest 10 - A look at DevX with Chris Weichel\ntags: [\"Developer experience\"]\ntype: digest\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n**Welcome to DevX Digest - the place to hear all about Developer Experience**, brought to you by Pauline Narvas [(@paulienuh)](https://twitter.com/paulienuh) and Mike Nikles [(@mikenikles)](https://twitter.com/mikenikles) from Gitpod. You're reading another newsletter from us 🎉! In this edition, we talk about developer experience in cloud-based,ephemeral dev environments.","metadata":{"source":"https://www.gitpod.io/blog/devx-with-chris","loc":{"lines":{"from":1,"to":18}}}}],["211",{"pageContent":"The recent episode of DevX Pod is a special one! We spoke to our Chief Technology Officer (CTO) at Gitpod, Chris about his thoughts on developer experience. We also are very excited to welcome him as a future podcast host! You'll be hearing more from him. 🎶\n\nAs usual, in today’s newsletter, we’ll be sharing some of our key takeaways from the podcast episode. If you’d like to listen to the full episode, head over to your favourite podcast platform and search for `DevXPod`. Don’t forget to subscribe and leave us a rating ⭐️ Alternatively, if you’d prefer to read a transcript of our conversation head over to [our Buzzsprout site](https://devxpod.buzzsprout.com)!\n\n![DevX Podcast Episode ](../../../static/images/blog/devx-with-chris/podcast.png)\n_DevX Pod is avaliable wherever you get your podcasts!_","metadata":{"source":"https://www.gitpod.io/blog/devx-with-chris","loc":{"lines":{"from":20,"to":25}}}}],["212",{"pageContent":"Key Takeaways\n\nBefore joining Gitpod as employee #2, Chris worked at an IT startup that came out of Bosch as a System Architect for a couple of year. He also did a PhD on Human Computer Interaction. Today, he’s Gitpod’s CTO.\n\nChris described **developer experience as user experience, but for developers.** Similar to how we use a pen when writing but don’t really think about it, we want every developer experience to be the same. I.e. it just fades to the background!\n\nDeveloper experience is more than just the end product experience however. It’s not just the documentation that surrounds it either! **DevX should be seen from the lens of the ecosystem.** As Chris shared on the podcast, _“It is the way it is applied. It is the way you, as a developer can influence the tools that you are using. And this is really puts us in a very unique perspective.”_","metadata":{"source":"https://www.gitpod.io/blog/devx-with-chris","loc":{"lines":{"from":27,"to":33}}}}],["213",{"pageContent":"**The reality is developers are expected to do a lot these days.** It’s not “just” coding! Good developer experience is important more than ever to help reduce individual developer burnout and maximise productivity. For example: instead of doing the same thing over, let’s automate it, remove the friction and using working in factors to illustrate this: reducing repetitive strain injury. From a company perspective, DevX is becoming more relevant as well especially from a hiring point of view. Have you got a developer experience that is “_bad_”? Some engineers actively avoid using specific tools and technologies because of it!\n\nLooking ahead, Chris compared DevX to CI/CD. In a similar fashion, in a few years if you aren’t doing CI/CD in your organisation (or doing it well), you don’t have good DevX.","metadata":{"source":"https://www.gitpod.io/blog/devx-with-chris","loc":{"lines":{"from":35,"to":37}}}}],["214",{"pageContent":"Looking ahead, Chris compared DevX to CI/CD. In a similar fashion, in a few years if you aren’t doing CI/CD in your organisation (or doing it well), you don’t have good DevX.\n\n_“If you're building a product that is aimed at developers. Or even remotely touches on developers! You'll need to provide good developer experience for that too, because otherwise it will be a hurdle for people to adopt your product.”_","metadata":{"source":"https://www.gitpod.io/blog/devx-with-chris","loc":{"lines":{"from":37,"to":39}}}}],["215",{"pageContent":"DevX Digest is community-driven\n\nAnother thing about Gitpodders is that we’re all driven by community feedback, and this newsletter is no exception! Please send us your thoughts, feedback and help us navigate this conversation. We may even feature some of your takes and comments in future newsletters!\n\nCome and hang out with us over on [our Discord](https://www.gitpod.io/chat). 👋🏼","metadata":{"source":"https://www.gitpod.io/blog/devx-with-chris","loc":{"lines":{"from":41,"to":45}}}}],["216",{"pageContent":"---\nauthor: ghuntley, michaelaring\ndate: Tuesday, 14 June 2022 16:00:00 UTC\nexcerpt: The talks from DevX Conf are now available for viewing and USD $22,600 is being distributed to Open-source projects that conference attendees voted for.\nimage: teaser.png\nslug: devxconf-2022-wrap\nsubtitle: All twenty seven talks from the conference are now available on YouTube.\nteaserImage: teaser.png\ntags: [\"Company building\"]\ntitle: Gitpod raises $22,600 at DevX Conf to give to Open-source maintainers\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\nAnd it's a wrap. We want to thank everyone who joined us last month at [DevX Conf](https://devxconf.org/) and welcome readers who are reading about the conference for the first time. The talks are available for viewing and USD $22,600 is being distributed to Open-source projects that conference attendees voted for.","metadata":{"source":"https://www.gitpod.io/blog/devxconf-2022-wrap","loc":{"lines":{"from":1,"to":17}}}}],["217",{"pageContent":"The conference is evolving to be a space where developer tool founders share what they've been working on all year. The themes that stood out in 2022 were automation (think, [Fig](https://www.youtube.com/watch?v=VhxGX8MV3Vw), [Warp](https://www.youtube.com/watch?v=EFbicktk6C4), [Supabase](https://www.youtube.com/watch?v=1Tz0FBoqCTQ)), collaboration (think, [Zed](https://www.youtube.com/watch?v=wXT73bBr83s)), and integration testing (think, [AtomicJar](https://www.youtube.com/watch?v=A_I8_3UFHo0)). The continued transition to cloud development was a centrepiece of discussions at DevX Conf. Next to [Gitpod](https://www.youtube.com/watch?v=tWZ6VunABws), we saw [Okteto](https://www.youtube.com/watch?v=FRmv-IS-7ow) and [Codespaces](https://www.gitpod.io/blog/cake) talk about remote developer environments.","metadata":{"source":"https://www.gitpod.io/blog/devxconf-2022-wrap","loc":{"lines":{"from":19,"to":19}}}}],["218",{"pageContent":"[Last year](https://www.gitpod.io/blog/devxconf-wrap) was the first year of the DevX Conference, and over USD $10,000 was raised and donated to unpaid volunteers and the maintainers of Open-source projects that underpin our digital infrastructure.\n\n![DevX Conf - Sponsors](/images/blog/devxconf-2022-wrap/sponsors.png)\n\n<br/>\n\nThis year, thanks to the support of the conference sponsors [AtomicJar](https://www.atomicjar.com/), [CodeSee](https://www.codesee.io/), [JetBrains](https://www.gitpod.io/blog/gitpod-jetbrains), [slim.ai](https://slim.ai), [Tailscale](https://www.gitpod.io/blog/tailscale), [WorkOS](https://workos.com/), [okteto](https://www.okteto.com/) and [swimm](https://swimm.io/) we are pleased to share that we raised more than twice the amount of last year, that is, $22,600 USD. The funds are in the process of being distributed.\n\n# Distribution of Open-source Funding","metadata":{"source":"https://www.gitpod.io/blog/devxconf-2022-wrap","loc":{"lines":{"from":21,"to":29}}}}],["219",{"pageContent":"# Distribution of Open-source Funding\n\nLike last year, [attendees voted](https://www.gitpod.io/blog/devxconf-wrap#funding-open-source) on how to distribute profits from DevX Conf between Open-source tools maintained almost exclusively by unpaid volunteers. Here is the breakdown of how attendees voted to distribute this year's funds:\n\n<div class=\"overflow-x-auto\">","metadata":{"source":"https://www.gitpod.io/blog/devxconf-2022-wrap","loc":{"lines":{"from":29,"to":33}}}}],["220",{"pageContent":"| Name                                                                                                                                                                                                                                                                                  | URL                                                 | Split of funding from $22.6k USD |\n| ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------- | -------------------------------- |","metadata":{"source":"https://www.gitpod.io/blog/devxconf-2022-wrap","loc":{"lines":{"from":35,"to":36}}}}],["221",{"pageContent":"| 01. **ccls** is a C/C++/ObjC language server supporting cross references, hierarchies, completion and semantic highlighting.                                                                                                                                                          | https://github.com/MaskRay/ccls                     | $1,040.79                        |\n| 02. **erlang_ls** is an implementation of Language Server Protocol for the Erlang programming language.                                                                                                                                                                               | https://github.com/erlang-ls/erlang_ls              | $594.74                          |","metadata":{"source":"https://www.gitpod.io/blog/devxconf-2022-wrap","loc":{"lines":{"from":37,"to":38}}}}],["222",{"pageContent":"| 03. **ElixirLS** is a frontend-independent IDE \"smartness\" server for Elixir. Implements the \"Language Server Protocol\" standard and provides debugger support via the \"Debug Adapter Protocol\"                                                                                       | https://github.com/elixir-lsp/elixir-ls             | $594.74                          |\n| 04. **elm-language-server** is an implementation of Language Server Protocol for the ELM programming language.                                                                                                                                                                        | https://github.com/elm-tooling/elm-language-server  | $892.11                          |","metadata":{"source":"https://www.gitpod.io/blog/devxconf-2022-wrap","loc":{"lines":{"from":39,"to":40}}}}],["223",{"pageContent":"| 05. **hadolint** is a smarter Dockerfile linter that helps you build best practice Docker images. The linter is parsing the Dockerfile into an AST and performs rules on top of the AST. It is standing on the shoulders of ShellCheck to lint the Bash code inside RUN instructions. | https://github.com/hadolint/hadolint                | $2230.26                         |\n| 06. **Haskell IDE Engine** aims to be the universal interface to a growing number of Haskell tools, providing a fully-featured Language Server Protocol server for editors and IDEs that require Haskell-specific functionality.                                                      | https://github.com/haskell/haskell-ide-engine       | $743.42                          |","metadata":{"source":"https://www.gitpod.io/blog/devxconf-2022-wrap","loc":{"lines":{"from":41,"to":42}}}}],["224",{"pageContent":"| 07. **Ionide** is an organization which builds high quality, cross platform developer tools for F#. Our flagship project is Ionide-VSCode - a Visual Studio Code plugin, with more than 1 million downloads, transforming VSCode into a fully-fledged F# IDE                          | https://github.com/ionide                           | $743.42                          |\n| 08. **lsp-mode** is a Emacs client/library for the Language Server Protocol with multiples languages support.                                                                                                                                                                         | https://github.com/emacs-lsp/lsp-mode               | $1189.47                         |","metadata":{"source":"https://www.gitpod.io/blog/devxconf-2022-wrap","loc":{"lines":{"from":43,"to":44}}}}],["225",{"pageContent":"| 09. **ruby-together** is a grassroots initiative committed to supporting the critical Ruby infrastructure you rely on: Bundler, RubyGems, and other shared tools.                                                                                                                     | https://rubytogether.org/                           | $1040.79                         |\n| 10. Rust-analyzer is an implementation of Language Server Protocol for the Rust programming language. It provides features like completion and goto definition for many code editors, including VS Code, Emacs and Vim.                                                               | https://github.com/rust-analyzer/rust-analyzer      | $1635.53                         |","metadata":{"source":"https://www.gitpod.io/blog/devxconf-2022-wrap","loc":{"lines":{"from":45,"to":46}}}}],["226",{"pageContent":"| 11. **rvm** is the acronym of Ruby enVironment Manager. It manages Ruby application environments and enables switching between them..                                                                                                                                                 | https://github.com/rvm/rvm                          | $1189.47                         |\n| 12. **shellcheck** is a tool that gives warnings and suggestions for bash/sh shell scripts:                                                                                                                                                                                           | https://github.com/koalaman/shellcheck              | $2676.32                         |","metadata":{"source":"https://www.gitpod.io/blog/devxconf-2022-wrap","loc":{"lines":{"from":47,"to":48}}}}],["227",{"pageContent":"| 13. **patch-package** lets app authors instantly make and keep fixes to npm dependencies. A vital band-aid for javascript developers living on the bleeding edge.                                                                                                                     | https://github.com/ds300/patch-package              | $1189.47                         |\n| 14. **php-language-server** is an implementation of Language Server Protocol for the PHP programming language.                                                                                                                                                                        | https://github.com/felixfbecker/php-language-server | $743.42                          |","metadata":{"source":"https://www.gitpod.io/blog/devxconf-2022-wrap","loc":{"lines":{"from":49,"to":50}}}}],["228",{"pageContent":"| 15. pre-commit is a framework for managing and maintaining multi-language pre-commit Git hooks.                                                                                                                                                                                       | https://github.com/pre-commit/pre-commit            | $2527.63                         |\n| 16. **vim-lsp** is an async Language Server Protocol plugin for vim8 and neovim.                                                                                                                                                                                                      | https://github.com/prabirshrestha/vim-lsp           | $1337.16                         |","metadata":{"source":"https://www.gitpod.io/blog/devxconf-2022-wrap","loc":{"lines":{"from":51,"to":52}}}}],["229",{"pageContent":"| 17. **yamllint** is a linter for YAML.                                                                                                                                                                                                                                                | https://github.com/adrienverge/yamllint             | $2230.26                         |","metadata":{"source":"https://www.gitpod.io/blog/devxconf-2022-wrap","loc":{"lines":{"from":53,"to":53}}}}],["230",{"pageContent":"</div>\n\nOnly a fraction of funds has been distributed at this stage because, as an industry, we haven’t documented and established straightforward ways where companies can give Open-source projects money. If you are the steward of one of the above projects, please go sign up to GitHub Sponsors or Open Collective and/or publically document the process of how companies can support your project.\n\nAt Gitpod, we often wonder what the future would look like if these high achievers that our digital society is built upon were empowered to become independent artists. If just one of those people can help more people better understand a technology or improve the developer experience for an entire ecosystem what is the worth/value of that and why isn’t our industry doing that yet? In business terms, Open-source maintainers are unpaid and unsecured vendors.\n\n![Open-source supply chain decision tree](/images/blog/gitpod-open-source-sustainability-fund/decision-tree.png)","metadata":{"source":"https://www.gitpod.io/blog/devxconf-2022-wrap","loc":{"lines":{"from":55,"to":61}}}}],["231",{"pageContent":"![Open-source supply chain decision tree](/images/blog/gitpod-open-source-sustainability-fund/decision-tree.png)\n\nGitpod hopes other companies will also start taking steps to mitigate this critical risk in their technology stack. Paying for resources that are being consumed broadens the list of people who can do Open-source. Additionally, money enables maintainers to buy services and outsource the activities that do not bring them joy.\n\n# So what did we learn at DevX Conf?\n\n- The current generation of product creators is building developer tools with developer experience top of mind. It’s inspiring to see how much effort is invested into making small details shine - to help developers get the job done.","metadata":{"source":"https://www.gitpod.io/blog/devxconf-2022-wrap","loc":{"lines":{"from":61,"to":67}}}}],["232",{"pageContent":"- Developer experience also touches on the soft aspects that make teams succeed. Companies increasingly care more about developer productivity. As almost every company on the planet is turning into a company that writes and works with software, developer experience will become ever more important.\n\n- Modern engineering teams are mostly distributed and work on highly complex technology stacks. Tooling should not constrain; it should enable them.\n\n# The conference videos are now available\n\nAt DevX Conf 2022, we created a space where new concepts and ways of doing things were discussed and provided the stage to the growing number of contributors to the DevX ecosystem by highlighting projects that are at the forefront of developer experience.","metadata":{"source":"https://www.gitpod.io/blog/devxconf-2022-wrap","loc":{"lines":{"from":69,"to":75}}}}],["233",{"pageContent":"Some notable talks by speakers at DevX Conf shared how to [build an internal team](https://www.youtube.com/watch?v=xX5zeVy8Ta4) focused on developer experience, how to [onboard developers in a day](https://www.youtube.com/watch?v=mDpSVbEjEtw), and approach [product design](https://www.youtube.com/watch?v=-oSb5GUyUFo) and [product management](https://www.youtube.com/watch?v=ja-Pr58FCIQ) from a developer-first perspective.\n\nAll twenty seven talks from the conference are now [available on YouTube](https://www.youtube.com/playlist?list=PL3TSF5whlprXqwYNIM0X8mBzula2McGKd) and over in the [Discord server](https://www.gitpod.io/chat) you'll find dedicated rooms filled with people who deeply care about the topic of DevX. We will be back next year, bigger than ever but until then cya in [Discord](https://www.gitpod.io/chat)?","metadata":{"source":"https://www.gitpod.io/blog/devxconf-2022-wrap","loc":{"lines":{"from":77,"to":79}}}}],["234",{"pageContent":"<iframe width=\"100%\" height=\"480px\" src=\"https://www.youtube.com/embed/videoseries?list=PL3TSF5whlprXqwYNIM0X8mBzula2McGKd\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>","metadata":{"source":"https://www.gitpod.io/blog/devxconf-2022-wrap","loc":{"lines":{"from":81,"to":81}}}}],["235",{"pageContent":"---\nauthor: chrifro, ghuntley\ndate: Thursday, 3 Jun 2021 11:00:00 UTC\nexcerpt: As part of Gitpod’s Open-Source Sustainability Fund initiative attendees of DevX Conf were able to decide where USD 10,000 of funds (the profits from DevX Conf plus an additional donation by Gitpod) were to be distributed. Here's the breakdown how the fund was split and our retrospective on running our first-ever conference.\nimage: teaser.png\nslug: devxconf-wrap\nsubtitle:\nteaserImage: teaser.png\ntags: [\"Company building\"]\ntitle: DevX Conf wrap & distributing USD 10k of open-source funding\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>","metadata":{"source":"https://www.gitpod.io/blog/devxconf-wrap","loc":{"lines":{"from":1,"to":15}}}}],["236",{"pageContent":"<script context=\"module\">\n  export const prerender = true;\n</script>\n\nOn April 28- 29 we hosted the [DevX Conference](http://www.devxconf.org), a space where creators could collaborate, listen, discuss and declutter dev workflows, toolchains and minds. To improve developer experience. We wanted to foster an ecosystem that sparks dialogue and establishes best practices and frameworks across the areas of coding, testing, building, deploying, collaborating on, and running software.","metadata":{"source":"https://www.gitpod.io/blog/devxconf-wrap","loc":{"lines":{"from":15,"to":19}}}}],["237",{"pageContent":"Speakers included [Jason Warner](https://twitter.com/jasoncwarner) (CTO GitHub), [Beyang Liu](https://twitter.com/beyang) (CTO Sourcegraph), [Josh Long](https://twitter.com/starbuxman) (Spring), [Shanea Leven](https://www.linkedin.com/in/shaneak/) (Founder Codesee), [Ellen Chisa](https://twitter.com/ellenchisa) (Founder Darklang), [Henry Zhu](https://twitter.com/left_pad) (Steward of BabelJS), [Maël Nison](https://twitter.com/arcanis) (Creator Yarn), [Nader Dabit](https://twitter.com/dabit3) (GraphQL & Serverless), [Anurag Goel](https://www.linkedin.com/in/anuragoel/) (Founder Render), [Yihong Cheng](https://github.com/xcv58) (Github1s), [Tuomas Artman](https://twitter.com/artman) (Founder Linear) and many more.","metadata":{"source":"https://www.gitpod.io/blog/devxconf-wrap","loc":{"lines":{"from":21,"to":21}}}}],["238",{"pageContent":"Event retrospective\n\nFirst of all, we were amazed by the attention that was drawn by this topic. It was the first conference ever organized by this team and it was being driven by a Gitpod, a company that's still on the starting line of its potential. More than 1.5k curious minds signed up for the event and more than 40% of them attended the live conference. There, 28 great speakers shared their expertise and unique knowledge with us. In case you missed a talk or would like to see them again, all recordings are now available on YouTube. To provide a space for attendees and speakers to interact live during the talks, we created a discord server. In total 550+ users signed up to join the live discussions. If you haven't joined the channel yet and would like to stay connected with the community, [you can still join](https://www.gitpod.io/chat).","metadata":{"source":"https://www.gitpod.io/blog/devxconf-wrap","loc":{"lines":{"from":23,"to":25}}}}],["239",{"pageContent":"[![I'm very glad developer experience is picking up so much steam that there's now a dedicated conference for it: http://devxconf.org. Not only that, Gitpod is donating all the commercial proceeds from sponsors to open source projects they rely on!! Exploding 🤯👏](../../../static/images/blog/devxconf-wrap/tweet-mxstbr.png)](https://twitter.com/mxstbr/status/1385511937845387269)","metadata":{"source":"https://www.gitpod.io/blog/devxconf-wrap","loc":{"lines":{"from":27,"to":27}}}}],["240",{"pageContent":"Event Highlights\n\nHere are just a few highlights of the event:\n\n- An interview with Erich Gamma, the lead developer of VS Code, about the [Evolution of DevX Conf](https://www.youtube.com/watch?v=JiBUDS9odA8&list=PL3TSF5whlprUTnpP9drAl-knNUnPqKrui&index=2&t=1277s)\n- A talk by Ellen Chisa, the co-founder of Dark Lang, who discussed the hypothesis that <a class=\"no-nowrap\" href=\"https://www.youtube.com/watch?v=nPO4QL0Q85s&amp;list=PL3TSF5whlprUTnpP9drAl-knNUnPqKrui&amp;index=4&amp;t=17s\">DevX isn’t good, because developers don’t want it to be</a>\n- A talk about <a class=\"no-nowrap\" href=\"https://www.youtube.com/watch?v=0wRUU0ln9-0&amp;list=PL3TSF5whlprUTnpP9drAl-knNUnPqKrui&amp;index=4&amp;t=17s\">being trapped in the open source supply chain</a> by Henry Zhu, the Steward of BabelJS\n\nAll talks are now available for watching via this [playlist on YouTube](https://www.youtube.com/playlist?list=PL3TSF5whlprUTnpP9drAl-knNUnPqKrui).","metadata":{"source":"https://www.gitpod.io/blog/devxconf-wrap","loc":{"lines":{"from":29,"to":37}}}}],["241",{"pageContent":"Funding open source\n\n[![🤯 @gitpod is starting an Open-Source Sustainability Fund to help FOSS maintainers. What is more amazing that based on voting, Emacs's lsp-mode received almost 3% of the initial pool from @devxcommunity! Check https://gitpod.io/blog/gitpod-open-source-sustainability-fund/ for more.](../../../static/images/blog/devxconf-wrap/tweet-yonchovski.png)](https://twitter.com/yonchovski/status/1390659877740158976)\n\nThe truth is free software isn't free. How much is a task going to cost in person hours? Hours have rates. Rates require payment. Yet, an entire community of developers provide their services outside of their day job to produce tools consumed by businesses.\n\nDid you know there are less than 2100 people in the inner GitHub open-source maintainer community?\n\n![Maintainer Community](../../../static/images/blog/gitpod-open-source-sustainability-fund/maintainer-community.png)","metadata":{"source":"https://www.gitpod.io/blog/devxconf-wrap","loc":{"lines":{"from":39,"to":47}}}}],["242",{"pageContent":"![Maintainer Community](../../../static/images/blog/gitpod-open-source-sustainability-fund/maintainer-community.png)\n\n**At Gitpod, we often wonder what the future would look like if these high achievers that our digital society is built upon were empowered to become independent artists.** If just one of those people can help more people better understand a technology or improve the developer experience for an entire ecosystem what is the worth/value of that and why isn't our industry doing that yet?\n\nThe word volunteer, by definition, means those who have the ability and time to give freely.\n\nPaying for resources that are being consumed broadens the list of people who can do open-source. Additionally, money enables open-source maintainers to buy services and outsource the activities that do not bring them joy.","metadata":{"source":"https://www.gitpod.io/blog/devxconf-wrap","loc":{"lines":{"from":47,"to":53}}}}],["243",{"pageContent":"At Gitpod, we firmly believe that working for an open-source project should be a legitimate alternative to a career working for a for-profit corporation. Additionally, we'd like everyone to be able to maintain open-source projects, not just people with the right financial background or youth that enables the ability to volunteer.\n\nThe myriad of tools that are relied upon by developers everyday are built and maintained almost exclusively by unpaid volunteers, and the maintainers of open-source projects, our digital infrastructure. Just like physical infrastructure, digital infrastructure needs regular upkeep and maintenance. Without effective support for open-source authors work, not only will their labor go uncompensated, but the digital world risks security breaches, interruptions in service, and slowed innovation.","metadata":{"source":"https://www.gitpod.io/blog/devxconf-wrap","loc":{"lines":{"from":55,"to":57}}}}],["244",{"pageContent":"![Credit: Sajjad Ahmadi](https://images.unsplash.com/photo-1555058948-15e4e2a1ba93?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1500&q=80)\n_Credit: [Sajjad Ahmadi](https://unsplash.com/photos/96m9K49qaPw)_\n\nAs part of Gitpod's [Open-Source Sustainability Fund initiative](/blog/gitpod-open-source-sustainability-fund/) attendees of the DevX Conf <a class=\"no-nowrap\" href=\"https://devxconf.org/opensource\">were able to decide where $10,000 USD of funds</a> (the profits from DevX Conf plus an additional donation by Gitpod) were to be distributed. We thought long and hard about _what_ projects to include in the competition and pondered about:\n\n- **what exactly is digital infrastructure?**\n- **what tools are relied upon by developers every day that are built and maintained almost exclusively by unpaid volunteers?**.","metadata":{"source":"https://www.gitpod.io/blog/devxconf-wrap","loc":{"lines":{"from":59,"to":65}}}}],["245",{"pageContent":"- **what exactly is digital infrastructure?**\n- **what tools are relied upon by developers every day that are built and maintained almost exclusively by unpaid volunteers?**.\n\nAfter some dialectical thinking, the answer became clear: projects built by unpaid volunteers in the category of [linters](<https://en.wikipedia.org/wiki/Lint_(software)>) and [language server protocol](https://langserver.org/) implementations.\n\nOver the last month Gitpod has been emailing maintainers and distributing the funds.\n\n[![🤯👏](../../../static/images/blog/devxconf-wrap/shellcheck-email.png)](https://github.com/koalaman/shellcheck)\n\n[![🤯👏](../../../static/images/blog/devxconf-wrap/shellcheck-sponsorship.png)](https://github.com/koalaman/shellcheck)","metadata":{"source":"https://www.gitpod.io/blog/devxconf-wrap","loc":{"lines":{"from":65,"to":74}}}}],["246",{"pageContent":"[![🤯👏](../../../static/images/blog/devxconf-wrap/shellcheck-sponsorship.png)](https://github.com/koalaman/shellcheck)\n\nAttendees of the DevX Conference were able to vote once for each of the projects, and the distribution of funds was calculated using Quadratic Funding ([Paper](https://arxiv.org/pdf/1809.06421.pdf)). See [wtfisqf.com](https://wtfisqf.com/?grant=4&grant=4&grant=3&grant=4&grant=11&grant=7&grant=5&grant=4&grant=9&grant=12&grant=6&grant=24&grant=3&grant=7&grant=17&grant=7&grant=15&match=10000) for a breakdown of how the fund was split. Each vote was considered a share (or $1 matched), and then a total amount was set to $10,000.","metadata":{"source":"https://www.gitpod.io/blog/devxconf-wrap","loc":{"lines":{"from":74,"to":76}}}}],["247",{"pageContent":"[![🤯 Woah Gitpod just donated ✨$212✨ to patch-package! They're democratically dividing $10k between a small set of OSS dev tools https://devxconf.org/opensource – what a lovely idea, I'm so honored to be included Smiling face I'll keep $5 for a beer and forward the rest to worthy causes. ](../../../static/images/blog/devxconf-wrap/tweet-djsheldrick.png)](https://twitter.com/djsheldrick/status/1392419294852550656)\n\nIn total there were 17 projects that were available for voting:\n\n<div class=\"overflow-x-auto\">","metadata":{"source":"https://www.gitpod.io/blog/devxconf-wrap","loc":{"lines":{"from":78,"to":82}}}}],["248",{"pageContent":"| Name                                                                                                                                                                                                                                                                                  | URL                                                 | Split of funding from $10k USD |\n| ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------- | ------------------------------ |","metadata":{"source":"https://www.gitpod.io/blog/devxconf-wrap","loc":{"lines":{"from":84,"to":85}}}}],["249",{"pageContent":"| 01. **ccls** is a C/C++/ObjC language server supporting cross references, hierarchies, completion and semantic highlighting.                                                                                                                                                          | https://github.com/MaskRay/ccls                     | $281.69                        |\n| 02. **erlang_ls** is an implementation of Language Server Protocol for the Erlang programming language.                                                                                                                                                                               | https://github.com/erlang-ls/erlang_ls              | $281.69                        |","metadata":{"source":"https://www.gitpod.io/blog/devxconf-wrap","loc":{"lines":{"from":86,"to":87}}}}],["250",{"pageContent":"| 03. **ElixirLS** is a frontend-independent IDE \"smartness\" server for Elixir. Implements the \"Language Server Protocol\" standard and provides debugger support via the \"Debug Adapter Protocol\"                                                                                       | https://github.com/elixir-lsp/elixir-ls             | $211.27                        |\n| 04. **elm-language-server** is an implementation of Language Server Protocol for the ELM programming language.                                                                                                                                                                        | https://github.com/elm-tooling/elm-language-server  | $281.69                        |","metadata":{"source":"https://www.gitpod.io/blog/devxconf-wrap","loc":{"lines":{"from":88,"to":89}}}}],["251",{"pageContent":"| 05. **hadolint** is a smarter Dockerfile linter that helps you build best practice Docker images. The linter is parsing the Dockerfile into an AST and performs rules on top of the AST. It is standing on the shoulders of ShellCheck to lint the Bash code inside RUN instructions. | https://github.com/hadolint/hadolint                | $774.65                        |\n| 06. **Haskell IDE Engine** aims to be the universal interface to a growing number of Haskell tools, providing a fully-featured Language Server Protocol server for editors and IDEs that require Haskell-specific functionality.                                                      | https://github.com/haskell/haskell-ide-engine       | $492.96                        |","metadata":{"source":"https://www.gitpod.io/blog/devxconf-wrap","loc":{"lines":{"from":90,"to":91}}}}],["252",{"pageContent":"| 07. **Ionide** is an organization which builds high quality, cross platform developer tools for F#. Our flagship project is Ionide-VSCode - a Visual Studio Code plugin, with more than 1 million downloads, transforming VSCode into a fully-fledged F# IDE                          | https://github.com/ionide                           | $352.11                        |\n| 08. **lsp-mode** is a Emacs client/library for the Language Server Protocol with multiples languages support.                                                                                                                                                                         | https://github.com/emacs-lsp/lsp-mode               | $281.69                        |","metadata":{"source":"https://www.gitpod.io/blog/devxconf-wrap","loc":{"lines":{"from":92,"to":93}}}}],["253",{"pageContent":"| 09. **ruby-together** is a grassroots initiative committed to supporting the critical Ruby infrastructure you rely on: Bundler, RubyGems, and other shared tools.                                                                                                                     | https://rubytogether.org/                           | $633.8                         |\n| 10. Rust-analyzer is an implementation of Language Server Protocol for the Rust programming language. It provides features like completion and goto definition for many code editors, including VS Code, Emacs and Vim.                                                               | https://github.com/rust-analyzer/rust-analyzer      | $845.07                        |","metadata":{"source":"https://www.gitpod.io/blog/devxconf-wrap","loc":{"lines":{"from":94,"to":95}}}}],["254",{"pageContent":"| 11. **rvm** is the acronym of Ruby enVironment Manager. It manages Ruby application environments and enables switching between them..                                                                                                                                                 | https://github.com/rvm/rvm                          | $422.54                        |\n| 12. **shellcheck** is a tool that gives warnings and suggestions for bash/sh shell scripts:                                                                                                                                                                                           | https://github.com/koalaman/shellcheck              | $1690.14                       |","metadata":{"source":"https://www.gitpod.io/blog/devxconf-wrap","loc":{"lines":{"from":96,"to":97}}}}],["255",{"pageContent":"| 13. **patch-package** lets app authors instantly make and keep fixes to npm dependencies. A vital band-aid for javascript developers living on the bleeding edge.                                                                                                                     | https://github.com/ds300/patch-package              | $211.27                        |\n| 14. **php-language-server** is an implementation of Language Server Protocol for the PHP programming language.                                                                                                                                                                        | https://github.com/felixfbecker/php-language-server | $492.96                        |","metadata":{"source":"https://www.gitpod.io/blog/devxconf-wrap","loc":{"lines":{"from":98,"to":99}}}}],["256",{"pageContent":"| 15. pre-commit is a framework for managing and maintaining multi-language pre-commit Git hooks.                                                                                                                                                                                       | https://github.com/pre-commit/pre-commit            | $1197.18                       |\n| 16. **vim-lsp** is an async Language Server Protocol plugin for vim8 and neovim.                                                                                                                                                                                                      | https://github.com/prabirshrestha/vim-lsp           | $492.96                        |","metadata":{"source":"https://www.gitpod.io/blog/devxconf-wrap","loc":{"lines":{"from":100,"to":101}}}}],["257",{"pageContent":"| 17. **yamllint** is a linter for YAML.                                                                                                                                                                                                                                                | https://github.com/adrienverge/yamllint             | $1056.34                       |","metadata":{"source":"https://www.gitpod.io/blog/devxconf-wrap","loc":{"lines":{"from":102,"to":102}}}}],["258",{"pageContent":"</div>\n\n<br/>\n\nOnly a fraction of funds has been distributed at this stage because, as an industry, we haven't documented and established straightforward ways where companies can give open-source projects money.\n\n[![🤯👏](../../../static/images/blog/devxconf-wrap/pre-commit-sponsorship.png)](https://github.com/pre-commit/pre-commit)\n\nSending hand crafted emails (assuming an email address is publically available 😢) asking projects these questions isn't scalable, and most companies would not do this manual grunt work. 😉\n\n<!-- [![Thanks Gitpod for helping make development of @pre_commit (and open source) more sustainable!](../../../static/images/blog/devxconf-wrap/tweet-codewithanthony.png)](https://twitter.com/codewithanthony/status/1391524021984915456) -->\n\nIf you are the steward of one of the above, open-source projects, then there's one simple, easy step you can do to enable Gitpod and other companies to provide financial support...","metadata":{"source":"https://www.gitpod.io/blog/devxconf-wrap","loc":{"lines":{"from":104,"to":116}}}}],["259",{"pageContent":"If you are the steward of one of the above, open-source projects, then there's one simple, easy step you can do to enable Gitpod and other companies to provide financial support...\n\n- 1. Go sign up to [GitHub Sponsors](https://github.com/sponsors) or [Open Collective](https://www.opencollective.com)\n- 2. Publically document the process of how companies can support your project.\n- 3. Send an email to <a href=\"mailto:contact@gitpod.io?subject=Distribution of DevX Open-source Funding\">contact@gitpod.io</a>.\n- 4. Nominate where funding should be directed (if you wish to divert the funds to a cause that helps improve diversity in open-source such as [Outreachy](https://www.outreachy.org/) that's possible!)","metadata":{"source":"https://www.gitpod.io/blog/devxconf-wrap","loc":{"lines":{"from":116,"to":121}}}}],["260",{"pageContent":"Thanks\n\nThanks to everyone who participated in DevX Conf and who voted to support these great open-source projects. Shout out to Vercel for creating the [Event Starter Kit](https://vercel.com/virtual-event-starter-kit) and making it open-source. It facilitated our lives a lot and basically gave us the confidence to organize the conference in the first place. Thanks a lot! 🙇‍♀️ 🙇‍♂️\n\nA big thanks also goes to the whole team organizing the event including Johannes Landgraf, Nisar Hassan Naqvi, and Mike Nikles 🙌\n\nWe're looking forward to growing the community around developer experience and can't wait to see you all at the next DevX Conf! 🧡","metadata":{"source":"https://www.gitpod.io/blog/devxconf-wrap","loc":{"lines":{"from":123,"to":129}}}}],["261",{"pageContent":"---\nauthor: geropl\ndate: Wed Sep 12 2018 08:25:15 GMT+0000 (UTC)\nexcerpt: Since we released Gitpod into Public Beta it has been incredibly exciting to see people from all over the world use our service.\nimage: docker-in-gitpod.jpeg\nslug: docker-in-gitpod\ntitle: Bring your own (Docker) image to Gitpod\ntags: [\"Gitpod updates\"]\nurl: https://medium.com/gitpod/bring-your-own-docker-image-to-gitpod-52db1aa861de\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\nSince we released Gitpod into Public Beta it has been incredibly exciting to see people from all over the world use our service. Even more so with feedback like this:\n\n[![George Kalpakas Tweet about Gitpod](../../../static/images/blog/docker-in-gitpod/tweet.png)](https://twitter.com/gkalpakas/status/1037800090977619973)","metadata":{"source":"https://www.gitpod.io/blog/docker-in-gitpod","loc":{"lines":{"from":1,"to":18}}}}],["262",{"pageContent":"[![George Kalpakas Tweet about Gitpod](../../../static/images/blog/docker-in-gitpod/tweet.png)](https://twitter.com/gkalpakas/status/1037800090977619973)\n\nOf course, there is always room for improvement, especially with a service as new as Gitpod. Luckily, people have started to share their questions and ideas with us on [https://github.com/gitpod-io/gitpod](https://github.com/gitpod-io/gitpod). One of the most often asked questions was:\n\n<h2>“How do I add tool XYZ to my workspace?”</h2>\n\nAnd indeed that hasn’t been straight forward. You had to:\n\n- create a Dockerfile on your machine\n\n- build that Dockerfile on your machine\n\n- push it to hub.docker.com (no account? Create one first!)\n\n- create a branch in your project with a customized .gitpod.yml file which references that specific image\n\n- visit _gitpod.io/#<your-repos-branch-url>_\n\n- get no feedback except ‘Build has status FAILURE’…\n\n- rinse and repeat from step 2\n\nThat was way too tedious for everyone to start playing around.","metadata":{"source":"https://www.gitpod.io/blog/docker-in-gitpod","loc":{"lines":{"from":18,"to":40}}}}],["263",{"pageContent":"- visit _gitpod.io/#<your-repos-branch-url>_\n\n- get no feedback except ‘Build has status FAILURE’…\n\n- rinse and repeat from step 2\n\nThat was way too tedious for everyone to start playing around.\n\n<h2>Let Gitpod do the heavy lifting</h2>\n\nTo improve this experience we introduced[ Dockerfile support (#62)](https://github.com/gitpod-io/gitpod/issues/62), which lets you reference your Dockerfile directly from inside your .gitpod.yml file:\n\n```yaml\nimage:\n  file: docker/Dockerfile","metadata":{"source":"https://www.gitpod.io/blog/docker-in-gitpod","loc":{"lines":{"from":40,"to":54}}}}],["264",{"pageContent":"Now, Gitpod knows about the Dockerfile and builds that image for you. Whenever you access the repository on Gitpod it checks whether the Dockerfile has been updated and rebuilds the image if needed. When this happens you’ll be shown the log output of the build for easier debugging, too.\n\n<h2>An example, please!</h2>\n\nLet’s get concrete. As an exercise we’ll use [a minimal REST service](https://github.com/lankydan/rust-web-with-rocket) written in [Rust](https://www.rust-lang.org/) using Rocket and Diesel that talks to a PostgreSQL DB. It also has a nice [ blog post](https://lankydanblog.com/2018/05/20/creating-a-rusty-rocket-fuelled-with-diesel/) to get started.","metadata":{"source":"https://www.gitpod.io/blog/docker-in-gitpod","loc":{"lines":{"from":57,"to":61}}}}],["265",{"pageContent":"The example relies on a very specific nightly build of the Rust compiler from May 2018. Thus, a simple git clone … && cargo build && cargo run won’t get you up-and-running. Of course, you could switch Rust toolchains but then other projects on your machine might stop working. Furthermore, there is more setup and tools to install: A database, a CLI tool…\nGitpod to the rescue!\n\nI went to [gitpod-io/definitely-gp](https://github.com/gitpod-io/definitely-gp/) and added a [*.*gitpod.yml](https://github.com/gitpod-io/definitely-gp/blob/master/rust-web-with-rocket/.gitpod.yml) and [Dockerfile](https://github.com/gitpod-io/definitely-gp/blob/master/rust-web-with-rocket/Dockerfile) there. The *.*gitpod.yml file looks like this:","metadata":{"source":"https://www.gitpod.io/blog/docker-in-gitpod","loc":{"lines":{"from":63,"to":66}}}}],["266",{"pageContent":"```yaml\nimage:\n  file: Dockerfile\ntasks:\n  - command: |\n      echo DATABASE_URL=$DATABASE_URL >> .env\n      echo ROCKET_ADDRESS=$ROCKET_ADDRESS >> .env\n      echo ROCKET_PORT=$ROCKET_PORT >> .env\n      pg_start.sh\n      diesel setup\n      cargo build\n      cargo run\nports:\n  - port: 8000","metadata":{"source":"https://www.gitpod.io/blog/docker-in-gitpod","loc":{"lines":{"from":68,"to":81}}}}],["267",{"pageContent":"It references the Dockerfile next to it, says that the resulting app should be accessible on port 8000 and contains the command executed on workspace startup: set config, start postgres, build and run app (I basically copied those from the repo’s .md file).\n\nThe Dockerfile itself inherits from our default image [gitpod/workspace-full](https://hub.docker.com/r/gitpod/workspace-full/)¹ and contains:\n\n- PostgreSQL (+ some configuration for the gitpod user)\n\n- specific Rust toolchain\n\n- some project specific setup\n\nHere it is:\n\n```bash\nFROM gitpod/workspace-full:latest\n\n# Install postgres\nUSER root\nRUN apt-get update && apt-get install -y \\\n        postgresql \\\n        postgresql-contrib \\\n    && apt-get clean && rm -rf /var/cache/apt/* && rm -rf /var/lib/apt/lists/* && rm -rf /tmp/*","metadata":{"source":"https://www.gitpod.io/blog/docker-in-gitpod","loc":{"lines":{"from":84,"to":104}}}}],["268",{"pageContent":"# Setup postgres server for user gitpod\nUSER gitpod\nENV PATH=\"/usr/lib/postgresql/10/bin:$PATH\"\nRUN mkdir -p ~/pg/data; mkdir -p ~/pg/scripts; mkdir -p ~/pg/logs; mkdir -p ~/pg/sockets; initdb -D pg/data/\nRUN echo '#!/bin/bash\\n\\\npg_ctl -D ~/pg/data/ -l ~/pg/logs/log -o \"-k ~/pg/sockets\" start' > ~/pg/scripts/pg_start.sh\nRUN echo '#!/bin/bash\\n\\\npg_ctl -D ~/pg/data/ -l ~/pg/logs/log -o \"-k ~/pg/sockets\" stop' > ~/pg/scripts/pg_stop.sh\nRUN chmod +x ~/pg/scripts/*\nENV PATH=\"$HOME/pg/scripts:$PATH\"\n\n# Project specifics\n# Setup diesel_cli\nENV PATH=\"$HOME/.cargo/bin:$PATH\"\nRUN cargo install diesel_cli --no-default-features --features postgres\n\n# Some transitive dependencies are very picky: We need the nightly build build on the 2018-04-14, meant for the 2018-04-15\nRUN rustup default nightly-2018-04-15\n# Set some environment variables\nENV DATABASE_URL=postgres://gitpod@127.0.0.1/rust-web-with-rocket\nENV ROCKET_ADDRESS=0.0.0.0\nENV ROCKET_PORT=8000\n\n# Give back control\nUSER root","metadata":{"source":"https://www.gitpod.io/blog/docker-in-gitpod","loc":{"lines":{"from":106,"to":130}}}}],["269",{"pageContent":"Remember, this is done once per project. Most projects already have those setup descriptions, they are just buried inside their README.\n\nNow whenever anyone accesses the repository through Gitpod, be it a branch, a particular commit, an issue or a [ PR,](/blog/when-code-reviews-lgtm) they will get a custom workspace with all the tools set up and running, out of the box. [Give it a spin](https://gitpod.io/#https://github.com/lankydan/rust-web-with-rocket)!\n\nOnce the service has build and is running, we just follow the tutorial:\n\n- Open /people: Click Open on the appearing messagebox² and change the path in the integrated browser to http://8000-<your-workspace-url>/people , click Reload : The query results in an empty []\n\n- Hit F1 -> \"Open new Terminal\" and paste:\n\n```bash\ncurl -XPOST [http://localhost:8000/people](http://localhost:8000/people) -H \"Content-Type: application/json\" --data '{\"id\": 123, \"first_name\": \"Jon\", \"last_name\": \"Doe\", \"age\": 64, \"profession\": \"Engineer\", \"salary\": 1024}'","metadata":{"source":"https://www.gitpod.io/blog/docker-in-gitpod","loc":{"lines":{"from":133,"to":144}}}}],["270",{"pageContent":"- Hit Reload again to see Jon Doe’s people entry","metadata":{"source":"https://www.gitpod.io/blog/docker-in-gitpod","loc":{"lines":{"from":147,"to":147}}}}],["271",{"pageContent":"Try it yourself\n\nYou can either create a PR on[ gitpod-io/definitely-gp](https://github.com/gitpod-io/definitely-gp) — or dive right in and create the [.gitpod.yml in your repositories](/docs/references/gitpod-yml#checked-in-gitpod-config-file)! For details on how this works and what is possible please head over to [the docs](/docs/references/gitpod-yml).\n\n¹ It is not required to inherit from that image at all. You can even start with a plain alpine or debian based image. I used it here for convenience.\n\n² Alternatively, go to View -> Ports and click Open","metadata":{"source":"https://www.gitpod.io/blog/docker-in-gitpod","loc":{"lines":{"from":149,"to":155}}}}],["272",{"pageContent":"---\nauthor: burningion\ndate: Tuesday, 28 Mar 2023 11:00:00 UTC\nexcerpt: Provision limited, disposable access to AWS development environments with Gitpod and Doppler\nslug: dynamic-aws-development-environments-with-doppler-and-gitpod\ntags: [\"Engineering\", \"Developer experience\"]\nimage: aws-dev-env.webp\nteaserImage: aws-dev-env-small.webp\ntitle: Dynamic AWS Development Environments with Doppler and Gitpod\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\nRegardless of where you develop, having access to machines that closely match production can help minimize unexpected outages. In the hypothetical, containers should run the same regardless of where they’re deployed, but in practice, slight discrepancies seem to show themselves at the most inopportune times.","metadata":{"source":"https://www.gitpod.io/blog/dynamic-aws-development-environments-with-doppler-and-gitpod","loc":{"lines":{"from":1,"to":16}}}}],["273",{"pageContent":"But how do you manage access to and the provisioning of cloud resources for development in a secure, low cost manner? The most naive way is to create AWS accounts for each developer, and have them add access to their laptop, in a `~/.aws/credentials` file. Then trust and remind each developer to clean up their unused infrastructure.\n\nThis can prove problematic though, especially when [developer laptops](https://www.techtarget.com/searchsecurity/news/365532032/LastPass-breach-tied-to-hack-of-engineers-home-computer) are compromised. Malicious actors can potentially take these longer lived credentials, and use them to either compromise production, or look for more secrets / keys in existing infrastructure.\n\nIn an ideal world, credentials always have a reasonable expiration, with limited access to the necessary AWS infrastructure.","metadata":{"source":"https://www.gitpod.io/blog/dynamic-aws-development-environments-with-doppler-and-gitpod","loc":{"lines":{"from":18,"to":22}}}}],["274",{"pageContent":"Dynamic AWS Credentials (IAM Roles) with Doppler\n\n![Dynamic Secrets](../../../static/images/blog/dynamic-aws-development-environments-with-doppler-and-gitpod/dynamic-secret.png)\n\n[Doppler](https://www.doppler.com/) is a SecretOps platform for provisioning secrets across multiple development environments. It allows you to better manage and rotate keys, configuration, and secrets from dev to production.\n\nNotably, Doppler has a [feature](https://docs.doppler.com/docs/aws-iam) which allows for the creation of disposable AWS credentials. These credentials are created by an integration between Doppler and AWS that allows for the provisioning of IAM users.\n\nDoppler manages the lease and revoking of these IAM users, and grants them the roles you set up in your configuration. These permissions can be limited to your application / environment, for example only granting access to EC2, S3, and ECR.","metadata":{"source":"https://www.gitpod.io/blog/dynamic-aws-development-environments-with-doppler-and-gitpod","loc":{"lines":{"from":24,"to":32}}}}],["275",{"pageContent":"This access should match what developers need to best test and develop their applications. If, for example, they need access to AWS Lambda, make sure to grant that permission, along with any load balancers / network ingress that may be necessary.","metadata":{"source":"https://www.gitpod.io/blog/dynamic-aws-development-environments-with-doppler-and-gitpod","loc":{"lines":{"from":34,"to":34}}}}],["276",{"pageContent":"Automatic AWS CLI Access in Gitpod\n\nOf course, one of the most common ways of interacting with AWS is via the AWS CLI. In order to get the CLI set up in Gitpod with AWS, we need to first install the AWS CLI in our [workspace](https://www.gitpod.io/docs/configure/workspaces), and then ensure that Doppler injects our dynamic credentials into the `~/.aws/credentials` file.\n\nI prefer my development environment to spin up as quickly as possible, so rather than install the AWS CLI and Doppler binary in a [task](https://www.gitpod.io/docs/configure/workspaces/tasks), I prefer to create a custom `.gitpod.Dockerfile`:\n\n```dockerfile\nFROM gitpod/workspace-python-3.11:latest","metadata":{"source":"https://www.gitpod.io/blog/dynamic-aws-development-environments-with-doppler-and-gitpod","loc":{"lines":{"from":36,"to":43}}}}],["277",{"pageContent":"```dockerfile\nFROM gitpod/workspace-python-3.11:latest\n\n# Install & configure Doppler CLI\nRUN (curl -Ls --tlsv1.2 --proto \"=https\" --retry 3 https://cli.doppler.com/install.sh || wget -t 3 -qO- https://cli.doppler.com/install.sh) | sudo sh\n# Install AWS CLI\nRUN curl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o \"awscliv2.zip\"\nRUN unzip awscliv2.zip\nRUN sudo ./aws/install\nRUN mkdir /home/gitpod/.aws","metadata":{"source":"https://www.gitpod.io/blog/dynamic-aws-development-environments-with-doppler-and-gitpod","loc":{"lines":{"from":43,"to":52}}}}],["278",{"pageContent":"You’ll notice that I also used the `gitpod/workspace-python-3.11:latest` as my base image. I’m currently using a Python project for my development, and so this makes the most sense for my application. [Depending on your needs](https://www.gitpod.io/docs/configure/workspaces/workspace-image), you can pick one of the other [base images from Gitpod](https://github.com/gitpod-io/workspace-images/#images).\n\nNext, we’ll need to create a `doppler.yaml` in the root of our repository to let Doppler know which project the repo is associated with, and which environment we’re running in:\n\n```yaml\nsetup:\n  project: dynamic-secrets-gitpod\n  config: dev","metadata":{"source":"https://www.gitpod.io/blog/dynamic-aws-development-environments-with-doppler-and-gitpod","loc":{"lines":{"from":55,"to":62}}}}],["279",{"pageContent":"With this, I can finally set my `.gitpod.yml`, so that I configure Doppler access, and then inject my disposable AWS credentials into my CDE. All together, my file looks like this:\n\n```yaml\nimage:\n  file: .gitpod.Dockerfile\n\ntasks:\n  - init: pip install textual\n    command: doppler setup --no-interactive && doppler secrets substitute aws-creds > ~/.aws/credentials && doppler secrets substitute aws-conf > ~/.aws/configuration && python3 cli.py\n```\n\nBreaking down the configuration, we first specify our custom Dockerfile we saved, for Gitpod to build from. We then add a pip install for textual, a terminal application library I’m using for my repo, followed by the actual commands to authenticate with Doppler, and inject our credentials into the two new template files we’ve created, `aws-creds`, and `aws-conf`.","metadata":{"source":"https://www.gitpod.io/blog/dynamic-aws-development-environments-with-doppler-and-gitpod","loc":{"lines":{"from":65,"to":76}}}}],["280",{"pageContent":"Writing the AWS Credentials Template\n\nOrdinarily, Doppler recommends you use named pipes to prevent your secrets from being written to disk. However, the AWS CLI does not currently read from named pipes. This means we’ll need to write our (again, temporary) credentials to disk instead. We’ve done this in our `.gitpod.yml` via our `doppler secrets substitute aws-creds > ~/.aws/credentials`.\n\nOur template file is straightforward, and matches the common Golang template syntax:\n\n```\n[default]\naws_access_key_id={{ .CUSTOM_IAM_LAMBDA_ACCESS_KEY_ID }}\naws_secret_access_key={{ .CUSTOM_IAM_LAMBDA_SECRET_ACCESS_KEY }}\n```\n\nNote that we have a `.` prefix in front of our variable names. These are followed by the name of our role we configured earlier and the name of the variable created.\n\nWe can do the same for our `aws-conf` file, or, as in my case, just hardcode the preferences for our preferred AWS region:\n\n```\n[default]\nregion=us-west-2\noutput=json","metadata":{"source":"https://www.gitpod.io/blog/dynamic-aws-development-environments-with-doppler-and-gitpod","loc":{"lines":{"from":78,"to":97}}}}],["281",{"pageContent":"You may want to have these values be environment variables settable by developers. This could allow them to (for example) spin up infrastructure that is closest to their physical location, minimizing the latency they have to deal with. Again, in our task we inject secrets from Doppler into this file (if there are any), and then copy the file to `~/.aws/configuration`.","metadata":{"source":"https://www.gitpod.io/blog/dynamic-aws-development-environments-with-doppler-and-gitpod","loc":{"lines":{"from":100,"to":100}}}}],["282",{"pageContent":"Verifying the AWS Credentials\n\nFinally, we need to verify that our credentials are actually provisioned properly in our AWS environment. To do this, we can do the most basic of aws-cli calls, and ensure that we’re able to actually authenticate:\n\n```bash\n$ aws sts get-caller-identity\n```\n\nWith this, a JSON object should pop out, letting you know who your UserId, Account, and Arn are. These should now match the role we created earlier.\n\n## Continuing to Improve the Developer Experience\n\nThis just scratches the surface of what is possible with AWS integration in your development environment. From here, we could provision a database with example data from S3 for testing, add lambdas, or replay traffic in a reproduction of infrastructure from production. Thinking through the possibilities is really up to you.\n\nIf you have a particularly clever idea you’d like to share with us, we want to hear about it! Please head over to [our community on Discord](https://www.gitpod.io/chat).","metadata":{"source":"https://www.gitpod.io/blog/dynamic-aws-development-environments-with-doppler-and-gitpod","loc":{"lines":{"from":102,"to":116}}}}],["283",{"pageContent":"---\nauthor: pawlean\ndate: Thu, 26 Aug 2021 11:00:00 UTC\nexcerpt: For our second edition of DevX Digest, we talk about moving software development to the cloud.\nimage: teaser.jpg\nslug: ephemeral-dev-envs\nsubtitle:\nteaserImage: teaser.jpg\ntitle: DevX Digest 02 - The rise of ephemeral developer environments ✨\ntags: [\"Developer experience\"]\ntype: digest\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n**Welcome to DevX Digest - the place to hear all about Developer Experience**, brought to you by Pauline Narvas [(@paulienuh)](https://twitter.com/paulienuh) and Mike Nikles [(@mikenikles)](https://twitter.com/mikenikles) from Gitpod. You're reading another newsletter from us 🎉! In this edition, we talk about developer experience in cloud-based,ephemeral dev environments.","metadata":{"source":"https://www.gitpod.io/blog/ephemeral-dev-envs","loc":{"lines":{"from":1,"to":18}}}}],["284",{"pageContent":"> Disclaimer: Gitpod is mentioned quite a bit here. Apologies in advance for the product placement -- we promise that the next 10 editions won't be about our product! But we were super excited to share our take on ephemeral developer environments, especially with the excitement recently in the developer community.","metadata":{"source":"https://www.gitpod.io/blog/ephemeral-dev-envs","loc":{"lines":{"from":20,"to":20}}}}],["285",{"pageContent":"The move to the Cloud ☁️\n\nLet’s name the 🐘 in the room: GitHub announced the release of CodeSpaces to Team and Enterprise Cloud plans recently. This generated quite some buzz online, with many asking how moving our developer environments to the cloud would benefit us.","metadata":{"source":"https://www.gitpod.io/blog/ephemeral-dev-envs","loc":{"lines":{"from":22,"to":24}}}}],["286",{"pageContent":"Painting the picture: our local developer environment\n\nThe reality for most developers is this: a local developer environment that is difficult to set up and maintain and eats up productivity significantly.\n\nThink about your current workflow when getting started to code. What do you need to do?\n\n- Clone source code\n- Install runtimes & dependencies\n- Ensure these are the correct versions\n- Set up any tooling\n\nAnd then you can finally start coding! 😅\n\nBut in the familiar situation of reviewing a colleague's features and hotfixes for production, we are again going through a similar list of steps that we must do before we can even START the review.\n\n- Stash our current changes\n- Switch branches\n- Potentially install new runtimes or upgrade dependencies\n- And then, we can finally review the change. 😰\n- Once we're done with the review, we have to switch back to our branch to continue coding.\n- Ensure that we return to our previous state to continue working.","metadata":{"source":"https://www.gitpod.io/blog/ephemeral-dev-envs","loc":{"lines":{"from":26,"to":46}}}}],["287",{"pageContent":"There is so much friction for developers when there shouldn't be. Ideally, all we really wanted to do is look at the code, run it and approve the PR. Ephemeral developer environments can do this, ensuring that you're always ready to code.","metadata":{"source":"https://www.gitpod.io/blog/ephemeral-dev-envs","loc":{"lines":{"from":48,"to":48}}}}],["288",{"pageContent":"Consider an ephemeral developer environment\n\n> \"Treat your infrastructure as cattle, not pets\"\n\n...is the saying often used in the DevOps world. The value of describing infrastructure as repeatable code became apparent and reaped many benefits: no more dreaded configuration drift, consistent infrastructure and many automation possibilities!\n\nBringing that peace of mind to developer environments makes sense and is already possible. For instance, a single `.gitpod.yml` file is used to describe your dev environment, including what dependencies and start-up commands are needed to get you to the position where you can start coding.\n\nYour dev environment then becomes ephemeral. Gitpod continuously builds all your Git branches like a CI server. You have a new, consistent environment for every single task, and once you're done with a workspace, you can close it and start another super quickly because it has already been prebuilt.","metadata":{"source":"https://www.gitpod.io/blog/ephemeral-dev-envs","loc":{"lines":{"from":50,"to":58}}}}],["289",{"pageContent":"Ephemeral developer environments reduce friction and improve developer experience massively - let us demonstrate that with specific workflows in more detail.","metadata":{"source":"https://www.gitpod.io/blog/ephemeral-dev-envs","loc":{"lines":{"from":60,"to":60}}}}],["290",{"pageContent":"Workflow #1: Onboarding 💼\n\nThink back to when you were first onboarding to a new company. Onboarding has been normalised as a slow process with common issues related to outdated information, unique issues, _\"that's strange, it works on my machine\"_ scenarios. Over the years, we've just accepted it and hold on to the fact that once your local dev environment is eventually set up, you'll never have to go through the pain again.\n\nUntil you do because you have a new laptop, a new engineer comes along or external developers and experts join your project and experience that same pain.\n\nThere is no hiding that our local developer environments are fragile. This fact can cause new engineers onboarding to your new codebase to feel frustrated and overwhelmed.","metadata":{"source":"https://www.gitpod.io/blog/ephemeral-dev-envs","loc":{"lines":{"from":62,"to":68}}}}],["291",{"pageContent":"There is no hiding that our local developer environments are fragile. This fact can cause new engineers onboarding to your new codebase to feel frustrated and overwhelmed.\n\nEphemeral dev environments can improve this: **no more local developer environments mean that it will always work on your machine, no matter what machine you have.** You can quickly access your whole environment in a browser that new engineers can easily jump right into.","metadata":{"source":"https://www.gitpod.io/blog/ephemeral-dev-envs","loc":{"lines":{"from":68,"to":70}}}}],["292",{"pageContent":"Workflow #2: Developing a Feature 🛠\n\nThe uphill battle of developing a new feature locally, does not happen in cloud developer environments. It’s no longer such an energy-inducing task!\n\nInstead of creating a new feature branch, pulling the latest code, fixing errors related to dependencies or runtime versions, then finally starting a dev server and database, you can start developing straight away with literally a click of a button or prefixing a repo with `https://gitpod.io/#`\n\nThis creates a fresh workspace with a feature branch already created, dependencies installed, dev servers ready to go. The most important part of developing a feature is developing the feature, so why waste any more time on anything else?","metadata":{"source":"https://www.gitpod.io/blog/ephemeral-dev-envs","loc":{"lines":{"from":72,"to":78}}}}],["293",{"pageContent":"Workflow #3: Reviewing a PR ✅\n\nAs we described above, reviewing a PR is no easy feat either in local dev environments.\n\nWith an ephemeral dev environment, they load instantly because the environment has already been prebuilt, therefore enabling you to do what is important: reviewing the PR and getting on with your day.","metadata":{"source":"https://www.gitpod.io/blog/ephemeral-dev-envs","loc":{"lines":{"from":80,"to":84}}}}],["294",{"pageContent":"Workflow #4: Helping another team with some code 🐞\n\nAnother familiar workflow is when you want to help another team or colleague with their code.\n\nIn the local dev environment world, you have to go through the pain of stashing your current changes and switching branches. You may even have removed a dependency or two as part of your change, so you have to reinstall it for your colleague’s branch. Only until you’ve done that is when you’re ready to help.\n\nAfter you've done your part, you have to switch back and spend some additional time to return to the state your environment was in before.\n\nWith ephemeral dev environments, all you have to do is start a new workspace with the context of your colleague's branch. Your dev server is ready, your code prepared, your dependencies are all there, and you guessed it…you’re ready! Within VS Code in Gitpod, you can also leave comments directly on the code _(which syncs seamlessly with GitHub.)_","metadata":{"source":"https://www.gitpod.io/blog/ephemeral-dev-envs","loc":{"lines":{"from":86,"to":94}}}}],["295",{"pageContent":"Done with that? You can confidently close that workspace and open up a new one with the context of your branch. Everything is ready to go.","metadata":{"source":"https://www.gitpod.io/blog/ephemeral-dev-envs","loc":{"lines":{"from":96,"to":96}}}}],["296",{"pageContent":"Workflow #5: Checking out an Open Source Project to help with 🤝\n\nWant to contribute to an open-source project?\n\nThe friction that comes with onboarding to open-source projects can cause eager contributors to lose their interest quickly. Trying to get themselves set up is almost not even worth the pain!\n\nOnboarding is easy with ephemeral environments, as we described in [workflow #1.](#workflow-1-onboarding) You have a one-click button accessible from anywhere that allows those eager contributors to get started instantly. Win for everyone!\n\n![Running Prometheus using our local companion app on Gitpod](../../../static/images/blog/ephemeral-dev-envs/screenshot.png)\n_Look at us running [Prometheus](https://github.com/prometheus/prometheus) on Gitpod using our [Local Companion App!](/blog/local-app)_","metadata":{"source":"https://www.gitpod.io/blog/ephemeral-dev-envs","loc":{"lines":{"from":98,"to":107}}}}],["297",{"pageContent":"Are ephemeral, cloud developer environments the future?\n\nGitpod and GitHub Codespaces are leading the way in this new future -- one where friction is removed from the developer experience, so that developers are always ready-to-code.\n\nWe’d be interested to hear your thoughts, would you switch to a cloud developer environment? Why, or why not?\n\n### Join us for the ride!\n\nWe hope to highlight DevX further and bring to you curated content about what truly makes for great developer experiences!\n\n### DevX newsletter is community-driven\n\nAnother thing about Gitpodders is that we're all driven by community feedback, and this newsletter is no exception! Please send us your thoughts, feedback and help us drive this conversation. We may even feature some of your takes and comments in future newsletters!\n\nCome and hang out with us over on [our Discord channel](https://gitpod.io/chat).","metadata":{"source":"https://www.gitpod.io/blog/ephemeral-dev-envs","loc":{"lines":{"from":109,"to":123}}}}],["298",{"pageContent":"---\nauthor: mikenikles\ndate: Sat, 08 May 2021 18:00:00 UTC\nexcerpt: A very tight deadline, a small team and a complete redesign - insights into why we use Svelte.\nimage: teaser.png\nslug: from-gatsby-to-svelte\nsubtitle:\nteaserImage: teaser.png\ntags: [\"Engineering\"]\ntitle: From Gatsby to Svelte in 3 weeks\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n**tl;dr:**","metadata":{"source":"https://www.gitpod.io/blog/from-gatsby-to-svelte","loc":{"lines":{"from":1,"to":17}}}}],["299",{"pageContent":"<script context=\"module\">\n  export const prerender = true;\n</script>\n\n**tl;dr:**\n\n- [Gitpod](/) recently announced new funding and a completely new brand ([read more](/blog/next-chapter-for-gitpod)) 🍊.\n- As part of that, we rebuilt the website from scratch, replacing React & Gatsby with [Svelte](https://svelte.dev) & [SvelteKit](https://kit.svelte.dev).\n- Look at the [source code on GitHub](https://github.com/gitpod-io/website) or start the website in a Gitpod developer environment by visiting <a class=\"no-nowrap\" href=\"https://gitpod.io#https://github.com/gitpod-io/website\" rel=\"nofollow\">https://gitpod.io#https://github.com/gitpod-io/website</a>.\n- Listen to the Svelte Radio episode \"[Migrating from Sapper to SvelteKit](https://share.transistor.fm/s/507ad528)\" where I shared more details.","metadata":{"source":"https://www.gitpod.io/blog/from-gatsby-to-svelte","loc":{"lines":{"from":17,"to":26}}}}],["300",{"pageContent":"What we had previously...\n\nPrior to April 8, 2021 the Gitpod website was built with React & Gatsby and the source code is [available on GitHub](https://github.com/gitpod-io/retired-gatsby-website). A static site was deployed to Netlify and a Netlify function took care of processing HTML form submissions by sending the form content via email to the Gitpod team (e.g. contact us, enterprise license requests, etc.)\nWe leveraged the Gatsby ecosystem by adding plugins to the [`gatsby-config.js`](https://github.com/gitpod-io/retired-gatsby-website/blob/master/gatsby-config.js) file which took care of things like Markdown parsing and embedding Youtube videos, among other things.","metadata":{"source":"https://www.gitpod.io/blog/from-gatsby-to-svelte","loc":{"lines":{"from":28,"to":31}}}}],["301",{"pageContent":"... and why we started from scratch\n\nWhat was wrong with the previous stack? Why did we decide to rewrite the website with different technologies?\nOverall, Gatsby & React is a great choice and gets the job done just fine. Many people are already familiar with React and are ready to contribute with minimal effort.\n\n**However**, at Gitpod we care deeply about developer experience & productivity - this is what our product is all about afterall. This is where we believe [Svelte](https://svelte.dev) and [SvelteKit](https://kit.svelte.dev) lead the pack in today’s web application development. By leveraging [Vite](https://vitejs.dev), developing a SvelteKit web app is as instant as it gets, it even persists local state when hot reloading the web application!","metadata":{"source":"https://www.gitpod.io/blog/from-gatsby-to-svelte","loc":{"lines":{"from":33,"to":38}}}}],["302",{"pageContent":"In addition, we had an extremely tight timeframe from the start of the project to the [announcement of our funding and the new brand](/blog/next-chapter-for-gitpod). While I have had two years of experience with Svelte & Sapper, the other three developers had not worked together previously and were not familiar with Svelte. Nevertheless, I was confident the rest of the team would pick up Svelte and be productive right away. To learn Svelte, all you really need is work your way through the [tutorial](https://svelte.dev/tutorial).\n\n**To me, building a SvelteKit app from scratch felt less risky than modifying an existing Gatsby codebase!**\n\nThis is especially true in our case where we had to apply a completely new brand across all pages and would have had to learn Gatsby too.","metadata":{"source":"https://www.gitpod.io/blog/from-gatsby-to-svelte","loc":{"lines":{"from":40,"to":44}}}}],["303",{"pageContent":"The implementation\n\nSvelteKit’s public beta [was announced](https://svelte.dev/blog/sveltekit-beta) at around the same time as we started our project. Knowing there would be bugs - the maintainers explicitly warned about that - we decided to start with a [Sapper](https://sapper.svelte.dev) app. Sapper is the predecessor of SvelteKit and was well established. There was also a promise from the maintainers to provide a [frictionless migration path](https://kit.svelte.dev/migrating).\n\nWith one week to go, we migrated from Sapper to SvelteKit ([pull request](https://github.com/gitpod-io/website/pull/120)). The team’s feedback was clear:\n\n![Vote on the SvelteKit developer experience](../../../static/images/blog/from-gatsby-to-svelte/sveltekit-devx-vote.png)\n\nRemember that frictionless migration we were promised? It was indeed smooth as butter! At this point, a huge thank you to the Svelte maintainers & contributors for their incredible work ❤️ !","metadata":{"source":"https://www.gitpod.io/blog/from-gatsby-to-svelte","loc":{"lines":{"from":46,"to":54}}}}],["304",{"pageContent":"Remember that frictionless migration we were promised? It was indeed smooth as butter! At this point, a huge thank you to the Svelte maintainers & contributors for their incredible work ❤️ !\n\nWe also configured [Tailwind CSS](https://tailwindcss.com), [mdsvex](https://mdsvex.com) and the [`adapter-netlify`](https://github.com/sveltejs/kit/tree/master/packages/adapter-netlify).","metadata":{"source":"https://www.gitpod.io/blog/from-gatsby-to-svelte","loc":{"lines":{"from":54,"to":56}}}}],["305",{"pageContent":"Gatsby plugins\n\nThe Svelte ecosystem is not (yet) as established as the Gatsby ecosystem. However, thanks to the flexibility of mdsvex, we were able to use some Markdown related [remark](https://github.com/remarkjs/remark) plugins. For some use cases, we wrote [our own plugins](https://github.com/gitpod-io/website/tree/main/src/utils) to cover specific needs.\n\nDana Woodman recently shared an interesting [thought on the Svelte ecosystem](https://twitter.com/DanaWoodman/status/1390030682789859329) that is worth paraphrasing: Many existing, vanilla JS libraries work effortlessly with Svelte which opens up an even wider ecosystem than what you get with React.","metadata":{"source":"https://www.gitpod.io/blog/from-gatsby-to-svelte","loc":{"lines":{"from":58,"to":62}}}}],["306",{"pageContent":"Lessons learned\n\n### Svelte & SvelteKit\n\nSvelteKit is in public beta and you may run into a rough edge or two - nothing though that makes it a showstopper. For example, we weren’t able to use prerendering to deploy static pages and launched the website with server-side rendering through a Netlify function instead. This has since been fixed, we upgraded to the latest version and the majority of pages are now static HTML files - taking full advantage of SvelteKit’s flexibility to mix & match SSR, SPA and static pages.","metadata":{"source":"https://www.gitpod.io/blog/from-gatsby-to-svelte","loc":{"lines":{"from":64,"to":68}}}}],["307",{"pageContent":"Tailwind CSS\n\nWe configured Tailwind because the product team uses it and we want to align as much as possible. On the website team, only one out of four team members was familiar with it and we decided not to enforce the use of Tailwind. In hindsight, this was probably a mistake as there is now a mix of custom CSS and Tailwind that needs to be cleaned up over time. However, it was a risk mitigation worth applying given the tight deadline.\n\nGoing forward, we are likely going to develop a lightweight pattern library either by abstracting Tailwind classes in Svelte components or [extracting components](https://tailwindcss.com/docs/extracting-components) as per the Tailwind CSS docs.","metadata":{"source":"https://www.gitpod.io/blog/from-gatsby-to-svelte","loc":{"lines":{"from":70,"to":74}}}}],["308",{"pageContent":"Netlify adapter\n\nA [bug](https://github.com/sveltejs/kit/issues/930) in the Netlify adapter caused a short-term headache because it completely ignored any redirects configured in the `netlify.toml` file. This is being worked on at the moment and we were able to apply [a temporary workaround](https://github.com/sveltejs/kit/issues/930#issuecomment-817216700).\n\n### Differences between development & production environments\n\nDue to the use of SvelteKit adapters, you may run into different behavior when you run in development vs production. I recommend you set up automated preview deployments for each pull request and also test locally with the generated production web app. In our case, we can start a production-like environment with `npm run deploy && npm start` to verify code changes before we push the code.","metadata":{"source":"https://www.gitpod.io/blog/from-gatsby-to-svelte","loc":{"lines":{"from":76,"to":82}}}}],["309",{"pageContent":"No CSS on the error page\n\nWe noticed the `routes/$error.svelte` page lost all CSS when we deployed the web app ([GitHub issue](https://github.com/sveltejs/kit/issues/715)). We had to extract the header, footer and error page CSS into a separate CSS file and include it on the error page. Three days before our go-live date, that bug was fixed in SvelteKit.","metadata":{"source":"https://www.gitpod.io/blog/from-gatsby-to-svelte","loc":{"lines":{"from":84,"to":86}}}}],["310",{"pageContent":"Conclusion\n\n**Would we do it again?**\nAbsolutely!\n\n**Was it risky?**\nA bit, due to the unknowns of SvelteKit’s beta label when we started the project, but given we had Sapper as a fallback option it was calculated risk. With today’s state of SvelteKit and the very recent bug fixes, the Sapper fallback is no longer needed and I recommend starting with SvelteKit.\n\n**Should you use SvelteKit in production?**\nI can now say with confidence, go for it. As you work on your web app, deploy it to a production-like environment frequently to avoid any deployment surprises.\n\nAll in all, I am excited about the future of web development not least because Svelte is redefining what modern web development looks like - both from a developer and end user experience!","metadata":{"source":"https://www.gitpod.io/blog/from-gatsby-to-svelte","loc":{"lines":{"from":88,"to":99}}}}],["311",{"pageContent":"What’s next?\n\nHead over to https://github.com/gitpod-io/website to look at the source code or experience how we work by opening an ephemeral developer environment with the following button:\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-io/website)\n\nTo explore your own project in an online developer environment, prefix your GitHub, GitLab or Bitbucket repository URL with `gitpod.io#`. [Learn more about that in the documentation](/docs/introduction/learn-gitpod/context-url).\n\nWe welcome community contributions 🙏 . Please let us know what you think of the website and its implementation.","metadata":{"source":"https://www.gitpod.io/blog/from-gatsby-to-svelte","loc":{"lines":{"from":101,"to":109}}}}],["312",{"pageContent":"---\nauthor: nisarhassan12\ndate: Mon Oct 7 2019\nexcerpt: To celebrate Open Source and Hacktoberfest, we're stoked 🧙✨🥰 to announce contribute.dev, a list of welcoming open-source projects.\nimage: frictionless-oss-contributions.png\nslug: frictionless-oss-contributions\nsubtitle: Frictionless Open Source Contributions For Everyone\ntags: [\"Gitpod updates\"]\ntitle: Announcing contribute.dev — Open Source in One Click\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\nTo celebrate Open Source and Hacktoberfest, we're stoked <span aria-hidden=\"true\">🧙✨🥰</span> to announce <a href=\"https://contribute.dev\" target=\"blank\">contribute.dev</a>, a list of welcoming open-source projects featuring ready-to-code Gitpod setups.\n\n![contribute.dev projects list](https://user-images.githubusercontent.com/46004116/66307071-d695ac00-e91c-11e9-9eb1-8aa97bb6ca67.png)","metadata":{"source":"https://www.gitpod.io/blog/frictionless-oss-contributions","loc":{"lines":{"from":1,"to":18}}}}],["313",{"pageContent":"![contribute.dev projects list](https://user-images.githubusercontent.com/46004116/66307071-d695ac00-e91c-11e9-9eb1-8aa97bb6ca67.png)\n\nSetup for all of the listed projects is completely automated with the help of [Gitpod](https://gitpod.io). So within seconds, you get a fully working developer environment, including a VS Code-like interface and a cloud-based Linux container configured specifically for the project. All you need is a browser!\n\nFor getting started with the project of your choice just hit the blue `Open in Gitpod` button in the bottom right corner:\n\n![carbon, a project on contribute.dev](https://user-images.githubusercontent.com/46004116/66307306-82d79280-e91d-11e9-9c8b-00d92b710892.png)\n\nThis will launch a ready-to-code environment with everything setup (like the dependencies pre-installed and the web server running) as shown below.\n\n![Gitpod Workspace](https://user-images.githubusercontent.com/46004116/66307804-d5fe1500-e91e-11e9-9032-b5efa3cb8ff8.png)","metadata":{"source":"https://www.gitpod.io/blog/frictionless-oss-contributions","loc":{"lines":{"from":18,"to":28}}}}],["314",{"pageContent":"![Gitpod Workspace](https://user-images.githubusercontent.com/46004116/66307804-d5fe1500-e91e-11e9-9032-b5efa3cb8ff8.png)\n\nNow you can make your contribution and once you're done you can do all sorts of cool stuff from within the full-featured Gitpod IDE like reviewing the changes that you made in the diff editor or making a Pull Request.\n\n##Want the same for your project?\n\nIf the project that you're looking for is not in the list please file an issue [here &rarr;](https://github.com/gitpod-io/contribute.dev/issues/new?labels=&template=add-project.md&title=Add+%3CRepo+URL+here%3E) with a link to your repository and we'll help you set it up. Once the experience is great we're happy to add your project to the list.\n\nHappy contributing! <span aria-hidden=\"true\">🥰</span>","metadata":{"source":"https://www.gitpod.io/blog/frictionless-oss-contributions","loc":{"lines":{"from":28,"to":36}}}}],["315",{"pageContent":"---\nauthor: JohannesLandgraf\ndate: Thursday, 3 November 2022 00:00:00 UTC\nexcerpt: Announcing our $25m Series A led by Tom Preston-Werner (Founder of GitHub) with existing investors increasing ownership and pebblebed, MongoDB Ventures, GTMfund, Tobi Lutke, Kent Beck and Oliver Pomel joining the round\nslug: future-of-software-cdes\ntags: [\"Company building\", \"Gitpod updates\"]\nimage: teaser.jpg\nteaserImage: teaser.jpg\ntitle: The future of writing software happens in Cloud Development Environments (CDEs)\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n<script>\n  import Quotes from \"$lib/components/blog/cde-quotes.svelte\";\n  import Download from \"$lib/components/whitepaper/cloud-dev-environments/download.svelte\";\n  import Wrapper from \"$lib/components/webinars/wrapper.svelte\";\n</script>\n\n**TL;DR**\n\n- From static and brittle development environments to consistently reproducible, instant, ephemeral Cloud Development Environments (CDEs)","metadata":{"source":"https://www.gitpod.io/blog/future-of-software-cdes","loc":{"lines":{"from":1,"to":24}}}}],["316",{"pageContent":"**TL;DR**\n\n- From static and brittle development environments to consistently reproducible, instant, ephemeral Cloud Development Environments (CDEs)\n\n- Announcing our $25m Series A led by Tom Preston-Werner (Founder of GitHub) with existing investors increasing ownership and pebblebed, MongoDB Ventures, GTMfund, Tobi Lutke, Kent Beck, and Oliver Pomel joining the round\n\nDevelopers brought creative workflows of almost all knowledge workers to the cloud. At the same time, the workflow of writing software itself never left local computers. The hours of yak-shaving and friction this causes every week wastes calories and drags us away from flow. Gitpod exists to change that: from history-dependent cobbled local development environments to consistently reproducible, instant, ephemeral Cloud Development Environments (CDEs).","metadata":{"source":"https://www.gitpod.io/blog/future-of-software-cdes","loc":{"lines":{"from":24,"to":30}}}}],["317",{"pageContent":"It feels good to give what we have been working on over the last years a name and shape the principles of it. CDEs lower the barrier and increase the ceiling - they enable more people to do more. For us, they are our internal product north star. We believe that the principles define the convenience threshold that, when surpassed, will make working with CDEs the standard for developers. Not because your engineering organisation dictates that, but because the developer experience is faster, more joyful, collaborative and secure.","metadata":{"source":"https://www.gitpod.io/blog/future-of-software-cdes","loc":{"lines":{"from":32,"to":32}}}}],["318",{"pageContent":"Developing software in the cloud is not about simply replicating an existing local workflow to somebody else's machine that happens to run remotely in a datacenter. Remote development is not the solution. The ‘works on my machine’ problem continues to exist - it just moves from a local computer to a computer in the cloud. Long-lived development environments are stateful and brittle, wasting countless hours due to drifting configuration within software teams. We believe that the true opportunity is to remove friction and relentlessly improve the developer experience with the automation, collaboration and security benefits that the cloud provides.\n\n- **No more configuration drift.** CDEs are automatically created afresh for every task. This way code and development environment always align, and all contributors operate from a consistent configuration. No more “works on my machine”.","metadata":{"source":"https://www.gitpod.io/blog/future-of-software-cdes","loc":{"lines":{"from":34,"to":36}}}}],["319",{"pageContent":"- **Peace of mind.** CDEs are independent of each other. Breaking one has no effect on others. Because CDEs are ephemeral, mistakes are no longer costly. No more struggling to “fix your laptop” after upgrading to the latest version of something.\n\n- **Parallelism and multi-track development.** CDEs are plentiful. Quickly reviewing the change of someone else no longer means you have to “stash” or replace what you’re currently working on. Parallel activities can coexist independently. Inviting peers to what you’re currently doing does not break their current work stream.\n\n- **Space to learn and play.** CDEs remove barriers to play, learn and experiment with code, projects and repositories. Because there is no setup effort, and no risk of breaking the environment you’re working in, CDEs offer a great space to explore and learn about new technologies.","metadata":{"source":"https://www.gitpod.io/blog/future-of-software-cdes","loc":{"lines":{"from":38,"to":42}}}}],["320",{"pageContent":"- **Safe and Secure.** Cloud Development Environments are short-lived, which shortens the attack windows in which resources, secrets or infrastructure could be at risk. Because CDEs are ephemeral, secrets and other credentials should be tightly scoped and short-lived, i.e. should they get compromised they would not be of much use for long. Cloud development environments are isolated from other work which reduces the impact of supply chain attacks. E.g. arbitrary code execution as part of a software build can only affect what’s in the CDE, and not everything that’s running on your laptop.","metadata":{"source":"https://www.gitpod.io/blog/future-of-software-cdes","loc":{"lines":{"from":44,"to":44}}}}],["321",{"pageContent":"Principles\n\nCDEs value the following principles:\n\n- **Ephemeral** _over long lived_\n  A fresh, disposable development environment for every task.\n\n- **Reproducible** _over cobbled together_\n  Consistently replicable without manual intervention.\n\n- **Effortless** _over arduous_\n  With minimal friction and difficulty.\n\n- **Independent** _over tangled_\n  Isolated and self-sufficient.\n\n- **Abundant** _over scarce_\n  Instantaneously obtainable, seemingly infinite.\n\n- **Powerful** _over constrained_\n  Supports the most expansive development activities.\n\n- **Equitable** _over requiring specialised skills_\n  Lowers the barrier to software development.\n\n- **Collaborative** _over solitary_\n  Enables collaboration across time, space and practice.\n\nYou can read more under [www.gitpod.io/cde](/cde).\n\n  <Quotes />","metadata":{"source":"https://www.gitpod.io/blog/future-of-software-cdes","loc":{"lines":{"from":46,"to":76}}}}],["322",{"pageContent":"$25m Series A to cross the convenience threshold for CDEs","metadata":{"source":"https://www.gitpod.io/blog/future-of-software-cdes","loc":{"lines":{"from":78,"to":78}}}}],["323",{"pageContent":"We are proud that Tom Preston-Werner leads our $25m Series A with his largest investment to date in a private company. All existing investors including General Catalyst, Crane Venture Partners, Vertex Ventures US and Speedinvest are participating. New investors include amongst others pebblebed; GTMfund; MongoDB Ventures; Tobi Lütke (CEO Shopify) and Olivier Pomel (CEO Datadog) and Kent Beck, (signatory of the Agile Manifesto). We also extend our leadership with [Mike Brevoort](https://www.linkedin.com/in/mikebrevoort/) as Head of Product, [Matthew Du Pont](https://www.linkedin.com/in/matthewfdupont/), Head of Sales and [Sara Parker](https://www.linkedin.com/in/hellofromspark/), Head of Customer Success & Support. [Sven](https://www.linkedin.com/in/efftinge/) decided to follow his passion and became Gitpod’s first Technical Fellow a couple of weeks ago - [since that decision, he has the biggest smile on his face since we met.](/blog/svens-new-role)","metadata":{"source":"https://www.gitpod.io/blog/future-of-software-cdes","loc":{"lines":{"from":80,"to":80}}}}],["324",{"pageContent":"So.. what will we do with the additional capital? We want CDEs to become the standard for modern software development. Everybody is rallied around crossing the convenience threshold and we will work on the following areas:\n\n- **Performance and Security** - CDEs should be available in an instant - seemingly infinite and secure. Customers trust Gitpod with their code, their data and their time. With this comes a great responsibility. Last week we announced our [SOC2 Type II](https://www.gitpod.io/blog/gitpod-is-soc-2-type-ii-compliant) compliance. Roadmap items include dramatically faster startup times, improved resiliency and a new Gitpod Cloud offering for larger companies.","metadata":{"source":"https://www.gitpod.io/blog/future-of-software-cdes","loc":{"lines":{"from":82,"to":84}}}}],["325",{"pageContent":"- **Integrations** - Gitpod is a next-generation developer experience platform empowering developers to seamlessly assemble all of the resources they need, just in time. We are fostering a community of partners to create an ecosystem around better templates, plugins, provisioning and integrations. Roadmap items include a workspace plugin system, APIs, and increased extensibility.\n\n- **Collaboration** - software development teams collaborate across time, team and roles. CDEs will create entirely new opportunities for team members to work more closely together. Roadmap items include preview environments and new collaborative workflows.\n\nWe want to build a lasting company on top of a paradigm shift that will change how the world writes software - for the better.\n\n<Wrapper\nclass=\"px-xx-small py-x-small sm:p-x-small xl:px-small xl:py-x-small !mx-auto\">\n\n<Download class=\"mx-auto lg:m-0\"\n      toType=\"cde-whitepaper\"\n      eventType=\"White paper\"\n/>\n\n</Wrapper>","metadata":{"source":"https://www.gitpod.io/blog/future-of-software-cdes","loc":{"lines":{"from":86,"to":100}}}}],["326",{"pageContent":"---\nauthor: svenefftinge\ndate: Thu Jul 05 2018 11:49:24 GMT+0000 (UTC)\nexcerpt: As software developers, we already spend a lot of our time in browsers.\nimage: a-better-github-flow.png\nslug: github-flow\nsubtitle: Stop setting up, start coding!\ntitle: A Better GitHub Flow\ntags: [\"Engineering\"]\nurl: https://medium.com/gitpod/github-flows-better-with-gitpod-e455d17990f9\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\nAs software developers, we already spend a lot of our time in browsers. Be it for searching Google/StackOverflow, checking our latest Continuous Integration builds on Jenkins resp. Travis, or doing code reviews on GitHub, Bitbucket, or Gerrit. Also, communication with the team happens in web applications, such as Gmail, Google Hangout or Slack. The convenience of web applications and OAuth-based authentication allows us to use any computer to do most of our work immediately.","metadata":{"source":"https://www.gitpod.io/blog/github-flow","loc":{"lines":{"from":1,"to":17}}}}],["327",{"pageContent":"However, when it comes to the actual coding and debugging, we have to prepare our local developer environments manually. We do this based on often outdated, incomplete or just plain wrong documentation. The transition from an online repository to the actual coding is a barrier that hinders thousands of possible contributions every day. Coding needs to get more accessible.\n\n![(Programming Environment - Dilbert by Scott Adams. Source: [http://dilbert.com/strip/2017-01-02)](http://dilbert.com/strip/2017-01-02))](https://cdn-images-1.medium.com/max/2048/0*f260tcqJvgvCguFu)_(Source: [http://dilbert.com/strip/2017-01-02)](http://dilbert.com/strip/2017-01-02))_","metadata":{"source":"https://www.gitpod.io/blog/github-flow","loc":{"lines":{"from":19,"to":21}}}}],["328",{"pageContent":"But that only needs to be done once, right? Unfortunately, no. Coding is a team sport. We are not just adding code, but also do code reviews or fix bugs on maintenance branches which often require a different setup. Moreover, today’s applications are loosely coupled compositions of independent microservices and sub-projects, written in different languages requiring different development setups. Consequently, we have to maintain setups for multiple projects and branches, trying to keep documentation in sync including all the cases for the different platforms. As a result, we are wasting precious time every day. We should spend this time and effort on more fun and productive things.","metadata":{"source":"https://www.gitpod.io/blog/github-flow","loc":{"lines":{"from":23,"to":23}}}}],["329",{"pageContent":"Once we have the setup, we run builds and test suites. Those processes are usually an excellent reason to grab a coffee because it is blocking our machine. Wouldn’t it be nice to push such workload to the cloud, where it not only runs faster but can easily be parallelized? Your computer stays calm and cool, and you still can have your coffee if you want.\n\nIn this article, I will walk you through an automated, cloud-based development workflow. [Gitpod](https://gitpod.io) is based on Kubernetes, GitHub, and the new Eclipse Theia project — a VS Code-like IDE that runs in modern browsers. You can think of it as an online IDE with deep GitHub integration (and soon other platforms), providing fully-featured developer environments with a single click for any GitHub project, issue, branch or pull request.\n\n**Automation**","metadata":{"source":"https://www.gitpod.io/blog/github-flow","loc":{"lines":{"from":25,"to":29}}}}],["330",{"pageContent":"**Automation**\n\nStarting a workspace with Gitpod is much easier than with other cloud IDEs. Gitpod doesn’t require you to configure workspaces with container images, Git information and so on. Instead, you directly go to a GitHub repository and click the Gitpod-Button [see below]. Gitpod provides you with a ready to use workspace, so that you can immediately start coding without any configuration steps.\n\n![Button provided by Gitpod’s browser extension](https://cdn-images-1.medium.com/max/3200/0*MjUIJ1zspz3CF8oo)_Button provided by Gitpod’s browser extension_\n\n> To see the Gitpod button on the GitHub page, you would have to [install a browser extension](https://gitpod.io). Alternatively, you can manually prefix any GitHub URL with `https://gitpod.io/#`. For instance, clicking the following link will instantly provide you a development workspace for the Eclipse Theia project: [https://gitpod.io/#https://github.com/theia-ide/theia](https://gitpod.io/#https://github.com/theia-ide/theia)","metadata":{"source":"https://www.gitpod.io/blog/github-flow","loc":{"lines":{"from":29,"to":35}}}}],["331",{"pageContent":"Of course, different projects need different setups. Gitpod has a three-stage process to determine the workspace configuration, e.g. what Docker image to use for development, what startup script to run, and which ports to expose:\n\n1. It first looks for a _.gitpod_ configuration file in the repository. Note, that it will check the state of the currently viewed commit. This allows you to keep working configuration for old states as well as trying a new configuration in a pull request.\n\n1. Second, if there is no configuration in the cloned repository, a central repository called ‘[definitely-gp](https://github.com/gitpod-io/definitely-gp)’ is checked for configuration. It is a public repository which contains configurations for arbitrary GitHub projects. That is useful if you want to provide configuration for a repository you don’t have write access to. Everybody is invited to contribute to this.","metadata":{"source":"https://www.gitpod.io/blog/github-flow","loc":{"lines":{"from":37,"to":41}}}}],["332",{"pageContent":"1. As a last resort, Gitpod analyzes the repository and derives a suitable configuration from there. For instance, if the repository contains a `yarn.lock` file it will automatically run `yarn install` in the beginning.\n\nThe key takeaway here is that you can handcraft a Docker file that includes all the development tools you need for your project as well as any ports to be exposed or scripts you want to run when a workspace starts. You can put that configuration under version control, replacing the onboarding documentation with a formal, executable description. But there is more information in a GitHub URL that can be leveraged to keep us in the flow.\n\n**It’s All About The Context**\n\nWhen creating a workspace, Gitpod will analyze the provided GitHub URL. If you are looking at a particular branch it will check out that branch; if you are looking at a specific file, it will automatically open that file in Gitpod’s IDE.","metadata":{"source":"https://www.gitpod.io/blog/github-flow","loc":{"lines":{"from":43,"to":49}}}}],["333",{"pageContent":"Some great features, which are heavily used on GitHub, are issues and pull requests. If you want to start working on a GitHub issue, you simply spawn a fresh workspace from the issue page on GitHub. Gitpod puts you into the right context, by automatically creating a local branch using the issue number and even pre-configures the commit message accordingly. All is set up for you to start coding and testing. Once you are happy with the changes you made, use the Git integration to create a commit and push it to a remote branch. Finally, you can even create the actual pull request right from within Gitpod.","metadata":{"source":"https://www.gitpod.io/blog/github-flow","loc":{"lines":{"from":51,"to":51}}}}],["334",{"pageContent":"Lastly, of course, when clicking the Gitpod button on a pull request, Gitpod beams you right into code review mode. A panel on the left will list the changed files, allowing you to go through them one by one. Changes are opened in the diff editor where you can also read and add review comments. And because it is a full IDE, we can navigate through the entire code base, run code or add commits at will. Approving the pull request is supported, too.\n\n![Inline code review comments](https://cdn-images-1.medium.com/max/3200/0*8N39dT5P6Q1zQdIR)_Inline code review comments_\n\n**Theia IDE**\n\nAll the smart automation doesn’t help if you end up with a bad development experience. So let’s talk about the IDE that powers Gitpod.","metadata":{"source":"https://www.gitpod.io/blog/github-flow","loc":{"lines":{"from":53,"to":59}}}}],["335",{"pageContent":"**Theia IDE**\n\nAll the smart automation doesn’t help if you end up with a bad development experience. So let’s talk about the IDE that powers Gitpod.\n\nTheia is an open-source project that has been in development for over a year now. In addition to the TypeFox team, other companies like Ericsson and RedHat are actively contributing to it. The Eclipse Che team is replacing their existing IDE with Theia, and companies like IBM already have [public offers](https://microclimate-dev2ops.github.io/) based on it. Theia just recently became an Eclipse project, to make sure it is developed in a truly open and democratic manner and that no single company is controlling its future.\n\nEven with all that momentum, it seems to be an unrealistic effort to develop a new IDE from scratch. Just consider how many years of development were put into projects like the classic Eclipse IDE or Visual Studio. Gladly, this is not what the Theia team is doing.","metadata":{"source":"https://www.gitpod.io/blog/github-flow","loc":{"lines":{"from":59,"to":65}}}}],["336",{"pageContent":"The most important building blocks for Theia are probably the Monaco editor and the use of protocols. Monaco is the code editor that supports VS Code and is very flexible, high-quality code editor written in TypeScript (JavaScript). Unlike VS Code, the Monaco editor widget can run in browsers.\n\nThe second ingredient is the use of protocols. The most popular one being the language server protocol [4].\n\n**The [Language Server Protocol (LSP)](https://microsoft.github.io/language-server-protocol/)**\n\nThe LSP is an effort started by VS Code to allow using language services in a technology- and UI-independent manner. One of the first popular reusable language services came from the TypeScript team. Such a service is a simple headless process that provides language smartness to an editor / IDE through messaging.","metadata":{"source":"https://www.gitpod.io/blog/github-flow","loc":{"lines":{"from":67,"to":73}}}}],["337",{"pageContent":"For instance, a text editor, supporting the LSP, can ask a language server for completion proposals given a document and a cursor position. All the heavy lifting such as parsing, type resolution, and linting is done in the language server. The IDE only needs to know how to represent the returned information for the user, e.g. propose the completion proposals in a pop-up.","metadata":{"source":"https://www.gitpod.io/blog/github-flow","loc":{"lines":{"from":75,"to":75}}}}],["338",{"pageContent":"As of May 2018, there are 64 language servers listed on the [official site](https://microsoft.github.io/language-server-protocol/implementors/servers/) covering all of the mainstream programming languages, such as JavaScript, Python, Java, C++ or Go. If something is missing, it is a good idea to search the web as the list is incomplete and new language servers are released every other week. If you want to build your own language server, there are SDKs for various languages ranging from TypeScript, Java and C# to Haskell. Finally, [Xtext](https://github.com/theia-ide/theia-xtext) provides a full framework for implementing a language server for domain-specific languages.\n\nThe LSP allows moving mature code bases for language smartness to the future. The very popular Java language server which is not only used in Theia but also in Atom and VS Code is really a headless version of Eclipse’s Java Development tools.","metadata":{"source":"https://www.gitpod.io/blog/github-flow","loc":{"lines":{"from":77,"to":79}}}}],["339",{"pageContent":"Theia uses and supports other protocols as well. For instance, debugging support is in the works and will support the Debug Adapter Protocol which connects Theia to 50+ existing debuggers.\n\n**Extensibility**\n\nBesides the ability to run Theia in browsers there is another important difference to VS Code: VS Code extensions are limited to what is exposed in the VS Code’s extension API. For instance, it is not possible to create a new view in a VS code extension. This is a serious blocker for more advanced extensions. Contrarily in Theia where extensions are first class building blocks an extension can deep integration and make use of everything. Even fully white-labeled products are possible due to its flexible architecture. That said, the Theia team is working on supporting VS Code extensions, additionally.\n\n**Outlook**","metadata":{"source":"https://www.gitpod.io/blog/github-flow","loc":{"lines":{"from":81,"to":87}}}}],["340",{"pageContent":"**Outlook**\n\nProviding automated and disposable workspaces that tightly integrate with GitHub projects and the different contexts eliminates time-consuming transitions and streamlines the developer experience. No more ‘it works on my machine’ conversations can happen, because everybody uses the very same setup, which matches the production environment. The smooth onboarding experience will not only help professional developers but lower the barrier for contributions on open-source projects and start coding in general.\n\nGitpod is currently going through a public beta phase, where it can be used on public repositories. We are working on improved security, better performance and more cool features. Also, Gitpod is getting support for integration with additional applications, such as Bitbucket, GitLab, and Gerrit.","metadata":{"source":"https://www.gitpod.io/blog/github-flow","loc":{"lines":{"from":87,"to":91}}}}],["341",{"pageContent":"Open-source projects like Kubernetes, Theia, TypeScript, VS Code and thousands of other libraries are the giant’s shoulders Gitpod is based on. We hope by offering free usage of Gitpod for public GitHub projects we can further support the flourishing landscape of open-source projects, making it easier for everyone to contribute and for maintainers to review those contributions.","metadata":{"source":"https://www.gitpod.io/blog/github-flow","loc":{"lines":{"from":93,"to":93}}}}],["342",{"pageContent":"---\nauthor: svenefftinge\ndate: Wed May 06 2020 16:00:00 GMT+0000 (UTC)\nexcerpt: Today, GitHub announced the private beta of GitHub Codespaces, which provide container-based dev environments for GitHub projects.\nimage: gh-cs-bg.jpg\nslug: github-codespaces\ntags: [\"Company building\", \"Gitpod updates\"]\nsubtitle: A Milestone for Automated Developer environments\ntitle: GitHub Codespaces, Welcome to the Party!\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n<script>\n  import LinkButton from \"$lib/components/ui-library/link-button/link-button.svelte\"\n</script>\n\nToday, GitHub announced the private beta of [GitHub Codespaces](https://github.com/features/codespaces), which provide container-based dev environments for GitHub projects. At Gitpod, we are building a similar solution, and while GitHub’s Codespaces don’t fully implement everything we do, they truly embrace the notion of dev environments as code.","metadata":{"source":"https://www.gitpod.io/blog/github-codespaces","loc":{"lines":{"from":1,"to":20}}}}],["343",{"pageContent":"This is great news, because it really helps to explain why this is going to change professional software development entirely.\n\n<h2>Dev Environment As Code</h2>\n\nDescribing developer environments in code has many benefits:\n\n- It eliminates onboarding friction: no matter if you are new to a project, need to go back to an old branch or just picking up development after a few weeks. Just go to your project and start coding immediately.\n\n- Remote work becomes a breeze: now everyone can access source code more securely (no local copies) from any device, including Chromebooks and tablets.\n\n- Everybody gets the same setup: this means that “works on my machine” situations are a problem of the past.\n\n- With Gitpod, you can even take snapshots of any state of your dev environment and share exact clones of it.\n\nIt is our vision that **everybody can immediately start working in a fully set-up dev environment on any project, any branch, with any device, and at any time.**","metadata":{"source":"https://www.gitpod.io/blog/github-codespaces","loc":{"lines":{"from":22,"to":36}}}}],["344",{"pageContent":"It is our vision that **everybody can immediately start working in a fully set-up dev environment on any project, any branch, with any device, and at any time.**\n\n<h2>A Lifesaver for Professional Teams</h2>\n\nAs software systems become more complex so do dev environments. Have you ever tried to develop a Kubernetes application locally, set up all the required infrastructure, and launch all microservices on your local machine? Halfway through you’ll find that your expensive MacBook Pro is not a suitable replacement for a datacenter. Even if you eventually manage to get things working it won’t be smooth or remotely close to what you run in production.\n\nWhen we started working on Gitpod, we had everything running locally in minikube, too. Very quickly we realized that this would not scale. Our SaaS offering is deployed in Kubernetes clusters across the globe—that’s nothing you’d want to replicate locally.","metadata":{"source":"https://www.gitpod.io/blog/github-codespaces","loc":{"lines":{"from":36,"to":42}}}}],["345",{"pageContent":"For the past year the whole team has developed Gitpod in Gitpod. Everyone in the team can start coding on any branch immediately. That includes their own preview deployment which is already connected to and fully debuggable from their browser-based developer environment. For a more in-depth look at our development pipeline—and what’s in it for you—check out [Chris’ talk](https://www.youtube.com/watch?v=dFMpXUsJcGM) (inlined below) and our [previous post](https://www.freecodecamp.org/news/developing-kubernetes-applications-with-joy/) on the matter.\n\n`youtube: dFMpXUsJcGM`\n\n<h2>Pre-build Everything!</h2>\n\nWhen reviewing a PR or starting work on that new cool feature, no developer wants to accidentally work with an old state. Imagine wasting hours hunting a bug that’s already fixed on master. Fresh working copies—and ideally dev environments—for each task would be great.","metadata":{"source":"https://www.gitpod.io/blog/github-codespaces","loc":{"lines":{"from":44,"to":50}}}}],["346",{"pageContent":"Once dev environments have become code you can pre-build those dev environments ahead of time. **Think CI for your development setup**: on each change in the repository, Gitpod prepares a new dev environment for that change. Rather than having to manually adjust the tool versions, wait for all dependencies to download and for the code to compile, things are ready when you are. We call this [continuous dev environments](/blog/continuous-dev-environment-in-devops).\n\n<h2>At Last a Good Browser IDE</h2>\n\nGiven all these benefits, you might wonder why no one did this earlier. After all, developers automate the world on a daily basis. Thinking about it, it’s strange that most developers still set things up manually before they can get down to business.","metadata":{"source":"https://www.gitpod.io/blog/github-codespaces","loc":{"lines":{"from":52,"to":56}}}}],["347",{"pageContent":"There have been attempts to automate dev environments in the past (e.g. Docker, Vagrant, Cloud9). These early approaches always came with too many compromises, and their benefits did not quite outweigh the drawbacks. The biggest blocker was that developers could no longer use the powerful tools they normally would, most importantly an awesome Editor/IDE.\n\nThis has changed since, with VS Code, a web-technology based IDE has become so popular among developers. However, Microsoft has not open-sourced the browser version of VS Code. For GitHub, a Microsoft-owned company, this is obviously not an issue. For everyone else we have developed Eclipse [Theia](https://dev.to/svenefftinge/theia-1-0-finally-a-good-browser-ide-3ok0).","metadata":{"source":"https://www.gitpod.io/blog/github-codespaces","loc":{"lines":{"from":58,"to":60}}}}],["348",{"pageContent":"Theia provides the same functionality as VS Code, even supports VS Code extensions, and comes with an architecture that allows everyone to customize the IDE easily. It is developed as a true open-source, vendor-neutral project at the Eclipse Foundation \\*) and is adopted by Google, IBM, RedHat, SAP, arm, Arduino and many more. Mike Milinkovich wrote about the [differences between Theia and VS Code](https://blogs.eclipse.org/post/mike-milinkovich/eclipse-theia-and-vs-code-differences-explained) recently.\n\nThis new generation of Theia-based Web-IDEs go way beyond online-playgrounds which are barely sufficient for web development or quick prototypes. Today, we can finally run a professional IDE in a browser tab.\n\n<sub>\\*) To avoid misunderstandings: Theia has technically nothing in common with the classic Eclipse IDE, but is an independent project under the umbrella of the Eclipse Foundation.</sub>\n\n<h2>What About GitLab, Atlassian’s Bitbucket, and Other Git Hosting?</h2>","metadata":{"source":"https://www.gitpod.io/blog/github-codespaces","loc":{"lines":{"from":62,"to":68}}}}],["349",{"pageContent":"<h2>What About GitLab, Atlassian’s Bitbucket, and Other Git Hosting?</h2>\n\nWe are thrilled to see GitHub/Microsoft investing in automated developer environments as it will help convince developers around the world and get this new way of developing software adopted faster.\n\nBut most professional development happens on other platforms such as GitLab, Atlassian’s stack and of course good old GitWeb. Oftentimes companies even employ a mixture of these.\n\nTo also serve users beyond just GitHub, we have been focussing on integrating Gitpod with other platforms as well. In December we released support for GitLab, and integration with Atlassian’s Bitbucket (and Jira) will be available soon.\n\n<h2>Closer to Home: Gitpod Self-Hosted</h2>","metadata":{"source":"https://www.gitpod.io/blog/github-codespaces","loc":{"lines":{"from":68,"to":76}}}}],["350",{"pageContent":"<h2>Closer to Home: Gitpod Self-Hosted</h2>\n\nChances are that you host your Git repositories or other dev infrastructure in a private cloud, or on a local network where they can't be accessed from the outside. Thus, a hosted IDE service must be on the same private cloud or network. This is possible with [Gitpod Self-Hosted](/self-hosted) which can be installed on Kubernetes and does not require a connection to the public internet.\n\nToday we are releasing a new version which brings Gitpod Self-Hosted on par with Gitpod.io. The new release includes better GitLab integration and a new admin UI. With Gitpod Self-Hosted you can now enjoy this liberating way of developing software with your own GitLab installation.\n\n**Gitpod Self-Hosted is free for up to five users, and a free trial month for unlimited users is available, too.**\n\n<h2>Summary</h2>","metadata":{"source":"https://www.gitpod.io/blog/github-codespaces","loc":{"lines":{"from":76,"to":84}}}}],["351",{"pageContent":"**Gitpod Self-Hosted is free for up to five users, and a free trial month for unlimited users is available, too.**\n\n<h2>Summary</h2>\n\nWe are quickly headed into a wonderful future, where developers are no longer intimidated by tedious and outdated setup procedures. Professional software projects will provide automated, prebuilt developer environments that enable teams to start contributing, doing code reviews, reproducing bugs or just exploring new ideas immediately from any device securely.\n\nCI/CD has taught us how versioned, reproducible infrastructure as code is key to scale modern software development. Now it is time to apply these lessons to our developer environments and furthermore improve our lead times getting from ideas to production.\n\nExperience the future of software development now!\n\n<LinkButton class=\"mt-xx-small\" href=\"/\" variant=\"primary\" size=\"large\">Try Gitpod.io</LinkButton>","metadata":{"source":"https://www.gitpod.io/blog/github-codespaces","loc":{"lines":{"from":84,"to":94}}}}],["352",{"pageContent":"---\nauthor: corneliusludmann, svenefftinge\ndate: Thu, 06 Oct 2020 14:00:00 UTC\nexcerpt: Today, we are super excited to share that we’ve partnered with GitLab and built a native Gitpod integration in GitLab’s UI.\nimage: teaser.jpg\nslug: gitlab-integration\ntags: [\"Company building\"]\nsubtitle: Launch Gitpod workspace from GitLab\ntitle: Native GitLab Integration\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\nAt Gitpod we want to make developers’ lives easier. Starting automated dev environments for your daily coding tasks is already very easy: Just prefix your repository URL with `gitpod.io/#` and you are ready to go. To make this even better, you can install a browser extension which adds a convenient button to any GitLab, GitHub, or Bitbucket repository that lets you launch a Gitpod workspace with one click.","metadata":{"source":"https://www.gitpod.io/blog/gitlab-integration","loc":{"lines":{"from":1,"to":16}}}}],["353",{"pageContent":"Recently we asked ourselves how we could streamline the integration with your daily routine even more. Today, we are super excited to share that we’ve partnered with GitLab and built a [native Gitpod integration in GitLab’s UI](https://gitlab.com/gitlab-org/gitlab/-/merge_requests/37985).","metadata":{"source":"https://www.gitpod.io/blog/gitlab-integration","loc":{"lines":{"from":18,"to":18}}}}],["354",{"pageContent":"The last missing piece in your GitLab DevOps pipeline\n\nGitLab is one of the most popular DevOps tools/platforms out there, used by more than 100,000 organisations across the globe. Through its Web IDE, simple edits can already be made today from within the application. However, for more advanced programming tasks, developers require a full developer environment.\n\nSuch dev environments not only include a professional IDE/editor with all the convenient plugins for the project at hand, but also things like compilers, build tools, code generators, databases, and application servers.\n\nUntil now GitLab users would set up and maintain a single dev environment on their local machines. It’s time to free engineers from wasting their time with such tedious tasks and apply the lessons learned from CI/CD and infrastructure as code to dev environments.","metadata":{"source":"https://www.gitpod.io/blog/gitlab-integration","loc":{"lines":{"from":20,"to":26}}}}],["355",{"pageContent":"Why not automate the provisioning of dev environments? Teams should be able to spin up fresh environments for each new task without waiting or any manual steps involved.\n\nGitLab and Gitpod started a partnership to bring Gitpod's ready-to-code dev environments to GitLab. As a first result of this collaboration you can now launch cloud-based dev environments with one click directly from gitlab.com (even without the Gitpod browser extension).\n\n![Gitpod button on GitLab project page](../../../static/images/blog/gitlab-integration/gitpod-button-on-gitlab.png)","metadata":{"source":"https://www.gitpod.io/blog/gitlab-integration","loc":{"lines":{"from":28,"to":32}}}}],["356",{"pageContent":"“Everyone can contribute”\n\nGitLab’s credo “Everyone can contribute” is a perfect fit for Gitpod because contributing becomes much simpler when you allow anyone to spin up a ready-to-code developer environment in a few seconds.\n\nGitLab’s engineers have worked on lowering the barrier to contributions on GitLab itself through a comprehensive [contribution guide](https://about.gitlab.com/community/contribute/) and even a [GitLab Development Kit (GDK)](https://gitlab.com/gitlab-org/gitlab-development-kit) that sets up your dev environment on your machine. But still, running the GDK installer takes at least 30 minutes to download and install dependencies, clone the GitLab repository, and start all services you need like the database, a webserver, etc.","metadata":{"source":"https://www.gitpod.io/blog/gitlab-integration","loc":{"lines":{"from":34,"to":38}}}}],["357",{"pageContent":"We are currently helping the GitLab team <a class=\"no-nowrap\" href=\"https://gitlab.com/gitlab-org/gitlab/-/merge_requests/43103\">to build a fully-automated Gitpod configuration for the GitLab source code</a>. This makes contributing to the GitLab source code itself as easy as clicking a button. Instead of waiting half an hour for a bunch of libs and tools to get installed, with Gitpod you are productive within just a few minutes. Once this configuration is merged, you will be able to just click on the Gitpod button of the [GitLab repository](https://gitlab.com/gitlab-org/gitlab), and everything will be set up for your first GitLab contribution.\n\n[![GitLab integration quote](../../../static/images/blog/gitlab-integration/gitlab-integration-quote.png)](https://gitlab.com/gitlab-org/gitlab-development-kit/-/issues/1076#note_419638250)","metadata":{"source":"https://www.gitpod.io/blog/gitlab-integration","loc":{"lines":{"from":40,"to":42}}}}],["358",{"pageContent":"Hook up your GitLab Self-Managed with Gitpod.io\n\nThe Gitpod integration is already live on gitlab.com today and is going to be part of [GitLab&nbsp;13.5](https://gitlab.com/gitlab-com/www-gitlab-com/-/merge_requests/61933) which is released on October 22nd. At that point, you’ll be able to connect your GitLab self-managed installation to gitpod.io, through a new feature that lets you register additional Git providers.\n\nFurthermore, you can [Self-Host Gitpod](/self-hosted) (which is [open source](https://github.com/gitpod-io/gitpod)) on your own Kubernetes cluster and configure it with your GitLab instance. We have convenient installation scripts for GCP and AWS.","metadata":{"source":"https://www.gitpod.io/blog/gitlab-integration","loc":{"lines":{"from":44,"to":48}}}}],["359",{"pageContent":"What’s next?\n\nWe are continuously working on improving the GitLab integration and implementing new features for GitLab users (e.g. managing merge requests within Gitpod, [adding a Gitpod button on Merge Requests](https://gitlab.com/gitlab-org/gitlab/-/merge_requests/43352), etc.). You can also install the [GitLab VS Code Extension](https://open-vsx.org/extension/GitLab/gitlab-workflow) in Gitpod to interact with GitLab. Just go to the Extensions view (in the left vertical menu), search for “GitLab” and choose “Install”.\n\n![Gitpod button on GitLab project page](../../../static/images/blog/gitlab-integration/gitlab-vscode-extension.png)","metadata":{"source":"https://www.gitpod.io/blog/gitlab-integration","loc":{"lines":{"from":50,"to":54}}}}],["360",{"pageContent":"Try the Gitpod integration now!\n\nThe GitLab integration is available at GitLab.com and in your [self-managed GitLab](https://gitlab.com/help/integration/gitpod.md) soon. Don’t have a project at hand? Try the demo project [Spring PetClinic](https://gitlab.com/gitpod/spring-petclinic) which has a proper Gitpod configuration committed.\n\nYou are a passionate GitLab user? Please share your experiences with the Gitpod integration with us! Visit our community forum at [community.gitpod.io](https://community.gitpod.io/), report bugs in the [Gitpod repository](https://github.com/gitpod-io/gitpod/), or send us an e-mail at support@gitpod.io!","metadata":{"source":"https://www.gitpod.io/blog/gitlab-integration","loc":{"lines":{"from":56,"to":60}}}}],["361",{"pageContent":"---\nauthor: corneliusludmann\ndate: Mon Aug 30 2021 08:08:08 GMT+0000 (UTC)\nexcerpt: GitLab now has a Gitpod button on MR pages\nimage: gitlab-header.png\nslug: gitlab-mr-gitpod-integration\ntags: [\"Gitpod updates\"]\nsubtitle: Launch Gitpod workspace from GitLab MR pages with one click\ntitle: New Gitpod Button has landed on GitLab Merge Request Pages\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>","metadata":{"source":"https://www.gitpod.io/blog/gitlab-mr-gitpod-integration","loc":{"lines":{"from":1,"to":14}}}}],["362",{"pageContent":"<script context=\"module\">\n  export const prerender = true;\n</script>\n\nReviewing merge requests is part of a developer's everday life. The quality of code reviews is a crucial aspect of the development process. In reality, it often leads to just skiming the code changes and approving the merge request with a simple “LGTM”. One reason is that doing code reviews requires a context switch for the reviewer. For a careful review one needs to checkout the branch of the merge request, navigate through the code changes, build and test the changed software, … and hope that there will be no configuration drift or other inferences with the existing local development setup.","metadata":{"source":"https://www.gitpod.io/blog/gitlab-mr-gitpod-integration","loc":{"lines":{"from":14,"to":18}}}}],["363",{"pageContent":"This is a situation where ephemeral development environments show their full strength. With Gitpod, you get a fresh development environment just for your review. It has everything set-up for reviewing the changes and will be closed once the job is done. For a head-to-head comparison between local and cloud based workflows for MRs I recommend reading [Mike's blog post](/blog/i-said-goodbye-to-local-development-and-so-can-you#switch-context).","metadata":{"source":"https://www.gitpod.io/blog/gitlab-mr-gitpod-integration","loc":{"lines":{"from":20,"to":20}}}}],["364",{"pageContent":"Launch a preconfigured Gitpod workspace from a GitLab merge request\n\nStarting a Gitpod development environment is easy: Just add `gitpod.io/#` in front of a GitLab, GitHub, or Bitbucket URL in your browser's address bar and hit Enter. That's it.\n\n![Gitpod loves GitLab](../../../static/images/blog/gitlab-mr-gitpod-integration/gitpod-loves-gitlab.png)\n\nWith the native Gitpod integration in GitLab, it's even easier! Next to the Web IDE button you'll find a Gitpod button in a drop-down menu that [has been introduced in GitLab 13.5](/blog/gitlab-integration). With the [GitLab 14.2 release](https://about.gitlab.com/releases/2021/08/22/gitlab-14-2-released/) you'll find this button on all merge request pages. Just hit the button and a cloud development environment waits for your review.\n\n![Gitpod button on GitLab merge request](../../../static/images/blog/gitlab-mr-gitpod-integration/create-gitpod-in-mr-view.png)","metadata":{"source":"https://www.gitpod.io/blog/gitlab-mr-gitpod-integration","loc":{"lines":{"from":22,"to":30}}}}],["365",{"pageContent":"![Gitpod button on GitLab merge request](../../../static/images/blog/gitlab-mr-gitpod-integration/create-gitpod-in-mr-view.png)\n\nThe [GitLab docs](https://docs.gitlab.com/ee/integration/gitpod.html) provide you with further information on how to enable the Gitpod integration in your self-managed GitLab instance and how to use the Gitpod integration.","metadata":{"source":"https://www.gitpod.io/blog/gitlab-mr-gitpod-integration","loc":{"lines":{"from":30,"to":32}}}}],["366",{"pageContent":"Contribution to GitLab awarded with “Golden Fork”\n\nEvery release, GitLab selects a community contributor as a [most valuable person](https://about.gitlab.com/community/mvp/) (MVP) of the release which is recognized with the prestigious golden fork. In the 14.2 release Cornelius from Gitpod [has been awarded](https://about.gitlab.com/releases/2021/08/22/gitlab-14-2-released/#mvp) for the contribution of the Gitpod integration in GitLab.\n\n![GitLab MVP of release 14.2](../../../static/images/blog/gitlab-mr-gitpod-integration/gitlab-mvp.png)\n\n## Further reading\n\n- [GitLab 14.2 release blog post](https://about.gitlab.com/releases/2021/08/22/gitlab-14-2-released/)\n- [Blog post “Native GitLab Integration”](/blog/gitlab-integration)\n- [GitLab docs about the Gitpod integration](https://docs.gitlab.com/ee/integration/gitpod.html)","metadata":{"source":"https://www.gitpod.io/blog/gitlab-mr-gitpod-integration","loc":{"lines":{"from":34,"to":44}}}}],["367",{"pageContent":"---\nauthor: svenefftinge\ndate: Wed Dec 04 2019 13:49:24 GMT+0000 (UTC)\nexcerpt: We are happy to announce that you can finally enjoy Gitpod's frictionless ready-to-code dev environments on GitLab as well.\nimage: teaser-gitlab-cover.png\nslug: gitlab-support\nsubtitle: Your devops toolchain is finally complete!\ntags: [\"Gitpod updates\"]\ntitle: GitLab Support for Gitpod is Here 🎉\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\nWe are happy to announce that you can finally enjoy Gitpod's frictionless ready-to-code dev environments on GitLab as well.\n\n![gitpod loves gitlab](../../../static/images/blog/gitlab-support/teaser-gitlab-gitpod.jpg)","metadata":{"source":"https://www.gitpod.io/blog/gitlab-support","loc":{"lines":{"from":1,"to":18}}}}],["368",{"pageContent":"Getting started with GitLab and Gitpod\n\nStarting a dev environment for a GitLab project works just as with GitHub, i.e. you prefix any GitLab project URL with `gitpod.io/#`.\n\nYou can try it out with the Spring PetClinic example:\nhttps://gitpod.io/#https://gitlab.com/gitpod/spring-petclinic\n\nBesides the standard project URL, Gitpod supports\n\n- opening file URLs\n\n  <p>Example: <a href=\"https://gitpod.io/#https://gitlab.com/gitpod/spring-petclinic/blob/master/src/main/java/org/springframework/samples/petclinic/PetClinicApplication.java\" target=\"blank\"><b style=\"font-weight:700;\">https://gitpod.io/#</b>https://gitlab.com/gitpod/spring-petclinic/../petclinic/PetClinicApplication.java</a></p>\n\n- opening branches\n\n  <p>Example: <a href=\"https://gitpod.io/#https://gitlab.com/gitpod/spring-petclinic/tree/my-branch\" target=\"blank\"><b style=\"font-weight:700;\">https://gitpod.io/#</b>https://gitlab.com/gitpod/spring-petclinic/tree/my-branch</a></p>\n\n- opening issues","metadata":{"source":"https://www.gitpod.io/blog/gitlab-support","loc":{"lines":{"from":20,"to":37}}}}],["369",{"pageContent":"- opening issues\n\n  <p>Example: <a href=\"https://gitpod.io/#https://gitlab.com/gitpod/spring-petclinic/issues/1\" target=\"blank\"><b style=\"font-weight:700;\">https://gitpod.io/#</b>https://gitlab.com/gitpod/spring-petclinic/issues/1</a></p>\n\n- opening merge requests\n\n  <p>Example: <a href=\"https://gitpod.io/#https://gitlab.com/gitpod/spring-petclinic/merge_requests/1\" target=\"blank\"><b style=\"font-weight:700;\">https://gitpod.io/#</b>https://gitlab.com/gitpod/spring-petclinic/merge_requests/1</a></p>\n\nDepending on the context, your dev environment will be initialized differently.\n\nFor instance, if you start a workspace from the issue context above, you’ll get a fresh workspace with a new local branch based on `master`.\n\nThe new local branch will be named like `<username>/<issue-title>-<issue-nr>`, in my case it is:\n`svenefftinge/allow-skip-first-name-1` (if the issue title is too long, only the first few words will be included in the branch name).","metadata":{"source":"https://www.gitpod.io/blog/gitlab-support","loc":{"lines":{"from":37,"to":50}}}}],["370",{"pageContent":"![GitLab Issue Context](../../../static/images/blog/gitlab-support/gitlab-issue-context-status.png)","metadata":{"source":"https://www.gitpod.io/blog/gitlab-support","loc":{"lines":{"from":52,"to":52}}}}],["371",{"pageContent":"Configure your project\n\nTo get the most out of Gitpod, you need to tell it how a perfect dev environment for your project looks like. Dev environments run as containers which you can configure through custom Docker files.\n\nFurthermore you can specify which tasks should run after a fresh checkout. Usually this includes build steps, downloading dependencies and running some unit tests. Read below's section on prebuilds, to make Gitpod automatically run these steps as a CI pipeline whenever someone pushes changes to your project.\n\nThere is much more you can do to make sure every team member gets a ready-to-code dev environment when they need one. Please refer to the [docs](/docs/configure) for details.","metadata":{"source":"https://www.gitpod.io/blog/gitlab-support","loc":{"lines":{"from":54,"to":60}}}}],["372",{"pageContent":"Prebuilds\n\nGitpod’s [prebuilt workspaces](/docs/configure/projects/prebuilds) are key to providing ephemeral, ready-to-code dev environments for your branches and projects. You can configure Gitpod to run your project's build asynchronously every time someone pushes new commits or branches to your repository. So when a developer wants to start coding, she can, because everything is already prepared.\n\nEnabling prebuilds on your GitLab project is done by configuring a Webhook. But don't fear, you don't have to do that manually, just run a prebuild on your project and it will be configured automatically. To do that, use the prefix `https://gitpod.io/#prebuild/`, as in\n\n> **https://gitpod.io/#prebuild/**`https://gitlab.com/<myuser>/<myrepo>`","metadata":{"source":"https://www.gitpod.io/blog/gitlab-support","loc":{"lines":{"from":62,"to":68}}}}],["373",{"pageContent":"We Need Your Feedback\n\nAll important features in Gitpod go through a beta phase, so you get the chance to try it early and participate in further development of the feature. So, please [let us know](https://github.com/gitpod-io/gitpod/issues) with anything that bugs you or any ideas you have that could make your daily life with GitLab and Gitpod more seamless. <span aria-hidden=\"true\">❤️</span>\n\n## I run GitLab Self-Managed!\n\nIf you want to use Gitpod with your self-managed instance of GitLab, you'll need to wait a bit longer for Gitpod Enterprise (or [apply for our private beta](/contact/support)).\n\nGitpod Enterprise will be released soon and allows to run Gitpod either self-managed or managed by us. Gitpod Enterprise runs on Google Cloud or any vanilla Kubernetes installation and can be configured to connect with any GitLab or GitHub installation.","metadata":{"source":"https://www.gitpod.io/blog/gitlab-support","loc":{"lines":{"from":70,"to":78}}}}],["374",{"pageContent":"---\nauthor: pawlean\ndate: Monday, 6 Feb 2023 18:00 UTC\nexcerpt: Last week, we hosted our very first in-person community meet-up in Paris, France. Learn how to host a community meet-up with Gitpod.\nimage: teaser.webp\nslug: gitpod-comes-to-your-city-host-a-community-meet-up-with-gitpod\ntags: [\"Gitpod updates\"]\nteaserImage: teaser.webp\ntitle: Gitpod comes to your city - host a community meet-up\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\nLast Monday, we hosted our first ever in-person community meet-up in Paris, France. Our passionate French community and [Heroes](https://gitpod.io/community/heroes) helped guide our decision on choosing France as our kick-off location. It seemed like a fitting initial location to bring us all together. 🫶","metadata":{"source":"https://www.gitpod.io/blog/gitpod-comes-to-your-city-host-a-community-meet-up-with-gitpod","loc":{"lines":{"from":1,"to":16}}}}],["375",{"pageContent":"The Heroes program recognises developers that go above and beyond to contribute to Gitpod. By being part of the program you get exclusive perks and benefits. For example, Gitpod community heroes get to preview upcoming features and are involved in discussions with Gitpod engineers and product managers.","metadata":{"source":"https://www.gitpod.io/blog/gitpod-comes-to-your-city-host-a-community-meet-up-with-gitpod","loc":{"lines":{"from":18,"to":18}}}}],["376",{"pageContent":"We want to empower Heroes to create opportunities with Gitpod for them to succeed! For instance, recently, Heroes [Palani](https://twitter.com/Palanikannan_M) and [Henit](https://twitter.com/henit_chobisa) have been building a [Raycast extension](https://www.raycast.com/henitchobisa/gitpod) using the upcoming Gitpod public API with support from IDE product manager, [Lou](https://twitter.com/loujaybee) and DevRel Engineer, [Siddhant](https://twitter.com/Siddhant_K_code). We’ve also brought Heroes on our virtual community stage during our [Office Hours](https://www.youtube.com/playlist?list=PL3TSF5whlprU4vRoYBK6-QhFAbwAsoKmu) and [reviewed content by Heroes](https://www.williamghelfi.com/blog/2022-09-26-idiomatic-gitpod/).\n\nFor the last two years, the [Gitpod Community](https://gitpod.io/community) has mostly existed in the digital world. Although distributed across different platforms, we wanted to explore fostering real life connections.","metadata":{"source":"https://www.gitpod.io/blog/gitpod-comes-to-your-city-host-a-community-meet-up-with-gitpod","loc":{"lines":{"from":20,"to":22}}}}],["377",{"pageContent":"![Gitpod Paris at Zenika](../../../static/images/blog/gitpod-comes-to-your-city-host-a-community-meet-up-with-gitpod/gitpod-paris.webp)\n\nOur Hero, [Jean-Phi Baconnais](https://twitter.com/JPhi_Baconnais) who is a serial conference speaker and events organizer was super enthusiastic about hosting our first meet-up. When I approached him with the idea in December, we already had the [ball rolling from that first chat](https://www.eventbrite.fr/e/billets-soiree-gitpod-france-504357656327) and in just a few weeks, the event was live and happening in\n[Zenika’s](https://www.zenika.com/en-US) Paris office. 🇫🇷\n\nTalk about **[Shipping Skateboards](https://gitpod.io/blog/gitpod-core-values)**! 🛹","metadata":{"source":"https://www.gitpod.io/blog/gitpod-comes-to-your-city-host-a-community-meet-up-with-gitpod","loc":{"lines":{"from":24,"to":29}}}}],["378",{"pageContent":"Lightning talks are the core of the meetup ✨\n\nThe evening was structured with four lightning talks from myself, Jean-Phil, Oliver and Horacio. All the talks except mine were in French, where our Heroes shared their use cases and demos of using Gitpod. At future local meetups, we also want to explore discussion rounds and Gitpod hackathons. If you have an idea, let me know on [Discord](https://discord.com/invite/gitpod) or [Twitter](https://twitter.com/paulienuh).\n\nYou can catch up with the talks from our Paris meetup below!\n\n<iframe width=\"100%\" height=\"500\" src=\"https://www.youtube.com/embed/videoseries?list=PL3TSF5whlprWHSTPbBrpGyxetRMOgUTd5\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>","metadata":{"source":"https://www.gitpod.io/blog/gitpod-comes-to-your-city-host-a-community-meet-up-with-gitpod","loc":{"lines":{"from":31,"to":37}}}}],["379",{"pageContent":"Connecting with our community around the world 🌎\n\nThe topic of connection is both a personal and professional goal of mine - connecting with myself and others - and so, this opportunity with our community, users and Heroes excited me! There are many learnings from this meet-up that we’re looking forward to applying to future community events.\n\nThank you to attendees and speakers for the energy and love for Gitpod, we’re so excited to continue supporting and collaborating with you all. 🧡\n\n![Gitpod Paris selfie](../../../static/images/blog/gitpod-comes-to-your-city-host-a-community-meet-up-with-gitpod/gitpod-paris-selfie.webp)","metadata":{"source":"https://www.gitpod.io/blog/gitpod-comes-to-your-city-host-a-community-meet-up-with-gitpod","loc":{"lines":{"from":39,"to":45}}}}],["380",{"pageContent":"Host a Gitpod meetup in your city 🌃\n\nAre you interested in hosting a local Gitpod meet-up in your city?\n\nThey are an opportunity to connect with others in the community and learn and share the best Gitpod practices and knowledge. It is also a way to bring our primarily virtual Gitpod community to life! 😊\n\nThe Gitpod Community Team is here to help you be as successful as you can be with your local group! These are the ways we can help:\n\n1. **Spreading the word:** We will also help spread the word to users in your area and share it on our official communications channels\n2. **Offering swag for attendees**\n3. **A budget for food and beverages**\n4. Depending on location, we could also have **a Gitpodder in your area attend to give a talk or support in person**\n5. Creating **a channel** on our [Discord server](https://www.gitpod.io/chat) for you to chat with attendees and organizers","metadata":{"source":"https://www.gitpod.io/blog/gitpod-comes-to-your-city-host-a-community-meet-up-with-gitpod","loc":{"lines":{"from":47,"to":59}}}}],["381",{"pageContent":"Ready to go? Follow [our guidelines](https://www.notion.so/gitpod/Hosting-a-Gitpod-Community-meet-up-77bdde81c5b04d80b93e425ebdd568ef) and let us know in the [#contribute channel on Discord](https://gitpod.io/chat). Hopefully see you in the next event! 👋","metadata":{"source":"https://www.gitpod.io/blog/gitpod-comes-to-your-city-host-a-community-meet-up-with-gitpod","loc":{"lines":{"from":61,"to":61}}}}],["382",{"pageContent":"---\nauthor: JohannesLandgraf, svenefftinge\ndate: Wed, 1 June 2022 16:00:00 UTC\nexcerpt: Core values define who we are. They are an authentic representation of where we are coming from and a guiding compass on where we are going.\nimage: teaser-mobile.jpg\nslug: gitpod-core-values\ntags: [\"Company building\"]\nsubtitle:\nteaserImage: teaser.jpg\ntitle: Our Core Values\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n<script lang=\"ts\">\n  import Quote from \"$lib/components/quote.svelte\";\n</script>\n\n<style>\n  .banner {\n    @apply mt-x-large -mb-x-small;\n  }\n\n  blockquote {\n    @apply bg-transparent border-l-4 border-primary pl-xx-small py-0 sm:m-small rounded-none !important;\n  }\n\n  blockquote p {\n    @apply text-important text-xl font-semibold !important;\n    line-height: 35px;\n  }\n</style>","metadata":{"source":"https://www.gitpod.io/blog/gitpod-core-values","loc":{"lines":{"from":1,"to":34}}}}],["383",{"pageContent":"blockquote p {\n    @apply text-important text-xl font-semibold !important;\n    line-height: 35px;\n  }\n</style>\n\nDevelopers architect our future. Moving software development to the cloud is the next logical step in automating our software delivery pipelines on our path to build the developer experience company.\n\n> With Gitpod we want to remove all friction from the developer experience to be always ready-to-code and make software engineering more collaborative, joyful, and secure.\n\nAs we scale the company around the globe, we started to formalize our culture, write down what we stand for and how we will move towards our purpose. We hope this helps you to understand who we are.","metadata":{"source":"https://www.gitpod.io/blog/gitpod-core-values","loc":{"lines":{"from":34,"to":44}}}}],["384",{"pageContent":"As we scale the company around the globe, we started to formalize our culture, write down what we stand for and how we will move towards our purpose. We hope this helps you to understand who we are.\n\nThis is what core values are about. Core values define who we are. They are an authentic representation of where we are coming from and a guiding compass on where we are going. They are horizontal to our work, our community, and the products and services crafted on Gitpod. As we are growing, who we are matures side-by-side and while some of these values stay with us, others will need to be adapted over time.\n\n<img src=\"/images/blog/gitpod-core-values/we.png\" alt=\"We\" class=\"banner\">","metadata":{"source":"https://www.gitpod.io/blog/gitpod-core-values","loc":{"lines":{"from":44,"to":48}}}}],["385",{"pageContent":"We, not me\n\n> We show up for the team, not for ourselves. We trust and empower each other. We make heroes and unblock others.\n\n- **Psychological safety and diversity** of gender, race, thought, and otherwise are foundational for high-performing teams. When people feel safe and know they are valued for who they are, everything they produce becomes excellent. We make equitable space at the table.\n- **Ego is the enemy** - we think more about each other than ourselves. In turn, you get a team that is rooting for you every single day.\n- **Asynchronous work** allows for more time to build and less time wasted in meetings. It is inclusive for our global team and enables collaboration, no matter the timezone.\n\n<img src=\"/images/blog/gitpod-core-values/integrate.png\" alt=\"Integrate\" class=\"banner\">","metadata":{"source":"https://www.gitpod.io/blog/gitpod-core-values","loc":{"lines":{"from":50,"to":58}}}}],["386",{"pageContent":"Integrate, don’t dictate\n\n> We are humble and kind. We first seek to understand, then be understood - with products and people around us.\n\n- **Orthogonality** is baked into our product design and [How we work](https://www.notion.so/gitpod/How-we-work-0f9159f282d24f9d9776372e0c7dbab4). We don't build new solutions if there is an existing widely adopted one. We strive for sane reusable abstractions that can be composed in ways we haven't anticipated. We build on the success of others.\n- **Our community** is the heartbeat of Gitpod. Their feedback drives our product and helps shape how and what we prioritize. We are committed to fostering connection by supporting and empowering our community.\n- **Build in the open**. Transparency helps build a community of trust. Openness creates access between Gitpod and our community helping us stay ahead. [Public when possible, private when necessary.](https://www.notion.so/gitpod/How-we-work-0f9159f282d24f9d9776372e0c7dbab4)","metadata":{"source":"https://www.gitpod.io/blog/gitpod-core-values","loc":{"lines":{"from":60,"to":66}}}}],["387",{"pageContent":"<img src=\"/images/blog/gitpod-core-values/students.png\" alt=\"Book\" class=\"banner\">","metadata":{"source":"https://www.gitpod.io/blog/gitpod-core-values","loc":{"lines":{"from":68,"to":68}}}}],["388",{"pageContent":"Students of the game\n\n> We build and learn in the open - always with curiosity. We invest in our personal and professional development.\n\n- A **culture of feedback** helps us grow. With positive intent and selflessness in mind, we freely and respectfully give and receive feedback to better ourselves and Gitpod as a whole.\n- We **stay entrepreneurial** developing resilience and agility. We commit to being stretched and increase our tolerance in adversity.\n- We **operate as [managers of one](https://www.notion.so/gitpod/How-we-work-0f9159f282d24f9d9776372e0c7dbab4)**, taking personal responsibility for commitments, growth, and development. Everyone takes ownership of their responsibilities and is accountable for accomplishing them.\n\n<img src=\"/images/blog/gitpod-core-values/skateboard.png\" alt=\"Skateboard\" class=\"banner\">","metadata":{"source":"https://www.gitpod.io/blog/gitpod-core-values","loc":{"lines":{"from":70,"to":78}}}}],["389",{"pageContent":"Ship skateboards\n\n> We tackle hard problems with simple solutions that delight. We commit and ship the minimal viable change, then iterate quickly.\n\n- **Ship it**. We can produce value only when we put our work in front of users. Work in progress amounts to cost; loose ends never pay back those costs. Only when we ship things does our work pay off.\n- **Minimal viable change**. The simplest and quickest solution to a problem is often the best solution. We break problems down as small as possible to create the biggest impact. We build skateboards, then cars and we don’t stop there.\n- **Impeccable agreements**. Trust with each other is vital to ship. We are committed to doing what we say we’ll do and communicating when something changes.","metadata":{"source":"https://www.gitpod.io/blog/gitpod-core-values","loc":{"lines":{"from":80,"to":86}}}}],["390",{"pageContent":"When we announced the core values during our (first ever!) offsite in Portugal in March 2022, we gave every Gitpodder an actual Gitpod skateboard with a print of our value 3D icons and a hanger to put the deck on the wall. We’ve also included the icons as Emojis in Slack and we already start seeing new habits from Gitpodders asking during their day to day work: _'What’s the 🛹 for this problem?'_\n\n`youtube: IMpl5dtWIlU`","metadata":{"source":"https://www.gitpod.io/blog/gitpod-core-values","loc":{"lines":{"from":88,"to":90}}}}],["391",{"pageContent":"---\nauthor: ghuntley\ndate: Wednesday, 16 Feb 2022 06:00:00 UTC\nexcerpt: We're launching our open source program to help you build great things without friction, for free.\nslug: gitpod-for-opensource\nsubtitle:\nteaserImage: teaser.jpg\nimage: teaser.jpg\ntags: [\"Company building\"]\ntitle: Introducing Gitpod for Open Source\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n**TL;DR**","metadata":{"source":"https://www.gitpod.io/blog/gitpod-for-opensource","loc":{"lines":{"from":1,"to":17}}}}],["392",{"pageContent":"- Today we are announcing our “[Gitpod for Open Source](/for/opensource)” program.\n- Gitpod has formed a new team to support open source (ps [we are hiring](/careers)) and personalized support is now available to open source maintainers / communities.\n- complimentary [Gitpod Self-Hosted licenses](/self-hosted) are now available for projects that maintain their independence via running their own infrastructure (ie Haskell, Drupal, Rust). Apply via [this form](/for/opensource).\n- Free and open source software projects aligned with [FOSSHost](https://fosshost.org/about) can request an account upgrade to a complimentary professional open source account via [this form](/for/opensource).","metadata":{"source":"https://www.gitpod.io/blog/gitpod-for-opensource","loc":{"lines":{"from":19,"to":22}}}}],["393",{"pageContent":"- Over 18,000 people in the GitHub ecosystem have been pre-qualified for complimentary professional open source accounts with unlimited hours. If you are in the short-list your account will be automatically upgraded either upon account creation or when you next start a workspace with your existing account. No action is required.\n  - If you had published a Visual Studio Code extension, Emacs or Vim plugin on GitHub before this blog post went live then you are likely on the shortlist.\n  - If your membership was public before this blog post went live on one of more of the following GitHub organizations then you are likely on the shortlist:","metadata":{"source":"https://www.gitpod.io/blog/gitpod-for-opensource","loc":{"lines":{"from":23,"to":25}}}}],["394",{"pageContent":"> alpinelinux, angular, apache, apple, archlinux, babel, caddyserver, cake-build, cakephp, centos, clojure, cncf, cockroachdb, curl, darktable-org, dart-lang, django, docker, dotnet, eclipse, elastic, elixir-lang, endeavouros-team, erlang, expressjs, facebook, flutter, fody, freebsd, fsprojects, ghc, gnome, golang, haproxy, hashicorp, haskell, homebrew, illumos, jaegertracing, jetbrains, julialang, jruby, k3s-io, kubernetes, laravel, libressl-portable, llvm, lua, maintainers, mathworks, microsoft, moby, mongodb, mono, mozilla, mysql, neovim, netbsd, nginx, nixos, nodejs, npm, obsproject, ohmyzsh, open-telemetry, openjdk, openresty, openssl, particular, perl, phoenixframework, php, pnpm, postgres, python, r-lib, rails, redhat-developer, redis, rethinkdb, rstudio, ruby, rust-lang, scala, serilog, sixlabors, sparklemotion, spring-projects, statiqdev, sveltejs, symfony, tailwindlabs, tc39, tmux, twbs, videolan, vim, vuejs, wolfssl, womenwhocode and xunit","metadata":{"source":"https://www.gitpod.io/blog/gitpod-for-opensource","loc":{"lines":{"from":27,"to":27}}}}],["395",{"pageContent":"- Projects, communities and maintainers that use GitLab (or Bitbucket) or that are not in the above list can use [this form](/for/opensource) to request an upgrade of your account to our complimentary professional open-source plan.\n\nHowdy folks,\n\nI’m gonna assume this is the first time you have heard about Gitpod and build from there because context is important. Gitpod is an open-core open source project and company that provides reproducible software developer environments. Gitpod can be consumed as a service or [Self-Hosted on your own infrastructure](/self-hosted).\n\n> “Gitpod totally changed the development velocity for RedwoodJS — it removed any issues related to configurations of dev environments and made it incredibly easy to contribute. Reviewing pull requests is delightful because they are prebuilt and ready for review!”\n>\n> **_Tom Preston-Werner, Co-founder of RedwoodJS (and GitHub)_**","metadata":{"source":"https://www.gitpod.io/blog/gitpod-for-opensource","loc":{"lines":{"from":29,"to":37}}}}],["396",{"pageContent":"Similar to developer experience, Open Source is part of Gitpod’s DNA. It wouldn’t have been possible for us to create Gitpod without all of the amazing open-source work it’s built upon. And still, we’re developing huge parts of Gitpod out in the open. Not only is Gitpod an open source company, but our product is positioned to remove one of the biggest hurdles before developers can contribute to open source: setting up the developer environment..\n\n> “I'm using Gitpod almost daily when trying out new technologies, working on OSS PRs/repros or when giving demos. Welcome to the promised land of cloud developer environments.”\n>\n> **_Johannes Schickling, Co-founder of Prisma_**\n\nIf we critically look at how commercial software is currently developed, people have cobbled-together sets of build tools, packages, runtime environments, and IDEs that they all desperately try to maintain as needed to ship their own software to their customers.","metadata":{"source":"https://www.gitpod.io/blog/gitpod-for-opensource","loc":{"lines":{"from":39,"to":45}}}}],["397",{"pageContent":"That’s a rather simplistic view of the world however. Software in 2022 is made up of other software and a myriad of tools that are built and maintained almost exclusively by unpaid volunteers. Each one of these open source dependencies also have cobbled-together sets of build tools, packages, runtime environments that are needed to produce the artifacts that are needed by the consuming software.\n\nThese toolchains can be incompatible with each other thus introducing friction and risk that contributing patches back to open source projects will break the ability to ship software to customers. To make matters worse, this problem can be easily solved and an incredible amount of time is expended on toolchain setup activities that are no longer required because Docker now exists.","metadata":{"source":"https://www.gitpod.io/blog/gitpod-for-opensource","loc":{"lines":{"from":47,"to":49}}}}],["398",{"pageContent":"Consider the common scenario where people work different Python apps with different dependencies (including C/FFI) running against different Python environments. What if you didn’t have to remember to run the right commands and click the right buttons in your editor to get everything working correctly? Instead, you just clicked a button and spun up an environment isolated from everything else, with the right tools and packages and runtime environment for that codebase?\n\n> Cloud-based, reproducible developer environments are a sleeper technology that’s going to ramp up for a decade in usage until, one day, everyone will be “behind the times” if they’re not already using them. I see it as similar to git, where the possibilities are endless, the model is superior, work evolves around it as an ecosystem builds up around it, and then it’s the new normal.\n>\n> **_Phillip Carter, Senior Product Manager at Honeycomb_**","metadata":{"source":"https://www.gitpod.io/blog/gitpod-for-opensource","loc":{"lines":{"from":51,"to":55}}}}],["399",{"pageContent":"That isn’t some dream. It’s actually possible today, and it's only going to become more capable and widespread over time. By converting the steps in an open-source project’s ‘CONTRIBUTING.md’ into a Dockerfile contributors that use Gitpod can spin up an environment with a single button press, author contributions, debug it, do whatever from any device and from anywhere. Everyone can contribute even if they don't have access to powerful (expensive) computers.\n\nGitpod is equally delightful for open source maintainers as well:","metadata":{"source":"https://www.gitpod.io/blog/gitpod-for-opensource","loc":{"lines":{"from":57,"to":59}}}}],["400",{"pageContent":"Gitpod is equally delightful for open source maintainers as well:\n\n- Code anywhere, on any device. No need for over powered laptops, a chrome book and even an iPad will work just fine.\n  Gitpod prebuilds developer environments whenever there's a commit to a repository or a pull-request is raised.\n- Gone are the days of typing “git clone” && “git pull” by hand. Open each pull–request you wish to review in a new browser tab or another desktop editor window and everything is restored, precompiled and ready to go.\n- With Gitpod, people can contribute to your project with a single click. Tedious environment setups, contributing guides and maintenance activities no longer exist. You'll receive more contributions and contributions are easier to review!\n- By using Gitpod, no packages or dependencies are downloaded to your devices which helps contain security incidents by inhibiting malicious actors pivoting towards completely compromising your workstation.","metadata":{"source":"https://www.gitpod.io/blog/gitpod-for-opensource","loc":{"lines":{"from":59,"to":65}}}}],["401",{"pageContent":"> “With Gitpod, I can review any pull request in a full coding environment where I can edit, build, and test the contribution, by just prepending \"http://gitpod.io#\". Gitpod makes the pull-request review process so much nicer for me and I no longer have to do any local checkouts.”\n>\n> **_Julius Volz, Co-founder of Prometheus_**\n\n# Benefits\n\n- People and projects who qualify for Gitpod’s Open Source program are provided with unlimited hours for usage on public repos. Contributors to an open-source project are provided with a generous free plan for up to 50h a month, including private repos.\n- complimentary [Gitpod Self-Hosted](/self-hosted) licenses are available for projects that maintain their independence via running their own infrastructure (ie Haskell, Drupal, Rust).\n- Personalized support is now available to open source maintainers / communities.\n\n# Who is eligible?\n\nTo qualify for Gitpod’s Open Source program, you need to meet one of this criteria:","metadata":{"source":"https://www.gitpod.io/blog/gitpod-for-opensource","loc":{"lines":{"from":67,"to":79}}}}],["402",{"pageContent":"# Who is eligible?\n\nTo qualify for Gitpod’s Open Source program, you need to meet one of this criteria:\n\n- You are a maintainer, core contributor to a well-established free software or open-source project.\n- You regularly contribute to free software or open source communities in other ways (e.g. producing regular content like blog posts, videos, live streams, translations, or organizing meet-ups, conferences, hackathons, etc).\n- You are an author, core contributor of extensions for editors such as VSCode, VIM, Emacs, et al. or of developer tools such as build systems, programming languages, compilers, and editor tooling such as Language Server Protocol (LSP) implementations.\n- A significant part of your income (employment or via community support) is from maintaining or producing open source work.","metadata":{"source":"https://www.gitpod.io/blog/gitpod-for-opensource","loc":{"lines":{"from":79,"to":86}}}}],["403",{"pageContent":"How do I apply?\n\nVia [this form](/for/opensource) but you might not need to. Over 18,000 people in the GitHub ecosystem have been pre-qualified for complimentary professional open source accounts with unlimited hours. If you are in the short-list your account will be automatically upgraded either upon account creation or when you next start a workspace. No action is required.\n\n- If you had published a Visual Studio Code extension, Emacs or Vim plugin on GitHub before this blog post went live then you are likely on the shortlist.\n\n- If your membership was public before this blog post went live on one of more of the following GitHub organizations then you are likely on the shortlist:","metadata":{"source":"https://www.gitpod.io/blog/gitpod-for-opensource","loc":{"lines":{"from":88,"to":94}}}}],["404",{"pageContent":"> alpinelinux, angular, apache, apple, archlinux, babel, caddyserver, cake-build, cakephp, centos, clojure, cncf, cockroachdb, curl, darktable-org, dart-lang, django, docker, dotnet, eclipse, elastic, elixir-lang, endeavouros-team, erlang, expressjs, facebook, flutter, fody, freebsd, fsprojects, ghc, gnome, golang, haproxy, hashicorp, haskell, homebrew, illumos, jaegertracing, jetbrains, julialang, k3s-io, kubernetes, laravel, libressl-portable, llvm, lua, maintainers, mathworks, moby, mongodb, mono, mozilla, mysql, neovim, netbsd, nginx, nixos, nodejs, npm, obsproject, ohmyzsh, open-telemetry, openjdk, openresty, openssl, particular, perl, phoenixframework, php, pnpm, postgres, python, r-lib, rails, redhat-developer, redis, rethinkdb, rstudio, rust-lang, scala, serilog, sixlabors, sparklemotion, spring-projects, statiqdev, sveltejs, symfony, tailwindlabs, tc39, tmux, twbs, videolan, vim, vuejs, wolfssl, womenwhocode and xunit","metadata":{"source":"https://www.gitpod.io/blog/gitpod-for-opensource","loc":{"lines":{"from":96,"to":96}}}}],["405",{"pageContent":"For projects, communities and maintainers that use GitLab (or Bitbucket) or that are not in the above list please use this [application form](/for/opensource) to request an upgrade of your account to our complimentary professional open-source plan.","metadata":{"source":"https://www.gitpod.io/blog/gitpod-for-opensource","loc":{"lines":{"from":98,"to":98}}}}],["406",{"pageContent":"How do I know if my account has been pre-qualified?\n\nStart a Gitpod workspace then head to [your dashboard](https://gitpod.io/plans). If you don't have an account then you can create one by [starting any workspace (ie. such as Doom)](https://gitpod.io/#https://github.com/gitpod-io/doom). If you see “You are currently using the Professional Open Source plan” on [your dashboard](https://gitpod.io/plans) then your account has been upgraded.\n\n## How do I get started?\n\nYou can start your first Gitpod workspace by prefixing https://gitpod.io# to your project's source control address.\n\nFor example:\n\nhttps://github.com/gitpod-io/doom becomes https://gitpod.io#https://github.com/gitpod-io/doom","metadata":{"source":"https://www.gitpod.io/blog/gitpod-for-opensource","loc":{"lines":{"from":100,"to":110}}}}],["407",{"pageContent":"Recommended Reading\n\n- [https://www.gitpod.io/screencasts/getting-started-with-gitpod](/screencasts/getting-started-with-gitpod)\n- [https://www.gitpod.io/docs/configure/projects/prebuilds](/docs/configure/projects/prebuilds)\n- [https://www.gitpod.io/docs/configure/user-settings/dotfiles](/docs/configure/user-settings/dotfiles)\n- [https://www.gitpod.io/docs/references/gitpod-yml](/docs/references/gitpod-yml)\n\n## Anything else?\n\nEmail me at [geoff@gitpod.io](mailto:geoff@gitpod.io?subject=Gitpod%20for%20OSS). Happy hacking!\n\nps. If your open-source software appears in our bill of materials then Gitpod would like to unconditionally shout you [some beers](https://github.com/moby/buildkit/issues/2525) or [more](/blog/devxconf-wrap) as our way of saying thank-you. Thanks for reading 🧡","metadata":{"source":"https://www.gitpod.io/blog/gitpod-for-opensource","loc":{"lines":{"from":112,"to":123}}}}],["408",{"pageContent":"---\nauthor: csweichel, MrSimonEmms\ndate: Wed, 6 April 2022 16:00:00 UTC\nexcerpt: We at Gitpod believe in making developer experiences better, and we are super excited to introduce Gitpod Installer 🎉, which makes Gitpod installations a breeze!\nimage: teaser.png\nslug: gitpod-installer\ntags: [\"Engineering\", \"Gitpod updates\"]\nsubtitle:\nteaserImage: teaser.png\ntitle: Why we moved from Helm to Gitpod Installer\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\nWe at Gitpod believe in making developer experiences better, and we are super excited to introduce Gitpod Installer 🎉, which makes Gitpod installations a breeze!","metadata":{"source":"https://www.gitpod.io/blog/gitpod-installer","loc":{"lines":{"from":1,"to":17}}}}],["409",{"pageContent":"We at Gitpod believe in making developer experiences better, and we are super excited to introduce Gitpod Installer 🎉, which makes Gitpod installations a breeze!\n\nGitpod is available as a SaaS and self-hosted product. It is composed of many components working together in a Kubernetes cluster. You can install everything in a single cluster or place separate components in multiple clusters. Initially, we used Helm to orchestrate the installation, but our Helm charts became complicated over time. Hence, the new Gitpod Installer came into existence.","metadata":{"source":"https://www.gitpod.io/blog/gitpod-installer","loc":{"lines":{"from":17,"to":19}}}}],["410",{"pageContent":"The fault with our Helm charts\n\nIn the last couple of years, as we kept building more and more features for Gitpod, our Helm charts started accumulating a lot of logic with an ever-expanding configuration surface. It all quickly grew out of hand. The Helm charts `values.yaml` rose to 750 lines. Many of these were not configurations but necessities to workaround due to Helm limitations.","metadata":{"source":"https://www.gitpod.io/blog/gitpod-installer","loc":{"lines":{"from":21,"to":23}}}}],["411",{"pageContent":"To make the matter worse, we had many undocumented configuration values that we used only in production or core-dev but did not make sense for any other environment. The entirety of the Helm charts grew into a mammoth 7000 lines to accommodate all the variations. Helm charts are made from templated YAML using Go templates. At this scale, it was a tough job to maintain them. It became easy to make mistakes such as missing whitespaces and realising it much later while deploying and then spending hours spotting the root issue. Lack of editor support and static checks for Helm charts forced you to refer to the documentation often. All of this made it tedious to write Kubernetes configurations. It sometimes led to config drift between what your application expects and what Helm generated, leading to production outages.","metadata":{"source":"https://www.gitpod.io/blog/gitpod-installer","loc":{"lines":{"from":25,"to":25}}}}],["412",{"pageContent":"Gitpod Installer, the saviour\n\nWe started building the [Gitpod Installer](https://github.com/gitpod-io/gitpod/tree/main/install/installer) to make installation of Gitpod and maintenance of the installation scripts less painful. We wrote Gitpod Installer in Go, making it easier to manage, structure and reuse the code. Instead of dealing with YAML and templates, we deal with structs and functions which gets us type safety, runtime checks, and composition.\n\n<figure>\n\t<img src=\"/images/blog/gitpod-installer/gitpod-installer.png\" alt=\"Gitpod Installer\"/>\n\t<figcaption>Gitpod Installer</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/blog/gitpod-installer","loc":{"lines":{"from":27,"to":34}}}}],["413",{"pageContent":"User-centric Installation surface\n\nOne of the primary goals of the Gitpod Installer is to express the installation from the user's point of view. We want the Installer to reduce the knobs and switches the user has to encounter. Clever use of logic and abstractions in the Gitpod Installer helped us make the configuration much more expressive, and we could automatically deduce values for several technical configurations. It helped to reduce the configuration file from 750 lines to fewer than 50. It not only reduced the configuration surface but also removed the Helm specific hacks we had in place. In the ideal case, a user can generate a configuration, render the Kubernetes YAML and apply it to a cluster to get a Gitpod installer up and running in no time!","metadata":{"source":"https://www.gitpod.io/blog/gitpod-installer","loc":{"lines":{"from":36,"to":38}}}}],["414",{"pageContent":"Backwards compatibility to provide a clean update path\n\nWe chose to make the configuration file used by the Gitpod Installer carry an `apiVersion`. While loading the configuration, the Installer looks for the version and uses the corresponding loader. Each version contains its own set of validations, default settings and a migration path to higher versions. It allows us to introduce breaking changes in the configuration when needed while still providing compatibility and a migration path to configuration written for an older version.\nAchieving this is extremely difficult with Helm charts. We had to provide additional logic for backward compatibility on a best effort basis.","metadata":{"source":"https://www.gitpod.io/blog/gitpod-installer","loc":{"lines":{"from":40,"to":43}}}}],["415",{"pageContent":"Version Manifest\n\nA Gitpod installation is a collection of builds of numerous projects. The version manifest provides the bill-of-materials required to run a complete Gitpod installation for a particular release. It guarantees that a specific release of Gitpod always runs with a deterministic set of services and dependencies. We generate the version manifest during build time and embed it into the Gitpod Installer.\n\n#### Helm Dependency Integration\n\nGitpod also depends on several third-party dependencies such as Minio, MySQL and RabbitMQ. Instead of reimplementing all the services to fit into the Installer framework, we reuse the community maintained Helm charts. We embed the respective Helm charts into the Installer, and during installation, we provide the required values and render the templates in isolation just like `helm template` would do. It helps us to leverage the excellent work already done by the Helm community while retaining control over the installation process.","metadata":{"source":"https://www.gitpod.io/blog/gitpod-installer","loc":{"lines":{"from":45,"to":51}}}}],["416",{"pageContent":"Eliminate drift between installation and services\n\nWhile using Helm charts, everything was defined using templated YAML. The developer's responsibility was to make sure that the config generated by Helm was in sync with the configuration the application expected. There were no additional checks beyond this until the application tried to load the configuration during deployment. In the past, it has created instances of drift between the Helm generated configuration and the application expectations, leading to production outages.\n\nInstaller directly utilises the config structs of applications and structs defined in the Kubernetes API library. It helps enforce type safety that will catch any configuration drift during compile time. The structs also define validation, which helps validate the user-supplied configuration to help catch errors early.","metadata":{"source":"https://www.gitpod.io/blog/gitpod-installer","loc":{"lines":{"from":53,"to":57}}}}],["417",{"pageContent":"Separation of infrastructure and application concerns\n\nWe often merge the infrastructure and application concerns when we think of requirements. The requirements will vary per use-case for a product like Gitpod, which has both self-hosted and SaaS offerings. To isolate the requirements of application and infrastructure, the Installer performs validations separately. We have implemented infrastructure validations in Installer as cluster validations which checks whether the Kubernetes cluster meets all the requirements and has all dependencies required for Gitpod installation. We have defined configuration validations as the part of respective components, which checks the configuration separately while rendering or validating it.","metadata":{"source":"https://www.gitpod.io/blog/gitpod-installer","loc":{"lines":{"from":59,"to":61}}}}],["418",{"pageContent":"Scalability within the Gitpod organisation\n\nThe Gitpod Installer sits horizontally across all teams at Gitpod and it was built with scalability across teams in mind. The Installer comprises building blocks called components that are strongly cohesive and independent of others. Each component is responsible for managing a single service in the Gitpod installation. Teams take complete ownership of their respective components and are free to evolve along with their services.","metadata":{"source":"https://www.gitpod.io/blog/gitpod-installer","loc":{"lines":{"from":63,"to":65}}}}],["419",{"pageContent":"Technical differences from Helm charts\n\nWhile developing the Gitpod Installer, we made the decision to be opinionated at times to build something that just works. This allows us to provide our experience of running Gitpod SaaS to owners of self-hosted implementations. Being opinionated provides stability and keeps everything on a standards track. It reaps immense benefits while troubleshooting when something goes wrong. We enforced these decisions as validation constraints for the Gitpod Installer at config and cluster levels. These are some of the decisions we took,","metadata":{"source":"https://www.gitpod.io/blog/gitpod-installer","loc":{"lines":{"from":67,"to":69}}}}],["420",{"pageContent":"1. There can be only one installation per cluster which is due to\n   - Fixed node affinities for services.\n   - Fixed NodePorts for daemonsets.\n2. Fix replica counts for services.\n3. External helm dependencies are embedded, hence non-configurable. We chose to do this because it gives us confidence that Gitpod is always running against a dependency that we have validated (like a known MySQL/RabbitMQ version)\n4. Cert-manager is a required dependency for creating internal SSL certificates for components like the Docker registry as it eliminates manual cert renewal.\n5. The Installer requires external certificates to be provided as a Kubernetes secret (tls.key and tls.crt). By requiring just the secret to be present, it allows for users who want to user cert-manager to provide their certificates as well as those who want to provide their certificates via a specific certificate authority.","metadata":{"source":"https://www.gitpod.io/blog/gitpod-installer","loc":{"lines":{"from":71,"to":77}}}}],["421",{"pageContent":"Building Over Helm\n\nWhile building Gitpod, we have reused a lot of logic from Helm. We use the logic from `helm template render` to embed Helm charts for third-party dependencies and render them together with Installer components.\n\nWe also borrow the dependency sorting from Helm. Kubernetes objects have dependencies on each other and are best installed in a specific order. For example, if a secret changes after a pod has started, it will have the old value. Hence secret update needs to go before deployment. Since we also allow embedding Helm charts, we have no control over the generated YAML. To guarantee things work as expected, we parse and sort the generated YAML using the same strategy as Helm, which has been well-tested out.","metadata":{"source":"https://www.gitpod.io/blog/gitpod-installer","loc":{"lines":{"from":79,"to":83}}}}],["422",{"pageContent":"What is Next?\n\nGitpod Installer has improved the installation experience of Gitpod. It helped us elegantly overcome Helm's limitations while simplifying the orchestrating of a project as complex as Gitpod. Both Helm chart and Installer remain supported for the time being, and we aim to have feature parity between the both.","metadata":{"source":"https://www.gitpod.io/blog/gitpod-installer","loc":{"lines":{"from":85,"to":87}}}}],["423",{"pageContent":"---\nauthor: phimae, JohannesLandgraf\ndate: Tuesday, 02 Nov 2021 13:00:00 UTC\nexcerpt: We're launching our startup program to help you build great things without friction, for free.\nimage: gitpod-for-startups.png\nslug: gitpod-for-startups\nsubtitle:\nteaserImage: gitpod-for-startups.png\ntags: [\"Company building\", \"Gitpod updates\"]\ntitle: Introducing Gitpod for Startups\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n**TL;DR**\n\n- With “Gitpod for Startups”, we offer eligible companies a 50% discount for up to 2 years\n- Gitpod remains discounted, even as you scale your workload and your engineers\n- CDEs enable startups to build great things, faster\n\n> When building great things, the last thing you need is unnecessary friction that slows you down and diverts your focus. We understand that, we’re in the same boat ⛵️.","metadata":{"source":"https://www.gitpod.io/blog/gitpod-for-startups","loc":{"lines":{"from":1,"to":23}}}}],["424",{"pageContent":"> When building great things, the last thing you need is unnecessary friction that slows you down and diverts your focus. We understand that, we’re in the same boat ⛵️.\n\nWith Gitpod you'll improve your developer experience, morale and productivity to be able to focus more on what really matters: being creative and writing code.","metadata":{"source":"https://www.gitpod.io/blog/gitpod-for-startups","loc":{"lines":{"from":23,"to":25}}}}],["425",{"pageContent":"For startups, that’s even more important. Why?\n\nWell, to start with, there’s usually too much to do but not enough people (that’s normal). **But exactly because of that we need to focus on the things that create value** - and [spending hours per week](/blog/dev-env-as-code) to set up and maintain dev environments surely doesn’t.\n\nWith a cloud based developer environment like Gitpod you can on-board new colleagues in seconds and can collaborate efficiently: Share running workspaces for pair programming, use port forwarding or share a snapshot as a copy of your dev environment with teammates.\n\nYou’ll also likely work on features, bugs and PR reviews at the same time, but switching context usually is a hassle and time intensive task. With Gitpod, multi track programming is easy as you’re able to spin up multiple context-aware dev environments with a click. And close them when you’re done.","metadata":{"source":"https://www.gitpod.io/blog/gitpod-for-startups","loc":{"lines":{"from":27,"to":33}}}}],["426",{"pageContent":"It also enables your team to code from anywhere, on any device. Don’t worry about getting expensive laptops or source code security. This comes in handy as most companies are moving towards (hybrid) remote work, so even working from the road wouldn’t be a problem.\n\nThe fact that big tech companies like Google, Facebook or Shopify or are working on similar, internal solutions for remote development strongly leads just emphasizes the trend that in a few years from now, cloud based, ephemeral developer environments will be the norm.\n\nSo we think you'll benefit from saying goodbye to local development early on, which is why we are providing a 50% discount as part of our “Gitpod for Startups” program.","metadata":{"source":"https://www.gitpod.io/blog/gitpod-for-startups","loc":{"lines":{"from":35,"to":39}}}}],["427",{"pageContent":"The benefits\n\nUse Gitpod at a 50% discount for at least 1 year with unlimited users and usage. For your whole team, no matter how big you scale and how many engineers you hire during that time. If you’re affiliated with one of these [organisations](/for/startups/organisations), you’ll even get the benefits for 2 years.\n\n## Who is eligible?\n\nYour startup is eligible if it was founded less than 3y ago, has raised a maximum of $10m in capital and hasn’t been on a paid plan yet.\n\n## How do I apply?\n\nCheck out our [website](/for/startups) for more details and the link to the application form. Once you’re part of the program, you’ll get the chance for a personal onboarding call with our community engineers.\n\nWant to share program details with your colleagues or other startups? This [Notion page](https://bit.ly/Gitpod-for-startups-notion) might be handy.\n\nNote from authors: This blog post was updated on December 14, 2022 to reflect our updated pricing policy.","metadata":{"source":"https://www.gitpod.io/blog/gitpod-for-startups","loc":{"lines":{"from":41,"to":55}}}}],["428",{"pageContent":"---\nauthor: securitymirco\ndate: Thursday, 27 Oct 2022 11:00:00 UTC\nexcerpt: We are delighted to announce that Gitpod is officially SOC 2 Type II compliant effective today! 🚀\nimage: teaser.webp\nslug: gitpod-is-soc-2-type-ii-compliant\nteaserImage: teaser.webp\ntags: [\"Gitpod updates\", \"Company building\"]\ntitle: Gitpod is SOC 2 Type II compliant\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\nWe are delighted to announce that Gitpod is officially SOC 2 Type II compliant effective today 🥳. From the very beginning this has been a team effort. It involves every part of our organization, which is committed to continuously improve our security posture by designing, implementing and maintaining appropriate controls.\n\nInterested in the details? 🕵️‍♂️ You can request a copy of our report by submitting our [contact form](https://www.gitpod.io/contact/sales) and signing a non-disclosure agreement.","metadata":{"source":"https://www.gitpod.io/blog/gitpod-is-soc-2-type-ii-compliant","loc":{"lines":{"from":1,"to":18}}}}],["429",{"pageContent":"What was SOC 2 again?\n\nSOC 2 is the “golden standard” of security frameworks based on the [Trust Services Criteria](https://us.aicpa.org/content/dam/aicpa/interestareas/frc/assuranceadvisoryservices/downloadabledocuments/trust-services-criteria.pdf) maintained by the [American Institute of Certified Public Accountants (AICPA)](https://www.aicpa.org/). It defines criteria for managing customer data and is well-recognized among companies across the globe 🌍. For many, SOC 2 compliance is the requirement before considering a new vendor.\n\nSOC 2 shares similarities to [ISO 27001](https://www.iso.org/isoiec-27001-information-security.html), and comes with a top-down approach to implement security policies/technical controls that cover aspects of encryption, information handling, vulnerability and risk management as well as incident response, and business continuity.","metadata":{"source":"https://www.gitpod.io/blog/gitpod-is-soc-2-type-ii-compliant","loc":{"lines":{"from":20,"to":24}}}}],["430",{"pageContent":"Type I audits focus on one specific point in time while Type II audits capture a period of 6-12 months while also considering the effectiveness of controls. We skipped Type I in favor of a Type II as we know this would provide better assurance to you about our security program. 🚀","metadata":{"source":"https://www.gitpod.io/blog/gitpod-is-soc-2-type-ii-compliant","loc":{"lines":{"from":26,"to":26}}}}],["431",{"pageContent":"Gitpod Security Program\n\nWe acknowledge the relevance of providing a secure product and hence go beyond the scope of SOC 2 in protecting customer data and strive to improve everyday. In the following we want to highlight some key-aspects of our security program:\n\n👀 Gitpod is Open Source - ensuring [more transparency](https://www.gitpod.io/blog/opensource) and eyes on the code to spot issues\n\n☁️ Gitpod is 100% cloud based - storage, computing resources and physical security measures are provided by the [Google Cloud Platform (GCP)](https://cloud.google.com/security/compliance)\n\n📦 Gitpod workspaces are isolated - each workspace operates in their own set of Linux namespaces, so that they cannot interfere with each other\n\n🧰 Gitpod integrates with best-in-breed solutions such as [Tailscale](https://tailscale.com/) - to provide the best possible user experience and [secured access to remote development environments](https://www.gitpod.io/blog/tailscale)","metadata":{"source":"https://www.gitpod.io/blog/gitpod-is-soc-2-type-ii-compliant","loc":{"lines":{"from":28,"to":38}}}}],["432",{"pageContent":"🔑 Gitpod is passwordless - authentication to Gitpod is established via OAuth with code repositories like GitHub, GitLab and Bitbucket\n\n🔒 Data is encrypted - during transit (TLS 1.2 or above) and at rest (AES 256)\n\n✔️ Artifact provenance - Gitpod artifacts produce [SLSA Level 1 compliant provenance](https://www.gitpod.io/blog/securing-the-software-supply-chain-at-gitpod-with-slsa) allowing you to understand what went into our builds\n\n📢 Vulnerability Disclosure - we encourage feedback from Security Researches to help improve our security https://www.gitpod.io/security/report\n\n👮‍♂️ Security Governance - we continuously monitor our environment to detect and respond to emerging threats","metadata":{"source":"https://www.gitpod.io/blog/gitpod-is-soc-2-type-ii-compliant","loc":{"lines":{"from":40,"to":48}}}}],["433",{"pageContent":"Last but not least\n\nWant to find out more? Visit our [Security Website](https://www.gitpod.io/security) or [reach out to us](https://www.gitpod.io/contact) anytime. We are thrilled for what comes next in an ever evolving landscape 🚀","metadata":{"source":"https://www.gitpod.io/blog/gitpod-is-soc-2-type-ii-compliant","loc":{"lines":{"from":50,"to":52}}}}],["434",{"pageContent":"---\nauthor: JohannesLandgraf, akosyakov, loujaybee\ndate: Thursday, 28 April 2022 11:00:00 UTC\nexcerpt: Gitpod and JetBrains announce partnership and deep product integration to bring remote development to developers around the world\ntags: [\"Company building\"]\nslug: gitpod-jetbrains\nteaserImage: teaser.jpg\nimage: teaser.jpg\ntitle: Gitpod x JetBrains join forces to solve 'works on my machine' problem\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n<script>\n  import Quotes from \"$lib/components/blog/gitpod-jetbrains-quotes.svelte\";\n</script>\n\n**TL;DR**","metadata":{"source":"https://www.gitpod.io/blog/gitpod-jetbrains","loc":{"lines":{"from":1,"to":20}}}}],["435",{"pageContent":"<script context=\"module\">\n  export const prerender = true;\n</script>\n\n<script>\n  import Quotes from \"$lib/components/blog/gitpod-jetbrains-quotes.svelte\";\n</script>\n\n**TL;DR**\n\n- [Gitpod and JetBrains announce partnership and deep product integration](https://blog.jetbrains.com/blog/2022/02/24/jetbrains_partners_with_gitpod/) to bring remote development to developers around the world\n- Starting today professional software engineers can work in reproducible developer environments provisioned by Gitpod using their favorite desktop IDE from JetBrains including IntelliJ IDEA, PyCharm, GoLand, and PhpStorm\n- Gitpod is the first 3rd party service that is natively integrated into JetBrains Gateway for a seamless remote development experience\n- Benefit from improved developer experience, security, and collaboration while keeping the local editing experience with all shortcuts, keybindings and themes\n- Skip the talking and [get started now](https://www.gitpod.io/docs/integrations/jetbrains-gateway)","metadata":{"source":"https://www.gitpod.io/blog/gitpod-jetbrains","loc":{"lines":{"from":20,"to":34}}}}],["436",{"pageContent":"Since we started the company, we never wanted to be in the IDE or editor business. In fact, we are quite allergic to people thinking Gitpod is an _online or web IDE_. Gitpod is an open-source orchestration and provisioning platform for automated developer environments.\n\n> **The goal has always been to integrate Gitpod with all editing experiences as soon as they support remote development - independent of the operating system (Windows, MacOS, Linux, Browser).**\n\nToday we are making a big step towards that goal.\n\n<Quotes />\n\n![03](../../../static/images/blog/gitpod-jetbrains/03.jpg)","metadata":{"source":"https://www.gitpod.io/blog/gitpod-jetbrains","loc":{"lines":{"from":36,"to":44}}}}],["437",{"pageContent":"Keep your tools, just automate them\n\nIf you look at professional software development, JetBrains IDEs remain the gold standard when it comes to programming language intelligence and tooling smartness. This holds true across all major programming languages. Period. Their depth and attention to detail is something we have always admired at Gitpod. We are not alone in this. The number one feature request of our larger customers is to connect their locally running JetBrains IDEs to automated Gitpod workspaces running in the cloud.","metadata":{"source":"https://www.gitpod.io/blog/gitpod-jetbrains","loc":{"lines":{"from":46,"to":48}}}}],["438",{"pageContent":"We now seamlessly integrate and bundle with their standalone Gateway application. This means we run an instance of your favourite JetBrains IDE on your Gitpod developer environment. All indexing, compiling and language processing happens in the cloud, while a thin client runs locally and provides the rich user experience you are already familiar with from your desktop IDE. To enable this experience we have internally built a [SSH gateway](https://www.gitpod.io/blog/copy-paste-ssh-workspace-access) (which also makes our vim and emacs users happy), re-designing our loading screen and expanding our [/preferences](https://gitpod.io/preferences) to enable both Desktop and Browser based workflows. The result is available in today's beta release.","metadata":{"source":"https://www.gitpod.io/blog/gitpod-jetbrains","loc":{"lines":{"from":50,"to":50}}}}],["439",{"pageContent":"With our native Gitpod integration in JetBrains Gateway application, professional software developers can connect ephemeral developer environments provisioned by Gitpod to their favorite desktop IDE from JetBrains without any friction. Think power of the cloud including all developer experience, security, and collaboration benefits paired with the world's best professional IDEs.\n\n![01](../../../static/images/blog/gitpod-jetbrains/01.jpg)","metadata":{"source":"https://www.gitpod.io/blog/gitpod-jetbrains","loc":{"lines":{"from":52,"to":54}}}}],["440",{"pageContent":"Entering the era of remote development\n\nIn August last year, [we shipped a cake to GitHub for their Codespaces launch](https://www.gitpod.io/blog/cake) 🎂. With today's announcement and product partnership, our industry reached a tipping point in the adoption curve of remote development. The large majority of the IDE/editing market now has built-in functionality to connect to developer environments running in the cloud. Keep the editing experience you are used to from your desktop IDE/editor/terminal including all your shortcuts, keybindings and themes that your muscle memory got used to.\n\nTake a step back and look at the benefits which led [companies such as Google, Facebook, LinkedIn and Shopify to move software development to the cloud](https://gitpod.notion.site/Gitpod-Adoption-Stage-1-Educate-ed7b95be23e244c388e46fa3596ff2f5) and form the basis of our [purpose](https://www.notion.so/gitpod/Gitpod-s-Direction-be35d064c0704fbda61c542b84e07ef6):","metadata":{"source":"https://www.gitpod.io/blog/gitpod-jetbrains","loc":{"lines":{"from":56,"to":60}}}}],["441",{"pageContent":"- **Better developer experience**. Automated setup with cloud-based, remote developer environments connected with a developer’s editing experience of choice. This means developers no longer have to endure nerve-wracking set-up and maintenance of local developer environments. Start coding and get creative with one click - with the tools you are most productive with\n\n- **Efficient multi-track development**. Have multiple workspaces with different configurations open at once - one for your feature, one for reviewing a PR/MR, or one for a bug.\n\n- **Remove the ‘works on my machine’ discussion**. Always start from a clean state - the end of all \"works on my machine\" situations due to long-living stateful environments. Spin up a workspace, code, push your code, and forget about it. For your next task, you’ll use a fresh dev environment. Onboard new developers with one click.","metadata":{"source":"https://www.gitpod.io/blog/gitpod-jetbrains","loc":{"lines":{"from":62,"to":66}}}}],["442",{"pageContent":"- **Securing our software supply chain**. No packages or dependencies are downloaded to users' devices. Developer environments run in the cloud and are short-lived, protecting your local machines and other company resources from malicious attacks through execution of arbitrary code.\n\n- **Power of the cloud**. Don't bother upgrading your developer's machine, with cloud-based, remote development the data center becomes your computer.\n\n- **Bringing developer environments closer to production**. Gitpod provisions powerful Linux containers under the hood. Workloads running on production are for a large part similarly running in containers on Linux. One operating system for both development and production.\n\n![02](../../../static/images/blog/gitpod-jetbrains/02.jpg)","metadata":{"source":"https://www.gitpod.io/blog/gitpod-jetbrains","loc":{"lines":{"from":68,"to":74}}}}],["443",{"pageContent":"Getting started in 5 minutes\n\nIf you are interested in setting up a new Spring Boot project using Gitpod and JetBrains Gateway we wrote a [detailed guide together with JetBrains](https://www.gitpod.io/guides/set-up-spring-boot-application-remotely-with-gitpod-and-jetBrains-gateway). If you want to start your own project with Gitpod in your JetBrains IDE read on or refer to our [documentation](https://www.gitpod.io/docs/integrations/jetbrains-gateway).\n\n`youtube: 8djaRYT2FAY`","metadata":{"source":"https://www.gitpod.io/blog/gitpod-jetbrains","loc":{"lines":{"from":76,"to":80}}}}],["444",{"pageContent":"`youtube: 8djaRYT2FAY`\n\n1. **Install [JetBrains Gateway](https://www.jetbrains.com/help/idea/remote-development-a.html#gateway)**\n2. **Install the [Gitpod plugin](https://plugins.jetbrains.com/plugin/18438-gitpod-gateway)** - Open JetBrains Gateway and you'll see the Gitpod logo on the main page. Simply click \"install\" to install the Gitpod plugin within JetBrains Gateway.\n3. **Update your [Gitpod preferences](https://gitpod.io/preferences)** - Select your preferred JetBrains IDE on the Gitpod preferences page to set your default IDE for future Gitpod workspace starts.\n4. **Start (or restart) your workspace** - Either start a workspace directly from within the JetBrains Gateway via the Gitpod plugin OR open a new workspace directly in Gitpod where on workspace start you will be prompted to open your preferred JetBrains IDE for that workspace. That's it.","metadata":{"source":"https://www.gitpod.io/blog/gitpod-jetbrains","loc":{"lines":{"from":80,"to":85}}}}],["445",{"pageContent":"To guide you and your team through the different adoption phases towards remote software development, other engineering organisations found the following resources helpful:\n\n- [Customer Stories](https://www.gitpod.io/customers)\n- [Gitpod Adoption Stage 1 - Educate](https://www.notion.so/gitpod/Gitpod-Adoption-Stage-1-Educate-ed7b95be23e244c388e46fa3596ff2f5)\n- [Gitpod Adoption Stage 2 - Configure](https://www.notion.so/gitpod/Gitpod-Adoption-Stage-2-Configure-a02f77be08df452a90cef00fb2d1edac)\n- [Gitpod Adoption Stage 3 - Develop](https://www.notion.so/gitpod/Gitpod-Adoption-Stage-3-Develop-1340c1a8740a42118a68dc005a45d701)\n\nAnd if you haven't done so join our active Discord community - we are here to help! [www.gitpod.io/chat](http://www.gitpod.io/chat)\n\n&nbsp\n\n![05](../../../static/images/blog/gitpod-jetbrains/05.jpg)","metadata":{"source":"https://www.gitpod.io/blog/gitpod-jetbrains","loc":{"lines":{"from":87,"to":98}}}}],["446",{"pageContent":"DevX Conf on May 2-3rd\n\nIn case you are interested in learning more about remote development, next week we are hosting [devxconf.org](https://devxconf.org/), a virtual & free conference focused around making developers happier/more productive. The first panel will discuss all things [remote development](https://devxconf.org/schedule) and will include folks from JetBrains and Gitpod.","metadata":{"source":"https://www.gitpod.io/blog/gitpod-jetbrains","loc":{"lines":{"from":100,"to":102}}}}],["447",{"pageContent":"---\nauthor: svenefftinge\ndate: Mon Apr 5 2019 15:00:00 GMT+0000 (UTC)\nexcerpt: Every day developers waste millions of hours switching contexts between projects and branches, setting up developer environments, or\nimage: teaser-launch-min.jpg\nslug: gitpod-launch\nsubtitle: No Setup, Less Waiting, More Flow\nteaserImage: teaser-launch-min.jpg\ntags: [\"Gitpod updates\"]\ntitle: Introducing Gitpod — Frictionless Coding on GitHub\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\nEvery day developers waste millions of hours switching contexts between projects and branches, setting up developer environments, or simply waiting for builds to complete.\n\nThis friction is not only time consuming but is a serious barrier for contributors. Reading through a long list of setup instructions and messing up your own laptop is just too much effort.","metadata":{"source":"https://www.gitpod.io/blog/gitpod-launch","loc":{"lines":{"from":1,"to":19}}}}],["448",{"pageContent":"This friction is not only time consuming but is a serious barrier for contributors. Reading through a long list of setup instructions and messing up your own laptop is just too much effort.\n\nToday, we are happy to announce the launch of [Gitpod.io](https://gitpod.io), an online service that provides disposable, ready-to-code developer environments for GitHub projects.","metadata":{"source":"https://www.gitpod.io/blog/gitpod-launch","loc":{"lines":{"from":19,"to":21}}}}],["449",{"pageContent":"One-Click Dev Environments for GitHub\n\nHere's how Gitpod works: You are on GitHub and want to start working on a project. Instead of going through the manual setups, etc. you simply click a button to start a ready-to-code dev environment in your browser. You can now code, review, or just try out the project. Once you are done you simply close the tab.\n\n![Gitpod button added by Gitpod browser extension](../../../static/images/blog/gitpod-launch/browser-ext.png)\n\nDon’t see the button on GitHub yet? You need to [install a small browser extension](/docs/configure/user-settings/browser-extension) to get it. Alternatively, you can just prefix any GitHub URL with “[gitpod.io/#](https://gitpod.io/#)”.\n\nYou can try Gitpod right now. It's free for public repositories.","metadata":{"source":"https://www.gitpod.io/blog/gitpod-launch","loc":{"lines":{"from":23,"to":31}}}}],["450",{"pageContent":"No Setup\n\nNot all projects are equal. We maintain a [developer friendly Docker image](https://github.com/gitpod-io/workspace-images/blob/d43c719bb2ff7b6849c0456fe21e3ca06c20168f/dazzle.yaml#L18-L32) that includes all the commonly used tools and version managers. But you can point to your own Docker image in a **.gitpod.yml** file. Gitpod will pick it up and even build the image if needed. Read [Gero's post](/blog/docker-in-gitpod) for more details.\n\nWith Gitpod, contributors don’t need to go through a list of usually outdated setup instructions. Instead, they get exactly what they need for the project at hand with no additional effort. As a side-effect, any \"works-on-my-machine\" scenarios are eliminated, because every team member uses the same working setup on the same kind of machine in the cloud. Since the **.gitpod.yml** is versioned with the code, going back to old releases and branches becomes super easy, too. We call this [dev environment as code](/blog/dev-env-as-code).","metadata":{"source":"https://www.gitpod.io/blog/gitpod-launch","loc":{"lines":{"from":33,"to":37}}}}],["451",{"pageContent":"To optimize the experience, the **.gitpod.yml** accepts [further configuration](/docs/configure), where you can automatically start builds, watchers and dev servers in multiple terminals. You can configure how they appear in the IDE layout and hook up all your web ports and previews.\n\nAs a project owner you should do everything you can to streamline the experience for contributors, so everybody including yourself can focus on being creative and writing code. Gitpod lets you automate the setup and make sure developers can access a dev environment that really is ready to code.\n\nA great example is [ssloy's tinyraytracer project](https://github.com/ssloy/tinyraytracer/wiki). It's a tutorial for raytracing in C++ and is configured so it runs the build and automatically opens the rendered graphics. The author has even added Gitpod buttons to individual steps in the tutorial to make following along easier.\n\n![Tinyraytracer Gitpod workspace](../../../static/images/blog/gitpod-launch/tinyrt.png)","metadata":{"source":"https://www.gitpod.io/blog/gitpod-launch","loc":{"lines":{"from":39,"to":45}}}}],["452",{"pageContent":"Less Waiting\n\nThere is an additional bit of friction that every developer has to go through regularly:\n\nRunning the build and downloading dependencies.\n\nStarting today, <a class=\"no-nowrap\" href=\"https://github.com/apps/gitpod-io\">the new Gitpod app is available on the GitHub marketplace</a>. It is the first of its kind and the only one in the new IDE category.\n\nOnce you've installed the app for your GitHub repository, it will pre-build dev environments on every commit. So when anybody opens a Gitpod environment on your project, the dev environment is opened as described above. But now also the build ran through and all dependencies are already there.\n\nWe call this feature prebuilt workspaces and you can read more about it in [Chris' post](/blog/prebuilds).\n\n![Prebuilt Workspaces](../../../static/images/blog/gitpod-launch/prebuilt-workspaces.png)","metadata":{"source":"https://www.gitpod.io/blog/gitpod-launch","loc":{"lines":{"from":47,"to":59}}}}],["453",{"pageContent":"More Flow\n\nYour dev environment opens differently depending on the GitHub page you are coming from. You can, for instance, open branches or files by simply going to the respective GitHub page and pressing the button (or prefixing the URL) there.\n\nWhen coming from an issue, Gitpod understands you want to fix it, so you’ll get a fresh local branch and the commit message is prepared with a reference to the issue.\n\nStarting a workspace from a pull request will open in code-review mode. The list of changes is opened on the left so you can easily go through them and view the details in diff editors on the right. Of course, you can comment within the IDE and even submit your code review.\n\nEven if you prefer your local machine for development, being able to do [deep code reviews](/blog/when-code-reviews-lgtm) in a browser is a great way to improve your workflow.\n\n![Inlined Code Review](../../../static/images/blog/gitpod-launch/inline-comments.png)","metadata":{"source":"https://www.gitpod.io/blog/gitpod-launch","loc":{"lines":{"from":61,"to":71}}}}],["454",{"pageContent":"A Complete IDE Running in the Cloud\n\nWhile Gitpod keeps the convenience and accessibility of online coding playgrounds and sandboxes, it is not a toy but a complete dev environment running in the cloud.\n\nWe teamed-up with Google, Ericsson, Arm and Red Hat to develop the open-source project [Eclipse Theia](https://theia-ide.org). The project puts [VS Code](https://code.visualstudio.com/)’s state-of-the-art technology and UX into the browser based on an extensible architecture that is optimized for the cloud.\n\nGitpod already comes with several VS Code extensions pre-installed (such as Go support from Microsoft’s own extension). We will be adding more popular VS Code extensions shortly, and later allow users to define any extensions they want.","metadata":{"source":"https://www.gitpod.io/blog/gitpod-launch","loc":{"lines":{"from":73,"to":79}}}}],["455",{"pageContent":"In addition to one of the best code editors, Gitpod environments provide full featured terminals backed by Linux containers running in the cloud. As a result, you get the same command line tools you would use locally together with the hottest IDE tech available today. And all of that in a browser tab.","metadata":{"source":"https://www.gitpod.io/blog/gitpod-launch","loc":{"lines":{"from":81,"to":81}}}}],["456",{"pageContent":"Collaboration\n\nGitpod comes with two major features supporting collaboration.\n\n- [Sharing running dev environments](/docs/configure/workspaces/collaboration) with other users comes in handy if you want to look at code with a colleague to hunt down a bug together or do some pair programming. Collaborators will see the same code you see and even the terminals are synced and shared.\n\n- [Snapshots](/blog/workspace-snapshots) are useful in many ways. In a nutshell, they allow taking an immutable copy of your dev environment at any point in time. You can share the provided link wherever you want. Users opening such a snapshot link will get an exact clone of the environment including all state and even UI layout. This feature is great for sharing reproducibles in issues, but also good for blog posts or solutions on Stack Overflow.\n\n![Collaboration: Share Running Workspace or Snapshot](../../../static/images/blog/gitpod-launch/collaboration.png)","metadata":{"source":"https://www.gitpod.io/blog/gitpod-launch","loc":{"lines":{"from":83,"to":91}}}}],["457",{"pageContent":"Pricing\n\nAn important part of leaving the beta was to find a good pricing model that addresses the needs for the various user groups.\n\nWe think we have found a good balance by providing the following individual subscription options:\n\n- a **free 100-hour per month plan** for open-source development\n- a **paid 100-hour per month plan** for individuals working privately\n- a **paid unlimited plan** for professional use\n\n_(I know some of you are lucky enough to do professional open-source. Decide what works best for you in that case ;-))_\n\nWe also offer **team subscriptions**, which allow managers to buy a batch of seats and assign them to the team.","metadata":{"source":"https://www.gitpod.io/blog/gitpod-launch","loc":{"lines":{"from":93,"to":105}}}}],["458",{"pageContent":"Thank You ❤️\n\nI want to take the opportunity to thank all the people who have helped to make Gitpod a reality: all the [enthusiastic](https://twitter.com/JeremyJaydan/status/1096742668137246721) [early](https://twitter.com/RalfDMueller/status/1054079167841660928) [adopters](https://twitter.com/doppelganger9/status/1088926330857680896) who provided [great feedback](https://github.com/gitpod-io/gitpod/issues) during the beta phase; contributors who have helped by identifying bugs and by sharing their use cases; and of course the [Eclipse Theia community](https://github.com/theia-ide/theia/graphs/contributors) working with passion on an open-source IDE platform for the future.\n\nFurthermore, I want to thank Michael Bernstein from [Reify](https://www.reifyworks.com/) for clarifying our messaging with us and Kelly Fitzpatrick and the rest of the [Redmonk](https://redmonk.com/) team for their guidance and helpful feedback.","metadata":{"source":"https://www.gitpod.io/blog/gitpod-launch","loc":{"lines":{"from":107,"to":111}}}}],["459",{"pageContent":"Finally, of course, I want to send a big shout out to my friends at [TypeFox](https://www.typefox.io/about/). You are absolutely awesome and being able to work with you on such a great product is everything I want.","metadata":{"source":"https://www.gitpod.io/blog/gitpod-launch","loc":{"lines":{"from":113,"to":113}}}}],["460",{"pageContent":"---\nauthor: ghuntley\ndate: Monday, 26 Apr 2021 11:00:00 UTC\nexcerpt: The truth is free software isn't free. Hours have rates. Rates require payment. What if the high achievers that our digital society is built upon were empowered to become independent artists?\nimage: teaser.jpg\nslug: gitpod-open-source-sustainability-fund\nsubtitle:\nteaserImage: teaser.jpg\ntags: [\"Gitpod updates\"]\ntitle: Gitpod Open-Source Sustainability Fund\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\nThe myriad of tools relied upon by developers every day is built and maintained almost exclusively by unpaid volunteers. The maintainers of open-source projects - our digital infrastructure - are in desperate need of support. Because code is less charismatic than a hit YouTube video or Kickstarter campaign, there is little public awareness and appreciation for this work.","metadata":{"source":"https://www.gitpod.io/blog/gitpod-open-source-sustainability-fund","loc":{"lines":{"from":1,"to":17}}}}],["461",{"pageContent":"Open-source, by design, is not financially sustainable. Finding reliable, well-defined funding sources is exceptionally challenging. As projects grow in size, many maintainers burn-out, find themselves unable to satisfy increasing support/maintenance demands and, unfortunately, in my particular case, <a href=\"https://ghuntley.com/a-new-chapter\">irrevocably harm their marriage</a>.\n\n<a href=\"https://twitter.com/freakboy3742\">Russell Keith-Magee</a> delivered this beautiful keynote at PyCon, which captures the essence better than I can put in writing because it is such a personal topic.\n\n`youtube: 0t85TyH-h04`\n\nMuch has changed since Russells' keynote and the infrastructure to financially support open-source maintainers now exists thanks to the efforts of Open Collective and GitHub Sponsors.","metadata":{"source":"https://www.gitpod.io/blog/gitpod-open-source-sustainability-fund","loc":{"lines":{"from":19,"to":25}}}}],["462",{"pageContent":"Shape the future you want to live in\n\nThe truth is free software isn't free. How much is a task going to cost in person hours? Hours have rates. Rates require payment. Yet, an entire community of developers provide their services outside of their day job to produce tools consumed by businesses.\n\nDid you know there are less than 2100 people in the inner GitHub open-source maintainer community?\n\n![Maintainer Community](../../../static/images/blog/gitpod-open-source-sustainability-fund/maintainer-community.png)\n\n**I often wonder what the future would look like if these high achievers that our digital society is built upon were empowered to become independent artists.** If just one of those people can help more people better understand a technology or improve the developer experience for an entire ecosystem what is the worth/value of that and why isn't our industry doing that yet?\n\nThe word volunteer, by definition, means those who have the ability and time to give freely.","metadata":{"source":"https://www.gitpod.io/blog/gitpod-open-source-sustainability-fund","loc":{"lines":{"from":27,"to":37}}}}],["463",{"pageContent":"The word volunteer, by definition, means those who have the ability and time to give freely.\n\nPaying for resources that are being consumed broadens the list of people who can do open-source. Additionally, money enables open-source maintainers to buy services and outsource the activities that do not bring them joy.\n\n![Money enables diversity](../../../static/images/blog/gitpod-open-source-sustainability-fund/teaser.jpg)\n\nAt Gitpod, we firmly believe that working for an open-source project should be a legitimate alternative to a career working for a for-profit corporation. Additionally, we'd like everyone to be able to maintain open-source projects, not just people with the right financial background or youth that enables the ability to volunteer.","metadata":{"source":"https://www.gitpod.io/blog/gitpod-open-source-sustainability-fund","loc":{"lines":{"from":37,"to":43}}}}],["464",{"pageContent":"Actions speak louder than words\n\nToday we are announcing five things:\n\n### Open Source Sustainability Fund\n\nGitpod has created an open-source sustainability fund and allocated an _initial_ amount of USD 30,000 towards securing our open-source supply chain by paying open-source maintainers.\n\n### $1 for each new community member\n\nFor every registration to our newly created <a href=\"https://www.gitpod.io/chat\">discord channel</a> during the next month we’ll donate an additional $1 to open-source projects we depend upon.\n\n### DevX Conf\n\nThe upcoming (<a href=\"https://devxconf.org/\">28th of April from 5pm CEST</a>) non-profit conference on developer experience - DevX Conf will donate all surplus and USD 500 for each Gold Sponsor to open-source projects. Additionally attendees of the conference will have a say how an additional USD 10,000 in open-source funding will be distributed between open-source projects that are unseen digital infrastructure.","metadata":{"source":"https://www.gitpod.io/blog/gitpod-open-source-sustainability-fund","loc":{"lines":{"from":45,"to":59}}}}],["465",{"pageContent":"Build in the open\n\nOver the coming months, Gitpod will share our experiences with funding open-source projects for other companies to follow and share insights for maintainers who wish to become financially independent.\n\n### Democratize contributions\n\nWe recognise that money <a class=\"no-nowrap\" href=\"https://www.youtube.com/watch?v=Mm_RuObpeGo\">isn't the only way to resolve open-source sustainability</a>. Often the problem is access and the initial project setup friction. To address this Gitpod has made <a href=\"/for/opensource\">Gitpod free for open-source communities</a> so that open-source maintainers can onboard new contributors to their project with standardized developer environments. With Gitpod people from all over the world can contribute from any device without the typical $3,000 Macbook Pro barrier to entry.","metadata":{"source":"https://www.gitpod.io/blog/gitpod-open-source-sustainability-fund","loc":{"lines":{"from":61,"to":67}}}}],["466",{"pageContent":"It's time to start giving back\n\nOver the last couple months Gitpod has been emailing maintainers of dependencies that Gitpod consumes (<a href=\"https://github.com/gitpod-io/gitpod/blob/main/License.third-party.npm.txt\">npm</a>/<a href=\"https://github.com/gitpod-io/gitpod/blob/main/License.third-party.go.txt\">golang</a>/<a href=\"https://github.com/gitpod-io/workspace-images/blob/master/base/Dockerfile\">Docker</a>) and asking them to get themselves signed up into the GitHub Sponsors or Open Collective programs.\n\nIf you appear in our bill of materials then Gitpod would like to unconditionally shout you some beers, some nice food or more as our way of saying thank-you for helping make Gitpod possible.\n\n![Funding Open-Source Projects Email](../../../static/images/blog/gitpod-open-source-sustainability-fund/email.png)","metadata":{"source":"https://www.gitpod.io/blog/gitpod-open-source-sustainability-fund","loc":{"lines":{"from":69,"to":75}}}}],["467",{"pageContent":"![Funding Open-Source Projects Email](../../../static/images/blog/gitpod-open-source-sustainability-fund/email.png)\n\nI hope more companies will follow Gitpod's lead and do this simple act en masse because maintainers must have income diversity because diversity creates a freedom that enables roadmap and project independence.\n\n![Thank-you for sponsoring tweet](../../../static/images/blog/gitpod-open-source-sustainability-fund/thank-you-tweet.png)\n\nIf you are a maintainer of an open-source project, then there's one simple, easy step you can do to enable Gitpod and other companies to provide financial support...\n\nGo sign up to <a href=\"https://github.com/sponsors\">GitHub Sponsors</a> or <a href=\"https://www.opencollective.com\">Open Collective</a> as sending hand crafted emails asking you to signup isn't scalable and most companies would not do this manual grunt work. 😉","metadata":{"source":"https://www.gitpod.io/blog/gitpod-open-source-sustainability-fund","loc":{"lines":{"from":75,"to":83}}}}],["468",{"pageContent":"Think ahead, secure your supply chain.\n\nNadia Eghbal, in 2016 with the support of the Ford Foundation, authored an <a href=\"https://www.fordfoundation.org/work/learning/research-reports/roads-and-bridges-the-unseen-labor-behind-our-digital-infrastructure/\">extensive report</a> into the unseen labour behind our digital infrastructure. She recently published the successor of the report: <a class=\"no-nowrap\" href=\"https://www.amazon.com.au/Working-Public-Making-Maintenance-Software/dp/0578675862\">Working in Public: The Making and Maintenance of Open Source Software</a>. If you haven't read her work before, then start there.\n\n![Credit: XKCD](../../../static/images/blog/gitpod-open-source-sustainability-fund/xkcd.png)\n_Credit: [XKCD](https://xkcd.com/2347/)_","metadata":{"source":"https://www.gitpod.io/blog/gitpod-open-source-sustainability-fund","loc":{"lines":{"from":85,"to":90}}}}],["469",{"pageContent":"![Credit: XKCD](../../../static/images/blog/gitpod-open-source-sustainability-fund/xkcd.png)\n_Credit: [XKCD](https://xkcd.com/2347/)_\n\nEghbal, in her work outlines, digital infrastructure should be treated as a necessary public good. Free public source code makes it exponentially cheaper and easier for companies to build software and makes technology more accessible across the globe. However, there is a common misconception that the labour for open source projects is well-funded. In reality, it is largely created and maintained by volunteers who do it to build their reputations, out of a sense of obligation or simply as a labour of love.\n\nThe thing about open-source software that's too often forgotten, it's AS-IS, no exceptions. There is absolutely no SLA. That detail is right there in the license!\n\n**In business terms, open-source maintainers are unpaid and unsecured vendors.**","metadata":{"source":"https://www.gitpod.io/blog/gitpod-open-source-sustainability-fund","loc":{"lines":{"from":90,"to":97}}}}],["470",{"pageContent":"**In business terms, open-source maintainers are unpaid and unsecured vendors.**\n\nGitpod hopes other companies will also start taking steps to mitigate this critical risk in their technology stack. In future blog posts, we will be sharing our experiences with funding open-source projects and insights for maintainers who wish to become financially independent.","metadata":{"source":"https://www.gitpod.io/blog/gitpod-open-source-sustainability-fund","loc":{"lines":{"from":97,"to":99}}}}],["471",{"pageContent":"Towards a maintainer economy\n\nHere is what you can do today:\n\n<ol>\n    <li>\n      <span>1- </span>Generate the bill of materials in your commercial software.\n    </li>\n    <li>\n      <span>2- </span>Identify whom your unpaid vendors are.\n    </li>\n    <li>\n      <span>3- </span>Mitigate your supply chain risks.\n    </li>\n</ol>\n\nIn practice, this involves going through each one of your projects in your dependency tree and deciding on the appropriate strategy for that particular dependency.\n\nGitpod has plenty of smaller dependencies for doing activities such as parsing TOML. As that dependency isn't of strategic importance, the strategy to mitigate the risk would be to fund the project.\n\n![Open-source supply chain decision tree](../../../static/images/blog/gitpod-open-source-sustainability-fund/decision-tree.png)","metadata":{"source":"https://www.gitpod.io/blog/gitpod-open-source-sustainability-fund","loc":{"lines":{"from":101,"to":121}}}}],["472",{"pageContent":"![Open-source supply chain decision tree](../../../static/images/blog/gitpod-open-source-sustainability-fund/decision-tree.png)\n\nFor dependencies that are of strategic importance, then the strategy would be a combination of financial support, becoming regular contributors to the project or even hiring the maintainers of these projects as engineers for [short|long]-term engagements.\n\nDo you have more ideas on how funding can foster a diverse community? → Please <a href=\"/contact/support\">get in contact</a>.","metadata":{"source":"https://www.gitpod.io/blog/gitpod-open-source-sustainability-fund","loc":{"lines":{"from":121,"to":125}}}}],["473",{"pageContent":"See you at DevX Conference\n\nThat's it for now. I hope you'll join us for non-profit <a href=\"https://devxconf.org\">DevX Conf</a>, a two-day virtual conference focusing on developer experience. Attendees of the conference will have a say how an additional USD 10,000 in open-source funding will be distributed between open-source projects that are unseen digital infrastructure.\n\n<ol>\n    <li>\n      <span>📆   </span>From 5PM CEST on April 28-29.\n    </li>\n    <li>\n      <span>📍  </span> <a href=\"https://devxconf.org\">devxconf.org</a>.\n    </li>\n    <li>\n      <span>🎫 </span> It's free & non-profit.\n    </li>\n</ol>","metadata":{"source":"https://www.gitpod.io/blog/gitpod-open-source-sustainability-fund","loc":{"lines":{"from":127,"to":141}}}}],["474",{"pageContent":"---\nauthor: svenefftinge\ndate: Tue Jul 31 2018 06:02:26 GMT+0000 (UTC)\nexcerpt: After over one year of intensive work, we are proud to announce the public Beta of Gitpod. Gitpod is a Remote Developer Environment which can be launched\nimage: gitpod-online-ide.png\nslug: gitpod-remote-developer-environment\nsubtitle: One Click to Coding!\ntags: [\"Gitpod updates\"]\ntitle: Gitpod - Remote Developer Environment\nurl: https://medium.com/gitpod/gitpod-gitpod-online-ide-for-github-6296b907a886\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\nAfter over one year of intensive work, we are proud to announce the public Beta of Gitpod.\n\nGitpod is a Remote Developer Environment which can be launched from any GitHub page. Simply **prefix any GitHub-URL with “*https://gitpod.io/#*”** or use our [browser extension](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki?hl=en) that adds a button to GitHub pages.","metadata":{"source":"https://www.gitpod.io/blog/gitpod-remote-developer-environment","loc":{"lines":{"from":1,"to":19}}}}],["475",{"pageContent":"Within seconds, Gitpod provides you with a fully working developer environment, including a VS Code-powered IDE and a cloud-based Linux container configured specifically for the project at hand.\n\n<center><iframe width=\"560\" height=\"315\" src=\"https://www.youtube-nocookie.com/embed/D41zSHJthZI\" title=\"Gitpod introduction\" frameborder=\"0\" allowfullscreen></iframe></center>","metadata":{"source":"https://www.gitpod.io/blog/gitpod-remote-developer-environment","loc":{"lines":{"from":21,"to":23}}}}],["476",{"pageContent":"**Yet Another Cloud IDE?**\n\nGitpod is not another cloud IDE, aiming at replacing desktop development. Instead, Gitpod is a natural extension to GitHub. The limited editing capabilities of GitHub are far too often forcing context switches to our local machines. **Gitpod extends our life on GitHub**.\n\nAlso, Gitpod is super simple: You don’t maintain your projects or workspaces using overwhelming and complicated dashboards. Instead, any configuration is safely stored and versioned on GitHub.","metadata":{"source":"https://www.gitpod.io/blog/gitpod-remote-developer-environment","loc":{"lines":{"from":25,"to":29}}}}],["477",{"pageContent":"**Stay In The GitHub Flow**\n\nGitpod is highly contextual, such that it opens the IDE in the correct mode depending on the context:\n\nIf you are looking at a particular file of a certain commit on GitHub, starting a Gitpod workspace will check out the right version and open the file you’ve been looking at in the IDE.\n\nStarting a Gitpod workspace from an issue will automatically create a branch and preconfigure the commit message.\n\n**Starting Gitpod from a pull request beams your right into code review mode.**\n\n## **GitHub Integration**\n\nOnce you are in the IDE, you can interact with GitHub in various ways. Besides the obvious Git integration, you can do things like **commenting inline in editors, approving and even merging PRs**.\n\n![Inline Comments For Pull Requests](https://cdn-images-1.medium.com/max/6908/1*HNDYawJpDgX6gP_e0w17mg.png)_Inline Comments For Pull Requests_","metadata":{"source":"https://www.gitpod.io/blog/gitpod-remote-developer-environment","loc":{"lines":{"from":31,"to":45}}}}],["478",{"pageContent":"**Automated Setup**\n\nGitpod is built on Kubernetes and you can use any Docker image for your developer environments. This allows to fully automate the setup and frees everybody from manually going through long and outdated setup documentation. No more “works on my machine” scenarios.\n\nGitpod provides your collaborators a **single-click-to-contribute** **experience**.\n\nMore information on how to configure Gitpod can be found [here](/docs/configure).\n\n## **Fire and Forget**\n\nGitpod workspaces are disposable. You simply create a fresh one whenever you need. Once you are done with your task, the IDE brings you back to GitHub, so you can continue on the next task.\n\nYou usually never need to go back to any workspace, but of course you can in case you need to.","metadata":{"source":"https://www.gitpod.io/blog/gitpod-remote-developer-environment","loc":{"lines":{"from":47,"to":59}}}}],["479",{"pageContent":"**Full Terminal Access**\n\nGitpod gives developers full featured terminals to run any processes such as compiling, linting or simply running tests or your application. Any Docker image works and you can even configure Gitpod to automatically launch certain tasks on start.\n\n![Terminal](https://cdn-images-1.medium.com/max/6796/1*K8oKjiVfaptpeI27UXPbcA.png)","metadata":{"source":"https://www.gitpod.io/blog/gitpod-remote-developer-environment","loc":{"lines":{"from":61,"to":65}}}}],["480",{"pageContent":"**Open Source**\n\nThe IDE in Gitpod is based on [Theia](http://theia-ide.org), an open-source project that we ([TypeFox](https://www.typefox.io/)) have started together with our friends from Ericsson in early 2017. You can think of it as **the online version of VS Code**. We love VS Code, but needed some additional properties, like a more extensible architecture and the ability to run in browsers connected to a remote backend. Theia is a true open-source project, hosted at the Eclipse Foundation and developed by a diverse crowd of engineers backed by TypeFox, Ericsson, Red Hat, Arm and others.\n\n![Language Tooling In Action](https://cdn-images-1.medium.com/max/6796/1*5DnbR6-FbyVQ8ILgFHJXOw.png)_Language Tooling In Action_","metadata":{"source":"https://www.gitpod.io/blog/gitpod-remote-developer-environment","loc":{"lines":{"from":67,"to":71}}}}],["481",{"pageContent":"**Supports Many Languages**\n\nBeing based on VS Code and its Language Server Protocol, Theia supports most major programming languages. The table below provides a good overview of the current state.\n\n![Current State of Supported Programming Languages](https://cdn-images-1.medium.com/max/4712/1*BshL6_wwY2XYRDKSMYiSDg.png)_Current State of Supported Programming Languages_\n\nAdditional languages like **C#, Swift, Clojure, Groovy, Objective-C, Markdown, Less, XML and many others** are supported with syntax coloring, as well. Because it is so easy to create an extension for Theia, support will improve both in breadth (more languages) and depth, shortly.","metadata":{"source":"https://www.gitpod.io/blog/gitpod-remote-developer-environment","loc":{"lines":{"from":73,"to":79}}}}],["482",{"pageContent":"**Use It For Free!**\n\nYou can use Gitpod with any GitHub repository. The login is done through GitHub OAuth. At first, Gitpod will ask for accessing public repos, only. If you want to use it with a private repository, Gitpod will ask again for more permissions.\n\nWhy not try it now? If you don’t have a particular repository in mind, you can pick one of the below:\n\n- **JavaScript**:\n  [https://gitpod.io/#**https://github.com/ooade/NextSimpleStarter**](https://gitpod.io/#https://github.com/ooade/NextSimpleStarter)\n\n- **Go**:\n  [https://gitpod.io/#**https://github.com/demo-apps/go-gin-app**](https://gitpod.io/#https://github.com/demo-apps/go-gin-app)\n\n- **Java**:\n  [https://gitpod.io/#**https://github.com/gitpod-io/spring-petclinic**](https://gitpod.io/#https://github.com/gitpod-io/spring-petclinic)\n\n- **Ruby**:\n  [https://gitpod.io/#**https://github.com/gitpod-io/rails_sample_app**](https://gitpod.io/#https://github.com/gitpod-io/rails_sample_app)","metadata":{"source":"https://www.gitpod.io/blog/gitpod-remote-developer-environment","loc":{"lines":{"from":81,"to":97}}}}],["483",{"pageContent":"- **Ruby**:\n  [https://gitpod.io/#**https://github.com/gitpod-io/rails_sample_app**](https://gitpod.io/#https://github.com/gitpod-io/rails_sample_app)\n\n- **Python**:\n  [https://gitpod.io/#**https://github.com/sibtc/django-beginners-guide**](https://gitpod.io/#https://github.com/sibtc/django-beginners-guide)\n\n- **PHP**:\n  [https://gitpod.io/#**https://github.com/symfony/demo**](https://gitpod.io/#https://github.com/symfony/demo)","metadata":{"source":"https://www.gitpod.io/blog/gitpod-remote-developer-environment","loc":{"lines":{"from":97,"to":104}}}}],["484",{"pageContent":"**Where Are We Going From Here?**\n\nMany other features are ready to use, such as Git integration or the search functionality. But also exciting new features are in development, such as **debugging, collaboration **and **support for GitLab and Bitbucket**. Even **support for VS Code extensions** is on its way.\n\nBesides more features, we are focussing on improving the overall experience by streamlining rough edges, fixing bugs and improving performance. New releases will come out continuously.\n\nIf you have feedback or find bugs, please [file them here](https://github.com/gitpod-io/gitpod/issues).\n\n**Happy coding!**","metadata":{"source":"https://www.gitpod.io/blog/gitpod-remote-developer-environment","loc":{"lines":{"from":106,"to":114}}}}],["485",{"pageContent":"---\nauthor: meysholdt\ndate: Wed May 06 2020 14:49:24 GMT+0000 (UTC)\nexcerpt: We are excited to announce the new release of Gitpod Self-Hosted in version 0.4.0. Gitpod Self-Hosted allows everyone to set-up and run a\nimage: cloud-download.png\nslug: gitpod-self-hosted-0.4.0\nsubtitle: Features, Fixes, Fixes, and Fixes\nteaserImage: cloud-download.png\ntitle: Gitpod Self-Hosted 0.4.0\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\nWe are excited to announce the new release of Gitpod Self-Hosted in version 0.4.0. Gitpod Self-Hosted allows everyone to set-up and run a service with the same features as gitpod.io in your cloud or corporate network.\n\n<h2>How Does it Work?</h2>","metadata":{"source":"https://www.gitpod.io/blog/gitpod-self-hosted-0.4.0","loc":{"lines":{"from":1,"to":18}}}}],["486",{"pageContent":"<h2>How Does it Work?</h2>\n\nGitpod Self-Hosted runs on Kubernetes and is easily installed via \"helm install\". On gitpod.io you can find detailed documentation and some automation to install Gitpod on [vanilla Kubernetes](/docs/configure/self-hosted/latest) or [on Google Cloud Platform](/docs/configure/self-hosted/latest). For the next release, we plan to add support for AWS, Azure, and OpenShift.\n\nUsers log into Gitpod via OAuth from your self managed GitLab or GitHub enterprise. This ensures that all access privileges from your Git hosting solution are taken into account and that there is no additional administrative effort for managing user accounts.\n\nGitpod Self-Hosted is truly self-hosted: it does not require an internet connection to operate as every single bit runs on your network, and Gitpod Self-Hosted won't call home.","metadata":{"source":"https://www.gitpod.io/blog/gitpod-self-hosted-0.4.0","loc":{"lines":{"from":18,"to":24}}}}],["487",{"pageContent":"Gitpod Self-Hosted is truly self-hosted: it does not require an internet connection to operate as every single bit runs on your network, and Gitpod Self-Hosted won't call home.\n\nOperating Gitpod in production on gitpod.io has enabled us to battle-harden this product at scale. Both offerings share the same codebase, hence offer the same qualities regarding scalability, cloud-density, reliability, and security. All improvements that we make on Gitpod’s SaaS offering directly benefit the Self-Hosted version.\n\nThis release ships a plethora of bugfixes and improvements, particularly in the area of GitLab integration.\nThere is one major feature that I want to show in more detail since you can't try this on gitpod.io:\n\n<h2>New Admin UI</h2>","metadata":{"source":"https://www.gitpod.io/blog/gitpod-self-hosted-0.4.0","loc":{"lines":{"from":24,"to":31}}}}],["488",{"pageContent":"<h2>New Admin UI</h2>\n\nThis release ships with a new web UI for administrative tasks. The UI is particularly handy when providing support fo users.\nIt allows for easy listing and searching of users and worksapces.\nWhen selecting a user, the UI will show the user's details and workspaces, as you can in the following screenshot:\n\n![Gitpod Admin UI](../../../static/images/blog/gitpod-self-hosted-0.4.0/sh-userdetails2.png)\n\nTo try the new admin interface in Gitpod Self-Hosted, you'll need to assign the \"admin\" privilege to your user and open /admin in your browser.\n\n<h2>Getting started</h2>\n\nThe fastest way to get started is by installing Gitpod Self-Hosted [on Google Cloud Platform](/docs/configure/self-hosted/latest). There is also more in-depth documentation available on how to install Gitpod on [vanilla Kubernetes](/docs/configure/self-hosted/latest).","metadata":{"source":"https://www.gitpod.io/blog/gitpod-self-hosted-0.4.0","loc":{"lines":{"from":31,"to":43}}}}],["489",{"pageContent":"Gitpod Self-Hosted is free for up to five users. For more users, you can obtain a [free one month trial](https://gitpod.io/selfhosted-trial/) or see our [pricing page](/pricing#self-hosted).\n\nFor Gitpod’s next releases you can expect support for Atlassian’s Bitbucket, as well as install guides for Azure, AWS and OpenShift.","metadata":{"source":"https://www.gitpod.io/blog/gitpod-self-hosted-0.4.0","loc":{"lines":{"from":45,"to":47}}}}],["490",{"pageContent":"---\nauthor: mikenikles\ndate: Wed, 30 Jun 2021 3:00:00 UTC\nexcerpt: Stop maintaining your local developer environment. Instead, automate the setup once and use a new environment for each task you work on - available in seconds and always ready-to-code.\nimage: teaser.jpg\nslug: i-said-goodbye-to-local-development-and-so-can-you\nsubtitle:\nteaserImage: teaser.jpg\ntags: [\"Engineering\"]\ntitle: I said goodbye to local development and so can you\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n**Key Takeaways**","metadata":{"source":"https://www.gitpod.io/blog/i-said-goodbye-to-local-development-and-so-can-you","loc":{"lines":{"from":1,"to":17}}}}],["491",{"pageContent":"<script context=\"module\">\n  export const prerender = true;\n</script>\n\n**Key Takeaways**\n\n- Individual developer efficiency is hard to measure, but directly impacts a company’s bottom line and team morale.\n- Remote work requires developers to onboard in isolation, a process that was already challenging when teams were co-located.\n- Onboarding instructions are often outdated, as are automated onboarding scripts because only new hires run them.\n- www.gitpod.io provides automated, one-off developer environments you spin up in the cloud for each task. In seconds, repeatedly, and securely.","metadata":{"source":"https://www.gitpod.io/blog/i-said-goodbye-to-local-development-and-so-can-you","loc":{"lines":{"from":17,"to":26}}}}],["492",{"pageContent":"Table of contents\n\n- [What it’s like today](#what-its-like-today)\n  - [Open source project onboarding](#open-source-project-onboarding)\n- [Meet Alice and Bob](#meet-alice-and-bob)\n  - [Set up a new project](#set-up-a-new-project)\n  - [Develop a new feature](#develop-a-new-feature)\n  - [Switch context](#switch-context)\n  - [Set up a new computer](#set-up-a-new-computer)\n  - [Contribute to open source projects](#contribute-to-open-source-projects)\n- [What’s the catch?](#whats-the-catch)\n- [Conclusion](#conclusion)","metadata":{"source":"https://www.gitpod.io/blog/i-said-goodbye-to-local-development-and-so-can-you","loc":{"lines":{"from":28,"to":39}}}}],["493",{"pageContent":"What it’s like today\n\nWhether you recently joined a new team or contributed to an open source project for the first time, I’m quite sure you spent anywhere from an hour to a few days onboarding. If you were lucky, other contributors provided detailed, up-to-date instructions you could follow. Possibly even commands you could copy & paste and watch your developer environment set itself up one step at a time. If this is your experience, congratulations on finding such a great and diligent team - tell them what an awesome job they did 🤩!\n\n> More often than not though, this is not what an onboarding experience is like.","metadata":{"source":"https://www.gitpod.io/blog/i-said-goodbye-to-local-development-and-so-can-you","loc":{"lines":{"from":41,"to":45}}}}],["494",{"pageContent":"> More often than not though, this is not what an onboarding experience is like.\n\nIt is more likely that there are no automated scripts while instructions, if there are any, are slightly outdated or incomplete - leaving you struggling to figure things out on your own. The techlead to the rescue, who then asks you to update the documentation so the next team member who joins does not run into the same issues. Except, the project evolves, and instructions fall behind again. This is no fault of anyone in particular, but simply a fact of life because once a developer sets up their local developer environment, there is no need to set it up again when the code changes. Every team member applies incremental changes to their developer environment without starting from scratch, leave alone following the onboarding documentation.","metadata":{"source":"https://www.gitpod.io/blog/i-said-goodbye-to-local-development-and-so-can-you","loc":{"lines":{"from":45,"to":47}}}}],["495",{"pageContent":"**This process is costly**, both in terms of time and team morale. The larger your team, the more time is lost on setting up developer environments and keeping them maintained. At the same time, I don’t know anyone who enjoys reading outdated documentation. Feeling helpless on the first day working on a new project is certainly not a great way to get started 😕.","metadata":{"source":"https://www.gitpod.io/blog/i-said-goodbye-to-local-development-and-so-can-you","loc":{"lines":{"from":49,"to":49}}}}],["496",{"pageContent":"Open source project onboarding\n\nIn addition, there is a cost that applies to open source projects that is almost impossible to measure: **the % of people who would like to contribute to a project, but give up because getting started is too complex or interferes with their other projects in their local environment!**\n\nTo illustrate this with an example, imagine you usually work with Java 8 and want to contribute to two open source projects. Project A requires Java 7, while project B only runs with Java 11. In order for you to contribute to these projects, you need to install a Java version manager and remember to switch Java version every time you change the project you work on.\nThe exact same applies to databases (no need to install MySQL, MongoDB, Postgres, etc. locally), operating system libraries, anything you currently install locally.\n\nLet’s look at a day in the life of two developers and see how cloud-based developer environments simplify workflows significantly.","metadata":{"source":"https://www.gitpod.io/blog/i-said-goodbye-to-local-development-and-so-can-you","loc":{"lines":{"from":51,"to":58}}}}],["497",{"pageContent":"Meet Alice and Bob\n\nBob is like most of us, he works on a desktop or laptop where he installs development tools, clones Git repositories and installs dependencies for the projects he works on. He may or may not have had a great onboarding experience 😉. Once every so often, Bob is required to upgrade his tools and dependencies, a task he dreads because upgrading the version of an installed programming language may impact projects that are not compatible with that newer version. With every new version he installs, his cognitive load increases as he needs to remember to switch to the correct version based on the project he works on. Bob is very, very careful in the way he treats his computer because he really doesn’t want it to break… Just imagine setting everything up again from scratch 😱.","metadata":{"source":"https://www.gitpod.io/blog/i-said-goodbye-to-local-development-and-so-can-you","loc":{"lines":{"from":60,"to":62}}}}],["498",{"pageContent":"**Alice is not like Bob**, not anymore! Alice too lived a life like Bob where she carefully set up and maintained her local developer environment over the lifetime of her laptop (we will talk about her experience when she gets a new laptop later). However, she has since realized there is a better way not only for herself, but for her entire team and anyone who contributes to their projects.\n\n> Alice no longer has any code on her computer, none whatsoever. She does that thanks to cloud-based, ephemeral developer environments provided by www.gitpod.io.\n\nLet’s dive in and learn more about Bob and Alice and how you can turn yourself from being a traditional Bob to being a modern, efficient version of Alice 🥰.","metadata":{"source":"https://www.gitpod.io/blog/i-said-goodbye-to-local-development-and-so-can-you","loc":{"lines":{"from":64,"to":68}}}}],["499",{"pageContent":"Set up a new project\n\n**Bob**\n\nBob starts by cloning the source code, then ensures he has the correct runtime versions installed (e.g. Java, Node, .NET) and also makes sure the project supports his operating system.\nOnce that’s all good, he looks for onboarding instructions and works his way through that, potentially spending up to a few days on this task.\n\n**Alice**\n\nAlice creates a `.gitpod.yml` configuration file at the root of her project, then adds [start tasks](/docs/configure/workspaces/tasks) such as the following:\n\n```yaml\ntasks:\n  - init: npm install\n    command: npm run dev","metadata":{"source":"https://www.gitpod.io/blog/i-said-goodbye-to-local-development-and-so-can-you","loc":{"lines":{"from":70,"to":84}}}}],["500",{"pageContent":"She also enables Gitpod [Prebuilds](/docs/configure/projects/prebuilds) - telling Gitpod to continuously create new developer environments as soon as her project’s source code changes! This significantly reduces the startup time when she or anyone who works on her project needs a developer environment.\n\n![Set up a new project](../../../static/images/blog/i-said-goodbye-to-local-development-and-so-can-you/set-up-a-new-project-light-theme.png)\n![Set up a new project](../../../static/images/blog/i-said-goodbye-to-local-development-and-so-can-you/set-up-a-new-project-dark-theme.png)","metadata":{"source":"https://www.gitpod.io/blog/i-said-goodbye-to-local-development-and-so-can-you","loc":{"lines":{"from":87,"to":90}}}}],["501",{"pageContent":"Develop a new feature\n\n**Bob**\n\nBob is very familiar with this workflow, it’s something he does many times a week, possibly even a few times per day.\n\nHe starts by making sure his new feature branch is based on the latest code. He does that by first pulling the latest default branch and then creating a feature branch.\n\nSince one of his colleagues may have added a new dependency or changed a required runtime version, Bob needs to ensure he has the latest versions. You know, otherwise he starts the dev server only to be presented with an error message telling him a dependency is missing. You know what I’m talking about 😉.\n\nThen, Bob is ready to shift into feature development mode. Well... after he started the database and dev servers.\n\n**Alice**","metadata":{"source":"https://www.gitpod.io/blog/i-said-goodbye-to-local-development-and-so-can-you","loc":{"lines":{"from":92,"to":104}}}}],["502",{"pageContent":"Then, Bob is ready to shift into feature development mode. Well... after he started the database and dev servers.\n\n**Alice**\n\nShe’s keen to get started right away. Once she looks at the issue on GitHub, GitLab or Bitbucket, she simply clicks the “Gitpod” button\\*. This opens a new workspace with a feature branch already created, all dependencies installed and the database and dev servers started!\n\n\\* She gets that by installing the [Gitpod browser extension](/docs/configure/user-settings/browser-extension). Alternatively, she could prefix the issue URL with `gitpod.io/#<issue-url>` to open a new developer environment.\n\n![Set up a new project](../../../static/images/blog/i-said-goodbye-to-local-development-and-so-can-you/develop-a-new-feature-light-theme.png)\n![Set up a new project](../../../static/images/blog/i-said-goodbye-to-local-development-and-so-can-you/develop-a-new-feature-dark-theme.png)","metadata":{"source":"https://www.gitpod.io/blog/i-said-goodbye-to-local-development-and-so-can-you","loc":{"lines":{"from":104,"to":113}}}}],["503",{"pageContent":"Switch context\n\nImagine this: You’re working on a feature when your team member contacts you, letting you know she needs your review for a production hotfix pull request. Here’s how Bob and Alice handle this situation:\n\n**Bob**\n\nHm... 🤔 Bob is a bit hesitant. He has a bunch of code changes that are not ready to be committed, he also removed a dependency that is no longer needed thanks to his feature - yay! The timing to review a pull request is less than ideal.\n\nHe stashes his changes, pulls the PR branch and switches to it. Since he removed a dependency in his feature branch, he needs to install that again because the production hotfix PR still requires it.\n\nTime to start the dev server and review the hotfix. Looks good, LGTM 👍.\n\nTo get back to his feature branch and continue development, he first switches back to his branch. Next, Bob needs his stashed files back, then drops that dependency his feature no longer requires and eventually starts the servers.\n\n**Alice**","metadata":{"source":"https://www.gitpod.io/blog/i-said-goodbye-to-local-development-and-so-can-you","loc":{"lines":{"from":115,"to":129}}}}],["504",{"pageContent":"**Alice**\n\nAlice’s workflow is no different than when she develops a new feature. She opens a new browser tab, navigates to the pull request and opens a new developer environment based on that PR. Within seconds, the environment starts and the database and dev servers already run - ready for Alice’s review.\n\nShe can even leave review comments right within VS Code and have them synced with GitHub.\n\nWhen she’s done with the review, Alice closes the browser tab. This brings her back to her previous developer environment where she continues to work on her feature.\n\n![Set up a new project](../../../static/images/blog/i-said-goodbye-to-local-development-and-so-can-you/switch-context-light-theme.png)\n![Set up a new project](../../../static/images/blog/i-said-goodbye-to-local-development-and-so-can-you/switch-context-dark-theme.png)","metadata":{"source":"https://www.gitpod.io/blog/i-said-goodbye-to-local-development-and-so-can-you","loc":{"lines":{"from":129,"to":138}}}}],["505",{"pageContent":"Set up a new computer\n\n**Bob**\n\nOh boy... where to start?! Ah right, from scratch 😰!\n\n**Alice**\n\nAlice, well Alice is excited to get a new computer and is up and running as soon as she installs her favourite browser 🚀. Way to go, Alice!\n\n![Set up a new project](../../../static/images/blog/i-said-goodbye-to-local-development-and-so-can-you/set-up-a-new-dev-env-light-theme.png)\n![Set up a new project](../../../static/images/blog/i-said-goodbye-to-local-development-and-so-can-you/set-up-a-new-dev-env-dark-theme.png)\n\n### Contribute to open source projects\n\nRemember the example with the three open source projects earlier that use different versions of Java? In Alice’s case, she does not have Java installed locally at all. She starts any open source project in an ephemeral developer environment and uses whatever version of Java is configured for that project. She can even contribute to two projects in parallel - if she really wanted to 😛.","metadata":{"source":"https://www.gitpod.io/blog/i-said-goodbye-to-local-development-and-so-can-you","loc":{"lines":{"from":140,"to":155}}}}],["506",{"pageContent":"What’s the catch?\n\nWell, for the time being you need an internet connection to work like Alice. The good news, it doesn’t have to be high bandwidth since the data exchange between Gitpod and your browser is minimal. A decent latency is all you need for a smooth experience.\n\nIf you read this and think “Well, what about X?” please get in touch, I’d love to work with you and set up Gitpod for your project.","metadata":{"source":"https://www.gitpod.io/blog/i-said-goodbye-to-local-development-and-so-can-you","loc":{"lines":{"from":157,"to":161}}}}],["507",{"pageContent":"Conclusion\n\nAlice & Bob, two not-so-fictional characters living their life as software developers. I used to be a Bob for close to two decades before I found www.gitpod.io which gives me everything Alice has! Want to get a sneak peek? Click the following button to start your first developer environment in the cloud (it will open the source file of this blog post):\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-io/website/blob/main/src/routes/blog/i-said-goodbye-to-local-development-and-so-can-you.md)\n\nI’d love to hear your thoughts and feedback, please get in touch 🙏.","metadata":{"source":"https://www.gitpod.io/blog/i-said-goodbye-to-local-development-and-so-can-you","loc":{"lines":{"from":163,"to":169}}}}],["508",{"pageContent":"---\nauthor: JohannesLandgraf, svenefftinge, mbrevoort\ndate: Thursday, 8 Dec 2022 13:00:00 UTC\nexcerpt: Announcing limited availability for Gitpod Dedicated - a secure installation of Gitpod managed by us for you\nslug: introducing-gitpod-dedicated\nteaserImage: teaser.jpg\nimage: teaser.jpg\ntags: [\"Gitpod updates\", \"Company building\"]\ntitle: \"Introducing Gitpod Dedicated: our enterprise cloud offering\"\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n<script>\n  import Signup from \"$lib/components/dedicated/signup.svelte\"\n</script>\n\n**TL;DR**\n\n- Gitpod Dedicated is our new enterprise cloud product - a secure installation of Gitpod managed by us for you\n- Gitpod exists to remove friction from the developer experience, and the best way to do that is with a managed product in the cloud\n- We no longer actively support self hosting Gitpod","metadata":{"source":"https://www.gitpod.io/blog/introducing-gitpod-dedicated","loc":{"lines":{"from":1,"to":24}}}}],["509",{"pageContent":"In December 2019, we [announced](/blog/self-host-your-gitpod) that it was possible to self-host Gitpod. Our goal was to make Gitpod accessible for teams that cannot use a SaaS offering. We tried hard to provide a decent self-hosted installation and operation experience by shipping our [own installer](/blog/gitpod-installer) to reduce configuration complexity, regular releases of self-hosted with in-depth reference architectures, support for [GKE](https://cloud.google.com/kubernetes-engine), [AKS](https://azure.microsoft.com/en-us/products/kubernetes-service/), and [EKS](https://aws.amazon.com/eks), and the release of [Gitpod Local Preview](/docs/configure/self-hosted/latest/local-preview). We have been working closely with various companies and helped them to install and operate their self-hosted Gitpod installation.","metadata":{"source":"https://www.gitpod.io/blog/introducing-gitpod-dedicated","loc":{"lines":{"from":26,"to":26}}}}],["510",{"pageContent":"Despite all that effort, self-hosted Gitpod has been increasingly difficult for us to support and it has shown to be a burden for our clients to manage and operate their own Gitpod instances. The open-ended requirements to run on commoditised Kubernetes services (GKE, AKS, EKS) forced us to manage variance and prevented us from driving innovation and fully realizing the potential of [Cloud Development Environments (CDEs)](/cde). There must be a better way to get Gitpod in the hands of those who can’t use our SaaS offering.","metadata":{"source":"https://www.gitpod.io/blog/introducing-gitpod-dedicated","loc":{"lines":{"from":28,"to":28}}}}],["511",{"pageContent":"Gitpod Dedicated managed by us, for your organization\n\nCustomers choose our SaaS product for convenience. They want to be ready to code and productive in an instant. Customers choose to self-host because of the security benefits it enables through isolation. This is especially important in environments that are highly regulated or have specific data residency rules. Gitpod Dedicated combines the convenience of SaaS with the security benefits of self-hosting.\n\nGitpod Dedicated is the same Gitpod that you know and love, but as a customer you get a completely isolated, single tenant instance of Gitpod that we create and manage just for you. This allows us to combine the efficiency and ease of use of a managed cloud offering with the security, isolation and compliance characteristics you get from having your own dedicated instance.","metadata":{"source":"https://www.gitpod.io/blog/introducing-gitpod-dedicated","loc":{"lines":{"from":30,"to":34}}}}],["512",{"pageContent":"Gitpod Dedicated will be initially available in AWS because that’s where the majority of our customers are. We can run in your cloud account or ours, in the region of your choice, and customers will have the ability to manage encryption keys for data at rest. Every detail of Gitpod Dedicated has been designed to meet the security requirements of our enterprise customers.","metadata":{"source":"https://www.gitpod.io/blog/introducing-gitpod-dedicated","loc":{"lines":{"from":36,"to":36}}}}],["513",{"pageContent":"Join the waitlist\n\nWe are excited to announce limited availability of Gitpod Dedicated for enterprise customers and an expanded beta in 2023. Sign-up for the waitlist and receive bi-weekly architecture and product updates.\n\n<div class=\"my-micro\">\n<Signup class=\"!mx-auto !left-0\" toType=\"dedicated-signup\" />\n</div>","metadata":{"source":"https://www.gitpod.io/blog/introducing-gitpod-dedicated","loc":{"lines":{"from":38,"to":44}}}}],["514",{"pageContent":"Ending support for Self Hosted and moving our source code to the open-source AGPL licence\n\nWe have decided to stop supporting self-hosting Gitpod for the reasons mentioned above. The focus on Gitpod SaaS and Gitpod Dedicated enables us to ship improvements much faster.\n\nWe know that some members of our community will be disappointed by our decision to end Gitpod self-hosted as a product. And we apologize for any inconvenience or stress this may cause. We did not take this decision lightly. We will continue to adhere to any existing contractual agreements with our customers regarding support and security fixes.\n\nWe have informed our enterprise customers about this decision and have been pleasantly surprised by the excitement around Gitpod Dedicated. For the community, the end of self-hosted as a product means:","metadata":{"source":"https://www.gitpod.io/blog/introducing-gitpod-dedicated","loc":{"lines":{"from":46,"to":52}}}}],["515",{"pageContent":"- The November 22 release will be our last Self-Hosted release. Both the product and its documentation will be frozen.\n- You will be able to continue installing and using the [currently available free KOTS based community edition](/community-license) until January 24.\n- We will move all of our source code to open-source AGPL and remove the proprietary Enterprise License from our source code.\n\nWe originally [open sourced Gitpod](https://www.gitpod.io/blog/opensource) because working in open source is in our DNA. Everything we have created over the past 10 years, including [Theia](https://github.com/eclipse-theia/theia), [Xtext](https://github.com/eclipse/xtext), [Open VSX](https://github.com/eclipse/openvsx), and many other projects have been open source. This stays true for Gitpod. What is going to change is, that we are focused on creating the best managed experience possible, rather than trying to make it as flexible as possible for self-hosting.","metadata":{"source":"https://www.gitpod.io/blog/introducing-gitpod-dedicated","loc":{"lines":{"from":54,"to":58}}}}],["516",{"pageContent":"As we close 2022 by introducing new workspace classes, flexible pricing and a new enterprise cloud offering, we couldn’t be more excited for 2023. Our vision for [Cloud Development Environments (CDEs)](/cde) is ambitious, and we are just getting started. There’s still a long way to go to remove all friction from the developer experience to be always ready-to-code and make software engineering more collaborative, joyful, and secure.\n\nPS: today, we also launched larger workspaces and flexible pricing. [Read the launch blog post](/blog/introducing-workspace-classes-and-flexible-pricing).","metadata":{"source":"https://www.gitpod.io/blog/introducing-gitpod-dedicated","loc":{"lines":{"from":60,"to":62}}}}],["517",{"pageContent":"---\nauthor: michaelaring, jldec, atduarte\ndate: Thursday, 8 Dec 2022 12:00:01 UTC\nexcerpt: Workspace classes give you access to workspaces with more computational power. You can choose between standard and large workspaces, unlocking more powerful CDEs and new use cases. Workspace classes are made possible by a new flexible pricing model.\nslug: introducing-workspace-classes-and-flexible-pricing\nteaserImage: teaser.jpg\nimage: teaser.jpg\ntags: [\"Gitpod updates\"]\ntitle: Introducing workspace classes and flexible pricing\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\nToday, we are announcing workspace classes and flexible pricing 🎉","metadata":{"source":"https://www.gitpod.io/blog/introducing-workspace-classes-and-flexible-pricing","loc":{"lines":{"from":1,"to":16}}}}],["518",{"pageContent":"<script context=\"module\">\n  export const prerender = true;\n</script>\n\nToday, we are announcing workspace classes and flexible pricing 🎉\n\nWorkspace classes give you access to workspaces with more computational power. You can choose between standard and large workspaces, unlocking more powerful [CDEs](/cde) and new use cases. Workspace classes are made possible by a new flexible pricing model. Gitpod usage is now measured in credits and you are charged based on your usage. Our free tier remains virtually unchanged and you can continue to use Gitpod for up to 50 hours per month for free.\n\nContinue to read below on why we are making this change or go straight to the documentation for configuring [workspace classes](/docs/configure/workspaces/workspace-classes) and [billing](/docs/configure/billing).","metadata":{"source":"https://www.gitpod.io/blog/introducing-workspace-classes-and-flexible-pricing","loc":{"lines":{"from":16,"to":24}}}}],["519",{"pageContent":"Workspace classes\n\nDifferent projects and workloads require different amounts of computational power and developers want the flexibility to choose the workspace size that best fits their needs.\n\nUntil now, all Gitpod workspaces were given the same computational resources - up to 4 vCPUs, 8GB RAM and 30GB of storage. Starting today developers can choose a larger option of up to 8 vCPUs, 16GB RAM and 50GB of storage. ⚡\n\n| Workspace Class | vCPUs   | RAM        | Storage |\n| --------------- | ------- | ---------- | ------- |\n| Standard        | Up to 4 | Up to 8GB  | 30GB    |\n| Large           | Up to 8 | Up to 16GB | 50GB    |\n\nTo get started head over to your Gitpod project settings and select the desired workspace class. This option is available to free tier users, and to paid subscribers with the new flexible pricing. If you are on one of our old plans, consider switching now to access large workspace classes.","metadata":{"source":"https://www.gitpod.io/blog/introducing-workspace-classes-and-flexible-pricing","loc":{"lines":{"from":26,"to":37}}}}],["520",{"pageContent":"We are thrilled to be able to offer this new level of flexibility and we can't wait to see what developers will create with it. We believe that the added flexibility will help developers to be more productive and efficient, and we are excited to see how it will improve their Gitpod experience. 🚀\n\n**How you can help us:** We are just getting started! 👀Head over to [Issue 13950](https://github.com/gitpod-io/gitpod/issues/13950) and share your feedback on workspace classes and your need for even more powerful machines.","metadata":{"source":"https://www.gitpod.io/blog/introducing-workspace-classes-and-flexible-pricing","loc":{"lines":{"from":39,"to":41}}}}],["521",{"pageContent":"Flexible Pricing\n\nOur new pricing model allows us to bring the benefits of workspace classes to all of our users.\n\nInstead of billing for each user based on their monthly plan, Gitpod can now charge for usage based on how long workspaces run, and the resources consumed by different workspace classes.","metadata":{"source":"https://www.gitpod.io/blog/introducing-workspace-classes-and-flexible-pricing","loc":{"lines":{"from":43,"to":47}}}}],["522",{"pageContent":"How does flexible pricing work?\n\n[Individual users](/docs/configure/billing#configure-personal-billing) on the free plan can use up to 500 credits each month. This is equivalent to 50 standard workspace hours.\n\nIndividual users who upgrade to paid billing at $9.00 per month can use up to 1,000 credits, and pay for additional usage beyond that, at the pay-as-you-go rate of $0.036 per credit.\n\nWith [team billing](/docs/configure/billing#configure-team-billing), Gitpod will meter the usage of team members on team projects, and charge that usage to the team billing account, at the same pay-as-you-go rate of $0.036 per credit.","metadata":{"source":"https://www.gitpod.io/blog/introducing-workspace-classes-and-flexible-pricing","loc":{"lines":{"from":49,"to":55}}}}],["523",{"pageContent":"|                                              | Free                   | Paid Users              | Paid Teams              |\n| -------------------------------------------- | ---------------------- | ----------------------- | ----------------------- |\n| Base price                                   | $0/mo                  | $9/mo                   | $0/mo                   |\n| Credits included in base price               | 500                    | 1000                    | 0                       |\n| Additional credits available with paid plans | none (Upgrade to paid) | Pay-as-you-go Unlimited | Pay-as-you-go Unlimited |\n| Price per additional credit                  | n/a (Upgrade to paid)  | $0.036                  | $0.036                  |","metadata":{"source":"https://www.gitpod.io/blog/introducing-workspace-classes-and-flexible-pricing","loc":{"lines":{"from":57,"to":62}}}}],["524",{"pageContent":"What changes today?\n\nWorkspace classes and the new pricing are now generally available for all Gitpod users.\n\n**If you are already a paying Gitpod user,** you can switch to the new pricing model or stay on your existing paid plan. In order to access large workspaces and pay-as-you-go, you will first need to cancel your old plan. Existing plans will keep working until the end of March, 2023.\n\n**If you are a free Gitpod user,** you can continue using Gitpod for free. Users on the Free plan can use up to 500 credits each month without charge. That is equivalent to 50 hours of Standard workspace usage. You don’t need a credit card to use Gitpod.\n\n**If you are new to Gitpod,** you can [sign up](https://gitpod.io/workspaces/) and start using Gitpod for free. If you are interested, check out all our features and prices on the new [pricing page](/pricing).","metadata":{"source":"https://www.gitpod.io/blog/introducing-workspace-classes-and-flexible-pricing","loc":{"lines":{"from":64,"to":72}}}}],["525",{"pageContent":"Gitpod for startups, students, and open source\n\n[Gitpod for Open Source](/for/opensource) users will now receive 2,500 credits per month on their free plan.\n\n[Gitpod for Startups](/for/startups) participants will receive a discount of 50% on their team usage. Existing Gitpod for Startups participants can continue using their old plans.\n\n[Students and educators](/for/education) are encouraged to check out the generous new free and paid offerings described above. Our pricing plans which require student verification have been discontinued. Existing paid student plans will keep working.\n\nPS: we’ve also announced Gitpod Dedicated, a fully-isolated, private installation of Gitpod managed by us. [Read blog post](/blog/introducing-gitpod-dedicated).","metadata":{"source":"https://www.gitpod.io/blog/introducing-workspace-classes-and-flexible-pricing","loc":{"lines":{"from":74,"to":82}}}}],["526",{"pageContent":"---\nauthor: arthursens\ndate: Sunday, 23 May 2021 11:00:00 UTC\nexcerpt: The SRE team at Gitpod is making the first moves to implement Site Reliability Engineering best practices. We document our approach to implement our very first Service Level Objective.\nimage: teaser.png\nslug: journey-to-site-reliability-engineering-at-gitpod\nsubtitle:\nteaserImage: teaser.png\ntags: [\"Gitpod updates\"]\ntitle: Journey to Site Reliability Engineering at Gitpod\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\nGitpod is changing the way developers code. We're breaking the paradigm of relying on local environments to develop applications, by making those environments available through a web browser. Those environments are hosted in the cloud, they are ephemeral and they can be customized through automation to make them perfect for the project being developed.","metadata":{"source":"https://www.gitpod.io/blog/journey-to-site-reliability-engineering-at-gitpod","loc":{"lines":{"from":1,"to":17}}}}],["527",{"pageContent":"Those cloud-based environments provide everything that our users have in their local machines, including [sudo access](/blog/root-docker-and-vscode#root-access) and [Docker](/blog/root-docker-and-vscode#docker), and thanks to configuration-as-code (that can be automated) they remove the friction of installing and managing all different kinds of dependencies that we have when working on multiple projects. We want the world to forget about local environments and completely focus on our cloud-based environments.\n\n_We gave those cloud-based environments a unique name: \"Workspaces\"._\n\nWorkspaces are the core of Gitpod, it is impossible to be a user of Gitpod without using Workspaces. To achieve the goal of making the world forget about local environments, _we need to be a service provider that developers can trust and rely on_, therefore, Workspaces need to be just as reliable as local environments!","metadata":{"source":"https://www.gitpod.io/blog/journey-to-site-reliability-engineering-at-gitpod","loc":{"lines":{"from":19,"to":23}}}}],["528",{"pageContent":"Gitpod is scaling! [We are glad to be backed by fantastic investors](/blog/next-chapter-for-gitpod) and the topic \"Cloud-based development\" is on fire right now! Being the pioneers in this topic, it's only natural that we're getting more and more users every day. This is truly a great thing for us! We are honored to receive so much love in the last couple of months and we want to keep this momentum going, but this extra love also puts an extra load on top of our clusters and extra load sometimes leads to unreliability. It is awesome that people are starting to forget about their local environments thanks to Gitpod, therefore _we want Workspaces to maintain a fantastic performance, doesn't matter if we host ten, ten thousand, or ten million Workspaces concurrently._","metadata":{"source":"https://www.gitpod.io/blog/journey-to-site-reliability-engineering-at-gitpod","loc":{"lines":{"from":25,"to":25}}}}],["529",{"pageContent":"Reliability vs Velocity\n\nOf course, Gitpod is a lot more than just an IDE with a terminal in the cloud. We have tons of features that make Gitpod shine amongst all other cloud-based developer environments, such as [Prebuilds](/docs/configure/projects/prebuilds), [Sudo and Docker support](/blog/root-docker-and-vscode), [Shareable Workspaces](/docs/configure/workspaces/collaboration), while not mentioning our [Roadmap](https://www.gitpod.io/roadmap) that is pretty ambitious too.","metadata":{"source":"https://www.gitpod.io/blog/journey-to-site-reliability-engineering-at-gitpod","loc":{"lines":{"from":27,"to":29}}}}],["530",{"pageContent":"Developing and shipping new features is one of the things that make us more excited about our work, and hopefully our users too 😅, but making changes to production also comes with the risk of breaking stuff that was working just fine previously. Breaking small things is usually okay and we can keep focusing on new features, but we may break Gitpod so much that user experience decreases to a level that makes our users unhappy. That is a big no-no for us. If our users are unhappy then we need to do something about it, even if that means slowing down new features or completely stop them to fully focus on reliability depending on how bad the situation is. _But how do we decide if we should be focusing on reliability or feature velocity?_","metadata":{"source":"https://www.gitpod.io/blog/journey-to-site-reliability-engineering-at-gitpod","loc":{"lines":{"from":31,"to":31}}}}],["531",{"pageContent":"Today we are not doing a great job when it comes to proactively identify degraded user experience. While we do have some metrics about Workspace startup latency and errors, most of our incidents were identified by noticing too many users complaining at our contact platforms, such as GitHub issues, email, and Twitter. Damn, we even got an incident that caused 100% unavailability because our SSL certificates expired back in February this year, and it took us almost half an hour to notice that 😅!","metadata":{"source":"https://www.gitpod.io/blog/journey-to-site-reliability-engineering-at-gitpod","loc":{"lines":{"from":33,"to":33}}}}],["532",{"pageContent":"We do have things to be proud of though! Our Incident Response process, while it can be improved even further, has gotten a lot better since December 2020. We're coming up with post-mortems after almost all incidents and the team is tackling every action item raised. On these occasions, reliability usually has a higher priority than feature velocity. Some action items are taking a little longer to implement though, and these items are exactly the ones that will solve the problem mentioned before: _we need to get better at proactively identify degraded user experience._","metadata":{"source":"https://www.gitpod.io/blog/journey-to-site-reliability-engineering-at-gitpod","loc":{"lines":{"from":35,"to":35}}}}],["533",{"pageContent":"Alerting on symptoms instead of causes\n\nUnfortunately, today we can't have clear insights if our changes have a direct impact on user experience. We come from a mindset of measuring compute resources, e.g. CPU, RAM, and disk utilization, as a way to know if Gitpod is running smoothly. This strategy worked just fine for some time, it was simple to horizontally or vertically increase our nodes, but now we are often seeing that lack of resources are not the reason why Workspaces start to fail. Not to mention that keeping a high number of nodes under a certain threshold is quite challenging.\n\n![Too many nodes to keep an eye on](../../../static/images/blog/journey-to-site-reliability-engineering-at-gitpod/too-many-nodes.png)","metadata":{"source":"https://www.gitpod.io/blog/journey-to-site-reliability-engineering-at-gitpod","loc":{"lines":{"from":37,"to":41}}}}],["534",{"pageContent":"![Too many nodes to keep an eye on](../../../static/images/blog/journey-to-site-reliability-engineering-at-gitpod/too-many-nodes.png)\n\nWe want to change this mindset completely! Compute resource metrics may be good for debugging degraded performance during incidents, but shouldn't be the way we look for degraded user experience. We should be gathering metrics that measure exactly the symptoms that our users complain about during incidents:\n\n![Incident reporting](../../../static/images/blog/journey-to-site-reliability-engineering-at-gitpod/incident-report.png)\n\nAs previously said, Workspaces are the core of Gitpod. We should be measuring metrics that tell us how our users are interacting with them:\n\n- How many workspaces are being created and how many fail during this process?\n- How many of those Workspaces start in an acceptable time frame?\n- After they start, do they remain working until the user chooses to stop them?","metadata":{"source":"https://www.gitpod.io/blog/journey-to-site-reliability-engineering-at-gitpod","loc":{"lines":{"from":41,"to":51}}}}],["535",{"pageContent":"Gitpod has a lot more features than just hosting Workspaces but, as a first step, _getting metrics and alerts around Workspace behavior will cover most of the complaints we had so far._","metadata":{"source":"https://www.gitpod.io/blog/journey-to-site-reliability-engineering-at-gitpod","loc":{"lines":{"from":53,"to":53}}}}],["536",{"pageContent":"Service Level Objectives\n\nThese Workspace metrics will be key to our team when performing Site Reliability Engineering, but they alone aren't enough. They still don't answer the question: should we be focusing on reliability or feature velocity? We need to set clear expectations about when we consider Gitpod unstable or not.\n\n_Service Level Indicators and Service Level Objectives will be our North Stars._ And they will be implemented with the metrics mentioned in the previous section of this blog.\n\nSLIs are simple once we implement those metrics. It's a simple ratio calculation over some time period. E.g.:\n\n<figure>\n<video playsinline autoplay no-controls loop muted class=\"shadow-medium rounded-xl max-w-3xl mt-x-small\" alt=\"Workspace Start SLI\" src=\"/images/blog/journey-to-site-reliability-engineering-at-gitpod/sli-workspace-start.webm\" type=\"video/webm\"></video>\n    <figcaption>Workspace Start SLI</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/blog/journey-to-site-reliability-engineering-at-gitpod","loc":{"lines":{"from":55,"to":66}}}}],["537",{"pageContent":"<figure>\n<video playsinline autoplay no-controls loop muted class=\"shadow-medium rounded-xl max-w-3xl mt-x-small\" alt=\"Workspace Latency SLI\" src=\"/images/blog/journey-to-site-reliability-engineering-at-gitpod/sli-workspace-latency.webm\" type=\"video/webm\"></video>\n    <figcaption>Workspace Latency SLI</figcaption>\n</figure>\n\n<figure>\n<video playsinline autoplay no-controls loop muted class=\"shadow-medium rounded-xl max-w-3xl mt-x-small\" alt=\"Workspace Liveness SLI\" src=\"/images/blog/journey-to-site-reliability-engineering-at-gitpod/sli-workspace-liveness.webm\" type=\"video/webm\"></video>\n    <figcaption>Workspace Liveness SLI</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/blog/journey-to-site-reliability-engineering-at-gitpod","loc":{"lines":{"from":68,"to":76}}}}],["538",{"pageContent":"The SLOs, on the other hand, are a little bit more complicated. The SLO is a target of reliability that will better represent our users' \"happiness\", and measuring happiness is not really straightforward. We do know that aiming for 100% is not what we nor our users want though. Aiming for 100% means that 0 Workspaces can fail to start. Once we have a stable system, making changes to it, e.g. changing infrastructure to save costs or shipping a new exciting feature, is often the reason why said system becomes unstable even though those changes will often make us and our users more satisfied with our final product.\n\nNow that we agreed that we won't aim for 100% availability, then what will be our target? Well, internally we do have an informal agreement that:\n\n- 95% of Workspaces should start in less than 2 mins\n- 50% of Workspaces should start in less than 15s\n- 99.8% of Workspaces should start successfully\n- 99.8% of Workspaces should remain working after they start","metadata":{"source":"https://www.gitpod.io/blog/journey-to-site-reliability-engineering-at-gitpod","loc":{"lines":{"from":78,"to":85}}}}],["539",{"pageContent":"To be honest, however, in our first interaction it is a little bit unreal to write those targets in stone already. As we already mentioned in this blog post, we still don't have that measurement very well established, so we don't know what is the reality that we live in right now. It could be that to achieve those targets, we will need to stop feature development completely just to manually keep everything stable, and this is not what we want!\n\nAfter implementing our metrics and SLIs, we can create dashboards and reports based on the SLOs' targets that we're aiming for in the future, but we will only establish real policies after we get some war experience and develop a good grasp of what we're dealing with 💪.","metadata":{"source":"https://www.gitpod.io/blog/journey-to-site-reliability-engineering-at-gitpod","loc":{"lines":{"from":87,"to":89}}}}],["540",{"pageContent":"---\nauthor: pawlean, michaelaring\ndate: Tue, 06 Sep 2022 18:00:00 UTC\nexcerpt: DevX community is a curated community for DevX leaders to share their knowledge and learnings.\nimage: teaser.jpg\nslug: launching-devx-community\nsubtitle:\nteaserImage: teaser.jpg\ntags: [\"Developer experience\"]\ntitle: Launching DevX Community\n---\n\n<script context=\"module\">\n  import LinkIconExternal from \"$lib/components/ui-library/link-icon-external.svelte\";\n\n  export const prerender = true;\n</script>\n\n<style lang=\"postcss\">\n h2 {\n    margin-top: var(--small);\n    margin-bottom: var(--x-small);\n  }\n</style>\n\nWe care deeply about developer experience. As omnipresent as the term seems these days, developer experience is an emerging field that is often misunderstood.","metadata":{"source":"https://www.gitpod.io/blog/launching-devx-community","loc":{"lines":{"from":1,"to":26}}}}],["541",{"pageContent":"We care deeply about developer experience. As omnipresent as the term seems these days, developer experience is an emerging field that is often misunderstood.\n\nCompanies of all sizes have introduced teams focused on developer experience over the past years. The folks working on these teams have different titles: Head of Developer Experience, Head of Platform, DevX Engineer, DX Engineer, Staff Engineer - and many more.\n\nWhat all of them have in common is the desire to improve the tooling and processes that software developers employ in their day-to-day work. That’s no easy feat. Developer experience is a broad domain that requires practitioners to understand the latest technologies just as much as the intricacies of human behavior.\n\nWe are launching a shared space for those that work on creating a better developer experience for all of us:","metadata":{"source":"https://www.gitpod.io/blog/launching-devx-community","loc":{"lines":{"from":26,"to":32}}}}],["542",{"pageContent":"We are launching a shared space for those that work on creating a better developer experience for all of us:\n\n**DevX Community** – a curated community for DevX leaders that want to connect, create and exchange learnings and insights. DevX Community was seeded by 8 DevX practitioners from GetDX,Gitpod, Honeycomb, Qualtrics, Spotify, Upvest, and Warp. We will carefully expand the community over time to maintain a high-quality forum that is solely dedicated to the world of developer experience.\n\n> Learn more about the community on our new website – <a href=\"https://developerexperience.us\" target=\"_blank\"> developerexperience.us </a>\n\nGitpod is committed to developer experience. DevX Community is the latest addition to a number of activities and formats we have started to help create a better developer experience for every software developer in the world.","metadata":{"source":"https://www.gitpod.io/blog/launching-devx-community","loc":{"lines":{"from":32,"to":38}}}}],["543",{"pageContent":"DevX Conf\n\nDevX Conf is a virtual conference on developer experience that happens every year. DevX practitioners at leading companies discuss their best tools, processes, and latest learnings.\n\n## DevX Pod\n\nDevX Pod features in-depth interviews with DevX experts. Hosts Pauline Narvas and Chris Weichel speak with developer experience leaders to unpack the ins-and-outs of the field.\n\n## DevX Community\n\nDevX community is a curated community for DevX leaders to share their knowledge and learnings.\n\nHead over to <a href=\"https://developerexperience.us\" target=\"_blank\"> our new website </a> to see more","metadata":{"source":"https://www.gitpod.io/blog/launching-devx-community","loc":{"lines":{"from":40,"to":52}}}}],["544",{"pageContent":"---\nauthor: akosyakov, csweichel, rl-gitpod\ndate: Wed, 9 Jun 2021 18:00:00 UTC\nexcerpt: While Gitpod can seamlessly integrate into your workflow in the vast majority of cases, there are times where you may want to access a workspace from localhost\nimage: header-desktop.png\nslug: local-app\nsubtitle:\ntags: [\"Engineering\"]\nteaserImage: header-desktop.png\ntitle: Gitpod Local Companion - localhost is going remote\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\nWhile Gitpod can seamlessly integrate into your workflow in the vast majority of cases, there are times where you may want to access a workspace from localhost and were required to workaround some limitations, particularly with respect to [framework](/docs/introduction/languages/svelte) features such as [live reload](https://github.com/gitpod-io/gitpod/issues/3282).","metadata":{"source":"https://www.gitpod.io/blog/local-app","loc":{"lines":{"from":1,"to":17}}}}],["545",{"pageContent":"Gitpod is pleased to announce a preview release of the _Gitpod Local Companion_ app that is designed to allow localhost access to any TCP port in a remote workspace regardless of protocol.\n\nThe app runs locally and enables automatically tunneled connections to your workspace, either privately or, if required, publicly (on your laptops IP for example).\n\nIn particular, this opens up any environment or framework that assumes localhost access i.e. web frameworks such as Svelte and enables bundlers such as Parcel or Webpack hot reloading without requiring any changes. It also enables the use of non-HTTP protocols, most notably MQTT based brokers or the AMQP based services.\n\nAs a preview release, not all of the features are implemented, most notably the tunneling is 1-way only: local -> workspace.","metadata":{"source":"https://www.gitpod.io/blog/local-app","loc":{"lines":{"from":19,"to":25}}}}],["546",{"pageContent":"As a preview release, not all of the features are implemented, most notably the tunneling is 1-way only: local -> workspace.\n\n> 💡 **Notice:** A lot has improved on local-companion and the port-forwarding aspect since the publication of this blog post. You could also simply open a Gitpod workspace in [VSCode Desktop](https://www.gitpod.io/docs/references/ides-and-editors/vscode#open-a-workspace-in-vs-code-desktop) or any other supported local editor client and your ports would be automatically forwarded for you! See the below links to learn more:\n> - https://www.gitpod.io/docs/references/ides-and-editors#supported-ideeditors\n> - https://www.gitpod.io/docs/configure/workspaces/ports#port-forwarding","metadata":{"source":"https://www.gitpod.io/blog/local-app","loc":{"lines":{"from":25,"to":29}}}}],["547",{"pageContent":"See it in action\n\nAs a simple example, with the _Gitpod Local Companion_ app installed and running, open the standard Svelte template in Gitpod, using this [link](https://gitpod.io/#https://github.com/sveltejs/template) or the Gitpod button [directly](https://github.com/sveltejs/template). This will create an ephemeral environment for you without requiring any local setup or installation. As per the template instructions, run the following:\n\n```shell\nnpm install && npm run dev","metadata":{"source":"https://www.gitpod.io/blog/local-app","loc":{"lines":{"from":31,"to":36}}}}],["548",{"pageContent":"VS Code will detect the service on port 5000 and offer 3 options. Click on the 'Open Browser' icon or navigate to directly to [localhost](http://localhost:5000/) to see 'Hello world!'. Edit app.svelte and the page will live reload with your changes!\n\nWe love feedback here at Gitpod, so please give it a try and let us know what you think!\n\n<div style=\"position: relative; padding-bottom: 77.92207792207792%; height: 0;\"><iframe title=\"Gitpod Local Companion - localhost is going remote - Svelte demo\" src=\"https://www.loom.com/embed/5f229a408b6744dcbc6d592a9d82ff28\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%;\"></iframe></div>","metadata":{"source":"https://www.gitpod.io/blog/local-app","loc":{"lines":{"from":41,"to":45}}}}],["549",{"pageContent":"Installation\n\nTo get started, download the preview release of the _Gitpod Local Companion_ app for your platform (right click, 'Save (Link) As')\n\n- [Mac Intel Chip](https://gitpod.io/static/bin/gitpod-local-companion-darwin) - you will need to grant permission as it is not yet notarised. See <a class=\"no-nowrap\" href=\"https://support.apple.com/en-au/HT202491\">“open an app that hasn’t been notarised or is from an unidentified developer”</a> or click on the app in Finder while holding the Control key down and select 'Open' from the menu and then 'Open' in the prompt.\n- [Mac Apple Silicon](https://gitpod.io/static/bin/gitpod-local-companion-darwin-arm64)\n- [Linux 64 bit](https://gitpod.io/static/bin/gitpod-local-companion-linux)\n- [Linux ARM 64](https://gitpod.io/static/bin/gitpod-local-companion-linux-arm64)\n- [Windows 64 bit](https://gitpod.io/static/bin/gitpod-local-companion-windows.exe)\n- [Windows 32 bit](https://gitpod.io/static/bin/gitpod-local-companion-windows-386.exe)","metadata":{"source":"https://www.gitpod.io/blog/local-app","loc":{"lines":{"from":47,"to":56}}}}],["550",{"pageContent":"Alternatively, in a terminal run the following:\n\n```shell\n  # Mac Intel Chip\n  curl -OL https://gitpod.io/static/bin/gitpod-local-companion-darwin\n  chmod +x ./gitpod-local-companion-darwin\n\n  # Mac Apple Silicon\n  curl -OL https://gitpod.io/static/bin/gitpod-local-companion-darwin-arm64\n  chmod +x ./gitpod-local-companion-darwin-arm64\n\n  # Linux 64 bit\n  curl -OL https://gitpod.io/static/bin/gitpod-local-companion-linux\n  chmod +x ./gitpod-local-companion-linux\n\n  # Linux ARM 64\n  curl -OL https://gitpod.io/static/bin/gitpod-local-companion-linux-arm64\n  chmod +x ./gitpod-local-companion-linux-arm64\n\n  # Windows 64 bit\n  curl -OL https://gitpod.io/static/bin/gitpod-local-companion-windows.exe\n\n  # Windows 32 bit\n  curl -OL https://gitpod.io/static/bin/gitpod-local-companion-windows-386.exe\n```","metadata":{"source":"https://www.gitpod.io/blog/local-app","loc":{"lines":{"from":58,"to":82}}}}],["551",{"pageContent":"Running\n\nTo run it using your local keyring for long term storage of the access token:\n\n```shell\n  ./gitpod-local-companion-[darwin|linux|windows]\n\n\n```\n\nTo run it without storing the access token (it will generate a new token every time);\n\n```shell\n  ./gitpod-local-companion-[darwin|linux|windows] --mock-keyring\n\n\n```\n\nIf you are not logged in to Gitpod, it will take you through that flow. If you haven't run the local app previously it will also ask you to approve access to the control data of all your workspaces, returning a token that grants the access. This token will be stored in your local keyring for future use (unless you specify otherwise).\n\nOnce approval has been granted it will connect to your currently active workspaces and tunnel between the remote workspace and your local environment.","metadata":{"source":"https://www.gitpod.io/blog/local-app","loc":{"lines":{"from":84,"to":104}}}}],["552",{"pageContent":"SSH Access\n\nAdditionally, the _Gitpod Local Companion_ preview release also has basic support for SSH access into your workspace. It currently requires that you have a default SSH key setup in the ~/.ssh directory i.e. id_rsa.pub & id_rsa. The public key will be copied to the workspace to permit access.\n\nThis opens up all the usual SSH-based features, such as secure copying, tunneling and remote execution.\n\nOnce you have installed the _Gitpod Local Companion_ app and connected it to your workspaces, it dynamically creates entries for each workspace in the /tmp/gitpod_ssh_config file. You can use this to SSH into your workspace as follows:\n\n```shell\nssh -F /tmp/gitpod_ssh_config <your-workspace-id e.g.apricot-harrier-####>\n\n\n```\n\nYou will be prompted to add the address to your known hosts file and you will be connected to your workspace!","metadata":{"source":"https://www.gitpod.io/blog/local-app","loc":{"lines":{"from":106,"to":120}}}}],["553",{"pageContent":"What is next?\n\nWe have big plans for the _Gitpod Local Companion_ App! Future features **may** include:\n\n- 2-way tunnelling\n- Listing what workspaces are running\n- Listing what ports are currently tunneled and in which direction (workspace to/from local)\n- Starting/stopping port forwarding from the command line\n- Connecting a local VS Code instance to a workspace\n- SSH into a workspace from the command line in a simple, straight forward way","metadata":{"source":"https://www.gitpod.io/blog/local-app","loc":{"lines":{"from":122,"to":131}}}}],["554",{"pageContent":"---\nauthor: csweichel\ndate: Thu Nov 13 2019 09:00:00 GMT+0000 (UTC)\nexcerpt: Some things just aren't exposed to the internet. Either because we do not want them out in the open, think some on-prem database, or because\nimage: local-services.jpg\nslug: local-services-in-gitpod\ntags: [\"Engineering\"]\nteaserImage: local-services.jpg\ntitle: Using local services in Gitpod\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\nSome things just aren't exposed to the internet. Either because we do not want them out in the open, think some on-prem database, or because they cannot easily be made available like the Docker daemon on your laptop.\nWith your Gitpod workspace running in the cloud it does not have access to local services, which could render Gitpod unsuitable in those cases.","metadata":{"source":"https://www.gitpod.io/blog/local-services-in-gitpod","loc":{"lines":{"from":1,"to":17}}}}],["555",{"pageContent":"There's a range of [different](https://developers.cloudflare.com/argo-tunnel/) [offerings](https://ngrok.com/) that aim to expose local services to the internet. However, they all do so indiscriminately. I.e. if one knows the URL to your now-public endpoint, they have access to your service.\nOn top of that, they do incur additional cost if used often.","metadata":{"source":"https://www.gitpod.io/blog/local-services-in-gitpod","loc":{"lines":{"from":19,"to":20}}}}],["556",{"pageContent":"Inlets to the rescue\n\n![Inlets to the Rescue](../../../static/images/blog/local-services-in-gitpod/concept.png)\n\n[Inlets](https://github.com/inlets/inlets) is a great piece of kit written by [Alex Ellis](https://twitter.com/alexellisuk) which is basically the Open-Source version of the services mentioned above.\n\n> Of course you can [contribute to inlets](https://github.com/inlets/inlets#development) itself using Gitpod.\n\nIt consists of a server which would run in your workspace, and a client which would run on your local machine. The client then acts as a kind of reverse proxy into your local network opening it up to programs running in your Gitpod workspace.\n\nMaking this work involves running both, the server and client:\n\n1. download and run inlets in your workspace:","metadata":{"source":"https://www.gitpod.io/blog/local-services-in-gitpod","loc":{"lines":{"from":22,"to":34}}}}],["557",{"pageContent":"Making this work involves running both, the server and client:\n\n1. download and run inlets in your workspace:\n\n```bash\ncurl -sLS https://get.inlets.dev | sh\nexport token=$(head -c 16 /dev/urandom | shasum | cut -d\" \" -f1)\necho \"token:  $token\"\necho \"remote: $(gp url 8090 | sed -e 's/https/wss/')\"\n./inlets server --port 8080 --control-port=8090 --token=\"$token\"","metadata":{"source":"https://www.gitpod.io/blog/local-services-in-gitpod","loc":{"lines":{"from":34,"to":43}}}}],["558",{"pageContent":"Gitpod will show you notifications that there are new services on the ports `8080` and `8090`. Expose the port `8090` and leave the other one as is.\n\n2. run the inlets client on your local machine. The remote address and token are printed by the commands executed in step one.\n\n```bash\ninlets client --remote=<see-above> --token=<see-above> --upstream=<local-addr>","metadata":{"source":"https://www.gitpod.io/blog/local-services-in-gitpod","loc":{"lines":{"from":46,"to":51}}}}],["559",{"pageContent":"There's a lot going on there, so let's look at things in detail.\nIn the workspace we first download `inlets` using its shell installer (we could have used `brew install inlets`, too, but that's a tad slower). Then we produce a token which prevents unauthorized access to our inlets server. Note that without tokens, the handshake performed by the inlets client and server fails.\n\nWhen starting the inlets server, we separate the control port from the server port. We do this so that we can expose one port, but not the other. This way the control port is exposed to the internet (albeit secured with the access token), but the server port is not. This way we do not expose our local service globally, but only make it available within our Gitpod workspace.","metadata":{"source":"https://www.gitpod.io/blog/local-services-in-gitpod","loc":{"lines":{"from":54,"to":57}}}}],["560",{"pageContent":"On the client side (where I just assumed you already have [inlets installed](https://github.com/inlets/inlets#install-the-cli)), we need to connect to the server we just started. To that end we use the corret remote URL (note the `wss://`) and token.\nWhat you choose as `--upstream` depends on which kind of service you want to expose. Suppose you had a webserver running on port 8080 (e.g. `curl lama.sh | sh`), then this would be `--upstream localhost:8080`.","metadata":{"source":"https://www.gitpod.io/blog/local-services-in-gitpod","loc":{"lines":{"from":59,"to":60}}}}],["561",{"pageContent":"Example 1: your local Docker daemon\n\nRunning a container engine like Docker or `containerd` in a Gitpod workspace is still [work-in-progress](https://github.com/gitpod-io/gitpod/issues/755). Until that's possible your only recurse is to connect to a remote daemon.\nUsually that daemon would run somewhere in the cloud, too, e.g. in your dev-cluster. However, some of us don't have a Kubernetes cluster laying around or just need access to Docker to try something real quick.\n\n> This is _not_ how we plan to ultimatively support Docker/other containers in a Gitpod workspace.\n\nUsing inlets you can make the Docker enging running on your local machine (or in your local network) available in your Gitpod workspace.\n\nI've gone ahead and prepared a prepared an [example repository](https://github.com/csweichel/gitpod-goes-local/tree/docker) that demonstrates this idea:","metadata":{"source":"https://www.gitpod.io/blog/local-services-in-gitpod","loc":{"lines":{"from":62,"to":71}}}}],["562",{"pageContent":"I've gone ahead and prepared a prepared an [example repository](https://github.com/csweichel/gitpod-goes-local/tree/docker) that demonstrates this idea:\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/csweichel/gitpod-goes-local/tree/docker)\n\nOnce the workspace is up and running, follow the instructions in the upper-left terminal to complete the setup.","metadata":{"source":"https://www.gitpod.io/blog/local-services-in-gitpod","loc":{"lines":{"from":71,"to":75}}}}],["563",{"pageContent":"Example 2: Home Automation and IoT\n\nSuppose you're developing a [Flutter based app](https://medium.com/@jacksonz666/gitpod-flutter-productivity-on-the-go-for-mobile-app-developers-cc2495049d52) for your disruptive new smarthome product.\nChances are that the device side of that product isn't exposed to the internet just yet, but only available in your local network.\nIf that thing, as in Internet of Things, is speaking something akin to HTTP (like Yamaha's MusicCast or anything gRPC based) you could just replicate the setup above, except that you'd substitute Docker for the API you're trying to talk to.\n\nWhile there are plenty of other services in this space that speak HTTP, think InfluxDB, OpenHAB or Prometheus, some don't.\nMost notably [MQTT based](https://en.wikipedia.org/wiki/MQTT) broker or the [bulk](https://www.eclipse.org/hono/) of [AMQP](https://en.wikipedia.org/wiki/Advanced_Message_Queuing_Protocol) based services.","metadata":{"source":"https://www.gitpod.io/blog/local-services-in-gitpod","loc":{"lines":{"from":77,"to":84}}}}],["564",{"pageContent":"Inlets does not [support tunneling TCP](https://github.com/inlets/inlets-pro-pkg). There is yet another project that can shovel TCP through an HTTP tunnel: [chisel](https://github.com/jpillora/chisel).\nBy combining the two, you can have programs in your workspace talk to TCP services in your local network/on your machine.","metadata":{"source":"https://www.gitpod.io/blog/local-services-in-gitpod","loc":{"lines":{"from":86,"to":87}}}}],["565",{"pageContent":"Wrapping up\n\nThis day and age it's rare enough to find a situation where the service you want to talk to isn't available on the Internet (outside of corporate policy, that is).\nIf you do find yourself in that situation however, that's no reason to relinquish the convenience and benefits of Gitpod.","metadata":{"source":"https://www.gitpod.io/blog/local-services-in-gitpod","loc":{"lines":{"from":89,"to":92}}}}],["566",{"pageContent":"---\nauthor: svenefftinge, JohannesLandgraf, csweichel\ndate: Tue Dec 09 2020 8:00:00 GMT+0000 (UTC)\nexcerpt: Fully automated developer environments will be the standard for professional developers in 5-10 years.\nimage: teaser.jpg\nslug: moving-software-development-to-the-cloud\nsubtitle: Gitpod & GitHub Codespaces\ntags: [\"Company building\"]\nteaserImage: teaser.jpg\ntitle: Moving software development to the cloud ☁️\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>","metadata":{"source":"https://www.gitpod.io/blog/moving-software-development-to-the-cloud","loc":{"lines":{"from":1,"to":15}}}}],["567",{"pageContent":"<script context=\"module\">\n  export const prerender = true;\n</script>\n\nAs [described earlier this year](/blog/github-codespaces), Microsoft's investment into GitHub Codespaces is helping to move more into the mainstream what Gitpod has been pioneering on during the past years. This week is GitHub Universe which is why we thought it's time to share some additional context and information around the rapidly spreading idea of automated, cloud-based dev environments within the developer community. Furthermore we'd like to congratulate GitHub for joining us in moving software development to the cloud 🙌\n\nSince [we've started building Gitpod in July-2017](/blog/gitpod-remote-developer-environment), we firmly believe that fully-automated developer environments will be the standard for professional developers in 5-10 years. With a big player like Microsoft entering the market this whole space will gain additional velocity 🚀","metadata":{"source":"https://www.gitpod.io/blog/moving-software-development-to-the-cloud","loc":{"lines":{"from":15,"to":21}}}}],["568",{"pageContent":"We certainly welcome the additional push Codespaces will bring, but it is important to communicate how [Gitpod compares to Codespaces](/vs/github-codespaces).\n\n<h2>Gitpod is Open-Source, Multi-Cloud, and Works With GitLab, GitHub, and Bitbucket</h2>\n\nGitpod is an **open-source platform** which means you get full transparency over how Gitpod works and can even contribute to it. The [vibrant open-source community](https://community.gitpod.io/) of Gitpod welcomes everyone, and empowers them to develop additional features without restrictions.\n\nFurthermore, you can run Gitpod on your own infrastructure and any cloud provider. **Gitpod seamlessly works with GitHub, GitLab and Bitbucket** and can be deployed to public, private or hybrid clouds, neatly integrating into your infrastructure, **giving you full control of your system and your source code**.\n\n<h2>Gitpod is Powerful</h2>","metadata":{"source":"https://www.gitpod.io/blog/moving-software-development-to-the-cloud","loc":{"lines":{"from":23,"to":31}}}}],["569",{"pageContent":"<h2>Gitpod is Powerful</h2>\n\nAs a highly-optimized Kubernetes application **Gitpod is built on next-gen container technology** instead of VMs. This allows Gitpod to be extremely resource efficient giving you the best 💥 for the 💵\n\nCompared to virtual machines, isolating workspace containers from each other is harder. At Gitpod we’ve integrated the latest container isolation mechanisms that securely allow users to benefit from the resource efficiency of containers while still having root privileges. For the user this means full access to `sudo` and `docker` 🐳 Here’s a [great technical presentation](https://youtu.be/l4I2TVAnBuw?t=174) explaining how we make this happen.\n\nThe result is that Gitpod offers more powerful dev environments with a small ecological footprint. Furthermore, we run Gitpod.io on a 100% carbon-neutral cloud service ❤️🌍\n\n<h2>Gitpod is Fast</h2>","metadata":{"source":"https://www.gitpod.io/blog/moving-software-development-to-the-cloud","loc":{"lines":{"from":31,"to":39}}}}],["570",{"pageContent":"The result is that Gitpod offers more powerful dev environments with a small ecological footprint. Furthermore, we run Gitpod.io on a 100% carbon-neutral cloud service ❤️🌍\n\n<h2>Gitpod is Fast</h2>\n\nGitpod is not only extremely fast because of the higher efficiency, but also because of what we call [prebuilds](/docs/configure/projects/prebuilds). Let’s take a closer look.\n\nThe metric that matters here is the time it takes until a dev environment is **ready-to-code**. Ready-to-code means that developers can actually start writing code and don’t have to wait for builds, dependencies to download or code generators to run.\n\nWith GitHub Codespaces and other solutions whenever you start a new dev environment, you are left with a raw copy of the code. So before you start writing code, you’ll need to run a bunch of processes and wait until they are finished.\n\nInstead Gitpod prebuilds dev environments when a new commit is pushed to the remote repository. The following diagram illustrates the idea:","metadata":{"source":"https://www.gitpod.io/blog/moving-software-development-to-the-cloud","loc":{"lines":{"from":39,"to":49}}}}],["571",{"pageContent":"Instead Gitpod prebuilds dev environments when a new commit is pushed to the remote repository. The following diagram illustrates the idea:\n\n![Prebuilds Diagram](https://user-images.githubusercontent.com/372735/101493570-870aa000-3966-11eb-9fe1-e32eb80449f0.png)\n\nThe advantages of having your dev environments prebuilt can not be overstated. For the [vscode repository](https://github.com/gitpod-io/vscode) we measured a 15x difference.\n\nWe believe prebuilding dev environments the way Gitpod does it, is key towards [“dev environments as code”](/blog/dev-env-as-code). Without prebuilds, developers have to manually maintain and reuse their dev environments, because of the manual labour put into them. Those stateful environments drift apart over time and teams are once again working in very different setups, wasting time and energy with the resulting problems and surprises. With Gitpod \"it works (or doesn't work) on my machine is a thing of the past.\n\n<h2>The Road Ahead</h2>","metadata":{"source":"https://www.gitpod.io/blog/moving-software-development-to-the-cloud","loc":{"lines":{"from":49,"to":57}}}}],["572",{"pageContent":"<h2>The Road Ahead</h2>\n\nThe real competition is the habit of maintaining stateful environments on overpowered local machines. We welcome GitHub and Microsoft to join forces in convincing developers around the world about the workflow and productivity benefits of automated, cloud-based dev environments 🥰\n\nWe are excited about the things we announced yesterday around [Root, Docker and VS Code](/blog/root-docker-and-vscode) and are already working on big plans we have for next year 🤓\n\nEphemeral dev environments are going to democratize software development. Allowing anyone to get into a productive coding state on any of their projects and branches with the click of a button is a massive productivity boost. In addition we keep the entire devops pipeline in a centralized, managed system, which provides more security and observability to today’s developer teams.","metadata":{"source":"https://www.gitpod.io/blog/moving-software-development-to-the-cloud","loc":{"lines":{"from":57,"to":63}}}}],["573",{"pageContent":"We will continue to focus on automating the provisioning of dev environments that blend in with your existing workflow, integrate into your existing infrastructure and run on any cloud or your own clusters. [We do all of this in the open](https://github.com/gitpod-io/gitpod) and invite everyone to join us in building an open platform for secure, collaborative and always-ready-to-code developer environments for all developers.\n\nIf you want to learn more you can start with our [Introduction to Gitpod](/docs).","metadata":{"source":"https://www.gitpod.io/blog/moving-software-development-to-the-cloud","loc":{"lines":{"from":65,"to":67}}}}],["574",{"pageContent":"---\nauthor: whummer, nancy-chauhan\ndate: Thursday, 15 September 2022 11:00:00 UTC\ntitle: LocalStack x Gitpod - Run cloud applications with LocalStack and Gitpod\nslug: localstack-and-gitpod\nexcerpt: Developing and running cloud applications is simplified with Gitpod and LocalStack ✨ Gitpod’s fully automated, ephemeral workspaces provide a great developer experience. LocalStack accelerates your dev and test feedback loop.\ntags: [\"Gitpod updates\"]\nteaserImage: header.jpg\nimage: header.jpg\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\nShipping applications to production requires them to be battle-tested in the dev environment. The dev environment should mimic the production environment as closely as possible. This comes with a cost: testing cloud applications is cumbersome as they have many moving parts. For instance, if you build a simple Lambda function in AWS, you might use services such as CloudWatch, S3, IAM, etc.","metadata":{"source":"https://www.gitpod.io/blog/localstack-and-gitpod","loc":{"lines":{"from":1,"to":16}}}}],["575",{"pageContent":"Imagine configuring your project and provisioning these cloud resources in a test environment every time for developing new features. It’s a tiring and time-consuming cycle 😫 -- making the entire development and test feedback loop slow and inefficient.\n\nDeveloping and running cloud applications is simplified with Gitpod and LocalStack ✨ Gitpod’s fully automated, ephemeral workspaces provide a great developer experience. When you open a new workspace, all the required tools and packages get installed. You can also parallelly work on features in multiple ephemeral workspaces, which can be shared with your peers.\nLocalStack accelerates your dev and test feedback loop. It provides you with a fully functional local AWS cloud stack that gives immediate feedback on your changes without waiting on cloud resources. This saves you time and resources.","metadata":{"source":"https://www.gitpod.io/blog/localstack-and-gitpod","loc":{"lines":{"from":18,"to":21}}}}],["576",{"pageContent":"In this blog, we describe how you can leverage Gitpod and LocalStack to set up a cloud development workspace without requiring access to your production cloud - allowing you to get productive within seconds.\n\n- [What is LocalStack](#What-is-LocalStack?)\n- [What is Gitpod](#what-is-gitpod)\n- [How it works - the combined power of LocalStack and Gitpod](#How-it-works---the-combined-power-of-LocalStack-and-Gitpod)\n- [Example Scenario - Sample application on LocalStack x Gitpod](#example-scenario---sample-application-on-localstack-x-gitpod)\n- [Key Benefits](#key-benefits)\n\n# What is LocalStack?","metadata":{"source":"https://www.gitpod.io/blog/localstack-and-gitpod","loc":{"lines":{"from":23,"to":31}}}}],["577",{"pageContent":"# What is LocalStack?\n\nLocalStack is a cloud development platform that aims to turbocharge dev&test feedback loops, team collaboration, and easily reproducible ephemeral cloud environments. At its core, LocalStack provides a fully functional local AWS cloud stack that ships as a Docker image and provides some 70+ high-quality emulated cloud services (e.g., Lambda, S3, DynamoDB, etc). With LocalStack, cloud applications can be developed and executed entirely on your local machine, or in a CI pipeline or other ephemeral environment, without ever talking to the real cloud, reducing dev&test cycles from minutes to seconds.\n\nLocalStack offers entirely new ways for local debugging of Lambdas and containerized apps (e.g., ECS/EKS), as well as some advanced new features that can radically improve productivity and team collaboration patterns.","metadata":{"source":"https://www.gitpod.io/blog/localstack-and-gitpod","loc":{"lines":{"from":31,"to":35}}}}],["578",{"pageContent":"There is also a large and growing ecosystem of tools that LocalStack natively integrates with - from Infrastructure-as-Code (IaC) frameworks like Terraform or Pulumi, to application frameworks like Serverless or Architect, to a whole suite of tools provided by AWS itself (CDK, SAM, Copilot, Chalice, etc).\n\n# What is Gitpod ?\n\nGitpod is an open-source remote development platform for remote development. It provides an automated setup with cloud-based, remote developer environments connected with a developer’s [editing experience of choice](https://www.gitpod.io/docs/references/ides-and-editors), making developer experiences better.","metadata":{"source":"https://www.gitpod.io/blog/localstack-and-gitpod","loc":{"lines":{"from":37,"to":41}}}}],["579",{"pageContent":"Rather than having a single static environment (like your local machine), Gitpod encourages you to codify your dev environment as code. With your project codified, you’ll be able to spin up a new workspace, start coding and throw away the workspace when you’re done. You can have multiple workspaces with different contexts open at once - one for your feature, one for a bug or one for your code review directly in Gitpod.\n\n# How it works - the combined power of LocalStack and Gitpod\n\nCombining the development environment of Gitpod with the cloud sandbox provided by LocalStack minimizes friction when developing cloud applications and getting up and running with cloud development within a few minutes.\n\nThe figure below illustrates how the components fit together - on the left-hand side, we can see the user’s machine and their Web browser, whereas, on the right-hand side, we see the Gitpod workspace running in the Gitpod backend infrastructure.","metadata":{"source":"https://www.gitpod.io/blog/localstack-and-gitpod","loc":{"lines":{"from":43,"to":49}}}}],["580",{"pageContent":"The figure is also segmented vertically - in the upper part, we see the code view, i.e., the Gitpod developer environment. Gitpod is not a browser-based IDE but provides fully-automated workspaces (think Linux workstations) in the cloud. You can access them with the code editor of your choice. Gitpod works best with VS Code (browser and desktop), JetBrains IDEs like IntelliJ or GoLand, and Vim. New [IDE integrations](https://www.gitpod.io/docs/references/ides-and-editors) are added over time.\n\nThe lower part contains the runtime view, i.e., an instantiation of your app that can be used for previewing the application logic and quickly iterating on the logic. The runtime makes use of a LocalStack container that runs inside the Gitpod environment - and allows you to conveniently deploy your cloud application assets into this sandbox, to then preview the results.\n\n![Architecture Diagram](../../../static/images/blog/localstack-and-gitpod/figure.png)","metadata":{"source":"https://www.gitpod.io/blog/localstack-and-gitpod","loc":{"lines":{"from":51,"to":55}}}}],["581",{"pageContent":"![Architecture Diagram](../../../static/images/blog/localstack-and-gitpod/figure.png)\n\nThe screenshot below illustrates how things fit together when spinning up this Gitpod workspace. In the tree view on the left-hand side of VS Code in the browser, we can see the files of your application. The main view shows the source code of your app (e.g., an AWS Lambda handler file), and the terminal view in the lower part shows the log output of the LocalStack Docker instance running in the environment.\n\n<figure class=\"flex flex-col items-center text-center\">\n  <img src=\"/images/blog/localstack-and-gitpod/vs-code-browser.png\" alt=\"Requests are passing through different stages\" width=\"800\" />\n</figure>\n\nThis setup gives us the full power of a cloud development environment where we can develop our AWS cloud app - without the need for any local installation whatsoever, and without ever talking to the production environment in the cloud (hence, not incurring any cloud costs).","metadata":{"source":"https://www.gitpod.io/blog/localstack-and-gitpod","loc":{"lines":{"from":55,"to":63}}}}],["582",{"pageContent":"Gitpod automates the steps for installation of your tools and packages and ensures servers and processes are running, enabling you to develop your cloud application on multiple ephemeral workspaces.LocalStack helps you to test and deploy your cloud application by emulating the AWS cloud services.\n\nLet’s dive into a concrete example in a bit more detail in the next section 🚀","metadata":{"source":"https://www.gitpod.io/blog/localstack-and-gitpod","loc":{"lines":{"from":65,"to":67}}}}],["583",{"pageContent":"Example Scenario - Sample application on LocalStack x Gitpod\n\nWe demonstrate a sample application, provided as an open source project (https://github.com/whummer/localstack-gitpod-demo), that illustrates how cloud apps can be seamlessly developed using Gitpod and LocalStack.\n\nThe goal of this example is to develop an AWS cloud application that represents a classical asynchronous request worker pattern. Below is a simplified architecture diagram of the application that shows the different components of the application, and how they fit together:\n\n<figure class=\"flex flex-col items-center text-center\">\n  <img src=\"/images/blog/localstack-and-gitpod/architecture.png\" alt=\"Requests are passing through different stages\" width=\"700\" />\n</figure>","metadata":{"source":"https://www.gitpod.io/blog/localstack-and-gitpod","loc":{"lines":{"from":69,"to":77}}}}],["584",{"pageContent":"<figure class=\"flex flex-col items-center text-center\">\n  <img src=\"/images/blog/localstack-and-gitpod/architecture.png\" alt=\"Requests are passing through different stages\" width=\"700\" />\n</figure>\n\n> Note: This is a simplified and synthetic application for demonstration purposes, but it is easy to see that a similar application architecture could be used for different real-life purposes - e.g., in a helpdesk application that processes user requests, or some order fulfillment system that processes purchases of a customer. The key part is - even though the application will eventually be deployed on AWS cloud, we can develop and run this entire application with LocalStack running in Gitpod, without ever interacting with a costly production environment in the cloud.","metadata":{"source":"https://www.gitpod.io/blog/localstack-and-gitpod","loc":{"lines":{"from":77,"to":81}}}}],["585",{"pageContent":"Once deployed on LocalStack, the sample application will spin up a simple Web user interface to create user requests, which are then processed by the application logic. The timestamps and status updates can be seen in the screenshot below - notice how the request is passing through the different stages - from QUEUED, to PROCESSING, to FINISHED.\n\n<figure class=\"flex flex-col items-center text-center\">\n  <img src=\"/images/blog/localstack-and-gitpod/requests.png\" alt=\"Requests are passing through different stages\" width=\"700\" />\n</figure>","metadata":{"source":"https://www.gitpod.io/blog/localstack-and-gitpod","loc":{"lines":{"from":83,"to":87}}}}],["586",{"pageContent":"<figure class=\"flex flex-col items-center text-center\">\n  <img src=\"/images/blog/localstack-and-gitpod/requests.png\" alt=\"Requests are passing through different stages\" width=\"700\" />\n</figure>\n\n> Note that - in order for the request to go through these stages, it follows all the steps outlined above - entering through an API Gateway, being processed by an application handler Lambda function that puts a new item to an SQS queue, being picked up by another Lambda that starts a StepFunctions state machine workflow with two steps - a processing Lambda that updates the state in a DynamoDB table, and an archiving Lambda that puts the final result to an S3 bucket, making it available for download by the user. All the steps of this non-trivial application are being executed within the LocalStack container, running in the Gitpod environment.","metadata":{"source":"https://www.gitpod.io/blog/localstack-and-gitpod","loc":{"lines":{"from":87,"to":91}}}}],["587",{"pageContent":"Technical Details\n\nLet’s dive into some of the technical details of this example, and how to run the sample cloud application entirely within the Gitpod environment, using LocalStack.\n\n1. First open the [sample application](https://github.com/whummer/localstack-gitpod-demo) in [Gitpod Workspace](https://gitpod.io/workspaces/).\n2. On opening the demo, [`gitpod.yml`](https://github.com/whummer/localstack-gitpod-demo/blob/main/.gitpod.yml) configures the project by installing the tools and running the app.\n3. Upon deployment, the sample app opens a network port 3000 that serves the Web application of the example.\n4. Gitpod opens the demo app in the browser that sends API requests to the LocalStack edge endpoint on `4566` port, which then gets forwarded to the LocalStack instance running within the remote Gitpod environment.","metadata":{"source":"https://www.gitpod.io/blog/localstack-and-gitpod","loc":{"lines":{"from":93,"to":100}}}}],["588",{"pageContent":"Congratulations 🎉 Now, you are ready to develop and run cloud applications using Gitpod and LocalStack. You can also watch the following video, which thoroughly walks you through the whole process:\n\n`youtube: CihxsFcHyEk`","metadata":{"source":"https://www.gitpod.io/blog/localstack-and-gitpod","loc":{"lines":{"from":102,"to":104}}}}],["589",{"pageContent":"Key Benefits\n\nThere are a number of key benefits of using Gitpod and LocalStack to develop cloud applications:","metadata":{"source":"https://www.gitpod.io/blog/localstack-and-gitpod","loc":{"lines":{"from":106,"to":108}}}}],["590",{"pageContent":"- **Reproducibility:** The setup with the Gitpod workspace running LocalStack makes it extremely easy to create a reproducible environment with all application artifacts pre-configured, allowing team members to become productive within literally a few minutes.\n- **Collaboration:** You can also share running workspaces which makes it possible to quickly look at a workspace together with a (remote) colleague. You can read more about it in [Collaboration & Sharing of Workspaces doc](https://www.gitpod.io/docs/sharing-and-collaboration).\n- **Seamless transition into CI:** The application configuration can be taken 1:1 and directly transferred to a CI/CD pipeline that deploys the application and executes integration tests to ensure quality, as the business logic of the cloud app evolves over time.","metadata":{"source":"https://www.gitpod.io/blog/localstack-and-gitpod","loc":{"lines":{"from":110,"to":112}}}}],["591",{"pageContent":"- **Cost savings:** Last but not least, it becomes very easy to run your applications in a sandbox environment, without ever talking to the real cloud, hence not incurring any costs for using any of the real cloud resources.","metadata":{"source":"https://www.gitpod.io/blog/localstack-and-gitpod","loc":{"lines":{"from":113,"to":113}}}}],["592",{"pageContent":"If you have any questions about configuring and running your project, drop by Gitpod’s [community Discord server](https://gitpod.io/chat) or LocalStack [Slack Community](https://localstack-community.slack.com/). We would love to hear your feedback in the Community.","metadata":{"source":"https://www.gitpod.io/blog/localstack-and-gitpod","loc":{"lines":{"from":115,"to":115}}}}],["593",{"pageContent":"Resources and Further Reading\n\n- [LocalStack Website](https://localstack.cloud)\n- [Gitpod Documentation](https://www.gitpod.io/docs)\n- [LocalStack GitHub](https://github.com/localstack/localstack)\n- [Gitpod x LocalStack Sample application GitHub Demo](https://github.com/whummer/localstack-gitpod-demo)\n- [DevX Pod - The inner feedback loop w/ Waldemar Hummer & Oleg Šelajev](https://devxpod.buzzsprout.com/1895030/11324216-the-inner-feedback-loop-w-waldemar-hummer-oleg-selajev)","metadata":{"source":"https://www.gitpod.io/blog/localstack-and-gitpod","loc":{"lines":{"from":117,"to":123}}}}],["594",{"pageContent":"---\nauthor: csweichel\ndate: Thu Oct 04 2018 12:47:53 GMT+0000 (UTC)\nexcerpt: Gitpod is a web-based IDE. As such one would think it only works for web-based projects or anything else that does not require a native UI\nimage: virtual-x-sever-running-on-a-remote-desktop-client.png\nslug: native-ui-with-vnc\nsubtitle: Cloud IDEs aren't limited to web apps\ntags: [\"Engineering\"]\ntitle: Developing native UI applications in Gitpod\nurl: https://medium.com/gitpod/developing-native-ui-applications-in-gitpod-15af2967c24e\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\nGitpod is a web-based IDE. As such one would think it only works for web-based projects or anything else that does not require a native UI. However, there’s still a plethora of native UI applications around and many of them are here to stay. In this article we’ll go through how to use Gitpod for developing native desktop UI applications.","metadata":{"source":"https://www.gitpod.io/blog/native-ui-with-vnc","loc":{"lines":{"from":1,"to":17}}}}],["595",{"pageContent":"![VSCode in Gitpod](../../../static/images/blog/native-ui-with-vnc/virtual-x-sever-running-on-a-remote-desktop-client.png)\n\nA few days ago [Gero introduced Docker builds to Gitpod](/blog/docker-in-gitpod) with which you can bring your own Dockerfile (instead of a pre-built image), and Gitpod will build the image for you. We’ll use that feature to setup a cloud-based developer environment for native UI applications.","metadata":{"source":"https://www.gitpod.io/blog/native-ui-with-vnc","loc":{"lines":{"from":19,"to":21}}}}],["596",{"pageContent":"Hello World\n\nLet’s use Gitpod to write <a class=\"no-nowrap\" href=\"https://github.com/csweichel/gitpod-hello-ui-demo\">a simple desktop-native application in Go</a> using [libui](https://github.com/andlabs/libui). First, we create a GitHub repo and a [little bit of configuration](https://github.com/csweichel/gitpod-hello-ui-demo/commit/fea580735c09fa704531a810e8ec7ca6a5c03a88): we need a Dockerfile to install libui’s dependencies (see below), and we need to tell Gitpod to use that Dockerfile.\n\n```dockerfile\nFROM gitpod/workspace-full-vnc\nRUN sudo apt-get update && \\\n    sudo apt-get install -y libgtk-3-dev && \\\n    sudo rm -rf /var/lib/apt/lists/*","metadata":{"source":"https://www.gitpod.io/blog/native-ui-with-vnc","loc":{"lines":{"from":23,"to":31}}}}],["597",{"pageContent":"This Dockerfile uses the gitpod/workspace-full-vnc image which supports the setup necessary to run X11 and VNC in Gitpod. It runs a [web-based VNC viewer](https://novnc.com) on port 6080 — during startup, Gitpod will ask you if you want to open this page.\n\n![The Hello World UI example running in Gitpod](https://cdn-images-1.medium.com/max/6720/1*8xUjJfd3pV0QXyK-ytyhwA.png)_The Hello World UI example running in Gitpod_","metadata":{"source":"https://www.gitpod.io/blog/native-ui-with-vnc","loc":{"lines":{"from":34,"to":36}}}}],["598",{"pageContent":"Native UI in Gitpod = X11 + VNC\n\n[Gitpod](https://gitpod.io/) runs on Linux, so we need an X11 server that our UI application can connect to. As we do not have a physical display attached, we’ll use a framebuffer based X server, namely Xvfb. Using [x11vnc](http://www.karlrunge.com/x11vnc/), we can serve the virtual screen of the X server to a VNC client. There are a few VNC clients that run in the browser out there, but we’ll go with one that’s battle tested: [novnc](https://novnc.com/info.html). The combination of Xvfb, x11vnc and novnc is a proven one, and it happens to be the same that e.g. [Janitor](https://janitor.technology/) relies on.","metadata":{"source":"https://www.gitpod.io/blog/native-ui-with-vnc","loc":{"lines":{"from":38,"to":40}}}}],["599",{"pageContent":"To make this setup work in Gitpod, we first create a Docker image that has the required tools installed, and a small bash script to tie things together. I went ahead and prepared those things in the [workspace images repo](https://github.com/gitpod-io/workspace-images/blob/d43c719bb2ff7b6849c0456fe21e3ca06c20168f/chunks/tool-vnc/Dockerfile#L2). Any Gitpod workspace started using the workspace-full-vnc image, has a DISPLAY environment variable set in the .bashrc and comes with a running X11 server. No need for any manual setup.","metadata":{"source":"https://www.gitpod.io/blog/native-ui-with-vnc","loc":{"lines":{"from":42,"to":42}}}}],["600",{"pageContent":"Let’s go big: running Visual Studio Code in Gitpod\n\nUsing this setup, we can build and [run Visual Studio Code in Gitpod](https://gitpod.io/#github.com/microsoft/vscode). VS Code needs a few more libraries than the bare-bones X11 setup we’ve built so far. But again those libraries are easy enough to install in a Dockerfile:\n\n```dockerfile\nFROM gitpod/workspace-full-vnc\n\nRUN sudo apt-get update && \\\n    sudo apt-get install -y libx11-dev libxkbfile-dev libsecret-1-dev libgconf2–4 libnss3 && \\\n    sudo rm -rf /var/lib/apt/lists/*\n```\n\nI added this setup to [definitely-gp](https://github.com/gitpod-io/definitely-gp/tree/master/vscode), so that when you open the VS code repository in Gitpod, it will build the application, and start it. To see and interact with the application, open the noVNC session that’s served on port 6080:\n\n![How to open noVNC served on port 6080](https://cdn-images-1.medium.com/max/2000/1*-yHSkPGNR6Vs07MjLKQAUA.gif)","metadata":{"source":"https://www.gitpod.io/blog/native-ui-with-vnc","loc":{"lines":{"from":44,"to":58}}}}],["601",{"pageContent":"Conclusion\n\nBy plugging together a handful of tools we can develop native UI applications in Gitpod, and stay in the browser altogether. Naturally, this comes with a few limitations, e.g. at the moment this is Linux only, so testing on different platforms is not feasible. Also, noVNC disconnects from the VNC server every now and then; reloading noVNC brings it back.\n\nSurprisingly, frame-rate is not one of those limitations: you could [open a browser inside a Gitpod](https://gitpod.io/#https://github.com/csweichel/gitpod-browser-demo) and watch YouTube videos; it’s best you pick one without sound, though. :)","metadata":{"source":"https://www.gitpod.io/blog/native-ui-with-vnc","loc":{"lines":{"from":60,"to":64}}}}],["602",{"pageContent":"---\nauthor: svenefftinge, JohannesLandgraf\ndate: Thu, 08 Apr 2021 14:00:00 UTC\nexcerpt: Our focus has always been to remove friction from the developer experience. Today we announce a new funding round, our new brand, several product milestones, and DevX Conf.\nimage: teaser.jpg\nslug: next-chapter-for-gitpod\nsubtitle:\nteaserImage: teaser.jpg\ntags: [\"Company building\"]\ntitle: Next Chapter for Gitpod\n---\n\n<script context=\"module\">\n  import LinkIconExternal from \"$lib/components/ui-library/link-icon-external.svelte\";\n\n  export const prerender = true;\n</script>\n\n<style lang=\"postcss\">\n h2 {\n    margin-top: var(--small);\n    margin-bottom: var(--x-small);\n  }\n\n  img[src$=\"funding.jpg\"] {\n    margin-top: var(--large);\n  }\n</style>","metadata":{"source":"https://www.gitpod.io/blog/next-chapter-for-gitpod","loc":{"lines":{"from":1,"to":28}}}}],["603",{"pageContent":"<style lang=\"postcss\">\n h2 {\n    margin-top: var(--small);\n    margin-bottom: var(--x-small);\n  }\n\n  img[src$=\"funding.jpg\"] {\n    margin-top: var(--large);\n  }\n</style>\n\nAt Gitpod our focus has always been to remove all friction from the developer experience and empower developers to be always ready-to-code. Today we are excited to announce a $13m funding round led by [General Catalyst](https://www.generalcatalyst.com/team/dr-steve-herrod), a fully revamped visual & brand identity as well as several product milestones aimed at defining a new product category in modern software development.\n\n![An enter key on its own](../../../static/images/blog/next-chapter-for-gitpod/funding.jpg)","metadata":{"source":"https://www.gitpod.io/blog/next-chapter-for-gitpod","loc":{"lines":{"from":28,"to":41}}}}],["604",{"pageContent":"Funding\n\nWe did not need to raise money and actually did not plan for it. We reconsidered when [Steve Herrod](https://www.generalcatalyst.com/team/dr-steve-herrod) reached out last November. The first thing he mentioned during our inital call was that he spent the night before configuring and automating his Python environment with Gitpod and was blown away by the automation possibilities. His experience and personality are a 100% match with Gitpod and we feel great adding him as our first external board member. Steve and General Catalyst on our side let us accelerate our roadmap and continue to build out a fully-distributed world class team ([we’re hiring](/careers)) to move software development to the cloud. Next to General Catalyst all of our early backers participated in the round including Speedinvest, Crane Venture Partners and Vertex Ventures. Thank you for your continous support 🙌","metadata":{"source":"https://www.gitpod.io/blog/next-chapter-for-gitpod","loc":{"lines":{"from":43,"to":45}}}}],["605",{"pageContent":"<div class=\"mt-xx-small mb-x-large max-w-4xl my-small mx-auto lg:my-x-huge\">\n  <LinkIconExternal href=\"https://www.gitpod.io/direction\" icon=\"🗺️\">Gitpod's Direction</LinkIconExternal>\n</div>\n\n![A mug with the Gitpod logo](../../../static/images/blog/next-chapter-for-gitpod/brand.jpg)","metadata":{"source":"https://www.gitpod.io/blog/next-chapter-for-gitpod","loc":{"lines":{"from":47,"to":51}}}}],["606",{"pageContent":"Brand\n\nWe believe there are standards to be set when it comes to establishing brands in developer tooling. Over the last 2 months we set out to institutionalise design as a key part of the company and will continue to work closely together with our friends at [MAD](https://mad.ac) as well as [Vic](https://twitter.com/killnicole) - giving our visual identity a style & feel that is on par with our backend architecture. What we launch today is a back to basics approach where we present a complex, feature-rich developer tool in a clear and simple way. On the way we also learned about kumquats! 🍊\n\n<div class=\"mt-xx-small mb-x-large max-w-4xl my-small mx-auto lg:my-x-huge\">\n  <LinkIconExternal href=\"https://www.gitpod.io/values\" icon=\"✨\">Brand &amp; Values</LinkIconExternal>\n</div>\n\n![A monitor with three open windows](../../../static/images/blog/next-chapter-for-gitpod/product.jpg)","metadata":{"source":"https://www.gitpod.io/blog/next-chapter-for-gitpod","loc":{"lines":{"from":53,"to":61}}}}],["607",{"pageContent":"Product\n\nProduct is at the core of everything we do. We believe that by 2023 ephemeral cloud-based developer environments will be as common as CI/CD is today. With our new product updates we take a big step towards realizing that vision. Starting today we willl switch to VS Code as the default editing experience in Gitpod. We are also announcing general availability of sudo privileges and Docker support allowing developers to build Docker images and run containers within their Gitpod workspace. This is based on advanced [namespace layering technology](https://www.youtube.com/watch?v=iYLCHQgj0fE) and a great collaborative effort with our friends from Kinvolk. Lastly, we completely rebuilt the dashboard frontend to speed-up developers’ workflows and bring our UX and UI to 2021 ✨\n\n<div class=\"mt-xx-small mb-x-large max-w-4xl my-small mx-auto lg:my-x-huge\">\n  <LinkIconExternal href=\"https://www.gitpod.io/roadmap\" icon=\"🛣\">Product Roadmap</LinkIconExternal>\n</div>","metadata":{"source":"https://www.gitpod.io/blog/next-chapter-for-gitpod","loc":{"lines":{"from":63,"to":69}}}}],["608",{"pageContent":"<div class=\"mt-xx-small mb-x-large max-w-4xl my-small mx-auto lg:my-x-huge\">\n  <LinkIconExternal href=\"https://www.gitpod.io/roadmap\" icon=\"🛣\">Product Roadmap</LinkIconExternal>\n</div>\n\n![The DevX Conf logo](../../../static/images/blog/next-chapter-for-gitpod/devxconf.jpg)","metadata":{"source":"https://www.gitpod.io/blog/next-chapter-for-gitpod","loc":{"lines":{"from":69,"to":73}}}}],["609",{"pageContent":"Conference","metadata":{"source":"https://www.gitpod.io/blog/next-chapter-for-gitpod","loc":{"lines":{"from":75,"to":75}}}}],["610",{"pageContent":"We build Gitpod to improve the daily experience of devs when trying to get the job done. Developers should focus on what really matters: being creative and writing code. Instead they borrow time from their primary task to manually do what could be automated, fight accidental complexity, or get surprised by poorly designed tools, APIs, and programming languages. Today we publicly announce [DevX Conf (28-29 April)](https://devxconf.org/) to start from first principles, collaborate, listen, discuss and declutter our workflows, toolchains and minds. We want to spark dialogue across the areas of coding, testing, building, deploying, collaborating on and running software. Speakers include [Jason Warner](https://twitter.com/jasoncwarner) (CTO GitHub), [Beyang Liu](https://twitter.com/beyang) (CTO Sourcegraph), [Josh Long](https://twitter.com/starbuxman) (Spring), [Shanea Leven](https://www.linkedin.com/in/shaneak/) (Founder Codesee), [Ellen Chisa](https://twitter.com/ellenchisa) (Founder Darklang), [Henry Zhu](https://twitter.com/left_pad) (Steward of BabelJS), [Maël Nison](https://twitter.com/arcanis) (Creator","metadata":{"source":"https://www.gitpod.io/blog/next-chapter-for-gitpod","loc":{"lines":{"from":77,"to":77}}}}],["611",{"pageContent":"(Founder Codesee), [Ellen Chisa](https://twitter.com/ellenchisa) (Founder Darklang), [Henry Zhu](https://twitter.com/left_pad) (Steward of BabelJS), [Maël Nison](https://twitter.com/arcanis) (Creator Yarn), [Nader Dabit](https://twitter.com/dabit3) (GraphQL & Serverless), [Anurag Goel](https://www.linkedin.com/in/anuragoel/) (Founder Render), [Yihong Cheng](https://github.com/xcv58) (Github1s), [Tuomas Artman](https://twitter.com/artman) (Founder Linear) and many more. Hope to see you there!","metadata":{"source":"https://www.gitpod.io/blog/next-chapter-for-gitpod","loc":{"lines":{"from":77,"to":77}}}}],["612",{"pageContent":"<div class=\"mt-xx-small mb-x-large max-w-4xl my-small mx-auto lg:my-x-huge\">\n  <LinkIconExternal href=\"https://devxconf.org\" icon=\"💻\">Register at DevX Conf</LinkIconExternal>\n</div>","metadata":{"source":"https://www.gitpod.io/blog/next-chapter-for-gitpod","loc":{"lines":{"from":79,"to":81}}}}],["613",{"pageContent":"---\nauthor: sagor999, aledbf, kylos101, csweichel\ndate: Friday, 4 Feb 2022 11:00:00 UTC\nexcerpt: On January 25th Gitpod experienced a global outage. What happened? Why was there data loss? So what exactly happened during the outage? How are we improving Gitpod?\nimage: teaser.png\nslug: no-way-it-is-dns\nsubtitle: what happened and how we're improving\nteaserImage: teaser.png\ntitle: January 25th Outage\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\nOn January 25th Gitpod experienced [a global outage](https://www.gitpodstatus.com/incidents/tk0f7xcw8q94) that resulted in workspaces not being able to be started, as well as already running workspaces experienced a data loss. The outage lasted for a little over an hour.","metadata":{"source":"https://www.gitpod.io/blog/no-way-it-is-dns","loc":{"lines":{"from":1,"to":16}}}}],["614",{"pageContent":"What happened?\n\nAt around 5.44pm UTC (all times in this article will be in UTC) we noticed a high error rate when pulling images from the Google Container Registry (GCR or gcr.io) with an error `cannot get manifest`. Our team immediately started to diagnose what might have caused this, if this was on our end or if Google services were experiencing issues. We started looking at logs and noticed another error while trying to pull an image: `dial tcp: i/o timeout failed to do request` which showed there was some sort of connectivity problem with GCR. We immediately checked Google’s status page to see if there are active outages, but there was only one message: `The Service Usage API is experiencing elevated error rates when listing \"available services\" or listing \"disabled services\" resulting in API call failures.` That did not seem related to GCR service, so we assumed that an issue must be on our end instead.","metadata":{"source":"https://www.gitpod.io/blog/no-way-it-is-dns","loc":{"lines":{"from":18,"to":20}}}}],["615",{"pageContent":"About 10 minutes later we started getting reports from users not being able to start workspaces and our on-call team started an incident response process.\n\nWhile we were digging into why we are having problems connecting to GCR, as a precaution, we started to spin up new workspace clusters in EU and US. This was just in case something went bad with existing clusters and we needed to move users to new clusters (that was a good idea). Due to our recent work in automating cluster creation, we were able to start the spin up process in the background via a [werft](https://github.com/csweichel/werft) job to create new clusters (which takes about 20 minutes).","metadata":{"source":"https://www.gitpod.io/blog/no-way-it-is-dns","loc":{"lines":{"from":22,"to":24}}}}],["616",{"pageContent":"After looking at logs, we noticed that we were having a lot of DNS errors coming from our CoreDNS pods: `[ERROR] plugin/errors: 2 storage.googleapis.com. A: read udp 192.168.60.206:55169->8.8.8.8:53: i/o timeout`. So now it seems like we are not able to talk to Google’s DNS. But checking DNS and status page again showed no errors. Clearly, we were having networking issues in our clusters, but it was still not clear as to why (no recent changes were done to our clusters).\n\nAt this time new clusters were ready and we checked if those were having issues as well or not. Turns out they were not affected and were working fine. We made a decision to start redirecting traffic to new clusters so that our users will be able to use Gitpod again, while we will continue looking into what happened with the existing cluster.","metadata":{"source":"https://www.gitpod.io/blog/no-way-it-is-dns","loc":{"lines":{"from":26,"to":28}}}}],["617",{"pageContent":"Once traffic was diverted to new clusters, we immediately saw workspaces starting up and users reporting in [Discord](https://www.gitpod.io/chat) that they are able to start workspaces.\n\nAfter we confirmed that Gitpod is working, we marked the incident as “Monitoring” and we started the process of trying to understand what happened to the old cluster.","metadata":{"source":"https://www.gitpod.io/blog/no-way-it-is-dns","loc":{"lines":{"from":30,"to":32}}}}],["618",{"pageContent":"Why was there data loss?\n\nWe upload workspace content backups into a private Google Cloud Storage (GCS) bucket. Unfortunately, if our backup service is not able to connect to GCS, then any backup will fail. And that’s exactly what happened in this case due to the DNS outage. The backup service attempted to resolve the address of GCS but was not able to, and the backup process failed. We are prioritizing work on improving our backup process. As engineers, we truly understand how soul-crushing it is to lose several hours of your work and are fully committed to improving our backup procedures to ensure that it doesn’t happen again.","metadata":{"source":"https://www.gitpod.io/blog/no-way-it-is-dns","loc":{"lines":{"from":34,"to":36}}}}],["619",{"pageContent":"So what exactly happened during the outage?\n\n![It was DNS](../../../static/images/blog/no-way-it-is-dns/it-was-dns.png)\n\nWe had a DNS failure inside our cluster. We are using Google’s primary DNS server (`8.8.8.8`) to resolve any public addresses, and our cluster was not able to communicate with that server. It looked like any traffic on port 53 UDP was just not getting through, resulting in timeout errors.\n\nWe checked ARP table for overflow, but it appears to be within normal limits before, during, and after the outage.\n\nWe also checked the conntrack table if it got full, but our conntrack utilization was at about 10% only.\n\nWhen we switched traffic away from this cluster, it appears to have recovered shortly after. Indicating some sort of load issue.","metadata":{"source":"https://www.gitpod.io/blog/no-way-it-is-dns","loc":{"lines":{"from":38,"to":48}}}}],["620",{"pageContent":"When we switched traffic away from this cluster, it appears to have recovered shortly after. Indicating some sort of load issue.\n\nAdditional tests were performed on the old cluster to try to reproduce the problem (without the time pressure of recovering as fast as possible), to better understand why we were not able to reach 8.8.8.8 from our cluster. Unfortunately, we were unable to recreate the conditions that led to the network failure.\n\nIn the meantime, we can take solid steps on improving our DNS resiliency and storage durability, more about it in the section below.","metadata":{"source":"https://www.gitpod.io/blog/no-way-it-is-dns","loc":{"lines":{"from":48,"to":52}}}}],["621",{"pageContent":"How are we improving Gitpod?\n\nThere are two big areas of improvement that we can do in light of this outage.\n\nThe first one, most critical, is to avoid any data loss. For this we have created [an epic on GitHub to track the work that needs to be done](https://github.com/gitpod-io/gitpod/issues/7901). User data (`/workspace`) is persisted to individual nodes in workspace clusters. If a node or cluster fails before a backup finishes, and we miss our chance to manually backup (which doesn't scale well), data loss occurs.\n\nTo protect your data, we'll use cloud provider persistent volumes, which can survive node and cluster failures. Also, if a workspace enters a state where it cannot be started, we'll make it possible for you to download your files. Presently, you can only download your files if the workspace is stopped.","metadata":{"source":"https://www.gitpod.io/blog/no-way-it-is-dns","loc":{"lines":{"from":54,"to":60}}}}],["622",{"pageContent":"The second one is to improve DNS resilience. Instead of relying on just one DNS server, we now have 3 different ones: an internal one to GCP, Google’s public 8.8.8.8, and another one is Cloudflare’s 1.1.1.1. That way if something happens to one of them, we should still be able to connect to the others.\n\nWe are also planning on doing more DNS resiliency work and you [can track it in this epic](https://github.com/gitpod-io/gitpod/issues/7843).","metadata":{"source":"https://www.gitpod.io/blog/no-way-it-is-dns","loc":{"lines":{"from":62,"to":64}}}}],["623",{"pageContent":"Conclusion\n\nAs hard as we try to prevent outages, they sometimes happen. The best we can do is learn from them and improve our infrastructure going forward. We have plans on better support for multi-region clusters (currently we only have two, US and EU), as well as going multi-cloud at some point in the future.\n\nAs an apology to our users, [we are also issuing credits to out customers](/contact/support). If you are a paid user, we’d like to offer you a refund for the last three months. If you are on the free plan, we’d like to offer you a coupon for 3 months of our unleashed plan.","metadata":{"source":"https://www.gitpod.io/blog/no-way-it-is-dns","loc":{"lines":{"from":66,"to":70}}}}],["624",{"pageContent":"---\nauthor: akosyakov\ndate: Wed Dec 12 2018 11:44:33 GMT+0000 (UTC)\nexcerpt: Nowadays, there are many collaborative platforms for showcasing JS code snippets and frameworks. Most of them run in your browser, some even\nimage: node-js-development-with-only-a-browser.jpeg\nslug: node-js-development\ntitle: Sustainable Node.js development with only a browser\ntags: [\"Engineering\"]\nurl: https://medium.com/gitpod/sustainable-node-js-development-with-only-a-browser-4887bc6e737b\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\nNowadays, there are many collaborative platforms for showcasing JS code snippets and frameworks. Most of them run in your browser, some even manage to magically run Node.js applications in the cloud. They abstract away many possibilities in order to focus on prototyping and learning.","metadata":{"source":"https://www.gitpod.io/blog/node-js-development","loc":{"lines":{"from":1,"to":16}}}}],["625",{"pageContent":"This simplification (or even magic) eventually turns out to be a hard wall. Once we leave the prototype stage, we need to be able to control and freely combine different versions of frontend and Node.js frameworks, connect to the database that best fits our use case, use different JS flavors and deployment services.\n\nIn this blog post, I will show you a transparent way of getting started with Node.js easily without the magic. The approach taken provides a low entry barrier without the wall once you grow out of it. You will learn how to write Node.js applications in a browser-based environment, that has all the depth of a full local dev environment with VS Code but the friendly onboarding of JSFiddle. These environments can be freely shared to work together and showcase your applications.\n\nThe dev environment is called [Gitpod](/) and is entirely free for open-source development.\n\n<h2>Table of Contents</h2>\n\n- [Hello World](#hello-world)\n\n- [Automating Node.js setup](#automating-nodejs-setup)","metadata":{"source":"https://www.gitpod.io/blog/node-js-development","loc":{"lines":{"from":18,"to":28}}}}],["626",{"pageContent":"The dev environment is called [Gitpod](/) and is entirely free for open-source development.\n\n<h2>Table of Contents</h2>\n\n- [Hello World](#hello-world)\n\n- [Automating Node.js setup](#automating-nodejs-setup)\n\n- [Working with Pull Requests](#working-with-pull-requests)\n\n- [Working Together](#working-together)\n\n- [Developing full-stack Node.js applications](#developing-full-stack-nodejs-applications)\n\n- [Summary](#summary)","metadata":{"source":"https://www.gitpod.io/blog/node-js-development","loc":{"lines":{"from":28,"to":42}}}}],["627",{"pageContent":"Hello World\n\nLet’s get started by developing a simple “Hello World” application and learning the basics of Node.js development.","metadata":{"source":"https://www.gitpod.io/blog/node-js-development","loc":{"lines":{"from":44,"to":46}}}}],["628",{"pageContent":"Start a new project\n\nGitpod treats any GitHub repository as a project which can be opened. Let’s start by creating a new repository for our Hello World project:\n\n- open your GitHub dashboard and select New Repository;\n\n- enter a repository name and click Create repository.\n\nNow, we can open the created project in Gitpod. You can do it by simply prefixing the repository URL with gitpod.io/#. For example, I’ve called my repository node-hello-world and it can be opened in Gitpod with **gitpod.io/#**<a class=\"no-nowrap\" href=\"https://github.com/akosyakov/node-hello-world\">https://github.com/akosyakov/node-hello-world</a>.\n\nThe first time, you will need to sign in Gitpod with your GitHub account. GitHub will ask you to authorize read access to your email address. Write access to repositories can be granted later on [your access control page](https://gitpod.io/access-control/).\n\n![GitHub Authorize Gitpod Page](https://cdn-images-1.medium.com/max/5692/1*K8cn3G30eQouKmWQb228LQ.png)","metadata":{"source":"https://www.gitpod.io/blog/node-js-development","loc":{"lines":{"from":48,"to":60}}}}],["629",{"pageContent":"![GitHub Authorize Gitpod Page](https://cdn-images-1.medium.com/max/5692/1*K8cn3G30eQouKmWQb228LQ.png)\n\nGitpod starts a new workspace, which is a Linux-based cloud container, and provides access to it via a VS Code powered online IDE. Workspaces are started on demand and automatically shut-down if you don’t use them. They are continuously replicated and never deleted, so you always can restart a workspace later from [your Gitpod dashboard](https://gitpod.io/workspaces/).\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"How to create a new project on GitHub and then open it in Gitpod\" src=\"/images/blog/node-js-development/create-a-new-project-on-gh-then-open-in-gp.webm\" type=\"video/webm\"></video>\n    <figcaption>How to create a new project on GitHub and then open it in Gitpod</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/blog/node-js-development","loc":{"lines":{"from":60,"to":67}}}}],["630",{"pageContent":"_If you don’t want to create a new project from scratch, click on [a snapshot link](https://gitpod.io/#snapshot/0d82ae08-c328-4cb5-96e5-7233d5de0c11) of my workspace to try Hello World application. I will cover later how one can make a workspace snapshot._","metadata":{"source":"https://www.gitpod.io/blog/node-js-development","loc":{"lines":{"from":69,"to":69}}}}],["631",{"pageContent":"Writing a Node.js application\n\nBy default, each workspace is preconfigured with standard tools like Node.js, npm, yarn and nvm. Later we will learn how to change the Node.js setup. Now, let’s code something and run it:\n\n- open the command palette (F1) and select New File command;\n\n- create a new file with app.js name and type the following content:\n\n  const message = 'Hello World';\n\n  console.log(message, 'from Gitpod!');\n\n![As you type, you can see that Gitpod validates your code. It also provides you with smart completions and documentation on hover.](https://cdn-images-1.medium.com/max/2612/0*b-63v0Asfa09vfzG)_As you type, you can see that Gitpod validates your code. It also provides you with smart completions and documentation on hover._","metadata":{"source":"https://www.gitpod.io/blog/node-js-development","loc":{"lines":{"from":71,"to":83}}}}],["632",{"pageContent":"Run / Debug a Node.js application\n\nIn order to run the application, type node app.js into the terminal.\n\n![How to run a Node.js application in Gitpod](https://cdn-images-1.medium.com/max/2000/0*KzrRQ41oARG7XoQB)\n\nOf course, you can have more than one terminal to your cloud workspace.\n\nNext up, let’s see how we can debug the application:\n\n- create a debug configuration (Debug-> Add Configuration) and select Node.js: Launch Program configuration snippet in the content assist of the opened editor;\n\n- add a breakpoint into app.js file, by clicking on the gutter on the left;\n\n- open the Debug View (View -> Debug),\n\n- press the green play icon to start debugging (or press F5).\n\nOur program should run, and when a breakpoint hits you can inspect call stack, variables and even use the debug console to evaluate expressions.","metadata":{"source":"https://www.gitpod.io/blog/node-js-development","loc":{"lines":{"from":85,"to":103}}}}],["633",{"pageContent":"Our program should run, and when a breakpoint hits you can inspect call stack, variables and even use the debug console to evaluate expressions.\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"How to debug a Node.js application in Gitpod\" src=\"/images/blog/node-js-development/how-to-debug-a-nodejs-app-in-gitpod.webm\" type=\"video/webm\"></video>\n    <figcaption>How to debug a Node.js application in Gitpod</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/blog/node-js-development","loc":{"lines":{"from":103,"to":108}}}}],["634",{"pageContent":"Working with Git\n\nLet’s have a look at how we can share our changes through Git. Open the Git view, stage your changes, enter a commit message and click commit. You can also open a diff editor by clicking on changed files and push new commits to GitHub with Git: Push... command.\n\n![How to make a commit in Gitpod](https://cdn-images-1.medium.com/max/2612/0*FqWgZy08qIkj3qVp)\n\nIf you have not granted write access to your repositories yet, Gitpod will ask for it. Grant permissions and try to push again.\n\n![Gitpod prompt grant write access to your repositories](https://cdn-images-1.medium.com/max/3380/1*bHchL7DVfmfdYWqjWsqRaw.png)","metadata":{"source":"https://www.gitpod.io/blog/node-js-development","loc":{"lines":{"from":110,"to":118}}}}],["635",{"pageContent":"Automating Node.js setup\n\nAs mentioned above each workspace by default is preconfigured with standard tools, like Node.js 8.x.\n\nLet’s assume that we agreed on using Node.js 10.x for our project instead. Usually, all developers have to update their local Node.js versions and often switch between them depending on what project or branch is used.\n\nWith Gitpod, it is different. You can configure a workspace with a specific Node.js version for each branch via Docker images, without changing the local setup for any developer at all.\n\nThe easiest way to initialize the config is to use Gitpod’s CLI. The CLI will walk you through the most important configuration options and create a .gitpod.yml file that is located in the root of your repository.\n\nIn the terminal type gp init.","metadata":{"source":"https://www.gitpod.io/blog/node-js-development","loc":{"lines":{"from":120,"to":130}}}}],["636",{"pageContent":"In the terminal type gp init.\n\n1. For the first option choose: docker file. It will create a Dockerfile that sits next to .gitpod.yml. Here you can add any kind of tools and dependencies you will need for development. When starting a fresh workspace, Gitpod will pick that Dockerfile up and provide a cloud container based on that.\n\n1. Now press enter until the tasks section. Type node app.js. The tasks are automatically started whenever a workspace gets started. You can have multiple tasks and use different lifecycles. Each task will be opened in a separate terminal.\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"How to use gp init to generate the Gitpod config files\" src=\"/images/blog/node-js-development/gp-init-to-generate-the-gitpod-config.webm\" type=\"video/webm\"></video>\n    <figcaption>How to use 'gp init' to generate the Gitpod config files</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/blog/node-js-development","loc":{"lines":{"from":130,"to":139}}}}],["637",{"pageContent":"The created files will be automatically opened in the editor. Let’s change the config so that it starts two tasks in separate terminals:\n\n```yaml\nimage:\n  file: Dockerfile\n\ntasks:\n  - init: node --version\n\n  - command: node app.js","metadata":{"source":"https://www.gitpod.io/blog/node-js-development","loc":{"lines":{"from":141,"to":150}}}}],["638",{"pageContent":"And change the Dockerfile to use Node.js 10.x as the base image:\n\n    FROM node:10\n\nTo try it our we need to push the config back to GitHub and open a new workspace. Let’s do this through a pull request, so we learn about the GitHub integration on the way.\n\n_Here is [another snapshot link](https://gitpod.io/#snapshot/ea0d6704-a513-4c94-b8e7-fe72c3d8e5fb) to try our configuration without opening a pull request. You can learn more about workspace configuration [here](/docs/configure)._","metadata":{"source":"https://www.gitpod.io/blog/node-js-development","loc":{"lines":{"from":153,"to":159}}}}],["639",{"pageContent":"Working with Pull Requests\n\nGitpod provides seamless integration with GitHub features like creating and reviewing pull requests.\n\n### Creating a new Pull Request\n\nLet’s open a new pull request from Gitpod:\n\n- commit your changes using the Git view (see above);\n\n- use Git: Checkout command or click the branch item in the status bar to create a new branch. Name it somehow, e.g. gitpodify;\n\n- next up open the Pull Request view on the right. You cannot create a new pull request yet, because first the new branch should be published to GitHub, click publish changes;\n\n- after that, the Pull Request view will be updated and you can open a new pull request.\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"How to make a PR in Gitpod\" src=\"/images/blog/node-js-development/how-to-make-a-pr-in-gitpod.webm\" type=\"video/webm\"></video>\n    <figcaption>How to make a PR in Gitpod</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/blog/node-js-development","loc":{"lines":{"from":161,"to":180}}}}],["640",{"pageContent":"Reviewing a Pull Request\n\nAs I’ve mentioned at the beginning Gitpod treats each GitHub repository as a project. Actually, it is even smarter and can figure out from any GitHub URL which branch should be opened and how.\n\nLet’s go to the pull request page on GitHub and prefix its URL with gitpod.io/#, just like we did initially:\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"How to open a Gitpod workspace from a PR page on GitHub\" src=\"/images/blog/node-js-development/how-to-open-a-gitpod-workspace-from-a-pr.webm\" type=\"video/webm\"></video>\n    <figcaption>How to open a Gitpod workspace from a PR page on GitHub</figcaption>\n</figure>\n\n_Opening a PR with new workspace image can take some time since Gitpod needs to build the image. But it is only rebuilt when changed._","metadata":{"source":"https://www.gitpod.io/blog/node-js-development","loc":{"lines":{"from":182,"to":193}}}}],["641",{"pageContent":"_Opening a PR with new workspace image can take some time since Gitpod needs to build the image. But it is only rebuilt when changed._\n\nAs you can see, Gitpod opens with a branch for your pull request. PR file changes are presented on the left sidebar to review. Our init and command workspace tasks are executed in terminals, Node.js is 10.x now, and Hello World is printed.\n\nWhile reviewing in Gitpod, you can comment, change the code to address comments, suggest new changes, etc. When you are done, merge your pull request from Gitpod as well.\n\n![How to review a PR in Gitpod](https://cdn-images-1.medium.com/max/2608/0*KIZkXiyQv3aZzsjA)","metadata":{"source":"https://www.gitpod.io/blog/node-js-development","loc":{"lines":{"from":193,"to":199}}}}],["642",{"pageContent":"Working Together\n\nSince Gitpod workspaces are running in the cloud, we can share them in similar ways how you share documents in Google Docs.","metadata":{"source":"https://www.gitpod.io/blog/node-js-development","loc":{"lines":{"from":201,"to":203}}}}],["643",{"pageContent":"Helping others with Node.js development\n\nYou can share your running workspaces with colleagues to collaborate on exactly the same codebase, development tools, running terminals, and applications. It is particularly useful to assist each other on some tricky configuration, dependency or code problem.\n\nIn order to share a running workspace: click on your account avatar, select Share Running Workspace, enable sharing, copy a link and share the copied link with your colleagues.\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"How to share a running Gitpod workspace\" src=\"/images/blog/node-js-development/share-a-running-workspace-in-gitpod.webm\" type=\"video/webm\"></video>\n    <figcaption>How to share a running Gitpod workspace</figcaption>\n</figure>\n\n_Both users use exactly the same workspace and see the shared output in terminals._","metadata":{"source":"https://www.gitpod.io/blog/node-js-development","loc":{"lines":{"from":205,"to":216}}}}],["644",{"pageContent":"Showcasing Node.js applications\n\nYou can take a complete snapshot (clone) of your workspace, even including your IDE layout, and share it as a link. Think about workspace snapshots like code snippets on JSFiddle. It is useful in the same way: to share reproducible examples on issues, Stack Overflow answers, for tutorials and workshops. But at the same, you share the complete development setup and present it in the appropriate way.\n\nIn order to share a workspace snapshot: click on your account avatar, select Share Workspace Snapshot, copy a link and share the copied link where you want.\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"How to share a Gitpod workspace Snapshot\" src=\"/images/blog/node-js-development/share-a-gitpod-workspace-snapshot.webm\" type=\"video/webm\"></video>\n    <figcaption>How to share a Gitpod workspace Snapshot</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/blog/node-js-development","loc":{"lines":{"from":218,"to":227}}}}],["645",{"pageContent":"_The [shared workspace snapshot](https://gitpod.io/#snapshot/14dc69f1-0e8c-4a36-b221-0ab16e91326e) preserves not only the development setup but the IDE layout and even selection in the editor._","metadata":{"source":"https://www.gitpod.io/blog/node-js-development","loc":{"lines":{"from":229,"to":229}}}}],["646",{"pageContent":"Developing full-stack Node.js applications\n\nSo far, we’ve only had a look at a simple Node.js application. In case you wonder whether it will scale to sophisticated applications you can try any of the following repositories:\n\n- [Node.js Shopping Cart](https://github.com/gitpod-io/nodejs-shopping-cart) is a reference Node.js application demonstrating how to use the Express framework. You can open it in Gitpod with [one-click](https://gitpod.io/#https://github.com/gitpod-io/nodejs-shopping-cart) and follow along [this blog post](https://medium.com/gitpod/debugging-node-js-applications-in-theia-76c94c76f0a1) explaining in details how to debug the app.\n\n- Gitpod is based on an open-source IDE framework — [Theia](http://theia-ide.org). It’s built with a lot of JS technologies, including Node.js, Express, TypeScript and React. And, of course, [Gitpod is used to develop Theia](https://github.com/theia-ide/theia/blob/master/doc/Developing.md#run-the-browser-example-with-gitpod).","metadata":{"source":"https://www.gitpod.io/blog/node-js-development","loc":{"lines":{"from":231,"to":237}}}}],["647",{"pageContent":"- You even can develop Electron applications in Gitpod, like VS Code. Chris demonstrates it in [this blog post](https://medium.com/gitpod/developing-native-ui-applications-in-gitpod-15af2967c24e).","metadata":{"source":"https://www.gitpod.io/blog/node-js-development","loc":{"lines":{"from":239,"to":239}}}}],["648",{"pageContent":"Summary\n\nGitpod provides the complete Node.js development experience right from a browser. It enables you to automate your development setup, quickly onboard developers, streamline code review and testing processes on GitHub, help each other in real time, showcase your applications and setups. Also, it is entirely free for open source development!\n\nIf you have any questions, [join the Gitpod Community](https://community.gitpod.io/)! We are listening intensely to all feedback.","metadata":{"source":"https://www.gitpod.io/blog/node-js-development","loc":{"lines":{"from":241,"to":245}}}}],["649",{"pageContent":"---\nauthor: akosyakov\ndate: Tue Nov 13 2018 12:41:55 GMT+0000 (UTC)\nexcerpt: Gitpod is based on the open-source Theia IDE Framework, which is highly inspired by VS Code, reuses its major components like the Monaco\nimage: node-js-gitpod.png\nslug: node-js-gitpod\ntitle: Debugging Node.js applications in Theia\ntags: [\"Engineering\"]\nurl: https://medium.com/gitpod/debugging-node-js-applications-in-theia-76c94c76f0a1\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\nGitpod is based on the open-source Theia IDE Framework, which is highly inspired by VS Code, reuses its major components like the Monaco editor and intelligent-language support and is designed to run as a web application.","metadata":{"source":"https://www.gitpod.io/blog/node-js-gitpod","loc":{"lines":{"from":1,"to":16}}}}],["650",{"pageContent":"At TypeFox, we use Gitpod to develop Theia and all its satellite projects, like Theia extensions and language servers. We’ve discovered that for most use cases we don’t need to go to local development anymore. Development, testing, and the review processes are streamlined, leading from source code to a proper developer environment accessible from a browser with a single click.\n\nUp to now, there was one important use case that forced us back to local tools, because it was not supported by Gitpod: Debugging.\n\nNow, it is available, and I would like to give you a run through the basics of Node.js debugging in Gitpod based on an example.","metadata":{"source":"https://www.gitpod.io/blog/node-js-gitpod","loc":{"lines":{"from":18,"to":22}}}}],["651",{"pageContent":"Step 0: Open Node.js Shopping Cart example in Gitpod\n\nStart a new workspace for the example GitHub repository: [https://gitpod.io/#https://github.com/gitpod-io/nodejs-shopping-cart](https://gitpod.io/#https://github.com/gitpod-io/nodejs-shopping-cart)\n\n![Start a new Gitpod workspace for the shopping cart example via prefixing the URL with gitpod.io#](https://cdn-images-1.medium.com/max/2992/0*WySkgfqLHyOkQq_c)\n\nA new Gitpod workspace will be opened. Required dependencies are installed automatically since the repository is configured with [a .gitpod.yml file](/docs/configure). You can see it in the terminal, opened in the bottom area.","metadata":{"source":"https://www.gitpod.io/blog/node-js-gitpod","loc":{"lines":{"from":24,"to":30}}}}],["652",{"pageContent":"Step 1: Start debugging\n\n![Gitpod workspace](https://cdn-images-1.medium.com/max/2000/0*cm6tolHouEztvvuC)\n\nIn order to start debugging, you should open the debug view first. You can do it via Viewmain menu or with Ctrl/Cmd+Shift+D.\n\nThe debug view allows you to configure launch configurations, start and manage debug sessions. Configurations are persisted debugging setups. They are stored in a [VS Code compatible format](https://code.visualstudio.com/docs/editor/debugging#_launchjson-attributes) in a launch.json JSON-file located in your workspace’s .theia folder. If your project already has the VS Code launch file, then Gitpod will recognize and use it instead.\n\nNode.js Shopping Cart is an Express.js web-application. The repository already has a pre-configured Launch Program configuration, which starts the web server Node.js process in the debug mode. Let’s run it with F5 or by pressing the run button left to the configuration drop-down.","metadata":{"source":"https://www.gitpod.io/blog/node-js-gitpod","loc":{"lines":{"from":32,"to":40}}}}],["653",{"pageContent":"![Gitpod Debug Tab](https://cdn-images-1.medium.com/max/3644/1*SUD-Cfy3YC86JJmgo1bLpA.png)","metadata":{"source":"https://www.gitpod.io/blog/node-js-gitpod","loc":{"lines":{"from":42,"to":42}}}}],["654",{"pageContent":"Step 2: Preview the application\n\nA notification should pop-up suggesting you open an application side-by-side with an editor or externally, in a new browser tab. Let’s open it side-by-side to be able to debug and use our app at the same time.\n\n![Gitpod Preview Notification](https://cdn-images-1.medium.com/max/4512/1*65SBIeZyvn_31V9biYKNAQ.png)\n\nTake your time and play with the app. You can review items to buy and in your cart, move them into or out of your cart.\n\n![Gitpod workspace shopping cart application preview](https://cdn-images-1.medium.com/max/7676/1*M6KN6axYYOW8iqlnqsXpVw.png)","metadata":{"source":"https://www.gitpod.io/blog/node-js-gitpod","loc":{"lines":{"from":44,"to":52}}}}],["655",{"pageContent":"Step 3: Pause on a breakpoint\n\nIn this step we debug what happens when a user navigates to the homepage.\n\nFirst, we need to add a breakpoint to the routing logic. It is defined in routes/index.js. You can open that file from the navigator or using the quick file palette (Ctrl/Cmd+P) .\n\n![Gitpod quick file pallete](https://cdn-images-1.medium.com/max/2500/1*6ni4GKFo9FFJoh_r8lvLVg.png)\n\nNext, add a breakpoint in the editor margin against a line which you want to debug. A route callback handling / path looks promising.\n\n![Debugging: Breakpoints](https://cdn-images-1.medium.com/max/2988/1*AaqYqH5LILFw4g0-jNu5Bg.png)_Breakpoints are displayed in the debug view and applied to currently running sessions._\n\nNow, in the app, try navigating to the homepage. The debug session will pause on the breakpoint. You can traverse the current stack trace, inspect variables and control the execution flow with the debug actions toolbar:","metadata":{"source":"https://www.gitpod.io/blog/node-js-gitpod","loc":{"lines":{"from":54,"to":66}}}}],["656",{"pageContent":"![Gitpod Debug Menu](https://cdn-images-1.medium.com/max/2000/1*Ru0MXHEcU_RzQEAKX30seA.png)","metadata":{"source":"https://www.gitpod.io/blog/node-js-gitpod","loc":{"lines":{"from":68,"to":68}}}}],["657",{"pageContent":"Step 4: Inspect and modify data\n\nThere are several ways to see variables’ values:\n\n- you can traverse current scopes and variables in the debug view;\n\n- you can hover over expressions in the editor to evaluate them with a current session;\n\n- or you can use the debug console (REPL) to evaluate custom expressions.\n\nYou can always double-click on any variable to modify its value.\n\n![Debug: Inspect and Modify data](https://cdn-images-1.medium.com/max/7676/1*_zf4PL_AWfzeBZlp2mRjZQ.png)\n\n## Next steps\n\nDebugging is an important feature to provide the complete development experience. The Node.js debugging support is the first step for Gitpod in this direction. We are working to bring more debug features and add support for more runtimes. We would also love to hear what features and runtimes you want to see supported. [Tell us](https://github.com/gitpod-io/gitpod/issues/new/choose).","metadata":{"source":"https://www.gitpod.io/blog/node-js-gitpod","loc":{"lines":{"from":70,"to":86}}}}],["658",{"pageContent":"---\nauthor: svenefftinge\ndate: Wed Sep 26 2018 09:35:09 GMT+0000 (UTC)\nexcerpt: It has been a month already since we went public with Gitpod.io. We want to take a moment and send out a big thank you for all the great\nimage: october-2018-release.jpeg\nslug: october-2018-release\nsubtitle: What's new this month?\ntitle: Gitpod — October 2018 Release\nurl: https://medium.com/gitpod/gitpod-october-2018-release-672c91294b40\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\nIt has been a month already since we went public with Gitpod.io. We want to take a moment and send out a big thank you for all the great feedback and kind words! <span aria-hidden=\"true\">❤️</span>\n\nWe are working to incorporate all your feedback continuously, adding new features, fixing bugs and improving the overall usability and performance.\nPlease keep sending all that useful feedback!\n\nToday, we are pleased to announce a new version of [Gitpod](/).","metadata":{"source":"https://www.gitpod.io/blog/october-2018-release","loc":{"lines":{"from":1,"to":21}}}}],["659",{"pageContent":"Today, we are pleased to announce a new version of [Gitpod](/).\n\n![A Cake with Sparkles by [Audrey Fretz](https://unsplash.com/@parkstreet?utm_source=medium&utm_medium=referral) on [Unsplash](https://unsplash.com?utm_source=medium&utm_medium=referral)](https://cdn-images-1.medium.com/max/10944/0*TrpIB26qJjpdoAmh)_Photo by [Audrey Fretz](https://unsplash.com/@parkstreet?utm_source=medium&utm_medium=referral) on [Unsplash](https://unsplash.com?utm_source=medium&utm_medium=referral)_\n\nHere are the most important new features and improvements:","metadata":{"source":"https://www.gitpod.io/blog/october-2018-release","loc":{"lines":{"from":21,"to":25}}}}],["660",{"pageContent":"Unlimited Gitpod Hours! 🎁\n\nTo allow you using Gitpod as much as you want, during the beta you can now\n**add extra Gitpod Hours whenever you run low on them**!\n\n![Gitpod Dashboard add extra hours](https://cdn-images-1.medium.com/max/5364/1*JUfY6XPR9o74dYU1kNWvcA.png)\n\n## Docker File Support ⚙️\n\nMost projects need special tools, which can be provided by naming a custom Docker image in your _.gitpod_ file.\n\nStarting today, you can point to a _Dockerfile_ that sits next to the _.gitpod_ file. Gitpod will take care of building and caching it for you. Instead of managing your own Docker builds and versions, simply put the _Dockerfile_ into the repository and you will always have a working setup for the branch at hand.\n\nPlease read [Gero’s post](/blog/docker-in-gitpod) explaining this feature in more detail.\n\n![Gitpod Workspace startup phase building workspace](https://cdn-images-1.medium.com/max/3988/1*IBKSgvfSNzbcyz8YUIc4cg.png)","metadata":{"source":"https://www.gitpod.io/blog/october-2018-release","loc":{"lines":{"from":27,"to":42}}}}],["661",{"pageContent":"Introduced CLI ⌨️\n\nWe have introduced a CLI which allows controlling the IDE from the command line, for instance you can open files. Try:\n\n```bash\ngpopen path/to/file\n```\n\nor just\n\n```bash\nopen path/to/file\n```\n\nor in case your muscle memory is taking over :)\n\n```bash\ncode path/to/file\n```\n\nWe will add more features to the CLI. If you have ideas or demands please file tickets [over here](https://github.com/gitpod-io/gitpod/issues).\n\n## GitHub Bot 🤖\n\nThe [Gitpod Bot for GitHub](https://github.com/apps/gitpod-io) can automatically add Gitpod-links to issues and pull-requests. For instance, if you want to improve onboarding for new contributors you should configure the bot so it adds links to **good_first_issue** or **help_wanted **tagged issues.\n\n![Gitpod Bot for GitHub](../../../static/images/blog/october-2018-release/gitpod-bot-for-gh.png)\n\nWe will shortly write a post dedicated to streamlining the contributor’s experience.","metadata":{"source":"https://www.gitpod.io/blog/october-2018-release","loc":{"lines":{"from":44,"to":72}}}}],["662",{"pageContent":"User Preferences 🤓\n\nPreferences and user preferences now allow for customizing your experience individually or per workspace. The workspace preferences are stored in the git repository, while the user preferences are stored in your account and will be used across all your workspaces.\n\n![User Preferences](https://cdn-images-1.medium.com/max/6280/1*0SbAwb4vDj28OVvvQmdflQ.png)\n\n## Change Language Mode 💬\n\nSometimes you want to manually change syntax coloring because e.g. no file extension is present. Clicking on the language name in the status bar now allows to quick pick what language to use for an opened editor.\n\n![Change Language Mode](https://cdn-images-1.medium.com/max/4836/1*HVSkKl7A0oxt3S0UDshHGw.png)","metadata":{"source":"https://www.gitpod.io/blog/october-2018-release","loc":{"lines":{"from":74,"to":84}}}}],["663",{"pageContent":"Enhanced Dashboard 💄\n\nIn case you want to work a bit longer on a workspace you can now change its description. Also the workspace id is shown in the dashboard so you can tell apart multiple workspaces for the same context.\n\n![Enhanced Gitpod Dashboard](https://cdn-images-1.medium.com/max/4532/1*7xvMmtyT_afIYtj0nX-7Pw.png)\n\n## Other Improvements 🚀\n\nThere are plenty of other improvements and fixes that didn’t make it to the list. For instance, Go-projects are now automatically set up correctly even without any configuration. Also there are plenty of enhancements that have been added to the [TypeScript language server](https://github.com/theia-ide/typescript-language-server). TSLint now works great and we laid out the foundation to add specific editing support for more frameworks and linters such as Vue.js, Angular and ESLint.\n\nIn addition to the explicitly mentioned features you can find a full list of fixes and changes in the [Theia repository](https://github.com/theia-ide/theia).","metadata":{"source":"https://www.gitpod.io/blog/october-2018-release","loc":{"lines":{"from":86,"to":96}}}}],["664",{"pageContent":"**Next Release 🔆**\n\nWe are targeting a regular release cycle of one month with smaller continuous updates in-between. For the next release we will focus heavily on improving the startup time as well as the lagging dashboards in the US and the Asian region. Besides that we have some exciting new features up our sleeves as well.\n\nStay tuned and have fun! <span aria-hidden=\"true\">🎉</span>\n\n(emoji-mode off)","metadata":{"source":"https://www.gitpod.io/blog/october-2018-release","loc":{"lines":{"from":98,"to":104}}}}],["665",{"pageContent":"---\nauthor: pawlean, mikenikles\ndate: Thurs, 13 Jan 2022 16:00:00 UTC\nexcerpt: For our sixth edition of DevX Digest, we’d be breaking down the key highlights of our DevXPod conversation with Shanea from CodeSee.\nimage: teaser.jpg\nslug: offload-pressure-to-improve-devx\nsubtitle:\nteaserImage: teaser.jpg\ntitle: DevX Digest 06 - Offload pressure to improve DevX\ntags: [\"Developer experience\"]\ntype: digest\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\nWelcome to DevX Digest - the place to hear all about Developer Experience, brought to you by Pauline Narvas [(@paulienuh)](https://twitter.com/paulienuh) and Mike Nikles [(@mikenikles)](https://twitter.com/mikenikles) from Gitpod. You’re reading another newsletter from us 🎉!","metadata":{"source":"https://www.gitpod.io/blog/offload-pressure-to-improve-devx","loc":{"lines":{"from":1,"to":18}}}}],["666",{"pageContent":"Offloading pressure off developers - can it improve DevX?\n\nHappy New Year, everyone!\n\nTo kick off the year of all things developer experience, we’re reflecting on our latest DevXPod episode, where we spoke to [Shanea Leaven](https://twitter.com/ShaneaLeven) from [CodeSee](https://codesee.io).\n\nOur conversation highlighted some important topics, and we’ll leave you with our key takeaways below. [You can also listen to the episode anywhere you get your podcasts!](https://devxpod.buzzsprout.com/1895030/9867669-offload-pressure-from-developers-to-improve-devx-w-shanea-leven-co-founder-ceo) Don’t forget to subscribe and leave us a rating ⭐️\n\n![DevX Podcast Episode 3](../../../static/images/blog/offload-pressure-to-improve-devx/podcast.png)\n_DevX Pod is available wherever you get your podcasts!_","metadata":{"source":"https://www.gitpod.io/blog/offload-pressure-to-improve-devx","loc":{"lines":{"from":20,"to":29}}}}],["667",{"pageContent":"Key Takeaways\n\n- The inspiration behind building CodeSee came after the **first-hand frustration of not knowing what a system did**. Of course, the only people that knew anything about it had already left the company.\n  _“I just like, why do we not understand our code? I just kind of yelled it out in desperation. This happens all the time. It wasn't the first or the second or the third or the fourth time that it happened.” _\n  Understanding this system was critical for a feature she was working on to release. Unfortunately, in the end, the feature did not ship.","metadata":{"source":"https://www.gitpod.io/blog/offload-pressure-to-improve-devx","loc":{"lines":{"from":31,"to":35}}}}],["668",{"pageContent":"- Unlike other careers like architecture, where you have a blueprint of how everything fits together, **this is absent in tech.** Why is that? This results in frustration, mental fatigue and productivity losses.\n  As Shanea put it, _“We've treated code as like this big black box, right? We've built this entire industry around this black box. Is it happy? Is it not happy? Does it send us an alert? Can we poke the black box to give us the information that we want?”_\n\n- **Codebases are constantly changing and increasingly getting more complex.** Filling developers’ time and mental space with trying to understand all the changing dependencies can slowly eat away at your developer productivity. Our industry should double down and shift focus in helping developers and offloading the mental fatigue.","metadata":{"source":"https://www.gitpod.io/blog/offload-pressure-to-improve-devx","loc":{"lines":{"from":37,"to":40}}}}],["669",{"pageContent":"- **The concept of “continuous onboarding” and “continuous learning” came up a lot. **When we discuss onboarding, we usually say it’s a one-time, fixed-amount time event. Shanea argues it’s a continuous process that everyone goes through, no matter if they have been in the company for a long time or not. “_We have thought about onboarding as continuous onboarding and made our tool to provide, continuous understanding because that's what you're trying to do. Some team, some upstream team might've made a change. It's still an understanding that you need to have regardless of when you joined or not._”\n\n- Shanea recommended [Code HS](https://codehs.com/) and [educative.io](https://www.educative.io/) as organisations taking developer experience (from an education POV) to another level. For example, Educative breaks down the barriers to learning and makes sure it’s a positive experience for those who learn differently.","metadata":{"source":"https://www.gitpod.io/blog/offload-pressure-to-improve-devx","loc":{"lines":{"from":42,"to":44}}}}],["670",{"pageContent":"DevX Digest is community-driven\n\nAnother thing about Gitpodders is that we’re all driven by community feedback, and this newsletter is no exception! Please send us your thoughts, feedback and help us navigate this conversation. We may even feature some of your takes and comments in future newsletters!\n\nCome and hang out with us over on [our Discord](https://www.gitpod.io/chat). 👋🏼","metadata":{"source":"https://www.gitpod.io/blog/offload-pressure-to-improve-devx","loc":{"lines":{"from":46,"to":50}}}}],["671",{"pageContent":"---\nauthor: JesterOrNot, svenefftinge\ndate: Thu June 18 2020\nexcerpt: Until now, you installed VS Code extensions in Gitpod by drag-and-dropping `.vsix` files into your workspace. Today, we're excited to introduce a\nimage: teaser.jpg\nslug: open-vsx-in-gitpod\nsubtitle: Open VSX is now integrated in Gitpod\nteaserImage: teaser.jpg\ntags: [\"Gitpod updates\"]\ntitle: Search & Install Extensions in Your Gitpod Workspace\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\nUntil now, you installed VS Code extensions in Gitpod by drag-and-dropping `.vsix` files into your workspace. Today, we're excited to introduce a new, simpler way to install extensions: Just search the new open-source, vendor-neutral marketplace [Open VSX](https://open-vsx.org) directly from your workspace, and install extensions in one click.","metadata":{"source":"https://www.gitpod.io/blog/open-vsx-in-gitpod","loc":{"lines":{"from":1,"to":17}}}}],["672",{"pageContent":"Open VSX Adoption\n\nSince [we've announced](/blog/open-vsx) the Open VSX marketplace a few weeks ago, adoption has been extremely quick.\n\nTo seed the registry, we've initially added the most popular open-source extensions ourselves, so that early adopters could immediately find important extensions. We could double down on adding more extensions this way, but it doesn’t seem to be necessary, because today, there are already more than 200 developers publishing their own extensions to Open VSX. 🎉\n\nAdoption from the tool-side is going well, too. We started by supporting Open VSX from within [Theia](https://theia-ide.org). Just a couple of days ago, [VSCodium](https://github.com/VSCodium/vscodium#extensions-and-the-marketplace), the true open-source version of VS Code, shipped a new release that connects directly to Open VSX instead of Microsoft's proprietary marketplace. Today, we're excited to bring you Open VSX support in [Gitpod](https://gitpod.io) as well.","metadata":{"source":"https://www.gitpod.io/blog/open-vsx-in-gitpod","loc":{"lines":{"from":19,"to":25}}}}],["673",{"pageContent":"Installing Extensions in Gitpod\n\nAs you may already know, Gitpod lets you describe your dev environment as code. This means that you write configuration and code that makes Gitpod automatically generate ready-to-code dev environments for your project.\n\nAn important part of such a configuration is the set of IDE extensions you need. In Gitpod you have two choices, you can either\n\n**[1] Install an extension for your project's dev environment, or**\n\n**[2] Install an extension for your personal user profile**\n\nOption [1] installs the extension for everyone starting a workspace on the same project. Programming language-specific extensions or those that support certain frameworks, databases, and so on usually go here.\n\nSome extensions however are a matter of personal taste, such as themes and keybindings. You neither want to install and manage those extensions for every project nor do you want to enforce them on your entire team. That’s when you choose option [2].\n\n`youtube: eD_GQ2lQug8`","metadata":{"source":"https://www.gitpod.io/blog/open-vsx-in-gitpod","loc":{"lines":{"from":27,"to":41}}}}],["674",{"pageContent":"What If I Can’t Find the Extension I’m Looking For?\n\nWhile more and more extensions land in Open VSX on a daily basis, there still might be cases where you are missing a certain extension that exists in the MS marketplace. There are three things you can do:\n\n- Ideally, you go to the extension's repository itself and kindly ask the developer to publish it to Open VSX. Publishing is a one-liner (`npx ovsx publish`), so it's really low effort.\n- Download the extension's `.vsix` file (e.g. from the extension's GitHub Releases) and drag and drop it into the IDE's Extensions view. That will install and activate it automatically.\n- Create a PR over at <a class=\"no-nowrap\" href=\"https://github.com/open-vsx/publish-extensions\">https://github.com/open-vsx/publish-extensions</a> — that's where we seed the Open VSX registry by automatically publishing popular open-source extensions.\n\nYou can find more information in our [docs](/docs/references/ides-and-editors/vscode-extensions).","metadata":{"source":"https://www.gitpod.io/blog/open-vsx-in-gitpod","loc":{"lines":{"from":43,"to":51}}}}],["675",{"pageContent":"---\nauthor: svenefftinge, spoenemann\ndate: Thu Apr 9 2020 17:00:00 GMT+0000 (UTC)\nexcerpt: VS Code is used by more than 50% of all developers worldwide. Its extension protocol enabled the broader developer community to create over\nimage: open.jpg\nslug: open-vsx\nsubtitle: A Free Marketplace for VS Code extensions\ntags: [\"Gitpod updates\"]\nteaserImage: open.jpg\ntitle: Open VSX\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>","metadata":{"source":"https://www.gitpod.io/blog/open-vsx","loc":{"lines":{"from":1,"to":15}}}}],["676",{"pageContent":"<script context=\"module\">\n  export const prerender = true;\n</script>\n\nVS Code is used by [more than 50% of all developers worldwide](https://insights.stackoverflow.com/survey/2019#technology-_-most-popular-development-environments). Its extension protocol enabled the broader developer community to create over 16,000 extensions supporting all major programming languages, frameworks, and tools used in modern software projects. While large parts of VS Code are developed as open-source, the actual product (Visual Studio Code) is [not open-source](https://code.visualstudio.com/docs/supporting/FAQ#_what-does-built-on-open-source-mean).","metadata":{"source":"https://www.gitpod.io/blog/open-vsx","loc":{"lines":{"from":15,"to":19}}}}],["677",{"pageContent":"[Eclipse Theia](http://theia-ide.org), the IDE powering Gitpod, Google Cloud Shell and others, offers a vendor-neutral alternative and is based on parts of the same open-source codebase as VS Code. Theia not only works as an Electron-based desktop app, but also runs in browsers. Furthermore, a highly flexible architecture allows extensive customizations. [Arduino’s new Pro IDE](https://www.arduino.cc/pro/arduino-pro-ide) or [Arm’s Mbed Studio](https://os.mbed.com/studio/) are great examples of Theia’s flexibility. On top of that built-in flexibility, Theia can run VS Code extensions as well.\n\nAnother project, [VSCodium](https://github.com/VSCodium/vscodium), offers a 100% open-source version of VS Code.","metadata":{"source":"https://www.gitpod.io/blog/open-vsx","loc":{"lines":{"from":21,"to":23}}}}],["678",{"pageContent":"Only Visual Studio Products May Access The Marketplace\n\nWhile all the projects above support VS Code extensions, only Microsoft products can use and connect to Microsoft’s [Extension Marketplace](https://marketplace.visualstudio.com/vscode). Its [Terms of Use](https://aka.ms/vsmarketplace-ToU) prevent any non Visual Studio products to access the marketplace.\n\nGitpod employs a workaround where users can upload .vsix files to install extensions. This causes unnecessary friction as users have to download those files directly from GitHub, just to re-upload them to Gitpod. Downloading from the Microsoft Marketplace for any use other than in Microsoft products is prohibited, too.","metadata":{"source":"https://www.gitpod.io/blog/open-vsx","loc":{"lines":{"from":25,"to":29}}}}],["679",{"pageContent":"Most extensions are developed by the community and published under permissive Open Source Licenses. Having to distribute and access these community-owned extensions in a system with such restrictive terms of services does not seem right. We want to fix this and host an open-source extension registry at the vendor-neutral [Eclipse Foundation](https://www.eclipse.org/org/foundation/).","metadata":{"source":"https://www.gitpod.io/blog/open-vsx","loc":{"lines":{"from":31,"to":31}}}}],["680",{"pageContent":"You Can Host Your Own Registry\n\nIn addition to providing a publicly hosted, vendor-neutral extension registry, we also make the code available as open-source. This way everyone can install their own registry and use it, e.g. inside a company network. As a result, you are not forced to publish proprietary extensions to a public marketplace, but maintain precise control over their availability. This is very similar to common practice found in other ecosystems such as npm, Cargo or Maven.\n\n![Open VSX Registry](../../../static/images/blog/open-vsx/openvsx-screenshot.png)","metadata":{"source":"https://www.gitpod.io/blog/open-vsx","loc":{"lines":{"from":33,"to":37}}}}],["681",{"pageContent":"Open VSX\n\nThis new registry is developed and maintained under the [Eclipse Open VSX](https://github.com/eclipse/openvsx) project. It contains the registry server, a web interface and a CLI to make publishing easy.\n\nThe publicly hosted instance is available at [https://open-vsx.org](https://open-vsx.org), and the upcoming Theia version 1.0 will use this installation as default registry.\n\nOpen VSX defines its own API, because Microsoft’s VS Code Marketplace API is proprietary and undocumented. An adapter between these two APIs is possible, planned and required to connect VS Code/VSCodium to Open VSX.","metadata":{"source":"https://www.gitpod.io/blog/open-vsx","loc":{"lines":{"from":39,"to":45}}}}],["682",{"pageContent":"Publishing\n\nWe would love to see extension developers publish to our registry in addition to Microsoft’s. To that end we developed a CLI that makes publishing a breeze. The basic four steps to publish your extensions are:\n\n1. Register on open-vsx.org through [GitHub OAuth](https://open-vsx.org/oauth2/authorization/github)\n2. [Create an access token](https://open-vsx.org/user-settings/tokens) and copy it\n3. Run `npx ovsx create-namespace <publisher> -p <token>` with the publisher name specified in the extension’s package.json\n4. Run `npx ovsx publish -p <token>` in the directory of the extension you want to publish\n\nVisit the [Open VSX Wiki](https://github.com/eclipse/openvsx/wiki/Publishing-Extensions) for a more in-depth explanation of the publishing process.","metadata":{"source":"https://www.gitpod.io/blog/open-vsx","loc":{"lines":{"from":47,"to":56}}}}],["683",{"pageContent":"Seeding the Registry\n\nUntil extension developers start publishing to open-vsx.org themselves, we will publish open-source extensions through a script that is maintained in a [GitHub repository](https://github.com/open-vsx/publish-extensions). A continuous integration build regularly runs through the list of changes and automatically deploys all the listed projects. If you are missing a certain extension, you can do the following:\n\n1. Ask the original maintainer to publish to open-vsx.org, pointing them to this post for context.\n2. If the maintainer does not respond, create a PR to <a class=\"no-nowrap\" href=\"https://github.com/open-vsx/publish-extensions\">https://github.com/open-vsx/publish-extensions</a>","metadata":{"source":"https://www.gitpod.io/blog/open-vsx","loc":{"lines":{"from":58,"to":63}}}}],["684",{"pageContent":"Final Words\n\nThe VS Code team is doing a great job building a developer experience that is loved and used by more and more developers. The large ecosystem of extensions is unique and provides state-of-the-art tool support for all modern programming languages, frameworks and tools.\n\nWe believe that the assets released as open source should remain readily available to everyone. A vendor-neutral, community-driven marketplace for VS Code extensions is an important first step to make this happen.","metadata":{"source":"https://www.gitpod.io/blog/open-vsx","loc":{"lines":{"from":65,"to":69}}}}],["685",{"pageContent":"---\nauthor: svenefftinge, JohannesLandgraf\ndate: Tue, 25 Aug 2020 13:00:00 UTC\nexcerpt: As of today Gitpod is open source under the AGPL license at github.com/gitpod-io/gitpod. This allows the community to participate in the\nimage: teaser.jpg\nslug: opensource\nsubtitle:\nteaserImage: teaser.jpg\ntags: [\"Company building\"]\ntitle: Gitpod is now Open Source 🎉\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n<script>\n    import LinkButton from \"$lib/components/ui-library/link-button/link-button.svelte\"\n</script>\n\nAs of today Gitpod is open source under the AGPL license at [github.com/gitpod-io/gitpod](https://github.com/gitpod-io/gitpod). This allows the community to participate in the development of Gitpod, provides more transparency and makes it even easier for developers to use and integrate Gitpod in their workflows.","metadata":{"source":"https://www.gitpod.io/blog/opensource","loc":{"lines":{"from":1,"to":21}}}}],["686",{"pageContent":"For those of you who know us, this probably does not come as a big surprise. Working in open source is in our DNA and everything we’ve created over the past 10 years, including [Theia](https://github.com/eclipse-theia/theia), [Xtext](https://github.com/eclipse/xtext), [Open VSX](https://github.com/eclipse/openvsx) and many other projects have been open source. In fact, Gitpod was our only closed-source project and it is a relief to change that going forward.","metadata":{"source":"https://www.gitpod.io/blog/opensource","loc":{"lines":{"from":23,"to":23}}}}],["687",{"pageContent":"Open-Source Contributions\n\nContributing to Gitpod should be easy and accessible for everyone. All contributions are welcome, including pull requests, issues, documentation as well as updates and tweaks, blog posts, tutoials, and more. Please head over to [GitHub](https://github.com/gitpod-io/gitpod) to find out about the various ways you can contribute and join our [Gitpod Community](https://community.gitpod.io/).\n\nOver the past year, Gitpod has simplified contributions to many open source projects (see [contribute.dev](https://contribute.dev/) for examples). Today, everyone in our team is excited to share our own streamlined development pipeline including Kubernetes preview deployments, an aggressively cached build system, our own slim and fast CI system and of course Gitpod, which continuously beams us into ready-to-code (and debug) dev environments. [Chris](https://github.com/csweichel) gave a great talk about this setup earlier this year 👇\n\n`youtube: dFMpXUsJcGM`","metadata":{"source":"https://www.gitpod.io/blog/opensource","loc":{"lines":{"from":25,"to":31}}}}],["688",{"pageContent":"`youtube: dFMpXUsJcGM`\n\nNaturally, we develop Gitpod in Gitpod. This allows the whole team to spin up fully initialized, remote dev environments on any branch at any time.\n\nIn line with the [pets vs. cattle](http://cloudscaling.com/blog/cloud-computing/the-history-of-pets-vs-cattle/?utm_source=thenewstack&utm_medium=website&utm_campaign=platform) analogy of the cloud-native world, we treat dev environments as automated (yet customizable) resources you can spin up when you need them and close down (and forget about) when you are done with your task. Once you experience the peace of mind of automated, ephemeral dev environments you never want to go back.\n\nSven will run a webinar next week on Thursday, where we will showcase how we use Gitpod internally at Gitpod and how much it improves our workflow. Hope to see you there!","metadata":{"source":"https://www.gitpod.io/blog/opensource","loc":{"lines":{"from":31,"to":37}}}}],["689",{"pageContent":"Sven will run a webinar next week on Thursday, where we will showcase how we use Gitpod internally at Gitpod and how much it improves our workflow. Hope to see you there!\n\n<LinkButton href=\"https://us02web.zoom.us/webinar/register/5415977565541/WN_amoa6lnEQniLykXUYCDyBQ\" target=\"_blank\" variant=\"primary\" size=\"large\">How Gitpod uses Gitpod</LinkButton>","metadata":{"source":"https://www.gitpod.io/blog/opensource","loc":{"lines":{"from":37,"to":39}}}}],["690",{"pageContent":"Gitpod Self-Hosted is Now Free\n\nThe [SaaS offering of gitpod.io](/pricing) remains the easiest way to streamline your development workflows with continuously prebuilt dev environments.\n\nIn case you want to host Gitpod on your own infrastructure or private cloud, starting today, Gitpod Self-Hosted is free for unlimited users. Organisations using Gitpod Self-Hosted can purchase an enterprise license in order to get additional features like:\n\n- [Snapshots](/docs/configure/workspaces/collaboration#sharing-snapshots) (share a reproducible workspace with your team)\n- [Live Share](/docs/configure/workspaces/collaboration#sharing-running-workspaces) (invite others into your running workspace)\n- [Unlimited Prebuilds](/docs/configure/projects/prebuilds#prebuilds) (making ephemeral dev environments possible)\n- Admin Dashboard","metadata":{"source":"https://www.gitpod.io/blog/opensource","loc":{"lines":{"from":41,"to":50}}}}],["691",{"pageContent":"Offering a paid plan for enterprises makes it possible for us to keep working towards building a new category in developer tooling, which completes modern DevOps pipelines. In the future we will add additional functionality to both the open source code as well our paid offering.\n\n<LinkButton href=\"/self-hosted\" variant=\"primary\" size=\"large\">Start for Free</LinkButton>","metadata":{"source":"https://www.gitpod.io/blog/opensource","loc":{"lines":{"from":52,"to":54}}}}],["692",{"pageContent":"---\nauthor: JohannesLandgraf, svenefftinge, akosyakov\ndate: Tuesday, 28 Sep 2021 13:00:00 UTC\nexcerpt: Run the latest VS Code on a remote machine accessed through a modern web browser - from any device, from anywhere.\nimage: teaser2.jpg\nslug: openvscode-server-launch\ntags: [\"Company building\"]\nsubtitle:\nteaserImage: teaser2.jpg\ntitle: VS Code in the browser for everyone\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n<script>\n  import OpenvscodeLaunchPartners from \"$lib/components/blog/openvscode-launch-partners.svelte\";\n  import Quotes from \"$lib/components/blog/openvscode-quotes.svelte\";\n</script>\n\n**TL;DR**\n\n- Gitpod introduces open-source project [OpenVSCode Server](https://github.com/gitpod-io/openvscode-server/) that runs the latest VS Code on a remote machine accessed through a modern web browser.\n- The project is backed by GitLab, VMware, Uber, SAP, Sourcegraph, RStudio, SUSE and many others.","metadata":{"source":"https://www.gitpod.io/blog/openvscode-server-launch","loc":{"lines":{"from":1,"to":25}}}}],["693",{"pageContent":"In retrospect the second half of 2021 will mark an important turning point for remote, cloud-based developer environments. After two years GitHub managed to ship Codespaces (& [received a cake 🎂](/blog/cake)). With JetBrains’ [remote development support](https://youtrack.jetbrains.com/issue/IDEA-226455#focus=Comments-27-5192116.0-0) developers will be able to choose between IDEs to access Gitpod's ephemeral, cloud-based developer environments later this year. For those who like the convenience of a browser, we have great news to share today.\n\nWe are excited to announce [OpenVSCode Server](https://github.com/gitpod-io/openvscode-server/) - an open-source project that makes running VS Code in a browser easily accessible for all developers and organisations. [OpenVSCode Server](https://github.com/gitpod-io/openvscode-server/) runs upstream VS Code on a remote machine accessed through a modern web browser - from any device, from anywhere.","metadata":{"source":"https://www.gitpod.io/blog/openvscode-server-launch","loc":{"lines":{"from":27,"to":29}}}}],["694",{"pageContent":"> **Unlike other attempts, this project is based on a minimal set of changes and uses the same architecture that powers both Gitpod and GitHub Codespaces at scale.**\n\nThe project is officially backed by our partners from GitLab, VMware, Uber, SAP, Sourcegraph, RStudio, SUSE, Tabnine, Render and TypeFox.\n\n<Quotes />","metadata":{"source":"https://www.gitpod.io/blog/openvscode-server-launch","loc":{"lines":{"from":31,"to":35}}}}],["695",{"pageContent":"Goals\n\nWe have been approached by individual developers and large organisations asking how we manage to always run the latest VS Code in Gitpod given that Microsoft doesn't publish the source code they use to enable GitHub Codespaces. Since many developers and organisations want to adopt the approach within their own products and daily workflows with the same low-footprint technique like Gitpod, we decided to share this with everyone.\n\nThe project has the following long-standing objectives:","metadata":{"source":"https://www.gitpod.io/blog/openvscode-server-launch","loc":{"lines":{"from":37,"to":41}}}}],["696",{"pageContent":"The project has the following long-standing objectives:\n\n1. Enable every developer to run the latest VS Code in the browser based on the same architecture that powers both Gitpod and GitHub Codespaces\n2. Eliminate the need for bad forks of VS Code that introduce unnecessary complexity\n3. Provide a straightforward upgrade path and low maintenance effort\n4. Demonstrate that professional software development in the cloud is a reality today\n5. Offer a browser-based VS Code distribution that is free from the control of Microsoft in addition to the vendor neutral [OpenVSX extension registry](https://open-vsx.org/)","metadata":{"source":"https://www.gitpod.io/blog/openvscode-server-launch","loc":{"lines":{"from":41,"to":47}}}}],["697",{"pageContent":"Benefits\n\nWe shared and tested the project with several developers and asked them about the benefits of OpenVSCode Server. Below is a list of the most common responses:\n\n- **Use the power of the cloud** - dependencies, compilation, testing, large data sets can all be run on machines far more powerful than your laptop\n- **Remote access** - you can access those machines from any device such as iPads and Chromebooks via a web browser with the familiar VS Code experience\n- **Save battery & data** - as all CPU and RAM intensive tasks run on the remote machine you will preserve battery life and keep your data plan under control\n- **Keep your source secure** - you keep your dev environment centralized and secure, away from your local machine","metadata":{"source":"https://www.gitpod.io/blog/openvscode-server-launch","loc":{"lines":{"from":49,"to":56}}}}],["698",{"pageContent":"Getting started\n\nGetting started is as simple as a one-line `docker run` command and starting [localhost:3000](localhost:3000).\n\n```shell\ndocker run -it --init -p 3000:3000 -v \"$(pwd):/home/workspace:cached\" gitpod/openvscode-server","metadata":{"source":"https://www.gitpod.io/blog/openvscode-server-launch","loc":{"lines":{"from":58,"to":63}}}}],["699",{"pageContent":"To run VS Code on the cloud provider of your choice we created [guides](https://github.com/gitpod-io/openvscode-server/tree/docs/guides/) for [AWS](https://github.com/gitpod-io/openvscode-server/tree/docs/guides/aws-ec2), [Azure](https://github.com/gitpod-io/openvscode-server/tree/docs/guides/azure-vm), [Digital Ocean](https://github.com/gitpod-io/openvscode-server/tree/docs/guides/digital-ocean), [GCP](https://github.com/gitpod-io/openvscode-server/tree/docs/guides/gcp-gce), [Railway](https://github.com/gitpod-io/openvscode-server/tree/docs/guides/railway) and [Render](https://github.com/gitpod-io/openvscode-server/tree/docs/guides/render).\n\nA big thank you to all our engineers involved in making this happen, specifically [Anton](https://github.com/akosyakov), [Jean Pierre](https://github.com/jeanp413), [Filip](https://github.com/filiptronicek) and [Mike](https://github.com/mikenikles)!\n\n`youtube: qGR7rgqjdiY`","metadata":{"source":"https://www.gitpod.io/blog/openvscode-server-launch","loc":{"lines":{"from":66,"to":70}}}}],["700",{"pageContent":"How is this different to Gitpod?\n\nGitpod is all about removing friction from the developer experience by provisioning and orchestrating [automated, ephemeral developer environments](/blog/cloud-based-development-for-everyone#ephemeral-developer-environments) for you and your team. An IDE is just one building block of a working cloud based developer environment, in addition to the operating system, databases, compilers and all the other tools you need to be productive. At Gitpod we want to support the IDE or editor you like best, and providing VS Code through the web browser is just one possibility. Alternatively, you can access your Gitpod workspaces [through SSH](/blog/local-app), [local VS Code](/docs/references/ides-and-editors/vscode) and soon your favorite Jetbrains IDEs.\n\n- If you want one-click, fully automated developer environments that give yourself and your team an unparalleled productivity boost try [Gitpod](https://gitpod.io/workspaces/).","metadata":{"source":"https://www.gitpod.io/blog/openvscode-server-launch","loc":{"lines":{"from":72,"to":76}}}}],["701",{"pageContent":"- If you want one-click, fully automated developer environments that give yourself and your team an unparalleled productivity boost try [Gitpod](https://gitpod.io/workspaces/).\n\n- If you have a machine somewhere which you would like to access with VS Code through a browser, check out [OpenVSCode Server](https://github.com/gitpod-io/openvscode-server/).\n\n<OpenvscodeLaunchPartners />","metadata":{"source":"https://www.gitpod.io/blog/openvscode-server-launch","loc":{"lines":{"from":76,"to":80}}}}],["702",{"pageContent":"---\nauthor: nancy-chauhan, Siddhant-K-code\ndate: Thursday, 14 July 2022 11:00:00 UTC\ntitle: Personalize your Gitpod Workspace Environments\nslug: personalize-your-gitpod-workspace-environment\nexcerpt: With Gitpod, switching to remote development becomes frictionless 🚀 You Can personalize your Gitpod workspaces as you configure your IDE Settings & Custom dotfiles.\nteaserImage: header.png\ntags: [\"Gitpod updates\"]\nimage: header.png\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>","metadata":{"source":"https://www.gitpod.io/blog/personalize-your-gitpod-workspace-environment","loc":{"lines":{"from":1,"to":14}}}}],["703",{"pageContent":"<script context=\"module\">\n  export const prerender = true;\n</script>\n\nWe know how important it is for you to customize and perfect your development environment. Of course, you want either your favourite IDE from JetBrains, VS Code as your editor, or even vim. You want your optimal configuration of keyboard shortcuts, spaces vs tabs, editor extensions like [Prettier](https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode), editor themes like [Dracula theme](https://draculatheme.com/), and fonts like [FiraCode](https://github.com/tonsky/FiraCode).\n\nWith Gitpod, switching to remote development is frictionless 🚀 You can personalize your Gitpod workspaces by configuring your IDE Settings, custom dotfiles and IDE or editor of your choice. Gitpod helps you to get the best of both worlds: ephemeral workspaces and personalization consistent across all Gitpod dev environments.✨\n\nIn this article, we'll show you three features in Gitpod for personalisation:","metadata":{"source":"https://www.gitpod.io/blog/personalize-your-gitpod-workspace-environment","loc":{"lines":{"from":14,"to":22}}}}],["704",{"pageContent":"In this article, we'll show you three features in Gitpod for personalisation:\n\n1. How to configure your IDE and editor\n2. How to configure Dotfiles\n3. How to configure VS Code settings sync\n   <br><br>\n\n# 1. IDEs & Editor\n\nGitpod currently supports various popular IDEs & Editors 🎉. You can edit code in Gitpod using:\n\n- [JetBrains IDE’s](https://www.gitpod.io/docs/references/ides-and-editors) via [JetBrains Gateway](https://www.gitpod.io/docs/integrations/jetbrains-gateway)\n- [VS Code in the browser](https://www.gitpod.io/docs/references/ides-and-editors/vscode-browser) and [VS Code on desktop](https://www.gitpod.io/docs/references/ides-and-editors/vscode)\n- [Command-line-based](https://www.gitpod.io/docs/references/ides-and-editors/command-line) editors such as Vim","metadata":{"source":"https://www.gitpod.io/blog/personalize-your-gitpod-workspace-environment","loc":{"lines":{"from":22,"to":35}}}}],["705",{"pageContent":"<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Updating Gitpod IDE preferences to {title}\" src=\"/images/editors/select-jetbrains-ide.webm\" type=\"video/webm\"></video>\n    <figcaption style=\"text-align: center;\" >Updating Gitpod IDE preferences to choose IDE/editor of your choice</figcaption>\n</figure>\n\nTo configure a specific IDE or editor of your choice for all new workspaces:\n\n1. You will need to update your [user preferences](https://gitpod.io/preferences).\n2. For changes to get reflected, you have to restart a workspace. To read more about this in detail, you can refer to the following [doc](https://www.gitpod.io/docs/references/ides-and-editors).\n   <br><br>\n\n# 2. Dotfiles","metadata":{"source":"https://www.gitpod.io/blog/personalize-your-gitpod-workspace-environment","loc":{"lines":{"from":37,"to":48}}}}],["706",{"pageContent":"# 2. Dotfiles\n\nDotfiles are a collective name for a user's configuration files. As with any configuration file, Dotfiles are used to customize your environment according to personal requirements. For example: customizing your `git` environment using the `.gitconfig` file, your bash/ zsh shell using the `.bashrc` file or `.zshrc` file, or your `vim` editor using `.vimrc`, all these are done using dotfiles. These can also be fully functional scripts.\n\nConfigure Dotfiles in Gitpod [Preferences](https://gitpod.io/preferences) to be loaded on every new workspace.\n\nDotfiles is not to be confused with the `.gitpod.yml`. Dotfiles are personal to you & they contain all your config settings and preferences that can be consistent and reused across all Gitpod workspaces. Whereas `.gitpod.yml` is used to prepare the dev environment for your project. The `gitpod.yml` is a project-specific file that you check into the root of your repository.","metadata":{"source":"https://www.gitpod.io/blog/personalize-your-gitpod-workspace-environment","loc":{"lines":{"from":48,"to":54}}}}],["707",{"pageContent":"> Note: You should not necessarily use dotfiles to install heavy applications & libraries and instead use Dockerfiles to leverage the [build cache](https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#leverage-build-cache). You can configure custom docker image for your project and can read more about it from [here](https://www.gitpod.io/docs/configure/workspaces/workspace-image).","metadata":{"source":"https://www.gitpod.io/blog/personalize-your-gitpod-workspace-environment","loc":{"lines":{"from":56,"to":56}}}}],["708",{"pageContent":"How Do Dotfiles Work in a Gitpod Workspace?\n\n<figure class=\"flex flex-col items-center text-center\">\n  <img src=\"/images/blog/personalize-your-gitpod-workspace-environment/dotfiles.png\" alt=\"Multiple services can communincate with each-other when running on the same machine\" width=\"700\" />\n</figure>","metadata":{"source":"https://www.gitpod.io/blog/personalize-your-gitpod-workspace-environment","loc":{"lines":{"from":58,"to":62}}}}],["709",{"pageContent":"When you create a new Gitpod workspace, the Dotfiles loading process first looks in your [preferences](https://gitpod.io/preferences) to get your dotfiles repository address. If found, the repository is cloned to your new workspace as `.dotfiles` in the `$HOME` directory, before searching for [executable](https://www.gitpod.io/docs/configure/user-settings/dotfiles#:~:text=Make%20sure%20to%20make%20your%20installation%20script%20executable%20with%20chmod%20755%20%3Cinstall%2Dscript%2Dname%3E.sh%20before%20committing%20and%20pushing%20to%20your%20dotfiles%20repository.) scripts like `install.sh`, `bootstrap.sh` (for the exact script names, see the [configure Dotfiles](https://www.gitpod.io/docs/configure/user-settings/dotfiles#:~:text=following%20install%20scripts) page). The dotfiles are synchronously set up before Gitpod starts to handle the `.gitpod.yml` [start tasks](https://www.gitpod.io/docs/configure/workspaces/tasks).","metadata":{"source":"https://www.gitpod.io/blog/personalize-your-gitpod-workspace-environment","loc":{"lines":{"from":64,"to":64}}}}],["710",{"pageContent":"This loading procedure will be repeated each time you create a new Gitpod Workspace. Refer to the [configure Dotfiles](/docs/configure/user-settings/dotfiles) page in our docs to learn more.","metadata":{"source":"https://www.gitpod.io/blog/personalize-your-gitpod-workspace-environment","loc":{"lines":{"from":66,"to":66}}}}],["711",{"pageContent":"Getting started with Dotfiles in Gitpod\n\nThe following video shows an example of how to setup Dotfiles, by configuring [`deno`](https://deno.land/) in our Gitpod Workspace.\n\n<p align=\"center\">\n    <iframe title=\"loom\" width=\"640\" height=\"360\" src=\"https://www.loom.com/embed/d7185cfb6ca54fdeb521073057dc2715\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>\n</p>\n\n> **Important:** Your installation script should be executable. Enter `chmod 755 <install-script-name>.sh` before committing and pushing it to your dotfiles repository.\n\n1. Add the URL of your dotfiles repository in [`/preferences`](https://gitpod.io/preferences)\n2. Save the configuration\n\nAll your dotfiles will be configured automatically from the next time you create a new Gitpod Workspace.\n\n> You Can Refer this [demo-dotfiles template](https://github.com/gitpod-io/demo-dotfiles) to Bring your dotfiles to Gitpod.\n\n<br>\n\n# 3. VS Code settings sync 🔁","metadata":{"source":"https://www.gitpod.io/blog/personalize-your-gitpod-workspace-environment","loc":{"lines":{"from":68,"to":87}}}}],["712",{"pageContent":"> You Can Refer this [demo-dotfiles template](https://github.com/gitpod-io/demo-dotfiles) to Bring your dotfiles to Gitpod.\n\n<br>\n\n# 3. VS Code settings sync 🔁\n\n[Settings Sync](https://code.visualstudio.com/docs/editor/settings-sync) in VS Code lets you always work with your favorite editor setup by sharing your VS Code configuration such as settings, keybindings, and installed extensions across your machines.\n\nWhile working with Gitpod, you start a new workspace for every task. With Settings Sync, you can avoid resetting your environment for each new workspace 🧡\n\nFor VS Code in the browser Gitpod enables Settings Sync by default. Settings Sync keeps polling the backend to ensure your settings are stored, which gets pushed to the Gitpod's server after the first sync. You can learn more about personalizing your workspace in this [video](https://www.gitpod.io/screencasts/personalise-your-workspace).","metadata":{"source":"https://www.gitpod.io/blog/personalize-your-gitpod-workspace-environment","loc":{"lines":{"from":87,"to":97}}}}],["713",{"pageContent":"Getting started with Settings Sync in VS Code Desktop\n\n`youtube: wMW2JrCqVA4`\n\n1. Install and enable the [Gitpod extension](https://marketplace.visualstudio.com/items?itemName=gitpod.gitpod-desktop).\n2. Using the [Command Palette](https://code.visualstudio.com/api/ux-guidelines/command-palette) select: \"Settings Sync: Enable signing in with Gitpod\".\n   With this your preferences will be stored in Gitpod’s server.\n3. Restart your VS Code Desktop application.\n   > **Important:** You must entirely close VS Code Desktop for changes to take effect.\n4. Enable Settings Sync from the Manage gear menu at the bottom of the Activity Bar. Authenticate with Gitpod to enable settings sync.\n\nRead more in the [VS Code Setting Sync](https://www.gitpod.io/docs/references/ides-and-editors/settings-sync) documentation.","metadata":{"source":"https://www.gitpod.io/blog/personalize-your-gitpod-workspace-environment","loc":{"lines":{"from":99,"to":110}}}}],["714",{"pageContent":"Power of customization\n\nCustomizing the settings and tools to your preferences and workflows is an important step when using any development environment. Let us know how personalizing your Gitpod workspace environment makes you more productive by [joining our community](https://www.gitpod.io/community) ✨\n\nIf you have any questions, drop by our community [Discord server](https://gitpod.io/chat).","metadata":{"source":"https://www.gitpod.io/blog/personalize-your-gitpod-workspace-environment","loc":{"lines":{"from":112,"to":116}}}}],["715",{"pageContent":"---\nauthor: csweichel\ndate: Mon Mar 18 2019 16:16:17 GMT+0000 (UTC)\nexcerpt: Once your developer environment is freed from manual setup procedures it can do work even while you are not. We call this continuous\nimage: compiling-xkcd.png\nslug: prebuilds\nsubtitle: Prebuild your workspaces\ntitle: Waiting for code to build is like watching paint dry\ntags: [\"Gitpod updates\"]\nurl: https://medium.com/@csweichel/a1c6b25fd601\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\nOnce your developer environment is freed from manual setup procedures it can do work even while you are not. We call this continuous development.","metadata":{"source":"https://www.gitpod.io/blog/prebuilds","loc":{"lines":{"from":1,"to":17}}}}],["716",{"pageContent":"Once your developer environment is freed from manual setup procedures it can do work even while you are not. We call this continuous development.\n\nA while ago Sven described the idea of [developer environment as code](/blog/dev-env-as-code). His main point: instead of using outdated README files that describe how to set up our developer environment we should have executable, replicable and version-controlled descriptions thereof. In such a dev-environment as code world, on-boarding new team members/contributors is dead easy, going back to an old branch becomes a breeze (that old setup you had a year ago is now easy to restore) and playing with a new project becomes a joy. All those situations are very much _direct use_ scenarios; you set up a dev-environment using code which you as a developer use straight away.","metadata":{"source":"https://www.gitpod.io/blog/prebuilds","loc":{"lines":{"from":17,"to":19}}}}],["717",{"pageContent":"However, a machine-reproducible version of your development setup enables another powerful capability: your dev-environment can already checkout the latest code, download dependencies and build everything. Once you actually open your IDE, everything’s ready for you. No more siting there and watching ~~paint dry~~ yarn download the internet.\n\n![The number 1 programmer excuse for legitimately slacking off: 'My Code is compiling.' - https://xkcd.com/303/](../../../static/images/blog/prebuilds/compiling-xkcd.png)","metadata":{"source":"https://www.gitpod.io/blog/prebuilds","loc":{"lines":{"from":21,"to":23}}}}],["718",{"pageContent":"Paint dries even when you’re not watching\n\nTurns out we don’t actually have to be present for those things to happen. What if we had a system that would use our dev-environment description, check out the repo, build everything and then make it available to us?\n\nSounds an awful lot like continuous integration (CI). Except there’s a subtle difference: CI checks if everything still fits together, i.e. does the code still build and do the tests still pass? The result of continuous integration is a test report and a bunch of built binaries/Docker images/update sites/APK files/you get the point. A CI build does not give you a ready-to-code workspace. But it tells you that the next time you want to build your software things will likely be fine.\n\n> Continuous Development means that your code is built before you even open it. Once you open an IDE on your project, everything is ready to go.","metadata":{"source":"https://www.gitpod.io/blog/prebuilds","loc":{"lines":{"from":25,"to":31}}}}],["719",{"pageContent":"> Continuous Development means that your code is built before you even open it. Once you open an IDE on your project, everything is ready to go.\n\nThe result of _continuous development_ is a ready-to-code workspace. The second you open your IDE you can start working because all dependencies have been downloaded, indices updated, code generated and compiled, ~~and coffee has been brewed~~. Your dev environment has done all the things you’d otherwise do manually, except you didn’t have to trigger them or watch them finish.","metadata":{"source":"https://www.gitpod.io/blog/prebuilds","loc":{"lines":{"from":31,"to":33}}}}],["720",{"pageContent":"How could we build this?\n\n![Hands with paint on them.](../../../static/images/blog/prebuilds/colored-hands.jpg)_Photo by [Amaury Salas](https://unsplash.com/photos/IhXrWDckZOQ?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText) on [Unsplash](https://unsplash.com/?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)_\n\nTo build a continuous development system we need three things:\n\n1. A dev-environment-as-code, e.g. based on Docker — there are [various ways](/blog/dev-env-as-code#dev-environment-as-code) of how this can be achieved.\n\n1. Means to trigger an action when our code changes. The obvious candidates are [webhooks](https://developer.github.com/webhooks/), [GitHub actions](https://github.com/features/actions), or something tied in to your CI system.\n\n1. The integration bit that upon changes to your code builds the dev-environment, checks out your code, builds it and then serves the resulting ready-to-code environment.","metadata":{"source":"https://www.gitpod.io/blog/prebuilds","loc":{"lines":{"from":35,"to":45}}}}],["721",{"pageContent":"1. The integration bit that upon changes to your code builds the dev-environment, checks out your code, builds it and then serves the resulting ready-to-code environment.\n\nLet’s sketch out a possible implementation of a such a system. Our dev-environment-as-code is basically a Docker image that contains the tools we need + [Eclipse Theia](https://www.theia-ide.org/) as IDE). Suppose we’d have this dev-env built as ourprj/dev-env:latest .\n\n```dockerfile\nFROM theiaide/theia:next\n\nUSER root\nRUN apk add go && \\\n    npm install --global yarn\nUSER theia","metadata":{"source":"https://www.gitpod.io/blog/prebuilds","loc":{"lines":{"from":45,"to":55}}}}],["722",{"pageContent":"Using for example Jenkins or GitHub Actions we can then build a ready-to-code environment using a Dockerfile such as:\n\n```dockerfile\nFROM ourprj/dev-env:latest\n\nWORKDIR /home/project\nCOPY /workspace/ourprj .\n\nRUN yarn install && \\\n    yarn build","metadata":{"source":"https://www.gitpod.io/blog/prebuilds","loc":{"lines":{"from":58,"to":67}}}}],["723",{"pageContent":"Once we’re ready to start working on a new feature, or want to review a PR, we just find the previously built Docker image and have everything ready to go. No faffing with git clone, waiting for the code to build or anything of the sorts. We have reduced many minutes of our time to a simple Docker run.\n\nA similar way of implementing this is the way [gitpod.io](https://gitpod.io) does it (full disclosure: I am one of the folks working on this project). Gitpod comes with a GitHub app that triggers _workspace prebuilds_ which in essence take your dev-environment as code (Dockerfile), execute a set of commands in there and associate the results with the particular commit that triggered it all. When you open a workspace on that commit, you’ll get the results of the prebuild instead of waiting for everything to complete.","metadata":{"source":"https://www.gitpod.io/blog/prebuilds","loc":{"lines":{"from":70,"to":72}}}}],["724",{"pageContent":"Is this new?\n\nProbably not. The idea has been around in one form or the other. But now, with the advent of machine reproducible dev-environments, Docker & Theia we can finally build this for the real world. I did not find statistics how much time people spend waiting for their stuff to build on any given day. But I know waiting for something that you didn’t have to wait for is not a good way to spend your time. If anything continuous development helps us developers create more and wait less.","metadata":{"source":"https://www.gitpod.io/blog/prebuilds","loc":{"lines":{"from":74,"to":76}}}}],["725",{"pageContent":"---\nauthor: atduarte\ndate: Mon, 25 Apr 2023 6:00:00 UTC\nexcerpt: A guide to organizations, the recent changes and how they affect the user's experience.\nimage: teaser.jpg\nslug: organizations\nteaserImage: teaser.jpg\ntitle: A Guide to Gitpod's New Approach to Organizations\ntags: [\"Gitpod updates\"]\n---\n\nGitpod has recently made changes to its approach to organizations, billing, and cost attribution. In this blog post, we will explain the new changes and clarify how they affect organizations, billing, and cost attribution.\n\n## Introduction\n\nGitpod is always listening to its users' feedback to improve the platform. Based on this feedback, Gitpod has made changes to its approach to organizations, billing, and cost attribution. In this blog post, we will explain the new changes and clarify how they affect your experience.","metadata":{"source":"https://www.gitpod.io/blog/organizations","loc":{"lines":{"from":1,"to":16}}}}],["726",{"pageContent":"Organizations\n\nPreviously known as teams, Gitpod has renamed and reimagined them to make their purpose clearer. An organization (org) now equates to a company and serves as a \"tenant.\" This means that resources, including workspaces, projects, settings, and Single Sign-On (SSO) users in the near future, are fully owned by the org and are bound to its lifecycle.\n\nThe workspace list will soon start showing only the workspaces that belong to the currently active organization. Orgs will be able to have SSO configured and manage/own their users. This new approach to organizations sets clear boundaries for resource usage, allowing users to group their resources effectively.","metadata":{"source":"https://www.gitpod.io/blog/organizations","loc":{"lines":{"from":18,"to":22}}}}],["727",{"pageContent":"Personal Accounts\n\nPersonal accounts have been deprecated and automatically turned into an organization with the same name. Billing is moved from the user settings and will be part of the org settings. New users are already observing this behavior. This change helps streamline the billing process and makes it easier to manage.","metadata":{"source":"https://www.gitpod.io/blog/organizations","loc":{"lines":{"from":24,"to":26}}}}],["728",{"pageContent":"Cost Attribution\n\nCurrently, cost attribution is complex, taking into account whether the organization has credits. If not, the Default Billing Account, which is hidden in the user settings, is used. However, in line with Gitpod's vision of self-containment for orgs, the cost of usage will soon be attributed to the org that owns that resource. If there are no credits available, no fallback is used. This change will make cost attribution clearer and easier to understand.\n\nIn line with this new approach, Gitpod has also made changes to the create workspace page. The [\"Always Create with Options\" changelog post](/changelog/new-workspace-creation-page) describes how Gitpod has changed the page to make it clearer in what org the workspace is starting.","metadata":{"source":"https://www.gitpod.io/blog/organizations","loc":{"lines":{"from":28,"to":32}}}}],["729",{"pageContent":"Timeline\n\nGitpod will roll out this change over the next few weeks and will inform users within the product when this happens. You don't need to do anything. If you have any questions or need assistance, please reach out to [Gitpod’s support team](/support).","metadata":{"source":"https://www.gitpod.io/blog/organizations","loc":{"lines":{"from":34,"to":36}}}}],["730",{"pageContent":"---\nauthor: pawlean, mikenikles, ellenchisa\ndate: Mon, 10 Nov 2021 11:00:00 UTC\nexcerpt: For our third edition of DevX Digest, we talk about the psychology behind developer experience.\nimage: teaser.png\nslug: psychology-of-devx\nsubtitle:\nteaserImage: teaser.png\ntitle: DevX Digest 03 - The Psychology of Developer Experience\ntags: [\"Developer experience\"]\ntype: digest\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n**Welcome to DevX Digest - the place to hear all about Developer Experience**, brought to you by Pauline Narvas [(@paulienuh)](https://twitter.com/paulienuh) and Mike Nikles [(@mikenikles)](https://twitter.com/mikenikles) from Gitpod. You're reading another newsletter from us 🎉! In this edition, we deep dive into the psychology behind developer experience. The key question we will be answering today is whether developer experience is not easy because we don't want it to be?","metadata":{"source":"https://www.gitpod.io/blog/psychology-of-devx","loc":{"lines":{"from":1,"to":18}}}}],["731",{"pageContent":"The Psychology of Developer Experience 🧠\n\nHave you noticed the language used when describing improved developer experience? Tooling is easier, faster and simpler. Despite these promises, Stripe released a [developer coefficient report in 2018](https://stripe.com/files/reports/the-developer-coefficient.pdf), revealing that developers waste a lot of time due to tooling that doesn’t deliver on its efficiency promises. A waste of time costs money. The question then becomes - why haven’t things gotten easier?\n\n> “The best moments in our lives usually occur if a person’s body or mind is stretched to its limits in a voluntary effort to accomplish something difficult and worthwhile.” - Psychologist Mihaly Csikszentimihalyi.\n\nIn other words, the effort put in to accomplish something challenging is a rewarding experience. It feels good being able to do something hard that not everyone can do. _Is this why developer experience hasn’t improved? Because we as developers like the challenge?_","metadata":{"source":"https://www.gitpod.io/blog/psychology-of-devx","loc":{"lines":{"from":20,"to":26}}}}],["732",{"pageContent":"Think back to the last time you were bored. For example, you have spent so much time doing manual work that could be automated. Automating this task may take a lot longer and is perhaps more difficult to do… But at the end of it, your brain feels accomplished and as a result, you feel better about the task. You successfully completed the challenge that you set yourself! It was not too easy (boredom) and not too hard. When something is too hard, resistance and anxiety block your brain from ever entering flow. It’s a balance!\n\n[Ellen Chisa](https://www.youtube.com/watch?v=nPO4QL0Q85s&list=PL3TSF5whlprUTnpP9drAl-knNUnPqKrui&index=4&t=179s) suggests that perhaps developer experience has been optimising for the wrong thing this whole time? Instead of making things easy, faster, simpler; we should be optimising for the flow we described above. Let’s delve into this some more using the example of onboarding.","metadata":{"source":"https://www.gitpod.io/blog/psychology-of-devx","loc":{"lines":{"from":28,"to":30}}}}],["733",{"pageContent":"When something is too hard 😣\n\nIf onboarding is too hard, you can often hit that wall of frustration and spiralling anxiety that comes with it. So how do we solve this? Leveraging the feeling of familiarity is so important. 🎯\n\n- **Anchoring familiar onboarding** e.g. from the comfort of a CLI tool!\n- **Connecting the tool to an existing skill**\n- **Connecting to an existing workflow** e.g. adding to the toolchain\n\n### When something is too easy 🥱\n\nOn the other hand, when something is too easy, people can switch off completely. Brains, eh?\n\nThere needs to be enough effort that people feel like they've done something meaningful. None of us wants the experience of developing software to just be like copy and paste. The feeling of making some real progress by doing should be embedded into the developer experience as it is what brings people back into the flow. 🧠\n\nHow do you solve this? Developers need to be made to feel like something is **believably hard.**","metadata":{"source":"https://www.gitpod.io/blog/psychology-of-devx","loc":{"lines":{"from":32,"to":46}}}}],["734",{"pageContent":"Progressive disclosure 🕹\n\nNow you don’t want to overwhelm people by providing them with every single bit of information at once.\n\nThis will give you the opposite effect: too much to comprehend and anxiety rises. But if you give too little, folks may feel like they know it all already leading to boredom. The best way to solve this is by sending information over a period of time, this is where progressive disclosure comes in.\n\nIn software, this is done quite well with error messages and documentation. Good error messages can reduce anxiety as users are informed about what is going on and feel empowered to solve it, resulting in flow. Good documentation can also support learning and lead to the feeling of growth.","metadata":{"source":"https://www.gitpod.io/blog/psychology-of-devx","loc":{"lines":{"from":48,"to":54}}}}],["735",{"pageContent":"Different learning styles 🎭\n\nDevelopers come from all walks of life, from vast backgrounds and experiences, making awareness of these differences important.\n\nFor instance, let’s take learning styles. Ellen highlighted that developers learn in different ways which contribute to their onboarding experience. Some developers...\n\n- Read the documentation 📖\n- Start with a blank canvas and learn by building 💻\n- Completely take apart an application and reverse it to fit their own needs 🛠\n\nIn a similar sentiment, there’s a saying: _the more you know, the more you don’t know._\n\nEllen experienced this herself when showing [darklang](https://darklang.com/) to developers with functional programming experience, folks with limited programming experience and those that had internalised imperative models. Interestingly, it was the latter group that struggled the most with onboarding because they had a lot of unlearning to do.\n\nDo your efforts in developer experience account for this diversity?","metadata":{"source":"https://www.gitpod.io/blog/psychology-of-devx","loc":{"lines":{"from":56,"to":70}}}}],["736",{"pageContent":"Customisation 🎨\n\nAnother important part of developer experience is customisation. Ideally, developers will grow with a tool over a couple of years. Giving developers the power to customise their experience will cultivate positive feelings as they improve their expertise in it. This will ultimately lead to users paying it forward, sharing and re-investing in your tool in the long-term, which is great!\n\nThere’s a reason why people enjoy sharing their CLI tools, colour schemes, remote office set-ups and optimising these things to their needs.","metadata":{"source":"https://www.gitpod.io/blog/psychology-of-devx","loc":{"lines":{"from":72,"to":76}}}}],["737",{"pageContent":"Is developer experience designed not to be easy? 🎩\n\nWe may need to rethink how we look at developer experience. Instead of promises of tools making our lives easier, better, more efficient, it may be worth honing our focus towards designing balanced experiences that cater for everyone’s learning styles, improving progressive disclosure and giving more power to the developers to make the experience their own.\n\nAs Ellen ends her DevX Conf talk beautifully:\n\n> “we don’t want magic, we want to be magicians.” 🪄\n\n### DevX newsletter is community-driven\n\nAnother thing about Gitpodders is that we're all driven by community feedback, and this newsletter is no exception! Please send us your thoughts, feedback and help us drive this conversation. We may even feature some of your takes and comments in future newsletters!\n\nCome and hang out with us over on [our Discord channel](https://www.gitpod.io/chat).","metadata":{"source":"https://www.gitpod.io/blog/psychology-of-devx","loc":{"lines":{"from":78,"to":90}}}}],["738",{"pageContent":"---\nauthor: evoxmusic, Albanetonnellier, nancy-chauhan\ndate: Tuesday, 22 November 2022 11:00:00 UTC\ntitle: Gitpod x Qovery - Develop, Deploy and Run applications with Gitpod and Qovery\nslug: qovery-and-gitpod\nexcerpt: Gitpod, integrated into the Qovery console, will work on the developer experience, helping to have a complete cloud development environment for the developers anywhere in no time. In this blog we will learn how can we develop and run applications using Qovery and Gitpod.\nteaserImage: header.png\ntags: [\"Gitpod updates\"]\nimage: header.png\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\nAs a developer, how can you increase your velocity to ship? And how can you test what you are about to ship in Production to avoid bad surprises?\n\nThat's where Gitpod and Qovery come to the rescue:","metadata":{"source":"https://www.gitpod.io/blog/qovery-and-gitpod","loc":{"lines":{"from":1,"to":18}}}}],["739",{"pageContent":"As a developer, how can you increase your velocity to ship? And how can you test what you are about to ship in Production to avoid bad surprises?\n\nThat's where Gitpod and Qovery come to the rescue:\n\n- [Gitpod](https://www.gitpod.io/) will focus on the developer experience, ensuring that individual developers and teams are productive enough and can ship fast.\n- While [Qovery](https://www.qovery.com/) helps developers to be autonomous enough to ship in production and correctly manage their applications.\n\nIn this blog we will learn how can we develop and run applications using Qovery and Gitpod:","metadata":{"source":"https://www.gitpod.io/blog/qovery-and-gitpod","loc":{"lines":{"from":18,"to":25}}}}],["740",{"pageContent":"In this blog we will learn how can we develop and run applications using Qovery and Gitpod:\n\n- [What is Gitpod](#what-is-gitpod)\n- [What is Qovery](#what-is-qovery)\n- [How Gitpod and Qovery Makes Sense Together](#how-gitpod-and-qovery-makes-sense-together)\n- [Make a Hotfix with Qovery and Gitpod](#make-a-hotfix-with-qovery-and-gitpod)\n- [Try a New Feature Before Pushing it to Production](#try-a-new-feature-before-pushing-it-to-production)\n- [Example Scenario - Sample application on Qovery x Gitpod](#example-scenario---sample-application-on-qovery-x-gitpod)\n\n# What is Gitpod?","metadata":{"source":"https://www.gitpod.io/blog/qovery-and-gitpod","loc":{"lines":{"from":25,"to":34}}}}],["741",{"pageContent":"# What is Gitpod?\n\nGitpod is an open-source remote development platform for remote development. It provides an automated setup with cloud-based, remote developer environments connected with a developer's [editing experience of choice](https://www.gitpod.io/docs/references/ides-and-editors), making developer experiences better. Gitpod's [Cloud Development Environments (CDEs)](https://www.gitpod.io/cde) help developers to be always ready-to-code from any device, from anywhere.\n\nRather than having a single static environment (like your local machine), Gitpod encourages you to codify your dev environment as code. With your project codified, you'll be able to spin up a new workspace, start coding and throw away the workspace when you're done. You can have multiple workspaces with different contexts open at once - one for your feature, one for a bug, or one for your code review directly in Gitpod.\n\n# What is Qovery?","metadata":{"source":"https://www.gitpod.io/blog/qovery-and-gitpod","loc":{"lines":{"from":34,"to":40}}}}],["742",{"pageContent":"# What is Qovery?\n\n[Qovery](https://www.qovery.com/) is a platform delivering Environments as a Service in your Cloud, where you can build, deploy and test in production-like environments. Qovery turns app deployment and environment provisioning on AWS a breeze. Developers can instantly spin up production-like environments and start shipping in seconds.\n\nQovery introduced the concept of on-demand environments where dev teams can test code changes in isolation by generating Preview environments on every Pull Request.\n\nA preview environment is as good as other deployment environments, e.g., Production, Staging, etc., because it is equipped with everything needed for proper testing in isolation. That includes infrastructure, updated products, integrations, databases, configuration, etc. A preview environment is better than traditional deployment environments because it is super easy to provision and de-provision a preview environment.","metadata":{"source":"https://www.gitpod.io/blog/qovery-and-gitpod","loc":{"lines":{"from":40,"to":46}}}}],["743",{"pageContent":"Perfectly integrated with the developer's workflows, the Qovery UI simplifies deployment, debugging, and monitoring from a unified interface. Qovery is pluggable and ready for whatever you may hold. You can grow your stack without re-tooling and disrupting your DevOps team.\n\n# How Gitpod and Qovery Makes Sense Together\n\nGitpod, integrated into the Qovery console, will work on the developer experience, helping to have a complete cloud development environment for the developers anywhere in no time. On the other side, Qovery will help developer teams be autonomous enough to ship in production and test features in dynamic production-like environments. Let's see how it works behind the scenes and explore real-life examples.","metadata":{"source":"https://www.gitpod.io/blog/qovery-and-gitpod","loc":{"lines":{"from":48,"to":52}}}}],["744",{"pageContent":"The Magic Behind it\n\nQovery is a product that integrates into your working environment, meaning that you can connect it directly to the git account of your choice; it will take the applications from those VCS providers. You can also note that it’s integrated in the same way with Gitpod as it’s working on Git, so when you make a change with Gitpod, Qovery detect the change and react to it. You can also integrate your CI/CD, Container Registry if you want to deploy an already build container image. There are several interfaces, such as a web interface, CLI, API and even a Terraform Provider. All the actions you will perform on those interfaces are applied to your Cloud Infrastructure as you connect your Cloud Provider account when registering in just 30 min.\n\n<figure class=\"flex flex-col items-center text-center\">\n  <img src=\"/images/blog/qovery-and-gitpod/interfaces.png\" alt=\"interfaces\" width=\"600\" />\n</figure>","metadata":{"source":"https://www.gitpod.io/blog/qovery-and-gitpod","loc":{"lines":{"from":54,"to":60}}}}],["745",{"pageContent":"Make a Hotfix with Qovery and Gitpod\n\nLet's say you are a developer working in a production environment and need to change quickly because something went wrong! Here are the steps to follow:\n\n1. The Gitpod integration on the [Qovery console](https://console.qovery.com/) will allow you to make changes by clicking on the \"edit code\" button in the interface.\n\n<figure class=\"flex flex-col items-center text-center\">\n  <img src=\"/images/blog/qovery-and-gitpod/frontend-hotfix.png\" alt=\"hotfix\" width=\"600\" />\n</figure>\n\n2. By clicking on this \"edit code\" button on one of your applications, you will be redirected to Gitpod, which will already be connected to your Git account. Thus, without leaving your browser or any installation needed, you can quickly change on Gitpod with all the correct dependencies loaded and the same complete environment.","metadata":{"source":"https://www.gitpod.io/blog/qovery-and-gitpod","loc":{"lines":{"from":62,"to":72}}}}],["746",{"pageContent":"3. To describe your workspace you can configure it through a `.gitpod.yml` file, located at the root of your project, written in YAML syntax. You can read more about it in [Gitpod Documentation](https://www.gitpod.io/docs/configure/workspaces).\n\nHere is the example:\n\n```yaml\n# Commands to start on workspace startup\ntasks:\n  - name: Setup & Build\n    before: yarn global add express\n    init: yarn install\n    command: yarn build\n\n# Ports to expose on workspace startup\nports:\n  - port: 3000\n    onOpen: open-preview\n    name: Website\n    description: Website Preview","metadata":{"source":"https://www.gitpod.io/blog/qovery-and-gitpod","loc":{"lines":{"from":74,"to":91}}}}],["747",{"pageContent":"3. After committing and pushing from Gitpod on your necessary changes, Qovery will automatically re-deploy the new version without any downtime. You can even head to the deployment logs on the Qovery interface to see what happens in real-time such as the rebuild.","metadata":{"source":"https://www.gitpod.io/blog/qovery-and-gitpod","loc":{"lines":{"from":94,"to":94}}}}],["748",{"pageContent":"Try a New Feature Before Pushing it to Production\n\nNow let’s say that you or someone from your team wants to try out a new feature or a change before pushing it into production! Here are the steps to follow:\n\n1. You can use the [Preview Environment](https://www.qovery.com/preview-environments) feature from Qovery that you can turn on from your Environment Settings.\n\n2. For every single pull request that you create for your application, a new environment will be spun up with all the dependencies so you will be able to test that feature. When you close the pull request or merge back, the environment will disappear, so you won’t pay for resources that you are no longer consuming.\n\n3. Once the Preview Environment feature is activated, you can follow the same steps as for the first use case, where you click on the “edit button” that will redirect you to Gitpod, but this time, we are just going to create a new branch.","metadata":{"source":"https://www.gitpod.io/blog/qovery-and-gitpod","loc":{"lines":{"from":96,"to":104}}}}],["749",{"pageContent":"4. Once your new branch is created on the Gitpod browser interface, make the change wanted on your code, and then you can commit your branch.\n\n<figure class=\"flex flex-col items-center text-center\">\n  <img src=\"/images/blog/qovery-and-gitpod/new-feature.png\" alt=\"hotfix\" width=\"300\" />\n</figure>\n\n5. Going back to the Qovery interface, you can find the Git provider button that will redirect your repository, where you can create a merge request (also called a pull request, depending on your Git provider).\n\n6. After creating your merge request, you will see that a new environment has been created on Qovery, which is a full-stack environment with Frontend, Backend, API Gateway. So you can test it and change it in a production-like environment without impacting your production or any other environments.","metadata":{"source":"https://www.gitpod.io/blog/qovery-and-gitpod","loc":{"lines":{"from":106,"to":114}}}}],["750",{"pageContent":"Example Scenario - Sample application on Qovery x Gitpod\n\nIn this Demo, Nancy (Gitpod) and Romaric (Qovery), will show you how you can easily Develop, Deploy and Run applications on AWS with Gitpod and Qovery!\n\n`youtube: QPXeCmbl2d0`\n\nWhether you need to do a hotfix because you messed up something or want to try a new feature before pushing it to production, Gitpod and Qovery are here for you.\nThe power of Gitpod and Qovery combined makes managing the environment and development easy and straightforward. Don’t wait for one more second and improve your velocity and autonomy today!\n\nIf you have any questions about configuring and running your project, drop by [Gitpod’s community Discord](https://discord.com/invite/gitpod) server or [Qovery Discord Server](https://discord.gg/qovery). We would love to hear your feedback in the Community.","metadata":{"source":"https://www.gitpod.io/blog/qovery-and-gitpod","loc":{"lines":{"from":116,"to":125}}}}],["751",{"pageContent":"---\nauthor: svenefftinge\ndate: Thu Dec 07 2020 11:49:24 GMT+0000 (UTC)\nexcerpt: The team has been focussing on shipping some major new features, which mark important milestones on our goal to eliminate all friction.\nimage: teaser.jpg\nslug: root-docker-and-vscode\nsubtitle: New Release\nteaserImage: teaser.jpg\ntags: [\"Gitpod updates\"]\ntitle: Root, Docker and VS Code\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\nThe team has been focussing on shipping some major new features, which mark important milestones on our goal to **eliminate all friction around maintaining dev environments**.\n\n- [Root Access 💪](#root-access)\n- [Docker 🐳](#docker)\n- [VS Code and Other IDEs 🥂](#vs-code-and-other-ides)\n- [Connect to Self-managed GitLab ❤️](#connect-to-self-managed-gitlab)\n- [Next Steps ⏩](#next-steps)","metadata":{"source":"https://www.gitpod.io/blog/root-docker-and-vscode","loc":{"lines":{"from":1,"to":23}}}}],["752",{"pageContent":"Root Access 💪\n\nGitpod workspaces run as containers which make them incredibly fast and efficient. Compared to VMs, isolating workspace containers from each other is not easy. Due to this difficult isolation, Gitpod operated a fairly restricted set of privileges within its workspaces. This meant you couldn’t install additional tools using your favourite package manager (think `sudo apt-get install ...`) or run `docker` resp. `docker-compose`. Clearly, this has made some things more difficult than they should be.","metadata":{"source":"https://www.gitpod.io/blog/root-docker-and-vscode","loc":{"lines":{"from":25,"to":27}}}}],["753",{"pageContent":"After investigating different options such as [gVisor](https://github.com/google/gvisor) or [virtual machines](https://katacontainers.io/), we’ve settled on a solution that isolates through user namespaces. Chris, our Chief Architect and author of the isolation mechanics, has explained how it works in detail in [this webinar](https://youtu.be/l4I2TVAnBuw?t=176). Long story short, you can now run commands using `sudo`. So for instance, you can test-install additional packages using `apt-get`, before adding those commands to your workspace’s Dockerfile (where setup commands should still go eventually).\n\n`youtube: 5JUfzet1NNg`","metadata":{"source":"https://www.gitpod.io/blog/root-docker-and-vscode","loc":{"lines":{"from":29,"to":31}}}}],["754",{"pageContent":"Docker 🐳\n\nWith the new privileges you can now also run and build Docker images to start containers within your workspace. Gitpod’s default image ([workspace-full](https://github.com/gitpod-io/workspace-images/blob/d43c719bb2ff7b6849c0456fe21e3ca06c20168f/dazzle.yaml#L18)) comes equipped with Docker now, so all you need to do is run `sudo docker-up` and wait until the service is listening. Now start another terminal and use the Docker CLI as usual. Here is a short screencast showing how to start a simple hello world example.\n\n`youtube: tW9zBHH37Cc`\n\n> Warning: This is in feature preview for a reason, and there are a few things we still have to sort out. For instance, within Docker containers process ids are not properly mapped which might cause some weird errors. Please provide feedback in the [community](https://community.gitpod.io) or the [issue tracker](https://www.github.com/gitpod-io/gitpod/issues).","metadata":{"source":"https://www.gitpod.io/blog/root-docker-and-vscode","loc":{"lines":{"from":33,"to":39}}}}],["755",{"pageContent":"VS Code and Other IDEs 🥂\n\nAt Gitpod we want to help automate your dev environments, so that you are always ready-to-code. We believe you should not have to compromise in terms of what tools you use. Instead we make sure you get all your favourite tools readily configured and initialised for any project and task. Until today you had no choice but to use Theia, which is a great vendor-neutral IDE that leverages a lot of VS Code’s tech and provides a very similar UX. Still there are some differences in behaviour and compatibility so many users asked for supporting VS Code (and other IDEs as well).","metadata":{"source":"https://www.gitpod.io/blog/root-docker-and-vscode","loc":{"lines":{"from":41,"to":43}}}}],["756",{"pageContent":"Since today you can switch between VS Code and Theia in your settings. You can even bring your own web IDE though a Docker image. This enables Gitpod to run other IDEs such as all the Jetbrains IDEs (using [projector](https://github.com/JetBrains/projector-server/blob/master/docs/Projector.md)), Jupyter Notebook, or Jupyter Lab. This feature is however currently still in a private beta, so you need to contact us in order to get access to that.\n\n`youtube: 5hArIRPZuBI`\n\n> Warning: This is an early preview of the functionality and we haven't fully implemented all necessary features, yet. For instance, user settings are not persisted among sessions. Also while you can install extensions, they are also not persisted and extension settings from `.gitpod.yml` are currently ignored. We'll follow up with these capabilities ASAP.\n\n> Please provide feedback in the [community](https://community.gitpod.io) or the [issue tracker](https://www.github.com/gitpod-io/gitpod/issues)","metadata":{"source":"https://www.gitpod.io/blog/root-docker-and-vscode","loc":{"lines":{"from":45,"to":51}}}}],["757",{"pageContent":"> Please provide feedback in the [community](https://community.gitpod.io) or the [issue tracker](https://www.github.com/gitpod-io/gitpod/issues)\n\nWe are also shipping an SSH mode in Q1/21, that will let you connect to Gitpod using your favorite desktop IDE’s remote mode.","metadata":{"source":"https://www.gitpod.io/blog/root-docker-and-vscode","loc":{"lines":{"from":51,"to":53}}}}],["758",{"pageContent":"Connect to Self-managed GitLab ❤️\n\nYou can now [connect your Self-Hosted GitLab application with gitpod.io](/docs/configure/authentication/gitlab#oauth-application). This way you don't have to host and operate your own Gitpod installation, just to make it work with your GitLab installation. To make this connection, go to the settings and scroll down to the “Git Provider Integrations” section. Add your instance and follow the instructions.\n\nAfter completing this process, your entire team can open dev environments by prefixing the projects and merge requests URLs on the self-managed instance with `gitpod.io#` or simply use the Gitpod button provided by GitLab (make sure it is enabled).\n\n![Gitpod loves GitLab](../../../static/images/blog/root-docker-and-vscode/teaser-gitlab-gitpod.jpg)","metadata":{"source":"https://www.gitpod.io/blog/root-docker-and-vscode","loc":{"lines":{"from":55,"to":61}}}}],["759",{"pageContent":"Next Steps ⏩\n\nThere will be a Gitpod Self-Hosted release before Christmas that includes the features listed here as well as many additional enhancements and bugfixes for installing and running Gitpod on different infrastructures.\n\nIn the near future, we will complete the features in preview, work on some important updates around prebuilds, support SSH access to workspaces, and are kicking off a redesign of the dashboard. The future is bright 🌅.","metadata":{"source":"https://www.gitpod.io/blog/root-docker-and-vscode","loc":{"lines":{"from":63,"to":67}}}}],["760",{"pageContent":"---\nauthor: burningion\ndate: Wed, 8 Feb 2023 17:00:00 UTC\nexcerpt: Making the management and rotation of developer secrets an easy, reproducible process with the SecretOps platform Doppler\nimage: header.webp\nslug: securely-manage-development-secrets-with-doppler-and-gitpod\nteaserImage: header.webp\ntags: [\"Engineering\", \"Developer experience\"]\ntitle: Securely Manage and Rotate Development Secrets with Doppler and Gitpod\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n> When new users try [Cloud Development Environments](http://gitpod.io/cde), one of the very first questions they ask is: **“How do you manage access to secrets?”**\n\nDuring local development, the storage and management of secrets is generally an exercise left up to individual developers. Configuration sprawl can eventually occur on each developer’s laptop, and things like ssh keys, passphrases, AWS configurations, and specific lines in `~/.bash_rc` files become untracked dependencies for a project.","metadata":{"source":"https://www.gitpod.io/blog/securely-manage-development-secrets-with-doppler-and-gitpod","loc":{"lines":{"from":1,"to":18}}}}],["761",{"pageContent":"Once the management of secrets has to be a reproducible process for all team members (as in a CDE like Gitpod), the lack of attention secrets hygiene gets on teams can become especially apparent. By using Gitpod Variables and Doppler, teams can consistently enforce secrets management across entire organizations, and rotate keys without a single interaction from developers.","metadata":{"source":"https://www.gitpod.io/blog/securely-manage-development-secrets-with-doppler-and-gitpod","loc":{"lines":{"from":20,"to":20}}}}],["762",{"pageContent":"Secrets Sprawl and Enforced Consistency with Gitpod Variables\n\nAs it stands, developers have a myriad of options when to locally manage secrets and keys. Some prefer to inject environment variables in their `~/.bashrc` file, while some tools (like AWS' cli) require secrets within a home sub-directory. Some teams approach the problem of secrets within repositories with `.env` files, but these approaches inevitably have gaps, or are difficult to update across everyone's laptops.\n\nWorse still, when secrets management becomes cumbersome, developers can hardcode credentials into their code. This raises the possibility of secrets accidentally being committed to source repositories.","metadata":{"source":"https://www.gitpod.io/blog/securely-manage-development-secrets-with-doppler-and-gitpod","loc":{"lines":{"from":22,"to":26}}}}],["763",{"pageContent":"Out of the box, Gitpod offers the ability to set and inject [environment variables](https://www.gitpod.io/docs/configure/projects/environment-variables) into workspaces. These environment variables are encrypted when stored on Gitpod, and are injected in the shell environment as plaintext [environment variables](https://opensource.com/article/19/8/what-are-environment-variables) when running in a Workspace.\n\n(Remember, you can always run `env` in a workspace bash terminal to see all the environment variables that are set.)\n\nEnvironment variables can be set within Gitpod either by the `gp env` [command](https://www.gitpod.io/docs/configure/projects/environment-variables#ways-of-setting-user-specific-environment-variables), or by setting them in the Variables section of your user account. There they can either be scoped to a single Git repository, or set globally, for things like configuring your shell environment preferences.","metadata":{"source":"https://www.gitpod.io/blog/securely-manage-development-secrets-with-doppler-and-gitpod","loc":{"lines":{"from":28,"to":32}}}}],["764",{"pageContent":"With settable environment variables, users can ensure API keys, passphrases, and certificates are all available within their developer environments, ready for immediate coding.","metadata":{"source":"https://www.gitpod.io/blog/securely-manage-development-secrets-with-doppler-and-gitpod","loc":{"lines":{"from":34,"to":34}}}}],["765",{"pageContent":"Doppler and Secrets Management\n\nBut for larger teams, maintaining secrets can become a serious challenge. Distributing access to development keys is hypothetically easy enough, but what about rotating them? And how do you maintain consistency around which secrets are required for which project?\n\n[Doppler](https://www.doppler.com/) is a SecretOps platform that allows you to share and sync developer secrets across all environments. Rather than manually setting environment variables via `.env` files, Doppler allows you to run an executable that injects the latest version of secrets into your binary or configuration files before execution.\n\nLet’s take a concrete example:\n\nWhen developing an OAuth 2.0 application, developers need to maintain an OAuth Client ID and Secret. Ideally, they’ll also have a static URL for callbacks from the OAuth provider.\n\nIn our case we’ll use [ngrok](https://ngrok.com/) during development to have a static route to our development environment.","metadata":{"source":"https://www.gitpod.io/blog/securely-manage-development-secrets-with-doppler-and-gitpod","loc":{"lines":{"from":36,"to":46}}}}],["766",{"pageContent":"In our case we’ll use [ngrok](https://ngrok.com/) during development to have a static route to our development environment.\n\n<figure class=\"flex flex-col items-center text-center\">\n  <img src=\"/images/blog/securely-manage-development-secrets-with-doppler-and-gitpod/dev-stage-prod.webp\" alt=\"Doppler dev, stage, and prod\"  />\n</figure>\n\nDoppler allows you to set up specific instances of your secrets, and have them be injected into your environments, depending on the environment which you’re running in.\n\nThis is done with a `doppler run`, right before launching your process. It reads your environment configuration (set either via `doppler.yaml` or passed via command line arguments), and injects the associated environment variables before running the process.\n\nWith this, we’re able to do things like share cloud keys, database credentials, certificates, and URLs directly to our executables at execution time.","metadata":{"source":"https://www.gitpod.io/blog/securely-manage-development-secrets-with-doppler-and-gitpod","loc":{"lines":{"from":46,"to":56}}}}],["767",{"pageContent":"With this, we’re able to do things like share cloud keys, database credentials, certificates, and URLs directly to our executables at execution time.\n\nAs a side effect, using Doppler with Gitpod for development helps ensure we maintain good secret hygiene, by encouraging us to keep secrets consistently stored across all the places we run our software, from development to production. This also ensures our development team always has access to the latest version of secrets, and never has to think about the logistics of rotating keys.","metadata":{"source":"https://www.gitpod.io/blog/securely-manage-development-secrets-with-doppler-and-gitpod","loc":{"lines":{"from":56,"to":58}}}}],["768",{"pageContent":"Injecting Secrets into Configuration Files\n\nBut some secrets don’t fit well within the environment variable paradigm. These secrets may live deep within yaml files, or custom configuration files in subdirectories not related to our repository. For example, logging and database settings may change from staging to production. For these, Doppler has the `--mount` command. This behaves as a standard Go template, allowing you to inject your configuration values into a named pipe. (Basically a pipe that behaves as a file but doesn’t get written to disk.)\n\nFor reference, here’s how I’ve set up my ngrok account (with a configuration file which must live within my home directory) with Doppler to have a static URL for testing my OAuth 2.0 flow:\n\n```yaml\n# in ngrok.yml\nauthtoken: { { .NGROK_AUTH_TOKEN } }\nregion: us\nversion: 2\ntunnels:\n  fastapi-openid-connect:\n    proto: http\n    hostname: { { .NGROK_DOMAIN } }\n    addr: 127.0.0.1:8000","metadata":{"source":"https://www.gitpod.io/blog/securely-manage-development-secrets-with-doppler-and-gitpod","loc":{"lines":{"from":60,"to":75}}}}],["769",{"pageContent":"In my Doppler development environment, I’ve set the matching variables `NGROK_AUTH_TOKEN` and `NGROK_DOMAIN`. To inject these into my Gitpod workspace and run ngrok, I have the following line in my `.gitpod.yml`:\n\n```bash\ndoppler setup --no-interactive && doppler run --mount /home/gitpod/.config/ngrok/ngrok.yml --mount-template ngrok.yaml -- ngrok start fastapi-openid-connect\n```\n\nWith this, I’m able to configure my template, and have my secrets get set across both staging and development with the proper values.\n\nNote here that we’re using named pipes, and not actually writing our template secrets to disk. Doppler offers this as a feature with the `--mount` and `--mount-template` options in the doppler run command.","metadata":{"source":"https://www.gitpod.io/blog/securely-manage-development-secrets-with-doppler-and-gitpod","loc":{"lines":{"from":78,"to":86}}}}],["770",{"pageContent":"Automating Doppler Secrets Injection on Gitpod\n\nGiven Gitpod’s ephemeral nature, we ideally want our entire development environment to spin up without any interaction from our part.\n\nTo accomplish this, we first need to create a `DOPPLER_TOKEN` token environment variable, set to our Doppler token. Again, we can accomplish this via Variables.\n\n<figure class=\"flex flex-col items-center text-center\">\n  <img src=\"/images/blog/securely-manage-development-secrets-with-doppler-and-gitpod/doppler-secret.webp\" alt=\"hotfix\" width=\"600\" />\n</figure>\n\nIn my case, I’ve scoped my Doppler token to only be injected in my specific repository. This prevents me from opening another Gitpod instance, and injecting my secret where it may not be needed.\n\nOnce this is done, I can then set a project and environment with a `doppler.yaml` file within my repository. I’ve done the bare minimum in my repository for a compliant Doppler configuration:\n\n```yaml\nsetup:\n  project: fastapi-openid-connect-playground\n  config: dev","metadata":{"source":"https://www.gitpod.io/blog/securely-manage-development-secrets-with-doppler-and-gitpod","loc":{"lines":{"from":88,"to":105}}}}],["771",{"pageContent":"With this, I can then inject environment variables into a command named `MY_COMMAND` by:\n\n```bash\ndoppler setup --no-interactive && doppler run MY_COMMAND\n```\n\nAlternatively, continuing the example above I can inject my OAuth Client secret, along with my JWKS secret into multiple configuration files with a:\n\n```bash\ndoppler setup --no-interactive && doppler run --mount ../client_secret.json --mount-template oauth2_client_secret.json  -- doppler run --mount-template jwks_secret --mount ../jwks_secret -- doppler run -- uvicorn main:app --reload","metadata":{"source":"https://www.gitpod.io/blog/securely-manage-development-secrets-with-doppler-and-gitpod","loc":{"lines":{"from":108,"to":117}}}}],["772",{"pageContent":"Again, note the `--` used to separate our commands between the template mounting and actual execution of our binary. As each of these is written as a separate task within our `.gitpod.yaml`, we’ll need to again do the `doppler setup –no-interactive` to set our configuration in the user’s home directory, just in case our task gets executed first.\n\nBecause our secret gets injected at run time, **if we need to rotate our secrets, it's as simple as setting the new value in the Doppler UI.**\n\n**In the next post, we’ll cover using Doppler to generate dynamic cloud credentials for ephemeral developer environments.** This adds another layer of protection to your secrets, by making them short lived and created on demand to a scoped set of permissions.\n\nSign up for our newsletter below to get notified when we publish it.","metadata":{"source":"https://www.gitpod.io/blog/securely-manage-development-secrets-with-doppler-and-gitpod","loc":{"lines":{"from":120,"to":126}}}}],["773",{"pageContent":"---\nauthor: burningion\ndate: Tuesday, 15 May 2023 11:00:00 UTC\nexcerpt: Cloud Development Environments offer an unprecedented opportunity to enhance the security of the software development lifecycle. They offer a single place to control access to secrets, to rotate leaked credentials, sign and verify commits, and offer the potential to scan and track every piece of software before it makes its way on to your production systems.\nslug: securing-cncf-software-supply-chains-with-cd-es\ntags: [\"Engineering\"]\nimage: cncf.webp\nteaserImage: cncf.webp\ntitle: Securing CNCF Software Supply Chains with CDEs\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>","metadata":{"source":"https://www.gitpod.io/blog/securing-cncf-software-supply-chains-with-cd-es","loc":{"lines":{"from":1,"to":14}}}}],["774",{"pageContent":"<script context=\"module\">\n  export const prerender = true;\n</script>\n\n[Cloud Development Environments](https://www.gitpod.io/cde) offer an unprecedented opportunity to enhance the security of the software development lifecycle. They offer a single place to control access to secrets, to rotate leaked credentials, sign and verify commits, and offer the potential to scan and track every piece of software before it makes its way on to your production systems. Because of this, Cloud Development Environments are a promising tool for the next generation of software security systems, and have already been adopted by some of the largest tech companies.","metadata":{"source":"https://www.gitpod.io/blog/securing-cncf-software-supply-chains-with-cd-es","loc":{"lines":{"from":14,"to":18}}}}],["775",{"pageContent":"Orchestrating A Better Secrets Lifecycle\n\nAt scale, managing access to secrets and development configuration details becomes a non-trivial challenge. When and how do you give access, and when and how do you rotate keys? Once an employee leaves a company, how do you ensure all credentials have been revoked?\n\nCDEs give you a single place to share your configuration and secret data across your team, while also making secret rotation a single configuration change.\n\nBut Gitpod is not the only vendor rethinking the lifecycle of secrets. [Doppler](https://www.doppler.com/) is a secrets management platform that allows you to extend improvement of the secrets lifecycle beyond development and into staging and production. Their platform allows for the configuration of dynamic secrets, for things like disposable, limited access to cloud environments.","metadata":{"source":"https://www.gitpod.io/blog/securing-cncf-software-supply-chains-with-cd-es","loc":{"lines":{"from":20,"to":26}}}}],["776",{"pageContent":"Using [Doppler within Gitpod](https://www.gitpod.io/blog/securely-manage-development-secrets-with-doppler-and-gitpod) is straightfoward. You add your Doppler API key, a doppler.yaml specifying your project, and then before running your executable, run:\n\n```bash\ndoppler setup --no-interactive && doppler run MY_COMMAND","metadata":{"source":"https://www.gitpod.io/blog/securing-cncf-software-supply-chains-with-cd-es","loc":{"lines":{"from":28,"to":31}}}}],["777",{"pageContent":"This injects the project's environment variables into the shell's context, allowing you to connect to the development resources you need, without them persisting in your shell session.","metadata":{"source":"https://www.gitpod.io/blog/securing-cncf-software-supply-chains-with-cd-es","loc":{"lines":{"from":34,"to":34}}}}],["778",{"pageContent":"Securing Containerized Workloads with Wolfi and Chainguard\n\nHow do you minimize the surface area for vulnerabilities introduced into your application?\n\nChainguard has created a [set of locked down containers](https://www.chainguard.dev/unchained/introducing-wolfi-the-first-linux-un-distro) to help secure your containerized workloads. We use Wolfi at Gitpod to ensure the containers running Gitpod itself have the minimal dependency vulnerability surface area possible.\n\nWolfi works by creating a limited, minimal container for running your application’s executables. This “distroless” application minimizes the chances of third party libraries bringing vulnerabilities into your application, and helps ship a lighter container image size to production systems. Additionally, it brings a SBOM (software bill of materials) to your containerized applications.","metadata":{"source":"https://www.gitpod.io/blog/securing-cncf-software-supply-chains-with-cd-es","loc":{"lines":{"from":36,"to":42}}}}],["779",{"pageContent":"Chainguard has a great [example Dockerfile](https://edu.chainguard.dev/open-source/wolfi/wolfi-with-dockerfiles/) showcasing how to build your application container for a Python application:\n\n```Dockerfile\nFROM cgr.dev/chainguard/wolfi-base as builder\n\nARG version=3.11\nRUN adduser -D nonroot\nWORKDIR /app\n\nRUN apk add python-$version py${version}-pip && \\\n\tchown -R nonroot.nonroot /app/\n\nUSER nonroot\nCOPY requirements.txt /app/\nRUN  pip3 install -r requirements.txt --user\n\nFROM cgr.dev/chainguard/python:3.11\n\nARG version=3.11\nWORKDIR /app\n\nCOPY --from=builder /home/nonroot/.local/lib/python${version}/site-packages /home/nonroot/.local/lib/python${version}/site-packages\n\nCOPY inky.py inky.png /app/\n\nENTRYPOINT [ \"python\", \"/app/inky.py\" ]","metadata":{"source":"https://www.gitpod.io/blog/securing-cncf-software-supply-chains-with-cd-es","loc":{"lines":{"from":44,"to":69}}}}],["780",{"pageContent":"With this, we have only our Python dependencies required to run our production application.","metadata":{"source":"https://www.gitpod.io/blog/securing-cncf-software-supply-chains-with-cd-es","loc":{"lines":{"from":72,"to":72}}}}],["781",{"pageContent":"Secure, Verified Commits Everywhere\n\nGitpod allows for commit signing, either via [1Password](https://www.gitpod.io/blog/signing-git-commits-on-gitpod-with-1-password), Yubikey, or soon, via OpenID Connect with Fulcio. Signing git commits allows for a verification that authorized developers have cryptographically signed the code, ensuring changes have come from them.\n\nThis is useful to build an audit trail of your software, ensuring the commits and code changes have a verified author, and that history is preserved as you build your application.\n\nAdditionally, signed commits can be used as a part of a secure software update system like [TUF](https://theupdateframework.io/security/) or in-toto, allowing for stronger guarantees about your binaries’ provenance deployed to end users.\n\nEnabling [verified commits with 1Password and SSH forwarding](https://www.gitpod.io/blog/signing-git-commits-on-gitpod-with-1-password) is just a few lines in your `.gitpod.yml` once enabled:","metadata":{"source":"https://www.gitpod.io/blog/securing-cncf-software-supply-chains-with-cd-es","loc":{"lines":{"from":74,"to":82}}}}],["782",{"pageContent":"Enabling [verified commits with 1Password and SSH forwarding](https://www.gitpod.io/blog/signing-git-commits-on-gitpod-with-1-password) is just a few lines in your `.gitpod.yml` once enabled:\n\n```yaml\ntasks:\n  - name: Local terminal\n\tinit: git config --global gpg.format ssh && git config --global user.signingkey \"$SSH_SIGNING_KEY\" && git config commit.gpgsign true --global\n\tcommand: bash","metadata":{"source":"https://www.gitpod.io/blog/securing-cncf-software-supply-chains-with-cd-es","loc":{"lines":{"from":82,"to":88}}}}],["783",{"pageContent":"With this, you'll be prompted for biometric confirmation for all Git commits made in Visual Studio Code Desktop with Gitpod.","metadata":{"source":"https://www.gitpod.io/blog/securing-cncf-software-supply-chains-with-cd-es","loc":{"lines":{"from":91,"to":91}}}}],["784",{"pageContent":"Verified Builds, Better Collaboration\n\nVerified commits and ephemeral, disposable cloud environments also allow for “safe” testing of unsafe code. Rather than downloading contributor code onto your machine, you’re relying on the disposability of the CDE to protect your machine from malicious code.\n\nAgain, this reduces the surface area of vulnerabilities in your organization. Especially when interacting with external developers as in open source projects, running untrusted code locally can be a security risk with unforeseen consequences. There have been multiple examples of [malicious libraries](https://www.reversinglabs.com/blog/beware-impostor-http-libraries-lurk-on-pypi) attempting to extract information from the host laptop, and CDEs allow for the minimization of the consequences of these.","metadata":{"source":"https://www.gitpod.io/blog/securing-cncf-software-supply-chains-with-cd-es","loc":{"lines":{"from":93,"to":97}}}}],["785",{"pageContent":"Additionally, tools like [SLSA](https://slsa.dev/spec/v0.1/levels) help ensure organizations can prove the integrity of their build process. Gitpod has built tooling for [SLSA level 1 compliance](https://www.gitpod.io/blog/securing-the-software-supply-chain-at-gitpod-with-slsa), and plans on meeting level 2.","metadata":{"source":"https://www.gitpod.io/blog/securing-cncf-software-supply-chains-with-cd-es","loc":{"lines":{"from":99,"to":99}}}}],["786",{"pageContent":"CNCF Projects Using Gitpod\n\nCNCF projects are built on the power of the community. Making contributions and onboarding as frictionless as possible helps ensure the community can contribute, evaluate, and onboard new contributors with minimal effort.\n\nBecause of this, [many CNCF projects](https://contribute.dev/) have already harnessed the power of CDEs by using Gitpod. [Prometheus](https://github.com/prometheus/prometheus) uses Gitpod to have a working development environment for new contributors in seconds. This helps new users try out Prometheus in a lower risk environment, allows for new contributors to have a working development environment, and allows for a more secure environment for testing contributions.","metadata":{"source":"https://www.gitpod.io/blog/securing-cncf-software-supply-chains-with-cd-es","loc":{"lines":{"from":101,"to":105}}}}],["787",{"pageContent":"> “Gitpod has been invaluable for increasing my productivity in the Prometheus pull request review process. Instead of having to check out and build the (untrusted!) submitted code locally, I can simply jump into a pre-built Gitpod workspace based on the PR branch and start testing, debugging, and modifying the proposed code changes immediately in a secure, cloud-based development environment. This saves me time and frustration and really streamlines the review process, so I can focus on the things that matter.” - Julius Volz\n\nSimilarly, [Thanos](https://thanos.io/) [builds upon the Gitpod support](https://github.com/thanos-io/thanos/blob/main/.gitpod.yml) for Prometheus. Its `.gitpod.yml` file actually downloads and runs Prometheus, and then runs Thanos on top of it. This stacking allows for better collaboration, and CDEs can be used to “glue” together multiple projects in a realistic, development environment.","metadata":{"source":"https://www.gitpod.io/blog/securing-cncf-software-supply-chains-with-cd-es","loc":{"lines":{"from":107,"to":109}}}}],["788",{"pageContent":"Get Started With More Secure Development Environments Now\n\nThere are many examples of [Gitpod usage in Open Source projects](https://contribute.dev/). I encourage you to browse for your chosen stack, or language to see what may be useful for yours. You can add configuration as needed, and ensure that onboarding is as frictionless as possible for your project.\n\nAdditionally, Gitpod will be throwing an in person conference called [CDE Universe](https://cdeuniverse.com/) in San Francisco, focusing exclusively on Cloud Development Environments. We’ll have speakers from Slack, Shopify, Uber, and more, speaking about how they built their own Cloud Development Environments to unlock better efficiency for their developers.","metadata":{"source":"https://www.gitpod.io/blog/securing-cncf-software-supply-chains-with-cd-es","loc":{"lines":{"from":111,"to":115}}}}],["789",{"pageContent":"---\nauthor: csweichel, securitymirco, nancy-chauhan\ndate: Tuesday, 21 Jun 2022 11:00:00 UTC\nexcerpt: Gitpod takes a central position in the software development lifecycle. As such, the security of our product is paramount; not only at runtime, but also as we build and deliver Gitpod.\nimage: teaser.png\nslug: securing-the-software-supply-chain-at-gitpod-with-slsa\nteaserImage: teaser.png\ntags: [\"Gitpod updates\"]\ntitle: Securing Gitpod's Software Supply Chain with SLSA\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>","metadata":{"source":"https://www.gitpod.io/blog/securing-the-software-supply-chain-at-gitpod-with-slsa","loc":{"lines":{"from":1,"to":14}}}}],["790",{"pageContent":"<script context=\"module\">\n  export const prerender = true;\n</script>\n\nGitpod takes a central position in the software development lifecycle. As such, the security of our product is paramount; not only at runtime, but also as we build and deliver Gitpod. Next to a host of other initiatives (e.g. becoming SOC 2 compliant), we aim to secure our own software supply chain. Today, we are proud to announce that we’ve taken a first step in that direction: Gitpod is now [SLSA Level 1](https://slsa.dev/spec/v0.1/levels) compliant. 🎉\n\nSLSA is an end-to-end framework for ensuring the integrity of software artifacts throughout the software supply chain. It aims for the software to be shipped securely from source to production, and is inspired by Google's internal \"[Binary Authorization for Borg](https://cloud.google.com/security/binary-authorization-for-borg)\". But what is a software supply chain anyways?","metadata":{"source":"https://www.gitpod.io/blog/securing-the-software-supply-chain-at-gitpod-with-slsa","loc":{"lines":{"from":14,"to":20}}}}],["791",{"pageContent":"What is a Software Supply Chain?\n\nIn manufacturing, many different components make up an assembly, and many assemblies make up a finished product. Think of a car that consists of multiple parts such as doors, wheels and seats built from raw materials like steel, plastics, aluminium and rubber. Many of these parts and raw materials come from different vendors and suppliers, forming the supply chain.","metadata":{"source":"https://www.gitpod.io/blog/securing-the-software-supply-chain-at-gitpod-with-slsa","loc":{"lines":{"from":22,"to":24}}}}],["792",{"pageContent":"Software engineering is similar. While developing an application, we rely on open source code and external services. We build, test and deploy applications using CI/CD pipelines which have far reaching access to development and production systems. Deep dependency trees without controls (think [log4shell](https://www.ncsc.gov.uk/information/log4j-vulnerability-what-everyone-needs-to-know)), insecure CI/CD pipelines and developer’s laptops make for attractive attack vectors. Such attacks have been carried out successfully, with [SolarWinds](https://www.cisecurity.org/solarwinds) and [Kaseya](https://helpdesk.kaseya.com/hc/en-gb/articles/4403584098961-Incident-Overview-Technical-Details) it's not only the Fortune 500 who are at risk, but their suppliers, too. No one wants to become a vehicle for malicious actors and irrevocably destroy the trust that cost so much to build. We must not underestimate the importance of Software Supply Chain Security.","metadata":{"source":"https://www.gitpod.io/blog/securing-the-software-supply-chain-at-gitpod-with-slsa","loc":{"lines":{"from":26,"to":26}}}}],["793",{"pageContent":"Containers, heavily caching build systems, ever deeper dependency trees (I’m looking at you, Javascript), require us to up the ante towards supply chain security. Containers famously don’t offer a security boundary, and this year has seen ample proof of that. Hence, even a minor dependency can put a large part of the infrastructure at risk, without operators even being aware. The [log4shell](https://www.ncsc.gov.uk/information/log4j-vulnerability-what-everyone-needs-to-know) fallout partially was so bad because it took a long time to even find out who was affected.\n\nAs the threat landscape evolves, organizations are looking into mitigation strategies that verify the integrity and security of software artifacts and build systems.","metadata":{"source":"https://www.gitpod.io/blog/securing-the-software-supply-chain-at-gitpod-with-slsa","loc":{"lines":{"from":28,"to":30}}}}],["794",{"pageContent":"Building a More Resilient Ecosystem for Supply Chain Security\n\nMany developers and communities are taking initiatives to help mitigate risk and prevent software supply chain attacks ✨\n\nThe Go team, mainly coming from Google, are acutely aware of supply chain issues, and provide a variety of built-in [supply chain attack mitigations](https://go.dev/blog/supply-chain).\nA significant aspect of preventing software supply chain risks is to keep dependency trees as small as possible. \"A little bit of copying is better than a little dependency\". Go contains various functionalities out-of-the-box by copying relevant dependencies code, enabling Go modules with zero dependencies. Our Go code relies on 44% fewer dependencies compared to our TypeScript codebase - at about the same amount of code.\n\nGo offers other features which improve our confidence in the integrity of those components:","metadata":{"source":"https://www.gitpod.io/blog/securing-the-software-supply-chain-at-gitpod-with-slsa","loc":{"lines":{"from":32,"to":39}}}}],["795",{"pageContent":"Go offers other features which improve our confidence in the integrity of those components:\n\n- Go locks builds by pinning specific versions specified inside the `go.mod` file. Malicious updates introduced as a new version won't affect `go build` automatically\n- Even if malicious updates get introduced in the same version as a re-upload, this wouldn't automatically affect Go builds containing hashes of all dependencies that contribute to a build specified in the `go.sum` file. An incomplete or incorrect file will cause an error - version content will always remain the same\n- Go modules are directly consumed through the version control system without an additional package repository that could get compromised.\n\nIf you want to read more about how Go mitigates supply chain attacks, you can read it [here](https://go.dev/blog/supply-chain).","metadata":{"source":"https://www.gitpod.io/blog/securing-the-software-supply-chain-at-gitpod-with-slsa","loc":{"lines":{"from":39,"to":45}}}}],["796",{"pageContent":"If you want to read more about how Go mitigates supply chain attacks, you can read it [here](https://go.dev/blog/supply-chain).\n\nBeyond individual languages, there are broader efforts underway in the cloud-native community. The [sigstore project](https://www.sigstore.dev/) is building a comprehensive tool chain to sign and verify software artifacts. [Cosign](https://github.com/sigstore/cosign) can sign and verify containers from an OCI registry. [Fulcio](https://github.com/sigstore/fulcio) nicely solves the hard key-management problems by issuing short-lived keys tied to an [OpenID connect token](https://openid.net/connect/). In combination with [Rekor](https://github.com/sigstore/rekor), all these operations are logged in a tamper proof transparency log for auditability.","metadata":{"source":"https://www.gitpod.io/blog/securing-the-software-supply-chain-at-gitpod-with-slsa","loc":{"lines":{"from":45,"to":47}}}}],["797",{"pageContent":"Recently, with the release of [Version 1.24 \"Stargazer\"](https://kubernetes.io/blog/2022/05/03/kubernetes-1-24-release-announcement/), Kubernetes adapted [Sigstore](https://blog.sigstore.dev/kubernetes-signals-massive-adoption-of-sigstore-for-protecting-open-source-ecosystem-73a6757da73) to generate signed provenance enabling the community to verify signatures of software artifacts and review how they have been built.","metadata":{"source":"https://www.gitpod.io/blog/securing-the-software-supply-chain-at-gitpod-with-slsa","loc":{"lines":{"from":49,"to":49}}}}],["798",{"pageContent":"SLSA is hot 🔥\n\nSupply chain Levels for [Software Artifacts, SLSA](https://slsa.dev/) in short, is a security framework which introduces common terminology, standards and process controls to improve supply chain security. SLSA consists of four different levels of assurance that provide a predefined roadmap to artifact security and allow linear progression between levels. Following this multi-level approach, it’s particularly easy to get started with. Also, SLSA brings value even if the transitive dependencies of a project have not yet adopted it. This combination predestines SLSA for a lang-and-expand motion in modern software ecologies.","metadata":{"source":"https://www.gitpod.io/blog/securing-the-software-supply-chain-at-gitpod-with-slsa","loc":{"lines":{"from":51,"to":53}}}}],["799",{"pageContent":"SLSA level 1 focuses on providing transparency and documentation of the build process. The key concept here is [provenance](https://en.wikipedia.org/wiki/Provenance), i.e. a record of prior ownership and involvement. Starting with this level, build systems are required to keep a record of their involvement, which sources went into the build process, and which process was used. All this data is recorded using [in-toto attestations](https://github.com/in-toto/attestation) and published alongside the actual build artifacts.","metadata":{"source":"https://www.gitpod.io/blog/securing-the-software-supply-chain-at-gitpod-with-slsa","loc":{"lines":{"from":55,"to":55}}}}],["800",{"pageContent":"Having this provenance offers a number of benefits. For one, it provides traceability for artifacts deployed in production, which greatly helps when debugging issues. It prevents the simplest of supply chain attacks (think cache poisoning) if the provenance requires different permissions to upload. Delivery pipelines can assert qualities about the artifacts they’re about to deploy, e.g. that the code was built from a clean working copy, hence the entire state is recorded in a version control system.\n\nTo read more about the remaining three levels, head over to the [SLSA page](https://slsa.dev/spec/v0.1/levels).","metadata":{"source":"https://www.gitpod.io/blog/securing-the-software-supply-chain-at-gitpod-with-slsa","loc":{"lines":{"from":57,"to":59}}}}],["801",{"pageContent":"Making Gitpod SLSA level 1 compliant\n\n![Generating Provenance](../../../static/images/blog/securing-the-software-supply-chain-at-gitpod-with-slsa/illustration.png)\n\nWe use a heavily caching build system called [Leeway](https://github.com/gitpod-io/leeway). Leeway recently gained [support for producing SLSA/in-toto provenance](https://github.com/gitpod-io/leeway/pull/75) during its build, and maintains that provenance as part of its cache. A package build produces an [attestation bundle](https://github.com/in-toto/attestation/blob/main/spec/bundle.md), which contains a number of SLSA attestations (records) that were created during the build; one per package.\n\nFor example, building one of Gitpod’s component yields entries for each of its dependencies within our source tree:","metadata":{"source":"https://www.gitpod.io/blog/securing-the-software-supply-chain-at-gitpod-with-slsa","loc":{"lines":{"from":61,"to":67}}}}],["802",{"pageContent":"```bash\ngitpod /workspace/gitpod (main) $ leeway build --save out.tar.gz components/ws-manager:app\n☁️  checking remote cache for past build artifacts\n📦  cached  components/common-go:lib               (version 29fc1af63929607ec2f48e5e34095d4f236fcad7)\n📦  cached  components/content-service-api/go:lib  (version c349f5dbbaf9f911c3097b38cb715ba10af7c8f4)\n📦  cached  components/content-service:lib         (version ec596e8eed59d221f14c1170fddfd21c558c7efb)\n📦  cached  components/image-builder-api/go:lib    (version 45286faf29d40a249430d35d6b04119b48a88570)\n📦  cached  components/ws-daemon-api/go:lib        (version 2a8a3fb20bb4149baae445f33cc38e0d01d05ff5)\n📦  cached  components/ws-manager-api/go:lib       (version 37ca7e9e7117e744722413934ff24684619db42c)\n🔧  build   components/registry-facade-api/go:lib  (version ddddf609debf50fc38c2a107deffb83b15749ae9)\n🔧  build   components/ws-manager:app              (version 91a5fae2f2b869ecbd7f278a17122f283ff9fc83)\nbuild succeded","metadata":{"source":"https://www.gitpod.io/blog/securing-the-software-supply-chain-at-gitpod-with-slsa","loc":{"lines":{"from":69,"to":80}}}}],["803",{"pageContent":"🔧  build   components/ws-manager:app              (version 91a5fae2f2b869ecbd7f278a17122f283ff9fc83)\nbuild succeded\n💾  saving build result to out.tar.gz","metadata":{"source":"https://www.gitpod.io/blog/securing-the-software-supply-chain-at-gitpod-with-slsa","loc":{"lines":{"from":80,"to":82}}}}],["804",{"pageContent":"gitpod /workspace/gitpod (main) $ tar Oxf out.tar.gz ./provenance-bundle.jsonl","metadata":{"source":"https://www.gitpod.io/blog/securing-the-software-supply-chain-at-gitpod-with-slsa","loc":{"lines":{"from":84,"to":84}}}}],["805",{"pageContent":"{\"payloadType\":\"application/vnd.in-toto+json\",\"payload\":\"ewogICJfdHlwZSI6ICJodHRwczovL2luLXRvdG8uaW8vU3RhdGVtZW50L3YwLjEiLAogICJwcmVkaWNhdGVUeXBlIjogImh0dHBzOi8vc2xzYS5kZXYvcHJvdmVuYW5jZS92MC4xIiwKICAic3ViamVjdCI6IFsKICAgIHsKICAgICAgIm5hbWUiOiAiL190ZXN0cy91dGlsLnRlc3QiLAogICAgICAiZGlnZXN0IjogewogICAgICAgICJzaGEyNTYiOiAiZjU0ZmFjY2VlMTJhZDMzMmMwNWRiMDdjZmYzYjRkNTFjZmVmZTEwOTJlYTVlYTdlYmU3MTAxMzYzZjFiZDRlYiIKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgIm5hbWUiOiAiL190ZXN0cy9jZ3JvdXBzLnRlc3QiLAogICAgICAiZGlnZXN0IjogewogICAgICAgICJzaGEyNTYiOiAiODAzNDg5NWI5NWNjM2M2M2NjZjAwNjc3MWYwZGRhYjg4OTc3M2JjNzExMGMxYTQyN2VmZTg0OGZhOGIwYjM4ZCIKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgIm5hbWUiOiAiL190ZXN0cy9uYW1lZ2VuLnRlc3QiLAogICAgICAiZGlnZXN0IjogewogICAgICAgICJzaGEyNTYiOiAiN2I0Yzc3MjgxZmYyZjk2ZjkxZTk5YjAxZWZhY2JmMjZlMzJjMjMyMWJhZGUwN2FmMmI1MTg5OGM4MTVmMTVmMiIKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgIm5hbWUiOiAiL190ZXN0cy9iYXNlc2VydmVyLnRlc3QiLAogICAgICAiZGlnZXN0IjogewogICAgICAgICJzaGEyNTYiOiAiZjhmOWU1MTNjMjMzMDk3YWQ1OGM","metadata":{"source":"https://www.gitpod.io/blog/securing-the-software-supply-chain-at-gitpod-with-slsa","loc":{"lines":{"from":85,"to":85}}}}],["806",{"pageContent":"jMjMyMWJhZGUwN2FmMmI1MTg5OGM4MTVmMTVmMiIKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgIm5hbWUiOiAiL190ZXN0cy9iYXNlc2VydmVyLnRlc3QiLAogICAgICAiZGlnZXN0IjogewogICAgICAgICJzaGEyNTYiOiAiZjhmOWU1MTNjMjMzMDk3YWQ1OGM4ZDFmYzYwODczMjg4NGMyNjExNWQ1MGM2YTUyMTE1N2MwOTFmNTBjN2VmMiIKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgIm5hbWUiOiAiL190ZXN0cy9sb2cudGVzdCIsCiAgICAgICJkaWdlc3QiOiB7CiAgICAgICAgInNoYTI1NiI6ICIyZTY5MmFiZDViYTEwOTFlYWMyZmMwNzY3M2JjM2E5N2I0OTBkYjA5NGMzYjYwYzNiMWE4OTZkNmM3NWFmOTRhIgogICAgICB9CiAgICB9LAogICAgewogICAgICAibmFtZSI6ICIvX3Rlc3RzL2dycGMudGVzdCIsCiAgICAgICJkaWdlc3QiOiB7CiAgICAgICAgInNoYTI1NiI6ICJiZDYxYjM3ZmI1YmFmMmI5N2E5MDQ2M2U3NmI5ODc4NmQ1ZTgwYWY4ZjdkNTU2ZDhjMGMwZmRjMDNkNmJkZjc2IgogICAgICB9CiAgICB9CiAgXSwKICAicHJlZGljYXRlIjogewogICAgImJ1aWxkZXIiOiB7CiAgICAgICJpZCI6ICJnaXRodWIuY29tL2dpdHBvZC1pby9sZWV3YXk6MC4yLjE3LTNlYmZiMmFAc2hhMjU2OmI5NjI5ZTJkMDQzMmFkZWExYmU3ZGRkYjM2MDNlMzZkOWY2OWIwOWQ4OTg1ZjcyNTI1N2FkYWFkZTUxZDRhNDAiCiAgICB9LAogICAgInJlY2lwZSI6IHsKICAgICAgInR5cGUiOiAiaHR0cHM6Ly9naXRodWIuY29","metadata":{"source":"https://www.gitpod.io/blog/securing-the-software-supply-chain-at-gitpod-with-slsa","loc":{"lines":{"from":85,"to":85}}}}],["807",{"pageContent":"sZWV3YXk6MC4yLjE3LTNlYmZiMmFAc2hhMjU2OmI5NjI5ZTJkMDQzMmFkZWExYmU3ZGRkYjM2MDNlMzZkOWY2OWIwOWQ4OTg1ZjcyNTI1N2FkYWFkZTUxZDRhNDAiCiAgICB9LAogICAgInJlY2lwZSI6IHsKICAgICAgInR5cGUiOiAiaHR0cHM6Ly9naXRodWIuY29tL2dpdHBvZC1pby9sZWV3YXkvYnVpbGRAZ286MiIsCiAgICAgICJkZWZpbmVkSW5NYXRlcmlhbCI6IDAsCiAgICAgICJlbnRyeVBvaW50IjogImNvbXBvbmVudHMvY29tbW9uLWdvOmxpYiIsCiAgICAgICJhcmd1bWVudHMiOiBbCiAgICAgICAgImxlZXdheSIsCiAgICAgICAgImJ1aWxkIiwKICAgICAgICAiLS1zYXZlIiwKICAgICAgICAib3V0LnRhci5neiIsCiAgICAgICAgImNvbXBvbmVudHMvd3MtbWFuYWdlcjphcHAiCiAgICAgIF0sCiAgICAgICJlbnZpcm9ubWVudCI6IHsKICAgICAgICAibWFuaWZlc3QiOiB7CiAgICAgICAgICAiYXJjaCI6ICJhbWQ2NCIsCiAgICAgICAgICAiZ28iOiAiZ28gdmVyc2lvbiBnbzEuMTguMyBsaW51eC9hbWQ2NCIsCiAgICAgICAgICAibm9kZSI6ICJ2MTYuMTUuMCIsCiAgICAgICAgICAib3MiOiAibGludXgiLAogICAgICAgICAgInlhcm4iOiAiMS4yMi4xOSIKICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICAibWV0YWRhdGEiOiB7CiAgICAgICJidWlsZFN0YXJ0ZWRPbiI6ICIyMDIyLTA2LTEwVDEzOjIzOjI4LjE4MDk5NTI1WiIsCiAgICAgICJidWlsZEZpbmlzaGVkT24iOiAiMjAyMi0wNi0xMFQxMzoyMzo","metadata":{"source":"https://www.gitpod.io/blog/securing-the-software-supply-chain-at-gitpod-with-slsa","loc":{"lines":{"from":85,"to":85}}}}],["808",{"pageContent":"yMi4xOSIKICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICAibWV0YWRhdGEiOiB7CiAgICAgICJidWlsZFN0YXJ0ZWRPbiI6ICIyMDIyLTA2LTEwVDEzOjIzOjI4LjE4MDk5NTI1WiIsCiAgICAgICJidWlsZEZpbmlzaGVkT24iOiAiMjAyMi0wNi0xMFQxMzoyMzozNy43MzMyOTA4MTNaIiwKICAgICAgImNvbXBsZXRlbmVzcyI6IHsKICAgICAgICAiYXJndW1lbnRzIjogdHJ1ZSwKICAgICAgICAiZW52aXJvbm1lbnQiOiBmYWxzZSwKICAgICAgICAibWF0ZXJpYWxzIjogdHJ1ZQogICAgICB9LAogICAgICAicmVwcm9kdWNpYmxlIjogZmFsc2UKICAgIH0sCiAgICAibWF0ZXJpYWxzIjogWwogICAgICB7CiAgICAgICAgInVyaSI6ICJnaXQraHR0cHM6Ly9naXRodWIuY29tL2dpdHBvZC1pby9naXRwb2QuZ2l0IiwKICAgICAgICAiZGlnZXN0IjogewogICAgICAgICAgInNoYTI1NiI6ICI1MTc2YTkwOGQ3YTdlYWVjZjQwMjAwNTIwZWFlNmYxYTZlMTk5ZTM1IgogICAgICAgIH0KICAgICAgfQogICAgXQogIH0KfQ==\",\"signatures\":null}","metadata":{"source":"https://www.gitpod.io/blog/securing-the-software-supply-chain-at-gitpod-with-slsa","loc":{"lines":{"from":85,"to":85}}}}],["809",{"pageContent":"{\"payloadType\":\"application/vnd.in-toto+json\",\"payload\":\"ewogICJfdHlwZSI6ICJodHRwczovL2luLXRvdG8uaW8vU3RhdGVtZW50L3YwLjEiLAogICJwcmVkaWNhdGVUeXBlIjogImh0dHBzOi8vc2xzYS5kZXYvcHJvdmVuYW5jZS92MC4xIiwKICAic3ViamVjdCI6IFtdLAogICJwcmVkaWNhdGUiOiB7CiAgICAiYnVpbGRlciI6IHsKICAgICAgImlkIjogImdpdGh1Yi5jb20vZ2l0cG9kLWlvL2xlZXdheTowLjIuMTctM2ViZmIyYUBzaGEyNTY6Yjk2MjllMmQwNDMyYWRlYTFiZTdkZGRiMzYwM2UzNmQ5ZjY5YjA5ZDg5ODVmNzI1MjU3YWRhYWRlNTFkNGE0MCIKICAgIH0sCiAgICAicmVjaXBlIjogewogICAgICAidHlwZSI6ICJodHRwczovL2dpdGh1Yi5jb20vZ2l0cG9kLWlvL2xlZXdheS9idWlsZEBnbzoyIiwKICAgICAgImRlZmluZWRJbk1hdGVyaWFsIjogMCwKICAgICAgImVudHJ5UG9pbnQiOiAiY29tcG9uZW50cy9jb250ZW50LXNlcnZpY2UtYXBpL2dvOmxpYiIsCiAgICAgICJhcmd1bWVudHMiOiBbCiAgICAgICAgImxlZXdheSIsCiAgICAgICAgImJ1aWxkIiwKICAgICAgICAiLS1zYXZlIiwKICAgICAgICAib3V0LnRhci5neiIsCiAgICAgICAgImNvbXBvbmVudHMvd3MtbWFuYWdlcjphcHAiCiAgICAgIF0sCiAgICAgICJlbnZpcm9ubWVudCI6IHsKICAgICAgICAibWFuaWZlc3QiOiB7CiAgICAgICAgICAiYXJjaCI6ICJhbWQ2NCIsCiAgICAgICAgICAiZ28iOiAiZ28gdmVyc2lvbiBnbzE","metadata":{"source":"https://www.gitpod.io/blog/securing-the-software-supply-chain-at-gitpod-with-slsa","loc":{"lines":{"from":86,"to":86}}}}],["810",{"pageContent":"sCiAgICAgICAgImNvbXBvbmVudHMvd3MtbWFuYWdlcjphcHAiCiAgICAgIF0sCiAgICAgICJlbnZpcm9ubWVudCI6IHsKICAgICAgICAibWFuaWZlc3QiOiB7CiAgICAgICAgICAiYXJjaCI6ICJhbWQ2NCIsCiAgICAgICAgICAiZ28iOiAiZ28gdmVyc2lvbiBnbzEuMTguMyBsaW51eC9hbWQ2NCIsCiAgICAgICAgICAibm9kZSI6ICJ2MTYuMTUuMCIsCiAgICAgICAgICAib3MiOiAibGludXgiLAogICAgICAgICAgInlhcm4iOiAiMS4yMi4xOSIKICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICAibWV0YWRhdGEiOiB7CiAgICAgICJidWlsZFN0YXJ0ZWRPbiI6ICIyMDIyLTA2LTEwVDEzOjIzOjQwLjI0NzAwMTk5MloiLAogICAgICAiYnVpbGRGaW5pc2hlZE9uIjogIjIwMjItMDYtMTBUMTM6MjM6NDIuOTU0MTA4MTM1WiIsCiAgICAgICJjb21wbGV0ZW5lc3MiOiB7CiAgICAgICAgImFyZ3VtZW50cyI6IHRydWUsCiAgICAgICAgImVudmlyb25tZW50IjogZmFsc2UsCiAgICAgICAgIm1hdGVyaWFscyI6IHRydWUKICAgICAgfSwKICAgICAgInJlcHJvZHVjaWJsZSI6IGZhbHNlCiAgICB9LAogICAgIm1hdGVyaWFscyI6IFsKICAgICAgewogICAgICAgICJ1cmkiOiAiZ2l0K2h0dHBzOi8vZ2l0aHViLmNvbS9naXRwb2QtaW8vZ2l0cG9kLmdpdCIsCiAgICAgICAgImRpZ2VzdCI6IHsKICAgICAgICAgICJzaGEyNTYiOiAiNTE3NmE5MDhkN2E3ZWFlY2Y0MDIwMDUyMGVhZTZmMWE2ZTE5OWUzNSIKICAgICAgICB9CiAgICA","metadata":{"source":"https://www.gitpod.io/blog/securing-the-software-supply-chain-at-gitpod-with-slsa","loc":{"lines":{"from":86,"to":86}}}}],["811",{"pageContent":"1cmkiOiAiZ2l0K2h0dHBzOi8vZ2l0aHViLmNvbS9naXRwb2QtaW8vZ2l0cG9kLmdpdCIsCiAgICAgICAgImRpZ2VzdCI6IHsKICAgICAgICAgICJzaGEyNTYiOiAiNTE3NmE5MDhkN2E3ZWFlY2Y0MDIwMDUyMGVhZTZmMWE2ZTE5OWUzNSIKICAgICAgICB9CiAgICAgIH0KICAgIF0KICB9Cn0=\",\"signatures\":null}","metadata":{"source":"https://www.gitpod.io/blog/securing-the-software-supply-chain-at-gitpod-with-slsa","loc":{"lines":{"from":86,"to":86}}}}],["812",{"pageContent":"...","metadata":{"source":"https://www.gitpod.io/blog/securing-the-software-supply-chain-at-gitpod-with-slsa","loc":{"lines":{"from":87,"to":87}}}}],["813",{"pageContent":"Notice that the built package carries a `provenance-bundle.jsonl` file. This newline delimited JSON file contains attestations for all dependencies built using leeway. Let’s look at one of those base64 monsters in more detail.","metadata":{"source":"https://www.gitpod.io/blog/securing-the-software-supply-chain-at-gitpod-with-slsa","loc":{"lines":{"from":90,"to":90}}}}],["814",{"pageContent":"```bash\ngitpod /workspace/gitpod (main) $ tar Oxf out.tar.gz ./provenance-bundle.jsonl | jq -r .payload | base64 -d | jq\n{\n  \"_type\": \"https://in-toto.io/Statement/v0.1\",\n  \"predicateType\": \"https://slsa.dev/provenance/v0.1\",\n  \"subject\": [\n    {\n      \"name\": \"/_tests/util.test\",\n      \"digest\": {\n        \"sha256\": \"f54faccee12ad332c05db07cff3b4d51cfefe1092ea5ea7ebe7101363f1bd4eb\"\n      }\n    },\n    {\n      \"name\": \"/_tests/cgroups.test\",\n      \"digest\": {\n        \"sha256\": \"8034895b95cc3c63ccf006771f0ddab889773bc7110c1a427efe848fa8b0b38d\"\n      }\n    },\n    {\n      \"name\": \"/_tests/namegen.test\",\n      \"digest\": {\n        \"sha256\": \"7b4c77281ff2f96f91e99b01efacbf26e32c2321bade07af2b51898c815f15f2\"\n      }\n    },\n    {\n      \"name\": \"/_tests/baseserver.test\",\n      \"digest\": {\n        \"sha256\": \"f8f9e513c233097ad58c8d1fc608732884c26115d50c6a521157c091f50c7ef2\"\n      }\n    },\n    {\n      \"name\": \"/_tests/log.test\",\n      \"digest\": {\n        \"sha256\": \"2e692abd5ba1091eac2fc07673bc3a97b490db094c3b60c3b1a896d6c75af94a\"","metadata":{"source":"https://www.gitpod.io/blog/securing-the-software-supply-chain-at-gitpod-with-slsa","loc":{"lines":{"from":92,"to":125}}}}],["815",{"pageContent":"}\n    },\n    {\n      \"name\": \"/_tests/log.test\",\n      \"digest\": {\n        \"sha256\": \"2e692abd5ba1091eac2fc07673bc3a97b490db094c3b60c3b1a896d6c75af94a\"\n      }\n    },\n    {\n      \"name\": \"/_tests/grpc.test\",\n      \"digest\": {\n        \"sha256\": \"bd61b37fb5baf2b97a90463e76b98786d5e80af8f7d556d8c0c0fdc03d6bdf76\"\n      }\n    }\n  ],\n  \"predicate\": {\n    \"builder\": {\n      \"id\": \"github.com/gitpod-io/leeway:0.2.17-3ebfb2a@sha256:b9629e2d0432adea1be7dddb3603e36d9f69b09d8985f725257adaade51d4a40\"\n    },\n    \"recipe\": {\n      \"type\": \"https://github.com/gitpod-io/leeway/build@go:2\",\n      \"definedInMaterial\": 0,\n      \"entryPoint\": \"components/common-go:lib\",\n      \"arguments\": [\n        \"leeway\",\n        \"build\",\n        \"--save\",\n        \"out.tar.gz\",\n        \"components/ws-manager:app\"\n      ],\n      \"environment\": {\n        \"manifest\": {\n          \"arch\": \"amd64\",\n          \"go\": \"go version go1.18.3 linux/amd64\",\n          \"node\": \"v16.15.0\",\n          \"os\": \"linux\",\n          \"yarn\": \"1.22.19\"\n        }\n      }\n    },","metadata":{"source":"https://www.gitpod.io/blog/securing-the-software-supply-chain-at-gitpod-with-slsa","loc":{"lines":{"from":125,"to":164}}}}],["816",{"pageContent":"\"manifest\": {\n          \"arch\": \"amd64\",\n          \"go\": \"go version go1.18.3 linux/amd64\",\n          \"node\": \"v16.15.0\",\n          \"os\": \"linux\",\n          \"yarn\": \"1.22.19\"\n        }\n      }\n    },\n    \"metadata\": {\n      \"buildStartedOn\": \"2022-06-10T13:23:28.18099525Z\",\n      \"buildFinishedOn\": \"2022-06-10T13:23:37.733290813Z\",\n      \"completeness\": {\n        \"arguments\": true,\n        \"environment\": false,\n        \"materials\": true\n      },\n      \"reproducible\": false\n    },\n    \"materials\": [\n      {\n        \"uri\": \"git+https://github.com/gitpod-io/gitpod.git\",\n        \"digest\": {\n          \"sha256\": \"5176a908d7a7eaecf40200520eae6f1a6e199e35\"\n        }\n      }\n    ]\n  }\n}","metadata":{"source":"https://www.gitpod.io/blog/securing-the-software-supply-chain-at-gitpod-with-slsa","loc":{"lines":{"from":164,"to":192}}}}],["817",{"pageContent":"SLSA attestations have a subject (the build output) and a predicate (the process which produced this output). Each file produced by the build is recorded including its SHA hash.\nThe predicate contains information about the builder; in leeway’s case that’s the version number and a hash of the leeway binary itself (the version number is easily tampered with). We record the command line that was used to invoke the build, as well as some environmental data.\nLastly, the materials section describes the inputs to the build. In this example, the build ran from a clean working copy, hence leeway adds a reference to this well-defined state. If the working copy was dirty, leeway would list all sources and their hashes instead.","metadata":{"source":"https://www.gitpod.io/blog/securing-the-software-supply-chain-at-gitpod-with-slsa","loc":{"lines":{"from":195,"to":197}}}}],["818",{"pageContent":"Consuming the provenance\n\nWe publish the provenance bundle as part of the [versions and installer images](https://werft.gitpod-dev.com/job/gitpod-build-main.3532). Those files can be extracted using the [oci-tool](https://github.com/csweichel/oci-tool), or using a container runtime. See below for a demo of this process:\n\n<p align=\"center\">\n    <iframe title=\"loom video\" width=\"640\" height=\"360\" src=\"https://www.loom.com/embed/49cc504d3ffb436f8680ab0030eb8896\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>\n</p>\n\nIn addition to just printing it and looking at the provenance data manually, you can use leeway to make assertions against this data. For example:","metadata":{"source":"https://www.gitpod.io/blog/securing-the-software-supply-chain-at-gitpod-with-slsa","loc":{"lines":{"from":199,"to":207}}}}],["819",{"pageContent":"In addition to just printing it and looking at the provenance data manually, you can use leeway to make assertions against this data. For example:\n\n```js\ngitpod /workspace/gitpod (main) $ oci-tool fetch file eu.gcr.io/gitpod-core-dev/build/installer:release-2022.05.0.5 app/provenance-bundle.jsonl\ndownloading sha256:0eae1244a408e28c6d4b8f99765a924a9039c0dd59ca2026bcf2fb292859856e  100% |████████████████████████████████████████████████████████████████████████████| (17/17 MB, 36.936 MB/s)\ndownloading sha256:39a08d88448d7592d4dc4fac5b6dba8977d7110c9baf2428fb30534c14c8f170  100% |████████████████████████████████████████████████████████████████████████████| (18/18 MB, 40.292 MB/s)\n\ngitpod /workspace/gitpod (main) $ leeway provenance assert file://provenance-bundle.jsonl --git-only  && echo Built from a clean working copy\nBuilt from a clean working copy","metadata":{"source":"https://www.gitpod.io/blog/securing-the-software-supply-chain-at-gitpod-with-slsa","loc":{"lines":{"from":207,"to":215}}}}],["820",{"pageContent":"gitpod /workspace/gitpod (main) $ leeway provenance assert file://provenance-bundle.jsonl --git-only  && echo Built from a clean working copy\nBuilt from a clean working copy\n\ngitpod /workspace/gitpod (main) $ leeway provenance assert file://provenance-bundle.jsonl --built-with-leeway  && echo Built exclusively using leeway\nBuilt exclusively using leeway\n\ngitpod /workspace/gitpod (main) $ leeway provenance assert file://provenance-bundle.jsonl --built-with-leeway-version 0.2.17-3ebfb2a@sha256:b9629e2d0432adea1be7dddb3603e36d9f69b09d8985f725257adaade51d4a40  && echo Built using the latest version\nBuilt using the latest version","metadata":{"source":"https://www.gitpod.io/blog/securing-the-software-supply-chain-at-gitpod-with-slsa","loc":{"lines":{"from":215,"to":222}}}}],["821",{"pageContent":"gitpod /workspace/gitpod (main) $ leeway provenance assert file://provenance-bundle.jsonl --built-with-leeway-version not-an-actual-version\nERRO[0000] install/installer:app failed built-with-leeway-version: was built using leeway version 0.2.17-3ebfb2a@sha256:b9629e2d0432adea1be7dddb3603e36d9f69b09d8985f725257adaade51d4a40\nERRO[0000] components:all-docker failed built-with-leeway-version: was built using leeway version 0.2.17-3ebfb2a@sha256:b9629e2d0432adea1be7dddb3603e36d9f69b09d8985f725257adaade51d4a40\nERRO[0000] dev/version-manifest:app failed built-with-leeway-version: was built using leeway version 0.2.17-3ebfb2a@sha256:b9629e2d0432adea1be7dddb3603e36d9f69b09d8985f725257adaade51d4a40\nERRO[0000] test:docker failed built-with-leeway-version: was built using leeway version 0.2.17-3ebfb2a@sha256:b9629e2d0432adea1be7dddb3603e36d9f69b09d8985f725257adaade51d4a40","metadata":{"source":"https://www.gitpod.io/blog/securing-the-software-supply-chain-at-gitpod-with-slsa","loc":{"lines":{"from":224,"to":228}}}}],["822",{"pageContent":"ERRO[0000] test:docker failed built-with-leeway-version: was built using leeway version 0.2.17-3ebfb2a@sha256:b9629e2d0432adea1be7dddb3603e36d9f69b09d8985f725257adaade51d4a40\nERRO[0000] test:app failed built-with-leeway-version: was built using leeway version 0.2.17-3ebfb2a@sha256:b9629e2d0432adea1be7dddb3603e36d9f69b09d8985f725257adaade51d4a40\nERRO[0000] components/ide-proxy:docker failed built-with-leeway-version: was built using leeway version 0.2.17-3ebfb2a@sha256:b9629e2d0432adea1be7dddb3603e36d9f69b09d8985f725257adaade51d4a40\nERRO[0000] components/ws-proxy:docker failed built-with-leeway-version: was built using leeway version 0.2.17-3ebfb2a@sha256:b9629e2d0432adea1be7dddb3603e36d9f69b09d8985f725257adaade51d4a40\nERRO[0000] components/ws-proxy:app failed built-with-leeway-version: was built using leeway version 0.2.17-3ebfb2a@sha256:b9629e2d0432adea1be7dddb3603e36d9f69b09d8985f725257adaade51d4a40","metadata":{"source":"https://www.gitpod.io/blog/securing-the-software-supply-chain-at-gitpod-with-slsa","loc":{"lines":{"from":228,"to":232}}}}],["823",{"pageContent":"ERRO[0000] components/ws-proxy:app failed built-with-leeway-version: was built using leeway version 0.2.17-3ebfb2a@sha256:b9629e2d0432adea1be7dddb3603e36d9f69b09d8985f725257adaade51d4a40\nERRO[0000] components/ws-manager:docker failed built-with-leeway-version: was built using leeway version 0.2.17-3ebfb2a@sha256:b9629e2d0432adea1be7dddb3603e36d9f69b09d8985f725257adaade51d4a40\nERRO[0000] components/ws-manager:app failed built-with-leeway-version: was built using leeway version 0.2.17-3ebfb2a@sha256:b9629e2d0432adea1be7dddb3603e36d9f69b09d8985f725257adaade51d4a40\nERRO[0000] components/ws-manager-bridge:docker failed built-with-leeway-version: was built using leeway version 0.2.17-3ebfb2a@sha256:b9629e2d0432adea1be7dddb3603e36d9f69b09d8985f725257adaade51d4a40\nERRO[0000] components/ws-manager-bridge:app failed built-with-leeway-version: was built using leeway version 0.2.17-3ebfb2a@sha256:b9629e2d0432adea1be7dddb3603e36d9\n```","metadata":{"source":"https://www.gitpod.io/blog/securing-the-software-supply-chain-at-gitpod-with-slsa","loc":{"lines":{"from":232,"to":237}}}}],["824",{"pageContent":"What are we going to do next ⏭️\n\nWhile SLSA Level 1 is an important first step. It helps security teams gain confidence in the integrity of our product, and increases trust in what we deliver. We also know that it will be difficult for security teams to review the provenance of every software, including its dependencies that are getting consumed to make risk-based decisions.\n\nWe have set our sights on Level 2, with Leeway being able to provide signed provenance already. At the same time, we need to invest into our CI/CD infrastructure to reduce the likelihood of the provenance signing keys being exfiltrated. Fulcrio and Rekor will come in handy here. Once that’s sorted, expect signed containers (including provenance) coming out of our build pipeline.","metadata":{"source":"https://www.gitpod.io/blog/securing-the-software-supply-chain-at-gitpod-with-slsa","loc":{"lines":{"from":239,"to":243}}}}],["825",{"pageContent":"---\nauthor: burningion, nancy-chauhan\ndate: Tue, 21 Feb 2023 11:00:00\nexcerpt: See how 1Password can be used to sign your commits on Gitpod with SSH keys and biometric confirmation\nimage: teaser.webp\nslug: signing-git-commits-on-gitpod-with-1-password\ntags: [\"Engineering\"]\nteaserImage: teaser.webp\ntitle: Signing Commits on Gitpod with 1Password\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\nBy default, git makes no attempt to verify or validate the identity of the person making commits. On a fresh installation, git will prompt for an email address and name, but no attempt is made to verify the person making commits actually owns the email address.\n\nGiven this lack of verification, if an attacker compromises access to a source code repository, they can impersonate the person normally creating commits, potentially compromising the downstream binaries.","metadata":{"source":"https://www.gitpod.io/blog/signing-git-commits-on-gitpod-with-1-password","loc":{"lines":{"from":1,"to":18}}}}],["826",{"pageContent":"Signing Commits to Help Secure the Software Supply Chain\n\nOne way to prevent this sort of an attack is via tools like [Sigstore](https://docs.sigstore.dev/), [in-toto](https://in-toto.io/), and [TUF](https://theupdateframework.io/). Each of these frameworks validates the supply chain integrity leading up to the building of a binary artifact, and, in the case of TUF, the secure distribution of binaries.\n\nA key component of these tools is ensuring developers cryptographically sign their commits.\n\nTo do git commit signing, developers generate and use a cryptographic key pair to add a digital signature to each commit which verifies their identity. Once set up properly, both GitHub and GitLab add a “verified” badge to each commit which has been signed.\n\nIn this blog post, we’ll explore how you can sign your commits while developing on Gitpod Workspaces using 1Password and SSH key signing.","metadata":{"source":"https://www.gitpod.io/blog/signing-git-commits-on-gitpod-with-1-password","loc":{"lines":{"from":20,"to":28}}}}],["827",{"pageContent":"1Password’s SSH Agent and SSH Key Management\n\n[1Password](https://www.1password.com) now allows you to set up and manage [SSH keys](https://developer.1password.com/docs/ssh/) from within the desktop application. This is useful, as you can be prompted every time an attempt is made to use an SSH key, and authorization can be granted from within the application with biometric confirmation.\n\nAs described in the illustration below, 1Password can handle all SSH authentication between Gitpod Workspaces and Gitpod supported [desktop IDEs/editors](https://www.gitpod.io/docs/references/ides-and-editors).\n\nIt accomplishes this via SSH agent forwarding, which lets you authenticate remote SSH requests using local SSH credentials. In practice this means you can run any SSH command in your remote Gitpod workspace, _without_ the SSH private key ever leaving the local 1Password process.","metadata":{"source":"https://www.gitpod.io/blog/signing-git-commits-on-gitpod-with-1-password","loc":{"lines":{"from":30,"to":36}}}}],["828",{"pageContent":"We can also use these local SSH keys to sign Git commits, as GitHub supports SSH key signing for commits. We can then get the verified badge next to our username, and add a layer of proof showing the code came from us.\n\n<figure class=\"flex flex-col items-center text-center\">\n  <img src=\"/images/blog/signing-git-commits-on-gitpod-with-1-password/architecture.webp\" alt=\"Architecture of commit signing with SSH keys\"  />\n</figure>","metadata":{"source":"https://www.gitpod.io/blog/signing-git-commits-on-gitpod-with-1-password","loc":{"lines":{"from":38,"to":42}}}}],["829",{"pageContent":"Signing commits in Gitpod with 1Password\n\nAgain, for now SSH agent forwarding with 1Password only works on desktop applications. This means you won’t be able to do git signatures in the browser edition of VS Code, and **must use a Gitpod compatible desktop IDE for code signing.**\n\nSo first, ensure you’re running a desktop IDE for your workspace. With that, we can then set up 1Password to manage our SSH keys:\n\nInstall [1Password](https://1password.com/downloads) on your machine, and enable the SSH Agent found under Settings -> Developer -> SSH Agent\n\n<figure class=\"flex flex-col items-center text-center\">\n  <img src=\"/images/blog/signing-git-commits-on-gitpod-with-1-password/1password-ssh-agent.webp\" alt=\"SSH Agent Configuration in 1Password\"  />\n</figure>\n\nMake the following changes in your local `~/.ssh/config` to add a 1Password agent socket and SSH agent forwarding for Gitpod workspaces. (If the file doesn't exist, create it.)","metadata":{"source":"https://www.gitpod.io/blog/signing-git-commits-on-gitpod-with-1-password","loc":{"lines":{"from":44,"to":56}}}}],["830",{"pageContent":"Make the following changes in your local `~/.ssh/config` to add a 1Password agent socket and SSH agent forwarding for Gitpod workspaces. (If the file doesn't exist, create it.)\n\n```\nHost *\n  IdentityAgent \"~/Library/Group Containers/2BUA8C4S2C.com.1password/t/agent.sock\"\n\nHost *.gitpod.io\n  ForwardAgent yes","metadata":{"source":"https://www.gitpod.io/blog/signing-git-commits-on-gitpod-with-1-password","loc":{"lines":{"from":56,"to":63}}}}],["831",{"pageContent":"These changes make sure of two things:\n\n- SSH authentication is being handled by 1Password's Agent\n\n- Agent forwarding is enabled for \\*.gitpod.io which means all Gitpod workspaces have access to the SSH auth socket. (If you’re using an instance of Gitpod dedicated, set it to a wildcard of your internally hosted domain.)\n\nNext, we'll need to generate an SSH Key. You can do this right within the [Gitpod SSH keys](https://gitpod.io/keys) page if you have the 1Password extension installed:\n\n<figure class=\"flex flex-col items-center text-center\">\n  <img src=\"/images/blog/signing-git-commits-on-gitpod-with-1-password/fill-ssh-key.webp\" alt=\"1Password Autocompleting SSH Key\"  />\n</figure>\n\nIf you'd like to use an existing SSH key, you can also import that into 1Password. It's best if it's passphrase protected. The command to add a passphrase to an existing key is:\n\n```\n$ ssh-keygen -p -f ~/.ssh/id_rsa","metadata":{"source":"https://www.gitpod.io/blog/signing-git-commits-on-gitpod-with-1-password","loc":{"lines":{"from":66,"to":81}}}}],["832",{"pageContent":"With this, you can then load your SSH key into 1Password, and save the passphrase you created. Going forward, 1Password will enter your passphrase for you automatically.\n\nFrom there, add your SSH public key to Gitpod to the [Gitpod SSH keys](https://gitpod.io/keys). With 1Password 8 and its browser extension (currently supports Chrome, Safari, Brave and more), again, you will get the option to insert the SSH key into the browser. (This should be your public key!) This will allow us to access our Gitpod Workspace via SSH.\n\nNext, add your public SSH key to Gitpod as a [user environment variable](https://gitpod.io/user/variables). We'll use this environment variable to tell git which key to use for signing. In this case, I’ve named my environment variable `SSH_SIGNING_KEY`, and I’ve set it as a global variable with a `*/*` scope. (I want every repository I use on Gitpod to use it for signing if possible.)","metadata":{"source":"https://www.gitpod.io/blog/signing-git-commits-on-gitpod-with-1-password","loc":{"lines":{"from":84,"to":88}}}}],["833",{"pageContent":"<figure class=\"flex flex-col items-center text-center\">\n  <img src=\"/images/blog/signing-git-commits-on-gitpod-with-1-password/signing-key.webp\" alt=\"Public SSH Key set as Environment variable in Gitpod\"  />\n</figure>\n\nAdd your [SSH public key to Github](https://github.com/settings/ssh/new) as _both_ a signing key and an authentication key. The signing key will be used to confirm your identity in git, and the authentication key will be used to authenticate your code pushes with the Github server. (Yes, two different things. You may need to do the authentication key first for the signing key option to show up.)\n\n<figure class=\"flex flex-col items-center text-center\">\n  <img src=\"/images/blog/signing-git-commits-on-gitpod-with-1-password/add-ssh-keys-github.webp\" alt=\"SSH Keys to Authenticate and Sign on Github\"  />\n</figure>\n\nNote: To verify if your SSH credentials work properly, you can try authenticating with Github over SSH on your local machine. On a fresh local terminal, type:","metadata":{"source":"https://www.gitpod.io/blog/signing-git-commits-on-gitpod-with-1-password","loc":{"lines":{"from":90,"to":100}}}}],["834",{"pageContent":"Note: To verify if your SSH credentials work properly, you can try authenticating with Github over SSH on your local machine. On a fresh local terminal, type:\n\n`ssh -T git@github.com`\n\nThis should first prompt you for biometric confirmation with 1Password, and then return a message saying you have successfully authenticated with Github with your username.","metadata":{"source":"https://www.gitpod.io/blog/signing-git-commits-on-gitpod-with-1-password","loc":{"lines":{"from":100,"to":104}}}}],["835",{"pageContent":"Signing your first commit in Gitpod\n\nOpen a project in a Gitpod workspace, and ensure it's open in VS Code Desktop.\n\nWhen you open a workspace in VS Code Desktop, an SSH connection between VS Code desktop and Gitpod workspace should be established by the 1Password SSH Agent. If everything has been set correctly you should get a biometric prompt to login by touch key when opening the workspace. The 1Password application provides SSH credentials and handles the SSH flow.\n\nNext, we need to open a new shell by clicking the `+` sign in VS Code, and type the commands to enable git commit signing:\n\n```bash\n$ git config --global gpg.format ssh\n$ git config --global user.signingkey \"$SSH_SIGNING_KEY\"\n```\n\nThis tells git to use SSH as a sigining format, and injects our environment variable as the public key to sign with.\n\nWe can now test a commit by using the following command after changing a file:\n\n```bash\n$\tgit commit -S -am “Testing our signed commits”","metadata":{"source":"https://www.gitpod.io/blog/signing-git-commits-on-gitpod-with-1-password","loc":{"lines":{"from":106,"to":124}}}}],["836",{"pageContent":"If we look at Github for our commit, we should now see a verified badge next to the commit:\n\n<figure class=\"flex flex-col items-center text-center\">\n  <img src=\"/images/blog/signing-git-commits-on-gitpod-with-1-password/verified-commit.webp\" alt=\"Verified commit on Github\"  />\n</figure>\n\nTo enable git commit signing every time we open our repository, must set our git preferences in `.gitpod.yaml` as a task, and again, ensure have set an environment variable for our `SSH_SIGNING_KEY` in our [environment variables](https://gitpod.io/variables):\n\n```yaml\ntasks:\n  - name: Local terminal\n\tinit: git config --global gpg.format ssh && git config --global user.signingkey \"$SSH_SIGNING_KEY\" && git config commit.gpgsign true --global\n\tcommand: bash\n```\n\nWe should now have biometric prompts from 1Password for signing our git commits, and have helped to secure our source code.\n\nBut what if we want all of our repositories to have commit signing enabled by default in Gitpod?","metadata":{"source":"https://www.gitpod.io/blog/signing-git-commits-on-gitpod-with-1-password","loc":{"lines":{"from":127,"to":144}}}}],["837",{"pageContent":"Automatic Commit Signing in Every Repository with Dotfiles\n\nFor that, Gitpod has [Dotfiles](https://www.gitpod.io/docs/configure/user-settings/dotfiles#dotfileshttps://www.gitpod.io/docs/configure/user-settings/dotfiles#dotfiles), which allow us to run a bit of bash on each of the Gitpod workspaces we spin up. In my case, I created a git repository named `gitpod-dotfiles`, and linked it to my user settings:\n\n<figure class=\"flex flex-col items-center text-center\">\n  <img src=\"/images/blog/signing-git-commits-on-gitpod-with-1-password/dotfiles.webp\" alt=\"Kirk's Dotfiles\"  />\n</figure>\n\nIn my Dotfile repository, I’ve created a file with the name `install.sh` (and run `chmod +x install.sh` afterwards), and have pasted in the same commands we used in the above task:\n\n```bash\ngit config --global gpg.format ssh && git config --global user.signingkey \"$SSH_SIGNING_KEY\" && git config commit.gpgsign true --global","metadata":{"source":"https://www.gitpod.io/blog/signing-git-commits-on-gitpod-with-1-password","loc":{"lines":{"from":146,"to":157}}}}],["838",{"pageContent":"If you like, you can [fork my dotfiles](https://github.com/burningion/gitpod-dotfiles), or create your own, and set them in your account preferences to have git commit signing everywhere when using a Desktop IDE and Gitpod.","metadata":{"source":"https://www.gitpod.io/blog/signing-git-commits-on-gitpod-with-1-password","loc":{"lines":{"from":160,"to":160}}}}],["839",{"pageContent":"References\n\n- Community office hours with 1Password:\n\n`youtube: u2aCOtMqtc4`\n\n- SSH & Git - Get Started https://developer.1password.com/docs/ssh/get-started\n- 1Password Developer Documentation https://developer.1password.com/\n\nIf you have any questions about setting this up, drop by [Gitpod’s community Discord server](https://www.gitpod.io/chat) or [1Password’s Developer Slack Community](https://join.slack.com/t/1password-devs/shared_invite/zt-1halo11ps-6o9pEv96xZ3LtX_VE0fJQA). We would love to hear your feedback in the Community.","metadata":{"source":"https://www.gitpod.io/blog/signing-git-commits-on-gitpod-with-1-password","loc":{"lines":{"from":162,"to":171}}}}],["840",{"pageContent":"---\nauthor: meysholdt\ndate: Thu Dec 19 2019 11:49:24 GMT+0000 (UTC)\nexcerpt: Eighteen months ago we launched the public beta of Gitpod. That date marked the beginning of an amazing journey with plenty of feedback\nimage: globe.png\nslug: self-host-your-gitpod\nsubtitle: Gitpod on Your Infrastructure\nteaserImage: globe.png\ntitle: Self-Host Your Gitpod\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\nEighteen months ago we launched the public beta of Gitpod.\nThat date marked the beginning of an amazing journey with plenty of feedback, fixes and improvements.\nIt is exciting to see how far we have come and where that simple idea of instant, ready-to-code workspaces has taken us.\n\nNone of this would have been possible if it weren't for the troves of developers, hackers, coders and other purveyors of Open-Source who provide ample feedback and use Gitpod as their IDE of choice.\nIf the technical side of Gitpod is fun, the user side of Gitpod is truly amazing.","metadata":{"source":"https://www.gitpod.io/blog/self-host-your-gitpod","loc":{"lines":{"from":1,"to":21}}}}],["841",{"pageContent":"We are blown away every day because of the quantity and quality of what you guys do with Gitpod.","metadata":{"source":"https://www.gitpod.io/blog/self-host-your-gitpod","loc":{"lines":{"from":23,"to":23}}}}],["842",{"pageContent":"A Public Service is Not Enough\n\nHowever, until now Gitpod has not truly been available for everyone.\nThere are many situations, especially in the enterprise, where working on your source code on a third-party cloud service is out of question.\nMaybe the codebase you work on lives on a GitLab or GitHub Enterprise instance in your company's network, guarded by a firewall.\nMaybe working on the code requires access to services that are available only inside your company network, such as databases, npm/Docker/Maven registires or a Kubernetes cluster.\n\nWell, why not have Gitpod where you need it?","metadata":{"source":"https://www.gitpod.io/blog/self-host-your-gitpod","loc":{"lines":{"from":25,"to":32}}}}],["843",{"pageContent":"Introducing: Gitpod Self-Hosted\n\nToday we announce the availability of Gitpod Self-Hosted.\nMuch like eighteen months ago, this marks the starting point of a new section of our journey.\n\nTo create Gitpod Self-Hosted, we took our codebase from gitpod.io and made it dramatially easier to configure, install and run.\nAs a result, you'll find all the features you know from gitpod.io in Gitpod Self-Hosted.\n\nGitpod Self-Hosted runs on Kubernetes and integrates via OAuth with GitHub Enterprise, GitLab CE and GitLab EE.\nThis way no additional user management is required and users get easy access to Git repositories based on the permissions already present in GitLab/GitHub.\n\nWe operate gitpod.io on GCP, hence running Gitpod Self-Hosted on Google Cloud Platform (GCP) is a battle-tested solution.","metadata":{"source":"https://www.gitpod.io/blog/self-host-your-gitpod","loc":{"lines":{"from":34,"to":45}}}}],["844",{"pageContent":"Installation\n\nInstalling Gitpod Self-Hosted on your own infrastructure works much like any other piece of kit running on Kubernetes. We have produced a series of [installation guides](/docs/configure/self-hosted/latest/installation) will work most Kubernetes clusters.\n\n## Pricing\n\nGitpod Self-Hosted is free for up to three users. If you're a small shop that will get you up and running.\n\nIf you need more, there is a [free one-month unlimited license](https://gitpod.io/selfhosted-trial) available.\n\nIn case you need support running your PoC in-house please [email us](mailto:contact@gitpod.io) and we'll be happy to help.\n\nOur remodeled [community](https://community.gitpod.io/) will also fill with helpful tips and tricks regarding Gitpod Self-Hosted.\n\nWe are absolutely thrilled to see Gitpod and its community growing.\nSelf-Hosted will enable even more developers to focus more on coding and less on setting up their machine or waiting for builds to finish.","metadata":{"source":"https://www.gitpod.io/blog/self-host-your-gitpod","loc":{"lines":{"from":47,"to":62}}}}],["845",{"pageContent":"---\nauthor: axonasif, pawlean, nancy-chauhan\ndate: Thursday, 30 Jun 2022 02:00:00 UTC\nexcerpt: This story is about how Gitpod enabled an 18-year-old student from Dhaka with a broken laptop to continue developing software on an Android phone seamlessly\nslug: software-development-from-my-android-phone-at-datacenter-speeds\nteaserImage: teaser.png\ntags: [\"Gitpod updates\"]\nimage: teaser.png\ntitle: Software development from my Android phone at datacenter speeds\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\nThis story is about how Gitpod enabled an 18-year-old student from Dhaka with a broken laptop to continue developing software on an Android phone seamlessly. From learning to code in [Rust](https://www.rust-lang.org/learn) to developing [Optimus Discord Bot](https://github.com/supremegamers/optimus), which is now powering the Gitpod Community Discord server, I learned a lot! 🥳","metadata":{"source":"https://www.gitpod.io/blog/software-development-from-my-android-phone-at-datacenter-speeds","loc":{"lines":{"from":1,"to":16}}}}],["846",{"pageContent":"With Gitpod, developing software is easier, accessible and more productive than with a local development environment. How so? Gitpod is a complete dev environment running in the cloud, turning my android phone into a powerful dev machine. Put in different words, I get hold of data center hardware in my palm that is fine tuned for developing software.\n\nI am known as AXON in the [Gitpod Community](https://www.gitpod.io/chat). I’ll be sharing my story of how Gitpod quite literally changed my life and enabled me to continue my journey into software development. Today, I’m a Community Engineer intern at Gitpod. Being an active community member and solving my development pains with Gitpod led me here!","metadata":{"source":"https://www.gitpod.io/blog/software-development-from-my-android-phone-at-datacenter-speeds","loc":{"lines":{"from":18,"to":20}}}}],["847",{"pageContent":"A few years ago, I got into software development while exploring the [Android-x86](https://www.android-x86.org/) space. As a user, I wanted to play android games with it, but I ended up getting involved in its development. One day, my laptop broke because of all the overload I had put into it over the years. The only other device that I had on me was my Android phone. Luckily, this was around the same time I discovered Gitpod! I hoped that I would be able to recreate a functioning developer environment in the cloud, just using my phone and Gitpod. I used [Techno Spark 7 Pro (128/6GB)](https://www.gsmarena.com/tecno_spark_7_pro-10884.php) with a Bluetooth mouse and keyboard combo, which I also connected with the TV for a larger screen. With this new setup, I could start working on almost any project. I also had a native Linux environment within my phone where I could `chroot` into with my phone's superuser privileges. Still, it wasn't suitable for software development, given the hardware and software limitations and all the other hassles. Using Gitpod, my Android phone effectively turned into a thin client with an interface to write code. Gitpod provisioned a developer","metadata":{"source":"https://www.gitpod.io/blog/software-development-from-my-android-phone-at-datacenter-speeds","loc":{"lines":{"from":22,"to":22}}}}],["848",{"pageContent":"for software development, given the hardware and software limitations and all the other hassles. Using Gitpod, my Android phone effectively turned into a thin client with an interface to write code. Gitpod provisioned a developer environment in a Linux container in the cloud and was doing the brunt of computing work, and my phone was resting in peace 🤣","metadata":{"source":"https://www.gitpod.io/blog/software-development-from-my-android-phone-at-datacenter-speeds","loc":{"lines":{"from":22,"to":22}}}}],["849",{"pageContent":"# Getting started with Gitpod on Android\n\n![My android phone with a bluetooth keyboard and mouse](../../../../../static/images/blog/software-development-from-my-android-phone-at-datacenter-speeds/20220412_004915681.jpg \"This is how my setup used to look like!\")\n\nGetting started with Gitpod on Android is quite easy. If you are interested in setting up Gitpod on Android, you can check out the [detailed guide](../guides/getting-started-with-gitpod-in-android).\n\n`youtube: Aepvv_OqRYU`\n\n- Step 1: Install [Kiwi](https://kiwibrowser.com/) browser 🥝\n- Step 2: Install the [Gitpod extension](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) in Kiwi browser 🍊\n- Step 3: Open a Git repository in Gitpod ⚡️\n- Step 4: Code, Develop, Ship it 🚀\n\n# Things I built/maintained with Gitpod on my Android phone\n\nHere are some fun things I did:","metadata":{"source":"https://www.gitpod.io/blog/software-development-from-my-android-phone-at-datacenter-speeds","loc":{"lines":{"from":24,"to":39}}}}],["850",{"pageContent":"- [Optimus Discord Bot](https://github.com/supremegamers/optimus) - This hackathon project is now powering our Gitpod Community Discord server 🎉 I had started developing the first version of it for [https://aopc.dev/](https://aopc.dev/) discord server but the compile times were unbearable until I found Gitpod.\n- [GearLock](https://github.com/axonasif/gearlock) - Maintaining a bootable custom-recovery and package manager for Android-x86.\n- [Tuxdroid](https://github.com/tuxdroid-io/tuxdroid) - This script manages my Linux GUI and the terminal environment on my phone, and an interesting fact - I programmed it on my phone to use it for my phone 😆. I can run VS Code inside my phone with the help of this, which also enables me to connect to a Gitpod workspace via Remote-SSH and more!\n- [Bashbox](https://github.com/bashbox/bashbox) - A _bash compiler_ that helps me create modular and maintainable bash projects. I also used it for creating **Tuxdroid** above in a very short time!","metadata":{"source":"https://www.gitpod.io/blog/software-development-from-my-android-phone-at-datacenter-speeds","loc":{"lines":{"from":41,"to":44}}}}],["851",{"pageContent":"- [Bashbox](https://github.com/bashbox/bashbox) - A _bash compiler_ that helps me create modular and maintainable bash projects. I also used it for creating **Tuxdroid** above in a very short time!\n- [DarkMatter](https://github.com/supremegamers/darkmatter) - Maintaining a customized Android-x86 distro.\n- [multitux-gp](https://github.com/axonasif/multitux-gp) - Attempt to parse Gitpod `workspace-images` Dockerfiles and generate them for different distros. It's still a work in progress!","metadata":{"source":"https://www.gitpod.io/blog/software-development-from-my-android-phone-at-datacenter-speeds","loc":{"lines":{"from":44,"to":46}}}}],["852",{"pageContent":"# How I got an Internship at Gitpod\n\nI had applied for the **[Professional Open Source](https://www.gitpod.io/docs/professional-open-source)** plan after running out of free hours. Surprisingly, I was found eligible for it!\n\nThat really inspired me! All my tiny little projects weren't worthless afterall. Since then, I have strongly wanted to give something back to the Gitpod Community. I started hanging out with the Gitpod community and helping others whenever possible. It made me feel happy. I consider this as a method of learning things as you get presented with new challenges everyday.\n\nAround that time Gitpod also launched the [Community Heroes program](https://www.gitpod.io/community/heroes) - an initiative that recognises the most active community members that go above and beyond to contribute to community 🍊🦸. I was recognised for my consistent efforts and was a member of the [first cohort](https://twitter.com/gitpod/status/1466452229309837313) 😎","metadata":{"source":"https://www.gitpod.io/blog/software-development-from-my-android-phone-at-datacenter-speeds","loc":{"lines":{"from":48,"to":54}}}}],["853",{"pageContent":"Later, I had applied for an internship at Gitpod. It was kind of an unexpected event for me: I got the internship, and officially, I became a Gitpodder 🍊\n\n[![Mission passed: RESPECT 😝](../../../static/images/blog/software-development-from-my-android-phone-at-datacenter-speeds/internship_tweet.png)](https://twitter.com/axonasif/status/1478418230460907529)\n\n# Unlocking the power of Gitpod\n\nCan you believe it? All the contributions and projects have been made from my phone, using the power of Gitpod! Gitpod is powerful, and I believe with Gitpod, anyone can learn to code and develop software without any hurdles.\n\nDrop by our community Discord server if you find this interesting and want to develop software on your phone. We have the [#mobile-and-tablets](https://discord.com/channels/816244985187008514/890901203624534026) channel where fellow mobile-dev enthusiasts hang out! Feel free to share your tips and tricks on software engineering in a more unconventional but accessible way.","metadata":{"source":"https://www.gitpod.io/blog/software-development-from-my-android-phone-at-datacenter-speeds","loc":{"lines":{"from":56,"to":64}}}}],["854",{"pageContent":"---\nauthor: iqqbot, mustard-mh, loujaybee\ndate: Wednesday, 13 July 2022 09:00:00 UTC\nexcerpt: For more secure and easier to use workspace access, you can now upload a public SSH key to Gitpod to access Gitpod workspaces using your own dedicated SSH key.\nimage: header.jpg\nslug: ssh-key-upload\ntags: [\"Engineering\"]\nsubtitle: For more secure and easier to use workspace access, you can now upload a public SSH key to Gitpod to access Gitpod workspaces using your own dedicated SSH key.\nteaserImage: header.jpg\ntitle: \"Introducing workspace SSH support using your own private key(s)\"\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\nSSH (secure shell) is a critical protocol for remote development.","metadata":{"source":"https://www.gitpod.io/blog/ssh-key-upload","loc":{"lines":{"from":1,"to":17}}}}],["855",{"pageContent":"<script context=\"module\">\n  export const prerender = true;\n</script>\n\nSSH (secure shell) is a critical protocol for remote development.\n\nBoth [JetBrains](https://www.jetbrains.com/help/idea/remote-development-a.html) IDEs and the [VS Code](https://code.visualstudio.com/docs/remote/remote-overview) editor use SSH as their remote development foundation. So, a big focus at Gitpod has been on improving performance and usability for connecting using SSH.\n\nWhich is why today **we're excited to announce that in Gitpod you can now upload your own public keys to access your workspace.** In addition, we've also removed the requirement for a mandatory public key to be available when access Gitpod using SSH with an Access Token.\n\nWith SSH public key upload you can now:\n\n1. Re-connect to workspaces without needing to go back to the Gitpod dashboard.\n2. Benefit from improved security when accessing your workspace with a private key.","metadata":{"source":"https://www.gitpod.io/blog/ssh-key-upload","loc":{"lines":{"from":17,"to":30}}}}],["856",{"pageContent":"But, why? Use-cases for SSH key upload\n\nIf you've been happily working away on Gitpod until now, you might be wondering why we're so excited about users being able to upload their SSH keys for Gitpod? The SSH protocol is flexible, so there are many use-cases, but to give you an idea, here are some different use-cases:\n\n1. **Static connection strings** - The access token method of [copy/paste SSH](https://www.gitpod.io/blog/copy-paste-ssh-workspace-access) generates a new workspace access token for each workspace start, meaning users had to go to the Gitpod dashboard to retrieve their SSH command on every workspace timeout or restart. Using an uploaded SSH key allows you can restart the workspace without needing to update your SSH connection details.","metadata":{"source":"https://www.gitpod.io/blog/ssh-key-upload","loc":{"lines":{"from":32,"to":36}}}}],["857",{"pageContent":"> **Note:** The workspace cluster version e.g. `.ws-eu54.gitpod.io` is currently included in the SSH connection host. On workspace update, you'll still be required to update the SSH string. This is an area of improvement that we will investigate for the future.\n\n2. **Desktop client access** - SSH is used as the protocol for many desktop tools, notably users who like to use local [command line access](https://www.gitpod.io/docs/references/ides-and-editors/command-line) for editing, connecting to headless testing tools (which connect to processes running in the workspace) and database clients. Not having to jump back and forth to the Gitpod dashboard eliminates some friction for these workflows.","metadata":{"source":"https://www.gitpod.io/blog/ssh-key-upload","loc":{"lines":{"from":38,"to":40}}}}],["858",{"pageContent":"3. **Port-forwarding** - Whilst, both the VS Code and JetBrains IDEs have [support for port-forwarding](/docs/configure/workspaces/ports), some of our users want to script / automate their port forwarding. Using regular SSH means you can more easily leverage the `-L` and `-R` flags of your SSH client for for port-forwarding without having to go back and forth to the dashboard to copy/paste the SSH string.\n\nIn addition to some of these more visual improvements, SSH key upload also will give our users more stable, performant and secure connections. Improvements to the SSH connection experience also enables Gitpod to build new workflows and features around the SSH protocol, such as:\n\n- Further reducing steps and friction when opening desktop editors like VS Code Desktop\n- Investigating a fully desktop-based workspace opening and managing experience in future\n\nSo, watch this space for future announcements!","metadata":{"source":"https://www.gitpod.io/blog/ssh-key-upload","loc":{"lines":{"from":42,"to":49}}}}],["859",{"pageContent":"Getting started with SSH key access\n\n1. Navigate to the [keys](https://gitpod.io/keys) page in your Gitpod preferences\n\n![SSH page of the Gitpod dashboard](/images/docs/ssh-key-upload-dark-theme.png)\n![SSH page of the Gitpod dashboard](/images/docs/ssh-key-upload-light-theme.png)\n\n2. Upload a public SSH key (See: [SSH](https://www.gitpod.io/docs/configure/user-settings/ssh) documentation)\n\n![Adding an SSH Key to Gitpod](/images/docs/new-ssh-key-light-theme.png)\n![Adding an SSH Key to Gitpod](/images/docs/new-ssh-key-dark-theme.png)\n\n3. Go to your workspace list and copy the SSH command\n\n![Copy SSH key from modal](/images/docs/ssh-key-modal-dark-light-theme.png)\n![Copy SSH key from modal](/images/docs/ssh-key-modal-dark-theme.png)\n\nOr, get the SSH connection from the workspace start page (when using a [Desktop IDE or editor](/docs/references/ides-and-editors))","metadata":{"source":"https://www.gitpod.io/blog/ssh-key-upload","loc":{"lines":{"from":51,"to":68}}}}],["860",{"pageContent":"Or, get the SSH connection from the workspace start page (when using a [Desktop IDE or editor](/docs/references/ides-and-editors))\n\n![SSH to a workspace via the workspace splash page](/images/docs/ssh-connect-splash-dark-theme.png)\n![SSH to a workspace via the workspace splash page](/images/docs/ssh-connect-splash-light-theme.png)\n\nFor more information, see the [configuring SSH](/docs/configure/user-settings/ssh) documentation, and using Gitpod with [command-line](/docs/references/ides-and-editors/command-line) access. And for any feedback see the related [GitHub issue](https://github.com/gitpod-io/gitpod/issues/9932), or [raise a new one](https://github.com/gitpod-io/gitpod/issues/new/choose).","metadata":{"source":"https://www.gitpod.io/blog/ssh-key-upload","loc":{"lines":{"from":68,"to":73}}}}],["861",{"pageContent":"What's next for SSH in Gitpod?\n\n1. **Easier copying of SSH credentials** - We want to make it easier for you to access your SSH credentials, either through direct IDE or editor integration, or via the [gp CLI](/docs/references/gitpod-cli).\n2. **Integration with third-parties** - We're investigating integration with other 3rd party services which hold users public keys, such as [GitHub](https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account), to avoid duplicate upload of SSH keys.\n3. **Improvement to desktop editing experiences** - For users who prefer desktop for editing, either in VS Code Desktop or JetBrains—as opposed to editing in-browser—we will continue to investigate ways to improve the experience, for example with desktop-first editing experiences.\n\nWe hope you enjoy the new, easier SSH access in Gitpod, and we'd love to hear your feedback in the [Gitpod community](https://www.gitpod.io/community).","metadata":{"source":"https://www.gitpod.io/blog/ssh-key-upload","loc":{"lines":{"from":75,"to":81}}}}],["862",{"pageContent":"We hope you enjoy the new, easier SSH access in Gitpod, and we'd love to hear your feedback in the [Gitpod community](https://www.gitpod.io/community).\n\nLastly, a very special thanks to [William](https://twitter.com/trumbitta) and [Sarah](https://twitter.com/sarah11918) for their valuable input and thoughts as [community heroes](https://www.gitpod.io/community/heroes) on this blog post!","metadata":{"source":"https://www.gitpod.io/blog/ssh-key-upload","loc":{"lines":{"from":81,"to":83}}}}],["863",{"pageContent":"---\nauthor: kylos101, csweichel, lucasvaltl, Furisto\ndate: Thursday, 5 May 2022 11:00:00 UTC\nexcerpt: Gitpod experienced a series of incidents between April 11th and 22nd, which led to workspace performance degradation in all regions, and in some cases, users were unable to start workspaces and experienced data loss.\nimage: teaser.png\nslug: sustained-performance-degradation\nsubtitle: contributing factors and how we'll do better\nteaserImage: teaser.png\ntitle: Sustained workspace performance degradation for April 11-21\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>","metadata":{"source":"https://www.gitpod.io/blog/sustained-performance-degradation","loc":{"lines":{"from":1,"to":14}}}}],["864",{"pageContent":"<script context=\"module\">\n  export const prerender = true;\n</script>\n\nGitpod experienced a series of [incidents](https://www.gitpodstatus.com/) [[1](https://www.gitpodstatus.com/incidents/jzgzzk008hqp), [2](https://www.gitpodstatus.com/incidents/12tvkhs2gyrg), [3](https://www.gitpodstatus.com/incidents/2jymw3f0q9zb), [4](https://www.gitpodstatus.com/incidents/qrr1pw0gcvdy)] between April 11th and 22nd, which led to workspace performance degradation in all regions, and in some cases, users were unable to start workspaces and experienced data loss.","metadata":{"source":"https://www.gitpod.io/blog/sustained-performance-degradation","loc":{"lines":{"from":14,"to":18}}}}],["865",{"pageContent":"Summary\n\nGitpod workspaces are meant to “feel” like your own machine, except in the cloud. Performance and reliability of workspaces are hallmark features of Gitpod. And, just like your own machine, the pain is very real when workspaces do not perform as you need or expect.\n\nOn April 9th at _7:30_ UTC (all times will be in _24 hour-format UTC_), we finished shipping a new generation of workspace clusters (`ws39`). This included a variety of features to reduce workspace startup times, as well as make more CPU accessible to users at runtime.\n\nHowever, between April 11th and 22nd, Gitpod experienced a series of incidents resulting in sustained performance degradation for workspaces. Additionally, some users were unable to start workspaces at times and experienced data loss.\n\nIn this post, we’ll cover:\n\n- What happened: a complete timeline.\n- Contributing factors: the cause of the outage.\n- How we’ll do better","metadata":{"source":"https://www.gitpod.io/blog/sustained-performance-degradation","loc":{"lines":{"from":20,"to":32}}}}],["866",{"pageContent":"What happened: a complete timeline\n\n### April 8th\n\n**_20:08 UTC_** - `ws39` is released for all regional clusters, excluding XL clusters. This included a variety of changes to significantly reduce workspace startup times, and provided a new generation of CPUs with better performance characteristics.\n\n### April 9th\n\n**_17:45 UTC_** - The release for `ws39` is extended to XL clusters too, concluding the release. All traffic at this point will use `ws39` to start workspaces.","metadata":{"source":"https://www.gitpod.io/blog/sustained-performance-degradation","loc":{"lines":{"from":34,"to":42}}}}],["867",{"pageContent":"April 11th\n\n**_13:17 UTC_** - We received reports from customers and Gitpodders at _13:17_ that workspaces were intermittently becoming unresponsive. We opened [an incident](https://www.gitpodstatus.com/incidents/jzgzzk008hqp) in Slack via our incident.io integration and began investigating.\n\n**_13:58 UTC_** - When we inspected the CPU usage for nodes and pods, it was normal, nothing was maxed out, and signs did not indicate our CPU limiting had failed or that there were noisy neighbors. At _13:58_, we realized workspaces were getting IO bound, rather than CPU bound.\n\nAt the time, we lacked IO limiting capabilities, so we decided to shift traffic for workspace starts back to our prior set of clusters (`ws38`), which did not have this performance issue. This was completed at _15:37_.","metadata":{"source":"https://www.gitpod.io/blog/sustained-performance-degradation","loc":{"lines":{"from":44,"to":50}}}}],["868",{"pageContent":"**_21:29 UTC_** - While stable on the prior generation (`ws38`), we planned short and long term action items to move forward with the release. For the short term: build a new set of clusters (`ws39a`) running faster machine types ([t2d→c2d](https://cloud.google.com/compute/docs/machine-types#recommendations_for_machine_types)) with quicker disks (local SSDs). For the long term, prepare a new VM image and environment so that we can design a IO limiting feature.\n\nIn other words, short term, we decided to alleviate the IO bandwidth issues by using faster disks. The reasoning was that we would avoid maxing out the read and write capabilities of disks, hence avoid workspaces being IO bound. We planned to run like this for 2-3 days, while researching, building, and testing an IO limiting solution.\n\nThe deploy of `ws39a` did not go smoothly.","metadata":{"source":"https://www.gitpod.io/blog/sustained-performance-degradation","loc":{"lines":{"from":52,"to":56}}}}],["869",{"pageContent":"The deploy of `ws39a` did not go smoothly.\n\n- The new `c2d` machine type was not available in all zones that we typically use, so we had to deploy to a new region. However, the region lacked sufficient quota for CPU and storage, and when we tried to increase, GCP’s quota approval process was too slow, albeit within SLA.\n- Once we were able to deploy to GCP, we were unexpectedly rate limited by Let’s Encrypt! As a result, we could not provision TLS certificates for new sub-domains, which is why some clusters had old sub-domains. Why? A customer [requested TLS certs](https://letsencrypt.org/docs/challenge-types/#http-01-challenge), exhausting the limit for gitpod.io! [We eventually resolved the rate limiting issue](https://github.com/gitpod-io/gitpod/pull/9358). Additionally, we requested a limit increase from Let’s Encrypt.","metadata":{"source":"https://www.gitpod.io/blog/sustained-performance-degradation","loc":{"lines":{"from":56,"to":59}}}}],["870",{"pageContent":"The traffic shift from `ws38` to `ws39a` was completed by _21:29_, and [the incident was closed](https://www.gitpodstatus.com/incidents/jzgzzk008hqp). Additionally, we held onto `ws38`, just in-case we have to fall-back to it, again.","metadata":{"source":"https://www.gitpod.io/blog/sustained-performance-degradation","loc":{"lines":{"from":61,"to":61}}}}],["871",{"pageContent":"April 12th\n\n**_11:53 UTC_** - Customers and Gitpodders reported that workspaces were experiencing performance issues. After troubleshooting, we [created a new incident](https://www.gitpodstatus.com/incidents/2jymw3f0q9zb), and confirmed workspaces were becoming IO bound, again.\n\nAt this point, it was apparent we needed an IO limiting solution for the new workspace cluster release. In the meantime, we had successfully [built](https://github.com/gitpod-io/gitpod/pull/9271) a [cgroups-based IO limiter](https://www.kernel.org/doc/html/latest/admin-guide/cgroup-v2.html#limits) for Gitpod, and it worked well in our dev/test environment!","metadata":{"source":"https://www.gitpod.io/blog/sustained-performance-degradation","loc":{"lines":{"from":63,"to":67}}}}],["872",{"pageContent":"Unfortunately, the new IO limiter did not behave similarly in production, and crashed our `ws-eu39xl` cluster. The XL cluster contained workspaces [for unleashed customers](https://www.gitpod.io/pricing) and Gitpodders, who both experienced data loss. The ws-daemon rollout on those clusters broke the CPU limiter which lead to the nodes becoming unresponsive. All of the cores for each node became consumed, the services on the those nodes ceased to function, and we couldn’t connect to them to recover via `ssh` or `kubectl`.\n\n**_13:49 UTC_** - At roughly _13:49_, we shifted EU XL traffic back to `ws-eu38xl`. We did not realize, however, until _14:21_ that it was not receiving traffic! We promptly opened another incident because EU XL users were [unable to start workspaces.](https://www.gitpodstatus.com/incidents/12tvkhs2gyrg)","metadata":{"source":"https://www.gitpod.io/blog/sustained-performance-degradation","loc":{"lines":{"from":69,"to":71}}}}],["873",{"pageContent":"In the meantime, a breaking API change had been deployed to our control plane, rendering the `ws38` clusters incompatible. At _15:28_, we temporarily routed traffic to the regional EU cluster, to start workspaces again. All the while, we built a new XL cluster, (`ws-eu39bxl`) to replace the one we burned down (`ws-eu39xl`).\n\nAt this time, we had too many active clusters, and had to increase quotas (approval was delayed) to continue to meet demand and scale. This additional incident and the replacement XL cluster were resolved by _17:09_.\n\n**_18:32 UTC_** - We decided to prepare yet another set of clusters to accomplish two things:\n\n1. Rollback from the `c2d` to `n2d` machine type, which is what `ws38` had been using.\n2. Share a new set of clusters with the EU team to develop a fix for the IO limiting.","metadata":{"source":"https://www.gitpod.io/blog/sustained-performance-degradation","loc":{"lines":{"from":73,"to":80}}}}],["874",{"pageContent":"April 13th\n\n**_02:00 UTC_** - While building the next set of clusters we bumped into a blocker: a [Git CVE](https://github.blog/2022-04-12-git-security-vulnerability-announced/) had been discovered and fixed, requiring a [configuration change](https://git-scm.com/docs/git-config/2.35.2#Documentation/git-config.txt-safedirectory). Without this change, our tests were failing and we could not continue work on the IO limiter. [One PR](https://github.com/gitpod-io/gitpod/pull/9279) later we could focus on the IO bandwidth issue again.\n\n**_07:30 UTC_** - The APAC team handed off the new set of clusters to the EU team at 07:30. The EU team at this point pursued a couple things:\n\n- Clean-up workspaces stuck in a stopping state, so that users could start them again.\n- Fix the CPU limiter and build the IO limiter, to help return Gitpod to reliable performance.","metadata":{"source":"https://www.gitpod.io/blog/sustained-performance-degradation","loc":{"lines":{"from":82,"to":89}}}}],["875",{"pageContent":"- Clean-up workspaces stuck in a stopping state, so that users could start them again.\n- Fix the CPU limiter and build the IO limiter, to help return Gitpod to reliable performance.\n\nWhile improving limiters, a problem was found with [workspace networking](https://github.com/gitpod-io/gitpod/pull/9294). Networking had been improved as part of the April 8th release to grant faster network speeds and more CPU to users. However, it was also causing workspaces to be sluggish in production! This was hard to identify and resolve [[1](https://github.com/gitpod-io/gitpod/pull/9270)] because of a lack in parity between our development and production environments (production has IP forwarding disabled, development has it enabled).","metadata":{"source":"https://www.gitpod.io/blog/sustained-performance-degradation","loc":{"lines":{"from":89,"to":92}}}}],["876",{"pageContent":"**_16:00 UTC_** - As a next step, at _16:00_ we decided to clean-up unneeded clusters. The clean-up for old clusters helped us avoid GCP quota limits, reduce cost, and made it easier to manage the active clusters. While monitoring operations overall, it was important for us to inspect customer workloads that were still getting IO bound to learn how we need to improve our own monitoring capabilities.","metadata":{"source":"https://www.gitpod.io/blog/sustained-performance-degradation","loc":{"lines":{"from":94,"to":94}}}}],["877",{"pageContent":"April 14th\n\n**_02:00 UTC_** - We started the release of `ws40`. It included nodes with `1TB` boot disks, which is what we had prior to the April 8th release. The intent for this new generation was the same as the previous day: restore reliable performance. In this case, we were pursuing two results:\n\n1. Get more IO bandwidth from the disks, to have a larger pool of IO for workspaces to consume\n2. Have a working IO limiter, to fairly distribute disk resources\n\n**_10:10 UTC_** - In a night-shift we had rewritten the IO limiter, deployed it and began shifting traffic to `ws40`. At _13:12_ we observed that the IO limiter was still not working as expected. However, we decided to continue with the shift of traffic to `ws40` because it was making more IO available overall to our users.","metadata":{"source":"https://www.gitpod.io/blog/sustained-performance-degradation","loc":{"lines":{"from":96,"to":103}}}}],["878",{"pageContent":"**_16:31 UTC_** - The traffic shift was at 50% at _16:31_, and 100% by _17:49_. We continued to monitor for a couple hours after the traffic shift, and observed that there were in fact still spikes, where nodes were IO saturated, meaning some workspaces would still get IO bound. Regardless, we finally closed [the incident](https://www.gitpodstatus.com/incidents/2jymw3f0q9zb), because we believed the additional IO bandwidth would resolve the issue.","metadata":{"source":"https://www.gitpod.io/blog/sustained-performance-degradation","loc":{"lines":{"from":105,"to":105}}}}],["879",{"pageContent":"April 17th\n\n**_5:18 UTC_** - We noticed increased CPU load on the workspace nodes and triggered an internal incident. In `ws40` our defence mechanism against crypto-currency miners was broken. This lead to a proliferation of crypto-mining, rendering many of the workspace nodes uninhabitable. We proceeded to manually inspect node workloads using our monitoring systems, identified workspaces which consumed excessive CPU time and removed them from the system. Our internal rate limits prevented these workloads from spreading to new nodes.\n\n**_8:47 UTC_** - Our investigation of the users who had caused this excessive CPU use revealed that the vast majority of them were auto-generated GitHub accounts, produced for the sole purpose of gaining compute from Gitpod workspaces.","metadata":{"source":"https://www.gitpod.io/blog/sustained-performance-degradation","loc":{"lines":{"from":107,"to":111}}}}],["880",{"pageContent":"April 18th\n\n**_12:36 UTC_** - We saw the same increase in CPU load on workspace clusters as the day before - and responded in kind. Through manual combing through the nodes (in combination with our miner detection system), we identified fraudulent users and blocked their use of Gitpod.\n\n**_19:38 UTC_** - Throughout the day we had been fending off illicit use of Gitpod’s resources. At the same time part of the team attempted to fix the issue with our automatic crypto-miner defenses.\n\n**_23:35 UTC_** - We have found the main issue with our dynamic CPU limiting mechanism.\n\nEssentially, our CPU limiting wasn’t working correctly, more workspaces were being given CPU time than we intended.\n\nThe solution was to rollback a change to our `ws-daemon` which was not present in our `ws38` generation of clusters, making CPU limiting stable again.","metadata":{"source":"https://www.gitpod.io/blog/sustained-performance-degradation","loc":{"lines":{"from":113,"to":123}}}}],["881",{"pageContent":"April 19th\n\n**_03:31 UTC_** - `ws34` is ready for rollout (we had to use an old name due to the rate limiting issue with Let’s Encrypt, which was preventing us from registering new TLS certificates). Those clusters carry the fix for the recent CPU limiting issues which should curtail crypto-mining. Not wanting to risk doing more harm than good we start with a conservative roll-out scheme. This deployment also blocks ACME HTTP requests to workspace ports, to prevent running into LetsEncrypt rate limits again.\n\n**_10:59 UTC_** - We have not observed adverse effects from the `ws34` changes, and continue to shift 50% of the traffic `ws34`.\n\n**_16:34 UTC_** - Throughout the day we have observed that the `ws34` change is effective and provides an improvement in service. By this time the rollout is complete and we retire the `ws40` clusters.","metadata":{"source":"https://www.gitpod.io/blog/sustained-performance-degradation","loc":{"lines":{"from":125,"to":131}}}}],["882",{"pageContent":"April 20th\n\n**_13:45 UTC_** - We create [this incident](https://www.gitpodstatus.com/incidents/qrr1pw0gcvdy), as multiple customers were still having performance issues, resulting in unreliable workspaces for workloads that were behaving normally prior to the April 8th release.\n\nAs a first step, we decide to prepare a rollback for the breaking API change, just in case we need to use `ws38`, which was the original cluster prior to the April 8th release.\n\nNext we socialized alternatives for implementing IO limiting. It was determined through many experiments that the best path forward is to use [this library to limit IO](https://github.com/intel/goresctrl/blob/main/doc/blockio.md).\n\n**_20:49 UTC_** - We get IO limits partially working! Our nodes have a few disks, and the limiting was having trouble detecting the proper devices to limit. In other words, we wanted to make sure we can fairly marshal workspace IO for `/workspace` and `/` .","metadata":{"source":"https://www.gitpod.io/blog/sustained-performance-degradation","loc":{"lines":{"from":133,"to":141}}}}],["883",{"pageContent":"**_23:48 UTC_** - After many experiments,, via `ws41xl`, we’ve produced a cluster that fairly distributes disk IO between workspaces. The initial shift of traffic was conservative at first, just 25%, so that we can check specifically with the customers who were reporting that workspaces were continuing to suffer from being IO bound.","metadata":{"source":"https://www.gitpod.io/blog/sustained-performance-degradation","loc":{"lines":{"from":143,"to":143}}}}],["884",{"pageContent":"April 21th\n\n**_10:58 UTC_** - IO behavior in the `ws41xl` cluster had shown significant improvement over their predecessors. Additionally we had confirmation from impacted customers that workspaces started on the new cluster felt normal again. With that news, we shifted traffic to 50%.\n\n**_14:00 UTC_** - Next, we started building the standard, regional clusters for `ws41`, and started traffic shift for them at 14:00. We opted to be conservative here, because the nodes in these clusters run twice the density as our XL clusters. Seeing as the IO limiting was new, we wanted to make sure that we applied load gradually, so that we could monitor and react, if needed.\n\n**_18:46 UTC_** - Confident that the IO limiting worked as expected, we set the XL clusters to 100%, and standard regional clusters to 50%. The standard regional cluster were pushed to 75% at _22:00_, and to 100% by April 22nd _02:00_.","metadata":{"source":"https://www.gitpod.io/blog/sustained-performance-degradation","loc":{"lines":{"from":145,"to":151}}}}],["885",{"pageContent":"Contributing factors: the cause of the outage\n\n### Beforehand\n\nThe April 8th changeset lacked sufficient risk assessment and was released too quickly.\n\nPrior to the release, test results should have informed us that the release was a no-go. Essentially acting as a firewall. We continue to invest in our test automation to help prevent similar incidents in the future. [[1](https://github.com/gitpod-io/gitpod/issues/8799)][[2](https://github.com/gitpod-io/gitpod/issues/7934)]\n\nExecution of the release, especially due to its size and proximity to the prior release (3.5 weeks), was too aggressive. `ws38` was replaced by `ws39` starting on April 8th and finished by April 9th. For the future, the time interval used to control how quickly we shift percentages of traffic to new clusters will vary. Larger releases will have more time in-between traffic percentage shifts to “limit the blast radius”.","metadata":{"source":"https://www.gitpod.io/blog/sustained-performance-degradation","loc":{"lines":{"from":153,"to":161}}}}],["886",{"pageContent":"Initial incident\n\nThe following changes from the April 8th release caused the first incident.\n\nWe split a 1TB disk to many smaller RAID0 disks. This was done to isolate IO for image pulls and workspaces from one another, as well as increase performance. However, we later realized, the IOps a disk can achieve decrease with disk size.\n\nAn enhancement to our CPU limiting feature included a bug which reduced its corresponding effectiveness. This allowed for too many noisy neighbors. Further, the effect a noisy neighbor could have was magnified by workspaces generally having more CPU available. This was due to a couple factors:\n\n- We upgraded to faster machine types, for the same cost, to provide better multi-core performance.\n- [We removed slirp4netns from workspace networking](https://www.gitpod.io/blog/workspace-networking#wait-whats-slirp4netns-and-why-do-we-need-this), freeing up [user-space](https://en.wikipedia.org/wiki/User_space_and_kernel_space) for customer workloads.","metadata":{"source":"https://www.gitpod.io/blog/sustained-performance-degradation","loc":{"lines":{"from":163,"to":172}}}}],["887",{"pageContent":"Improvements to workspace networking unfortunately introduced a couple tricky defects. [[1](https://github.com/gitpod-io/gitpod/pull/9294)][[2](https://github.com/gitpod-io/gitpod/pull/9356)] These caused sluggish performance for network processes, including containerized workloads.\n\nTo summarize: degraded workspace performance was caused by a myriad of factors that were interconnected and reinforced each other. disk IO was slower than anticipated, and CPU was more accessible while not governed as expected. This was further compounded by a lack of ability to limit disk IO and latency in workspace networking.","metadata":{"source":"https://www.gitpod.io/blog/sustained-performance-degradation","loc":{"lines":{"from":174,"to":176}}}}],["888",{"pageContent":"Subsequent incidents\n\nIt would have been best if we had committed to rolling back on April 11th. However, we did not, and continued to build and ship fixes which resulted in pain for customers and Gitpodders.\n\nCustomers were exposed to degraded performance for a period of time longer than necessary. Some even experienced data loss, both of which are extremely frustrating. Gitpodders accumulated stress over many days while troubleshooting the series of incidents.\n\nThe best we can do is acknowledge our mistakes, reflect on them, and plan related improvements. Let’s talk about how.","metadata":{"source":"https://www.gitpod.io/blog/sustained-performance-degradation","loc":{"lines":{"from":178,"to":184}}}}],["889",{"pageContent":"How we'll do better\n\nWe have seen a lot of things fail during this series of incidents, and take away a host of areas where we will improve. Most changes are organisational or touch on process, and roughly fall into three categories: preventing incidents, reacting quicker, and improving communication.\n\nWe continuously strive to reduce the “batch size” and increase deployment frequency. With `ws39` we failed to follow up on this intent. For future workspace cluster rollouts, we shall introduce a risk assessment stage (which we aim to automate), which’ll govern changeset size and rollout speed (rate at which we make a change available to users).","metadata":{"source":"https://www.gitpod.io/blog/sustained-performance-degradation","loc":{"lines":{"from":186,"to":190}}}}],["890",{"pageContent":"In addition, we’ve seen cross-team dependencies limiting our ability to roll back. We continue to reduce the impact teams have on each other, and establish additional review criteria to uncover backwards incompatible changes prior to merging pull requests (PRs). Such PRs will then need to be split up to avoid scenarios where we struggle to roll back a deployment.\n\nCoupled with an improved capability to roll back changes, we have updated our procedures to recommend rollback as a primary means of mitigation. Discussions are underway how such a process could be automated.","metadata":{"source":"https://www.gitpod.io/blog/sustained-performance-degradation","loc":{"lines":{"from":192,"to":194}}}}],["891",{"pageContent":"During the incident we failed to hold up one of our core values: transparency helps build a community of trust. Our external communication was not up to our own standards. Although we provided [status page updates](https://www.gitpodstatus.com/), they were not frequent enough. Further the workspace service on that page did not properly indicate that we were down (with an orange or red color). This has since [been corrected](https://www.gitpodstatus.com/), and our playbooks updated accordingly.\n\nOur internal communication was spread across too many channels. This made it difficult at times to effectively coordinate. The team fixed this by consolidating communication in a single Slack channel and Google Meet starting April 20th. This made reviewing the history easier and gave us a better overview of all things in flight. We have updated our incident procedures accordingly.","metadata":{"source":"https://www.gitpod.io/blog/sustained-performance-degradation","loc":{"lines":{"from":196,"to":198}}}}],["892",{"pageContent":"Lastly, we have redesigned our on-call process. Starting May 9th, 10% of our engineering staff will be part of the on-call rotation at any given time. We will use this engineering time to improve our observability, alerting and overall stability of the system. The mission of the folks who are on-call (other than monitoring and responding to abnormal events) is to make next week’s on-call shift less eventful than last week.","metadata":{"source":"https://www.gitpod.io/blog/sustained-performance-degradation","loc":{"lines":{"from":200,"to":200}}}}],["893",{"pageContent":"Conclusion\n\nWe’ve shared a detailed timeline for the events leading up to and during the performance degradation. Our intent is for you to understand what, was happening when, and why certain outcomes manifested. Frankly, we want to earn back your trust, and being open about what happened is paramount. It’s also in our DNA - we build in the open.\n\nThe contributing factors leading to sustained performance degradation were partially preventable. However, hindsight is 20/20 and _[failure free operations require experience with failure.](https://how.complexsystems.fail/#18)_\n\nMoving forward, we are actively experimenting with process changes and automation to help mitigate similar issues in the future. This will help us gain the feedback and leverage we need to confidently assess risk, while also allowing teams to be independent and ship continuously.\n\nWant to help build Gitpod? Checkout our [careers](/careers).","metadata":{"source":"https://www.gitpod.io/blog/sustained-performance-degradation","loc":{"lines":{"from":202,"to":210}}}}],["894",{"pageContent":"---\nauthor: svenefftinge\ndate: Tuesday, 1 Nov 2022 20:00:00 UTC\nexcerpt: After serving Gitpod as its CEO for the last three years, Sven is going back to building the product. 🤓\nimage: teaser.jpg\nslug: svens-new-role\nsubtitle: Sven Efftinge is back at building product.\nteaserImage: teaser.jpg\ntitle: Sven's new role\ntags: [\"Company building\"]\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\nI'm super stoked to share with all of you that I have stepped down from my former CEO role in order to get back to working more directly on our beloved product. I actually made this transition already two months ago, and this has turned out to be one of the best decisions I've made.","metadata":{"source":"https://www.gitpod.io/blog/svens-new-role","loc":{"lines":{"from":1,"to":17}}}}],["895",{"pageContent":"I'm still on the board of directors and also help our leadership team with strategic decisions (I'm writing these lines from our annual leadership offsite in San Francisco). But I have completely moved out of any management responsibilities and my weekly meeting schedule has slimmed down significantly. This allows me to focus entirely on making Gitpod better.😍\n\nI'm learning so much every day and have been super pumped since the first day. I can't overstate how much **I love my new role!**\n\nHere's the letter I shared internally with my colleagues when I first announced this in August 👇","metadata":{"source":"https://www.gitpod.io/blog/svens-new-role","loc":{"lines":{"from":19,"to":23}}}}],["896",{"pageContent":"> Dear Gitpodders,\n>\n> I’m super excited to share with you that I’ll be transitioning from my current Co-CEO position to an engineering individual contributor role. You might not too surprised about this step if you know me a bit better, but I would like non-the-less to give some background on why this is so exciting for both Gitpod and me.\n>","metadata":{"source":"https://www.gitpod.io/blog/svens-new-role","loc":{"lines":{"from":25,"to":28}}}}],["897",{"pageContent":">\n> I’ve spent my entire career building developer tools (e.g. [[oAW](https://de.wikipedia.org/wiki/OpenArchitectureWare), [Xtext](https://en.wikipedia.org/wiki/Xtext), [Xtend](https://en.wikipedia.org/wiki/Xtend), [Theia](https://en.wikipedia.org/wiki/Eclipse_Theia)]). Because these were often successful and inspired others to work with me, I reluctantly moved into management roles. I’ve learned a lot about leadership and management in the past years. In particular, that I naturally lead through my conviction and that I don’t enjoy “managing” people. Also I always felt like owning formal management titles harms my ability to show up as my true natural self and connect with people.\n>","metadata":{"source":"https://www.gitpod.io/blog/svens-new-role","loc":{"lines":{"from":28,"to":30}}}}],["898",{"pageContent":">\n> When you start a company, many things need to be done, which can move you away from building the actual product and having deep technical conversations. These are my superpowers and why I initiate things like Gitpod. To focus on this, I have always teamed up with amazing people that would own anything non-product building. I co-founded TypeFox with Jan and Mo for this reason and later teamed up with Johannes for Gitpod because of this. You all know and have seen how well Johannes grew into the CEO role.\n>\n> Since the Co-CEO announcement, I could do a bit more coding again, which helped remind me that this is what I love and where I can have the most significant impact. Chris and Johannes are doing fantastic work in their roles as CTO resp. CEO and with Mike joining as our new Head of Product, we have a great team lined up to lead the company and the product engineering organization into the next phase.\n>","metadata":{"source":"https://www.gitpod.io/blog/svens-new-role","loc":{"lines":{"from":30,"to":34}}}}],["899",{"pageContent":">\n> Starting in September, I’ll work as a full-time IC joining the WebApp team but will move to other product teams if needed. As Gitpod’s first _Technical Fellow_, I’ll work directly on one team. Still, I can coordinate efforts that span multiple teams, own and flesh-out architectural decisions, help the product team with discovery work, and learn from and advise other engineers. I’ll also engage with our users and customers and keep spreading the word through conference talks and meet-ups.\n>\n> I’ll also stay on the board of Gitpod and bring my IC perspective to it. I’ll no longer be part of the executive and the leadership team but maintain regular check-ins with Johannes and Mike. I will report to and work closely with Chris.\n>\n> I can’t state enough how excited I am for this transition and how much I’m looking forward to making Gitpod a bit better every day in a more direct way again with all of you and, in particular our fantastic engineering team.","metadata":{"source":"https://www.gitpod.io/blog/svens-new-role","loc":{"lines":{"from":34,"to":39}}}}],["900",{"pageContent":"---\nauthor: JohannesLandgraf, mikenikles\ndate: Wednesday, 06 Oct 2021 13:00:00 UTC\nexcerpt: Tabnine integrates with Gitpod in browser-based VS Code.\nimage: gitpod-tabnine.png\nslug: tabnine\nsubtitle:\nteaserImage: gitpod-tabnine.png\ntags: [\"Gitpod updates\"]\ntitle: Match made in automation heaven\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n**TL;DR**\n\n- [Tabnine](https://www.tabnine.com/) and Gitpod partner to remove friction from developers' workflows\n- Tabnine built a first-class VS Code extension via the [OpenVSX](https://open-vsx.org/) marketplace running on browser-based VS Code\n\nEverything we do at Gitpod centers around the premise of improving the [day-to-day developer experience](https://devxconf.org/manifesto) with automated, ephemeral developer environments. Developer experience is part of our [core company attributes](https://www.notion.so/gitpod/Values-Attributes-2ed4c2f93c84499b98e3b5389980992e) and our guiding product design principle.","metadata":{"source":"https://www.gitpod.io/blog/tabnine","loc":{"lines":{"from":1,"to":22}}}}],["901",{"pageContent":"> We are building Gitpod to reduce friction and help developers to automate and speed up their workflows so they can get into that magical state of flow that makes software engineering joyful.","metadata":{"source":"https://www.gitpod.io/blog/tabnine","loc":{"lines":{"from":24,"to":24}}}}],["902",{"pageContent":"Integrate, don't dictate 👐\n\nThat focus on putting developers’ interest first means to be transparent, open and flexible in product design and as a company. To offer choice, embrace our community & ecosystem and give every developer out there the option to work with the tools that fit their workflow. We integrate, don’t dictate - and are not alone in this.","metadata":{"source":"https://www.gitpod.io/blog/tabnine","loc":{"lines":{"from":26,"to":28}}}}],["903",{"pageContent":"Tabnine and Gitpod\n\nTabnine allows you to code faster with a pluggable code completion assistant **that is trained on your specific development style & taste**. Their compliant and privacy-first approach to training data means that their models never share your code with others. With their simple plug-in model they support all popular languages, libraries and work on all IDEs.\n\nWe joined forces to use both of our products together in harmony bringing the best of AI code completion and ephemeral developer environments together. This means that a Gitpod workspace removes the friction from setting up and maintaining brittle dev environments, while adding Tabnine to your workspace makes you faster and more efficient when writing code.\n\nIn line with our orthogonal product design Tabnine’s pluggable code completion assist can be installed as part of a polished VS Code extension that is available for everybody and pre-installed on a repository level for our Tabnine example templates.","metadata":{"source":"https://www.gitpod.io/blog/tabnine","loc":{"lines":{"from":30,"to":36}}}}],["904",{"pageContent":"Getting started\n\nTry out Gitpod & Tabnine yourself by opening one of these different templates. It is as simple as pressing the open in Gitpod button:\n\n- [JS/TypeScript](https://github.com/gitpod-io/template-typescript-node-tabnine)\n- [Python](https://github.com/gitpod-io/template-python-flask-tabnine)\n- [Go](https://github.com/gitpod-io/template-golang-cli-tabnine)\n\nIf you want to add [Tabnine](https://open-vsx.org/extension/TabNine/tabnine-vscode) to your own Gitpod project, go ahead and [install it in with a single click](/docs/references/ides-and-editors/vscode-extensions#installing-an-extension).","metadata":{"source":"https://www.gitpod.io/blog/tabnine","loc":{"lines":{"from":38,"to":46}}}}],["905",{"pageContent":"---\nauthor: jankeromnes, mikenikles, gtsiolis\ndate: Fri, 15 Oct 2021 13:00:00 UTC\nexcerpt: Teams, projects, prebuilds—it's now all at your fingertips.\nimage: teaser.jpg\nslug: teams-and-projects\nsubtitle: Introducing Teams and Projects\nteaserImage: teaser.jpg\ntags: [\"Gitpod updates\"]\ntitle: Introducing Teams & Projects\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\nOur mission here at Gitpod has always been about removing friction from the lives of developers.\n\nToday, we're excited to share with you the next big step in this journey—Teams and Projects.","metadata":{"source":"https://www.gitpod.io/blog/teams-and-projects","loc":{"lines":{"from":1,"to":19}}}}],["906",{"pageContent":"Wait, what?\n\nSo, Gitpod provides your team with consistent, standardized and fully-automated dev environments. When you use Gitpod, you can launch new workspaces in a flash, for any project and any context, and then throw them away again when the job is done.\n\n**Disposable workspaces feel like inbox-zero 🧘‍♀️**\n\nBut before you and your team can get there, there have always been a few caveats, a few obstacles standing annoyingly between you and that frictionless dev experience:\n\n- It's complicated to describe your project's setup in the [.gitpod.yml](/docs/references/gitpod-yml/) syntax\n- It's complicated to enable [Prebuilds](/docs/configure/projects/prebuilds/) for your project—you never know if they're running, or when they fail, and you can't get the build logs anywhere\n- It's complicated to create a Team in Gitpod and to invite your team members\n\n**All this changes today.**","metadata":{"source":"https://www.gitpod.io/blog/teams-and-projects","loc":{"lines":{"from":21,"to":33}}}}],["907",{"pageContent":"Introducing: Teams and Projects ✨\n\nOur goal with this latest update is to resolve the three pain points listed above, specifically by:\n\n- Providing a nicer experience for teams\n- Making it easier than ever to configure Gitpod for your project\n- Making Prebuilds a first-class feature that is easy to set up, easy to observe and easy to troubleshoot\n\n> ℹ️ Teams and Projects are currently in **Beta** and the UI is still evolving. Please [send feedback](https://github.com/gitpod-io/gitpod/issues/5095).","metadata":{"source":"https://www.gitpod.io/blog/teams-and-projects","loc":{"lines":{"from":35,"to":43}}}}],["908",{"pageContent":"Teams\n\n![Teams](../../../static/images/blog/teams-and-projects/teams.jpg)\n\nWe're making it easy to create and to manage your Teams.\n\n1. Create a new Team in a few clicks and give it a recognizable name (teams are free and you can create as many as you want)\n2. Invite your colleagues, collaborators or students with a simple (revokable) invite link\n3. Choose who is a Member or an Owner—you can even have multiple Owners\n4. Add GitHub or GitLab repositories to your Team in order to create Projects\n\n> ℹ️ For now, this new Teams feature is totally independent of Gitpod’s pre-existing [Team plans](/docs/configure/orgs). If you’re currently managing a Team Plan, or you’re a member of a Team Plan, this will remain unchanged, regardless of what new Teams you create using this new feature or how many Members you invite (the Members lists are also independent).","metadata":{"source":"https://www.gitpod.io/blog/teams-and-projects","loc":{"lines":{"from":45,"to":56}}}}],["909",{"pageContent":"Projects\n\nWe are also making it easy to automate your Projects with Gitpod.\n\n1. Add a new Project or directly visit [gitpod.io/new](https://gitpod.io/new)\n2. Select which repository to import into Gitpod\n3. Gitpod will auto-detect your Project's configuration, based on the files present in your repository\n4. View and edit your Project's configuration\n5. Finally, trigger your first Prebuild to test your new configuration\n\n![Running your first Gitpod Prebuild](../../../static/images/blog/teams-and-projects/prebuild-in-progress.jpg)\n\nVoilà. From now on, Gitpod will automatically detect changes in your repository, and start new Prebuilds to speed up your workspaces continuously. From here on out, waiting for builds really is a thing of the past!\n\nWe hope you'll enjoy having instant precompiled workspaces at your fingertips and being always ready-to-code. ⚡","metadata":{"source":"https://www.gitpod.io/blog/teams-and-projects","loc":{"lines":{"from":58,"to":72}}}}],["910",{"pageContent":"---\nauthor: pawlean, mikenikles\ndate: Thu, 05 Aug 2021 11:00:00 UTC\nexcerpt: For our first DevX Digest, we explore the evolution of developer experience in the IDE world.\nimage: evolution-of-devx.jpg\nslug: the-evolution-of-devx\nsubtitle:\nteaserImage: evolution-of-devx.jpg\ntitle: DevX Digest 01 - The evolution of DevX 🌱\ntags: [\"Developer experience\"]\ntype: digest\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\nWelcome to **DevX Digest - the place to hear all about Developer Experience**, brought to you by Pauline Narvas [(@paulienuh)](https://twitter.com/paulienuh) and Mike Nikles [(@mikenikles)](https://twitter.com/mikenikles) from Gitpod. You’re reading the first ever newsletter from us 🎉!","metadata":{"source":"https://www.gitpod.io/blog/the-evolution-of-devx","loc":{"lines":{"from":1,"to":18}}}}],["911",{"pageContent":"What is DevX?\n\nWhen we’ve asked folks what they think developer experience (DevX) is, the answers vastly differ. For some, it’s good documentation; it’s a language, it’s the best framework, it’s how quickly you can go from idea to execution with minimal headaches…\n\nNo matter how you define developer experience, it is crucial to get it right; a good (or bad) experience could be the make or break relationship developers have with a tool. On top of that, the industry is saturated with choice on which tool is best to use - it is so overwhelming. How can we pick the right one?\n\nIt’s strange how even though we recognise how important developer experience is, it’s still an area that just isn’t talked about often. Redmonk gave this a name, [“developer experience gap”](https://redmonk.com/sogrady/2020/10/06/developer-experience-gap/):","metadata":{"source":"https://www.gitpod.io/blog/the-evolution-of-devx","loc":{"lines":{"from":20,"to":26}}}}],["912",{"pageContent":"> “...developers are forced to borrow time from writing code and redirect it towards managing the issues associated with highly complex, multi-factor developer toolchains held together in places by duct tape and baling wire.”","metadata":{"source":"https://www.gitpod.io/blog/the-evolution-of-devx","loc":{"lines":{"from":28,"to":28}}}}],["913",{"pageContent":"DevX in the IDE world\n\nTo illustrate how DevX has evolved to become a more seamless, joyful, efficient experience, let’s talk about the integrated developer environment (IDE).\n\nA few years ago there were two approaches for devs, either use a fully-integrated developer environment (IDE) that would be a fat application equipped with everything a developer could possibly need. Examples of this are Eclipse, Jetbrains’ IDEs or Apple’s Xcode. On the other end of the spectrum we would find developers who find all this tooling too heavy weight and slow. Those devs would cheer for the lightness and flexibility of command lines paired with text editors, such as sublime but also vi or Emacs.\n\nHas this changed? Yes, that is the short answer to that. You can see that another IDE, namely Visual Studio Code, has since taken over.","metadata":{"source":"https://www.gitpod.io/blog/the-evolution-of-devx","loc":{"lines":{"from":30,"to":36}}}}],["914",{"pageContent":"VS Code takes over - Why is that?\n\nClassic heavy-weight IDEs, such as Eclipse, were the trailblazers that paved the way for many important DevX improvements. What made it a fantastic experience for developers was how they could vastly customise environments using their extensible plugin system. But they often went a bit too far, by adding tools and abstractions that slowed down the overall experience and ignoring powerful tools like CLIs that were contributed by the various language communities.","metadata":{"source":"https://www.gitpod.io/blog/the-evolution-of-devx","loc":{"lines":{"from":38,"to":40}}}}],["915",{"pageContent":"[Sven Efftinge](https://twitter.com/svenefftinge) and [Erich Gamma](https://twitter.com/erichgamma) recently talked about this very topic during DevX Conf ([YouTube video](https://www.youtube.com/watch?v=JiBUDS9odA8)). Erich led the original development of the Eclipse IDE. He co-authored the book **“Design Patterns: Elements of Reusable Object-Oriented Software”** and currently works at Microsoft, where he is the VS Code Dev Lead. Their conversation gave an interesting insight on the history of these IDEs, design decisions made at the time and how that has changed over time influenced by developer experience.\n\nOne thing we know that is certain is that things change.\n\nEclipse was designed to run extensions on the same process as the core. At the time, this single process architecture made sense. In the spirit of moving fast, this was the quickest way to integrate extensions to the core.","metadata":{"source":"https://www.gitpod.io/blog/the-evolution-of-devx","loc":{"lines":{"from":42,"to":46}}}}],["916",{"pageContent":"![Source: Stackoverflow Surveys 2015-2019 (professional developers)](../../../static/images/blog/the-evolution-of-devx/source.png)\n_Source: Stackoverflow Surveys 2015-2019 (professional developers)_\n\nHowever, the more Eclipse grew, including its extensions, the downsides became more apparent. This complex architecture’s side effects often led to slow start-up times, a bloated IDE and extensions depending on specific versions. The mindset of loading everything in the same process implied that every extension had to be written in Java, but what about other languages?\n\nOver time slow and bloated software can leave folks wondering if there are alternatives - something that could relieve the pain of those downsides!\n\nAnd then... VS Code enters the chat.","metadata":{"source":"https://www.gitpod.io/blog/the-evolution-of-devx","loc":{"lines":{"from":48,"to":55}}}}],["917",{"pageContent":"Over time slow and bloated software can leave folks wondering if there are alternatives - something that could relieve the pain of those downsides!\n\nAnd then... VS Code enters the chat.\n\nJSON-RPC, the Language Server Protocol (LSP), API-driven, a multi-process architecture (extensions not part of the ‘core’) leading to faster start-up times, less bloat and leaner. The pain points and limitations developers had experienced from Eclipse, VS Code was developed to reduce. It is no wonder that today, VS Code is the most used IDE.","metadata":{"source":"https://www.gitpod.io/blog/the-evolution-of-devx","loc":{"lines":{"from":55,"to":59}}}}],["918",{"pageContent":"Less is better\n\nFor those extreme power users, upon the first inspection, the VS Code extension model may seem limited in some way in comparison to the one from Eclipse, but that can be a good thing. What’s the saying again? Simplicity is better! This simplicity is deliberate, of course. Often, it is the simpler designs that extend the lifespan of software for years to come.\n\nIt’s interesting how the mindset from Eclipse to VS Code has shifted, which has massively been led by the experience of developers.","metadata":{"source":"https://www.gitpod.io/blog/the-evolution-of-devx","loc":{"lines":{"from":61,"to":65}}}}],["919",{"pageContent":"Let’s look at challenges developers face today\n\nWith this in mind, the next question is, what are some pain points developers have today? And what is next to help with those pain points?\n\nSpeaking personally, despite massive leaps to VS Code, I still think of roaring loud fans, a burning hot laptop, especially if you were like me -- hanging on to dear life to old tech. Sound familiar? My six-year-old Macbook Pro fits this description.\n\nVS Code with all my extensions ran slow despite it being relatively light compared to other IDEs; my laptop couldn’t handle it. I wasn’t able to start writing code immediately when the creative juices started flowing! Don’t even get me started on the uphill battle of getting the correct developer environment setup (_e.g. cloning, installing dependencies on an old, bloated piece of hardware_)... At that point, it just wasn’t worth it. So what is the solution?","metadata":{"source":"https://www.gitpod.io/blog/the-evolution-of-devx","loc":{"lines":{"from":67,"to":73}}}}],["920",{"pageContent":"What’s next for developer experience?\n\nTech has constantly been talking about the power of the cloud in recent years. As Chris Aniszczyk describes in his post, [\"Cloud Native predictions for 2021 and beyond.\"](https://www.aniszczyk.org/2021/01/19/cloud-native-predictions-for-2021-and-beyond/):\n\n> “The future will hold that the development lifecycle (code, build, debug) will happen mostly in the cloud versus your local Emacs or VSCode setup. You will end up getting a full dev environment setup for every pull request, pre-configured and connected to their deployment to aid your development and debugging needs.”\n\nSounds like a dream, huh? The next generation of IDEs is already here! You can do this right now with Gitpod and GitHub Codespaces beta. The constant innovation excites me the most about tech in general; it’s truly magical to see how developer experience will continue to shape our tool kit as developers. As long as we can imagine it, it is possible and isn’t that exciting?","metadata":{"source":"https://www.gitpod.io/blog/the-evolution-of-devx","loc":{"lines":{"from":75,"to":81}}}}],["921",{"pageContent":"Join us for the ride!\n\nWe hope to highlight DevX further and bring to you curated content about what truly makes for great developer experiences! Over the next few months, we’ll be sharing best practices and frameworks that continue to spark dialogue across four different areas:\n\n1. Develop\n1. Collaborate\n1. Test, build & deploy\n1. Run\n\n## DevX newsletter is community-driven\n\nAnother thing about Gitpodders is that we’re all driven by community feedback, and this newsletter is no exception! Please send us your thoughts, feedback and help us drive this conversation. We may even feature some of your takes and comments in future newsletters!\n\nCome and hang out with us over on [our Discord channel](https://gitpod.io/chat).","metadata":{"source":"https://www.gitpod.io/blog/the-evolution-of-devx","loc":{"lines":{"from":83,"to":96}}}}],["922",{"pageContent":"---\nauthor: JohannesLandgraf, csweichel\ndate: Tuesday, 26 Oct 2021 13:00:00 UTC\nexcerpt: Tailscale and Gitpod partner to enable secure and professional software development from anywhere.\nimage: header.jpg\nslug: tailscale\nsubtitle:\ntags: [\"Gitpod updates\"]\nteaserImage: header.jpg\ntitle: Tailscale x Gitpod\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n**TL;DR**\n\n- Tailscale and Gitpod partner to enable secure, professional software development from anywhere\n\n> We mentioned this already a [couple of times](/blog/cloud-based-development-for-everyone): in retrospect **the second half of 2021 will mark the tipping point for remote, cloud-based development.**","metadata":{"source":"https://www.gitpod.io/blog/tailscale","loc":{"lines":{"from":1,"to":21}}}}],["923",{"pageContent":"> We mentioned this already a [couple of times](/blog/cloud-based-development-for-everyone): in retrospect **the second half of 2021 will mark the tipping point for remote, cloud-based development.**\n\nWith [VS Code remote](https://code.visualstudio.com/docs/remote/remote-overview) and [Jetbrains' remote development support](https://youtrack.jetbrains.com/issue/IDEA-226455#focus=Comments-27-5290105.0-0), more than [80% of developers](https://insights.stackoverflow.com/survey/2021#section-most-popular-technologies-integrated-development-environment) will use an IDE with built-in functionality to connect to developer environments running in the cloud.\n\n![Stackoverflow Survey 2021](../../../static/images/blog/cloud-ide-history/stackoverflow-ide.jpg)","metadata":{"source":"https://www.gitpod.io/blog/tailscale","loc":{"lines":{"from":21,"to":25}}}}],["924",{"pageContent":"![Stackoverflow Survey 2021](../../../static/images/blog/cloud-ide-history/stackoverflow-ide.jpg)\n\nGitpod provisions and orchestrates remote developer environments enabling you to develop from anywhere ([even from an iPad traversing Australia 🏕](https://ghuntley.com/anywhere/)). Today, all of this gets even more connected & secure. We are excited to announce a [partnership with our friends at Tailscale](https://www.tailscale.com/blog/gitpod). Secure, ephemeral developer environments as part of your private network.\n\n[Tailscale](https://tailscale.com/) is built on top of the point-to-point open-source [WireGuard](https://www.wireguard.com/) protocol which powers an encrypted mesh network or 'tailnet' that directly connects your developer environment to your resources as well as your colleagues' developer environments. We have been big fans of the product for quite some time.","metadata":{"source":"https://www.gitpod.io/blog/tailscale","loc":{"lines":{"from":25,"to":29}}}}],["925",{"pageContent":"Remote development at its finest\n\nYou can now automatically and securely connect your Gitpod workspace to other development resources, whether in the cloud or on prem, such as a production database behind your company's firewall. You can also spin up several Gitpod workspaces that can talk to each other.\n\nTo connect any new dev environment, spin up a workspace in Gitpod and authenticate to Tailscale with an [auth key](https://tailscale.com/kb/1085/auth-keys/). We recommend setting an ephemeral auth key as an [environment variable](https://gitpod.io/variables) so you do not pollute your list of Tailscale nodes once you experienced the magic of [ephemeral dev environments 🪄](/docs#ephemeral). You’ll also need to add a task to start up Tailscale as well as set a network variable as part of your `.gitpod.yml` configuration file.","metadata":{"source":"https://www.gitpod.io/blog/tailscale","loc":{"lines":{"from":31,"to":35}}}}],["926",{"pageContent":"> Check out our [docs](/docs/integrations/tailscale) and/or the Tailscale repo for a [sample `.gitpod.Dockerfile` and `.gitpod.yml` to get started](https://github.com/gitpod-io/demo-tailscale-with-gitpod).\n\nWith Gitpod and Tailscale you can:\n\n- Securely access a cloud or on-prem resource, like a production database\n- Spin up a fleet of connected Gitpod workspaces\n- Share a staged resource with a colleague, as part of a review\n- Access a package registry\n- Complete a coding interview\n\nWhat Big Tech such as [Google, Facebook or Shopify](https://twitter.com/jmwind/status/1331364214582222854?s=20) has been doing for years is now accessible for the rest of the world: secure remote development in the cloud.","metadata":{"source":"https://www.gitpod.io/blog/tailscale","loc":{"lines":{"from":37,"to":47}}}}],["927",{"pageContent":"Securing your software supply chain in a distributed world\n\nIn a distributed world remote development is an important lever to counter the increasing threat of [source integrity and supply chain attacks](https://opensource.googleblog.com/2021/10/protect-your-open-source-project-from-supply-chain-attacks.html) for your project & team. Our partnership with Tailscale marks the first step of a series of articles that will raise awareness around that topic.\n\nSoftware development without sandboxes is a security risk. For approximately 4 hours last week, a widely utilized NPM package, `ua-parser-js`, was [embedded with a malicious script](https://www.rapid7.com/blog/post/2021/10/25/npm-library-ua-parser-js-hijacked-what-you-need-to-know/) intended to install a coinminer, harvest user/credential information and to compromise developer endpoints.","metadata":{"source":"https://www.gitpod.io/blog/tailscale","loc":{"lines":{"from":49,"to":53}}}}],["928",{"pageContent":"With Gitpod, no packages or dependencies are downloaded to users' devices which contain security incidents and inhibits malicious actors pivoting towards completely compromising developer endpoints. Gitpod workspaces are short-lived sandboxes and protect your local machine from arbitrary code execution coming from a dependency in your code—so that you can run only what you trust locally.\n\nTo test that we encourage you to run [`rm -rf`](https://github.com/gitpod-io/rm-rf) in a Gitpod workspace as many times as you want! If the destructive joy is diminishing in utility you can revert to [playing Doom inside Gitpod 🔫](https://twitter.com/GeoffreyHuntley/status/1451065894637998083?s=20).","metadata":{"source":"https://www.gitpod.io/blog/tailscale","loc":{"lines":{"from":55,"to":57}}}}],["929",{"pageContent":"---\nauthor: pawlean, mikenikles\ndate: Tues, 21 Feb 2022 16:00:00 UTC\nexcerpt: For our eigth edition of DevX Digest, we look back at our conversation with Shawn Wang (swyx) about the radiating circle of DevX.\nimage: teaser.jpg\nslug: the-radiating-circle-of-devx\nsubtitle:\nteaserImage: teaser.jpg\ntitle: DevX Digest 08 - The Radiating Circle of DevX\ntags: [\"Developer experience\"]\ntype: digest\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n**Welcome to DevX Digest - the place to hear all about Developer Experience**, brought to you by Pauline Narvas [(@paulienuh)](https://twitter.com/paulienuh) and Mike Nikles [(@mikenikles)](https://twitter.com/mikenikles) from Gitpod. You're reading another newsletter from us 🎉! In this edition, we talk about developer experience in cloud-based,ephemeral dev environments.","metadata":{"source":"https://www.gitpod.io/blog/the-radiating-circle-of-devx","loc":{"lines":{"from":1,"to":18}}}}],["930",{"pageContent":"Last week on DevXPod, we sat down with [Shawn Wang (aka Swyx) ](https://twitter.com/swyx)to hear his thoughts on what makes developer experience. For those that have not heard of Shawn before, he’s currently the Head of Developer Experience at [Temporal](https://twitter.com/Temporalio) and is well known for the learning in public movement and for speaking about React and Severless.\n\nAs usual, in today’s newsletter, we’ll be sharing some of our key takeaways from the podcast episode. If you’d like to listen to the full episode, head over to your favourite podcast platform and search for `DevXPod`. Don’t forget to subscribe and leave us a rating ⭐️Alternatively, if you’d prefer to read a transcript of our conversation head over to [our Buzzsprout site](https://devxpod.buzzsprout.com)!\n\n![Podcast](../../../static/images/blog/the-radiating-circle-of-devx/podcast.png)\n\n_DevX Pod is available wherever you get your podcasts!_","metadata":{"source":"https://www.gitpod.io/blog/the-radiating-circle-of-devx","loc":{"lines":{"from":20,"to":26}}}}],["931",{"pageContent":"Key Takeaways\n\nDeveloper Experience is like a **radiating circle out from the core product.** ⭕️ Shawn describes it as:\n\n> _\"You start with the core product, you make sure that API design solid. Then you radiate out into the docs. And then you go from the first party content, which is your blog posts and talks. Then community, which is going from one to many communication to many, to many communication. Having a place where your users talk to other users and help each other out. And then the final tier is enabling third-party content, which is users writing blog posts and books, workshops, courses and tutorials about you, even posting jobs with your tool or your technology in the job description on anything like this, where it's very user initiated.\"_\n\nKeeping developers engaged from the beginning with a “wow” moment is also part of this, **if your end-to-end experience helps keep developers curious and in flow,** they are as a result much more productive.","metadata":{"source":"https://www.gitpod.io/blog/the-radiating-circle-of-devx","loc":{"lines":{"from":28,"to":34}}}}],["932",{"pageContent":"It’s clear that developer experience covers more than just your core product. Experiences around it are also equally as important. The radiating circle analogy is spot on! We’ll certainly be using this from now. 🎯\n\nIn the DevX world, we often talk about the happy paths i.e. how fast something is and how much it’s improved their workflow. **However, “_Developer Exceptions_” is as equally as important.** What do we do when things go wrong? Thinking about this is just as vital for a good developer experience. This covers more of the “boring” things for example, work on observability, clear deprecation support policies, etc. 👀\n\nWhen it comes to the importance of developer experience, **accessibility for folks getting into the space was once again front and centre.** Shawn shared that he thinks it’s important especially as a career switcher into tech himself.","metadata":{"source":"https://www.gitpod.io/blog/the-radiating-circle-of-devx","loc":{"lines":{"from":36,"to":40}}}}],["933",{"pageContent":"Shawn’s pick in favourite developer experience is anything that makes **cycles faster, reduced feedback loops and with lots of customisation options.**\n\n**The future of developer experience is looking bright!** ✨ Video format was mentioned again in this episode, especially with the rise of short-form videos like TikTok. There are challenges that come with video format _(e.g. outdated very quickly)_ but it’s still a space that will only continue to grow. 📹\n\nShawn shared some of his thoughts on where he thought it is going, building on the radiating circle analogy.","metadata":{"source":"https://www.gitpod.io/blog/the-radiating-circle-of-devx","loc":{"lines":{"from":42,"to":46}}}}],["934",{"pageContent":"Shawn shared some of his thoughts on where he thought it is going, building on the radiating circle analogy.\n\n> _\"In line with the model that we've been developing, either you integrate forward or integrate backwards. In other words,typically developer experience is very tied to developer relations and a lot of first party content creation. So you integrate forward, meaning that talk a little bit more with community, you take on more community management roles or you encourage more, third party content by holding workshops and stuff like that. Or you integrate backwards, which is you get more involved with products. So I think that's an interesting way to think about this in terms of the radiating circles, but the other way to think about it as well is what's the shift within the content creation meta game, which I think about a lot as well.\"_","metadata":{"source":"https://www.gitpod.io/blog/the-radiating-circle-of-devx","loc":{"lines":{"from":46,"to":48}}}}],["935",{"pageContent":"DevX Digest is community-driven 🤝\n\nAnother thing about Gitpodders is that we’re all driven by community feedback, and this newsletter is no exception! Please send us your thoughts, feedback and help us navigate this conversation. We may even feature some of your takes and comments in future newsletters!\n\nCome and hang out with us over on [our Discord](https://www.gitpod.io/chat). 👋🏼","metadata":{"source":"https://www.gitpod.io/blog/the-radiating-circle-of-devx","loc":{"lines":{"from":50,"to":54}}}}],["936",{"pageContent":"---\nauthor: svenefftinge, JohannesLandgraf\ndate: Wednesday, 2 March 2022 13:00:00 UTC\nexcerpt: At Gitpod, we have operated unofficially with two CEOs for the past 1.5 years. We believe this is superior to having a single CEO if done right.\nslug: two-ceos-are-better-than-one\nteaserImage: teaser.jpg\nimage: teaser.jpg\ntitle: Two CEOs are Better Than One\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n<script lang=\"ts\">\n  import EMailWidget from \"$lib/components/blog/e-mail-widget.svelte\";\n</script>\n\n> At Gitpod, we have operated unofficially with two CEOs for the past 1.5 years. Today, we make our dual leadership around Sven and Johannes official.","metadata":{"source":"https://www.gitpod.io/blog/two-ceos-are-better-than-one","loc":{"lines":{"from":1,"to":19}}}}],["937",{"pageContent":"> At Gitpod, we have operated unofficially with two CEOs for the past 1.5 years. Today, we make our dual leadership around Sven and Johannes official.\n\nWhether a Co-CEO setup is good or not has been a matter of contention throughout the years. While still a little uncommon, we see more and more very successful companies such as [Atlassian](https://www.saastr.com/how-well-does-atlassians-co-ceo-model-work-out-in-reality/), [Salesforce](https://techcrunch.com/2021/11/30/bret-taylor-has-been-promoted-to-salesforce-co-ceo/), and [Netflix](https://hbr.org/2020/09/is-ceo-a-two-person-job) operating with two CEOs (we are working hard to add Gitpod to that list ツ). We believe this is superior to having a single CEO if done right. Below, we dive into the advantages of a modern dual leadership setup, discuss typical preconceptions, and share what we believe makes the structure successful for Gitpod.","metadata":{"source":"https://www.gitpod.io/blog/two-ceos-are-better-than-one","loc":{"lines":{"from":19,"to":21}}}}],["938",{"pageContent":"Benefits of running a company with two CEOs\n\nWhen it comes to the people you work with, quality matters more than quantity. Hence, one great CEO is better than two mediocre ones. Conversely, if both CEOs think too similarly and care about the same parts of the business, you don't get many of the benefits below. But if you run your company with two CEOs who operate with high trust and full transparency, are aligned in terms of [direction and culture](https://www.notion.so/gitpod/Gitpod-s-Direction-be35d064c0704fbda61c542b84e07ef6), and have complementary skill sets, your company will see a lot of benefits:\n\n- **Fewer skill gaps**. Let's face it, we all have our strengths and weaknesses. We are motivated differently and are more or less passionate about the various responsibilities of a CEO. With two complementary CEOs, you can cover much more ground effectively.","metadata":{"source":"https://www.gitpod.io/blog/two-ceos-are-better-than-one","loc":{"lines":{"from":23,"to":27}}}}],["939",{"pageContent":"- **Defer the entire C-Suite**. As a company grows, you need to build out its structures, so that information flows efficiently and effectively. Director, VP, and C-Level layers are the standard answer to scaling companies. But adding such a layer comes at a cost (longer information flow). As a single CEO, you'll feel the need to delegate to a CFO, COO, etc., much earlier. With two CEOs, you can defer adding that layer because you cover more ground (fewer skill gaps). With [Chris](https://twitter.com/csweichel) as our CTO, our executive team consists of three people that are highly aligned while adding different perspectives to the conversations.","metadata":{"source":"https://www.gitpod.io/blog/two-ceos-are-better-than-one","loc":{"lines":{"from":29,"to":29}}}}],["940",{"pageContent":"- **Grounded Decisions**. A common preconception is that decision-making would be less efficient with two CEOs. The contrary is the case if you do it right. For one, if you have two CEOs, each needs to have clear [Areas of Responsibilities (AORs)](https://gitpod.notion.site/Areas-of-Responsibilities-AORs-b28196be96b94a50a85de14112a57d01). It becomes straightforward for everyone who makes the call. There are, however, some shared AORs as well. For those critical areas, you get more grounded decisions. When we reach out with a significant change, the whole team knows we've at least run this by the two of us (of course, we consult with others in the decision process).","metadata":{"source":"https://www.gitpod.io/blog/two-ceos-are-better-than-one","loc":{"lines":{"from":31,"to":31}}}}],["941",{"pageContent":"- **Team over individual**. Company culture is essential for a modern tech startup. Not only to attract the best talent but to make sure everyone is having a great time building a superb product for your users. Our culture at Gitpod is based on openness, humbleness, empathy, and generally an egoless team spirit. A dual leadership embraces and emphasizes these values, while a single CEO model quickly leads to throne building.","metadata":{"source":"https://www.gitpod.io/blog/two-ceos-are-better-than-one","loc":{"lines":{"from":33,"to":33}}}}],["942",{"pageContent":"- **Reduced Burnout**. Running and building a company can be stressful. As a single CEO, you are not only responsible for everything that happens and goes wrong, but you also need to look after and be on top of so many things. Hiring, Fundraising, Company Building, Operations, Finance, and then you also need to make sure the product gets better and provides more value. Doing this alone isn't great for many reasons and can amplify the stress level. You should get help from coaches, friends, and advisors but nothing beats having a partner in crime with whom you can share everything.\n\n- **Minimize bus factor**. A single CEO also means a single point of failure. It doesn't need to be [the bus](https://en.wikipedia.org/wiki/Bus_factor) or the prevalent burnout, but it can be something as simple and straightforward as taking two weeks off to recharge and spend time with your family.","metadata":{"source":"https://www.gitpod.io/blog/two-ceos-are-better-than-one","loc":{"lines":{"from":35,"to":37}}}}],["943",{"pageContent":"So are there only advantages to this? Almost. One disadvantage is that there are many preconceptions about such a co-leadership setup, especially in venture capital. Let's discuss why some of them dislike running a startup with two CEOs.","metadata":{"source":"https://www.gitpod.io/blog/two-ceos-are-better-than-one","loc":{"lines":{"from":39,"to":39}}}}],["944",{"pageContent":"Typical Preconceptions about Two CEOs\n\nIf you search the web for opinions on running a company with two CEOs, you'll find a few articles. [Christoph Janz has recently written down his take](https://medium.com/point-nine-news/can-a-startup-have-two-ceos-22eadd040d5e) where he lists three reasons why a single CEO is better. Sorry, Christoph, your article was just the most recent one 🙃\n\n- **Faster Decision Making**. \"If you need two people to make a decision, …\"\n  That would be very inefficient indeed. But you don't need two people. With two CEOs, you need trust so either one can make many of the calls themselves without mutual approval. This works great as long as you align in vision and direction. If there is not complete trust between CEOs, this will not work. Actually, [the same is true for every high-performing team](https://www.amazon.com/Five-Dysfunctions-Team-Leadership-Fable/dp/0787960756).","metadata":{"source":"https://www.gitpod.io/blog/two-ceos-are-better-than-one","loc":{"lines":{"from":41,"to":46}}}}],["945",{"pageContent":"- **Clear Responsibilities**. \"Another side effect of having two CEOs is that it's less clear who does what.\"\n  That is not a side-effect of having two CEOs, but unclarity arises when you are not explicit about clarifying AORs. You need to clarify responsibilities with clear decision-making guidelines - again, this must exist between CEOs and the entire organization.\n\n- **A Co-CEO setup makes it harder to attract top VPs**. \"They might wonder if you let your ego stand in the way of doing what's best for the company and if you're able to make tough decisions.\"\n  As we hope has been clarified by now, we do not run Gitpod with two CEOs because both CEOs have too big an ego and couldn't sort it out. Quite the contrary: Sven used to be the single CEO and decided that there is a better setup for Gitpod, so he asked Johannes to help. [Ego is the enemy.](https://www.amazon.com/Ego-Enemy-Ryan-Holiday-ebook/dp/B015NTIXWE)","metadata":{"source":"https://www.gitpod.io/blog/two-ceos-are-better-than-one","loc":{"lines":{"from":48,"to":52}}}}],["946",{"pageContent":"Christoph is looking at this topic from a certain angle: many co-founders avoid having difficult conversations to clarify who is leading the company. In those setups, dual leadership is not a conscious decision but rather a legacy arrangement due to large egos. If you don't talk candidly about why two CEOs are suitable for your company at the current state, you are also likely to not set it up for success in the first place. In the end, your job in any venture-backed company is to maximize long-term shareholder value and not to work on your hubris.","metadata":{"source":"https://www.gitpod.io/blog/two-ceos-are-better-than-one","loc":{"lines":{"from":54,"to":54}}}}],["947",{"pageContent":"When you do it, do it right.\n\nAt Gitpod, we naturally grew into the co-leadership setup over time and have successfully practiced it for some time. There are a couple of reasons why this worked so well for us:\n\n- **Complementary Skill Set** - Sven built development tools, programming languages and grew open source communities for the last 15 years. His passion, strength, and energy source are around building Gitpod, the product. Johannes deeply understands the developer tooling market and worked in venture capital before Gitpod. He excels at building Gitpod, the company, and runs everything from go-to-market, fundraising, operations, to finance.","metadata":{"source":"https://www.gitpod.io/blog/two-ceos-are-better-than-one","loc":{"lines":{"from":56,"to":60}}}}],["948",{"pageContent":"- **High Trust** - over the last 1.5y we became friends and partners. Without complete trust and psychological safety, co-leadership does not work, and you can not leverage the respective strengths of each person. We always help each other out, can speak up, and trust in the other person's decision-making. If there are problems, we confront those issues quickly, get relevant input, and find practical solutions.\n\n- **Full transparency** - the human mind is excellent at fooling itself by painting an unwanted reality in comfortable ways. We openly share everything and constantly give positive and constructive feedback to stay true to reality. No information is held back.\n\n- **Clear AORs** - when several people share responsibility for an action or process, often that action doesn't get done well or at all. We prevent this from happening with Areas of Responsibility - a routing layer that ensures nothing falls through the cracks.","metadata":{"source":"https://www.gitpod.io/blog/two-ceos-are-better-than-one","loc":{"lines":{"from":62,"to":66}}}}],["949",{"pageContent":"- **Clear Goal Setting** - We follow a quarterly goal-setting process that creates alignment, focus, accountability, and aspiration to set direction and drive our business forward — both between executives and the whole organization.\n\nLeadership decisions are distinctive and specific to the company you are building. That said, we believe many of the reasons to embrace a dual leadership model apply to other companies, too.","metadata":{"source":"https://www.gitpod.io/blog/two-ceos-are-better-than-one","loc":{"lines":{"from":68,"to":70}}}}],["950",{"pageContent":"Read our 7-part blog series about the Gitpod Company Operating System\n\nThis article was the first in a series in which we share how we are building the Gitpod company operating system. We will walk through the tactical resources we are putting in place to create a fully distributed company. The title of the next article in this series is **Set Direction (Purpose, Product Vision, Brand)**. If you want to stay in the loop drop your email address below and we will reach out once the next article launches.\n\n&nbsp\n\n<EMailWidget />","metadata":{"source":"https://www.gitpod.io/blog/two-ceos-are-better-than-one","loc":{"lines":{"from":72,"to":78}}}}],["951",{"pageContent":"---\nauthor: svenefftinge\ndate: Thu Dec 23 2019 11:49:24 GMT+0000 (UTC)\nexcerpt: Ho ho ho! Christmas came early! We’ve just released a bunch of exciting new features and I'm not talking about Gitpod Enterprise which was\nimage: winter.jpeg\nslug: update-december-2019\nsubtitle: A Last, Big Update in 2019\nteaserImage: winter.jpeg\ntitle: Christmas Release 🎄\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\nHo ho ho! Christmas came early!\nWe’ve just released a bunch of exciting new features and I'm not talking about Gitpod Enterprise which was announced last week or the [GitLab support](/blog/gitlab-support) we've shipped the week before.","metadata":{"source":"https://www.gitpod.io/blog/update-december-2019","loc":{"lines":{"from":1,"to":17}}}}],["952",{"pageContent":"- <span aria-hidden=\"true\">🔓</span>[Try with Your Private Repositories For Free](#private-project-trial)\n- <span aria-hidden=\"true\">🛠</span>[Get Your Projects Setup with an Assistant](#setup-assistant)\n- <span aria-hidden=\"true\">🤗</span>[New, Cheaper Plans with More Features](#new-plans)\n- <span aria-hidden=\"true\">🌓</span>[Light and Dark Theme](#light-theme)\n- <span aria-hidden=\"true\">♻</span>[Automatic Garbage Collection](#garbage-collection)\n- <span aria-hidden=\"true\">💬</span>[New Community Forum](#new-community-home)","metadata":{"source":"https://www.gitpod.io/blog/update-december-2019","loc":{"lines":{"from":19,"to":24}}}}],["953",{"pageContent":"🔓 Private Project Trial\n\nUsers can now try Gitpod on their private GitHub and GitLab projects for one month for free without providing payment information or automatic subscription start afterward.\n\nTo get started, simply prefix your private repository’s GitHub or GitLab URL with **gitpod.io/#** and go through the OAuth flow. To fully get the hang of Gitpod, you need to configure your project accordingly. You can either [schedule a call](https://calendly.com/gitpod/onboarding) with an engineer, study the [documentation](/docs/configure), or use the new and shiny setup assistant.","metadata":{"source":"https://www.gitpod.io/blog/update-december-2019","loc":{"lines":{"from":26,"to":30}}}}],["954",{"pageContent":"🛠 Setup Assistant\n\nAlthough setting up a project for Gitpod is usually a one-off effort, it can be a little involving depending on the complexity of the project's structure. With the arrival of a new setup assistant configuring Gitpod has become a whole lot easier now.\n\nThe assistant informs you through a small notification when your project lacks a `.gitpod.yml` and guides you through a 5 step process to create, test and propose a proper Gitpod configuration.\n\nYou can of course try it out on an arbitrary open-source project, too. We want the assistant to become really smart over time and understand all kinds of languages and build tools. So please share ideas and other kinds of feedback.\n\n`youtube: IRzCR0r7DSE`","metadata":{"source":"https://www.gitpod.io/blog/update-december-2019","loc":{"lines":{"from":32,"to":40}}}}],["955",{"pageContent":"🤗 New Plans\n\nWe have reworked the plans and added a bunch of features to them as well.","metadata":{"source":"https://www.gitpod.io/blog/update-december-2019","loc":{"lines":{"from":42,"to":44}}}}],["956",{"pageContent":"Free for Open Source ❤️\n\nSo far Gitpod has been free to use on public repositories for up to 100hours/month. We analyzed how people have been using Gitpod and found out that while a lot of people use it regularly for open-source work and reach the 100 hours limit, there are others using the free plan to run their expensive processes and builds (miners and the like are automatically killed, btw, and are violating our terms) which is not what we had in mind when offering a generous open-source plan.\n\nTo protect us from such miss-use and at the same time better support open-source work, we made the following two changes:\n\n1. Add a **free, unlimited hours for professional open-source developers**.\n2. Reduce the free plan to 50h/month, which is still plenty for part-time contributors and trying Gitpod.\n\nPlease [apply](/contact/support) for the unlimited open-source plan, once you ran against the 50 hours limit. We'll check your track record and get you going within one business day.","metadata":{"source":"https://www.gitpod.io/blog/update-december-2019","loc":{"lines":{"from":46,"to":55}}}}],["957",{"pageContent":"Personal Plan\n\nThe Personal Plan got a change in that it **can now be used commercially** as well. This hasn’t changed the price of €8 / $9.\n\n### Professional Plan 🆕\n\nWe added a plan in the middle that offers **unlimited usage hours for €23 / $25**.\n\n### Unlimited Plan\n\nThe Unlimited plan got a couple of cool upgrades.\n\nMost importantly, **Unlimited users enjoy a 60min timeout with an additional 3 hours booster**. For regular users the timeout is strict 30 minutes. The additional booster can be triggered from within a workspace. Simply press the hourglass sign in the status bar (only visible if you are an unlimited users)\n\n![Timeout Booster](../../../static/images/blog/update-december-2019/timeout-boost.png)\n\nFurthermore, with Unlimited you can **start up 16 workspaces in parallel**.\n\nCheckout the [pricing page](/pricing) for an overview.","metadata":{"source":"https://www.gitpod.io/blog/update-december-2019","loc":{"lines":{"from":57,"to":75}}}}],["958",{"pageContent":"🌓Light & Dark Theme\n\nGitpod comes with a dark theme by default. You can now switch to light and the styles will be applied on all your workspaces and the dashboard pages. Full support for VS Code themes is already landing in Theia, the open-source IDE we are developing for Gitpod, and will be shipped in January.\n\n`youtube: CcTI9X9na8A`","metadata":{"source":"https://www.gitpod.io/blog/update-december-2019","loc":{"lines":{"from":77,"to":81}}}}],["959",{"pageContent":"♻ Garbage Collection\n\nWith prebuilt, disposable workspaces, Gitpod encourages to start fresh workspaces for every task. Whenever I need to code, do a review or just want to try something, I simply spin up a fresh workspace, do my thing and forget about it afterward.\n\n**But what happens to all those old workspaces?**\n\nWell, in order to really be able to forget about it, we have implemented an automatic garbage collection. It automatically deletes old workspaces after an inactivity of 30 days. You can exclude workspace from being garbage collected by manually pinning them in the workspaces list on the dashboard (see belows screenshot).\n\n**Garbage collection starts on January 20th.**\n\n![Pin Workspaces](../../../static/images/blog/update-december-2019/pin-gc.jpg)\n\n<!--\n\n## 💬New Community Forum\n\nWe've moved the support forum to [community.gitpod.io](https://community.gitpod.io/), which is based on the awesome Discourse platform.\n\n[Join the Community](https://community.gitpod.io)\n\n-->","metadata":{"source":"https://www.gitpod.io/blog/update-december-2019","loc":{"lines":{"from":83,"to":103}}}}],["960",{"pageContent":"🥂Have a Great Holiday Season!\n\nThat's all for now. I hope you have a great time with your families and friends. Many thanks to everyone supporting us in our quest to simplify and streamline developer's daily live.\n\nSee you online & happy coding!","metadata":{"source":"https://www.gitpod.io/blog/update-december-2019","loc":{"lines":{"from":105,"to":109}}}}],["961",{"pageContent":"---\nauthor: svenefftinge\ndate: Tue Nov 05 2019 16:16:17 GMT+0000 (UTC)\nexcerpt: With Visual Studio Online (VSO) Microsoft is entering the space of cloud-based developer environments. So, what are the differences? Glad\nimage: gitpod-vs-code-online.png\nslug: visual-studio-online-vs-gitpod\nsubtitle: What are the differences?\ntitle: Visual Studio Online vs Gitpod\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\nWith [Visual Studio Online](https://visualstudio.microsoft.com/services/visual-studio-online/) (VSO) Microsoft is entering the space of cloud-based developer environments. So, what are the differences? Glad you asked:","metadata":{"source":"https://www.gitpod.io/blog/visual-studio-online-vs-gitpod","loc":{"lines":{"from":1,"to":15}}}}],["962",{"pageContent":"Next Generation Cloud IDE\n\nCloud IDEs are not exactly a new thing. Platforms like Cloud9 or Eclipse Che have been around for quite some time. However, these days we see the advent of a new generation of cloud IDEs, which are either based on VS Code, like VSO, or on the vendor-neutral alternative [Eclipse Theia](https://theia-ide.org), such as Gitpod.\n\nMake no mistake, the “Eclipse” in Eclipse Theia doesn’t mean it is based on the classic Eclipse IDE, but that it is governed by the [Eclipse Foundation](https://www.eclipse.org/org/) rather than controlled by a single company. The Eclipse Foundation is a not-for-profit Open-Source Foundation.\n\n> This is open-source at its best, as it means others can innovate on top of a stable platform without risking the project is making unexpected turns.","metadata":{"source":"https://www.gitpod.io/blog/visual-studio-online-vs-gitpod","loc":{"lines":{"from":17,"to":23}}}}],["963",{"pageContent":"> This is open-source at its best, as it means others can innovate on top of a stable platform without risking the project is making unexpected turns.\n\nTheia has not even seen a 1.0 release, yet, but is already adopted by many companies, such as Google, ARM, Arduino, RedHat, IBM, SAP, Ericsson and yes, Gitpod. We actually started the project together with Ericsson and are still among the most active contributors.\n\nWith regards to features neither VS Code nor Theia has a significant competitive advantage over the other as both support VS Code extensions and the UI is almost identical. Theia is more flexible when it comes to extending the core IDE, though, as you can build all kinds of modern cloud and desktop IDEs based on it. But as an end user of Gitpod this doesn't really make a difference as we are embracing the look and feel of VS Code.","metadata":{"source":"https://www.gitpod.io/blog/visual-studio-online-vs-gitpod","loc":{"lines":{"from":23,"to":27}}}}],["964",{"pageContent":"Long story short, from the user’s perspective the IDE itself is a common good and therefore not a real differentiator, so we need to dig a little deeper to discover the real differences.","metadata":{"source":"https://www.gitpod.io/blog/visual-studio-online-vs-gitpod","loc":{"lines":{"from":29,"to":29}}}}],["965",{"pageContent":"Continuous Dev Environments\n\n[Continuous Dev Environments](/blog/continuous-dev-environment-in-devops) are at the core of Gitpod.\n\n> We believe that the way to go are short-lived dev environments that are easy and fast to create from any Git branch.\n\nFor that we eliminated any ‘create environment’-wizards and dashboards standing between you and your dev environment. With Gitpod you just go to your Git project and start coding. GitHub or GitLab is your dashboard.","metadata":{"source":"https://www.gitpod.io/blog/visual-studio-online-vs-gitpod","loc":{"lines":{"from":31,"to":37}}}}],["966",{"pageContent":"In the launch post for VSO disposable dev environments are mentioned, which is an important part of our vision, but unfortunately VSO doesn’t embrace it in the actual product. After getting through the account creation of VSO, you land on a dashboard and create a dev environment through a form based configuration dialog. Due to the lack of prebuilds, creating fresh dev environments all the time is tedious, as you need to wait for the build, downloading dependencies and running tests. This dashboard-centric approach encourages people to reuse their workspaces instead of relying on a well-working, automated setup continuously.\n\nGitpod, on the other hand, builds your branches similar to a CI build _before_ you open a dev environment. This way you are really ready-to-code whenever you open a workspace. Disposable dev environments really need such a feature as you’d otherwise waste your time on [watching your build](/blog/prebuilds).","metadata":{"source":"https://www.gitpod.io/blog/visual-studio-online-vs-gitpod","loc":{"lines":{"from":39,"to":41}}}}],["967",{"pageContent":"Self Hosting\n\nGitpod can be installed on any Kubernetes cluster and deeply integrates with your existing tool chain. Whether you use GitHub, GitLab or Bitbucket a deep integration is possible, providing a frictionless dev experience. We also support custom OAuth and styling/re-branding so you could even use our technology in the context of your branded service or product.\n\nOn VSO there is something called ‘self-hosted’ but that doesn’t mean you can self host VSO itself. Instead, you can only point it to hardware running elsewhere and start dev environments there. You are still stuck in Microsoft / Azure land.","metadata":{"source":"https://www.gitpod.io/blog/visual-studio-online-vs-gitpod","loc":{"lines":{"from":43,"to":47}}}}],["968",{"pageContent":"DX\n\nA list of checkboxes doesn’t make a good product, although in terms of features Gitpod definitely is ahead of VSO, as it supports capabilities like snapshots, prebuilds, the deep integration with GitHub and GitLab or all the advanced automation possibilities the configuration allows.\n\nThat said, VSO is still in beta and they have features on their agenda that are also not yet supported on Gitpod, such as starting Windows VMs.\n\nAnyhow, the Gitpod team is not striving for an ever growing feature list. Instead,\n\n> we are focussing on a coherent developer experience (DX) that doesn’t get into your way, but lets you focus on coding.","metadata":{"source":"https://www.gitpod.io/blog/visual-studio-online-vs-gitpod","loc":{"lines":{"from":49,"to":57}}}}],["969",{"pageContent":"Microsoft Monopoly?\n\nNot really related to product functionality, but I’m honestly a little concerned about the massive control MS has gained over the developer world in the last few years. They have hired awesome talent and allow them to create crazy good developer products such as TypeScript and VS Code. Acquiring GitHub was another huge cornerstone and I wonder if the other big tech companies don’t realize this or whether they already have given up on this.","metadata":{"source":"https://www.gitpod.io/blog/visual-studio-online-vs-gitpod","loc":{"lines":{"from":59,"to":61}}}}],["970",{"pageContent":"For GitHub, GitLab seems to be the only real competitor and Azure DevOps is trying to take over the CI tools space. [VS Code has surpassed 50% market share](https://insights.stackoverflow.com/survey/2019/#development-environments-and-tools) which I believe is the highest number for an IDE/Editor in history. The stuff MS has created is amazing and the people behind them are great and friendly engineers, but for the rest of the industry is definitely not healthy to have everything under control of a single vendor as it hinders competition and with that diversity and inventions.","metadata":{"source":"https://www.gitpod.io/blog/visual-studio-online-vs-gitpod","loc":{"lines":{"from":63,"to":63}}}}],["971",{"pageContent":"Conclusion\n\nIn this post I covered the most important differences between Gitpod and Visual Studio Online. In a nutshell:\non the IDE feature level there are not many differences, **but**\n\n- regarding how dev environments are provisioned, Gitpod’s approach is clearly leading the pack.\n- Self-hosting is not really supported by VSO and\n- Microsoft is growing a little too dominant in the developer world these days.\n\nPlease let us know if you have further questions.","metadata":{"source":"https://www.gitpod.io/blog/visual-studio-online-vs-gitpod","loc":{"lines":{"from":65,"to":74}}}}],["972",{"pageContent":"---\nauthor: jeanp413, akosyakov, loujaybee\ndate: Friday, 22 July 2022 09:00:00 UTC\nexcerpt: Understand how VS Code establishes SSH connections, the different approaches, and understand common gotchas setting up VS Code Desktop and Gitpod via SSH.\nimage: header.jpg\ntags: [\"Engineering\", \"Gitpod updates\"]\nslug: vscode-desktop-ssh-updates\nsubtitle: Establishing SSH Connections, common gotchas and more.\nteaserImage: header.jpg\ntitle: \"VS Code Desktop and SSH explained\"\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\nYou might have seen we recently announced [SSH public key upload for Gitpod](https://www.gitpod.io/blog/ssh-key-upload), and in the announcement, we mentioned: \"SSH key upload also gives our users more stable, performant and secure connections\" which might have left you wondering what this statement means in practice.","metadata":{"source":"https://www.gitpod.io/blog/vscode-desktop-ssh-updates","loc":{"lines":{"from":1,"to":17}}}}],["973",{"pageContent":"A lot of the changes we made to our SSH approach applies to our [VS Code Desktop](/docs/references/ides-and-editors/vscode) users. In this article we will take a deeper look at: how SSH connections work with VS Code Desktop, the pros/cons of the different approaches, and cover some common gotchas and questions.","metadata":{"source":"https://www.gitpod.io/blog/vscode-desktop-ssh-updates","loc":{"lines":{"from":19,"to":19}}}}],["974",{"pageContent":"TL;DR; benefits of SSH improvements for VS Code Desktop\n\nIf you're short of time, here are the improvements:\n\n1. Connection has improved stability, with fewer disconnections\n2. Approach doesn't overwrite the [`remote.SSH.configFile`](https://code.visualstudio.com/blogs/2019/10/03/remote-ssh-tips-and-tricks#_ssh-configuration-file)\n3. No additional binary downloads required or background processes\n4. Fewer requests from VS Code to accept the SSH fingerprint\n5. Improved operating system support via OpenSSH\n\nHowever, if you're eager to learn more about the details about what has changed with VS Code Desktop and [SSH Gateway](/docs/configure/user-settings/ssh#ssh-gateway), read on.","metadata":{"source":"https://www.gitpod.io/blog/vscode-desktop-ssh-updates","loc":{"lines":{"from":21,"to":31}}}}],["975",{"pageContent":"The Different Approaches to SSH access in Gitpod\n\nAll our desktop clients, direct SSH access, VS Code Desktop and JetBrains clients share similar methods of connecting to a workspace via the SSH protocol.\n\nThe SSH methods with Gitpod are:\n\n1. **SSH Gateway** - By uploading your SSH public key to Gitpod **\\(recommended)**\n2. **SSH Gateway** - Using your workspace owner token (a username/password type approach)\n3. **Local Companion** - The legacy approach, using Local Companion under the hood.\n\n<!-- TODO: Add flow chart -->\n\nWe'll go through all of these approaches in more detail below.","metadata":{"source":"https://www.gitpod.io/blog/vscode-desktop-ssh-updates","loc":{"lines":{"from":33,"to":45}}}}],["976",{"pageContent":"Understanding SSH Gateway\n\nYou may notice above the mention of the [SSH Gateway](/docs/configure/user-settings/ssh#ssh-gateway) component. SSH Gateway is an intermediary service within Gitpod that proxies incoming SSH requests to the appropriate running workspaces.\n\nSSH Gateway for SaaS should be mostly transparent / invisible to the Gitpod experience. However, it is worth noting that SSH Gateway has non-functional benefits for performance and security.\n\n![SSH Gateway architecture in Gitpod](/images/ssh-gateway/ssh-gateway-dark-theme.png)\n![SSH Gateway architecture in Gitpod](/images/ssh-gateway/ssh-gateway-light-theme.png)\n_Caption: SSH Gateway architecture in Gitpod_","metadata":{"source":"https://www.gitpod.io/blog/vscode-desktop-ssh-updates","loc":{"lines":{"from":47,"to":55}}}}],["977",{"pageContent":"VS Code Desktop for connecting via SSH Gateway\n\nThe two main methods for using SSH Gateway with VS Code Desktop are:\n\n1. SSH Gateway access an uploaded public key (recommended)\n2. SSH Gateway access using the owner token\n\n> **Important:** You must first ensure that `gitpod.remote.useLocalApp` is set to `false` in your VS Code user preferences for Gitpod to connect via the two SSH Gateway methods.\n\n![VS Code Gitpod use Local App setting](/images/editors/vscode-local-app-setting-light-theme.png)\n![VS Code Gitpod use Local App setting](/images/editors/vscode-local-app-setting-dark-theme.png)\n_The VS Code Desktop Gitpod extension \"useLocalApp\" setting_","metadata":{"source":"https://www.gitpod.io/blog/vscode-desktop-ssh-updates","loc":{"lines":{"from":57,"to":68}}}}],["978",{"pageContent":"SSH Gateway access using an uploaded public key (recommended)\n\nFirst, VS Code Desktop will check if you have already added a public SSH key to Gitpod and that the associated private key is available on your device.\n\nIf you haven't set up an SSH key with Gitpod, you can go to [gitpod.io/keys](https://gitpod.io/keys) to upload a public key. Alternatively, you can continue using the owner token approach detailed below.\n\n<div align=\"center\">\n  <img alt=\"The VS Code Desktop prompt from Gitpod when opening a workspace with no SSH key found locally or uploaded to Gitpod\" src=\"/images/editors/no-registered-ssh-key-for-this-machine.png\" width=\"50%\">\n  <p><i>Caption: The VS Code Desktop prompt from Gitpod when opening a workspace with no SSH key found locally or uploaded to Gitpod.</i></p>\n  <br />\n</div>","metadata":{"source":"https://www.gitpod.io/blog/vscode-desktop-ssh-updates","loc":{"lines":{"from":70,"to":80}}}}],["979",{"pageContent":"You must have at least one public key uploaded to Gitpod, and a matching private key locally on your device to avoid this prompt. VS Code Desktop will look to find private keys in the following named files within the `.ssh` directory listed under your home directory.\n\n- `id_dsa`\n- `id_dsa`\n- `id_ecdsa`\n- `id_rsa`\n- `id_ed25519`\n- `id_xmss`\n- `id_ecdsa_sk`\n- `id_ed25519_sk`","metadata":{"source":"https://www.gitpod.io/blog/vscode-desktop-ssh-updates","loc":{"lines":{"from":82,"to":91}}}}],["980",{"pageContent":"SSH Gateway access using the owner token\n\nIf you cannot upload a public key to Gitpod (for whatever reason) selecting **Copy** will allow you to proceed to access your Gitpod workspace using the owner token approach. Selecting **Copy** will copy the necessary password to your clipboard to be pasted in the subsequent password prompt.\n\n![VS Code prompting for a password. This message is shown when the public key warning notice is dismissed on the previous page by selecting Copy](/images/editors/enter-password-for-ssh-connection-light-theme.png)\n![VS Code prompting for a password. This message is shown when the public key warning notice is dismissed on the previous page by selecting Copy](/images/editors/enter-password-for-ssh-connection-dark-theme.png)\n_Caption: VS Code prompting for a password. This message is shown when the public key warning notice is dismissed on the previous page by selecting Copy._","metadata":{"source":"https://www.gitpod.io/blog/vscode-desktop-ssh-updates","loc":{"lines":{"from":93,"to":99}}}}],["981",{"pageContent":"> **Note:** Gitpod previously required a local private SSH key to be stored in the default SSH directory, otherwise Gitpod would prompt for a \"password\". This limitation is no longer required. If not using an SSH uploaded key, you may be prompted for a password (the owner token), or asked for the passphrase associated with your SSH key.","metadata":{"source":"https://www.gitpod.io/blog/vscode-desktop-ssh-updates","loc":{"lines":{"from":101,"to":101}}}}],["982",{"pageContent":"VS Code Desktop for connecting via Local Companion (Legacy)\n\nIf VS Code Desktop cannot connect directly via the SSH Gateway methods described above, the Local Companion approach is used as a fallback to tunnel your SSH connection. Gitpod via the VS Code Desktop plugin will download and start the Local Companion process on your behalf.\n\nThis approach is not recommended because:\n\n1. It overwrites your [`remote.SSH.configFile`](https://code.visualstudio.com/blogs/2019/10/03/remote-ssh-tips-and-tricks) VS Code setting, which will break users who have configured the VS Code remote development plugins to access other locations than Gitpod.\n2. Downloads and starts Local Companion in a non-transparent way.\n3. Is less performant than the SSH Gateway approach.\n\nIf required, you manually can force VS Code Desktop to always fallback to the Local Companion by setting the property `gitpod.remote.useLocalApp` in your user preferences to `true`.","metadata":{"source":"https://www.gitpod.io/blog/vscode-desktop-ssh-updates","loc":{"lines":{"from":103,"to":113}}}}],["983",{"pageContent":"If required, you manually can force VS Code Desktop to always fallback to the Local Companion by setting the property `gitpod.remote.useLocalApp` in your user preferences to `true`.\n\n> **Deprecation Notice:** The fallback SSH connection using Local Companion for VS Code Desktop will be deprecated in a future release of Gitpod. If you cannot connect to your workspaces directly via SSH, for example, because your firewall is blocking the SSH connection, please [contact support](https://www.gitpod.io/support) with [troubleshooting logs](https://www.gitpod.io/docs/help/troubleshooting#gitpod-logs-in-vs-code-web-and-desktop).","metadata":{"source":"https://www.gitpod.io/blog/vscode-desktop-ssh-updates","loc":{"lines":{"from":113,"to":115}}}}],["984",{"pageContent":"Diagnosing / Fixing common SSH connection issues\n\nIf you experience issues with any of the above described methods of accessing your workspace using VS Code Desktop and SSH there are some common things to check when troubleshooting.","metadata":{"source":"https://www.gitpod.io/blog/vscode-desktop-ssh-updates","loc":{"lines":{"from":117,"to":119}}}}],["985",{"pageContent":"The owner token wasn't copied to my clipboard, where can I find it?\n\nIf, for some reason you are being prompted for the owner token password, but cannot copy to clipboard, you can find the password on the Gitpod [workspaces page](https://gitpod.io/workspaces) under \"connect via SSH\".\n\n![The password prompt in VS Code Desktop for the owner token](/images/editors/enter-password-for-ssh-connection-light-theme.png)\n![The password prompt in VS Code Desktop for the owner token](/images/editors/enter-password-for-ssh-connection-dark-theme.png)\n_Caption: The password prompt in VS Code Desktop for the owner token_\n\n![Accessing the owner token string manually from the Gitpod dashboard](/images/editors/connect-via-ssh-dashboard-dark-theme.png)\n![Accessing the owner token string manually from the Gitpod dashboard](/images/editors/connect-via-ssh-dashboard-light-theme.png)\n_Caption: Accessing the owner token string manually from the Gitpod dashboard_","metadata":{"source":"https://www.gitpod.io/blog/vscode-desktop-ssh-updates","loc":{"lines":{"from":121,"to":131}}}}],["986",{"pageContent":"> **Note:** The pattern of the owner token string is: `workspaceid#ownertoken@host`","metadata":{"source":"https://www.gitpod.io/blog/vscode-desktop-ssh-updates","loc":{"lines":{"from":133,"to":133}}}}],["987",{"pageContent":"How do I know whether I'm connecting via Local Companion or SSH Gateway?\n\nIf you're unsure which connection method you're using to connect (SSH Gateway or Local Companion), you can work it out from the host name shown in the bottom left of VS Code Desktop. The format of the host will indicate which connection method you are using.\n\n- **SSH Gateway** - `SSH: workspaceid.ssh.*.gitpod.io`\n- **Local Companion**: `workspaceid` (no domain)\n\n![The SSH host information shown in the bottom left of VS Code Desktop](/images/editors/show-ssh-connection-vscode-dark-theme.png)\n![The SSH host information shown in the bottom left of VS Code Desktop](/images/editors/show-ssh-connection-vscode-light-theme.png)\n_Caption: The SSH host information shown in the bottom left of VS Code Desktop_","metadata":{"source":"https://www.gitpod.io/blog/vscode-desktop-ssh-updates","loc":{"lines":{"from":135,"to":144}}}}],["988",{"pageContent":"I'm prompted for a password/passphrase but I still cannot access my workspace?\n\nThe owner token prompt and passphrase prompt in VS Code can look similar, however require different inputs. If you're seeing a failure to connect, it could be that you are using the incorrect authentication method, e.g. pasting an owner token for a passphrase, or vice versa.\n\n1. **Owner token** - If the password prompt in VS Code Desktop asks `Enter password for workspace@\\*.gitpod.io`, this prompt is for the owner token of the workspace, not the passphrase associated with your SSH key.\n\n![Password prompt from VS Code requiring the workspace owner token](/images/editors/enter-password-for-ssh-connection-dark-theme.png)\n![Password prompt from VS Code requiring the workspace owner token](/images/editors/enter-password-for-ssh-connection-light-theme.png)\n_Caption: Password prompt from VS Code requiring the workspace owner token._","metadata":{"source":"https://www.gitpod.io/blog/vscode-desktop-ssh-updates","loc":{"lines":{"from":146,"to":154}}}}],["989",{"pageContent":"![The SSH owner token shown in the Gitpod dashboard](/images/editors/connect-via-ssh-dashboard-dark-theme.png)\n![The SSH owner token shown in the Gitpod dashboard](/images/editors/connect-via-ssh-dashboard-light-theme.png)\n_Caption: The SSH owner token shown in the Gitpod dashboard_\n\n2. **SSH key Passphrase** - If your SSH key has a \"passphrase\" associated with the SSH key (it is not required for SSH keys), you'll need to enter your passphrase. If your public key has no passphrase, you should not see the passphrase prompt.\n\n![Passphrase prompt from VS Code requiring the SSH key passphrase](/images/editors/enter-passphrase-for-ssh.png)\n_Caption: Passphrase prompt from VS Code requiring the SSH key passphrase._\n\nThere is no way to recover passphrases with Gitpod. If you cannot remember your passphrase, consider creating a new SSH key and uploading that new key to Gitpod.\n\nSee [configuring SSH](/docs/configure/user-settings/ssh) for details on creating and uploading SSH keys.","metadata":{"source":"https://www.gitpod.io/blog/vscode-desktop-ssh-updates","loc":{"lines":{"from":156,"to":167}}}}],["990",{"pageContent":"What if I'm still having issues with SSH connections?\n\n1. Check that your Gitpod VS Code Desktop extension version is using the latest stable version (`0.40` or above).\n2. Attempt to directly connect via SSH using the `-v` to show verbose SSH logs. For example: `ssh -v workspacename@hostname`. You can find the `ssh` command in the workspace list on your Gitpod dashboard, see the [command-line](/docs/references/ides-and-editors/command-line) docs for more.\n3. If you're a self-hosted customer, ensure [SSH Gateway](/docs/configure/user-settings/ssh) is configured correctly.\n\nIf you are still experiencing issues using VS Code Desktop and Gitpod, please [contact support](/support) with any related [troubleshooting logs](/docs/help/troubleshooting#gitpod-logs-in-vs-code-web-and-desktop)\n\nFor more details on VS Code Destkop and SSH setup with Gitpod, see:","metadata":{"source":"https://www.gitpod.io/blog/vscode-desktop-ssh-updates","loc":{"lines":{"from":169,"to":177}}}}],["991",{"pageContent":"For more details on VS Code Destkop and SSH setup with Gitpod, see:\n\n1. [Configuring SSH](/docs/configure/user-settings/ssh) with Gitpod\n2. Working with [VS Code Desktop](https://www.gitpod.io/docs/references/ides-and-editors/vscode) and Gitpod","metadata":{"source":"https://www.gitpod.io/blog/vscode-desktop-ssh-updates","loc":{"lines":{"from":177,"to":180}}}}],["992",{"pageContent":"---\nauthor: svenefftinge\ndate: Fri Aug 2 2019 12:16:17 GMT+0000 (UTC)\nexcerpt: Today, we are excited to announce the start of our public beta phase for VS Code extensions in Gitpod, the next generation cloud IDE. So far\nimage: tools.jpg\nslug: vscode-extension-in-online-ide\nsubtitle: Join the Beta!\nteaserImage: tools.jpg\ntitle: Your Favorite VS Code Extension in an Online IDE\ntags: [\"Gitpod updates\"]\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\nToday, we are excited to announce the start of our public beta phase for VS Code extensions in Gitpod, the next generation cloud IDE.\n\nSo far Gitpod supported the mainstream languages like JavaScript, Java, Python, Ruby, Rust, C++ and Go, but many others weren't covered yet. With today's release, we have added support for installing any of the 10K+ existing extensions for VS Code. Finally, Scala, Swift and F# developers will feel at home in Gitpod, too.","metadata":{"source":"https://www.gitpod.io/blog/vscode-extension-in-online-ide","loc":{"lines":{"from":1,"to":19}}}}],["993",{"pageContent":"Part of Your Project’s Configuration\n\nGitpod automatically creates fresh, disposable dev environments on demand. Unlike traditional dev environments which you setup once and then have to maintain over time, you get a fresh one for every task. Therefore any installed extensions would normally be gone when discarding the workspace.\n\nThat’s because a Gitpod dev environment is tailored and optimized for the project at hand. I might work on multiple different projects, e.g. a Scala project as well as some Node.js projects. Why should I need to have the Scala extension in all my projects?\n\n> Traditionally you would maintain one bloated editor for all your projects or alternatively maintain multiple per project.\n\nGitpod solves this problem for you by providing a small configuration that is part of your Git history. This includes information about dependencies, start up tasks and now also lists the extensions needed for the project at that point in time (version).\n\nHere is how it works:","metadata":{"source":"https://www.gitpod.io/blog/vscode-extension-in-online-ide","loc":{"lines":{"from":21,"to":31}}}}],["994",{"pageContent":"Installing an Extension\n\nInstalling extensions is a matter of dragging and dropping a \\*.vsix file into the extension view. Gitpod will automatically install and activate the new extension, and add an entry to the .gitpod.yml file. You can now test the experience and if you are happy with it share this new experience with your team by pushing the change to your remote Git repository.\nHere’s a small screencast:\n\n`youtube: hEqmXM62cjo`","metadata":{"source":"https://www.gitpod.io/blog/vscode-extension-in-online-ide","loc":{"lines":{"from":33,"to":38}}}}],["995",{"pageContent":"Where Do I Find Extensions?\n\nMicrosoft prohibits the direct use of the [Visual Studio Marketplace](https://marketplace.visualstudio.com/vscode) for any other software but their own. Although most extensions are open-source and not even developed or maintained by MS, the access to the Marketplace is restricted.\nHowever, if you have the `.vsix` file available, you can upload the extension yourself. `.vsix` files are not only available from the Visual Studio Marketplace but can be found on GitHub as well, e.g. [prettier-vscode](https://github.com/prettier/prettier-vscode/releases).\n\nAn extension only needs to be uploaded once and is available for you and your teammates afterwards. Please make sure you comply with the licenses of those extensions.\nAdditionally, of course, you can develop and upload your own extensions. They won’t be listed anywhere publicly except in your own `.gitpod.yml` file.","metadata":{"source":"https://www.gitpod.io/blog/vscode-extension-in-online-ide","loc":{"lines":{"from":40,"to":46}}}}],["996",{"pageContent":"Your extension doesn't work as expected?\n\nCovering the full API surface of VS Code extension is a huge task and the Theia community has been working hard on that for over a year now.\n\nAs we are approaching 100% coverage of the implementation it is time to expose this feature to more users. Which is why we decided to make it available as a beta feature to the Gitpod community.\n\nSo if you want to help us hardening this exciting new feature, please try your favorite extensions and [submit issues on the Theia project](https://github.com/theia-ide/theia/issues/new) for anything that you think needs improving.\n\nHappy coding!","metadata":{"source":"https://www.gitpod.io/blog/vscode-extension-in-online-ide","loc":{"lines":{"from":48,"to":56}}}}],["997",{"pageContent":"---\nauthor: jeanp413, akosyakov, loujaybee\ndate: Thursday, 04 Nov 2021 15:00:00 UTC\nexcerpt: Thanks Microsoft for open-sourcing VS Code Server\nimage: vscodeserver.jpg\nslug: vscode-server\nsubtitle:\nteaserImage: vscodeserver.jpg\ntags: [\"Gitpod updates\"]\ntitle: Thanks Microsoft for open-sourcing VS Code Server 👐\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n**TL;DR**\n\n- After [Gitpod launched OpenVSCode Server](/blog/openvscode-server-launch) in September, Microsoft now open-sourced the server code powering VS Code remote development and GitHub Codespaces\n- Within a few days we switched Gitpod VS Code and OpenVSCode Server Insiders builds to the upstream implementation\n- Today, we release Gitpod VS Code and OpenVSCode Server with these changes\n\n<br>\n\nWhen we launched our [history of the last four years of Cloud IDEs](/blog/cloud-ide-history) on Oct 20, we spoke about the road ahead:","metadata":{"source":"https://www.gitpod.io/blog/vscode-server","loc":{"lines":{"from":1,"to":25}}}}],["998",{"pageContent":"<br>\n\nWhen we launched our [history of the last four years of Cloud IDEs](/blog/cloud-ide-history) on Oct 20, we spoke about the road ahead:\n\n> As VS Code and cloud-based, remote development continues to grow in popularity, we hope to see the server-side implementation powering GitHub Codespaces being open-sourced in the upstream repository by Microsoft.\n\nA month after [we released OpenVSCode Server](/blog/openvscode-server-launch), we are excited to see that Microsoft open-sourced their [server implementation](https://github.com/microsoft/vscode/commit/822f995357f725216cdee6e05f1f1552ccbbd882) for running VS Code in the browser—the release happened faster than we anticipated 🚀 ! First and foremost we want to say **thank you to the excellent VS Code team**. The community deserves that the most popular developer tool of the planet keeps its open nature.","metadata":{"source":"https://www.gitpod.io/blog/vscode-server","loc":{"lines":{"from":25,"to":31}}}}],["999",{"pageContent":"While [we won’t send them a cake this time 🎂](/blog/cake), we wanted to share our take on the release, our nightly sync jobs that enable us to run the latest VS Code in Gitpod and the future of OpenVSCode Server.","metadata":{"source":"https://www.gitpod.io/blog/vscode-server","loc":{"lines":{"from":33,"to":33}}}}],["1000",{"pageContent":"Why OpenVSCode Server in the first place?\n\nIn September we announced [OpenVSCode Server](https://github.com/gitpod-io/openvscode-server), an open-source project that runs upstream VS Code on a remote machine accessed through a modern web browser. The OpenVSCode Server project is officially backed by our partners from GitLab, VMware, Uber, SAP, Sourcegraph, RStudio, SUSE, Tabnine, Render and TypeFox.\n\nPublishing OpenVSCode Server was motivated by the fact that Microsoft hadn’t at the time published any source code for their own implementation of a server that was able to run Visual Studio Code, which Microsoft uses to power GitHub Codespaces and their remote extensions. Since many developers and organisations wanted to run VS Code as a full web application in their daily workflows with the same low-footprint technique used by Gitpod and Codespaces, we decided to [share our own server implementation](/blog/openvscode-server-launch) with everyone.","metadata":{"source":"https://www.gitpod.io/blog/vscode-server","loc":{"lines":{"from":35,"to":39}}}}],["1001",{"pageContent":"How We Keep Up To Date With VS Code\n\nAs you may know, [we provide Insiders builds](https://github.com/gitpod-io/openvscode-releases) for Gitpod VS Code and OpenVSCode Server. This process is possible thanks to a couple of GitHub actions we’ve set up. We noticed the VS Code Server changes immediately and started working on integrating them. By now, we have been running the latest builds in production for more than a week and today we are releasing the builds for everybody.\n\nThese [GitHub actions](https://github.com/gitpod-io/openvscode-releases) run daily to update OpenVSCode Server with the latest upstream changes, run integration and smoke tests, and make a GitHub pre-release along with publishing the updated [docker image](https://hub.docker.com/r/gitpod/openvscode-server) to Docker Hub under the Insiders tag.","metadata":{"source":"https://www.gitpod.io/blog/vscode-server","loc":{"lines":{"from":41,"to":45}}}}],["1002",{"pageContent":"This release process allows OpenVSCode Server to get the latest updates from the upstream VS Code code and make new stable releases on the same day as VS Code. We also use the same release process with our VS Code Insiders version that we use inside Gitpod, which enables Gitpod users to go into their gitpod settings and swap their [IDE configuration for the VSCode Insiders](https://gitpod.io/preferences) with the latest features and fixes from VSCode.","metadata":{"source":"https://www.gitpod.io/blog/vscode-server","loc":{"lines":{"from":47,"to":47}}}}],["1003",{"pageContent":"The Future of OpenVSCode Server\n\nUnfortunately, the changes from Microsoft don't give us a full standalone implementation for VS Code Server yet, while the server source code is now also open-sourced and you can build VS Code yourself, you cannot use the extensions marketplace as it is restricted to only be used by Microsoft products.\n\nSo OpenVSCode Server adds some much-needed, yet minimal changes on top of VS Code to:\n\n- enable the marketplace using [Open VSX](/blog/open-vsx)\n- enable HTTPS and WebSocket Secure (wss) by default\n\nTry the new 1.62 OpenVSCode Server or the Insiders version and don’t forget to [leave feedback and file any GitHub issues](https://github.com/gitpod-io/openvscode-server) if you need!","metadata":{"source":"https://www.gitpod.io/blog/vscode-server","loc":{"lines":{"from":49,"to":58}}}}],["1004",{"pageContent":"Try the new 1.62 OpenVSCode Server or the Insiders version and don’t forget to [leave feedback and file any GitHub issues](https://github.com/gitpod-io/openvscode-server) if you need!\n\nYou can also quickly explore the latest version of VS Code from within Gitpod, all you have to do is prefix a GitHub URL with `gitpod.io/#https://github.com/example-org/your-repo` (or install the [browser extension](/docs/configure/user-settings/browser-extension#browser-extension)) to get started.\n\nAnd why not, because [Gitpod is free for up to 50 hours a month](/pricing).","metadata":{"source":"https://www.gitpod.io/blog/vscode-server","loc":{"lines":{"from":58,"to":62}}}}],["1005",{"pageContent":"---\nauthor: mustard-mh, andreafalzetti, felladrin, loujaybee, akosyakov\ndate: Tuesday, 18 Oct 2022 14:44:00 UTC\nexcerpt: As of today you can now use WebStorm and RubyMine to edit code in Gitpod! Get started by updating your user preferences to WebStorm or RubyMine and starting a new Gitpod workspace!\nimage: webstorm-rubymine-announcement-gitpod.webp\nslug: webstorm-rubymine-now-in-beta\nsubtitle: As of today you can now use WebStorm and RubyMine to edit code in Gitpod! Get started by updating your user preferences to WebStorm or RubyMine and starting a new Gitpod workspace!\nteaserImage: webstorm-rubymine-announcement-gitpod.webp\ntags: [\"Gitpod updates\"]\ntitle: Introducing RubyMine and WebStorm support for Gitpod\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>","metadata":{"source":"https://www.gitpod.io/blog/webstorm-rubymine-now-in-beta","loc":{"lines":{"from":1,"to":15}}}}],["1006",{"pageContent":"<script context=\"module\">\n  export const prerender = true;\n</script>\n\nToday, we continue to expand support for JetBrains IDEs with Gitpod as part of our [official partnership](https://www.gitpod.io/blog/gitpod-jetbrains) and general 💕 love and admiration for [Jetbrains](https://www.jetbrains.com/). At Gitpod we have a [value](https://www.gitpod.io/blog/gitpod-core-values) _Integrate, don't dictate_ which means we believe in the power of _your_ choice. [WebStorm](https://www.jetbrains.com/webstorm/) and [RubyMine](https://www.jetbrains.com/ruby/) users rejoice! You may now choose to use WebStorm and RubyMine with Gitpod 🎉.\n\nHere's a screencast to see exactly how working with JetBrains IDE and Gitpod looks.\n\n`youtube: 8djaRYT2FAY`","metadata":{"source":"https://www.gitpod.io/blog/webstorm-rubymine-now-in-beta","loc":{"lines":{"from":15,"to":23}}}}],["1007",{"pageContent":"Getting Started\n\nHere's how you can get started with a JetBrains IDE in Gitpod today:","metadata":{"source":"https://www.gitpod.io/blog/webstorm-rubymine-now-in-beta","loc":{"lines":{"from":25,"to":27}}}}],["1008",{"pageContent":"1. **Install [JetBrains Gateway](https://www.jetbrains.com/help/idea/remote-development-a.html#gateway)** - With the [JetBrains Gateway and Gitpod](/docs/integrations/jetbrains-gateway) plugin you can create and manage your latest 20 Gitpod workspaces.\n2. **Install the Gitpod plugin** - Open JetBrains Gateway and you'll see the Gitpod logo on the main page. Click \"install\" to install the [Gitpod plugin](https://plugins.jetbrains.com/plugin/18438-gitpod-gateway) for JetBrains Gateway.\n3. **Update your Gitpod preferences** - Select RubyMine or WebStorm on the [Gitpod preferences page](https://gitpod.io/preferences) which will set RubyMine or WebStorm as your default IDE for future workspace starts.","metadata":{"source":"https://www.gitpod.io/blog/webstorm-rubymine-now-in-beta","loc":{"lines":{"from":29,"to":31}}}}],["1009",{"pageContent":"4. **Start (or restart) your workspace** - Either start a workspace directly from within the [JetBrains Gateway](/docs/integrations/jetbrains-gateway) via the Gitpod plugin **OR** open a new workspace directly in Gitpod where on workspace start you will be prompted to open RubyMine or WebStorm for that workspace.","metadata":{"source":"https://www.gitpod.io/blog/webstorm-rubymine-now-in-beta","loc":{"lines":{"from":32,"to":32}}}}],["1010",{"pageContent":"Learn more about WebStorm and RubyMine in Gitpod\n\n- [RubyMine](/docs/references/ides-and-editors/rubymine)\n- [WebStorm](/docs/references/ides-and-editors/webstorm)\n- [JetBrains Gateway](/docs/integrations/jetbrains-gateway)","metadata":{"source":"https://www.gitpod.io/blog/webstorm-rubymine-now-in-beta","loc":{"lines":{"from":34,"to":38}}}}],["1011",{"pageContent":"---\nauthor: pawlean, axonasif\ndate: Tue, 08 Sep 2022 18:00:00 UTC\nexcerpt: Learn about our ongoing journey of building and scaling our community at Gitpod!\nslug: what-we-learned-growing-a-community-from-500-5000\nteaserImage: teaser.png\nimage: teaser.png\ntags: [\"Company building\"]\ntitle: What we learned growing a community from 500 to 5000\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>","metadata":{"source":"https://www.gitpod.io/blog/what-we-learned-growing-a-community-from-500-5000","loc":{"lines":{"from":1,"to":14}}}}],["1012",{"pageContent":"Community is at the heart of everything we do at Gitpod 🧡\n\nOur small community team is made up of me, [Pauline](https://twitter.com/paulienuh) and [AXON](https://twitter.com/axonasif) - you may have seen us floating around answering questions and hanging out in our [community Discord server](https://www.gitpod.io/chat).\n\nOur Gitpod community has grown from 500 to 5000 in just under a year! In this blog post, we’ll share some of our behind-the-scenes learnings of scaling the community and how we’re maintaining a positive and collaborative culture that reflects [our core values.](https://www.gitpod.io/blog/gitpod-core-values)","metadata":{"source":"https://www.gitpod.io/blog/what-we-learned-growing-a-community-from-500-5000","loc":{"lines":{"from":16,"to":20}}}}],["1013",{"pageContent":"Humble beginnings 🤲\n\nBack in July 2021, our community was scattered across different platforms with no central place where Gitpod users and champions could exist. There was no consistent place to not only ask questions about our product but to also connect with other professional developers who also saw the future of remote, developer environments. 💭\n\nOther challenges we faced in the early days was that we just didn’t have a dedicated community team that ensured community queries were answered in a timely manner and that community felt seen, heard and cared for. 🧡 Before this team existed, our engineers jumped in when they could but it was unsustainable and came at the expense of preventing them from [getting into flow state](https://www.gitpod.io/blog/psychology-of-devx#the-psychology-of-developer-experience).","metadata":{"source":"https://www.gitpod.io/blog/what-we-learned-growing-a-community-from-500-5000","loc":{"lines":{"from":22,"to":26}}}}],["1014",{"pageContent":"As [the first community hire](http://pawlean.com/2021/07/02/as-of-today-im-building-communities-full-time/), it was my goal to address these challenges! In my first six months, I streamlined the community process both externally and internally.\n\nFrom an external standpoint, we created the first official “home” for community [on Discord](https://www.gitpod.io/chat). Our community could still interact with us in various ways in addition to this new home. However, instead of just opening a tab for every platform, we introduced an internal tool [(Front)](https://www.frontapp.com) that improved the visibility of the chatter.\n\nAdditionally, we created the internal “Community Captains” process 🧑‍✈️ that gave Gitpod engineers an opportunity to stay connected with our community in rotations. This is important because our community is the beating heart of Gitpod and we want to make sure everyone in the company continues to have a touchpoint with them. 💯","metadata":{"source":"https://www.gitpod.io/blog/what-we-learned-growing-a-community-from-500-5000","loc":{"lines":{"from":28,"to":32}}}}],["1015",{"pageContent":"Being trusted with the community from day one was nerve-wracking, especially as this was my first time in this type of [community/developer relations role.](https://pawlean.com/2021/07/02/as-of-today-im-building-communities-full-time/) Previously, I’d built several communities as a side “_hobby”_, but never saw it as a career path. 💡 I’m glad I’ve had the opportunity to grow into this role at Gitpod and make it my own - an opportunity that I find is quite rare _psst…_ [we’re hiring](https://gitpod.io/careers)!\n\nFurthering my professional growth in parallel to our flourishing community, we hired [AXON](https://twitter.com/axonasif) in January 2022 which was another pivotal moment for us! Expanding the community team upped our game to another level especially as our community also grew in parallel. 🔥","metadata":{"source":"https://www.gitpod.io/blog/what-we-learned-growing-a-community-from-500-5000","loc":{"lines":{"from":34,"to":36}}}}],["1016",{"pageContent":"Our top three learnings\n\nBuilding out and scaling the Gitpod community is an ongoing learning journey, but it’s a challenge that gets me up in the morning! ☕️ These are our top three learnings from the past year of building the community.\n\n### 1. Building community takes intentionality 💜\n\nWithout actively managing your community, it can be easy to let it run wild for better or for worse. 🏃🏻‍♀️ Most of the time though no moderation causes more issues! It is also much more difficult to go back and fix a bad community culture than it is building a positive one.\n\nTo join our Gitpod community, users must agree to [our Code of Conduct.](https://github.com/gitpod-io/gitpod#code-of-conduct) In addition, we have quite the moderator team that is made up of Gitpodders and Gitpod Heroes alike who are all actively shaping the community culture that reflects our core values.","metadata":{"source":"https://www.gitpod.io/blog/what-we-learned-growing-a-community-from-500-5000","loc":{"lines":{"from":38,"to":46}}}}],["1017",{"pageContent":"2. Being part of a community should be an experience ✨\n\nThere is a danger of communities being seen as “_yet another Discord server or Slack workspace_”. If our platform were to disappear one day, I’m confident our community would still be active simply because **a community is a group of connected people**, not a platform. 💜\n\nWith that said, we have been intentional about organising our community platform with our number one goal of being valuable to everyone that takes part in it.\n\nA few months ago, we started our “_Community Experience 2.0_” project which aimed to completely overhaul our Discord server. The aim was to reduce mental overload, improve overall structure that encouraged organic conversations and help our folks be successful using Gitpod as quickly as possible.\n\nJust to highlight some of these changes:","metadata":{"source":"https://www.gitpod.io/blog/what-we-learned-growing-a-community-from-500-5000","loc":{"lines":{"from":48,"to":56}}}}],["1018",{"pageContent":"Just to highlight some of these changes:\n\n- We introduced [Optimus, a bot that helps level up this community experience](https://github.com/gitpod-io/optimus). To help reduce overwhelm, our new onboarding flow allows new users to pick and choose what channels they’d like to have access to. For example, some users are solely in our community to learn from others using the self-hosted version of Gitpod in which they have access only to the relevant channels.\n\n![Onboarding experience on Discord](../../../../../static/images/blog/what-we-learned-growing-a-community-from-500-5000/Onboarding_Experience_on_Discord.png \"Onboarding experience on Discord\")","metadata":{"source":"https://www.gitpod.io/blog/what-we-learned-growing-a-community-from-500-5000","loc":{"lines":{"from":56,"to":60}}}}],["1019",{"pageContent":"![Onboarding experience on Discord](../../../../../static/images/blog/what-we-learned-growing-a-community-from-500-5000/Onboarding_Experience_on_Discord.png \"Onboarding experience on Discord\")\n\n- In our busiest channel (`#questions`), we’ve enforced the use of [Discord Threads](https://support.discord.com/hc/en-us/articles/4403205878423-Threads-FAQ) to keep context in those threads and therefore reducing mental overload.\n- Within those threads, we have a suggestion system that fetches related GitHub issues, [documentation](https://gitpod.io/docs), and previous Discord thread conversations for whenever someone asks a question in our community.\n\n![Discord bot suggestions](../../../../../static/images/blog/what-we-learned-growing-a-community-from-500-5000/Discord_bot_suggestions.png \"Discord bot suggestions\")","metadata":{"source":"https://www.gitpod.io/blog/what-we-learned-growing-a-community-from-500-5000","loc":{"lines":{"from":60,"to":65}}}}],["1020",{"pageContent":"![Discord bot suggestions](../../../../../static/images/blog/what-we-learned-growing-a-community-from-500-5000/Discord_bot_suggestions.png \"Discord bot suggestions\")\n\n- It’s important to us that the server is safe from any harm caused by bad actors. Optimus protects our community by filtering out bot accounts during the onboarding process! We have [WickBot](https://wickbot.com/) that prevents common bot spam too.","metadata":{"source":"https://www.gitpod.io/blog/what-we-learned-growing-a-community-from-500-5000","loc":{"lines":{"from":65,"to":67}}}}],["1021",{"pageContent":"3. Recognise your superfans - they are core to the community 🎯\n\nEven in the early days, Gitpod had a group of core members who loved the product, who wanted us to succeed and recognised the bright future in remote, developer environments.\n\nLast October, we launched the [Community Heroes program](https://www.gitpod.io/community/heroes) 🦸 This aimed to recognise the wonderful contributions of our superfans and gave them an opportunity to help us shape Gitpod even more by keeping them closer. Together with our Community Heroes, we want to push our mission of empowering developers to make software engineering collaborative and joyful again.\n\n[![Julien Lengrand on Twitter](../../../../../static/images/blog/what-we-learned-growing-a-community-from-500-5000/Julien_Lengrand-Lambert_on_Twitter.png \"Julien Lengrand on Twitter\")](https://twitter.com/jlengrand/status/1522865269986799616)","metadata":{"source":"https://www.gitpod.io/blog/what-we-learned-growing-a-community-from-500-5000","loc":{"lines":{"from":69,"to":75}}}}],["1022",{"pageContent":"Our Heroes play a huge role in the success of Gitpod by shaping our community culture, supporting our growing user base and being the advocates for the future of ephemeral dev environments worldwide.\n\nBottom line is I truly believe that we wouldn't be where we are without their daily Gitpod love! 🧡\n\nYou can find a list of our Heroes on Twitter [here](https://twitter.com/i/lists/1466436380771377164).\n\n`youtube: yrMNOWZkc1A`","metadata":{"source":"https://www.gitpod.io/blog/what-we-learned-growing-a-community-from-500-5000","loc":{"lines":{"from":77,"to":83}}}}],["1023",{"pageContent":"What’s next 🦩\n\nWe want to continue to empower our community to lead initiatives. Our plans are ambitious!\n\n**Think:** events, conferences and local communities that creates a large interconnected network of Gitpod members across the world. 🌎 Additionally, we want to improve our [contribution processes](https://github.com/gitpod-io/.github/blob/main/CONTRIBUTING.md) across the board allowing our community to continue to build Gitpod with us.\n\nThere is no stopping this community rocket ship! 🚀 We’re excited to continue growing and building the community with our community.\n\n**Want to join in?** Come and hang out with us over on [our Discord server](https://www.gitpod.io/chat).","metadata":{"source":"https://www.gitpod.io/blog/what-we-learned-growing-a-community-from-500-5000","loc":{"lines":{"from":85,"to":93}}}}],["1024",{"pageContent":"---\nauthor: svenefftinge\ndate: Thu Dec 20 2018 21:51:05 GMT+0000 (UTC)\nexcerpt: Learn how to streamline your code review experience. Code reviews are one of the best things you can do to keep your codebase clean. They\nimage: when-code-reviews-lgtm.jpeg\nslug: when-code-reviews-lgtm\nsubtitle: Say goodbye to shallow reviews!\nteaserImage: when-code-reviews-lgtm.jpeg\ntitle: When code reviews LGTM\ntags: [\"Engineering\"]\nurl: https://hackernoon.com/when-code-reviews-lgtm-say-goodbye-to-shallow-reviews-a4e01b84ddef\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\nLearn how to streamline your code review experience.\n\nCode reviews are one of the best things you can do to keep your codebase clean. They improve code quality, reduce code ownership and let you learn a lot from your teammates.","metadata":{"source":"https://www.gitpod.io/blog/when-code-reviews-lgtm","loc":{"lines":{"from":1,"to":20}}}}],["1025",{"pageContent":"Code reviews are one of the best things you can do to keep your codebase clean. They improve code quality, reduce code ownership and let you learn a lot from your teammates.\n\nMuch has been said about the [advantages](https://blog.codinghorror.com/code-reviews-just-do-it/) [of code reviews](https://www.quora.com/Why-is-code-review-so-important-in-the-software-industry) for individuals, teams and codebases. Research has found that projects that do proper code reviews identify <a class=\"no-nowrap\" href=\"https://web.archive.org/web/20151009203148/http://ieeexplore.ieee.org/xpl/login.jsp?reload=true&amp;tp=&amp;arnumber=4815279\">“… more than half of the defects in code reviews”</a>.\n\nAssuming you understood the importance of it, I want to discuss the tools, the process and how you can improve your code review experience using [Gitpod](/) and new app for GitHub that lets you do deep code reviews.","metadata":{"source":"https://www.gitpod.io/blog/when-code-reviews-lgtm","loc":{"lines":{"from":20,"to":24}}}}],["1026",{"pageContent":"Context Switches & Shallow Reviews\n\nCode reviews are super valuable but they add friction to our daily tasks. Without reviews you would probably write code all day, maybe have a discussion here and there. But you would would mostly working on a single task or at least one after the other.\n\nTherefore, changing our local dev environment between different branches is something we want to avoid. Especially if setup times (rebuilding, etc.) are long. So instead of doing our colleague a favor and providing a proper code review, we too often take the shortcut and just glimpse over the code online in a code review tool. Be it GitHub, GitLab, Bitbucket, or Gerrit they all just present syntax coloured diffs. These tools allow us to glimpse over the changes, but we cannot run the code, navigate around (and use the smart editing features for that) or even add code (e.g. tests).","metadata":{"source":"https://www.gitpod.io/blog/when-code-reviews-lgtm","loc":{"lines":{"from":26,"to":30}}}}],["1027",{"pageContent":"As a result, many bugs are not spotted and potentially wrong assumptions are not identified during such shallow code reviews.","metadata":{"source":"https://www.gitpod.io/blog/when-code-reviews-lgtm","loc":{"lines":{"from":32,"to":32}}}}],["1028",{"pageContent":"Deep Code Reviews\n\nInstead of glimpsing over the changes on GitHub, we should check out the branch in a real developer environment. So we can read, run, and test them.\n\nYes, it messes up our local development context and might even take a bit of time to set up. And, yes, we have to go back to the online code review tool to add our comments. It’s all a bit cumbersome so … **maybe for this little change I could just go with a quick LGTM?**\n\nI feel your pain, but you should not take that shortcut. It will fire back eventually. Instead, let’s improve our workflows, streamline the context switches and get rid of unnecessary overhead.","metadata":{"source":"https://www.gitpod.io/blog/when-code-reviews-lgtm","loc":{"lines":{"from":34,"to":40}}}}],["1029",{"pageContent":"Enter Gitpod\n\n[Gitpod](/) gives you a full developer environment with a single click for any pull request on GitHub. You don’t have to manually setup or even change anything on your local developer environment. Just click a button and you have the best of both worlds:\n\n- a full developer environment (similar to VS Code)\n\n- a great code review experience (similar to GitHub)","metadata":{"source":"https://www.gitpod.io/blog/when-code-reviews-lgtm","loc":{"lines":{"from":42,"to":48}}}}],["1030",{"pageContent":"Code Review in Gitpod\n\nWhen you start a Gitpod workspace from a pull request, it will automatically open with the list of changes on the left. You can now use either the cursor keys or the mouse to go through the changes one by one.\n\n![Gitpod Diff Editor](https://cdn-images-1.medium.com/max/2880/1*JXfHOvLeHj-RyczGleIpZg.gif)\n\nThe opened diff editors are full-fledged code editors, so you can navigate to inspect references and easily check out alternative code. You can even comment right within those editors.\n\n![Diff Editor an example review comment](https://cdn-images-1.medium.com/max/6200/1*qGnEh6LFqkiChDY9-UXk8w.png)\n\nThe build starts automatically, so you can already spot any issues coming up from there, while you are reviewing.\n\nLaunching the tests or even running and trying the application is something that is part of a good code review as well.\n\nThe last thing you do is to submit your review and close the browser tab.","metadata":{"source":"https://www.gitpod.io/blog/when-code-reviews-lgtm","loc":{"lines":{"from":50,"to":64}}}}],["1031",{"pageContent":"Launching the tests or even running and trying the application is something that is part of a good code review as well.\n\nThe last thing you do is to submit your review and close the browser tab.\n\n![Gitpod submit review tab](https://cdn-images-1.medium.com/max/6200/1*eu_d_3DJvBOhC9rMDwjb1w.png)","metadata":{"source":"https://www.gitpod.io/blog/when-code-reviews-lgtm","loc":{"lines":{"from":64,"to":68}}}}],["1032",{"pageContent":"TL;DR\n\nWhile we cannot get rid of context switches completely when doing code reviews, we can streamline and automate those switches so that they are less time consuming and distracting.\n\nGitpod integrates the review features of GitHub in an online IDE and provides an automated experience with a single click. All you need is a browser, and once you are done with the review, you just close the window and don’t need to look back.\n\nGitpod is free and you can use it now. Just go to any pull request on GitHub and prefix the URL with. `gitpod.io/#`, e.g.\n[https://gitpod.io/#https://github.com/theia-ide/theia/pull/1204](https://gitpod.io/#https://github.com/theia-ide/theia/pull/1204)","metadata":{"source":"https://www.gitpod.io/blog/when-code-reviews-lgtm","loc":{"lines":{"from":70,"to":77}}}}],["1033",{"pageContent":"---\nauthor: ghuntley\ndate: Tuesday, 24 August 2021 09:00:00 UTC\nexcerpt: Running workshops is easier and more productive with Gitpod. That’s a bold statement and by the end this tale I hope you’ll be nodding your head but until then mash this button to launch the Nix Operating System in your browser.\nimage: teaser.png\nslug: workshops-as-code\nsubtitle:\nteaserImage: teaser.png\ntags: [\"Company building\"]\ntitle: Workshops as code\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n**TL;DR**","metadata":{"source":"https://www.gitpod.io/blog/workshops-as-code","loc":{"lines":{"from":1,"to":17}}}}],["1034",{"pageContent":"<script context=\"module\">\n  export const prerender = true;\n</script>\n\n**TL;DR**\n\n- Running workshops is easier and more productive with Gitpod.\n- There is an entire class of problems that attendees and educators continue to put up with when they shouldn’t need to because these concerns can be removed through automation.\n- People attend workshops because they want to learn about what is being taught and what device they are using, or how the device configured should not matter.\n- Hosting a workshop on Gitpod is as simple as supplying a `Dockerfile` and then specifying the commands to execute in a Git repository hosted on either GitHub, GitLab or BitBucket.\n- DataStax have integrated their cloud-native database-as-a-service product offering with Gitpod.\n- Pulumi run their workshops with Gitpod, and we would love to work with you to integrate your workshop.","metadata":{"source":"https://www.gitpod.io/blog/workshops-as-code","loc":{"lines":{"from":17,"to":28}}}}],["1035",{"pageContent":"Folks in technical education, I have a hot-tip for you - **Running workshops is easier and more productive with Gitpod**. That’s a bold statement, and by the end of this tale, I hope you’ll be nodding your head but until then, mash this button to launch the Nix Operating System in your browser:\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-io/template-nixos)\n\nYup, that’s right, running an operating system in your browser is now possible in 2021. In 2019, which now seems like an eternity thanks COVID19, I was invited to deliver a workshop at [Compose](https://www.composeconference.org/2019-melbourne/speakers/#geoff-javier) on NixOS.\n\n![Credit: Javier Candeira](../../../static/images/blog/workshops-as-code/nixos-compose-workshop.jpg)\n_Photo Credit: [Javier Candeira](https://twitter.com/candeira)_","metadata":{"source":"https://www.gitpod.io/blog/workshops-as-code","loc":{"lines":{"from":30,"to":37}}}}],["1036",{"pageContent":"![Credit: Javier Candeira](../../../static/images/blog/workshops-as-code/nixos-compose-workshop.jpg)\n_Photo Credit: [Javier Candeira](https://twitter.com/candeira)_\n\nNixOS is an exciting up-and-coming in the DevOps space because it provides declarative and [reproducible](https://nix.dev/tutorials/declarative-and-reproducible-developer-environments#declarative-and-reproducible-developer-environments) environments supported by powerful [testing primitives](https://github.com/gitpod-io/template-nixos/blob/main/test.nix). One may say NixOS is “an overnight success that is 18 years in the making” as many [industry leaders are switching](https://twitter.com/mitchellh/status/1346136404682625024).\n\nAnyway, I was in complete shock when circa 50 people registered to attend the workshop. So let’s glance past the entire topic of building workshop courseware for a moment and instead focus on the logistics of running a workshop.","metadata":{"source":"https://www.gitpod.io/blog/workshops-as-code","loc":{"lines":{"from":37,"to":42}}}}],["1037",{"pageContent":"One of the biggest challenges of running a workshop is ensuring attendees **do all the prerequisite activities before turning up**. For the NixOS workshop at Compose the steps were:\n\n- Downloading upwards of 4Gb of software from the internet (ie. 200gb of data).\n- Downloading and installing Virtual Box\n- Downloading and installing the Virtual Box Extension Pack.\n- Creating a virtual machine.\n\nIt’s important to remember that the reason people attend workshops is that they want to **learn about what is being taught**. People are willing to do prerequisite activities and put up with waiting for that half of the class that didn’t do the prerequisites to pass around that USB stick but already from the get go your workshop is off to a bad start and precious time is slipping.\n\n![Credit: SpongeBob SquarePants](../../../static/images/blog/workshops-as-code/20mins-later.png)\n_Credit: [SpongeBob SquarePants](https://en.wikipedia.org/wiki/SpongeBob_SquarePants)_","metadata":{"source":"https://www.gitpod.io/blog/workshops-as-code","loc":{"lines":{"from":44,"to":54}}}}],["1038",{"pageContent":"![Credit: SpongeBob SquarePants](../../../static/images/blog/workshops-as-code/20mins-later.png)\n_Credit: [SpongeBob SquarePants](https://en.wikipedia.org/wiki/SpongeBob_SquarePants)_\n\nSuppose you were to once again peek at the [prerequisite activities](https://github.com/ghuntley/ghuntley/tree/trunk/workshops/nixos-workshop/modules/00-prerequisites) of the NixOS workshop. In that case, you’ll notice a line item - “Create a virtual machine”. At the time, the step appeared to be a simple request, but it wasn’t. People turned up with Chromebooks and laptops running macOS, Linux and _shudder_ windows devices enrolled under group policy with admin rights disabled.\n\nFortunately, with some support from the lovely folks from the [QFPL](https://qfpl.io/) who ran around and helped reconfigure peoples devices (where possible), the workshop was able to start and was successful.","metadata":{"source":"https://www.gitpod.io/blog/workshops-as-code","loc":{"lines":{"from":54,"to":59}}}}],["1039",{"pageContent":"Afterwards, feedback was collected, and one item stuck out - **what device attendees are using or how the device is configured should not matter** . People should be able to rock up to your workshop and do it on an iPad Pro or from [a forest with marginal 4G internet connectivity](https://news.ycombinator.com/item?id=26284635).\n\n![Credit: Geoffrey Huntley](../../../static/images/blog/workshops-as-code/vanlife.jpg)\n_Credit: [Geoffrey Huntley](https://ghuntley.com)_\n\nNow granted, not every workshop requires people to install or configure virtual machines, but in the CNCF space, I often see people asking attendees to create a Kubernetes cluster as a prerequisite to learning. I’ll be frank here - **there is an entire class of problems that attendees and educators continue to put up with when they shouldn’t need to because these concerns can be removed through automation**.","metadata":{"source":"https://www.gitpod.io/blog/workshops-as-code","loc":{"lines":{"from":61,"to":66}}}}],["1040",{"pageContent":"By taking lessons learned from the infrastructure-as-code movement and converting workshops to Docker images, workshops become repeatable and reproducible. By utilising products such as Gitpod to consume, build and execute your `Dockerfile` then attendees no longer need to download or configure your software. All they need is a browser.\n\nA Gitpod workspace gives you the same capabilities (yes, even root, Docker & qemu) as a Linux machine that is [already pre-built](/docs/configure/projects/prebuilds), works on any device from anywhere and that launches in seconds.\n\n<!-- ![Credit: Geoffrey Huntley](../../../static/images/blog/workshops-as-code/teaser.jpg) -->\n\n![Docker Compose Configuration](../../../static/images/blog/workshops-as-code/docker-compose.png)","metadata":{"source":"https://www.gitpod.io/blog/workshops-as-code","loc":{"lines":{"from":68,"to":74}}}}],["1041",{"pageContent":"<!-- ![Credit: Geoffrey Huntley](../../../static/images/blog/workshops-as-code/teaser.jpg) -->\n\n![Docker Compose Configuration](../../../static/images/blog/workshops-as-code/docker-compose.png)\n\nHosting a workshop on Gitpod is as simple as supplying a [Dockerfile](https://github.com/gitpod-io/template-nixos/blob/main/.gitpod.Dockerfile) and then specifying the [commands to execute](https://github.com/gitpod-io/template-nixos/blob/main/.gitpod.yml) in a Git repository that is hosted on either GitHub, GitLab or BitBucket.\n\nLaunching a workshop on Gitpod is as easy as prefixing any Git URL with `gitpod.io/#`. Thus if the workshop was hosted at `https://github.com/gitpod-io/template-nixos` then `https://gitpod.io/#https://github.com/gitpod-io/template-nixos` is the link that would be shared with attendees.\n\nAlternatively, you could embed this button into the README of your workshop materials:","metadata":{"source":"https://www.gitpod.io/blog/workshops-as-code","loc":{"lines":{"from":74,"to":82}}}}],["1042",{"pageContent":"Alternatively, you could embed this button into the README of your workshop materials:\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-io/template-nixos)\n\nHowever, if you want to take it to 11, maybe you’ll consider embedding Gitpod?\n\n> My mind is blown (🤯). Cédrick Lunven just showed me Gitpod with a full demo configured and ready to run. 2021 is a great time to be running workshops online!\n>\n> - Jonathan Ellis (co-founder and CTO of DataStax)\n\nFor the last couple of months, Gitpod has been working with DataStax who has integrated their cloud-native database-as-a-service product offering with Gitpod.\n\n![Datastax Astra DB is a cloud-native database-as-a-service built on Apache Cassandra that is designed to simplify cloud-native application development](../../../static/images/blog/workshops-as-code/datastax.png)\n\nLet’s peek under the hood how the integration works from top to bottom:","metadata":{"source":"https://www.gitpod.io/blog/workshops-as-code","loc":{"lines":{"from":82,"to":96}}}}],["1043",{"pageContent":"Let’s peek under the hood how the integration works from top to bottom:\n\n1. DataStax have created self-paced workshops which are [hosted on GitHub](https://github.com/DataStax-Academy?type=source).\n1. These workshops are listed within Astra DB (which is DataStax’s DBaaS offering)\n1. On each workshop, there is a button to launch the workshop on Gitpod.\n1. DataStax prompts the user to select which managed database the workshop should use, and non-sensitive information is passed through to Gitpod [as environment variables](/docs/configure/projects/environment-variables#provide-env-vars-via-url) via the URL:\n\n> https://gitpod.io/#ASTRA_DB_ID=6677d1aa-2a69-4739-ba5d-26fdef15d8ae,ASTRA_DB_KEYSPACE=Workshop,ASTRA_DB_REGION=us-east1,ASTRA_DB_USERNAME=/https://github.com/DataStax-Examples/todo-astra-jamstack-netlify","metadata":{"source":"https://www.gitpod.io/blog/workshops-as-code","loc":{"lines":{"from":96,"to":103}}}}],["1044",{"pageContent":"[Chris Coyier](https://css-tricks.com/video-screencasts/209-a-netflix-clone-with-datastax-astra-and-netlify/) recently sat down and pair-programmed with [David Jones-Gilardi](https://twitter.com/sonicdmg) of DataStax and Chris’s mind was also blown. In the video below, David doesn’t even use any local software other than a web browser. All code editing was done in Gitpod.\n\n`youtube: sPnBN-RhzQQ`\n\nThe Infrastructure as Software company [Pulumi](https://www.pulumi.com/) has also been using Gitpod as an option for attendees taking part in their instructor-led workshops because Gitpod enables them to spend less time configuring prerequisites and enables people to focus on what matters: **the educational content**.\n\n![Stuff like gitpod makes doing workshops so much easier I can’t believe how we used to do this stuff before - Matty Stratton](../../../static/images/blog/workshops-as-code/pulumi.png)\n_https://twitter.com/mattstratton/status/1426213495826096131?s=20_","metadata":{"source":"https://www.gitpod.io/blog/workshops-as-code","loc":{"lines":{"from":105,"to":112}}}}],["1045",{"pageContent":"🎉 Thanks for reading! Hopefully, you’re convinced and can see the benefits of defining your workshops as code by now. As [recently announced](/blog/cloud-based-development-for-everyone), Gitpod is available to everyone, and our free tier is open to every developer with a GitLab, GitHub, and/or Bitbucket account.","metadata":{"source":"https://www.gitpod.io/blog/workshops-as-code","loc":{"lines":{"from":114,"to":114}}}}],["1046",{"pageContent":"---\nauthor: csweichel, aledbf\ndate: Thursday, 16 Dec 2021 11:00:00 UTC\nexcerpt: Gitpod workspaces are Kubernetes pods. Each Kubernetes pod maintains its own network namespace - similar to how a regular container would. We use a combination of user and network namespaces to enable features you wouldn't find in a normal Kubernetes pod.\nimage: teaser.png\nslug: workspace-networking\ntags: [\"Engineering\"]\nsubtitle: or how we enabled Tailscale\nteaserImage: teaser.png\ntitle: Gitpod Workspace Networking\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\nGitpod workspaces are Kubernetes pods. Each Kubernetes pod maintains its own network namespace - similar to how a regular container would. [Network namespaces](https://man7.org/linux/man-pages/man7/network_namespaces.7.html) (netns) provide isolation of the system resources associated with networking.","metadata":{"source":"https://www.gitpod.io/blog/workspace-networking","loc":{"lines":{"from":1,"to":17}}}}],["1047",{"pageContent":"Container runtimes (e.g. Docker) or VPNs (e.g. Tailscale) both require control over these system resources associated with networking. If we wanted to provide workspaces with control over the network namespace of their pod, that would require `CAP_NET_ADMIN` on the node - clearly not a good idea.","metadata":{"source":"https://www.gitpod.io/blog/workspace-networking","loc":{"lines":{"from":19,"to":19}}}}],["1048",{"pageContent":"Enabling rootless Docker in workspaces\n\nMore than a year ago we enabled \"$lib/components/workspacekit).\n\n![Docker-specific network setup](../../../static/images/blog/workspace-networking/old-setup.png)\n\nYou'll have noticed that a network namespace was not part of additions we make to what Kubernetes provides. Docker however, requires the control a network namespace would afford.\n\nIn a Gitpod workspace, we don't just start a Docker daemon, but instead call `docker-up`. This custom piece of code produces a network namespace using [slirp4netns](https://github.com/rootless-containers/slirp4netns), and starts the docker daemon in there. The combination of the user namespace we provide using workspace, and this newly created network namespace, enables docker to create the networking devices and iptables entries it requires.","metadata":{"source":"https://www.gitpod.io/blog/workspace-networking","loc":{"lines":{"from":21,"to":29}}}}],["1049",{"pageContent":"Wait, what's slirp4netns, and why do we need this?\n\nCreating a network namespace is the easy part and does not require a lot of permissions ([capabilities](https://linux.die.net/man/7/capabilities)). You can easily try that for yourself using `unshare -n bash`. You'll quickly find that it isolates a little too well, and that you don't have any connection to the world outside of the namespace you've just created.\n\nIf you have enough capabilities/permissions outside of the network namespace, you can just create a [`veth` pair](https://man7.org/linux/man-pages/man4/veth.4.html) that effectively tunnels traffic from within the netns to outside of the netns. However, we're creating the netns because we don't have those permissions in the first place.","metadata":{"source":"https://www.gitpod.io/blog/workspace-networking","loc":{"lines":{"from":31,"to":35}}}}],["1050",{"pageContent":"Slirp4netns solves this problem using [TAP/TUN](https://www.kernel.org/doc/html/v5.12/networking/tuntap.html), by turning itself into a user-space packet forwarder. Running outside the netns (hence it has access to the network of the \"outside world\"), it creates a `tun` device inside the network namespace. All packets to and from this tunnel network device are forwarded through user-space now.\n\nBiggest benefit: works without elevated capabilities. Biggest drawback: forwards all traffic through user-space, which incurs a significant performance cost.","metadata":{"source":"https://www.gitpod.io/blog/workspace-networking","loc":{"lines":{"from":37,"to":39}}}}],["1051",{"pageContent":"[`CAP_NET_ADMIN`](<https://man7.org/linux/man-pages/man7/capabilities.7.html#:~:text=using%20mknod(2).-,CAP_NET_ADMIN,-Perform%20various%20network>) for ~~everyone~~ those who configure it\n\nWe've been living with the setup described above (netns only for the Docker daemon) for more than eight months. Mainly driven by performance considerations, but also because we saw no use-case which would warrant a change.\n\nOne day, we [were approached](https://github.com/gitpod-io/gitpod/issues/3258#issuecomment-949576242) by the awesome folks from [Tailscale](https://tailscale.com/). They were working on how to make [Tailscale available in Gitpod](/blog/tailscale) workspaces. The underlying issue: creating a TAP/TUN device and setting up routes to make use of it, all within a regular Gitpod workspace.\n\n![workspace-wide network namespace](../../../static/images/blog/workspace-networking/new-setup.png)","metadata":{"source":"https://www.gitpod.io/blog/workspace-networking","loc":{"lines":{"from":41,"to":47}}}}],["1052",{"pageContent":"![workspace-wide network namespace](../../../static/images/blog/workspace-networking/new-setup.png)\n\nWe had solved this problem already for one specific use-case: the Docker daemon. Within a single day, [we wrapped the entire workspace in a network namespace](https://github.com/gitpod-io/gitpod/pull/6409), if the workspace had a new `experimentalNetwork: true` [config flag set.](https://github.com/gitpod-io/demo-tailscale-with-gitpod/blob/1091c778c7e608d58e6e3cb1d494c73d5b255558/.gitpod.yml#L12)\n\nWhy make this optional behind a flag? Because this is a considerable change of the workspace networking setup, and we are careful not to break the existing experience. Also, the slirp4netns solution comes with a performance penalty (see above).\n\nHowever, with this change, we no longer needed to special case Docker, and Tailscale works out of the box.","metadata":{"source":"https://www.gitpod.io/blog/workspace-networking","loc":{"lines":{"from":47,"to":53}}}}],["1053",{"pageContent":"`CAP_NET_ADMIN` for everyone\n\nAfter observing the behaviour of this new networking setup in the wild, and with [our recent move to k3s](https://twitter.com/csweichel/status/1468239388115099669), we felt comfortable enough to make this behaviour standard. On the 9th December, we [rolled out a change](https://github.com/gitpod-io/gitpod/pull/7063#event-5739083230) which enabled this network namespace addition for all workspaces. We've also seen this change fixing [other networking related issues](https://github.com/gitpod-io/gitpod/issues/6446), providing even more reasons to move ahead.\n\nToday, when you start a workspace, `sudo tailscaled` will just run, and your Docker daemon will share the same network setup as the rest of the processes in your workspace. You can even do the networking equivalent of `rm -rf /` and break your workspace by running `sudo ip link set tap0 down` (you'll have to stop your workspace from the dashboard, or let it time out).","metadata":{"source":"https://www.gitpod.io/blog/workspace-networking","loc":{"lines":{"from":55,"to":59}}}}],["1054",{"pageContent":"There's still the performance cost of slirp4netns we have to deal with. Now that we run on more recent Linux versions, we can integrate a seccomp-addfd approach and follow what [bypass4netns](https://github.com/rootless-containers/bypass4netns) implements.","metadata":{"source":"https://www.gitpod.io/blog/workspace-networking","loc":{"lines":{"from":61,"to":61}}}}],["1055",{"pageContent":"Exciting times\n\nIt's super exciting to see how quickly these changes have come together, and the use-cases they enable. We're nowhere near the end of what we can do in this space, but are just getting started. If you want to join the fun, please head over to [gitpod.io/careers](http://gitpod.io/careers) and see what floats your boat.","metadata":{"source":"https://www.gitpod.io/blog/workspace-networking","loc":{"lines":{"from":63,"to":65}}}}],["1056",{"pageContent":"---\nauthor: svenefftinge\ndate: Wed Nov 21 2018 13:34:27 GMT+0000 (UTC)\nexcerpt: Whenever you want to share a reproducible example on StackOverflow or an issue report, providing real code that can be quickly tried\nimage: workspace-snapshots.jpeg\nslug: workspace-snapshots\nsubtitle: Code never lies\ntitle: Creating reproducibles for any programming language\ntags: [\"Gitpod updates\"]\nurl: https://medium.com/gitpod/code-never-lies-creating-reproducibles-for-any-programming-language-7946021a68f2\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>","metadata":{"source":"https://www.gitpod.io/blog/workspace-snapshots","loc":{"lines":{"from":1,"to":15}}}}],["1057",{"pageContent":"<script context=\"module\">\n  export const prerender = true;\n</script>\n\nWhenever you want to share a reproducible example on StackOverflow or an issue report, providing real code that can be quickly tried, executed and explored is the best you can do. Online code playgrounds, such as CodePen or JSFiddle, are an excellent way to do that, as they are very accessible for both the creator and the readers. Unfortunately, they are not available for every programming platform, language and often don’t work for larger projects or examples.\n\nIn this post I’d like to introduce you to a new feature in [Gitpod](https://gitpod.io), that lets you create reproducible examples for any programming environment and any size of project.","metadata":{"source":"https://www.gitpod.io/blog/workspace-snapshots","loc":{"lines":{"from":15,"to":21}}}}],["1058",{"pageContent":"New in Gitpod: Snapshots\n\nNo matter what state your Gitpod workspace is in, taking a Snapshot captures everything and provides you a link to share anywhere: on issues, forums (StackOverflow), emails and blogs. Anybody who clicks on a snapshot link instantly gets an exact copy of that workspace, including any uncommitted file changes and the UI layout.\n\nLet’s go through an example.","metadata":{"source":"https://www.gitpod.io/blog/workspace-snapshots","loc":{"lines":{"from":23,"to":27}}}}],["1059",{"pageContent":"Spring Boot Example\n\nI went over to **spring-boot** and picked the first issue in the list:\n<a class=\"no-nowrap\" href=\"https://github.com/spring-projects/spring-boot/issues/15326\">\n<strong>\nBean overriding in spring boot 2.1 · Issue #15326 · spring-projects/spring-boot\n</strong>\n<em>I have an issue with bean overriding with spring boot 2.1.0 I have a main application class that we use in…</em>github.com\n</a>\n\nThe issue has a detailed description on how to reproduce the problem. It even has a link to a GitHub repository containing the code! So the author did a lot to make it easy for the maintainers to reproduce the issue and figure out what’s wrong.\n\nHowever, instead of laying out the steps in prose, an automated solution would be much better. A snapshot would have reduced this to a single click for the maintainers, and the author wouldn’t have to write a lengthy explanation.","metadata":{"source":"https://www.gitpod.io/blog/workspace-snapshots","loc":{"lines":{"from":29,"to":41}}}}],["1060",{"pageContent":"Take a Snapshot\n\nBefore we are taking the snapshot, we want to make sure everything is in the state we want it to be. So the maintainers get pointed to the culprit immediately. For this example I made sure\n\n- the build ran through,\n\n- the right editors are opened\n  (I choose to open the two files mentioned in the issue in split mode),\n\n- the sample application is started automatically\n\nTaking care of the first two items is easy. For the third, you need to add a **_.gitpod.yml_** to the root of the project containing the tasks you want to start.\n\nIn the case of this project I added a task to start the failing Java process:\n\n```yaml\ntasks:\n    - command: >\n    mvn -q exec:exec\n        -Dexec.executable=java \\\n        -Dexec.args=\"-cp %classpath com.example.beanoverriding.EmbeddedApplication\" \\\n        -Dexec.classpathScope=\"test\"","metadata":{"source":"https://www.gitpod.io/blog/workspace-snapshots","loc":{"lines":{"from":43,"to":64}}}}],["1061",{"pageContent":"> Btw. to figure out how to start that damn thing using Maven, I had to ask the community on StackOverflow. Of course, by providing a Gitpod Snapshot :-)\n> <a class=\"no-nowrap\" href=\"https://stackoverflow.com/questions/53536751/run-main-from-test-scope-in-maven-the-parameters-mainclass-for-goal-org-code\"><strong>Run main from test scope in Maven: “The parameters ‘mainClass’ for goal…</strong> &gt; <em>Thanks for contributing an answer to Stack Overflow! Some of your past answers have not been well-received, and you’re…</em>stackoverflow.com</a>\n\nWith the **.gitpod.yml **configured and the editors and views laid out as needed, we are ready to take a snapshot. Simply click on the avatar on the top right:\n\n![Gitpod menu share workspace snapshot](https://cdn-images-1.medium.com/max/2212/1*nOXkwor5kPsdJb-o2oHy4w.png)\n\nPick “Share Workspace Snapshot” and copy and share the link or one of the snippets in the opened dialog:","metadata":{"source":"https://www.gitpod.io/blog/workspace-snapshots","loc":{"lines":{"from":67,"to":74}}}}],["1062",{"pageContent":"Pick “Share Workspace Snapshot” and copy and share the link or one of the snippets in the opened dialog:\n\n![Gitpod workspace snapshot prompt](https://cdn-images-1.medium.com/max/4348/1*2aDOY4sHSyefz2uepzGskw.png)\n\nHere’s the snapshot link for you to try:\n[https://gitpod.io/#snapshot/f7f5954a-250b-4113-909c-aae88b64321c](https://gitpod.io/#snapshot/f7f5954a-250b-4113-909c-aae88b64321c)","metadata":{"source":"https://www.gitpod.io/blog/workspace-snapshots","loc":{"lines":{"from":74,"to":79}}}}],["1063",{"pageContent":"Summary\n\nGitpod Snapshots are a very convenient way to create and consume large and small examples for any programming language and platform. Make sure to check out the [documentation](https://docs.gitpod.io), which goes into more detail on the options available.\n\nWe think snapshots are not only great for reproducing issues or showing solutions and examples, but very useful in other situations. Preparing workshops and tutorials should be super convenient with snapshots, as it will free your audience from any tedious setup procedures. We are looking forward to learning about all the creative ways you will put this feature to use. Please [let us know](https://github.com/gitpod-io/gitpod) and have fun!","metadata":{"source":"https://www.gitpod.io/blog/workspace-snapshots","loc":{"lines":{"from":81,"to":85}}}}],["1064",{"pageContent":"---\ntitle: \"From in-house to Gitpod: unlocking a collaboration culture\"\nexcerpt: Factorial embraced a collaboration culture by switching from their in-house dev environments to Gitpod. It saved each engineer 5 to 10 hours a month and freed the DevOps team to focus on production as they scaled from 45 developers to 120.\nslug: factorial\nimage: teaser.png\ndate: Thursday, 23 June 2022 06:00:00 UTC\npageTitle: \"Factorial case study: From in-house remote development to unlocking a collaboration culture\"\npageDescription: From in-house remote development to unlocking a collaboration culture. Saving each engineer 5 to 10 hours a month. Freeing the DevOps team to focus on production as Factorial grows from 45 developers to 120.\nkeywords: DevX, velocity, growth, onboarding, factorial\n---\n\n<script lang=\"ts\" context=\"module\">\n  export const prerender = true;\n</script>","metadata":{"source":"https://www.gitpod.io/customers/factorial","loc":{"lines":{"from":1,"to":14}}}}],["1065",{"pageContent":"<script lang=\"ts\" context=\"module\">\n  export const prerender = true;\n</script>\n\n<script lang=\"ts\">\n\timport CustomerHero from \"$lib/components/customers/customer-hero.svelte\";\n\timport CompanyBenefits from \"$lib/components/customers/company-benefits.svelte\";\n\timport Section from \"$lib/components/section.svelte\";\n\timport Story from \"$lib/components/customers/story.svelte\";\n\timport Quote from \"$lib/components/quote.svelte\";\n  \timport OpenGraph from \"$lib/components/open-graph.svelte\";\n</script>\n\n<OpenGraph\ndata={{\n    description:\n      \"From in-house remote development to unlocking a collaboration culture. Saving each engineer 5 to 10 hours a month. Freeing the DevOps team to focus on production as Factorial grows from 45 developers to 120.\",\n    title: \"Factorial case study: From in-house remote development to unlocking a collaboration culture\",\n    keywords: \"DevX, velocity, growth, onboarding, factorial\",\n  }}\n/>","metadata":{"source":"https://www.gitpod.io/customers/factorial","loc":{"lines":{"from":14,"to":34}}}}],["1066",{"pageContent":"<CustomerHero\ntitle=\"From in-house to Gitpod: unlocking a collaboration culture\"\ntext=\"Factorial embraced a collaboration culture by switching from their in-house dev environments to Gitpod. It saved each engineer 5 to 10 hours a month and freed the DevOps team to focus on production as they scaled from 45 developers to 120.\"\ncard={{\n\t\timage: \"/images/customers/factorial/teaser.png\",\n\t\tdetails:{\n\t\t\tindustry: \"Human Resources\",\n\t\t\tplan: \"Organization, SaaS\",\n\t\t\tpeople: {\n\t\t\t\ttitle: \"Engineers\",\n\t\t\t\ttext: \"120+\"\n\t\t\t},\n\t\t\twebsite: {\n\t\t\t\thref: \"https://factorialhr.com/\",\n\t\t\t\ttext: \"Factorial\",\n\t\t\t}\n\t\t}\n\t}}\n/>\n\n<CompanyBenefits\nbenefits={[\n{\ntitle: \"50%\",\ntext: \"DevOps capacity saved\",\n},\n{\ntitle: \"5-10hrs\",\ntext: \"saved per engineer / month\",\n},\n{\ntitle: \"65+\",\ntext: \"new developers hired\",\n}]}\n/>","metadata":{"source":"https://www.gitpod.io/customers/factorial","loc":{"lines":{"from":36,"to":70}}}}],["1067",{"pageContent":"<CompanyBenefits\nbenefits={[\n{\ntitle: \"50%\",\ntext: \"DevOps capacity saved\",\n},\n{\ntitle: \"5-10hrs\",\ntext: \"saved per engineer / month\",\n},\n{\ntitle: \"65+\",\ntext: \"new developers hired\",\n}]}\n/>\n\n<Section>\n\t<Quote\n\t\tquote=\"You can either spend 3 days of your life setting them up and teaching them how the environment works, or you can give them a button and say &lsquo;click here&rsquo;.\"\n\t\tauthor={{\n\t\t\tname: \"Josep Jaume\",\n\t\t\tjobTitle: \"Senior Director of Developer Experience at Factorial\",\n\t\t}}\n\t/>\n</Section>\n\n<Story bannerImg=\"/images/customers/factorial/banner.png\" text=\"From in-house to Gitpod: unlocking a collaboration culture\">","metadata":{"source":"https://www.gitpod.io/customers/factorial","loc":{"lines":{"from":70,"to":96}}}}],["1068",{"pageContent":"<Story bannerImg=\"/images/customers/factorial/banner.png\" text=\"From in-house to Gitpod: unlocking a collaboration culture\">\n\n<img src=\"/images/customers/factorial/josep-band-slack.png\" alt=\"Slack message from Josep Jaume: 'Just to show you how much I am becoming a meme in Factorial, and how much I love Gitpod – I have a band and some amazing humans from Factorial came to see us. You won't believe what happened next' with some photos of the Factorial team holding Gitpod signs in the crowd.\" class=\"rounded-t-2xl\">\n\nFactorial is a software company building an all-in-one human resources management application that handles document management, payroll, time tracking, and more.\n\nDirector of Developer Experience Josep Jaume has spent the last 8 months improving the way developers at Factorial work. Since then, the company has grown from 45 developers to 120, and Gitpod has become a core part of their developer experience.","metadata":{"source":"https://www.gitpod.io/customers/factorial","loc":{"lines":{"from":96,"to":102}}}}],["1069",{"pageContent":"Josep tells us the story of Factorial's growth and what led the company to embrace Gitpod for all their development.","metadata":{"source":"https://www.gitpod.io/customers/factorial","loc":{"lines":{"from":104,"to":104}}}}],["1070",{"pageContent":"Achieving parity between development and production\n\nBuilding their application as a large monolith with Ruby on Rails and React helps Factorial rapidly iterate over major changes. As they serve companies in a wide variety of sectors, they need to be agile enough to change the shape of the application quickly. That level of flexibility in the macro-scale comes at the expense of micro-scale changes.\n\nDue to the nature of a monolith, even a small change to the application can affect the totality of the application. Engineers need to be confident that their code reflects reality without having to wait for a deployment cycle to complete, so Factorial uses queues and job workers to fully replicate the production environment during development time.","metadata":{"source":"https://www.gitpod.io/customers/factorial","loc":{"lines":{"from":106,"to":110}}}}],["1071",{"pageContent":"They saw the need for cloud developer environments early on. Simulating production during development required 10-12GB of RAM and was difficult to run on local machines. It was clear that remote development was the only realistic approach to developing software at this scale.\n\nAs Factorial moved away from local development, each developer workstation turned into another cloud application to maintain.\n\nTheir DevOps team was 5 people, and maintaining these dev environments became a significant part of the job. A large amount of time went into setting up new environments, onboarding new engineers, and reallocating keys; creating new machines, and then restarting them when things broke.\n\nIt took time to provision each new machine but there were greater issues at scale. \"Applying changes via Terraform is easy at 10 machines, but fails in entirely different ways with 100 machines.\" Josep says. \"And then you need to ramp up the DevOps team.\"","metadata":{"source":"https://www.gitpod.io/customers/factorial","loc":{"lines":{"from":112,"to":118}}}}],["1072",{"pageContent":"Last February, the collaboration between Factorial and Gitpod began, and before long the DevOps team was freed to focus on the production environment where they can provide the most value to the business.\n\n> \"The DevOps team is the happiest in the whole company because they don't have to deal with the old dev containers anymore.\"","metadata":{"source":"https://www.gitpod.io/customers/factorial","loc":{"lines":{"from":120,"to":122}}}}],["1073",{"pageContent":"Rethinking the development infrastructure\n\nThe learning curve with Gitpod is significantly lower than their previous dev environments, which required deep knowledge of Terraform and Docker in order to restart containers or spin up tasks. Each repository has a configuration file and an image, and then developers can spin up workspaces at the click of a button.\n\nInstead of having to maintain persistent developer environments for each engineer, they became something that was just \"there\" the moment a developer needed one. They could simply connect to it, like a thin client, and do their work.\n\nJosep explained how several of their developers had been running the IDE locally and [rsyncing](https://linux.die.net/man/1/rsync) against the server. It worked for files, but a lot of the common IDE tooling plugins like ESLint and Prettier don't work that way.\n\n> \"Individual devs were frustrated at the inability to use the proper tooling.\"","metadata":{"source":"https://www.gitpod.io/customers/factorial","loc":{"lines":{"from":124,"to":132}}}}],["1074",{"pageContent":"> \"Individual devs were frustrated at the inability to use the proper tooling.\"\n\nInstead of getting immediate feedback in the IDE, they had to manually run scripts, which resulted in many issues only being noticed when it was time to deploy.\n\nOther issues relating to the local environment differing from the production environment often meant that the developer would push to CI and have to wait until it completes before finding out what the next broken thing was.\n\nWith Gitpod, the IDE is backed by a remote development server that lives inside the workspace container, so there are significantly fewer layers between the developer and their code. Linters and formatters \"just work\" and engineers can fix issues as they code, instead of pushing and waiting to see what fails and so they can fix it later.","metadata":{"source":"https://www.gitpod.io/customers/factorial","loc":{"lines":{"from":132,"to":138}}}}],["1075",{"pageContent":"Adopting Gitpod across the organization team by team\n\nFactorial's first days with Gitpod were met with some internal hesitation, but Josep was well prepared to avoid it. \"You can't force people to use particular technology. At the slightest moment of uncertainty, people will say \"this is too new\" and go back to their old habits,\" he explains. Developers need visibility into the system, so when something goes wrong they can see the real root cause and know how to fix it.\n\nJosep went through the company team-by-team. The product and engineering managers came first, because they worked in different ways than the developers.","metadata":{"source":"https://www.gitpod.io/customers/factorial","loc":{"lines":{"from":140,"to":144}}}}],["1076",{"pageContent":"Josep went through the company team-by-team. The product and engineering managers came first, because they worked in different ways than the developers.\n\nUnlike the engineers, who tend to work on fewer tasks for longer times, managers and team leads have to switch contexts frequently. As they used Gitpod for more and more of these tasks, they could feel an immediate improvement in collaboration. \"They can jump from feature to feature, spin up new environments, test things, comment on them, improve on them, and without having to worry about rebasing and resetting the database,\" he describes. \"Context switching is way easier now. People have noticed that, and they're using it.\"\n\nThe engineers started seeing similar benefits.\n\n> \"They now have a way to share URLs and work on a feature with that workspace open and have someone from the product team check it out while working on another workspace.\"","metadata":{"source":"https://www.gitpod.io/customers/factorial","loc":{"lines":{"from":144,"to":150}}}}],["1077",{"pageContent":"> \"They now have a way to share URLs and work on a feature with that workspace open and have someone from the product team check it out while working on another workspace.\"\n\nFactorial's previous code review system involved 12 available staging environments, which developers needed to reserve and provision with their code in order for the QA team to review it.\n\nWith so few available, and so many developers who needed them, they often had difficulties finding one to use. And when a developer actually managed to reserve one, it was rarely in a ready-to-go state. The burden of these staging environments fell on the DevOps team to maintain.\n\nRather than mandating that developers do their work with Gitpod, Josep focused on learning more about the problems they were facing, and highlighting how Gitpod solves them.","metadata":{"source":"https://www.gitpod.io/customers/factorial","loc":{"lines":{"from":150,"to":156}}}}],["1078",{"pageContent":"Rather than mandating that developers do their work with Gitpod, Josep focused on learning more about the problems they were facing, and highlighting how Gitpod solves them.\n\nThey shared a lot about their development process and had frequent pair sessions. Every time they found a pain point, they fixed it, and unlike the old dev environments that were unique to each developer, these fixes improved the developer experience for everyone. Changes to formatting or lint rules became part of the code that every new workspace would build from.\n\nGitpod also transformed the way Factorial onboarded new hires. From November to July, Factorial grew from 45 developers to 120, and they all needed to be trained on Factorial's development process. With no experience using the old system, Gitpod was a much easier entry point. \"You can either spend 3 days of your life setting them up, teaching them to use tmux, or you can just give them a button and say 'click here'.\"","metadata":{"source":"https://www.gitpod.io/customers/factorial","loc":{"lines":{"from":156,"to":160}}}}],["1079",{"pageContent":"Discovering a new collaborative way to work\n\nCollaboration is an indispensable part of Factorial's culture, but it was hard work. Changing tracks to work with someone else meant pushing work to branches for both front-end and back-end repositories, stashing changes, reinstalling dependencies and possibly even re-seeding the database.\n\nGitpod enabled developers to work in parallel, with multiple workspaces that were easily shareable and readily accessible.\n\n> \"I'd estimate each engineer saves 5 to 10 hours a month on dev environment issues that just don't exist with Gitpod.\"\n\nJosep adds that junior developers usually have the hardest time with such issues.\n\nOnce a developer hits the \"I can do that?\" moment, they start seeing the work of software development in a different way. \"There was a tipping point where they just started talking to each other.\"\n\nEventually the messages started coming in.","metadata":{"source":"https://www.gitpod.io/customers/factorial","loc":{"lines":{"from":162,"to":174}}}}],["1080",{"pageContent":"Eventually the messages started coming in.\n\n<div class=\"bg-white px-4 py-2 rounded-lg\">\n\t<img src=\"/images/customers/factorial/slack-1.png\" alt=\"Can anyone delete my devenv? Been using Gitpod for a long time now and not coming back.\" />\n\t<img src=\"/images/customers/factorial/slack-2.png\" alt=\"I'm not going to need my devenv anymore either. I usually worked on localhost before but I'm not going to use it anymore.\" />\n\t<img src=\"/images/customers/factorial/slack-3.png\" alt=\"I will not need my devenv anymore either, could you please delete it?\" />\n</div>\n\nThe tide had turned. 4 months after Factorial began transitioning to Gitpod, the engineers embraced the new way of working and committed to it—from varying degrees of skepticism and engagement to passionate advocates for a modern developer experience.","metadata":{"source":"https://www.gitpod.io/customers/factorial","loc":{"lines":{"from":174,"to":182}}}}],["1081",{"pageContent":"One evening in May, Josep was playing a show with his band, where a group from the Factorial team came to see him. They stood in the audience and raised Gitpod signs high above the crowd as he played his guitar on stage.\n\n<div class=\"max-w-xl mx-auto\">\n\n![A gitpod sign in the crowd with Josep playing guitar in the background](/images/customers/factorial/sign-in-crowd.jpg)\n\n</div>\n\nGitpod is now the standard way to develop software at Factorial. Not mandated by company policy, but the result of developers who are empowered to develop in any way they want, and who chose Gitpod anyway. We are extremely appreciative of the Factorial team, and for Josep Jaume's time to do this interview with us.\n\n</Story>","metadata":{"source":"https://www.gitpod.io/customers/factorial","loc":{"lines":{"from":184,"to":194}}}}],["1082",{"pageContent":"---\ntitle: Quizlet increased developer satisfaction by 45 percentage points using Gitpod\nexcerpt: Quizlet started using Gitpod due to CPU compatibility issues. Six months in, Quizlet improved internal developer satisfaction by 45 percentage points reporting reduced incidents with broken development environments and improved collaboration.\nslug: quizlet\nimage: teaser.png\ndate: Friday, 10 Feb 2023 06:00:00 UTC\npageTitle: \"Quizlet increased developer satisfaction by 45 percentage points using Gitpod\"\npageDescription: Quizlet started using Gitpod due to CPU compatibility issues. Six months in, Quizlet improved internal developer satisfaction by 45 percentage points reporting reduced incidents with broken development environments and improved collaboration.\nkeywords: CDE, cloud dev environment, DevX, velocity, growth, education, quizlet\n---\n\n<script lang=\"ts\" context=\"module\">\n  export const prerender = true;\n</script>","metadata":{"source":"https://www.gitpod.io/customers/quizlet","loc":{"lines":{"from":1,"to":14}}}}],["1083",{"pageContent":"<script lang=\"ts\" context=\"module\">\n  export const prerender = true;\n</script>\n\n<script lang=\"ts\">\n\timport CustomerHero from \"$lib/components/customers/customer-hero.svelte\";\n\timport CompanyBenefits from \"$lib/components/customers/company-benefits.svelte\";\n\timport Section from \"$lib/components/section.svelte\";\n\timport Story from \"$lib/components/customers/story.svelte\";\n\timport Quote from \"$lib/components/quote.svelte\";\n  \timport OpenGraph from \"$lib/components/open-graph.svelte\";\n</script>\n\n<OpenGraph\ndata={{\n    description:\n      \"Quizlet started using Gitpod due to CPU compatibility issues. Six months in, Quizlet improved internal developer satisfaction by 45 percentage points reporting reduced incidents with broken development environments and improved collaboration.\",\n    title: \"Quizlet increased developer satisfaction by 45 percentage points using Gitpod\",\n    keywords: \"CDE, cloud dev environment, DevX, velocity, growth, education, quizlet\",\n  }}\n/>","metadata":{"source":"https://www.gitpod.io/customers/quizlet","loc":{"lines":{"from":14,"to":34}}}}],["1084",{"pageContent":"<CustomerHero\ntitle=\"Quizlet increased developer satisfaction by 45 percentage points using Gitpod\"\ntext=\"Quizlet started using Gitpod due to CPU compatibility issues. Six months in, Quizlet improved internal developer satisfaction by 45 percentage points reporting reduced incidents with broken development environments and improved collaboration.\"\ncard={{\n\t\timage: \"/images/customers/quizlet/teaser.png\",\n\t\tdetails:{\n\t\t\tindustry: \"Education\",\n\t\t\tplan: \"Enterprise\",\n\t\t\tpeople: {\n\t\t\t\ttitle: \"Engineers\",\n\t\t\t\ttext: \"85\"\n\t\t\t},\n\t\t\twebsite: {\n\t\t\t\thref: \"https://quizlet.com/\",\n\t\t\t\ttext: \"Quizlet\",\n\t\t\t}\n\t\t}\n\t}}\n/>\n\n<CompanyBenefits\nbenefits={[\n{\ntitle: \"45pt\",\ntext: \"increase in internal development satisfaction\",\n},\n{\ntitle: \"60%\",\ntext: \"reduction in incidents with dev environments\",\n},\n{\ntitle: \"<10 min\",\ntext: \"onboarding time for new engineers\",\n}]}\n/>","metadata":{"source":"https://www.gitpod.io/customers/quizlet","loc":{"lines":{"from":36,"to":70}}}}],["1085",{"pageContent":"<Section>\n\t<Quote\n\t\tquote=\"Gitpod offers a compelling developer experience, and reduces our developer downtime to nearly zero. Running in the cloud enabled new ways of working together that weren’t possible before. We were able to modernize our development environment and increase internal developer satisfaction by 45 percentage points.\"\n\t\tauthor={{\n\t\t\tname: \"Roger Goldfinger\",\n\t\t\tjobTitle: \"Senior Staff Software Engineer at Quizlet\",\n\t\t}}\n\t/>\n</Section>\n\n<Story bannerImg=\"/images/customers/quizlet/banner.png\" text=\"Quizlet reduced incidents with broken dev environments by 60% using Gitpod\">\n\nIn less than two quarters, the platform engineering team at Quizlet achieved a drastic improvement in developer productivity and developer satisfaction across the company by introducing [cloud development environments (CDEs)](/cde).","metadata":{"source":"https://www.gitpod.io/customers/quizlet","loc":{"lines":{"from":72,"to":84}}}}],["1086",{"pageContent":"[Quizlet](https://quizlet.com/) is an online learning tool that makes big subjects easier to digest with flashcards and practice tests. Its users depend on it as a way to improve their test scores and so being a reliable, scalable solution is extremely important to the Quizlet development team. Quizlet was founded in 2005 in San Francisco and serves users in more than 130 countries across the globe.\n\nNew engineers at Quizlet had struggled with [compatibility issues after the ARM-based M1 MacBook was introduced](/blog/better-container-development-on-apple-m1-macbooks-with-gitpod). At the time, it took days to onboard new developers and hours to troubleshoot development environments. After a POC with Gitpod, the platform engineering team around Senior Staff Engineer Roger Goldfinger and Staff Platform Engineer Cooper Benson rolled out Gitpod [CDEs](/cde) to the entire engineering team of 85 in summer of 2022:\n\nTheir key objectives:","metadata":{"source":"https://www.gitpod.io/customers/quizlet","loc":{"lines":{"from":86,"to":90}}}}],["1087",{"pageContent":"Their key objectives:\n\n- **Reduce onboarding time to make new hires productive, faster**\n- **Reduce time to troubleshoot broken development environments**\n- **Increase security of development environments**\n\nGitpod’s cloud development environments (CDEs) are high-powered, automated development environments in the cloud. With a single click, developers can spin up a perfectly configured workspace in a container in the cloud - independent of the device, operating system, or IDE they use.","metadata":{"source":"https://www.gitpod.io/customers/quizlet","loc":{"lines":{"from":90,"to":96}}}}],["1088",{"pageContent":"Reducing onboarding time from days to minutes\n\nQuizlet solved their onboarding problems right away. In Gitpod, configuration of development environments is handled on a project level, removing complexity of managing configuration and varying installations of local machines. A one-line config change by a platform engineer is instantly available to every team member who opens a new workspace in Gitpod.\n\n> \"Developers are experiencing far less productivity issues onboarding. Now it takes an hour at most, with training, and developers are coding.\" - <span style=\"font-weight:400; font-size:18px;\">Cooper Benson,</span> <span style=\"font-weight:400; font-size:16px;\">Staff Platform Engineer at Quizlet</span>","metadata":{"source":"https://www.gitpod.io/customers/quizlet","loc":{"lines":{"from":98,"to":102}}}}],["1089",{"pageContent":"Higher security with ephemeral CDEs\n\nQuizlet saw the benefit of doing cloud-based development on ephemeral containers over virtual machines.\n\n> \"Because Gitpod provides ephemeral environments and allows software to run on each running workspace, we’re able to reduce exfiltration risks as well as outside actors from accessing our development environments.\" - <span style=\"font-weight:400; font-size:18px;\">Roger Goldfinger,</span> <span style=\"font-weight:400; font-size:16px;\">Senior Staff Software Engineer at Quizlet</span>\n\nGitpod keeps source code off the local machine and is ephemeral and isolated from other work which [reduces the potential impact of software supply chain attacks](/security).","metadata":{"source":"https://www.gitpod.io/customers/quizlet","loc":{"lines":{"from":104,"to":110}}}}],["1090",{"pageContent":"Fewer broken developer environments\n\nBeyond solving their onboarding problem, the team at Quizlet observed reduced developer toil, increased team collaboration across different roles and massively improved developer satisfaction.\n\nGitpod eliminates configuration drift and ensures every developer is always working on the latest configuration. Because Gitpod’s workspaces are short-lived, it is super easy to restart or create a new workspace. Before Gitpod, 90% of developers had a broken environment at least 1 and up to 4 days a month with 100% of the team reporting they experienced issues or delays working with their codebase. Since the introduction of Gitpod, the latter number already decreased by 60 percentage points.","metadata":{"source":"https://www.gitpod.io/customers/quizlet","loc":{"lines":{"from":112,"to":116}}}}],["1091",{"pageContent":"> \"Trying to SSH into a VM to diagnose one of a million running processes is infinitely worse than just creating a workspace in Gitpod.\" - <span style=\"font-weight:400; font-size:18px;\">Cooper Benson,</span> <span style=\"font-weight:400; font-size:16px;\">Staff Platform Engineer at Quizlet</span>\n\nWith Gitpod, Quizlet has been able to take <b>debugging from what was once a two hour job, to less than thirty seconds with the fix of a new workspace, with now 40% of developers reporting they experience no issues or delays with coding</b>.","metadata":{"source":"https://www.gitpod.io/customers/quizlet","loc":{"lines":{"from":118,"to":120}}}}],["1092",{"pageContent":"Enhanced collaboration with designers and product managers\n\n> \"Sharing a change that spanned the front end and back end was really difficult before. Now they can just share a workspace URL with their product manager.\" - <span style=\"font-weight:400; font-size:18px;\">Roger Goldfinger,</span> <span style=\"font-weight:400; font-size:16px;\">Senior Staff Software Engineer at Quizlet</span>\n\nQuizlet developers have been able to spin up development environments on demand, share port URLs to enable faster collaboration and debugging and get new members of their teams onboarded quickly.\n\nNon-engineering team members benefit from the introduction of CDEs as well. At Quizlet, Gitpod is used by designers to review front end changes and product managers to easily jump from workspace to workspace.","metadata":{"source":"https://www.gitpod.io/customers/quizlet","loc":{"lines":{"from":122,"to":128}}}}],["1093",{"pageContent":"The bottom line: massively improved developer satisfaction\n\n> Gitpod offers a compelling developer experience, and reduces our developer downtime to nearly zero. Running in the cloud enabled new ways of working together that weren’t possible before. We were able to modernize our development environment and increase internal developer satisfaction by 45%” - <span style=\"font-weight:400; font-size:18px;\">Roger Goldfinger,</span> <span style=\"font-weight:400; font-size:16px;\">Senior Staff Software Engineer at Quizlet</span>\n\nThe Quizlet team initially deployed Gitpod on their largest repo. Engineers at Quizlet can choose whether to use Gitpod or their local development environment.\n\nSix months in, over 75% of their developers are using Gitpod. The team is now deploying Gitpod across additional repositories to make it available to even more engineers at Quizlet.","metadata":{"source":"https://www.gitpod.io/customers/quizlet","loc":{"lines":{"from":130,"to":136}}}}],["1094",{"pageContent":"Six months in, over 75% of their developers are using Gitpod. The team is now deploying Gitpod across additional repositories to make it available to even more engineers at Quizlet.\n\n> \"We've solved dev. Now we're focused on delivering value to users.\" - <span style=\"font-weight:400; font-size:18px;\">Roger Goldfinger,</span> <span style=\"font-weight:400; font-size:16px;\">Senior Staff Software Engineer at Quizlet</span>\n\n</Story>","metadata":{"source":"https://www.gitpod.io/customers/quizlet","loc":{"lines":{"from":136,"to":140}}}}],["1095",{"pageContent":"---\ntitle: Building a community by removing friction to contribute\nexcerpt: RedwoodJS is the latest open source project of Tom Preston-Werner, the Founder and former CEO of GitHub. Gitpod removed the friction of building on and contributing to Redwood, helping to build an engaging community.\nslug: redwoodjs\nimage: teaser.png\ndate: Thursday, 3 Feburary 2022 04:00:00 UTC\npageTitle: \"RedwoodJS case study: Building a community by removing friction\"\npageDescription: RedwoodJS was founded by Tom Preston-Werner, the Founder and former CEO of GitHub. Gitpod removed the friction of contributing to RedwoodJS, growing the community.\nkeywords: open-source, community, redwoodJS, OSS\n---\n\n<script lang=\"ts\" context=\"module\">\n  export const prerender = true;\n</script>","metadata":{"source":"https://www.gitpod.io/customers/redwoodjs","loc":{"lines":{"from":1,"to":14}}}}],["1096",{"pageContent":"<script lang=\"ts\" context=\"module\">\n  export const prerender = true;\n</script>\n\n<script lang=\"ts\">\n\timport CustomerHero from \"$lib/components/customers/customer-hero.svelte\";\n\timport CompanyBenefits from \"$lib/components/customers/company-benefits.svelte\";\n\timport Section from \"$lib/components/section.svelte\";\n\timport Story from \"$lib/components/customers/story.svelte\";\n\timport Quote from \"$lib/components/quote.svelte\";\n  \timport OpenGraph from \"$lib/components/open-graph.svelte\";\n</script>\n\n<OpenGraph\ndata={{\n    description:\n      \"RedwoodJS was founded by Tom Preston-Werner, the Founder and former CEO of GitHub. Gitpod removed the friction of contributing to RedwoodJS, growing the community.\",\n    title: \"RedwoodJS case study: Building a community by removing friction\",\n    keywords: \"open-source, community, redwoodJS, OSS\",\n  }}\n/>","metadata":{"source":"https://www.gitpod.io/customers/redwoodjs","loc":{"lines":{"from":14,"to":34}}}}],["1097",{"pageContent":"<CustomerHero\ntitle=\"Increasing Redwood's development velocity by removing the friction to&nbsp;contribute\"\ntext=\"RedwoodJS is the latest open source project of Tom Preston-Werner, the Founder and former CEO of GitHub. Gitpod removed the friction of building on and contributing to Redwood, helping them to build an engaging community.\"\ntextMaxWClass=\"max-w-4xl\"\nlogo={{\n\t\tsrc: \"/images/customers/redwoodjs/logo.png\",\n\t\talt: \"customer.io\"\n\t}}\ncard={{\n\t\timage: \"/images/customers/redwoodjs/teaser.png\",\n\t\tdetails:{\n\t\t\tindustry: \"Open Source Software\",\n\t\t\tplan: \"Professional Open Source, SaaS\",\n\t\t\tpeople: {\n\t\t\t\ttitle: \"Contributors\",\n\t\t\t\ttext: \"190+\"\n\t\t\t},\n\t\t\twebsite: {\n\t\t\t\thref: \"https://redwoodjs.com/\",\n\t\t\t\ttext: \"redwoodjs.com\",\n\t\t\t}\n\t\t}\n\t}}\n/>\n\n<CompanyBenefits\nbenefits={[\n{\ntitle: \"275+\",\ntext: \"Contributors to RedwoodJS\",\n},\n{\ntitle: \"+11k\",\ntext: \"Stars on GitHub\",\n},\n{\ntitle: \"1 click\",\ntext: \"To spin up a fully functional test project\",\n}]}\n/>","metadata":{"source":"https://www.gitpod.io/customers/redwoodjs","loc":{"lines":{"from":36,"to":75}}}}],["1098",{"pageContent":"<Section>\n\t<Quote\n\t\tquote=\"Gitpod totally changed the development velocity for RedwoodJS — it removed any issues related to configurations of dev environments and made it incredibly easy to contribute.\"\n\t\tauthor={{\n\t\t\tname: \"Tom Preston-Werner\",\n\t\t\tjobTitle: \"Founder of GitHub & Redwood, former CEO of GitHub\",\n\t\t}}\n\t/>\n</Section>\n\n<Story bannerImg=\"/images/customers/redwoodjs/banner.png\" text=\"How Gitpod increases Redwood’s development velocity by removing the friction to contribute (and how we got to talk to the GitHub founder and former CEO)\">\n\n<img src=\"/images/customers/redwoodjs/twitter-chat.jpg\" alt=\"Twitter DM from Tom Preston-Werner about Gitpod\" class=\"rounded-t-2xl\"/>\n\nSimilar to developer experience, Open Source is part of Gitpod’s DNA. Not only is Gitpod an open source company, but our product is positioned to remove one of the biggest hurdles before developers can contribute to open source: setting up the developer environment.","metadata":{"source":"https://www.gitpod.io/customers/redwoodjs","loc":{"lines":{"from":77,"to":91}}}}],["1099",{"pageContent":"A match made in OSS heaven\n\nRedwood is the latest open source project initiated by Tom Preston-Werner, co-founder and former CEO of GitHub. RedwoodJS is an opinionated, full-stack, serverless-ready web application framework that will allow you to build and deploy with ease.\n\nAs with any new open source project, the team around Tom Preston-Werner wanted to build RedwoodJS with the help of a growing community of engaged developers.\n\n“From the very beginning, our goal was to build an engaging, dynamic open source community and we’re optimising for collaboration by design.”\n\nOften the problem with building a community of contributors is the project setup friction. And since RedwoodJS is a framework, it required tedious manual steps when setting up the developer environment like linking the framework to a development application to explore changes made to the code.","metadata":{"source":"https://www.gitpod.io/customers/redwoodjs","loc":{"lines":{"from":93,"to":101}}}}],["1100",{"pageContent":"To solve that and enable developers to contribute to the project with a single click, the RedwoodJS core team turned to Gitpod. Convinced by the idea, they described their configuration and startup tasks in a <code>[.gitpod.yml](https://github.com/redwoodjs/redwood/blob/main/.gitpod.yml)</code> file which is available to everyone publicly as it’s versioned in the Git repo along with the source code.\n\n<img src=\"/images/customers/redwoodjs/comment.png\" alt=\"Comment about Gitpod from RedwoodJS core team member\" class=\"rounded-t-2xl md:max-w-md mx-auto\" />","metadata":{"source":"https://www.gitpod.io/customers/redwoodjs","loc":{"lines":{"from":103,"to":105}}}}],["1101",{"pageContent":"Making it easy for the community to use RedwoodJS and contribute to it\n\nAs the configuration is on the repo level, it allows the community to spin up functional test projects with the click of a button that have been prebuilt ahead of time. Making it so much easier for the community to contribute and use the framework, RedwoodJS has over 11.000 stars and 190+ contributors to the project, at the time of writing.\n\n> “We’re obsessed with developer experience. Gitpod allowed RedwoodJS to be accessible to contributors and the core team without any friction and made everyone more productive.”\n\nAt Gitpod we also created [contribute.dev](https://contribute.dev/), an initiative to discover open source projects like Redwood’s that describe their dev environment as code using Gitpod. This way users know that they can focus on core contributions rather than sacrificing time on developer environment configurations.","metadata":{"source":"https://www.gitpod.io/customers/redwoodjs","loc":{"lines":{"from":107,"to":113}}}}],["1102",{"pageContent":"Redwood also integrated the “Open in Gitpod” button in their <code>[contributing.md](https://github.com/redwoodjs/redwood/blob/main/CONTRIBUTING.md#browser-based-development-setup)</code> and recorded a 3min Gitpod + RedwoodJS walk-through [video](https://www.youtube.com/watch?v=_kMuTW3x--s) to help contributors understand the alternative to a tedious setup on their local machine.\n\n<img src=\"/images/customers/redwoodjs/about-gitpod.png\" alt=\"About Gitpod\" class=\"rounded-t-2xl\" />\n\nThe team also frequently hosts workshops for anyone interested to contribute to the project. Having workshop participants start their developer environment in Gitpod makes sure the time is best used for explaining how to actually contribute rather than troubleshooting everyone’s setup.\n\n> “It’s just brilliant and so simple to use.”","metadata":{"source":"https://www.gitpod.io/customers/redwoodjs","loc":{"lines":{"from":115,"to":121}}}}],["1103",{"pageContent":"> “It’s just brilliant and so simple to use.”\n\nWith more and more contributions coming in as Pull Requests, the maintainers of Redwood benefit from efficient multitrack development every day. Being able to open a fully prebuilt and context aware workspace for reviewing a PR in parallel, allows them to continue with their work instantly after approving the PR. It also helps unblocking others greatly and speeds up developer velocity.\n\n> Reviewing pull requests is delightful because they are prebuilt and ready for review!”","metadata":{"source":"https://www.gitpod.io/customers/redwoodjs","loc":{"lines":{"from":121,"to":125}}}}],["1104",{"pageContent":"> Reviewing pull requests is delightful because they are prebuilt and ready for review!”\n\nThe team at Gitpod is proud to support the open source community and projects through our product. We’re doing everything we can to streamline the experience for contributors to develop open source projects. We launched [Gitpod for Open Source](/for/opensource) to let open source contributors use Gitpod without usage limits on any public repository. We’ve also launched an Open Source Sustainability Fund [[1](/blog/gitpod-open-source-sustainability-fund)] with an initial investment of USD 30.000 and give our employees the chance to donate $1.500USD to open source projects of their choice for successful referrals of new hires.\n\nWe’re thankful for the collaboration with Redwood and the interview with Tom Preston-Werner and team that led to this case study.\n\n</Story>","metadata":{"source":"https://www.gitpod.io/customers/redwoodjs","loc":{"lines":{"from":125,"to":131}}}}],["1105",{"pageContent":"---\ntitle: Scaling from 3 to 45 engineers in 5 months\nexcerpt: Gitpod helped engineers at Shares.io become more productive and focused. It cut the onboarding process for new hires down to 10 minutes. Gitpod also removed any friction in dev environment management and  day to day collaboration, saving every engineer half a day per week.\nslug: shares-io\nimage: teaser.png\ndate: Thursday, 3 February 2022 06:00:00 UTC\npageTitle: \"Shares.io case study: Scaling from 3 to 45 engineers\"\npageDescription: Scaling from 3 to 45 engineers in 5 months on the back of Gitpod. Cutting onboarding times to 10 minutes. Saving half a day per engineer / week.\nkeywords: DevX, velocity, growth, onboarding, shares.io\n---\n\n<script lang=\"ts\" context=\"module\">\n  export const prerender = true;\n</script>","metadata":{"source":"https://www.gitpod.io/customers/shares-io","loc":{"lines":{"from":1,"to":14}}}}],["1106",{"pageContent":"<script lang=\"ts\" context=\"module\">\n  export const prerender = true;\n</script>\n\n<script lang=\"ts\">\n\timport CustomerHero from \"$lib/components/customers/customer-hero.svelte\";\n\timport CompanyBenefits from \"$lib/components/customers/company-benefits.svelte\";\n\timport Section from \"$lib/components/section.svelte\";\n\timport Story from \"$lib/components/customers/story.svelte\";\n\timport Quote from \"$lib/components/quote.svelte\";\n  \timport OpenGraph from \"$lib/components/open-graph.svelte\";\n</script>\n\n<OpenGraph\ndata={{\n    description:\n      \"Scaling from 3 to 45 engineers in 5 months on the back of Gitpod. Cutting onboarding times to 10 minutes. Saving half a day per engineer / week.\",\n    title: \"Shares.io case study: Scaling from 3 to 45 engineers\",\n    keywords: \"DevX, velocity, growth, onboarding, shares.io\",\n  }}\n/>","metadata":{"source":"https://www.gitpod.io/customers/shares-io","loc":{"lines":{"from":14,"to":34}}}}],["1107",{"pageContent":"<CustomerHero\ntitle=\"Scaling from 3 to 45 engineers in 5 months on the back of Gitpod\"\ntext=\"Gitpod helped engineers at Shares.io become more productive and focused. It removed any friction in the onboarding process, dev environment management and the day to day collaboration.\"\nlogo={{\n\t\tsrc: \"/svg/customers/shares-io.svg\",\n\t\talt: \"shares.io\"\n\t}}\ncard={{\n\t\timage: \"/images/customers/shares-io/teaser.png\",\n\t\tdetails:{\n\t\t\tindustry: \"Finance\",\n\t\t\tplan: \"Organization, SaaS\",\n\t\t\tpeople: {\n\t\t\t\ttitle: \"Engineers\",\n\t\t\t\ttext: \"45+\"\n\t\t\t},\n\t\t\twebsite: {\n\t\t\t\thref: \"https://shares.io/\",\n\t\t\t\ttext: \"shares.io\",\n\t\t\t}\n\t\t}\n\t}}\n/>\n\n<CompanyBenefits\nbenefits={[\n{\ntitle: \"10min\",\ntext: \"Onboarding time for new hires\",\n},\n{\ntitle: \"0.5 days\",\ntext: \"saved per engineer / week\",\n},\n{\ntitle: \"100%\",\ntext: \"of engineers develop w/ Gitpod\",\n}]}\n/>","metadata":{"source":"https://www.gitpod.io/customers/shares-io","loc":{"lines":{"from":36,"to":74}}}}],["1108",{"pageContent":"<Section>\n\t<Quote\n\t\tquote=\"Gitpod has been instrumental to our ability to scale&nbsp;so&nbsp;quickly.\"\n\t\tauthor={{\n\t\t\tname: \"François Ruty\",\n\t\t\tjobTitle: \"CTO at Shares.io\",\n\t\t}}\n\t/>\n</Section>\n\n<Story bannerImg=\"/images/customers/shares-io/banner.png\" text=\"Scaling from 3 to 45 engineers in 5 months on the back of Gitpod\">\n\nShares App is a community-powered investment platform where investors come to make trades, discuss opportunities with friends, discover new communities and get digestible investing insights while building long-term financial health – together.","metadata":{"source":"https://www.gitpod.io/customers/shares-io","loc":{"lines":{"from":76,"to":88}}}}],["1109",{"pageContent":"Last year, the team around CTO and co-founder François Ruty [raised $10m](https://techcrunch.com/2021/08/25/shares-is-a-new-stock-trading-app-with-a-focus-on-social-features/) from world famous investors like Peter Thiel. François was looking to set up an engineering org with great developer experience and velocity to attract the best talent, onboard them quickly and build a stellar product. The team was only three engineers when Gitpod was introduced, and in less than a year, they grew to 45 engineers with plans to reach 80 engineers in 2022. The whole engineering team is using Gitpod as their only solution to develop.","metadata":{"source":"https://www.gitpod.io/customers/shares-io","loc":{"lines":{"from":90,"to":90}}}}],["1110",{"pageContent":"The Challenge: Inconsistencies and too much friction\n\nA local dev environment was never an option, given the drive for efficiency. François also knew that the company needed to hire many engineers quickly to build the product. Onboarding of new hires needs to be as frictionless as possible, and setting up developer environments should not stand in the way. “I was always aware of the importance of standardizing dev environments as much as possible. So we started out with Docker Compose, but it quickly turned out not to be sufficient for us”.\nThe setup was not frictionless, as engineers needed to understand how to spin up the containers and get an understanding of how they work to do so.","metadata":{"source":"https://www.gitpod.io/customers/shares-io","loc":{"lines":{"from":92,"to":95}}}}],["1111",{"pageContent":"On top of that, engineers were often blocked by peculiarities introduced by operating system differences. One issue led the hot reload in Typescript to take up to 1 minute until changes were reflected. “You’re out of the cognitive loop and simply can’t work effectively”. These turning points led François to explore cloud based development environments and to take a look at Gitpod.\n\n> “Gitpod is so easy to use, I didn’t need to talk to a representative; I just went to the website, clicked “get started” and knew immediately that was what we needed.”","metadata":{"source":"https://www.gitpod.io/customers/shares-io","loc":{"lines":{"from":97,"to":99}}}}],["1112",{"pageContent":"Standardized, ephemeral developer environments for the whole team\n\nThe main goal of Shares.io was to create an engineering org that can focus on core product development as much as possible without distractions. For Shares.io, the key arguments for Gitpod were that you can spin up pre-configured, automated dev environments that are versioned along with the code in Git and the concept of Ephemerality. François describes it as changes to the developer environments of the whole team only being one pull request away.\n\n> “This is how software development should be done. I shouldn’t even spend one minute of my day investigating my dev environment.”\n\nThe concept of Ephemerality immediately clicked with him as it prevents configuration drift through stateful dev environments. Each time a new workspace is started, it has the tools it needs and the latest code from the default branch already checked out.","metadata":{"source":"https://www.gitpod.io/customers/shares-io","loc":{"lines":{"from":101,"to":107}}}}],["1113",{"pageContent":"> “Configuration drift is a plague, you think you’re cleaning up behind you, but you’re not. You work on some tasks, you check out some branches and catastrophe is bound to happen at some point.“\n\nRather than frequent, very individual problems with local dev environment configurations that are hard to pin down, any problem connected to the dev environments with Gitpod is more systematic and\nthus easy to identify. As the whole team is kind of incentivized to fix it, there is no way that a problem with the dev environment can last longer than 15 minutes, says François Ruty.\n\n> “Nobody likes to debug a dev environment; it just doesn’t create any&nbsp;value.”","metadata":{"source":"https://www.gitpod.io/customers/shares-io","loc":{"lines":{"from":109,"to":114}}}}],["1114",{"pageContent":"Onboarding new engineers in 10 minutes rather than a full day\n\nThe way Gitpod works allowed Shares.io to have very lean and fast onboarding processes for new hires. Rather than having to understand and set up all components upfront, engineers can launch a production-like environment with a single click and explore the different parts of the system at their own pace. “It turns onboarding into an interactive discovery where engineers can look at the code, the running processes, the terminals and ask questions based on that. It decreased the time to get new hires up and running from one full day to only 10 minutes.”\n\n> “Gitpod has been instrumental to our ability to scale so&nbsp;quickly.“\n\nOn the back of Gitpod, Shares.io has scaled from three engineers to more than 45 in less than 5 months. Their goal is to grow to 80 engineers within 2022 quickly.","metadata":{"source":"https://www.gitpod.io/customers/shares-io","loc":{"lines":{"from":116,"to":122}}}}],["1115",{"pageContent":"Ongoing productivity gains are the true magic\n\nFrançois points out that it’s not just the time savings from the dev environment set up during onboarding, but rather the day to day efficiency gains through using an ephemeral remote development solution that makes the real difference.\n\n> “Gitpod easily saves every engineer half a day per week. The amount of productivity we gain is&nbsp;staggering.”","metadata":{"source":"https://www.gitpod.io/customers/shares-io","loc":{"lines":{"from":124,"to":128}}}}],["1116",{"pageContent":"> “Gitpod easily saves every engineer half a day per week. The amount of productivity we gain is&nbsp;staggering.”\n\nFrançois explains that the ability to spin up new workspaces in different contexts allows them to parallelize development. This helps to unblock each other, review PRs and move on with their tasks swiftly. All that while they stay focused, without making changes to the configurations. This greatly increases the development velocity and also the ability to rapidly deploy a production hotfix by spinning up a dev environment out of a release branch. Prebuilds accelerate all this and “put a lot of grease in the wheels” as the wait time is reduced since dependencies have been installed and builds ran even before a workspace in a new context is started.","metadata":{"source":"https://www.gitpod.io/customers/shares-io","loc":{"lines":{"from":128,"to":130}}}}],["1117",{"pageContent":"All engineers at Shares.io are using Gitpod as a default way of development, and every future hire will embark on the same journey. We’re thankful for the collaboration with Shares and for the interview with François Ruty that led to this case study.\n\n</Story>","metadata":{"source":"https://www.gitpod.io/customers/shares-io","loc":{"lines":{"from":132,"to":134}}}}],["1118",{"pageContent":"---\ntitle: From internal hackathon to 20% fewer hotfixes\nexcerpt: Vizlib started using Gitpod for an internal hackathon and eventually moved their whole development to the cloud. This reduced the onboarding time for new hires from two days to one hour and resulted in 20% fewer hotfixes after release.\nslug: vizlib\nimage: teaser.png\ndate: Thursday, 3 February 2022 05:00:00 UTC\npageTitle: \"Vizlib case study: 20% fewer hotfixes with Gitpod\"\npageDescription: By moving their whole development to the cloud, Vizlib reduced onboarding time for new hires from 2d to 1h. 20% fewer hotfixes after release through Gitpod.\nkeywords: vizlib, astrato, data visualisation, hackathon\n---\n\n<script lang=\"ts\" context=\"module\">\n  export const prerender = true;\n</script>","metadata":{"source":"https://www.gitpod.io/customers/vizlib","loc":{"lines":{"from":1,"to":14}}}}],["1119",{"pageContent":"<script lang=\"ts\" context=\"module\">\n  export const prerender = true;\n</script>\n\n<script lang=\"ts\">\n\timport CustomerHero from \"$lib/components/customers/customer-hero.svelte\";\n\timport CompanyBenefits from \"$lib/components/customers/company-benefits.svelte\";\n\timport Section from \"$lib/components/section.svelte\";\n\timport Story from \"$lib/components/customers/story.svelte\";\n\timport Quote from \"$lib/components/quote.svelte\";\n  \timport OpenGraph from \"$lib/components/open-graph.svelte\";\n</script>\n\n<OpenGraph\ndata={{\n    description:\n      \"By moving their whole development to the cloud, Vizlib reduced onboarding time for new hires from 2d to 1h. 20% fewer hotfixes after release through Gitpod.\",\n    title: \"Vizlib case study: 20% fewer hotfixes with Gitpod\",\n    keywords: \"vizlib, astrato, data visualisation, hackathon\",\n  }}\n/>","metadata":{"source":"https://www.gitpod.io/customers/vizlib","loc":{"lines":{"from":14,"to":34}}}}],["1120",{"pageContent":"<CustomerHero\ntitle=\"An internal hackathon as catalyst to 20% fewer hotfixes with Gitpod\"\ntext=\"Vizlib used Gitpod to circumvent challenges with local development at an internal hackathon for their new cloud-native product, Astrato. They eventually moved their whole development to the cloud. This reduced the onboarding time for new hires from two days to one hour and resulted in 20% fewer hotfixes after release.\"\nlogo={{\n\t\tsrc: \"/svg/customers/astrato.svg\",\n\t\talt: \"Astrato\"\n\t}}\ncard={{\n\t\timage: \"/images/customers/vizlib/teaser.png\",\n\t\tdetails:{\n\t\t\tindustry: \"Data Analytics\",\n\t\t\tplan: \"Organization, SaaS\",\n\t\t\tpeople: {\n\t\t\t\ttitle: \"Engineers\",\n\t\t\t\ttext: \"80+\"\n\t\t\t},\n\t\t\twebsite: {\n\t\t\t\thref: \"https://astrato.io\",\n\t\t\t\ttext: \"astrato.io\",\n\t\t\t}\n\t\t}\n\t}}\n/>\n\n<CompanyBenefits\nbenefits={[\n{\ntitle: \"1 hour\",\ntext: \"Onboarding instead of 2 days\",\n},\n{\ntitle: \"20%\",\ntext: \"Fewer hotfixes after release\",\n},\n{\ntitle: \"100€\",\ntext: \"Cloud cost saved per dev/month\",\n}]}\n/>","metadata":{"source":"https://www.gitpod.io/customers/vizlib","loc":{"lines":{"from":36,"to":74}}}}],["1121",{"pageContent":"<Section>\n\t<Quote\n\t\tquote=\"Gitpod will become the default way of developing. Local development is just not an option anymore.\"\n\t\tauthor={{\n\t\t\tname: \"Konrad Mattheis\",\n\t\t\tjobTitle: \"CTO at Vizlib\",\n\t\t}}\n\t/>\n</Section>\n\n<Story bannerImg=\"/images/customers/vizlib/banner.png\" text=\"An internal hackathon as catalyst to move developer environments into the cloud\">\n\nVizlib builds powerful value-added products for Qlik Sense. Customers go beyond native Qlik Sense to supercharge their analytics. They are growing quickly on the back of their five value-added products, used by 1.000+ enterprise customers, and are now expanding into cloud-native BI with their new product, Astrato.\n\nThe engineering team under CTO Konrad Mattheis came to appreciate the benefits of Gitpod during a hackathon.","metadata":{"source":"https://www.gitpod.io/customers/vizlib","loc":{"lines":{"from":76,"to":90}}}}],["1122",{"pageContent":"Gitpod as an unexpected outcome from a Hackathon\n\nEngineers want to focus on being creative and writing code. For hackathons, this is even more true. In the case of Vizlib, [a five-day hackathon](https://astrato.io/blog/astrato-hackathon-innovating-and-improving-our-features-for-you/) was held to focus the team on the rapid development of new features and improvements for their new product, Astrato– a modern fully managed Cloud BI solution.\n\nNaturally, the last thing the team wanted was to waste time on dealing with configuration, setup tasks and making changes to their developer environment. But that was the exact challenge – since engineers from various areas with different dev stacks came together to collaborate towards the same goal and product. Making changes to running local developer environments was not an option to avoid breaking them for when they return to their regular work. Plus, compatibility issues with the Astrato workflow on Windows added another layer of complexity.","metadata":{"source":"https://www.gitpod.io/customers/vizlib","loc":{"lines":{"from":92,"to":96}}}}],["1123",{"pageContent":"> “We needed a fast way to make everyone ready to code in just one hour without touching the local environments.”\n\nThe CTO, Konrad Mattheis, explored cloud developer environments as an option to solve these challenges and started evaluating Gitpod.\n\nUsing remote development would firstly ensure that local developer environments remained untouched. And since Gitpod provisions powerful Linux containers under the hood, the OS compatibility wouldn’t be an issue either. Having a standardized configuration to provide everyone with the right set and versions of tools at the click of a button ensured consistency with no “but it works on my machine” surprises.\n\n> “Gitpod checked all the boxes, so all 72 participants used it throughout the hackathon week.”","metadata":{"source":"https://www.gitpod.io/customers/vizlib","loc":{"lines":{"from":98,"to":104}}}}],["1124",{"pageContent":"> “Gitpod checked all the boxes, so all 72 participants used it throughout the hackathon week.”\n\nKonrad Mattheis explained that the deep focus on development allowed for much higher productivity. Given the collaborative nature of hackathons, Gitpod’s features such as sharing running workspaces for pair programming or sharing snapshots of workspaces let the teams collaborate much closer and more efficiently. The hackathon was a huge success and resulted in 10 new features or improvements to Astrato, more than initially expected. Read more in their Astrato [blog post](https://astrato.io/blog/astrato-hackathon-innovating-and-improving-our-features-for-you/).","metadata":{"source":"https://www.gitpod.io/customers/vizlib","loc":{"lines":{"from":104,"to":106}}}}],["1125",{"pageContent":"An unintended outcome of the hackathon was the improvement of the development workflow at Vizlib: inspired by the efficiency of remote development with Gitpod, the team decided to move their whole developer environments to the cloud altogether. CTO Konrad Mattheis noted that the hackathon acted as a catalyst, making it more obvious that the aforementioned challenges are not exclusive to hackathons but significantly impact the day-to-day work of their engineering organization. Vizlib develops on a dockerized Kubernetes Stack with only full-stack engineers that use a variety of machines with different operating systems. This led to inconsistent, error-prone dev environments due to configuration drift.\n\n> “Nearly every week, a few developers complained that they couldn’t work because the system couldn’t be built due to changes they were unaware of.”","metadata":{"source":"https://www.gitpod.io/customers/vizlib","loc":{"lines":{"from":108,"to":110}}}}],["1126",{"pageContent":"A smoother development process with improved collaboration and onboarding\n\nVizlib operates in squads consisting of engineers, QA testers, product managers and designers. Konrad shares that one of the biggest advantages of moving to Gitpod are the efficiency gains they get from better collaboration within and across squads. The ability to work on multiple issues, bugs or PRs and spin up workspaces that are fully prebuilt by the time they are started, resulted in massive time savings. Vizlib estimates that every engineer saves a minimum of two hours per week, purely by not having to fix their developer environments anymore. Excluding efficiency gains through increased flow state and more efficient collaboration.\n\nIt also made the development process more robust by having fewer differences across the developer and production environments and allowing for better testing. Gitpod improved the accessibility to QA engineers and designers, which lifted development velocity and quality.","metadata":{"source":"https://www.gitpod.io/customers/vizlib","loc":{"lines":{"from":112,"to":116}}}}],["1127",{"pageContent":"> “The ability for QAs to easily test a branch resulted in 20% fewer hotfixes after releases.”\n\nHaving newly hired engineers use automated developer environments in the cloud significantly reduces friction, onboarding time and allows them to contribute from the get-go. In the past, it took two days for an engineer to set up their dev environment, while it now only takes around an hour to get started.\n\nTo support the rapid business growth, Vizlib plans to hire five additional product squads with 10 FTE each during 2022 (see Vizlib’s [career page](https://careers.vizlib.com/) for current opportunities), where these efficiency gains will have a massive impact. On top of that, CAPEX expenditures can be reduced as there is no need for overpowered machines anymore. Even without that, Vizlib estimates the cost savings to be more than $100 per month per engineer.\n\n> “Gitpod will become the default way of developing. Local development is just not an option anymore.”","metadata":{"source":"https://www.gitpod.io/customers/vizlib","loc":{"lines":{"from":118,"to":124}}}}],["1128",{"pageContent":"> “Gitpod will become the default way of developing. Local development is just not an option anymore.”\n\nWe’re thankful for the collaboration with Vizlib and the interview with Konrad Mattheis that led to this case study.\n\n</Story>","metadata":{"source":"https://www.gitpod.io/customers/vizlib","loc":{"lines":{"from":124,"to":128}}}}],["1129",{"pageContent":"**Note**\nPlease think about updating the `/events` page when adding a new event.\n\nThe contents for it live in `lib/contents/events.ts`\n\nThank you :) !!","metadata":{"source":"https://www.gitpod.io/events/_note","loc":{"lines":{"from":1,"to":6}}}}],["1130",{"pageContent":"**Note**\nPlease think about updating the `/events` page when adding a new webinar\n\nThe contents for it live in `lib/contents/events.ts`\n\nThank you :) !!","metadata":{"source":"https://www.gitpod.io/webinars/_note","loc":{"lines":{"from":1,"to":6}}}}],["1131",{"pageContent":"---\nsection:\ntitle: Configure Gitpod\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Configure Gitpod\n\n> **Looking for a comprehensive guide on how to configure Gitpod workspaces?** <br/> <br/> See [Configuring Gitpod](/docs/configure/workspaces).\n\n## Workspaces\n\n[Workspaces](/docs/configure/workspaces) are the developer environments where you code in Gitpod.\n\nWorkspaces can be created on their own, or as part of a [Project](/docs/configure/projects).\n\n- [Workspace Image](/docs/configure/workspaces/workspace-image)\n- [Tasks](/docs/configure/workspaces/tasks)\n- [Ports](/docs/configure/workspaces/ports)\n- [Collaboration](/docs/configure/workspaces/collaboration)\n- [Multi-repo](/docs/configure/workspaces/multi-repo)\n- [Workspace Classes](/docs/configure/workspaces/workspace-classes)","metadata":{"source":"https://www.gitpod.io/docs/configure","loc":{"lines":{"from":1,"to":25}}}}],["1132",{"pageContent":"User Settings\n\n[User settings](/docs/configure/user-settings) allow you to customize your own personal Gitpod experience.\n\n- [Browser Extension](/docs/configure/user-settings/browser-extension)\n- [Browser Settings](/docs/configure/user-settings/browser-settings)\n- [Browser Bookmarklet](/docs/configure/user-settings/browser-bookmarklet)\n- [Dotfiles](/docs/configure/user-settings/dotfiles)\n- [SSH](/docs/configure/user-settings/ssh)\n- [Access Tokens](/docs/configure/user-settings/access-tokens)","metadata":{"source":"https://www.gitpod.io/docs/configure","loc":{"lines":{"from":27,"to":36}}}}],["1133",{"pageContent":"Projects\n\n[Projects](/docs/configure/projects) are the connection between Gitpod and one or more git repositories and allow you to manage [Prebuilds](/docs/configure/projects/prebuilds). Like Workspaces, Projects are always associated with an [Organization](/docs/configure/orgs).\n\n- [Prebuilds](/docs/configure/projects/prebuilds)\n- [Incremental Prebuilds](/docs/configure/projects/incremental-prebuilds)\n- [Last Successful Prebuild](/docs/configure/projects/last-successful-prebuild)\n- [Environment Variables](/docs/configure/projects/environment-variables)\n\n## Organizations\n\n[Organizations](/docs/configure/orgs) in Gitpod allow you to share projects and their settings amongst many organization individuals.","metadata":{"source":"https://www.gitpod.io/docs/configure","loc":{"lines":{"from":38,"to":49}}}}],["1134",{"pageContent":"Organizations\n\n[Organizations](/docs/configure/orgs) in Gitpod allow you to share projects and their settings amongst many organization individuals.\n\n## Authentication\n\n- [GitLab](/docs/configure/authentication/gitlab)\n- [GitHub](/docs/configure/authentication/github)\n- [BitBucket](/docs/configure/authentication/bitbucket)\n- [GitHub Enterprise](/docs/configure/authentication/github-enterprise)\n- [Bitbucket Server](/docs/configure/authentication/bitbucket-server)","metadata":{"source":"https://www.gitpod.io/docs/configure","loc":{"lines":{"from":49,"to":59}}}}],["1135",{"pageContent":"FAQs\n\n### No internet access over HTTPS (port 443) on Docker containers with custom network\n\nWhen creating a new Docker network and starting a fresh container, you might encounter issues with HTTPS requests not receiving a response. HTTP requests, however, work as expected.\n\nThis issue is likely caused by a wrong MTU (Maximum Transmission Unit) setting. To fix the problem, create a new network and specify the MTU value as 1440:\n\n```bash\ndocker network create mynetwork --opt \"com.docker.network.driver.mtu=1440\"\n```\n\nFor more discussions related to MTU value causing problems, refer to the [Gitpod Discord](https://discord.com/channels/816244985187008514/1077511515525091329).","metadata":{"source":"https://www.gitpod.io/docs/configure","loc":{"lines":{"from":61,"to":73}}}}],["1136",{"pageContent":"---\nsection:\ntitle: Help\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Help\n\n- [Building Gitpod](/docs/help/public-roadmap/release-cycle)\n- [Troubleshooting](/docs/help/troubleshooting)","metadata":{"source":"https://www.gitpod.io/docs/help","loc":{"lines":{"from":1,"to":13}}}}],["1137",{"pageContent":"---\nsection:\ntitle: Troubleshooting\n---\n\n<script context=\"module\">\n  export const prerender = true;\n  import Keybind from \"$lib/components/keybind.svelte\";\n</script>\n\n# Troubleshooting\n\nIf you cannot find your issue here or in the documentation, please contact Gitpod via our [Support page](/support).\n\n## Gitpod logs in VS Code Browser and Desktop\n\nThese logs contain information about the workspace, the session, and the Visual Studio Code environment. They are useful for diagnosing connection issues and other unexpected behavior.\n\n- Open the Visual Studio Code Command Palette (<Keybind>CtrlCmd + Shift + P</Keybind>) and type **Export logs**, select **Gitpod: Export all logs** from the list to download a zip file containing all of the logs.\n\n**Important:** The content of these logs should **NOT** be shared publicly as they could contain sensitive information about your workspace. Instead, send them to troubleshooting@gitpod.io along with a link to a corresponding GitHub issue if needed.","metadata":{"source":"https://www.gitpod.io/docs/help/troubleshooting","loc":{"lines":{"from":1,"to":21}}}}],["1138",{"pageContent":"Gitpod logs in JetBrains Gateway\n\nThese logs contain information about the workspace, the session, and the JetBrains Gateway. They are useful for diagnosing issues when connecting to a workspace, issues from Gateway Plugins and issues preventing the JetBrains Client to open.\n\n- Open the **Help** menu and select **Collect Logs and Diagnostic Data** option. After a few seconds, the file manager window will show up, revealing the location where the zip file containing all the logs has been saved.\n\n**Important:** The content of these logs should **NOT** be shared publicly as they could contain sensitive information about your workspace. Instead, send them to troubleshooting@gitpod.io along with a link to a corresponding GitHub issue if needed.","metadata":{"source":"https://www.gitpod.io/docs/help/troubleshooting","loc":{"lines":{"from":23,"to":29}}}}],["1139",{"pageContent":"**Note:** Ensure you are using the latest version of [JetBrains Gateway](https://www.jetbrains.com/help/idea/remote-development-a.html#gateway) and [Gitpod JetBrains Gateway plugin](https://plugins.jetbrains.com/plugin/18438-gitpod-gateway), as issues from older versions might have already been fixed.","metadata":{"source":"https://www.gitpod.io/docs/help/troubleshooting","loc":{"lines":{"from":31,"to":31}}}}],["1140",{"pageContent":"Gitpod logs in JetBrains Client\n\nThese logs contain information about the workspace, the session, and the JetBrains IDE. They are useful for diagnosing connection issues, issues from IDE Plugins, and any unexpected behavior from the client and the server.\n\n- Open the **Help** menu and select **Collect Host and Client logs** option. After a few seconds, the file manager window will show up, revealing the location where the zip file containing all the logs has been saved.\n\n**Important:** The content of these logs should **NOT** be shared publicly as they could contain sensitive information about your workspace. Instead, send them to troubleshooting@gitpod.io along with a link to a corresponding GitHub issue if needed.","metadata":{"source":"https://www.gitpod.io/docs/help/troubleshooting","loc":{"lines":{"from":33,"to":39}}}}],["1141",{"pageContent":"**Note:** Ensure you are using the latest version of both [JetBrains Gateway](https://www.jetbrains.com/help/idea/remote-development-a.html#gateway) and [Gitpod JetBrains Gateway plugin](https://plugins.jetbrains.com/plugin/18438-gitpod-gateway), as issues from older versions might have already been fixed.","metadata":{"source":"https://www.gitpod.io/docs/help/troubleshooting","loc":{"lines":{"from":41,"to":41}}}}],["1142",{"pageContent":"Why doesn't the \"ClearURLs\" browser extension work with Gitpod?\n\nThe ClearURLs browser extension for [Google Chrome](https://chrome.google.com/webstore/detail/clearurls/lckanjgmijmafbedllaakclkaicjfmnk?hl=en) and [Mozilla Firefox](https://addons.mozilla.org/en-US/firefox/addon/clearurls/) inhibits Gitpod workspaces from initialising and the problem manifests with the following symptoms:\n\n- The dark theme doesn't load\n- The bottom left Gitpod button is missing\n- The VS Code Marketplace does not load\n- Settings Sync does not work\n\nThis issue can be resolved by disabling \"ETag filtering\" in ClearURLs’ settings. An [issue has been created](https://gitlab.com/KevinRoebert/ClearUrls/-/issues/977) that requests to whitelist Gitpod by default and we would appreciate your upvotes on the issue.","metadata":{"source":"https://www.gitpod.io/docs/help/troubleshooting","loc":{"lines":{"from":43,"to":52}}}}],["1143",{"pageContent":"What should I do if JetBrains Gateway and Gitpod aren't working?\n\n1. Ensure you are using the latest version of [JetBrains Gateway](https://www.jetbrains.com/help/idea/remote-development-a.html#gateway)\n2. Ensure you are using the latest version of the [Gitpod JetBrains Gateway plugin](https://plugins.jetbrains.com/plugin/18438-gitpod-gateway)","metadata":{"source":"https://www.gitpod.io/docs/help/troubleshooting","loc":{"lines":{"from":54,"to":57}}}}],["1144",{"pageContent":"What can I do if I have unsynced data inside a workspace but it's not starting?\n\nWhile this is a very critical issue, our workspace-team would eventually look into why it's happening but on the other hand you might not be able to wait while things get fixed. As an user you can try and get your workspace data yourself:\n\n1. Go to the [Gitpod Dashboard](https://gitpod.io/workspaces)\n2. Find your workspace from the list\n3. Download your workspace like so:\n   ![Download a workspace](../../../static/images/docs/troubleshooting/download_a_workspace.png)\n4. You can now either try opening a new workspace or use your local machine for a while.\n5. The downloaded workspace is a `tar` file which can be extracted with `tar -xf <your-workspace-filename-here>` command on a new Gitpod workspace or in your Linux/MacOS machine. You can use `7-zip` to extract if you're on windows and don't have `tar`.","metadata":{"source":"https://www.gitpod.io/docs/help/troubleshooting","loc":{"lines":{"from":59,"to":68}}}}],["1145",{"pageContent":"---\nsection: integrations\ntitle: Integrations\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Integrations\n\n- [Tailscale](/docs/integrations/tailscale)\n- [JetBrains Gateway](/docs/integrations/jetbrains-gateway)","metadata":{"source":"https://www.gitpod.io/docs/integrations","loc":{"lines":{"from":1,"to":13}}}}],["1146",{"pageContent":"---\nsection: integrations\ntitle: Tailscale\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Tailscale\n\nWith Tailscale you can automatically and securely connect your Gitpod workspace to other development resources, whether in the cloud or on prem, such as a production database behind your company’s firewall. You can also spin up several Gitpod workspaces that can talk to each other.\n\n[Tailscale](https://tailscale.com/) is built on top of the point-to-point open-source [WireGuard](https://www.wireguard.com/) protocol which powers an encrypted mesh network or `tailnet`. At Gitpod we are big fans of their product and recently announced an [official partnership](/blog/tailscale) with them.","metadata":{"source":"https://www.gitpod.io/docs/integrations/tailscale","loc":{"lines":{"from":1,"to":14}}}}],["1147",{"pageContent":"Integration\n\n> **Note:** Using [Tailscale ssh](https://tailscale.com/kb/1193/tailscale-ssh/) _to_ a workspace is not supported right now and _from_ requires Tailscale 1.32 or later. If your workspace image was created before 1.32 was available you can [force](/docs/configure/workspaces/workspace-image#manually-rebuild-a-workspace-image) a rebuild without having to update your `.gitpod.Dockerfile`.\n\nIf you’re already using Tailscale, the following steps need to be done (see https://github.com/gitpod-io/demo-tailscale-with-gitpod for a working example):\n\n1. Install `tailscale` through a custom `.gitpod.Dockerfile` by adding the following layer to it.\n\n```Dockerfile\nUSER root\n\n# Install jq (if not done already). Required for the .gitpod.yml tasks below.","metadata":{"source":"https://www.gitpod.io/docs/integrations/tailscale","loc":{"lines":{"from":16,"to":27}}}}],["1148",{"pageContent":"1. Install `tailscale` through a custom `.gitpod.Dockerfile` by adding the following layer to it.\n\n```Dockerfile\nUSER root\n\n# Install jq (if not done already). Required for the .gitpod.yml tasks below.\n\nRUN curl -fsSL https://pkgs.tailscale.com/stable/ubuntu/focal.gpg | sudo apt-key add - \\\n     && curl -fsSL https://pkgs.tailscale.com/stable/ubuntu/focal.list | sudo tee /etc/apt/sources.list.d/tailscale.list \\\n     && apt-get update \\\n     && apt-get install -y tailscale jq \\\n     && update-alternatives --set ip6tables /usr/sbin/ip6tables-nft","metadata":{"source":"https://www.gitpod.io/docs/integrations/tailscale","loc":{"lines":{"from":27,"to":38}}}}],["1149",{"pageContent":"2. Start `tailscale` on workspace start and maintain the machine state across workspaces by adding the following tasks to your `.gitpod.yml`.\n\n```yaml\ntasks:\n  - name: tailscaled\n    command: |\n      if [ -n \"${TAILSCALE_STATE_MYPROJECT}\" ]; then\n        # restore the tailscale state from gitpod user's env vars\n        sudo mkdir -p /var/lib/tailscale\n        echo \"${TAILSCALE_STATE_MYPROJECT}\" | sudo tee /var/lib/tailscale/tailscaled.state > /dev/null\n      fi\n      sudo tailscaled\n  - name: tailscale\n    command: |\n      if [ -n \"${TAILSCALE_STATE_MYPROJECT}\" ]; then\n        sudo -E tailscale up\n      else\n        sudo -E tailscale up --hostname \"gitpod-${GITPOD_GIT_USER_NAME// /-}-$(echo ${GITPOD_WORKSPACE_CONTEXT} | jq -r .repository.name)\"\n        # store the tailscale state into gitpod user\n        gp env TAILSCALE_STATE_MYPROJECT=\"$(sudo cat /var/lib/tailscale/tailscaled.state)\"\n      fi","metadata":{"source":"https://www.gitpod.io/docs/integrations/tailscale","loc":{"lines":{"from":41,"to":61}}}}],["1150",{"pageContent":"This configuration will register a Tailscale node based on the following name scheme: `gitpod-{user-name}-{repo-name}`. On first workspace start you will get asked to login through the terminal. When this was successful a Tailscale machine state will be stored in your Gitpod's account. On subsequent starts of workspaces on this project this machine state will be restored.\n\nIF you enable [Tailscale's Magic DNS](https://tailscale.com/kb/1081/magicdns/) you get a stable domain for your project's services that you can reach from any other Tailscale node (e.g. another workspace or your local machine).\n\n> **Warning:** Be aware that starting and connecting multiple workspaces for the same project in parallel results in unreliable network connections.","metadata":{"source":"https://www.gitpod.io/docs/integrations/tailscale","loc":{"lines":{"from":64,"to":68}}}}],["1151",{"pageContent":"---\nsection: integrations\ntitle: JetBrains Gateway\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# JetBrains Gateway\n\n> {title} is currently in [Beta](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/6576).\n\n[JetBrains Gateway](https://www.jetbrains.com/remote-development/gateway/) is your single entry point to all remote development environments when using JetBrains IDE's. JetBrains Gateway is a compact desktop app that allows you to work remotely with a JetBrains IDE without downloading the full IDE. Gitpod works with JetBrains Gateway via a custom Gitpod [JetBrains Gateway plugin](https://plugins.jetbrains.com/plugin/18438-gitpod-gateway).\n\nUsing JetBrains Gateway on Desktop with Gitpod, allows you to:\n\n1. Create a new Gitpod workspace\n2. View and open your 20 latest Gitpod workspaces\n\nAll without leaving needing to leave your desktop.","metadata":{"source":"https://www.gitpod.io/docs/integrations/jetbrains-gateway","loc":{"lines":{"from":1,"to":21}}}}],["1152",{"pageContent":"JetBrains IDE support\n\nJetBrains Gateway is the underlying technology which enables the Gitpod integration. Support for JetBrains IDEs will be rolled out incrementally. The [JetBrains Gateway plugin](https://plugins.jetbrains.com/plugin/18438-gitpod-gateway) is a standalone feature, so its release cycle is independent individual JetBrains IDE support.\n\n- [IntelliJ](/docs/references/ides-and-editors/intellij)\n- [GoLand](/docs/references/ides-and-editors/goland)\n- [PhpStorm](/docs/references/ides-and-editors/phpstorm)\n- [PyCharm](/docs/references/ides-and-editors/pycharm)\n- [RubyMine](/docs/references/ides-and-editors/rubymine)\n- [WebStorm](/docs/references/ides-and-editors/webstorm)\n- [Rider](/docs/references/ides-and-editors/rider)\n- [CLion](/docs/references/ides-and-editors/clion)","metadata":{"source":"https://www.gitpod.io/docs/integrations/jetbrains-gateway","loc":{"lines":{"from":23,"to":34}}}}],["1153",{"pageContent":"Getting started\n\n`youtube: 8djaRYT2FAY`","metadata":{"source":"https://www.gitpod.io/docs/integrations/jetbrains-gateway","loc":{"lines":{"from":36,"to":38}}}}],["1154",{"pageContent":"1. **Install [JetBrains Gateway](https://www.jetbrains.com/help/idea/remote-development-a.html#gateway)** - With the [JetBrains Gateway and Gitpod](/docs/integrations/jetbrains-gateway) plugin you can create and manage your latest 20 Gitpod workspaces.\n2. **Install the Gitpod plugin** - Open JetBrains Gateway and you'll see the Gitpod logo on the main page. Click \"install\" to install the [Gitpod plugin](https://plugins.jetbrains.com/plugin/18438-gitpod-gateway) for JetBrains Gateway.\n3. **Update your Gitpod preferences** - Select your preferred JetBrains IDE on the [Gitpod preferences page](https://gitpod.io/preferences) which will set your default IDE for future workspace starts.","metadata":{"source":"https://www.gitpod.io/docs/integrations/jetbrains-gateway","loc":{"lines":{"from":40,"to":42}}}}],["1155",{"pageContent":"3. **Update your Gitpod preferences** - Select your preferred JetBrains IDE on the [Gitpod preferences page](https://gitpod.io/preferences) which will set your default IDE for future workspace starts.\n4. **Start (or restart) your workspace** - Either start a workspace directly from within the [JetBrains Gateway](/docs/integrations/jetbrains-gateway) via the Gitpod plugin **OR** open a new workspace directly in Gitpod where on workspace start you will be prompted to open your preferred JetBrains IDE for that workspace.","metadata":{"source":"https://www.gitpod.io/docs/integrations/jetbrains-gateway","loc":{"lines":{"from":42,"to":43}}}}],["1156",{"pageContent":"How does JetBrains and Gitpod work?\n\nOn Gitpod workspace start, a JetBrains IDE is loaded into your workspace according to your preferences. When you start a workspace the JetBrains Gateway application downloads a thin client which then connects to your Gitpod workspace.\n\nSince [JetBrains Gateway](https://www.jetbrains.com/remote-development/gateway/) downloads the thin client for you, **you do not need to download, open or modify your JetBrains IDE directly**. JetBrains licensing still applies, but is applied to the connecting thin client, not the backend running in your Gitpod workspace.","metadata":{"source":"https://www.gitpod.io/docs/integrations/jetbrains-gateway","loc":{"lines":{"from":45,"to":49}}}}],["1157",{"pageContent":"Setting a JetBrains IDE as a preference\n\nTo start a workspace using JetBrains from your browser, you need to first set your preferred JetBrains IDE as your user preference.\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Updating Gitpod IDE preferences to {title}\" src=\"/images/editors/select-jetbrains-ide.webm\" type=\"video/webm\"></video>\n    <figcaption>Updating Gitpod IDE preferences to a JetBrains IDE</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/integrations/jetbrains-gateway","loc":{"lines":{"from":51,"to":58}}}}],["1158",{"pageContent":"Opening a JetBrains IDE from Gitpod\n\nWhen starting a new workspace from Gitpod in the browser (with a JetBrains IDE set as your preference) you will see a prompt to open JetBrains Gateway. Clicking the prompt will immediately launch JetBrains Gateway and begin downloading the IDE thin client. The downloaded thin client will exactly match the IDE running in your Gitpod workspace.\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Opening a JetBrains IDE from Gitpod\" src=\"/images/editors/opening-the-thin-jetbrains-client.webm\" type=\"video/webm\"></video>\n    <figcaption>Opening JetBrains Gateway from Gitpod</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/integrations/jetbrains-gateway","loc":{"lines":{"from":60,"to":67}}}}],["1159",{"pageContent":"Updating the Gitpod plugin in JetBrains Gateway\n\nSince Gitpod and JetBrains works via JetBrains Gateway, you do not need to download a JetBrains IDE. Also, **you do not need to alter your plugin settings in your JetBrains IDE**. All setup and configuration for Gitpod and JetBrains is completed within JetBrains Gateway.\n\n<figure>\n<video playsinline autoplay no-controls loop muted  class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Updating the Gitpod plugin in JetBrains Gateway\" src=\"/images/editors/update-jetbrains-gateway-settings.webm\" type=\"video/webm\"></video>\n    <figcaption>Updating the Gitpod plugin in JetBrains Gateway</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/integrations/jetbrains-gateway","loc":{"lines":{"from":69,"to":76}}}}],["1160",{"pageContent":"Opening a JetBrains IDE from JetBrains Gateway\n\nYou can also start, and connect to Gitpod workspaces directly from JetBrains Gateway. Click Gitpod in the left-hand side of JetBrains Gateway, and paste a source control context URL directly to start a new workspace, or click connect on a running or stopped workspace.\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Opening a JetBrains IDE from Gateway\" src=\"/images/editors/open-from-jetbrains-gateway.webm\" type=\"video/webm\"></video>\n    <figcaption>Opening a JetBrains IDE from Gateway</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/integrations/jetbrains-gateway","loc":{"lines":{"from":78,"to":85}}}}],["1161",{"pageContent":"Configuring the JetBrains Gateway Host\n\nBy default the JetBrains Gateway Gitpod plugin points to `gitpod.io` as the default host for listing, opening and managing Gitpod workspaces.\n\nIf you're using Gitpod [Self-Hosted](/docs/configure/self-hosted/latest), to update the host:\n\n1. Open JetBrains Gateway\n2. Navigate to \"preferences\" (OSX) or \"settings\" (Windows/Linux)\n3. Search for \"Gitpod\" (or find it under \"tools\")\n4. Modify the `Gitpod Host` field\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Setting the Gitpod host in the JetBrains Gateway plugin\" src=\"/images/jetbrains-gateway/jetbrains-gateway-host.png\">\n    <figcaption>Setting the Gitpod host in the JetBrains Gateway plugin (OSX)</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/integrations/jetbrains-gateway","loc":{"lines":{"from":87,"to":101}}}}],["1162",{"pageContent":"Configuring JetBrains Gateway Networking\n\nThe following diagram details how the JetBrains Gateway client connects and communicates with Gitpod workspaces, for situations such as configuring corporate networking requirements.\n\n1. **JetBrains.com** - The JetBrains IDE thin client images are downloaded dynamically from JetBrains Gateway to match the exact IDE that is running in Gitpod. Access to jetbrains.com must be granted for an air-gapped Gitpod installation with JetBrains Gateway configuration to work.\n2. **JetBrains Gateway** - The JetBrains Gateway client is the component which fetches information about Gitpod workspaces, pulled from the Gitpod API via HTTPS.\n3. **JetBrains Thin Client** - The thin client connects to the Gitpod workspace via SSH, routed via the workspace proxy (\"ws-proxy\"). The SSH server (SSH Gateway) runs in the workspace proxy, not in the workspace directly.","metadata":{"source":"https://www.gitpod.io/docs/integrations/jetbrains-gateway","loc":{"lines":{"from":103,"to":109}}}}],["1163",{"pageContent":"![JetBrains networking setup](/images/editors/jetbrains-architecture-dark-theme.png)\n![JetBrains networking setup](/images/editors/jetbrains-architecture-light-theme.png)","metadata":{"source":"https://www.gitpod.io/docs/integrations/jetbrains-gateway","loc":{"lines":{"from":111,"to":112}}}}],["1164",{"pageContent":"Troubleshooting\n\n- [What should I do if JetBrains Gateway and Gitpod aren’t working?](/docs/help/troubleshooting#what-should-i-do-if-jetbrains-gateway-and-gitpod-arent-working)\n- [Gitpod logs in JetBrains Gateway](/docs/help/troubleshooting#gitpod-logs-in-jetbrains-gateway)\n- [Gitpod logs in JetBrains Client](/docs/help/troubleshooting#gitpod-logs-in-jetbrains-client)","metadata":{"source":"https://www.gitpod.io/docs/integrations/jetbrains-gateway","loc":{"lines":{"from":114,"to":118}}}}],["1165",{"pageContent":"---\nsection:\ntitle: Introduction\n---\n\n<script lang=\"ts\" context=\"module\">\n  export const prerender = true;\n  export const load = async ({ fetch }) => {\n    const res = await fetch(\"/api/changelogs\");\n    if (!res.ok) {\n      throw new Error(res.statusText);\n    }\n    const changelogEntries = await res.json();\n    return { props: { changelogEntries } };\n  };\n</script>\n\n<script lang=\"ts\">\n  import { setContext } from \"svelte\";\n  import GetStarted from \"$lib/components/docs/landing-page/get-started.svelte\";\n  import Timeline, { contextKeyChangelogEntries } from \"$lib/components/docs/landing-page/timeline/timeline.svelte\";\n  import OpenGraph from \"$lib/components/open-graph.svelte\";\n\n  export let changelogEntries;\n\n  setContext(contextKeyChangelogEntries, changelogEntries);\n</script>","metadata":{"source":"https://www.gitpod.io/docs/introduction","loc":{"lines":{"from":1,"to":27}}}}],["1166",{"pageContent":"export let changelogEntries;\n\n  setContext(contextKeyChangelogEntries, changelogEntries);\n</script>\n\n<OpenGraph\ndata={{\n    description:\n      \"Explore our docs to learn how to set up and configure your cloud developer environment. Quickstart. Getting started. Configure. Develop. IDEs. Editors. Integrations. Self-Hosted. Supply Chain Security.\",\n    title: \"Gitpod Documentation - Educate, Configure, Develop\",\n    keywords: \"documentation, how to, education, learn\",\n  }}\n/>\n\n<GetStarted />","metadata":{"source":"https://www.gitpod.io/docs/introduction","loc":{"lines":{"from":27,"to":41}}}}],["1167",{"pageContent":"Latest updates\n\n<Timeline />\n\nTo see all updates view our [changelog](/changelog)","metadata":{"source":"https://www.gitpod.io/docs/introduction","loc":{"lines":{"from":43,"to":47}}}}],["1168",{"pageContent":"---\nsection: compatibility\ntitle: Compatibility\n---\n\n<script lang=\"ts\" context=\"module\">\n    export const prerender = true;\n</script>\n\n<script lang=\"ts\">\n    import CompatibilityMatrix from '$lib/components/docs/compatibility-matrix.svelte';\n\n</script>\n\n# Compatibility\n\n> ⚠️ **Self-hosted as a product is no longer supported**\n>\n> The last official update of this product is the [November 2022 self-hosted release](https://www.gitpod.io/changelog/november-self-hosted-release). We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our [free community license](https://www.gitpod.io/community-license). However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n> Read [our blog on Gitpod Dedicated](/blog/introducing-gitpod-dedicated) to learn why we made the decision to discontinue self-hosted.","metadata":{"source":"https://www.gitpod.io/docs/references/compatibility","loc":{"lines":{"from":1,"to":20}}}}],["1169",{"pageContent":"This page shows you what components and services Gitpod is and is not compatible with. It is aimed at both individual developers that use Gitpod as well as admins that install and maintain a [Gitpod Self-Hosted](/docs/configure/self-hosted/latest) instance. You can filter the table to show only what is relevant to you.\n\n> **Note:** It is required to have at least one of each category. SaaS users can ignore the self-hosted specific categories (see filter)\n\n<CompatibilityMatrix />","metadata":{"source":"https://www.gitpod.io/docs/references/compatibility","loc":{"lines":{"from":22,"to":26}}}}],["1170",{"pageContent":"---\nsection: gp-cli\ntitle: Gitpod CLI\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Gitpod CLI\n\nGitpod workspaces include a command-line-utility (`gp`) that comes installed in all workspaces and prebuilds.\n\n> **Note:** The `gp` CLI is intended only to work inside a Gitpod workspace, and is not intended to be installed on your a local, or other machine.\n\n```text\nCommand line interface for Gitpod\n\nUsage:\n  gp [command]","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-cli","loc":{"lines":{"from":1,"to":20}}}}],["1171",{"pageContent":"Available Commands:\n  docs                Open Gitpod Documentation in default browser\n  env                 Controls workspace environment variables.\n  help                Help about any command\n  info                Display workspace info, such as its ID, class, etc.\n  init                Create a Gitpod configuration for this project.\n  open                Opens a file in Gitpod\n  ports               Interact with workspace ports.\n  preview             Opens a URL in the IDE's preview\n  snapshot            Take a snapshot of the current workspace\n  stop                Stop current workspace\n  sync-await          Awaits an event triggered using gp sync-done\n  sync-done           Notifies the corresponding gp sync-await calls that this event has happened\n  tasks               Interact with workspace tasks\n  timeout             Interact with workspace timeout configuration\n  top                 Display usage of workspace resources (CPU and memory)","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-cli","loc":{"lines":{"from":22,"to":37}}}}],["1172",{"pageContent":"tasks               Interact with workspace tasks\n  timeout             Interact with workspace timeout configuration\n  top                 Display usage of workspace resources (CPU and memory)\n  url                 Prints the URL of this workspace\n  validate            [experimental] Validates the workspace (useful to debug a workspace configuration)\n  version             Prints the version of the CLI","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-cli","loc":{"lines":{"from":37,"to":42}}}}],["1173",{"pageContent":"Flags:\n  -h, --help   help for gp\n\nUse \"gp [command] --help\" for more information about a command.\n```","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-cli","loc":{"lines":{"from":44,"to":48}}}}],["1174",{"pageContent":"init\n\nGitpod workspaces can be configured - see [Configuring Workspaces](/docs/configure) for more details. `gp init` generates a default `.gitpod.yml` file. You can customize it to match your requirements.\n\nAlternatively, `gp init -i` is an interactive guide which helps create the `.gitpod.yml` configuration file based on a few questions you answer.\n\nExample to start a interactive guide of `.gitpod.yml` configuration file:\n\n```sh\ngp init -i\n```\n\n## validate\n\n> The `gp validate` command is currently in [Beta](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/7671).\n\nValidates the workspace configuration in `.gitpod.yml` and workspace images.\n\n```sh\ngp validate\n```","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-cli","loc":{"lines":{"from":50,"to":70}}}}],["1175",{"pageContent":"open\n\nModern editors/IDE's support command line tooling to open a file (e.g. VS Code `code foo.txt`). In Gitpod, this can be done using `gp open <filename>`.\nWe also added common aliases for `gp open`: `code` and `open`.\n\nExample to open the `README.md` file in the current directory:\n\n```sh\ngp open README.md\n```\n\n## preview\n\n`gp preview` opens a URL. The default is to show the URL in a preview pane within the editor or IDE directly. Alternatively, you can show the preview a new tab with the `--external` flag.\n\nMake sure you provide a valid URL, i.e. including the protocol. For example, http://localhost:8080.\n\nYou can also use `gp preview <url> --external` to open the URL in a new browser tab.\n\nExample opening a gitpod workspace port 3000 as a tab using `gp url` and `gp preview`:\n\n```sh\ngp preview $(gp url 3000) --external\n```","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-cli","loc":{"lines":{"from":72,"to":95}}}}],["1176",{"pageContent":"url\n\nGitpod workspaces can expose services to the internet. `gp url` provides the URL which points to a service served from a Gitpod workspace. For example `gp url 8080` prints the URL which points to the service listening on port 8080 in this current workspace.\n\nYou can combine the `preview` and the `url` command to open a certain path instead of the default URL.\n\nFor instance:\n\n```sh\ngp preview $(gp url 3000)/my/path/index.html\n```\n\nIf you put this into the `.gitpod.yml` to open the a certain page on startup, make sure you [ignore the default action](/docs/configure/workspaces/ports) when the port opens.","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-cli","loc":{"lines":{"from":97,"to":109}}}}],["1177",{"pageContent":"env\n\nWith `gp env API_ENDPOINT=https://api.example.com` you can set an `API_ENDPOINT` environment variable that is accessible for this project, even if you stop the workspace and start a new one.\n\nTo delete or unset an environment variable, you use `gp env -u API_ENDPOINT`.\n\nPlease refer to the help output provided by `gp env --help` for more use cases of the `gp env` command.\n\nFor instance, you can use following to get your all Gitpod environment variables:\n\n```sh\ngp env\n```\n\n## sync-await\n\nIn situations where you work with multiple terminals and one depends on a task in another terminal to complete, `gp sync-await <name>` waits until you call `gp sync-done <name>` in another terminal.\n\nSee [Start Tasks](/docs/configure/workspaces/tasks#wait-for-commands-to-complete) for a real-world example.","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-cli","loc":{"lines":{"from":111,"to":129}}}}],["1178",{"pageContent":"sync-done\n\nTo notify a `gp sync-await <name>` call (see previous chapter), you can call `gp sync-done <name>`.\n\nA common use case is the following where we have three terminals:\n\n- Terminal 1: A build process takes several minutes to complete. At the end, you call `gp sync-done build`.\n- Terminal 2: You use `gp sync-await build && npm run start-database` to wait for the build to complete before you start a database\n- Terminal 3: You use `gp sync-await build && npm run dev` to wait for the build to complete before you start the dev server.\n\nSee [Start Tasks](/docs/configure/workspaces/tasks#wait-for-commands-to-complete) for a real-world example.\n\n## snapshot\n\nFor sharing a complete clone of a workspace with others, `gp snapshot` is basically the CLI method for getting a snapshot URL. To learn more about snapshots, see [Collaboration & Sharing of Workspaces](/docs/configure/workspaces/collaboration#sharing-snapshots)\n\n```sh\ngp snapshot\n```","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-cli","loc":{"lines":{"from":131,"to":149}}}}],["1179",{"pageContent":"stop\n\n`gp stop` is the CLI method of stopping a workspace.\n\nExample to stop the current gitpod workspace using gitpod CLI:\n\n```sh\ngp stop\n```","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-cli","loc":{"lines":{"from":151,"to":159}}}}],["1180",{"pageContent":"tasks\n\nProgrammatically view and interact with workspace tasks as defined in the project's [.gitpod.yml](/docs/references/gitpod-yml). Useful when using the command line, such as ssh'ing into a workspace or after accidentally losing view of a terminal and it's output.\n\n### list\n\nReturns a table-formatted list of tasks, their name, state and the ID of the terminal in which the task is executed.\n\n> **Tip**: You can see the task you are currently attached to highlighted in green.\n\n```sh\ngp tasks list\n```\n\nUse `gp tasks list --no-color` to disable colors for the output. It also respects the [`NO_COLOR`](https://no-color.org/) & `GP_NO_COLOR` environment variable.","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-cli","loc":{"lines":{"from":161,"to":175}}}}],["1181",{"pageContent":"attach\n\nCreates a connection from a user terminal to a given workspace's task terminal. The session is interactive. Once attached, both stdin and stdout are streamed between the user and the remote terminal. Allowing the user to run commands directly in the task terminal.\n\nRun without arguments to get a selection prompt. When only one task is running, attach will skip the prompt and automatically connect.\n\n```sh\ngp tasks attach\n```\n\nAlternatively, specify the `Terminal ID` that you can see with `gp tasks list`:\n\n```sh\ngp tasks attach <id>\n```","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-cli","loc":{"lines":{"from":177,"to":191}}}}],["1182",{"pageContent":"stop\n\nInterrupts one or more running tasks and automatically closes their terminals. Useful when you don't need a certain task anymore, when authoring the [.gitpod.yml](/docs/references/gitpod-yml) file or when you start a workspace for projects with several tasks but you don't need them and want to save time and resources.\n\nRun without arguments to get a selection prompt. Only running tasks will be offered as a choice.\n\n```sh\ngp tasks stop\n```\n\nSpecify the `Terminal ID` that you can see with `gp tasks list`.\n\n```sh\ngp tasks stop <id>\n```\n\nRun with the `--all` flag to stop all running tasks.\n\n```sh\ngp tasks stop --all\n```","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-cli","loc":{"lines":{"from":193,"to":213}}}}],["1183",{"pageContent":"timeout\n\nInteract with workspace timeout configuration. You can learn more in [Life of a Workspace](/docs/configure/workspaces/workspace-lifecycle).\n\n```sh\ngp timeout show\n```\n\n> **Note:** You can only have one workspace with extended timeout at a time.\n\nThe default timeout, and the ability to extend a workspace timeout depends on your [billing configuration](/docs/configure/billing).\n\n### set\n\nSets the current workspace's timeout to the given value. The value must be a positive integer followed by a unit of time. The unit of time can be one of `m`, `h` for minutes and hours, respectively. The maximum workspace timeout is 24 hours.\n\n<!--\nTechnically, Following ones are also valid:\n\n* `gp timeout set 300m`\n* `gp timeout set 24h`\n\n=> But Let's use minutes for public interaction as it's the most common use case.\n\n-->\n\n```sh\ngp timeout set 300m\n```\n\n### show\n\nShows the current workspace's timeout.\n\n```sh\ngp timeout show\n```","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-cli","loc":{"lines":{"from":215,"to":251}}}}],["1184",{"pageContent":"show\n\nShows the current workspace's timeout.\n\n```sh\ngp timeout show\n```\n\n### extend\n\nExtends the current workspace timeout from the default, or currently set value to 180 minutes.\n\n```sh\ngp timeout extend\n```","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-cli","loc":{"lines":{"from":251,"to":265}}}}],["1185",{"pageContent":"info\n\nDisplays information about the current [workspace](/docs/configure/workspaces) (such as the workspace ID and URL) and also the [workspace class](/docs/configure/workspaces/workspace-classes).\n\n```sh\ngp info\n```\n\nUse `gp info --json` to get the output in JSON format for programmatic use in (e.g. in shell scripts).","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-cli","loc":{"lines":{"from":267,"to":275}}}}],["1186",{"pageContent":"ports\n\nProvides a way to manage a workspace's ports. Applies to both: ports defined in [.gitpod.yml](/docs/references/gitpod-yml) and ports that are undeclared but are opened during the lifetime of the workspace.\n\n### list\n\nOutputs a table-formatted list of ports along with their status, URL, name and description.\n\n```sh\ngp ports list\n```\n\nUse `gp ports list --no-color` to disable colors for the output. It also respects the [`NO_COLOR`](https://no-color.org/) & `GP_NO_COLOR` environment variable.","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-cli","loc":{"lines":{"from":277,"to":289}}}}],["1187",{"pageContent":"expose\n\nIn Gitpod, services/servers running on a port need to be _exposed_ before they become accessible from the internet. This process only works with services listening on `0.0.0.0` and not just `localhost`.\nSometimes it is not possible to make a server listen on `0.0.0.0`, e.g. because it is not your code and there are simply no means of configuration.\n\nIn that case, `gp ports expose <port>` can be used to forward all traffic form a socket listing on all network interfaces to your process listening on localhost only.\n\n```sh\ngp ports expose <port>\n```\n\n### await\n\nWhen writing tasks to be executed on workspace start, one sometimes wants to wait for an http service to be available. `gp ports await` does that.\n\nHere's an example that will open a certain path once a service is a available:\n\n```sh\ngp ports await 3000 && gp preview $(gp url 3000)/my/path/index.html\n```","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-cli","loc":{"lines":{"from":291,"to":310}}}}],["1188",{"pageContent":"visibility\n\nYou can change a port's visibility to make it only available for **users with workspace access** (`private`) or **everyone who knows the port's URL** (`public`). A port's default visibility is always `private`, unless configured differently from within [`.gitpod.yml`](/docs/references/gitpod-yml#portsnvisibility).\n\nHere's an example which will make port `3000` public:\n\n```sh\ngp ports visibility 3000:public\n```\n\nHere's an example which will make port `3000` private:\n\n```sh\ngp ports visibility 3000:private\n```","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-cli","loc":{"lines":{"from":312,"to":326}}}}],["1189",{"pageContent":"top\n\nDisplays the current workspace's class info along with the used and available CPU and memory.\n\n```sh\ngp top\n```\n\n- Use `gp top --json` to get the output in JSON format for programmatic use in (e.g. in shell scripts).\n\n- Use `gp top --no-color` to disable colors for the output. It also respects the [`NO_COLOR`](https://no-color.org/) & `GP_NO_COLOR` environment variable.\n\n## docs\n\nOpens the Gitpod documentation in a new browser tab.\n\n```sh\ngp docs\n```","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-cli","loc":{"lines":{"from":328,"to":346}}}}],["1190",{"pageContent":"---\nsection: gitpod-public-api\ntitle: Gitpod public API\n---\n\n<script lang=\"ts\">\n  import APIExample from \"$lib/components/docs/api-example.svelte\";\n</script>\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Gitpod public API\n\n> Access Tokens are currently in [Alpha](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/10798).\n\nThe Gitpod Public API grants direct access to Gitpod data for use cases such as integration into other 3rd party applications.","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":1,"to":18}}}}],["1191",{"pageContent":"Authentication\n\nTo authenticate requests, the Gitpod API utilises [Access Token](/docs/configure/user-settings/access-tokens). In the [Gitpod Settings](https://gitpod.io/tokens), you can view and manage your PAT Tokens (_Private Beta_).\n\nKeep in mind that your access tokens have a lot of power, so protect them carefully! Avoid disclosing your private Access Tokens in areas that are open to the public, such as GitHub, client-side code, and so forth.\n\nTo Authenticate you will need to pass an Access Token as an Authorization request header bearer token in the format `Bearer <YOUR_ACCESS_TOKEN>`.\n\nExample cURL command:\n\n```bash title=\"cURL\"\ncurl 'https://api.gitpod.io/gitpod.experimental.v1.TeamsService/ListTeams' \\\n  -H 'content-type: application/json' \\\n  -H 'Authorization: Bearer <YOUR_ACCESS_TOKEN>' \\\n  --data '{}'\n```\n\n## API Reference","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":20,"to":37}}}}],["1192",{"pageContent":"Resource: Workspaces","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":39,"to":39}}}}],["1193",{"pageContent":"List all workspaces\n\nLists all the workspaces belongs to the authenticated user. Currently, it returns only the first page of the results.\n\n<APIExample id=\"api-example\">\n\n<div slot=\"curlExample\">\n\n```bash title=\"cURL\"\ncurl 'https://api.gitpod.io/gitpod.experimental.v1.WorkspacesService/ListWorkspaces' \\\n  -H 'content-type: application/json' \\\n  -H 'Authorization: Bearer <YOUR_ACCESS_TOKEN>' \\\n  --data '{}'\n```\n\n</div>\n\n<div slot=\"goExample\">\n\n```go\nfunc ExampleListWorkspaces() {\n\ttoken := \"<YOUR_ACCESS_TOKEN>\"\n\n\tgitpod, err := client.New(client.WithCredentials(token))\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Failed to construct gitpod client %v\", err)\n\t\treturn\n\t}\n\n\tresponse, err := gitpod.Workspaces.ListWorkspaces(context.Background(), connect.NewRequest(&v1.ListWorkspacesRequest{}))\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Failed to list workspaces %v\", err)\n\t\treturn\n\t}\n\n\tfmt.Fprintf(os.Stdout, \"Retrieved workspaces %v\", response.Msg.GetResult())\n}","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":41,"to":77}}}}],["1194",{"pageContent":"</div>\n\n<div slot=\"responseExample\">\n\n```json\n{\n  \"result\": [\n    {\n      \"workspaceId\": \"<WORKSPACE_ID>\",\n      \"ownerId\": \"<USER_ID>\",\n      \"context\": {\n        \"contextUrl\": \"https://github.com/gitpod-io/empty\",\n        \"git\": {\n          \"normalizedContextUrl\": \"https://github.com/gitpod-io/empty\"\n        }\n      },\n      \"description\": \"gitpod-io/empty \",\n      \"status\": {\n        \"instance\": {\n          \"instanceId\": \"<INSTANCE_ID>\",\n          \"workspaceId\": \"<WORKSPACE_ID>\",\n          \"createdAt\": \"2022-12-19T08:36:47.254Z\",\n          \"status\": {\n            \"statusVersion\": \"<STATUS_VERSION>\",\n            \"phase\": \"PHASE_STOPPED\",\n            \"conditions\": {},\n            \"url\": \"https://<WORKSPACE_ID>.ws-us79.gitpod.io\",\n            \"admission\": \"ADMISSION_LEVEL_OWNER_ONLY\"\n          }\n        }\n      }\n    }\n  ]\n}","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":80,"to":113}}}}],["1195",{"pageContent":"</div>\n\n</APIExample>\n\n<br>\n\n**Request Parameters**:\n\n|         Parameter          |                Description                | Type  | Required |\n| :------------------------: | :---------------------------------------: | :---: | :------: |\n| `pageSize` (_Coming Soon_) | It is maximum number of results we expect | Int32 |  false   |\n\n<br>\n\n**Response Parameters**:","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":116,"to":130}}}}],["1196",{"pageContent":"|    Parameter    |                                                       Description                                                        |  Type  |\n| :-------------: | :----------------------------------------------------------------------------------------------------------------------: | :----: |\n| `nextPageToken` |                                                     Next Page Token                                                      | string |\n|  `workspaceId`  |                                                       Workspace Id                                                       | string |\n|    `ownerId`    |                                                         User Id                                                          | string |\n|   `projectId`   |                                                        Project Id                                                        | string |","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":132,"to":137}}}}],["1197",{"pageContent":"|   `projectId`   |                                                        Project Id                                                        | string |\n|    `context`    |                                 `contextUrl` with details of git or prebuild or snapshot                                 | string |\n|    `status`     | will return Instance Id if currently assigned Instance Id to this workspace. Empty when there is no Instance Id assigned | string |","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":137,"to":139}}}}],["1198",{"pageContent":"Get a workspace\n\nReturns a single workspace.\n\n<APIExample id=\"api-example\">\n\n<div slot=\"curlExample\">\n\n```bash title=\"cURL\"\ncurl 'https://api.gitpod.io/gitpod.experimental.v1.WorkspacesService/GetWorkspace' \\\n  -H 'content-type: application/json' \\\n  -H 'Authorization: Bearer <YOUR_ACCESS_TOKEN>' \\\n  --data '{\"workspaceId\":\"<WORKSPACE_ID>\"}'\n```\n\n</div>\n\n<div slot=\"goExample\">\n\n```go\nfunc ExampleGetWorkspace() {\n\ttoken := \"<YOUR_ACCESS_TOKEN>\"\n\n\tgitpod, err := client.New(client.WithCredentials(token))\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Failed to construct gitpod client %v\", err)\n\t\treturn\n\t}\n\n\tresponse, err := gitpod.Workspaces.GetWorkspace(context.Background(), connect.NewRequest(&v1.GetWorkspaceRequest{\n\t\tWorkspaceId: \"<WORKSPACE_ID>\",\n\t}))\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Failed to get workspace %v\", err)\n\t\treturn\n\t}\n\n\tfmt.Fprintf(os.Stdout, \"Retrieved workspace %v\", response.Msg.GetResult())\n}","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":141,"to":179}}}}],["1199",{"pageContent":"</div>\n\n<div slot=\"responseExample\">\n\n```json\n{\n  \"result\": {\n    \"workspaceId\": \"<WORKSPACE_ID>\",\n    \"ownerId\": \"<USER_ID>\",\n    \"context\": {\n      \"contextUrl\": \"https://github.com/gitpod-io/empty\",\n      \"git\": {\n        \"normalizedContextUrl\": \"https://github.com/gitpod-io/empty\"\n      }\n    },\n    \"description\": \"gitpod-io/empty \",\n    \"status\": {\n      \"instance\": {\n        \"instanceId\": \"<INSTANCE_ID>\",\n        \"workspaceId\": \"<WORKSPACE_ID>\",\n        \"createdAt\": \"2022-12-22T07:43:16.152Z\",\n        \"status\": {\n          \"statusVersion\": \"<STATUS_VERSION>\",\n          \"phase\": \"PHASE_RUNNING\",\n          \"conditions\": {\n            \"firstUserActivity\": \"2022-12-22T07:43:21.732Z\"\n          },\n          \"url\": \"https://<WORKSPACE_ID>.ws-us80.gitpod.io\",\n          \"admission\": \"ADMISSION_LEVEL_OWNER_ONLY\"\n        }\n      }\n    }\n  }\n}","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":182,"to":215}}}}],["1200",{"pageContent":"</div>\n\n</APIExample>\n\n<br>\n\n**Request Parameters**:\n\n|   Parameter   | Description  |  Type  | Required |\n| :-----------: | :----------: | :----: | :------: |\n| `workspaceId` | Workspace Id | string |   true   |\n\n<br>\n\n**Response Parameters**:","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":218,"to":232}}}}],["1201",{"pageContent":"|   Parameter   |                                                       Description                                                        |  Type  |\n| :-----------: | :----------------------------------------------------------------------------------------------------------------------: | :----: |\n| `workspaceId` |                                                       Workspace Id                                                       | string |\n|   `ownerId`   |                                                         User Id                                                          | string |\n|  `projectId`  |                                                        Project Id                                                        | string |\n|   `context`   |                                 `contextUrl` with details of git or prebuild or snapshot                                 | string |","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":234,"to":239}}}}],["1202",{"pageContent":"|   `context`   |                                 `contextUrl` with details of git or prebuild or snapshot                                 | string |\n|   `status`    | will return Instance Id if currently assigned Instance Id to this workspace. Empty when there is no Instance Id assigned | string |","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":239,"to":240}}}}],["1203",{"pageContent":"<!-- ### Get owner token\n\nIt returns the owner token of a workspace.\n\n**Usage**: `GetOwnerToken()`\n\n**Request Parameters**:\n\n|   Parameter   | Description  |  Type  | Required |\n| :-----------: | :----------: | :----: | :------: |\n| `workspaceId` | Workspace Id | string |   true   |\n\n<br>\n\n**Response Parameters**:\n\n| Parameter | Description |  Type  |\n| :-------: | :---------: | :----: |\n|  `token`  | Owner Token | string | -->","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":242,"to":260}}}}],["1204",{"pageContent":"Create Workspace (_Coming Soon_)\n\nCreates a new workspace from any context URL (Repository, Issues, Pull Requests, Files, etc.)\n\n### Start workspace (_Coming Soon_)\n\nStarts an older workspace (instance).\n\n**Usage**: `StartWorkspace()`\n\n**Request Parameters**:\n\n|   Parameter   |              Description              |  Type  | Required |\n| :-----------: | :-----------------------------------: | :----: | :------: |\n| `workspaceId` | Workspace Id that needs to be stopped | string |   true   |\n\n<br>\n\n**Response Parameters**:\n\n|   Parameter    |         Description          |  Type  |\n| :------------: | :--------------------------: | :----: |\n|  `instanceId`  |         Instance Id          | string |\n| `workspaceUrl` | URL of the started workspace | string |","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":262,"to":285}}}}],["1205",{"pageContent":"Stop workspace\n\nStops a running workspace (instance).\n\n<APIExample id=\"api-example\">\n\n<div slot=\"curlExample\">\n\n```bash title=\"cURL\"\ncurl 'https://api.gitpod.io/gitpod.experimental.v1.WorkspacesService/StopWorkspace' \\\n  -H 'content-type: application/json' \\\n  -H 'Authorization: Bearer <YOUR_ACCESS_TOKEN>' \\\n  --data '{\"workspaceId\":\"<WORKSPACE_ID>\"}'\n```\n\n</div>\n\n<!-- Uncomment following, if we get some better response from API endpoint-->\n\n<!-- <div slot=\"responseExample\">\n\n```json\n{}\n```\n\n</div> -->\n\n</APIExample>\n\n**Request Parameters**:\n\n|   Parameter   |              Description              |  Type  | Required |\n| :-----------: | :-----------------------------------: | :----: | :------: |\n| `workspaceId` | Workspace Id that needs to be stopped | string |   true   |\n\n<br>\n\n**Response**: It stops the requested workspace.","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":287,"to":324}}}}],["1206",{"pageContent":"Delete workspace\n\nIt deletes the workspace & also stops the workspace if it is running.\n\n<APIExample id=\"api-example\">\n\n<div slot=\"curlExample\">\n\n```bash title=\"cURL\"\ncurl 'https://api.gitpod.io/gitpod.experimental.v1.WorkspacesService/DeleteWorkspace' \\\n  -H 'content-type: application/json' \\\n  -H 'Authorization: Bearer <YOUR_ACCESS_TOKEN>' \\\n  --data '{\"workspaceId\":\"<WORKSPACE_ID>\"}'\n```\n\n</div>\n\n<!-- Uncomment following, if we get some better response from API endpoint-->\n\n<!-- <div slot=\"responseExample\">\n\n```json\n{}\n```\n\n</div> -->\n\n</APIExample>\n\n**Request Parameters**:\n\n|   Parameter   |              Description              |  Type  | Required |\n| :-----------: | :-----------------------------------: | :----: | :------: |\n| `workspaceId` | Workspace Id that needs to be deleted | string |   true   |\n\n<br>\n\n**Response**: It deletes the requested workspace.\n\n---","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":326,"to":365}}}}],["1207",{"pageContent":"Resource: Teams","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":367,"to":367}}}}],["1208",{"pageContent":"Create a team\n\nCreates a team.\n\n<APIExample id=\"api-example\">\n\n<div slot=\"curlExample\">\n\n```bash title=\"cURL\"\ncurl 'https://api.gitpod.io/gitpod.experimental.v1.TeamsService/CreateTeam' \\\n  -H 'content-type: application/json' \\\n  -H 'Authorization: Bearer <YOUR_ACCESS_TOKEN>' \\\n  --data '{\"name\":\"<TEAM_NAME>\"}'\n```\n\n</div>\n\n<div slot=\"responseExample\">\n\n```json\n{\n  \"team\": {\n    \"id\": \"<TEAM_ID>\",\n    \"name\": \"<TEAM_NAME>\",\n    \"members\": [\n      {\n        \"userId\": \"<USER_ID>\",\n        \"role\": \"TEAM_ROLE_OWNER\",\n        \"memberSince\": \"2022-12-22T07:53:52.210Z\",\n        \"avatarUrl\": \"<USER_AVATAR_URL>\",\n        \"fullName\": \"<USER_FULL_NAME>\",\n        \"primaryEmail\": \"<USER_EMAIL>\"\n      }\n    ],\n    \"teamInvitation\": { \"id\": \"<TEAM_INVITATION_ID>\" }\n  }\n}","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":369,"to":405}}}}],["1209",{"pageContent":"</div>\n\n</APIExample>\n\n<br>\n\n**Request Parameters**:\n\n| Parameter | Description |  Type  | Required |\n| :-------: | :---------: | :----: | :------: |\n|  `name`   |  Team name  | string |   true   |\n\n<br>\n\n**Response Parameters**:\n\n|   Parameter    |        Description        |  Type  |\n| :------------: | :-----------------------: | :----: |\n|      `id`      |       UUID of Team        | string |\n|     `name`     |       Name of team        | string |\n| `creationTime` |   Creation time of team   | string |\n|   `members`    | List of members in a team | array  |","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":408,"to":429}}}}],["1210",{"pageContent":"Get a team\n\nReturns a single team.\n\n<APIExample id=\"api-example\">\n\n<div slot=\"curlExample\">\n\n```bash title=\"cURL\"\ncurl 'https://api.gitpod.io/gitpod.experimental.v1.TeamsService/GetTeam' \\\n  -H 'content-type: application/json' \\\n  -H 'Authorization: Bearer <YOUR_ACCESS_TOKEN>' \\\n  --data '{\"teamId\":\"<TEAM_ID>\"}'\n```\n\n</div>\n\n<div slot=\"goExample\">\n\n```go\nfunc ExampleGetTeam() {\n\ttoken := \"<YOUR_ACCESS_TOKEN>\"\n\n\tgitpod, err := client.New(client.WithCredentials(token))\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Failed to construct gitpod client %v\", err)\n\t\treturn\n\t}\n\n\tresponse, err := gitpod.Teams.GetTeam(context.Background(), connect.NewRequest(&v1.GetTeamRequest{\n\t\tTeamId: \"<TEAM_ID>\",\n\t}))\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Failed to get team %v\", err)\n\t\treturn\n\t}\n\n\tfmt.Fprintf(os.Stdout, \"Retrieved team %v\", response.Msg.GetTeam())\n}","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":431,"to":469}}}}],["1211",{"pageContent":"</div>\n\n<div slot=\"responseExample\">\n\n```json\n{\n  \"team\": {\n    \"id\": \"<TEAM_ID>\",\n    \"name\": \"<TEAM_NAME>\",\n    \"members\": [\n      {\n        \"userId\": \"<USER_ID>\",\n        \"role\": \"TEAM_ROLE_MEMBER\",\n        \"memberSince\": \"2022-12-22T08:05:20.465Z\",\n        \"avatarUrl\": \"<USER_AVATAR_URL>\",\n        \"fullName\": \"<USER_FULL_NAME>'s Bot\",\n        \"primaryEmail\": \"<USER_EMAIL>\"\n      },\n      {\n        \"userId\": \"<USER_ID>\",\n        \"role\": \"TEAM_ROLE_OWNER\",\n        \"memberSince\": \"2022-12-22T07:53:52.210Z\",\n        \"avatarUrl\": \"<USER_AVATAR_URL>\",\n        \"fullName\": \"<USER_FULL_NAME>\",\n        \"primaryEmail\": \"<USER_EMAIL>\"\n      }\n    ],\n    \"teamInvitation\": { \"id\": \"<TEAM_INVITATION_ID>\" }\n  }\n}","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":472,"to":501}}}}],["1212",{"pageContent":"</div>\n\n</APIExample>\n\n<br>\n\n**Request Parameters**:\n\n| Parameter | Description |  Type  | Required |\n| :-------: | :---------: | :----: | :------: |\n| `teamId`  |   Team Id   | string |   true   |\n\n**Response Parameters**:\n\n|   Parameter    |        Description        |  Type  |\n| :------------: | :-----------------------: | :----: |\n|      `id`      |       UUID of Team        | string |\n|     `name`     |       Name of team        | string |\n| `creationTime` |   Creation time of team   | string |\n|   `members`    | List of members in a team | array  |","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":504,"to":523}}}}],["1213",{"pageContent":"List all teams\n\nLists all the teams belongs to the authenticated user.\n\n<APIExample id=\"api-example\">\n\n<div slot=\"curlExample\">\n\n```bash title=\"cURL\"\ncurl 'https://api.gitpod.io/gitpod.experimental.v1.TeamsService/ListTeams' \\\n  -H 'content-type: application/json' \\\n  -H 'Authorization: Bearer <YOUR_ACCESS_TOKEN>' \\\n  --data '{}'\n```\n\n</div>\n\n<div slot=\"goExample\">\n\n```go\nfunc ExampleListTeams() {\n\ttoken := \"<YOUR_ACCESS_TOKEN>\"\n\tgitpod, err := client.New(client.WithCredentials(token))\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Failed to construct gitpod client %v\", err)\n\t\treturn\n\t}\n\tctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)\n\tdefer cancel()\n\tresponse, err := gitpod.Teams.ListTeams(ctx, connect.NewRequest(&v1.ListTeamsRequest{}))\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Failed to list teams %v\", err)\n\t\treturn\n\t}\n\n\tfmt.Fprintf(os.Stdout, \"Retrieved teams %v\", response.Msg.GetTeams())\n}","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":525,"to":561}}}}],["1214",{"pageContent":"</div>\n\n<div slot=\"responseExample\">\n\n```json\n{\n  \"teams\": [\n    {\n      \"id\": \"<TEAM_ID>\",\n      \"name\": \"<TEAM_NAME>\",\n      \"members\": [\n        {\n          \"userId\": \"<USER_ID>\",\n          \"role\": \"TEAM_ROLE_OWNER\",\n          \"memberSince\": \"2022-09-26T04:33:17.557Z\",\n          \"avatarUrl\": \"<USER_AVATAR_URL>\",\n          \"fullName\": \"<USER_FULL_NAME>\",\n          \"primaryEmail\": \"<USER_EMAIL>\"\n        }\n      ],\n      \"teamInvitation\": { \"id\": \"<TEAM_INVITATION_ID>\" }\n    },\n    {\n      \"id\": \"<TEAM_ID>\",\n      \"name\": \"<TEAM_NAME>\",\n      \"members\": [\n        {\n          \"userId\": \"<USER_ID>\",\n          \"role\": \"TEAM_ROLE_OWNER\",\n          \"memberSince\": \"2022-09-25T15:41:41.352Z\",\n          \"avatarUrl\": \"<USER_AVATAR_URL>\",\n          \"fullName\": \"<USER_FULL_NAME>\",\n          \"primaryEmail\": \"<USER_EMAIL>\"\n        }\n      ],\n      \"teamInvitation\": { \"id\": \"<TEAM_INVITATION_ID>\" }\n    }\n  ]\n}","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":564,"to":602}}}}],["1215",{"pageContent":"</div>\n\n</APIExample>\n<br>\n\n**Request Parameters**:\n\n| Parameter  |                Description                | Type  | Required |\n| :--------: | :---------------------------------------: | :---: | :------: |\n| `pageSize` | It is maximum number of results we expect | Int32 |  false   |\n\n<br>\n\n**Response Parameters**:\n\n| Parameter |       Description       | Type  |\n| :-------: | :---------------------: | :---: |\n|  `teams`  | List of teams of a user | array |","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":605,"to":622}}}}],["1216",{"pageContent":"Join a team\n\nJoins a team.\n\n<APIExample id=\"api-example\">\n\n<div slot=\"curlExample\">\n\n```bash title=\"cURL\"\ncurl 'https://api.gitpod.io/gitpod.experimental.v1.TeamsService/JoinTeam' \\\n  -H 'content-type: application/json' \\\n  -H 'Authorization: Bearer <YOUR_ACCESS_TOKEN>' \\\n  --data '{\"invitationId\":\"<TEAM_INVITATION_ID>\"}'\n```\n\n</div>\n\n<div slot=\"responseExample\">\n\n```json\n{\n  \"team\": {\n    \"id\": \"<TEAM_ID>\",\n    \"name\": \"<TEAM_NAME>\",\n    \"members\": [\n      {\n        \"userId\": \"<USER_ID>\",\n        \"role\": \"TEAM_ROLE_OWNER\",\n        \"memberSince\": \"2022-12-22T07:53:52.210Z\",\n        \"avatarUrl\": \"<USER_AVATAR_URL>\",\n        \"fullName\": \"<USER_FULL_NAME>\",\n        \"primaryEmail\": \"<USER_EMAIL>\"\n      }\n    ],\n    \"teamInvitation\": { \"id\": \"<TEAM_INVITATION_ID>\" }\n  }\n}","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":624,"to":660}}}}],["1217",{"pageContent":"</div>\n\n</APIExample>\n\n<br>\n\n**Request Parameters**:\n\n|   Parameter    |    Description     |  Type  | Required |\n| :------------: | :----------------: | :----: | :------: |\n| `invitationId` | Team Invitation ID | string |   true   |\n\n<br>\n\n**Response Parameters**:\n\n|   Parameter    |        Description        |  Type  |\n| :------------: | :-----------------------: | :----: |\n|      `id`      |       UUID of Team        | string |\n|     `name`     |       Name of team        | string |\n| `creationTime` |   Creation time of team   | string |\n|   `members`    | List of members in a team | array  |","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":663,"to":684}}}}],["1218",{"pageContent":"Reset team invitation\n\nResets the team invitation.\n\n<APIExample id=\"api-example\">\n\n<div slot=\"curlExample\">\n\n```bash title=\"cURL\"\ncurl 'https://api.gitpod.io/gitpod.experimental.v1.TeamsService/ResetTeamInvitation' \\\n  -H 'content-type: application/json' \\\n  -H 'Authorization: Bearer <YOUR_ACCESS_TOKEN>' \\\n  --data '{\"teamId\":\"<TEAM_ID>\"}'\n```\n\n</div>\n\n<div slot=\"responseExample\">\n\n```json\n{\n  \"teamInvitation\": {\n    \"id\": \"<TEAM_INVITATION_ID>\"\n  }\n}\n```\n\n</div>\n\n</APIExample>\n\n<br>\n\n**Request Parameters**:\n\n| Parameter |    Description     |  Type  | Required |\n| :-------: | :----------------: | :----: | :------: |\n| `teamId`  | Team Invitation ID | string |   true   |\n\n<br>\n\n**Response Parameters**:\n\n|   Parameter    |        Description        |  Type  |\n| :------------: | :-----------------------: | :----: |\n| `invitationId` | new Invitation Id of Team | string |","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":686,"to":731}}}}],["1219",{"pageContent":"Update a team member role\n\nUpdates a team member role\n\n<APIExample id=\"api-example\">\n\n<div slot=\"curlExample\">\n\n```bash title=\"cURL\"\ncurl 'https://api.gitpod.io/gitpod.experimental.v1.TeamsService/UpdateTeamMember' \\\n  -H 'content-type: application/json' \\\n  -H 'Authorization: Bearer <YOUR_ACCESS_TOKEN>' \\\n  --data '{\"teamId\":\"<TEAM_ID>\", \"teamMember\": {\"userId\":\"<USER_ID>\", \"role\":\"TEAM_ROLE_OWNER\"}}'\n```\n\n</div>\n\n<div slot=\"responseExample\">\n\n```json\n{\n  \"teamMember\": {\n    \"userId\": \"<USER_ID>\",\n    \"role\": \"TEAM_ROLE_OWNER\"\n  }\n}","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":733,"to":758}}}}],["1220",{"pageContent":"</div>\n\n<div slot=\"responseExample\">\n\n```json\n{\n  \"teamMember\": {\n    \"userId\": \"<USER_ID>\",\n    \"role\": \"TEAM_ROLE_OWNER\"\n  }\n}\n```\n\n</div>\n\n</APIExample>\n\n<br>\n\n**Request Parameters**:\n\n| Parameter |                          Description                           |  Type  | Required |\n| :-------: | :------------------------------------------------------------: | :----: | :------: |\n| `teamId`  |                           Team name                            | string |   true   |\n| `userId`  |             User ID of a team member being updated             | string |   true   |\n|  `role`   | Role of a team member: `TEAM_ROLE_OWNER` or `TEAM_ROLE_MEMBER` | string |   true   |\n\n<br>\n\n**Response Parameters**:\n\n| Parameter |      Description       |  Type  |\n| :-------: | :--------------------: | :----: |\n| `userId`  | User ID of team member | string |\n|  `role`   |    New role of team    | string |","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":758,"to":792}}}}],["1221",{"pageContent":"Delete team member\n\nDeletes a team member.\n\n<APIExample id=\"api-example\">\n\n<div slot=\"curlExample\">\n\n```bash title=\"cURL\"\ncurl 'https://api.gitpod.io/gitpod.experimental.v1.TeamsService/DeleteTeamMember' \\\n  -H 'content-type: application/json' \\\n  -H 'Authorization: Bearer <YOUR_ACCESS_TOKEN>' \\\n  --data '{\"teamId\":\"<TEAM_ID>\", \"teamMemberId\": \"<USER_ID>\"}'\n```\n\n</div>\n\n<!-- Uncomment following, if we get some better response from API endpoint-->\n\n<!-- <div slot=\"responseExample\">\n\n```json\n{}\n```\n\n</div> -->\n\n</APIExample>\n\n<br>\n\n**Request Parameters**:\n\n|   Parameter    |           Description           |  Type  | Required |\n| :------------: | :-----------------------------: | :----: | :------: |\n|    `teamId`    |            Team name            | string |   true   |\n| `teamMemberId` | Id of team member being updated | string |   true   |\n\n<br>\n\n**Response**: It deletes the team member from the team.","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":794,"to":834}}}}],["1222",{"pageContent":"Delete a team\n\nDeletes a team.\n\n<APIExample id=\"api-example\">\n\n<div slot=\"curlExample\">\n\n```bash title=\"cURL\"\ncurl 'https://api.gitpod.io/gitpod.experimental.v1.TeamsService/DeleteTeam' \\\n  -H 'content-type: application/json' \\\n  -H 'Authorization: Bearer <YOUR_ACCESS_TOKEN>' \\\n  --data '{\"teamId\":\"<TEAM_ID>\"}'\n```\n\n</div>\n\n<!-- Uncomment following, if we get some better response from API endpoint-->\n\n<!-- <div slot=\"responseExample\">\n\n```json\n{}\n```\n\n</div> -->\n\n</APIExample>\n\n<br>\n\n**Request Parameters**:\n\n| Parameter | Description |  Type  | Required |\n| :-------: | :---------: | :----: | :------: |\n| `teamId`  |  Team name  | string |   true   |\n\n<br>\n\n**Response**: It deletes the requested team.","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":836,"to":875}}}}],["1223",{"pageContent":"API language clients","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":877,"to":877}}}}],["1224",{"pageContent":"Go\n\nThe following is an example of how to use the Go client library with the Public API for retrieving teams data. Replace the environment variable `PERSONAL_PAT` with your own personal access token, for example: `export PERSONAL_PAT=<your-personal-pat>`\n\n```go\n// Download the helper library using go get -u github.com/gitpod-io/gitpod/components/public-api/go\npackage main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"os\"\n\n    \"github.com/bufbuild/connect-go\"\n    \"github.com/gitpod-io/gitpod/components/public-api/go/client\"\n    v1 \"github.com/gitpod-io/gitpod/components/public-api/go/experimental/v1\"\n)\n\nfunc main() {\n    token := \"<YOUR_ACCESS_TOKEN>\"\n\n    gitpod, err := client.New(client.WithCredentials(token))\n    if err != nil {\n        fmt.Fprintf(os.Stderr, \"Failed to construct gitpod client %v\", err)\n        return\n    }","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":879,"to":904}}}}],["1225",{"pageContent":"gitpod, err := client.New(client.WithCredentials(token))\n    if err != nil {\n        fmt.Fprintf(os.Stderr, \"Failed to construct gitpod client %v\", err)\n        return\n    }\n\n    response, err := gitpod.Teams.ListTeams(context.Background(), connect.NewRequest(&v1.ListTeamsRequest{}))\n    if err != nil {\n        fmt.Fprintf(os.Stderr, \"Failed to list teams %v\", err)\n        return\n    }\n\n    fmt.Fprintf(os.Stdout, \"Retrieved teams %v\", response.Msg.GetTeams())\n}\n```","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":904,"to":918}}}}],["1226",{"pageContent":"TypeScript\n\n> 🚧 Under development","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":920,"to":922}}}}],["1227",{"pageContent":"---\nsection: gitpod-yml\ntitle: .gitpod.yml\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# .gitpod.yml\n\nThe `.gitpod.yml` file instructs Gitpod on how to prepare and build a project, such as starting development servers and configuring [Prebuilds](/docs/configure/projects/prebuilds). Below is a full reference of all available properties. To see the underlying schema, please refer to [`gitpod-io/gitpod`](https://github.com/gitpod-io/gitpod/blob/main/components/gitpod-protocol/data/gitpod-schema.json) in the [gitpod-io/gitpod](https://github.com/gitpod-io/gitpod) repository.\n\n> For a more comprehensive configuration guide, see [configuring a project](/docs/configure/workspaces).","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-yml","loc":{"lines":{"from":1,"to":14}}}}],["1228",{"pageContent":"- [.gitpod.yml](#.gitpod.yml)\n  - [`additionalRepositories`](#additionalrepositories)\n  - [`checkoutLocation`](#checkoutlocation)\n  - [`coreDump`](#coreDump)\n  - [`gitConfig`](#gitconfig)\n  - [`github`](#github)\n    - [`prebuilds.addBadge`](#prebuildsaddbadge)\n    - [`prebuilds.addCheck`](#prebuildsaddcheck)\n    - [`prebuilds.addComment`](#prebuildsaddcomment)\n    - [`prebuilds.addLabel`](#prebuildsaddlabel)\n    - [`prebuilds.branches`](#prebuildsbranches)\n    - [`prebuilds.master`](#prebuildsmaster)\n    - [`prebuilds.pullRequests`](#prebuildspullrequests)\n    - [`prebuilds.pullRequestsFromForks`](#prebuildspullrequestsfromforks)\n  - [`image`](#image)\n    - [`image.file`](#imagefile)\n    - [`image.context`](#imagecontext)\n  - [`jetbrains`](#jetbrains)\n    - [`jetbrains.plugins`](#jetbrainsplugins)\n    - [`jetbrains.[product]`](#jetbrainsproduct)\n    - [`jetbrains.[product].plugins`](#jetbrainsproductplugins)\n    - [`jetbrains.[product].prebuilds`](#jetbrainsproductprebuilds)","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-yml","loc":{"lines":{"from":16,"to":37}}}}],["1229",{"pageContent":"- [`jetbrains.[product]`](#jetbrainsproduct)\n    - [`jetbrains.[product].plugins`](#jetbrainsproductplugins)\n    - [`jetbrains.[product].prebuilds`](#jetbrainsproductprebuilds)\n    - [`jetbrains.[product].vmoptions`](#jetbrainsproductvmoptions)\n  - [`ports`](#ports)\n    - [`ports[n].name`](#portsnname)\n    - [`ports[n].description`](#portsndescription)\n    - [`ports[n].onOpen`](#portsnonopen)\n    - [`ports[n].port`](#portsnport)\n    - [`ports[n].visibility`](#portsnvisibility)\n  - [`tasks`](#tasks)\n    - [`tasks[n].before`](#tasksnbefore)\n    - [`tasks[n].command`](#tasksncommand)\n    - [`tasks[n].env`](#tasksnenv)\n    - [`tasks[n].init`](#tasksninit)\n    - [`tasks[n].name`](#tasksnname)\n    - [`tasks[n].openIn`](#tasksnopenin)\n    - [`tasks[n].openMode`](#tasksnopenmode)\n    - [`tasks[n].prebuild`](#tasksnprebuild)\n  - [`mainConfiguration`](#mainconfiguration)\n  - [`vscode`](#vscode)\n    - [`vscode.extensions`](#vscodeextensions)\n  - [`workspaceLocation`](#workspacelocation)","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-yml","loc":{"lines":{"from":37,"to":59}}}}],["1230",{"pageContent":"`additionalRepositories`\n\n> additionalRepositories is currently in [Beta](/docs/help/public-roadmap/release-cycle). [Send feedback](https://github.com/gitpod-io/gitpod/issues/8623).\n\nDefines additional source control repositories to clone and where the repository is cloned under `/workspaces`\n\n<div class=\"overflow-x-auto\">\n\n| Type     | Default   |\n| -------- | --------- |\n| `object` | `<empty>` |\n\n</div>\n\n**Demo**\n\n<a href=\"https://gitpod.io/#https://github.com/gitpod-io/demo-multi-repo-frontend\"><img src=\"https://gitpod-staging.com/button/open-in-gitpod.svg\"/></a>\n\n**Example**\n\n```yaml\nadditionalRepositories:\n  - url: https://github.com/gitpod-io/demo-multi-repo-backend\n    # checkoutLocation is optional and relative to /workspaces.\n    # by default the location defaults to the repository name.\n    checkoutLocation: backend","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-yml","loc":{"lines":{"from":61,"to":86}}}}],["1231",{"pageContent":"When the above configuration is defined then the following additional steps happen when Gitpod workspace is started:\n\n1. If you open a workspace on a branch, Gitpod will clone the same-named branch in all repositories. If such a branch doesn’t exist Gitpod checks out the default branch.\n1. The contents of the branch is cloned under `/workspaces/`\n1. The contents of `https://github.com/gitpod-io/demo-multi-repo-backend` is cloned to `/workspaces/backend`\n\nAfter all of the source control repositories have been cloned then the `before`, `init` and `command` [tasks](https://www.gitpod.io/docs/configure/workspaces/tasks) are executed as per normal.\n\nIf you need to run commands (such as package installation or compilation) on the source control repositories which have been cloned then change your working directory to the use configured or default `checkoutLocation` location using the `before` task.\n\n**Example**","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-yml","loc":{"lines":{"from":89,"to":99}}}}],["1232",{"pageContent":"**Example**\n\n```yaml\n# example .gitpod.yml from https://github.com/gitpod-io/demo-multi-repo-frontend\nadditionalRepositories:\n  - url: https://github.com/gitpod-io/demo-multi-repo-backend\n    # checkoutLocation is optional and relative to /workspaces.\n    # by default the location defaults to the repository name.\n    checkoutLocation: backend\n\ntasks:\n  - name: backend\n    # change working directory as per configured in `checkoutLocation`\n    # which is configured above as `/workspaces/backend`\n    before: |\n      cd ../backend\n    init: |\n      echo npm install\n    command: |\n      echo npm run dev\n\n    # changing of working directory is not required as these tasks will\n    # by default by executed in `/workspaces/demo-multi-repo-frontend`\n  - name: frontend\n    init: |\n      echo npm install\n      echo npm run build\n    command: |\n      echo npm run dev\n```","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-yml","loc":{"lines":{"from":99,"to":128}}}}],["1233",{"pageContent":"`checkoutLocation`\n\nDefine where Gitpod checks out the project's code, relative to `/workspace`.\n\nIn most cases, this is not needed. If you work on an older Go project, please see the [Go Language Page](/docs/introduction/languages/go) for more details.\n\n<div class=\"overflow-x-auto\">\n\n| Type     | Default      |\n| -------- | ------------ |\n| `string` | `/workspace` |\n\n</div>\n\n**Example**\n\n```yaml\ncheckoutLocation: \"go/src/github.com/demo-apps/go-gin-app\"\n```","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-yml","loc":{"lines":{"from":130,"to":148}}}}],["1234",{"pageContent":"`coreDump`\n\nDefine workspace core dump behavior.\n\nFor most cases, setting the `coreDump` property is not required. However, it can be a valuable feature to debug C++, or when debugging add-ons in Rust, Python, or node.js.\n\n<div class=\"overflow-x-auto\">\n\n| Type     | Default   |\n| -------- | --------- |\n| `object` | `<empty>` |\n\n</div>\n\n**Example**\n\n```yaml\ncoreDump:\n  enabled: true\n```\n\nYou can also set custom size values for the generated core files using the `softLimit` and `hardLimit` values (see example below). The setting `softLimit` configures the upper limit on the size of the core dump file that will be produced if a process receives a core dump signal, while `hardLimit` allows setting a hard limit to act as a ceiling for the soft limit.\n\n```yaml\ncoreDump:\n  enabled: true\n  softLimit: <bytes>\n  hardLimit: <bytes>\n```\n\nFor more details, please see the [Linux man page for `getrlimit`](https://man7.org/linux/man-pages/man2/getrlimit.2.html)","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-yml","loc":{"lines":{"from":150,"to":180}}}}],["1235",{"pageContent":"`gitConfig`\n\nDefine a workspace's git configuration as key-value pairs.\n\nPlease refer to https://git-scm.com/docs/git-config#_values for a list of accepted values.\n\n<div class=\"overflow-x-auto\">\n\n| Type     | Default   |\n| -------- | --------- |\n| `object` | `<empty>` |\n\n</div>\n\n**Example**\n\n```yaml\ngitConfig:\n  alias.st: status\n  core.autocrlf: input\n```","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-yml","loc":{"lines":{"from":182,"to":202}}}}],["1236",{"pageContent":"`github`\n\nConfigure the [GitHub Gitpod](https://github.com/apps/gitpod-io) app. At this time, the following configuration is used to configure [continuous prebuilds](/docs/configure/projects/prebuilds) for GitHub repositories.\n\n<div class=\"overflow-x-auto\">\n\n| Type     | Default   |\n| -------- | --------- |\n| `object` | `<empty>` |\n\n</div>\n\n**Example**\n\n```yaml\ngithub:\n  prebuilds:\n    master: true\n    branches: true\n    pullRequests: true\n    pullRequestsFromForks: true\n    addCheck: false\n    addComment: false\n    addBadge: true\n```","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-yml","loc":{"lines":{"from":204,"to":228}}}}],["1237",{"pageContent":"`prebuilds.addBadge`\n\nGitpod can modify the description of a pull request to add an “Open in Gitpod” button. This approach produces fewer GitHub notifications than [adding a comment](#prebuildsaddcomment), but can also create a concurrent editing conflict when the bot and a user try to edit the description of a pull request at the same time.\n\n![An Open in Gitpod badge in a PR description](../../../static/images/docs/beta/references/gitpod-yml/references-gitpod-yml-github-badge.png)\n\n<div class=\"overflow-x-auto\">\n\n| Type      | Default |\n| --------- | ------- |\n| `boolean` | `false` |\n\n</div>","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-yml","loc":{"lines":{"from":230,"to":242}}}}],["1238",{"pageContent":"`prebuilds.addCheck`\n\nConfigure whether Gitpod registers itself as a status check to pull requests - much like a continuous integration system would do. By default a failing prebuild would not make the check fail. Set `prevent-merge-on-error` to block PR merging when prebuilds failed.\n\nTo learn more about status checks, please see the GitHub documentation [about status checks](https://docs.github.com/en/github/collaborating-with-pull-requests/collaborating-on-repositories-with-code-quality-features/about-status-checks).\n\n![Gitpod status check in a pull request](../../../static/images/docs/beta/references/gitpod-yml/references-gitpod-yml-github-check.png)\n\n<div class=\"overflow-x-auto\">\n\n| Type     | Default                  | Values                                    |\n| -------- | ------------------------ | ----------------------------------------- |\n| `string` | `prevent-merge-on-error` | `true`, `false`, `prevent-merge-on-error` |\n\n</div>","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-yml","loc":{"lines":{"from":244,"to":258}}}}],["1239",{"pageContent":"`prebuilds.addComment`\n\nGitpod can add a comment with an “Open in Gitpod” button to your pull requests. Alternatively, you could [add a badge](#prebuildsaddbadge) to the pull request's description.\n\n![An Open in Gitpod badge in a PR comment](../../../static/images/docs/beta/references/gitpod-yml/references-gitpod-yml-github-comment.png)\n\n<div class=\"overflow-x-auto\">\n\n| Type      | Default |\n| --------- | ------- |\n| `boolean` | `false` |\n\n</div>\n\n### `prebuilds.addLabel`\n\nDeprecated.\n\n### `prebuilds.branches`\n\nDefine whether Gitpod creates prebuilds for all branches.\n\n<div class=\"overflow-x-auto\">\n\n| Type      | Default |\n| --------- | ------- |\n| `boolean` | `false` |\n\n</div>\n\n### `prebuilds.master`\n\nDefine whether Gitpod creates prebuilds for the default branch.\n\n<div class=\"overflow-x-auto\">\n\n| Type      | Default |\n| --------- | ------- |\n| `boolean` | `true`  |\n\n</div>","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-yml","loc":{"lines":{"from":260,"to":300}}}}],["1240",{"pageContent":"`prebuilds.master`\n\nDefine whether Gitpod creates prebuilds for the default branch.\n\n<div class=\"overflow-x-auto\">\n\n| Type      | Default |\n| --------- | ------- |\n| `boolean` | `true`  |\n\n</div>\n\n### `prebuilds.pullRequests`\n\nDefine whether Gitpod creates prebuilds for pull requests from the original repository.\n\n<div class=\"overflow-x-auto\">\n\n| Type      | Default |\n| --------- | ------- |\n| `boolean` | `true`  |\n\n</div>\n\n### `prebuilds.pullRequestsFromForks`\n\nDefine whether Gitpod creates prebuilds for pull requests from forks.\n\n<div class=\"overflow-x-auto\">\n\n| Type      | Default |\n| --------- | ------- |\n| `boolean` | `false` |\n\n</div>","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-yml","loc":{"lines":{"from":300,"to":334}}}}],["1241",{"pageContent":"`image`\n\nDefine a custom Docker image to be used for workspaces. To learn more, please review [Custom Docker Image](/docs/configure/workspaces/workspace-image#configure-a-custom-dockerfile).\n\nPublic images are hosted on [Docker Hub](https://hub.docker.com/u/gitpod/) and can be referenced by their name, e.g. `ubuntu:latest`.\n\nTo see a list of Gitpod-provided images, please see [gitpod-io/workspace-images](https://github.com/gitpod-io/workspace-images).\n\n<div class=\"overflow-x-auto\">\n\n| Type                 | Default                 |\n| -------------------- | ----------------------- |\n| `object` or `string` | `gitpod/workspace-full` |\n\n</div>\n\n**Examples**\n\n_With a public image_\n\n```yaml\nimage: ubuntu:latest\n```\n\n_With a custom image_\n\n```yaml\nimage:\n  file: .gitpod.Dockerfile\n```\n\n_With an optional context_\n\n```yaml\nimage:\n  file: .gitpod.Dockerfile\n  context: ./docker-content\n```","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-yml","loc":{"lines":{"from":336,"to":373}}}}],["1242",{"pageContent":"`image.file`\n\nTo define a custom Docker image, you can use the following configuration:\n\nFor a list of examples, please see https://github.com/gitpod-io/workspace-images.\n\n<div class=\"overflow-x-auto\">\n\n| Type     | Default   |\n| -------- | --------- |\n| `string` | `<empty>` |\n\n</div>\n\n### `image.context`\n\nOptionally, you can set the `image.context`. This is useful when you want to copy files into the Docker image. The [Docker docs](https://docs.docker.com/engine/reference/builder/#usage) describe this in more detail.\n\n<div class=\"overflow-x-auto\">\n\n| Type     | Default   |\n| -------- | --------- |\n| `string` | `<empty>` |\n\n</div>","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-yml","loc":{"lines":{"from":375,"to":399}}}}],["1243",{"pageContent":"`jetbrains`\n\n> JetBrains is currently in [Beta](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/6576).\n\nDefine the integration between Gitpod and JetBrains IDEs.\n\n<div class=\"overflow-x-auto\">\n\n| Type     | Default   |\n| -------- | --------- |\n| `object` | `<empty>` |\n\n</div>\n\n### `jetbrains.plugins`\n\n> JetBrains plugin support (via gitpod.yml) is currently in [Beta](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/6576).\n\nDefine a list of plugins which should be installed for all compatible JetBrains IDEs when starting a workspace. To find the plugin identifier, from the [JetBrains Marketplace](https://plugins.jetbrains.com), find the desired plugin, open the 'Versions' tab, select any version and copy the 'Plugin ID' (like `${publisher}.${name}`).\n\n<div class=\"overflow-x-auto\">\n\n| Type    | Default   |\n| ------- | --------- |\n| `array` | `<empty>` |\n\n</div>","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-yml","loc":{"lines":{"from":401,"to":427}}}}],["1244",{"pageContent":"`jetbrains.[product]`\n\n> JetBrains is currently in [Beta](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/6576).\n\nDefine the integration between Gitpod and a specific JetBrains IDE. Install plugins and configure prebuilds to speed up the IDE indexing.\n\nSpecify the 'product' with one of the following values:\n\n- `intellij`\n- `goland`\n- `pycharm`\n- `phpstorm`\n\n<div class=\"overflow-x-auto\">\n\n| Type     | Default   |\n| -------- | --------- |\n| `object` | `<empty>` |\n\n</div>","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-yml","loc":{"lines":{"from":429,"to":448}}}}],["1245",{"pageContent":"`jetbrains.[product].plugins`\n\n> JetBrains plugin support (via gitpod.yml) is currently in [Beta](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/6576).\n\nDefine a list of plugins which should be installed for the given JetBrains IDE when starting a workspace. To find the plugin identifier, from the [JetBrains Marketplace](https://plugins.jetbrains.com), find the desired plugin, open the 'Versions' tab, select any version and copy the 'Plugin ID' (like `${publisher}.${name}`).\n\n<div class=\"overflow-x-auto\">\n\n| Type    | Default   |\n| ------- | --------- |\n| `array` | `<empty>` |\n\n</div>\n\n**Example**\n\n```yaml\njetbrains:\n  intellij:\n    plugins:\n      - zielu.gittoolbox\n      - izhangzhihao.rainbow.brackets\n```","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-yml","loc":{"lines":{"from":450,"to":472}}}}],["1246",{"pageContent":"`jetbrains.[product].prebuilds`\n\n> JetBrains prebuilds support (via gitpod.yml) is currently in [Alpha](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/6576).\n\nDefine whether Gitpod enables prebuilds for a specific JetBrains IDE.\n\n<div class=\"overflow-x-auto\">\n\n| Type     | Default   |\n| -------- | --------- |\n| `object` | `<empty>` |\n\n</div>\n\n**Example**\n\n```yaml\njetbrains:\n  intellij:\n    prebuilds:\n      version: stable\n```\n\nThe `version` is defined as follows:\n\n<div class=\"overflow-x-auto\">\n\n| Type     | Default  | Values                     |\n| -------- | -------- | -------------------------- |\n| `string` | `stable` | `stable`, `latest`, `both` |\n\n</div>","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-yml","loc":{"lines":{"from":474,"to":505}}}}],["1247",{"pageContent":"`jetbrains.[product].vmoptions`\n\n> Configuration of JVM options (via gitpod.yml) is currently in [Alpha](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/8704).\n\nConfigure JVM options for a specific JetBrains IDE.\n\n<div class=\"overflow-x-auto\">\n\n| Type     | Default   |\n| -------- | --------- |\n| `string` | `<empty>` |\n\n</div>\n\n**Example**\n\n```yaml\njetbrains:\n  intellij:\n    vmoptions: \"-Xmx4g\"\n```","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-yml","loc":{"lines":{"from":507,"to":527}}}}],["1248",{"pageContent":"`ports`\n\nConfigure how Gitpod treats various ports your application may listen on. You can learn more about this in the [Exposing Ports](/docs/configure/workspaces/ports) documentation.\n\n<div class=\"overflow-x-auto\">\n\n| Type    | Default   |\n| ------- | --------- |\n| `array` | `<empty>` |\n\n</div>\n\n**Example**\n\n```yaml\nports:\n  - name: Website\n    port: 3000\n    onOpen: open-preview\n  - name: VNC\n    description: full GUI Virtual Desktop\n    port: 6080\n    onOpen: open-browser\n  - name: Server\n    port: 10000\n    onOpen: ignore\n```\n\n### `ports[n].name`\n\nDefine a name for the port, which will be shown as a column in the output of `gp ports list` and in the `Port` column inside of the ports list in VS Code Browser and Desktop.\n\n[More detail](/docs/configure/workspaces/ports#specifying-port-names--descriptions)\n\n<div class=\"overflow-x-auto\">\n\n| Type     | Default   |\n| -------- | --------- |\n| `string` | `<empty>` |\n\n</div>","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-yml","loc":{"lines":{"from":529,"to":569}}}}],["1249",{"pageContent":"`ports[n].description`\n\nAdds a description to the port, which will be shown as a column in the output of `gp ports list`.\n\nYou can find the port's description in the ports view table column, following the `Address` field (the same description can be found in the `Remote Explorer` as a tooltip [on hover] of the port).\n\n<div class=\"overflow-x-auto\">\n\n| Type     | Default   |\n| -------- | --------- |\n| `string` | `<empty>` |\n\n</div>","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-yml","loc":{"lines":{"from":571,"to":583}}}}],["1250",{"pageContent":"`ports[n].onOpen`\n\nDefine what to do when Gitpod detects a given port is being listened on.\n\n<div class=\"overflow-x-auto\">\n\n| Type     | Default   | Values                                                                  |\n| -------- | --------- | ----------------------------------------------------------------------- |\n| `string` | `<empty>` | `open-browser`,<br><br>`open-preview`,<br><br>`notify`,<br><br>`ignore` |\n\n</div>\n\n**Please note:** For JetBrains IDEs connected to Gitpod via [JetBrains Gateway](/docs/integrations/jetbrains-gateway) `open-preview` will behave exactly the same as `open-browser`, as there is no functionality for a web preview in the JetBrains IDE.\n\n### `ports[n].port`\n\nDefine a single port or a range of ports, e.g. `3000-3100`.\n\n<div class=\"overflow-x-auto\">\n\n| Type                 | Default   |\n| -------------------- | --------- |\n| `number` or `string` | `<empty>` |\n\n</div>","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-yml","loc":{"lines":{"from":585,"to":609}}}}],["1251",{"pageContent":"`ports[n].visibility`\n\nDefine whether to expose the port publicly or keep it private.\n\nA public port allows you to share a URL for a given port with team members, for example if you want to get their feedback on a new feature you develop.\n\n<div class=\"overflow-x-auto\">\n\n| Type     | Default   | Values                     |\n| -------- | --------- | -------------------------- |\n| `string` | `private` | `private`,<br><br>`public` |\n\n</div>","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-yml","loc":{"lines":{"from":611,"to":623}}}}],["1252",{"pageContent":"`tasks`\n\nDefine how Gitpod prepares & builds your project and how it can start the project's development server(s). To learn more, please visit [Start Tasks](/docs/configure/workspaces/tasks). Each array element opens in its own terminal.\n\n<div class=\"overflow-x-auto\">\n\n| Type    | Default   |\n| ------- | --------- |\n| `array` | `<empty>` |\n\n</div>\n\n**Example**\n\n```yaml\ntasks:\n  - before: sh ./scripts/setup.sh\n    init: npm install\n    command: npm run dev\n  - name: Database\n    init: sh ./scripts/seed-database.sh\n    command: npm start-db\n    env:\n      DB_HOST: localhost:3306\n      DB_USER: readOnlyUser\n```","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-yml","loc":{"lines":{"from":625,"to":650}}}}],["1253",{"pageContent":"`tasks[n].before`\n\nA shell command to run before `init` and the main `command`. This command is executed on every start and is expected to terminate. If it fails, the following commands will not be executed.\n\nLearn more about [Start Tasks](/docs/configure/workspaces/tasks) in the docs.\n\n<div class=\"overflow-x-auto\">\n\n| Type     | Default   |\n| -------- | --------- |\n| `string` | `<empty>` |\n\n</div>\n\n### `tasks[n].command`\n\nThe main shell command to run after `before` and `init`. This command is executed last on every start and doesn't have to terminate.\n\nLearn more about [Start Tasks](/docs/configure/workspaces/tasks) in the docs.\n\n<div class=\"overflow-x-auto\">\n\n| Type     | Default   |\n| -------- | --------- |\n| `string` | `<empty>` |\n\n</div>","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-yml","loc":{"lines":{"from":652,"to":678}}}}],["1254",{"pageContent":"`tasks[n].env`\n\nDefine environment variables that will be available in the workspace.\n\nLearn more about [Environment Variables](/docs/configure/projects/environment-variables) in the docs.\n\n<div class=\"overflow-x-auto\">\n\n| Type     | Default   |\n| -------- | --------- |\n| `object` | `<empty>` |\n\n</div>\n\n### `tasks[n].init`\n\nA shell command to run between `before` and the main `command`.\n\nThis task is executed only once. When you start a workspace that does not have a [prebuild](/docs/configure/projects/prebuilds), `init` is executed at workspace start. When you start a workspace that has a prebuild, `init` executes as part of the prebuild, but does NOT execute again at workspace start.\n\nThis task is expected to terminate. If it fails, the `command` property will not be executed.\n\nLearn more about [Start Tasks](/docs/configure/workspaces/tasks) in the docs.\n\n<div class=\"overflow-x-auto\">\n\n| Type     | Default   |\n| -------- | --------- |\n| `string` | `<empty>` |\n\n</div>","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-yml","loc":{"lines":{"from":680,"to":710}}}}],["1255",{"pageContent":"`tasks[n].name`\n\nA name for the task, also shown on the terminal tab.\n\n<div class=\"overflow-x-auto\">\n\n| Type     | Default   |\n| -------- | --------- |\n| `string` | `<empty>` |\n\n</div>\n\n### `tasks[n].openIn`\n\nDeprecated. This does not have an impact in VS Code.\n\n### `tasks[n].openMode`\n\nConfigure how the terminal should be opened relative to the previous task.\n\n<div class=\"overflow-x-auto\">\n\n| Type     | Default   | Values                                                                      |\n| -------- | --------- | --------------------------------------------------------------------------- |\n| `string` | `<empty>` | `tab-after`,<br><br>`tab-before`,<br><br>`split-right`,<br><br>`split-left` |\n\n</div>\n\nNote: `split-top` and `split-bottom` are deprecated values.\n\n### `tasks[n].prebuild`\n\nDeprecated. Please use the [`init`](#tasksninit) task instead.","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-yml","loc":{"lines":{"from":712,"to":744}}}}],["1256",{"pageContent":"`mainConfiguration`\n\n> mainConfiguration is currently in [Beta](/docs/help/public-roadmap/release-cycle). [Send feedback](https://github.com/gitpod-io/gitpod/issues/8623).\n\nDefines the repository with the main `.gitpod.yml` file and makes it possible to open the same workspace from any issue, branch or other context URL from any repository defined in a multi repository configuration.\n\n<div class=\"overflow-x-auto\">\n\n| Type     | Default   |\n| -------- | --------- |\n| `string` | `<empty>` |\n\n</div>\n\n**Demo**\n\n<a href=\"https://gitpod.io/#https://github.com/gitpod-io/demo-multi-repo-backend\"><img src=\"https://gitpod-staging.com/button/open-in-gitpod.svg\"/></a>\n\n**Example**\n\n```yaml\nmainConfiguration: https://github.com/gitpod-io/demo-multi-repo-frontend\n```","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-yml","loc":{"lines":{"from":746,"to":768}}}}],["1257",{"pageContent":"`vscode`\n\nConfigure the VS Code editor.\n\n<div class=\"overflow-x-auto\">\n\n| Type     | Default   |\n| -------- | --------- |\n| `object` | `<empty>` |\n\n</div>","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-yml","loc":{"lines":{"from":770,"to":780}}}}],["1258",{"pageContent":"`vscode.extensions`\n\nDefine a list of extensions which should be installed for users of this workspace. The identifier of an extension is always `${publisher}.${name}`. For example: 'vscodevim.vim'.\n\nPlease note, Gitpod uses the [Open VSX registry](https://open-vsx.org/) to find extensions. If you cannot find an extension you know exists in your local VS Code, please get in touch with us or open a new PR in the [open-vsx/publish-extensions](https://github.com/open-vsx/publish-extensions) repository to add the extension to Open VSX 🙏.\n\n<div class=\"overflow-x-auto\">\n\n| Type     | Default   |\n| -------- | --------- |\n| `object` | `<empty>` |\n\n</div>\n\nBy default, extensions will use the latest available version unless you use a specific version number. The version number must use semantic versioning rules. If you are interested in importing an extension that is not published on the Open VSX registry you can directly use the full URL.\n\n**Example**","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-yml","loc":{"lines":{"from":782,"to":798}}}}],["1259",{"pageContent":"**Example**\n\n```yaml\nvscode:\n  extensions:\n    - svelte.svelte-vscode\n    - bradlc.vscode-tailwindcss@0.6.11\n    - https://example.com/abc/releases/extension-0.26.0.vsix\n```","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-yml","loc":{"lines":{"from":798,"to":806}}}}],["1260",{"pageContent":"`workspaceLocation`\n\nDefine which path Gitpod considers the project's workspace directory, relative to `/workspace`.\n\nIn most cases, this is not needed. If you work on an older Go project, please see the [Go Languages](/docs/introduction/languages/go) page for more details.\n\n<div class=\"overflow-x-auto\">\n\n| Type     | Default      |\n| -------- | ------------ |\n| `string` | `/workspace` |\n\n</div>\n\n**Example**\n\n```yaml\nworkspaceLocation: \".\"\n```","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-yml","loc":{"lines":{"from":808,"to":826}}}}],["1261",{"pageContent":"---\nsection:\ntitle: References\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# References\n\nBelow are links to Gitpod reference material you may find helpful:\n\n- [Product Compatibility Matrix](/docs/references/compatibility?user)\n- [`.gitpod.yml`](/docs/references/gitpod-yml)\n- [Command Line Interface](/docs/references/gitpod-cli)\n- [Roadmap](/docs/help/public-roadmap)\n- [Gitpod Releases](/docs/help/public-roadmap/release-cycle)\n- [Security FAQ](/docs/references/security/faq)","metadata":{"source":"https://www.gitpod.io/docs/references","loc":{"lines":{"from":1,"to":19}}}}],["1262",{"pageContent":"---\ntitle: Building a learning platform on Gitpod\n# We can't do $ signs here because whatever parses this reads $1 as a keyword and injects <script type=\"module\" in its place\nexcerpt: \"Building a learning platform on Gitpod that allows instructors to teach, evaluate, and grade code lessons. They have taught over 4000 students in 6 countries and have received over 15 million USD in educational grants.\"\nslug: 4geeks\nimage: teaser.png\ndate: Friday, 30 June 2022 06:00:00 UTC\npageTitle: \"4Geeks Academy case study: Building a learning platform on Gitpod\"\npageDescription: Building a learning platform on Gitpod that allows instructors to teach, evaluate, and grade code lessons. They have taught over 4000 students in 6 countries and have received over 15 million USD in educational grants.\nkeywords: education, funding, workshops, 4Geeks\n---\n\n<script lang=\"ts\" context=\"module\">\n  export const prerender = true;\n</script>","metadata":{"source":"https://www.gitpod.io/for/education/4geeks","loc":{"lines":{"from":1,"to":15}}}}],["1263",{"pageContent":"<script lang=\"ts\" context=\"module\">\n  export const prerender = true;\n</script>\n\n<script lang=\"ts\">\n\timport CustomerHero from \"$lib/components/customers/customer-hero.svelte\";\n\timport CompanyBenefits from \"$lib/components/customers/company-benefits.svelte\";\n\timport Section from \"$lib/components/section.svelte\";\n\timport Story from \"$lib/components/customers/story.svelte\";\n\timport Quote from \"$lib/components/quote.svelte\";\n  \timport OpenGraph from \"$lib/components/open-graph.svelte\";\n</script>\n\n<OpenGraph\ndata={{\n    description: \"Building a learning platform on Gitpod that allows instructors to teach, evaluate, and grade code lessons. They have taught over 4000 students in 6 countries and have received over $15 million USD in educational grants.\",\n    title: \"4Geeks Academy case study: Building a learning platform on Gitpod\",\n    keywords: \"education, funding, workshops, 4Geeks\",\n  }}\n/>","metadata":{"source":"https://www.gitpod.io/for/education/4geeks","loc":{"lines":{"from":15,"to":34}}}}],["1264",{"pageContent":"<CustomerHero\ntitle=\"Building a learning platform on Gitpod\"\ntext=\"4Geeks built LearnPack – an educational platform that runs in Gitpod on VS Code and allows instructors to teach, evaluate, and grade code lessons. Using LearnPack and Gitpod, they have taught over 4000 students in 6 countries and have received over $15 million USD in educational grants.\"\ncard={{\n\t\timage: \"/images/education/4geeks/teaser.png\",\n\t\tdetails:{\n\t\t\tindustry: \"Education\",\n\t\t\tplan: \"Organization, SaaS\",\n\t\t\tpeople: {\n\t\t\t\ttitle: \"Students\",\n\t\t\t\ttext: \"over 4000\"\n\t\t\t},\n\t\t\twebsite: {\n\t\t\t\thref: \"https://4geeksacademy.com/\",\n\t\t\t\ttext: \"4Geeks Academy\",\n\t\t\t}\n\t\t}\n\t}}\n/>\n\n<CompanyBenefits\nbenefits={[\n{\ntitle: \"$15M USD\",\ntext: \"in educational grants\",\n},\n{\ntitle: \"6 countries\",\ntext: \"teaching students\",\n},\n{\ntitle: \"4000+\",\ntext: \"students taught w/ Gitpod\",\n}]}\n/>","metadata":{"source":"https://www.gitpod.io/for/education/4geeks","loc":{"lines":{"from":36,"to":70}}}}],["1265",{"pageContent":"<CompanyBenefits\nbenefits={[\n{\ntitle: \"$15M USD\",\ntext: \"in educational grants\",\n},\n{\ntitle: \"6 countries\",\ntext: \"teaching students\",\n},\n{\ntitle: \"4000+\",\ntext: \"students taught w/ Gitpod\",\n}]}\n/>\n\n<Section>\n\t<Quote\n\t\tquote=\"I would rather shut down the academy than stop using Gitpod.\"\n\t\tauthor={{\n\t\t\tname: \"Alejandro\",\n\t\t\tjobTitle: \"Founder of 4Geeks Academy\",\n\t\t}}\n\t/>\n</Section>\n\n<Story bannerImg=\"/images/customers/4geeks/banner.png\" text=\"Building a learning platform on Gitpod\">\n\n4Geeks Academy is an international code school operating bootcamps in the United States, Latin America, and Europe. Teaching full stack development, computer science, and machine learning, the academy has taught over 4000 students with a high job placement rate.\n\nAs possibly the largest institution using Gitpod as a tool to teach, we reached out to the academy's cofounder [Alejandro](https://twitter.com/alesanchezr) to better understand how Gitpod fits into their business.","metadata":{"source":"https://www.gitpod.io/for/education/4geeks","loc":{"lines":{"from":70,"to":100}}}}],["1266",{"pageContent":"Alejandro explains that 4Geeks Academy used to run on Replit Classrooms: an educational platform that allowed students to submit code exercises for grading, amongst other things. In January of 2021, the service was shut down and replaced with an expensive, paid alternative. All their courses and exercises, which they had set up in Classrooms, no longer worked.\n\nRather than rely on another hosted education offering, for which there was no guarantee they wouldn't end up in the same situation, they chose to build their own, and that's where LearnPack started.","metadata":{"source":"https://www.gitpod.io/for/education/4geeks","loc":{"lines":{"from":102,"to":104}}}}],["1267",{"pageContent":"Building an educational platform on Gitpod\n\nLearnPack is an interactive course framework that runs inside VS Code using Gitpod.\n\nWhen a student opens a repository in Gitpod, LearnPack uses [Start Tasks](https://www.gitpod.io/docs/configure/workspaces/tasks) to initialize the lesson and display both the course instruction and the lesson material at once. Youtube videos from the instructors are embedded directly into the application for a fully integrated learning experience.\n\nAlejandro expands on some of the advantages of using Gitpod in this way.\n\n> \"Competitors require high-end MacBooks to do their courses, but with Gitpod, you can do it in a Chromebook. A single mom with a kid can be online doing exercises.\"\n\nBuilding the experience into Gitpod allows students to learn on any device with a browser. While universities often don't have large budgets for high-end development machines, affordable Android tablets are easier to procure.","metadata":{"source":"https://www.gitpod.io/for/education/4geeks","loc":{"lines":{"from":106,"to":116}}}}],["1268",{"pageContent":"Universities, Alejandro says, aren't interested in spending time developing their own educational tools. \"They just want a vendor who handles everything. In continuing education, it's all about vendors and teaching through content partners.\" With LearnPack, 4Geeks aims to be the ideal vendor.","metadata":{"source":"https://www.gitpod.io/for/education/4geeks","loc":{"lines":{"from":118,"to":118}}}}],["1269",{"pageContent":"Going above and beyond the status quo\n\nEducators looking to take advantage of Gitpod often use it to run code repositories that accompany [workshops and courses](https://www.gitpod.io/blog/workshops-as-code). Sometimes these are as simple as empty workspaces, providing a clean terminal and IDE with developer tools pre-installed.\n\nMore complex learning material usually involves application code and may require provisioning databases or infrastructure.\n\nLearnPack runs alongside such applications as a framework that allows instructors to evaluate and grade structured lessons.\n\n> \"Gitpod's killer feature is that workspaces can be created while passing environment variables through the URL.\"\n\nLearnPack reads a user ID from the URL to report telemetry to the instructor. Keeping the instructors updated with how many hours their students spend training, when they open exercises, and even transmitting application logs allows them to curate their instruction to exactly where the learner is.","metadata":{"source":"https://www.gitpod.io/for/education/4geeks","loc":{"lines":{"from":120,"to":130}}}}],["1270",{"pageContent":"Taking the learning experience to the next level\n\nEvery new thing is a new layer of complexity, and students (and many teachers) have difficulty rationalizing their way around that. They often blame the wrong layer if they hit a bug in their code. It takes time and experience to build mental models of the boundaries between different pieces of tech.\n\nThe more LearnPack can appear to be a single cohesive layer, the better the learning experience is.\n\n\"One feature we're really looking forward to is the ability to list workspaces for a user,\" he adds. At the moment, students have to go to their Gitpod dashboard to see their workspaces, but when Gitpod's public API is released, viewing, starting, and stopping workspaces could become an integrated part of LearnPack.","metadata":{"source":"https://www.gitpod.io/for/education/4geeks","loc":{"lines":{"from":132,"to":138}}}}],["1271",{"pageContent":"4Geeks has received over $15M in educational funding, including $10M from Lyft, $1.5M from United Way, and several large government grants. They have also partnered with Miami Dade College—the largest university in the US—and other prominent schools in Mexico, Venezuela, Uruguay, and Spain, to run their coding courses.\n\nBeyond their work with the academy, 4Geeks is launching [a free platform](https://4geeks.com/) to the general public where anyone will be able to learn with Gitpod.\n\nGitpod appreciates the work Alejandro and the 4Geeks team have put into building an excellent platform, and we thank them for the interview that led to this case study.\n\n</Story>","metadata":{"source":"https://www.gitpod.io/for/education/4geeks","loc":{"lines":{"from":140,"to":146}}}}],["1272",{"pageContent":"---\ntitle: \"Teaching thousands of students using Gitpod.\"\nexcerpt: \"Bruno Rocha used Gitpod to teach students Python and Rust, reducing the amount of in-person support each student needed and allowing students to learn on any device. Bruno also hosted Python Week 2022 where he taught thousands of students using Gitpod.\"\nslug: bruno-rocha\nimage: teaser.png\ndate: Friday, 17 June 2022 06:00:00 UTC\npageTitle: \"Bruno Rocha case study: Teaching python with Gitpod\"\npageDescription: Teaching thousands of students using Gitpod. Saving 20 minutes every workshop. Learn how Bruno uses Gitpod to teach Python.\nkeywords: education, python, rust, workshops, Bruno Rocha\n---\n\n<script lang=\"ts\" context=\"module\">\n  export const prerender = true;\n</script>","metadata":{"source":"https://www.gitpod.io/for/education/bruno-rocha","loc":{"lines":{"from":1,"to":14}}}}],["1273",{"pageContent":"<script lang=\"ts\" context=\"module\">\n  export const prerender = true;\n</script>\n\n<script lang=\"ts\">\n\timport CustomerHero from \"$lib/components/customers/customer-hero.svelte\";\n\timport CompanyBenefits from \"$lib/components/customers/company-benefits.svelte\";\n\timport Section from \"$lib/components/section.svelte\";\n\timport Story from \"$lib/components/customers/story.svelte\";\n\timport Quote from \"$lib/components/quote.svelte\";\n  \timport OpenGraph from \"$lib/components/open-graph.svelte\";\n</script>\n\n<OpenGraph\ndata={{\n    description:\n      \"Teaching thousands of students using Gitpod. Saving 20 minutes every workshop. Learn how Bruno uses Gitpod to teach Python.\",\n    title: \"Bruno Rocha case study: Teaching python with Gitpod\",\n    keywords: \"education, python, rust, workshops, Bruno Rocha\",\n  }}\n/>","metadata":{"source":"https://www.gitpod.io/for/education/bruno-rocha","loc":{"lines":{"from":14,"to":34}}}}],["1274",{"pageContent":"<CustomerHero\ntitle=\"Teaching thousands of students using Gitpod\"\ntext=\"Gitpod helped Bruno Rocha teach students Python and Rust reducing the amount of in-person support each student needed and allowing students to learn on any device.\"\ncard={{\n\t\timage: \"/images/education/bruno-rocha/teaser.png\",\n\t\tdetails:{\n\t\t\tindustry: \"Education\",\n\t\t\tplan: \"Organization, SaaS\",\n\t\t\tpeople: {\n\t\t\t\ttitle: \"Students\",\n\t\t\t\ttext: \"over 1000\"\n\t\t\t},\n\t\t\twebsite: {\n\t\t\t\thref: \"https://twitter.com/rochacbruno\",\n\t\t\t\ttext: \"@rochacbruno\",\n\t\t\t}\n\t\t}\n\t}}\n/>\n\n<CompanyBenefits\nbenefits={[\n{\ntitle: \"12\",\ntext: \"years teaching\",\n},\n{\ntitle: \"20min\",\ntext: \"saved per workshop\",\n},\n{\ntitle: \"1000's\",\ntext: \"of students taught w/ Gitpod\",\n}]}\n/>\n\n<Section>\n\t<Quote\n\t\tquote=\"I use Gitpod for everything—both for work, and for training.\"\n\t\tauthor={{\n\t\t\tname: \"Bruno Rocha\",\n\t\t\tjobTitle: \"Engineer at RedHat and online educator\",\n\t\t}}\n\t/>\n</Section>","metadata":{"source":"https://www.gitpod.io/for/education/bruno-rocha","loc":{"lines":{"from":36,"to":80}}}}],["1275",{"pageContent":"<Section>\n\t<Quote\n\t\tquote=\"I use Gitpod for everything—both for work, and for training.\"\n\t\tauthor={{\n\t\t\tname: \"Bruno Rocha\",\n\t\t\tjobTitle: \"Engineer at RedHat and online educator\",\n\t\t}}\n\t/>\n</Section>\n\n<Story bannerImg=\"/images/customers/bruno-rocha/banner.png\" text=\"Teaching thousands of students using Gitpod\">\n\nBruno Rocha is an engineer at RedHat and for the past 12 years he's been an online educator. He runs workshops teaching students to code using python and rust.\n\nBruno's workshops cater to students using many different operating systems, with some on Mac, on Windows, on Linux, some tablets, and even some mobile environments.","metadata":{"source":"https://www.gitpod.io/for/education/bruno-rocha","loc":{"lines":{"from":80,"to":94}}}}],["1276",{"pageContent":"Fighting setup issues for each student\n\nFor each repository, he would write specific sections in the documentation to walk students through setting up any of the possible operating systems.\n\nBut there was a lot of variance within operating systems too. Two Linux users could be using entirely different shells and have different versions of python installed. Writing bash scripts that perform consistently across environments is not trivial. Having students change their python version for a course, especially if they have other projects that rely on a different version, is also challenging.\n\nAt the time, those workshops were all in-person events. Bruno had the opportunity to help his students one-on-one. As each student was getting set up for the lesson, Bruno could go directly into their machine to configure their environment and make sure everything was ready to go.\n\nBut after switching to online workshops, that physical access stopped being possible, and Bruno needed to find a new solution.","metadata":{"source":"https://www.gitpod.io/for/education/bruno-rocha","loc":{"lines":{"from":96,"to":104}}}}],["1277",{"pageContent":"Eliminating problems with Gitpod\n\n\"I tested other alternatives, and when I found Gitpod it was perfectly what I wanted. Just give them a single link\", Bruno says. \"They can click and enter a ready-to-use environment.\"\n\nBruno started using Gitpod in his classes last year.\n\nWithin a Gitpod workspace, dependencies can be pre-installed at specific versions, so students are guaranteed to get an identical experience no matter how their local machine is configured.\n\nProblems with differences between Mac, Windows, and Linux went away immediately. With Gitpod, every student was on the same environment, entirely eliminating the setup issues that used to require personal attention.\n\n> \"When they have problems, I can just send some Gitpod documentation links, which saves me a lot of time.\"\n\nBruno explains that the code repositories were configured to start terminals automatically. From the moment a student opens a workspace, the application is running and the student is ready to follow along.","metadata":{"source":"https://www.gitpod.io/for/education/bruno-rocha","loc":{"lines":{"from":106,"to":118}}}}],["1278",{"pageContent":"Bruno's students still had their own preferences about which tools to use. While most would use VS Code in the web editor, some would work in vim or neovim; sometimes in the integrated terminal, sometimes connecting remotely over SSH. Gitpod allows developers to use their preferred IDE rather than prescribing a one-size-fits-all solution. \"So I think it's very flexible,\" Bruno says. \"There's no way that any training or workshop won't work on a Gitpod environment.\"\n\nIn April, Bruno hosted a workshop event called Python Week with over 2000 live viewers. During the 5 days of Python Week, students were provided with a GitHub repository pre-configured for Gitpod. Students were able to get started immediately with the learning materials and follow along within the codebase over the course of the workshop.","metadata":{"source":"https://www.gitpod.io/for/education/bruno-rocha","loc":{"lines":{"from":120,"to":122}}}}],["1279",{"pageContent":"<figure>\n\t\t<iframe class=\"mx-auto\" width=\"768\" height=\"432\" src=\"https://www.youtube.com/embed/zIY7tly0m50\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\t\t<figcaption>Interview between <a href=\"https://twitter.com/paulienuh\" target=\"_blank\" rel=\"noreferrer\"> Pauline Narvas </a> and <a href=\"https://twitter.com/rochacbruno\" target=\"_blank\" rel=\"noreferer\"> Bruno Rocha </a> </figcaption>\n</figure>\n\n</Story>","metadata":{"source":"https://www.gitpod.io/for/education/bruno-rocha","loc":{"lines":{"from":124,"to":129}}}}],["1280",{"pageContent":"---\nauthor: brandonroberts\ndate: Thursday, 9 Mar 2022 11:00:00 UTC\ntitle: Appwrite and Gitpod\nslug: appwrite-and-gitpod\nexcerpt: Develop your Appwrite application on Gitpod without the need to install Docker on your local computer.\nteaserImage: teaser.jpg\nimage: image.jpg\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\nWorking with Docker gives developers the ability to develop and deploy applications of all types locally without adding dependencies and binaries to their local development environment. Using Docker is used throughout the development lifecycle for fast, easy, and portable application development.","metadata":{"source":"https://www.gitpod.io/guides/appwrite-and-gitpod","loc":{"lines":{"from":1,"to":15}}}}],["1281",{"pageContent":"Appwrite uses Docker to make spinning up multiple services as quickly as possible in a self-hosted environment, but we’re always looking at ways to give developers who are less familiar with Docker ways to try Appwrite. This is where Gitpod comes in. Gitpod is one way to combine the power of Docker and Appwrite together to get started quickly. This post shows you how to use Appwrite and Gitpod together to spin up a REST API with database access, authentication, storage, and more without installing anything on your local computer.\n\nGitpod is a platform that helps you spin up fresh, automated developer environments for each task, in the cloud, in seconds. The vision of Gitpod is to remove all friction from the developer experience & bring back joy and speed to developers' workflows.","metadata":{"source":"https://www.gitpod.io/guides/appwrite-and-gitpod","loc":{"lines":{"from":17,"to":19}}}}],["1282",{"pageContent":"The goal of Appwrite is to make getting started and scaling with application development as quickly as possible. Traditionally, you would need to install Docker on your local machine to run Appwrite. Now with Appwrite and Gitpod, you can spin up Appwrite instances for multiple projects with a couple of steps!\n\nWe’ve set up a template repo with Gitpod and Appwrite together. You can start a new developer environment with this button:\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/appwrite/integration-for-gitpod)\n\nYou can also check out our demo application built with Gitpod, Appwrite, and Svelte: https://github.com/appwrite/demo-todo-with-svelte\n\nJust click the “Open in Gitpod” button, log in to GitHub and you’ll be up and running! You can also fork the repo and customize it even further! 👏","metadata":{"source":"https://www.gitpod.io/guides/appwrite-and-gitpod","loc":{"lines":{"from":21,"to":29}}}}],["1283",{"pageContent":"Just click the “Open in Gitpod” button, log in to GitHub and you’ll be up and running! You can also fork the repo and customize it even further! 👏\n\nWe look forward to integrating more with Gitpod in the future! Check out the Gitpod homepage for more information and new development environment templates. Follow @appwrite and @gitpod on Twitter for more updates!\n\nLearn More\n\n- 🚀 [Getting started Tutorial](https://appwrite.io/docs/getting-started-for-server)\n- 🚀 [Appwrite GitHub](https://github.com/appwrite/appwrite)\n- 📜 [Appwrite Docs](https://appwrite.io/docs)\n- 💬 [Discord Community](https://discord.gg/appwrite)","metadata":{"source":"https://www.gitpod.io/guides/appwrite-and-gitpod","loc":{"lines":{"from":29,"to":38}}}}],["1284",{"pageContent":"---\nauthor: jacobparis\ndate: Wednesday, 8 June 2022 11:00:00 UTC\ntitle: Automate .env files with Gitpod environment variables\nslug: automate-env-files-with-gitpod-environment-variables\nexcerpt: Gitpod's environment variables can be used to securely persist small files between workspaces without committing them to source control. Use this feature to automate the storage and retrieval of a .env file when workspaces are created.\nteaserImage: header.png\nimage: teaser.png\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\nWorking with ephemeral developer environments has many advantages. When every new workspace starts from a clean slate, you never have to worry about uncommitted changes causing problems.\n\nBut sometimes you want uncommitted changes. Some things (configuration, secrets, etc) just shouldn't enter source control.","metadata":{"source":"https://www.gitpod.io/guides/automate-env-files-with-gitpod-environment-variables","loc":{"lines":{"from":1,"to":17}}}}],["1285",{"pageContent":"But sometimes you want uncommitted changes. Some things (configuration, secrets, etc) just shouldn't enter source control.\n\nIn a long-lived development environment, you can leave a `.env` file on the file system and it will survive the length of your project. When you integrate with a new service, you add their API keys to the file and be done with it.\n\nWith Gitpod, creating a `.env` file works wonderfully for precisely one workspace. You can close and reopen that workspace as many times as you want and your `.env` file will still be there, but those who embrace ephemeral development wholeheartedly and want a new workspace for each task will quickly notice they need to set everything up again.\n\nSo how do you persist a file between workspaces without committing it to source control? You store it securely in a database.","metadata":{"source":"https://www.gitpod.io/guides/automate-env-files-with-gitpod-environment-variables","loc":{"lines":{"from":17,"to":23}}}}],["1286",{"pageContent":"So how do you persist a file between workspaces without committing it to source control? You store it securely in a database.\n\nThe most convenient database to use is Gitpod's workspace environment variable storage. You can encode your `.env` file as a base64 string, and use the `gp` tool to store it in a Gitpod environment variable. You can then automate restoring from the environment variable to keep the .env persisted between workspaces.\n\nThe Gitpod CLI is built-in: simply run `gp env DOTENV=value` and you will be able to read `$DOTENV` in every workspace. If you're ready to start persisting files, follow the instructions below.\n\n> Note: The [maximum length of an environment variable value is 32k](https://github.com/gitpod-io/gitpod/blob/main/components/gitpod-protocol/src/protocol.ts#L239-L259), so if you have exceptionally large files to persist, consider an alternative solution, like [an enterprise secrets manager](https://www.jacobparis.com/blog/gitpod-env-1pass).","metadata":{"source":"https://www.gitpod.io/guides/automate-env-files-with-gitpod-environment-variables","loc":{"lines":{"from":23,"to":29}}}}],["1287",{"pageContent":"Saving the .env file after changes\n\nBase64 outputs text with a standard character set and no whitespace, so it's a good place to start. It does add line breaks though, which the `tr` text replacement utility can delete.\n\n```sh\n$ base64 .env\n\nOVRMQVNfVVJEEE1vbmdvZGIrc3sJ2Oi8vbXJnZGV2OlRMfaSnl0T1dFUVNpefFKVmZ\ndnVapdGkubW9uZ29hYi5uZXDvQdWRtaXQxdX2Rldj9ydZCDeVdyaQRlcz10cnVlJnc\nCk5FWFRfUFVCTElDX0dPT0dMvRV9QTEEGNfQVBJPUFJemFTeddfgURVREdaSll2WmV\n\n# Remove line breaks\n$ base64 .env | tr -d '\\\\n'\n\nOVRMQVNfVVJEEE1vbmdvZGIrc3sJ2Oi8vbXJnZGV2OlRMfaSnl0T1dFUVNpefFKVmZdnVapdGkubW9uZ29hYi5uZXDvQdWRtaXQxdX2Rldj9ydZCDeVdyaQRlcz10cnVlJncCk5FWFRfUFVCTElDX0dPT0dMvRV9QTEEGNfQVBJPUFJemFTeddfgURVREdaSll2WmV\n```\n\nGitpod's `gp` command line interface provides a quick way to get and set environment variables for the workspace.\n\nEvery time you make changes to the `.env` file, run this script to persist it across your Gitpod workspaces.\n\n```sh\n$ gp env -e DOTENV=\"$(base64 .env | tr -d '\\\\n')\"","metadata":{"source":"https://www.gitpod.io/guides/automate-env-files-with-gitpod-environment-variables","loc":{"lines":{"from":31,"to":53}}}}],["1288",{"pageContent":"See how this script works at [ExplainShell](https://explainshell.com/explain?cmd=base64+.env+%7C+tr+-d+%27%5C%5Cn%27)","metadata":{"source":"https://www.gitpod.io/guides/automate-env-files-with-gitpod-environment-variables","loc":{"lines":{"from":56,"to":56}}}}],["1289",{"pageContent":"Restoring your .env in new workspaces\n\nGitpod will create a terminal for each command in each task in the `.gitpod.yml` file, and those shells will have access to the environment variables set for your Gitpod account.\n\n> Note: this only applies to command scripts. The init and before scripts by default do not load [user-specific environment variables](https://www.gitpod.io/docs/configure/projects/prebuilds#user-specific-environment-variables-in-prebuilds) for security reasons.\n\nDecoding the `$DOTENV` variable and writing to a file is all that's required to restore it and have a populated `.env` waiting for you by the time your new workspace has loaded.\n\n```sh\necho \"${DOTENV}\" | base64 -d > .env\n```","metadata":{"source":"https://www.gitpod.io/guides/automate-env-files-with-gitpod-environment-variables","loc":{"lines":{"from":58,"to":68}}}}],["1290",{"pageContent":"Improving the developer experience\n\nThe real power of Gitpod is in fully automating your developer environment, so while you can manually store and retrieve your `.env` file, you can achieve an even better developer experience by using Gitpod's Start Tasks to run the scripts for common user flows automatically.\n\nWhen a new developer is onboarding to your repository, they won't have a `$DOTENV` saved from a previous workspace. You can commit a `.env.example` file into the codebase that provides reasonable defaults for new developers. As part of the startup task, copy that example file into a real `.env` file to save the developer from having to do it manually.\n\nAnother concern is that if a developer makes local changes to their `.env` but hasn't persisted it yet, a workspace restart (like after a timeout) shouldn't erase their changes. If there is already a `.env` file when a workspace starts, don't try to override it at all.","metadata":{"source":"https://www.gitpod.io/guides/automate-env-files-with-gitpod-environment-variables","loc":{"lines":{"from":70,"to":76}}}}],["1291",{"pageContent":"You can copy the following Gitpod Task directly into your `.gitpod.yml`. For more information, check out the [documentation for Start Tasks](https://www.gitpod.io/docs/configure/workspaces/tasks) on Gitpod","metadata":{"source":"https://www.gitpod.io/guides/automate-env-files-with-gitpod-environment-variables","loc":{"lines":{"from":78,"to":78}}}}],["1292",{"pageContent":"```yml\ntasks:\n  - name: Restore .env file\n    command: |\n      if [ -f .env ]; then\n        # If this workspace already has a .env, don't override it\n        # Local changes survive a workspace being opened and closed\n        # but they will not persist between separate workspaces for the same repo\n        echo \"Found .env in workspace\"\n      else\n        if [ -z \"${DOTENV}\" ]; then\n          # There is no $DOTENV from a previous workspace\n          # Default to the example .env\n          echo \"Setting example .env\"\n          cp .env.example .env\n        else\n          # After making changes to .env, run this line to persist it to $DOTENV\n          #   gp env DOTENV=\"$(base64 .env | tr -d '\\n')\"\n          #\n          # Environment variables set this way are shared between all your workspaces for this repo\n          # The lines below will read $DOTENV and print a .env file\n          echo \"Restoring .env from Gitpod\"\n          echo \"${DOTENV}\" | base64 -d > .env\n        fi\n      fi\n```","metadata":{"source":"https://www.gitpod.io/guides/automate-env-files-with-gitpod-environment-variables","loc":{"lines":{"from":80,"to":105}}}}],["1293",{"pageContent":"---\nauthor: jacobparis, nancy-chauhan\ndate: Friday, 6 May 2022 11:00:00 UTC\ntitle: Connect Multiple Repositories on Gitpod using Tailscale\nslug: connect-multiple-repositories-using-tailscale\nexcerpt: Tailscale’s secure mesh technology based on WireGuard can connect machines securely across the internet, frictionlessly. ✨ This article will show how easy it is to connect Gitpod workspaces over a secure tunnel provided by Tailscale.\nteaserImage: header.jpg\nimage: teaser.jpg\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\nSo, you are working on multiple services that need to talk to each other. Each part of your application lives in a different repository, or you might be collaborating on an integration project involving more than one product from different teams. With Gitpod, you set up secure and isolated cloud workspaces for your git repositories.\n\nBut how do we make workspaces talk to each other securely?","metadata":{"source":"https://www.gitpod.io/guides/connect-multiple-repositories-using-tailscale","loc":{"lines":{"from":1,"to":17}}}}],["1294",{"pageContent":"But how do we make workspaces talk to each other securely?\n\n[We have teamed up with our friends](https://www.gitpod.io/blog/tailscale) at [Tailscale](https://tailscale.com/) to bring an easy way to solve this problem using their simple zero-config VPN, which comes pre-installed in Gitpod workspaces.\nTailscale's secure mesh technology based on WireGuard can connect machines securely across the internet, such as your Gitpod workspaces or a cloud or on-prem resource, like a database, frictionlessly. ✨\n\nThis guide will show how easy it is to connect Gitpod workspaces over a secure tunnel provided by Tailscale. Let's get started 🚀","metadata":{"source":"https://www.gitpod.io/guides/connect-multiple-repositories-using-tailscale","loc":{"lines":{"from":17,"to":22}}}}],["1295",{"pageContent":"A case for working with multiple repositories at a time\n\nA typical architecture these days is server-side rendering (SSR). You generate the view by calling backend services on the frontend server instead of calling your API from client devices. If you develop on your local machine, two repositories will be open in two IDE windows. Every service can communicate with each other as they are all running on the same machine.\n\n<figure class=\"flex flex-col items-center text-center\">\n  <img src=\"/images/guides/connect-multiple-repositories-using-tailscale/locahost-ssr.png\" alt=\"Multiple services can communincate with each-other when running on the same machine\" width=\"500\" />\n  <figcaption>Local setup</figcaption>\n</figure>\n\nIn Gitpod, each workspace runs in a secure sandbox. You can expose ports so that only your browser can access them. However, the workspaces cannot communicate with one another.","metadata":{"source":"https://www.gitpod.io/guides/connect-multiple-repositories-using-tailscale","loc":{"lines":{"from":24,"to":33}}}}],["1296",{"pageContent":"In Gitpod, each workspace runs in a secure sandbox. You can expose ports so that only your browser can access them. However, the workspaces cannot communicate with one another.\n\n<figure class=\"flex flex-col items-center text-center\">\n  <img src=\"/images/guides/connect-multiple-repositories-using-tailscale/gitpod-workspace-without-tailscale.png\" alt=\"In Gitpod each workspace runs in a secure sandbox, workspaces cannont communicate with one another\" width=\"500\" />\n  <figcaption class=\"w-full\">Gitpod workspaces are secure and isolated</figcaption>\n</figure>\n\nAs long as only the browser interacts with the API, this will work with Gitpod without any changes. If you develop single-page applications and static sites where every network request is a client-side fetch, you don't need Tailscale.","metadata":{"source":"https://www.gitpod.io/guides/connect-multiple-repositories-using-tailscale","loc":{"lines":{"from":33,"to":40}}}}],["1297",{"pageContent":"But if your application has a server-side that needs to fetch data from another workspace, it becomes a networking problem. The application server requires a secure network tunnel between them to send a request outside of its workspace and into the API workspace.\n\n**This is what Tailscale is made for ✨**\n\n<figure class=\"flex flex-col items-center text-center\">\n  <img src=\"/images/guides/connect-multiple-repositories-using-tailscale/gitpod-workspaces-with-tailscale.png\" alt=\"Connect multiple workspaces on Gitpod using Tailscale\" width=\"600\" />\n  <figcaption class=\"w-full\">Establish secure tunnel using Tailscale</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/guides/connect-multiple-repositories-using-tailscale","loc":{"lines":{"from":42,"to":49}}}}],["1298",{"pageContent":"Connecting multiple workspaces together with Tailscale\n\nWe can run Tailscale in each of our Gitpod workspaces, which will make them part of your \"tailnet\", a secure VPN consisting of your machines that can access each other. Traffic over your \"tailnet\" is fully end-to-end encrypted, with each workspace having its private key, so anyone, not even Tailscale, is capable of reading the traffic.\n\nIn Gitpod, each workspace can log into Tailscale and receive a list of secure IP addresses of other workspaces connected to your \"tailnet\". It is only possible to connect to these IPs from machines running Tailscale, which can be your workspaces or your local machines.\n\nTailscale comes pre-installed with `gitpod/workspace-full`, Gitpod's base image for workspaces. So if you are using the default image or a custom docker image based on `workspace-full`, you are ready to go 🚀; else, you will need to add [instructions to install Tailscale](https://tailscale.com/download/linux) into your workspace.","metadata":{"source":"https://www.gitpod.io/guides/connect-multiple-repositories-using-tailscale","loc":{"lines":{"from":51,"to":57}}}}],["1299",{"pageContent":"1. Add Tailscale to your `.gitpod.yml` tasks\n\n_Scroll to the bottom of this page for an example `.gitpod.yml` file, or follow these steps to set it up for yourself._\n\nThe “Connect to Tailscale” task will prompt you to log in. We only need to do this once. Next time, we fetch the token from Gitpod’s environment variables to skip the login.\n\nThe “Restore Tailscale daemon” task launches Tailscale and puts it in the background. It connects the workspace to your “tailnet” using your previously saved Tailscale token.","metadata":{"source":"https://www.gitpod.io/guides/connect-multiple-repositories-using-tailscale","loc":{"lines":{"from":59,"to":65}}}}],["1300",{"pageContent":"The “Restore Tailscale daemon” task launches Tailscale and puts it in the background. It connects the workspace to your “tailnet” using your previously saved Tailscale token.\n\n```yaml\ntasks:\n  - name: Restore Tailscale daemon\n    command: |\n      if [ -n \"${TS_STATE_TAILSCALE_EXAMPLE}\" ]; then\n        # restore the tailscale state from gitpod user's env vars\n        sudo mkdir -p /var/lib/tailscale\n        echo \"${TS_STATE_TAILSCALE_EXAMPLE}\" | sudo tee /var/lib/tailscale/tailscaled.state > /dev/null\n      fi\n      sudo tailscaled\n  - name: Connect to Tailscale\n    command: |\n      if [ -n \"${TS_STATE_TAILSCALE_EXAMPLE}\" ]; then\n        sudo -E tailscale up\n      else\n        sudo -E tailscale up --hostname \"gitpod-${GITPOD_GIT_USER_NAME// /-}-$(echo ${GITPOD_WORKSPACE_CONTEXT} | jq -r .repository.name)\"\n        # store the tailscale state into gitpod user\n        gp env TS_STATE_TAILSCALE_EXAMPLE=\"$(sudo cat /var/lib/tailscale/tailscaled.state)\"\n      fi\n      exit\n```","metadata":{"source":"https://www.gitpod.io/guides/connect-multiple-repositories-using-tailscale","loc":{"lines":{"from":65,"to":87}}}}],["1301",{"pageContent":"2. Open a workspace for each repository\n\nCommit the `.gitpod.yml` to your repository.\n\nNext time when you launch your workspace, your Gitpod terminal will give you a login link with a unique token. Once you’ve logged in, it will connect your workspace to your Tailscale account.\n\nTailscale allows you to log in via GitHub, Google, Microsoft, or email. As long as you are logged in to the same organization in each of your repositories, your Gitpod workspaces will be able to send requests to each other.","metadata":{"source":"https://www.gitpod.io/guides/connect-multiple-repositories-using-tailscale","loc":{"lines":{"from":89,"to":95}}}}],["1302",{"pageContent":"3. View your connected workspaces\n\nRun `tailscale status` to see the private IP addresses for your other workspaces. These are only accessible to other Tailscale nodes. Your workspaces can communicate with each other, but neither your browser nor anyone else will be able to access them.\n\n```\n$ tailscale status\n100.11.166.123  main-backend-service username@  linux   -\n100.11.201.28   main-application username@  linux   -\n```\n\nGitpod is all about giving you a great developer experience. So if you have to look up IP addresses every time you make a workspace, it isn’t great.\n\nWe can use a `.gitpod.yml` task to search Tailscale and create environment variables for each connected service.\n\nLet’s say `backend-service` is the name of the repository you want to connect. You can find its IP address by running the following command:\n\n```\n$ tailscale status | grep backend-service | cut -d \" \" -f 1\n100.11.166.123","metadata":{"source":"https://www.gitpod.io/guides/connect-multiple-repositories-using-tailscale","loc":{"lines":{"from":97,"to":115}}}}],["1303",{"pageContent":"You can set the result as an environment variable so that your application can use it later.\n\nIn this example, this task looks for `backend-service` and sets an environment variable named `API_URL` pointing to it before launching the application.\n\n```yaml\n- name: Start application\n  init: npm install\n  command: |\n    REPO_NAME=backend-service\n    API_IP=$(tailscale status | grep $REPO_NAME | cut -d \" \" -f 1)\n    if [ \"${API_IP}\" ]; then\n      echo \"🐳 Connected to $REPO_NAME through Tailscale\"\n      API_URL=\"http://$API_IP:5000/api\" npm run dev\n    else\n      echo \"🐳 Failed to connect to $REPO_NAME. Make sure a $REPO_NAME workspace is active and logged into Tailscale.\"\n      npm run dev\n    fi\n  env:\n    PORT: 3000\n    NODE_ENV: development","metadata":{"source":"https://www.gitpod.io/guides/connect-multiple-repositories-using-tailscale","loc":{"lines":{"from":118,"to":137}}}}],["1304",{"pageContent":"To try this out, add this task to the tasks list in your `.gitpod.yml` file, commit it, and try it out with a new workspace. Your workspaces should be able to send requests to each other through their secure Tailscale IP addresses. Now you are fully set up for multi-repo development on Gitpod. ✨","metadata":{"source":"https://www.gitpod.io/guides/connect-multiple-repositories-using-tailscale","loc":{"lines":{"from":140,"to":140}}}}],["1305",{"pageContent":"Sample `.gitpod.yml`\n\n```yaml\nimage: gitpod:workspace/full\nports:\n  - port: 3000\n    onOpen: ignore\ntasks:\n  - name: Restore Tailscale daemon\n    command: |\n      if [ -n \"${TS_STATE_TAILSCALE_EXAMPLE}\" ]; then\n        # restore the tailscale state from gitpod user's env vars\n        sudo mkdir -p /var/lib/tailscale\n        echo \"${TS_STATE_TAILSCALE_EXAMPLE}\" | sudo tee /var/lib/tailscale/tailscaled.state > /dev/null\n      fi\n      sudo tailscaled\n  - name: Start application\n    init: |\n      eval $(gp env -e)\n      npm install\n    command: |\n      REPO_NAME=backend-service\n      API_IP=$(tailscale status | grep $REPO_NAME | cut -d \" \" -f 1)\n      if [ \"${API_IP}\" ]; then\n        echo \"🐳 Connected to $REPO_NAME through Tailscale\"\n        API_URL=\"http://$API_IP:5000/api\" npm run dev\n      else\n        echo \"🐳 Failed to connect to $REPO_NAME. Make sure a $REPO_NAME workspace is active and logged into Tailscale.\"","metadata":{"source":"https://www.gitpod.io/guides/connect-multiple-repositories-using-tailscale","loc":{"lines":{"from":142,"to":169}}}}],["1306",{"pageContent":"npm run dev\n      fi\n    env:\n      PORT: 3000\n      NODE_ENV: development\n  - name: Connect to Tailscale\n    command: |\n      if [ -n \"${TS_STATE_TAILSCALE_EXAMPLE}\" ]; then\n        sudo -E tailscale up\n      else\n        sudo -E tailscale up --hostname \"gitpod-${GITPOD_GIT_USER_NAME// /-}-$(echo ${GITPOD_WORKSPACE_CONTEXT} | jq -r .repository.name)\"\n        # store the tailscale state into gitpod user\n        gp env TS_STATE_TAILSCALE_EXAMPLE=\"$(sudo cat /var/lib/tailscale/tailscaled.state)\"\n      fi\n      exit\n```","metadata":{"source":"https://www.gitpod.io/guides/connect-multiple-repositories-using-tailscale","loc":{"lines":{"from":171,"to":186}}}}],["1307",{"pageContent":"---\nauthor: maciejwalkowiak\ndate: Wednesday, 09 Nov 2022 02:00:00 UTC\nexcerpt: Gitpod workspace image (the image on which your environment runs) comes with preinstalled Java development tools like SDKMan,and Gradle. There are at least two ways how you can to configure Java version for each new Gitpod workspace.\nslug: custom-java-distribution-on-gitpod\nteaserImage: teaser.webp\nimage: header.webp\ntitle: How to use a custom Java distribution on Gitpod\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\nThe default Gitpod [`workspace-full`](https://www.gitpod.io/docs/configure/workspaces/workspace-image) image comes with preinstalled Java development tools like [SDKMan](https://sdkman.io/), [Maven](https://maven.apache.org/) and [Gradle](https://gradle.org/).\n\nWhen you execute `java --version` in the terminal, you'll find out that the current Java version is Java 11 (at the time of writing this blog post).","metadata":{"source":"https://www.gitpod.io/guides/custom-java-distribution-on-gitpod","loc":{"lines":{"from":1,"to":17}}}}],["1308",{"pageContent":"When you execute `java --version` in the terminal, you'll find out that the current Java version is Java 11 (at the time of writing this blog post).\n\nSince [SDKMan](https://sdkman.io/) is installed, you can easily switch to a different Java version with:\n\n```bash\nsdk install java 17.0.4.1-tem","metadata":{"source":"https://www.gitpod.io/guides/custom-java-distribution-on-gitpod","loc":{"lines":{"from":17,"to":22}}}}],["1309",{"pageContent":"But this change will be reflected only in your current workspace. If someone else opens the Gitpod workspace for the same Gitpod repository or if you recreate the workspace, Java will be back to 11, and the version you installed with SDKMan will be gone.\n\nThere are at least two ways to configure the Java version for each new Gitpod workspace.","metadata":{"source":"https://www.gitpod.io/guides/custom-java-distribution-on-gitpod","loc":{"lines":{"from":25,"to":27}}}}],["1310",{"pageContent":"Set Java version with `.gitpod.yml`\n\nGitpod workspaces can be configured with [`.gitpod.yml`](https://www.gitpod.io/docs/configure/workspaces). We can specify [startup task(s)](https://www.gitpod.io/docs/configure/workspaces/tasks) that will execute shell commands for us:\n\n```yaml\ntasks:\n  - before: sdk install java 17.0.4.1-tem\n```\n\nThis is almost good. The problem is that `sdk install` prompts the user to set the installed version as a default. There's no flag to run the command in non-interactive mode, but there is a [hacky workaround](https://github.com/sdkman/sdkman-cli/issues/101#issuecomment-155938383):\n\n```yaml\ntasks:\n  - before: sdk install java 17.0.4.1-tem < /dev/null\n```\n\nThe drawback is that this command takes some time to run and is executed every time the workspace is created.\n\nInstead, we can create a custom workspace image that will be built only once.","metadata":{"source":"https://www.gitpod.io/guides/custom-java-distribution-on-gitpod","loc":{"lines":{"from":29,"to":47}}}}],["1311",{"pageContent":"Set Java version with workspace image\n\nGitpod gives an option to use a [custom Docker image](https://www.gitpod.io/docs/configure/workspaces/workspace-image) on which the workspace runs. Let's create one that uses `Java 17` by default:\n\nRemove the `before` task from `.gitpod.yml` and instead set the `image.file` property to `.gitpod.Dockerfile.`\n\n```yaml\nimage:\n  file: .gitpod.Dockerfile\n```\n\nNext, create a file `.gitpod.Dockerfile`. If you are happy with the default Gitpod workspace image, you can use it as a base.\n\n```dockerfile\nFROM gitpod/workspace-full:2022-10-25-06-57-58\n\nSHELL [\"/bin/bash\", \"-c\"]\nRUN source \"/home/gitpod/.sdkman/bin/sdkman-init.sh\"  \\\n    && sdk install java 17.0.4.1-tem < /dev/null","metadata":{"source":"https://www.gitpod.io/guides/custom-java-distribution-on-gitpod","loc":{"lines":{"from":49,"to":67}}}}],["1312",{"pageContent":"Let's break it down:\n\n1. It is recommended to use a specific Docker image tag for a base image. Go to https://hub.docker.com/r/gitpod/workspace-full and look for the latest tag, then use it in FROM command in the Dockerfile.\n2. Change shell to bash, source SDKMan init so that `sdk` command becomes available, and run `sdk install` like we previously did in the `.gitpod.yml`:\n\nThen, when you create a new repository with these files, only on the first run, Gitpod builds an image:\n\n![build-image](../../../../static/images/guides/custom-java-distribution-on-gitpod/build-image.png)\n\n.. and once the workspace is ready:\n\n```bash\njava --version\n```\n\n**Example output**:\n\n```bash\nPicked up JAVA_TOOL_OPTIONS:  -Xmx3489m\nopenjdk 17.0.4.1 2022-08-12\nOpenJDK Runtime Environment Temurin-17.0.4.1+1 (build 17.0.4.1+1)\nOpenJDK 64-Bit Server VM Temurin-17.0.4.1+1 (build 17.0.4.1+1, mixed mode, sharing)","metadata":{"source":"https://www.gitpod.io/guides/custom-java-distribution-on-gitpod","loc":{"lines":{"from":70,"to":91}}}}],["1313",{"pageContent":"# Use a JDK that is unavailable in SDKman\n\nWhat if the JDK we want to use is not available in SDKMan? Since we are using a Dockerfile, we can write shell scripts.\n\nAs an example, let's use [JetBrains distribution of the OpenJDK](https://github.com/JetBrains/JetBrainsRuntime).\nUse the following `.gitpod.Dockerfile` contents:\n\n```dockerfile\nFROM gitpod/workspace-full:2022-10-25-06-57-58\nSHELL [\"/bin/bash\", \"-c\"]\nRUN wget https://cache-redirector.jetbrains.com/intellij-jbr/jbr-17.0.4.1-linux-x64-b653.1.tar.gz\nRUN sudo tar zxf jbr-17.0.4.1-linux-x64-b653.1.tar.gz --directory /opt/\nRUN echo 'export JAVA_HOME=/opt/jbr-17.0.4.1-linux-x64-b653.1/' >> /home/gitpod/.bashrc \\\n    && echo 'export PATH=/opt/jbr-17.0.4.1-linux-x64-b653.1/bin:$PATH' >> /home/gitpod/.bashrc","metadata":{"source":"https://www.gitpod.io/guides/custom-java-distribution-on-gitpod","loc":{"lines":{"from":94,"to":107}}}}],["1314",{"pageContent":"Let's break it down:\n\n1. Download JetBrains Runtime release from https://github.com/JetBrains/JetBrainsRuntime/releases/\n2. Unpack it and move to `/opt/`\n\nNow, two important points:\n\n3. `export JAVA_HOME` is effectively overwriting the one set by SDKMan\n4. Add JDK bin directory to `$PATH`. It is important to put it before what's already been there so that the new JDK bin is before the SDKMan path.\n\nFinally, use `.gitpod.Dockerfile` from your `.gitpod.yml`:\n\n```yaml\nimage:\n  file: .gitpod.Dockerfile\n```\n\nAnd follow [see it in action!](https://www.gitpod.io/docs/configure/workspaces#see-it-in-action)\n\nOnce you recreate the workspace, and the new image is built:\n\n```bash\njava --version\n```\n\n**Example output**:\n\n```bash\nPicked up JAVA_TOOL_OPTIONS:  -Xmx3489m\nopenjdk 17.0.4.1 2022-08-12\nOpenJDK Runtime Environment JBR-17.0.4.1+1-653.1-nomod (build 17.0.4.1+1-b653.1)\nOpenJDK 64-Bit Server VM JBR-17.0.4.1+1-653.1-nomod (build 17.0.4.1+1-b653.1, mixed mode)\n```\n\nThat's all folks!","metadata":{"source":"https://www.gitpod.io/guides/custom-java-distribution-on-gitpod","loc":{"lines":{"from":110,"to":144}}}}],["1315",{"pageContent":"---\nauthor: axonasif, pawlean, nancy-chauhan\ndate: Wednesday, 30 Jun 2022 02:00:00 UTC\nexcerpt: A detailed guide for setting up your Android phone for optimal development experience with Gitpod\nslug: getting-started-with-gitpod-in-android\nteaserImage: teaser.png\nimage: thumbnail.png\ntitle: Getting started with Gitpod in Android\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\nYes! You can learn to code and build software with Gitpod on Android! Gitpod is a complete dev environment running in the cloud, which turns any android phone into a powerful dev machine. I have been developing software on my phone using Gitpod for a long time! It is powerful, and I believe with Gitpod, anyone can learn to code and build software without any hurdles.","metadata":{"source":"https://www.gitpod.io/guides/getting-started-with-gitpod-in-android","loc":{"lines":{"from":1,"to":15}}}}],["1316",{"pageContent":"Gitpod changed my life and enabled me to continue my journey into software development. I have talked more about it [here](../blog/software-development-from-my-android-phone-at-datacenter-speeds). In this guide, I have discussed how Gitpod is fully usable from an Android phone. I will be sharing how I set up Gitpod on my Android phone. If you're curious, follow along 🚀\n\n# Browser\n\nTo get started, all you need is a browser. I use the [Kiwi](https://kiwibrowser.com/) browser on Android. It brings you almost a full-blown desktop-like chromium experience but on mobile! That means you get chrome-devtools, extensions support, keyboard shortcuts and many more.","metadata":{"source":"https://www.gitpod.io/guides/getting-started-with-gitpod-in-android","loc":{"lines":{"from":17,"to":21}}}}],["1317",{"pageContent":"Important notes about using Gitpod on Kiwi:\n\n- There is a chromium [bug](https://bugs.chromium.org/p/chromium/issues/detail?id=1202651) with mouse cursor hover. If you face this bug, you must toggle off your installed accessibility services while using Kiwi.\n- I recommend toggling off “**Prefer native applications**” on Kiwi from its **Settings > Accessibility**.\n<figure>\n<video preload=\"metadata\" controls muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Toggle off auto native app opening\" src=\"/images/guides/getting-started-with-gitpod-in-android/kiwi_settings.mp4\" type=\"video/webm\"></video>\n</figure>\n\n![conversation 1](../../../../static/images/guides/getting-started-with-gitpod-in-android/convo.svg \"kumquat asks\")","metadata":{"source":"https://www.gitpod.io/guides/getting-started-with-gitpod-in-android","loc":{"lines":{"from":23,"to":31}}}}],["1318",{"pageContent":"![conversation 1](../../../../static/images/guides/getting-started-with-gitpod-in-android/convo.svg \"kumquat asks\")\n\n- Some shortcuts like **Windows/Meta + Key**, **Control + Space** and etc. will not work on Gitpod as Android captures them for its internal shortcuts. Unfortunately, you can not disable or remap them easily. To workaround, you will have to remap some of your conflicting IDE shortcuts from the [VS Code Browser](https://www.gitpod.io/docs/references/ides-and-editors/vscode-browser) settings.","metadata":{"source":"https://www.gitpod.io/guides/getting-started-with-gitpod-in-android","loc":{"lines":{"from":31,"to":33}}}}],["1319",{"pageContent":"Kiwi tips:\n\n- Try pressing “**Windows/Meta key**” + “**/**” on the Kiwi browser to see all browser and Android-system shortcuts.\n- My favourite shortcuts are Alt + Tab for quick application switching and Ctrl + T for quickly creating a new Kiwi tab.\n- Install the [Gitpod extension](https://chrome.google.com/webstore/detail/gitpod-always-ready-to-co/dodmmooeoklaejobgleioelladacbeki) on Kiwi to make your life easier.\n- I also use the [Vimium](https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=en) extension on Kiwi for swiftly navigating through websites without using my mouse.\n\n# Hardware keyboard and mouse\n\nNext, you need a way to control your phone as you would with a PC. There are two easy things you can do:\n\n- You can get a Bluetooth keyboard and mouse combo (this is the most convenient choice)\n- Or you can get a USB hub for your Android device and use a wired keyboard and mouse (this is the most responsive)","metadata":{"source":"https://www.gitpod.io/guides/getting-started-with-gitpod-in-android","loc":{"lines":{"from":35,"to":47}}}}],["1320",{"pageContent":"I've gone through both routes and ended up sticking with Bluetooth devices for convenience!\n\n# Display\n\nAs phone displays are so small, it can get tricky coding from such a small screen. There's no easy solution for this problem if you've got some entry-level or mid-range Android phone like me. Nowadays, even entry-level Android devices are powerful enough to serve you well and run a complete Linux GUI environment with virtually no lag unless you're a hardcore mobile gamer.\n\n**Note:** If you got a tablet or a high-end Android phone with USB-C 3.0, you probably don't need to care about the particular issue I will discuss in detail. You can skip it!\n\nCheap phones won't likely come with USB-C 3.0, so you won't be able to get direct VIDEO output from your phone to an external monitor/TV. Some third-party products utilize ADB, and a mini-CPU on the HDMI end to stream your Android display over a cable.","metadata":{"source":"https://www.gitpod.io/guides/getting-started-with-gitpod-in-android","loc":{"lines":{"from":49,"to":57}}}}],["1321",{"pageContent":"![external monitor](../../../../static/images/guides/getting-started-with-gitpod-in-android/external_monitor.jpg \"external monitor setup with android\")\n\nIn my case, I use a Chinese HDMI adapter for my microUSB phone to connect with this external screen. You can take \"[Renkchip](https://www.amazon.com/dp/B08DLJCV55/)\" for reference if you want one too. But, you have to consider a few things first:\n\n- If you're planning to buy it to connect with a TV, ensure that its input lag isn't more than 15ms. Otherwise, your experience will be terrible combined with the adapter input lag. You can use the [incredible Rtings.com TV input lag list](https://www.rtings.com/tv/tests/inputs/input-lag) for reference.\n- Avoid unbranded adapters if you buy online since most of those use a weak CPU for processing the VIDEO data on the HDMI end.\n  ![conversation 2](../../../../static/images/guides/getting-started-with-gitpod-in-android/convo2.svg \"kumquat asks\")","metadata":{"source":"https://www.gitpod.io/guides/getting-started-with-gitpod-in-android","loc":{"lines":{"from":59,"to":65}}}}],["1322",{"pageContent":"We can also utilize some software-based things; these can be helpful whether you're using an external screen or not. For instance:\n\n- Press the F11 key on a Gitpod workspace to make VS CODE full screen on the Kiwi browser.\n\n- Increase the **Smallest/Minimal Weight** on your phone's [**Developer options**](https://developer.android.com/studio/debug/dev-options#enable). It can be also referred as [DPI](https://en.wikipedia.org/wiki/Dots_per_inch). It will make things take less space on your tiny screen when the value is increased. **Please remember that it can brick some devices when increased too much, so don't go too far.**\n<figure>\n<video preload=\"metadata\" controls muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"modify DPI without root\" src=\"/images/guides/getting-started-with-gitpod-in-android/modify_dpi.mp4\" type=\"video/webm\"></video>\n</figure>\n\n# Extra Tips & tricks","metadata":{"source":"https://www.gitpod.io/guides/getting-started-with-gitpod-in-android","loc":{"lines":{"from":67,"to":76}}}}],["1323",{"pageContent":"# Extra Tips & tricks\n\n- You can use an app called [Rotation Control](https://play.google.com/store/apps/details?id=org.crape.rotationcontrol) to force landscape/auto-rotate mode for every app on Android (including your Home launcher!)\n- I'm using a $2 phone stand, it's called \"Retractable L7 Phone Stand\", sharing the name for reference in case you want to find something similar in your local market or online. Or you can put your phone against a book as well 😆\n\nCongratulations 🎉. Now you have set up the browser and display and connected the hardware keyboard and mouse with your Android phone. You can now code, build and learn seamlessly using Gitpod ⚡️. To get started, you can refer to the [following documentation](https://www.gitpod.io/docs/introduction/getting-started).","metadata":{"source":"https://www.gitpod.io/guides/getting-started-with-gitpod-in-android","loc":{"lines":{"from":76,"to":81}}}}],["1324",{"pageContent":"If you have more questions, drop by our community Discord server. We have the [#mobile-and-tablets](https://discord.com/channels/816244985187008514/890901203624534026) channel where fellow mobile-dev enthusiasts hang out!","metadata":{"source":"https://www.gitpod.io/guides/getting-started-with-gitpod-in-android","loc":{"lines":{"from":83,"to":83}}}}],["1325",{"pageContent":"---\nauthor: nancy-chauhan, Siddhant-K-code, axonasif, loujaybee\ndate: Friday, 19 August 2022 02:00:00 UTC\nexcerpt: This guide will focus on topics and concepts that can help you set up an ephemeral dev environment on Gitpod\nslug: guide-ephemeral-dev-environment-on-gitpod\nteaserImage: header.jpg\nimage: teaser.jpg\ntitle: Build Projects in a Gitpod Ephemeral Dev Environment — The Ultimate Guide\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\nGitpod is a remote development platform. Gitpod workspaces are ephemeral and only live for as long as you work on a task. While ephemeral workspaces are a very powerful feature, they're also likely new to you, which is why you're here. In this guide, we'll walk you through what ephemerality means for a development environment in the cloud and how Gitpod enables you to work in this totally new way of working. Welcome to the future!","metadata":{"source":"https://www.gitpod.io/guides/guide-ephemeral-dev-environment-on-gitpod","loc":{"lines":{"from":1,"to":15}}}}],["1326",{"pageContent":"First up, what is ephemerality? Rather than having a single static environment (like your local machine), Gitpod users are encouraged to codify their dev environment as code (more on how to do this later!). With your project codified, you'll be able to spin up a new workspace, start coding and throw away the workspace when you're done.\n\nLet me give you a few examples where ephemerality shines :\n\n1. **Always start from a clean slate** - If you break something in your environment, rather than waste time trying to figure out exactly which environment variable or configuration you accidentally updated, throw away the workspace and start a new working workspace.\n2. **Work on many workspaces at once** - Let's say you're working on a feature while simultaneously supporting reviewing a colleague's code. Rather than having to update your local environment to swap between, you can create a new parallel workspace and code in two (or more!) workspaces simultaneously.","metadata":{"source":"https://www.gitpod.io/guides/guide-ephemeral-dev-environment-on-gitpod","loc":{"lines":{"from":17,"to":22}}}}],["1327",{"pageContent":"Gitpod ensures when you open a new workspace, all the correct tools & packages are in place, any servers or processes are running, and more. We will also dig into neat features of Gitpod, such as 'Prebuilds', which install dependencies ahead of time so that when you open a new workspace, you don't have to wait for anything to install.\n\nThis guide will focus on topics and concepts that can help you set up an ephemeral dev environment on Gitpod:\n\n1. [Configuring your dev environment with code](#configuring-your-dev-environment-with-code)\n2. [Faster startup by enabling prebuilds](#faster-startup-by-enabling-prebuilds)\n3. [Persisting environment variables and files](#persisting-environment-variables-and-files)\n\nSound good? Let's dive in and learn how to configure your development environment with Gitpod.\n\n# Configuring your dev environment with code","metadata":{"source":"https://www.gitpod.io/guides/guide-ephemeral-dev-environment-on-gitpod","loc":{"lines":{"from":24,"to":34}}}}],["1328",{"pageContent":"Sound good? Let's dive in and learn how to configure your development environment with Gitpod.\n\n# Configuring your dev environment with code\n\nTo start any project, you typically need to install the dependencies and tools required to run the project. This setup process can become tedious and error-prone if you repeatedly set up your dev environment. If you're working on ephemeral environments, you want to be able to throw away an environment and start a new one, so you don't want to have a single barrier to simply creating a new workspace.","metadata":{"source":"https://www.gitpod.io/guides/guide-ephemeral-dev-environment-on-gitpod","loc":{"lines":{"from":34,"to":38}}}}],["1329",{"pageContent":"In Gitpod, you can configure your dev environment as code with `.gitpod.yml` and an optional `.gitpod.Dockerfile` file. Gitpod can be configured to install all the tools and dependencies you need to start your project. Since both these configuration files are committed to version control, you get all of the benefits of source control, such as viewing the history and authors of files. With this configuration, your dev environment remains consistent throughout the organization.","metadata":{"source":"https://www.gitpod.io/guides/guide-ephemeral-dev-environment-on-gitpod","loc":{"lines":{"from":40,"to":40}}}}],["1330",{"pageContent":"Configuring your project with a `.gitpod.yml`\n\nThe `.gitpod.yml` file prepares your dev environment by automating setup like dependency installation and specifying which application ports to open on workspace start. Every time you open your project or a repository in a new workspace, all the configured tasks are executed. The `.gitpod.yml` file lives at the root of your project. For example:\n\n```yml\n# Commands to start on workspace startup\ntasks:\n  - init: yarn install\n    command: yarn build\n# Ports to expose on workspace startup\nports:\n  - port: 8000\n    onOpen: open-preview\n```\n\nYou can read more about `.gitpod.yml` in [docs: config gitpod file](https://www.gitpod.io/docs/references/gitpod-yml)","metadata":{"source":"https://www.gitpod.io/guides/guide-ephemeral-dev-environment-on-gitpod","loc":{"lines":{"from":42,"to":57}}}}],["1331",{"pageContent":"Setting up your first `.gitpod.yml` ⚡️\n\n`youtube: E95oV_iqUtI `\n\n1. Open your repo in a new Gitpod workspace. The simplest way is by appending the entire repo URL (including the protocol) to `gitpod.io/#`, e.g. `gitpod.io/#https://github.com/gitpod-io/gitpod`\n2. Create a `.gitpod.yml` in the root directory of your project, e.g. `touch .gitpod.yml`\n   > Tip: Instead of manually creating the `gitpod.yml`, type `gp init` in the terminal of your Gitpod workspace. (`gp` is a CLI for Gitpod included in all Gitpod workspaces)\n3. For Gitpod to detect configuration changes, push and commit your `gitpod.yml`.\n4. Now open your project in a new workspace by prefixing your repo URL with `gitpod.io/#{your-repository-url}` or using the Gitpod extension.","metadata":{"source":"https://www.gitpod.io/guides/guide-ephemeral-dev-environment-on-gitpod","loc":{"lines":{"from":59,"to":67}}}}],["1332",{"pageContent":"You can read more about `.gitpod.yml` in the [configure](https://www.gitpod.io/docs/references/gitpod-yml) documentation. For information about the `.gitpod.yml` file properties, see the [`.gitpod.yml` reference documentation](https://www.gitpod.io/docs/references/gitpod-yml).","metadata":{"source":"https://www.gitpod.io/guides/guide-ephemeral-dev-environment-on-gitpod","loc":{"lines":{"from":69,"to":69}}}}],["1333",{"pageContent":"Configure your developer environment based on a Dockerfile\n\nIn addition to supplying commands via the `.gitpod.yml`, you can also configure a Dockerfile. Using Docker can be helpful if you already have a Dockerfile for your application, are familiar with the format, or want to leverage the many benefits of the Dockerfile format, such as improved caching and performance. Gitpod workspaces, by default, start with an image called `workspace-full` (more on this soon), or you can configure a custom Dockerfile.","metadata":{"source":"https://www.gitpod.io/guides/guide-ephemeral-dev-environment-on-gitpod","loc":{"lines":{"from":71,"to":73}}}}],["1334",{"pageContent":"Gitpod default Docker image\n\nBy default, Gitpod uses `workspace-full` for Gitpod workspaces. `workspace-full` comes pre-installed with Docker, Nix, Go, Java, Node.js, C/C++, Python, Ruby, Rust, and PHP, as well as tools such as Homebrew, Tailscale, Nginx, and several more.\n\nGitpod [provides some premade and optimized workspace images](https://github.com/gitpod-io/workspace-images) for various programming languages and tools. You can select an image by adding it to your `.gitpod.yml` file.\n\nFor example, if you want to use Java 17, specify the following in your `.gitpod.yml` file.\n\n```yml\nimage: gitpod/workspace-java-17\n```\n\n> Note: To avoid unexpected breaking changes, we suggest that you explicitly pin your workspace image. For Gitpod images, we recommend using a time-stamped image tag for maximum reproducibility. For example, `image: gitpod/workspace-full:2022-08-17-18-37-55` (taken from the tags panel on this [dockerhub page](https://hub.docker.com/r/gitpod/workspace-full))","metadata":{"source":"https://www.gitpod.io/guides/guide-ephemeral-dev-environment-on-gitpod","loc":{"lines":{"from":75,"to":87}}}}],["1335",{"pageContent":"Bring your own Dockerfile\n\nSuppose one of the premade workspace images doesn't fit your needs, or you want to extend an image with additional configuration, such as a specific service or programming language. In that case, you can [bring your own (Docker) image to Gitpod](https://www.gitpod.io/blog/docker-in-gitpod).\n\n1. You can configure a custom Dockerfile by adding a reference to the Dockerfile location to use in your `.gitpod.yml`. We recommend the `.gitpod.Dockerfile` naming convention.\n\n```yml\nimage:\n  file: .gitpod.Dockerfile","metadata":{"source":"https://www.gitpod.io/guides/guide-ephemeral-dev-environment-on-gitpod","loc":{"lines":{"from":89,"to":97}}}}],["1336",{"pageContent":"2. Next, create a `.gitpod.Dockerfile` file at the root of your project.\n3. You can start using the lightweight base image [gitpod/workspace-base](https://github.com/gitpod-io/workspace-images) for your custom Docker image. The `workspace-base` image has some default tooling, whereas `gitpod/workspace-full` already has a lot of pre-installed installed tools.\n4. Start adding the commands you need for your dev environment.\n\nRead more about how to [configure a custom Dockerfile](https://www.gitpod.io/docs/configure/workspaces/workspace-image#configure-a-custom-dockerfile).\n\n# Faster startup by enabling prebuilds","metadata":{"source":"https://www.gitpod.io/guides/guide-ephemeral-dev-environment-on-gitpod","loc":{"lines":{"from":100,"to":106}}}}],["1337",{"pageContent":"Read more about how to [configure a custom Dockerfile](https://www.gitpod.io/docs/configure/workspaces/workspace-image#configure-a-custom-dockerfile).\n\n# Faster startup by enabling prebuilds\n\nWhen working on your local machine, you typically have a single environment to configure and work on simultaneously. You manually install dependencies and system configurations when switching branches or projects. With Gitpod, you can have many concurrent workspaces. Rather than doing tasks like dependency installation when you swap the branch, you can start a new workspace based on your latest development environment image.","metadata":{"source":"https://www.gitpod.io/guides/guide-ephemeral-dev-environment-on-gitpod","loc":{"lines":{"from":106,"to":110}}}}],["1338",{"pageContent":"Every time you create a new ephemeral workspace, a lot of time can be saved by using a Prebuild. Prebuilds allow you to configure asynchronous builds of your workspace image when it's updated or changed. This is a very similar approach to how Continuous Integration tools work. When collaborating with peers and working on the same branch, configuring a Prebuild can be helpful as Gitpod triggers it whenever there is a commit to the repository.\n\nFor example, the `.gitpod.yml` saves 41 minutes of installation and building time for the [Node.js](https://github.com/nodejs/node) repo that would otherwise have to be run on your machine. In Gitpod, the workspace image is prebuilt, so all you have to do is start a new workspace.","metadata":{"source":"https://www.gitpod.io/guides/guide-ephemeral-dev-environment-on-gitpod","loc":{"lines":{"from":112,"to":114}}}}],["1339",{"pageContent":"<figure class=\"flex flex-col items-center text-center\">\n  <img src=\"/images/guides/guide-ephemeral-dev-environment-on-gitpod/tweet-image.png\" alt=\"This is tweet about of Node.js project. With Gitpod Prebuilds it got even faster\" width=\"400\" />\n   <figcaption class=\"w-full\">This is <a href=\"https://twitter.com/Siddhant_K_code/status/1548143768301318144\">tweet</a> about Node.js project. With <a href=\"https://www.gitpod.io/docs/configure/projects/prebuilds\">Gitpod Prebuilds</a> it got even faster.</figcaption>\n</figure>\n\n<figure class=\"flex flex-col items-center text-center\">\n  <img src=\"/images/guides/guide-ephemeral-dev-environment-on-gitpod/gitpod-prebuilds.png\" alt=\"Average of Time we save through prebuilds with our own Gitpod project\"/>\n   <figcaption class=\"w-full\">Average of Time we save through prebuilds with our Gitpod project.</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/guides/guide-ephemeral-dev-environment-on-gitpod","loc":{"lines":{"from":116,"to":124}}}}],["1340",{"pageContent":"How to get started with Prebuilds\n\nPrebuilds work for GitHub, Gitlab and Bitbucket repositories (see our [Prebuilds documentation](https://www.gitpod.io/docs/configure/projects/prebuilds#configuring-prebuilds-manually) for more). To give you a real example, though, let's take a look at how you can enable Prebuilds for GitHub:\n\n1. To enable Gitpod Prebuilds for a repository, you must install the [Gitpod GitHub App](https://github.com/apps/gitpod-io) for your repository.\n2. Click 'Configure' and choose the repository where you wish to install the Gitpod App.\n3. The GitHub app will create the prebuild for every merged commit (on the particular branch), or you can configure it for every PR, and Gitpod will store the prebuilt image. With Prebuilds, whenever a new workspace is created, Gitpod will load the previously built image.","metadata":{"source":"https://www.gitpod.io/guides/guide-ephemeral-dev-environment-on-gitpod","loc":{"lines":{"from":126,"to":132}}}}],["1341",{"pageContent":"By default, Gitpod prepares prebuilt workspaces for all changes on the default branch and pull/merge requests from the same repository. Here is an example where [Dropwizard](https://github.com/dropwizard/dropwizard/blob/HEAD/.gitpod.yml) has enabled the Prebuilds. The GitHub prebuilds section in the `.gitpod.yml` file configures the specific conditions when prebuilds should be run.\n\n```yml\nGitHub:\n  prebuilds:\n    # enable for the default branch\n    master: true\n    # enable for all branches in this repo\n    branches: true\n    # enable for pull requests coming from this repo\n    pullRequests: true\n    # enable for pull requests coming from forks\n    pullRequestsFromForks: true\n    # add a check to pull requests\n    addCheck: true\n    # add a \"Review in Gitpod\" button as a comment to pull requests\n    addComment: false\n    # add a \"Review in Gitpod\" button to the pull request's description\n    addBadge: false","metadata":{"source":"https://www.gitpod.io/guides/guide-ephemeral-dev-environment-on-gitpod","loc":{"lines":{"from":134,"to":152}}}}],["1342",{"pageContent":"> **Important:** Prebuilds only save the workspace directory. Any file changes made outside of `/workspace` file hierarchy from `init` tasks will be lost on workspace start when prebuilds are enabled.\n\nYou can read more about prebuilds in the [following doc](https://www.gitpod.io/docs/configure/projects/prebuilds).\n\n# Persisting environment variables and files\n\nEvery time you start a project, you require API keys, secrets like database passwords or sensitive information that can't be committed to the version control system. These are usually added as environment variables that are used to configure a value in your code. When working with an ephemeral workspace, you will have to set up everything again for each new task. We will discuss a few ways with which we can persist these environment variables across Gitpod workspaces.","metadata":{"source":"https://www.gitpod.io/guides/guide-ephemeral-dev-environment-on-gitpod","loc":{"lines":{"from":155,"to":161}}}}],["1343",{"pageContent":"Configure environment variables in Gitpod\n\nYou can configure persistent environment variables in your Gitpod [Account settings](https://gitpod.io/variables).\n\n<figure class=\"flex flex-col items-center text-center\">\n  <img src=\"/images/guides/guide-ephemeral-dev-environment-on-gitpod/env-vars.png\" alt=\"Configure the persistent environment variables in your Gitpod account settings.\" />\n</figure>\n\nThe scope of each variable determines in what workspaces it will be available. Scope patterns follow the `owner/repository` pattern:\n\nYou can use a wildcard (denoted with a `*`) to match either the `owner` or `repo`, for example:","metadata":{"source":"https://www.gitpod.io/guides/guide-ephemeral-dev-environment-on-gitpod","loc":{"lines":{"from":163,"to":173}}}}],["1344",{"pageContent":"You can use a wildcard (denoted with a `*`) to match either the `owner` or `repo`, for example:\n\n- **Single organizations** - Setting `dropwizard/*` would make an environment variable available in all repositories owned by the organization dropwizard.\n- **Single repository** - `*/dropwizard` would make an environment variable available on all repositories called `dropwizard`; this is especially useful for forks.\n- **All organizations or repositories** - Using `*/*` would make an environment variable available in every repository for any organization for that given user.\n\n<figure class=\"flex flex-col items-center text-center\">\n  <img src=\"/images/guides/guide-ephemeral-dev-environment-on-gitpod/scope.png\" alt=\"Scope of each variable determines in what workspaces it will be available\" width=\"500\" />\n</figure>\n\nYou can read more about environment variables in [Environment Variables on Gitpod](https://www.gitpod.io/docs/configure/projects/environment-variables).","metadata":{"source":"https://www.gitpod.io/guides/guide-ephemeral-dev-environment-on-gitpod","loc":{"lines":{"from":173,"to":183}}}}],["1345",{"pageContent":"Persisting files between workspace restarts\n\n> For those of you who are looking to persist personal configurations with non-sensitive data, such as bash or zsh configs, you can use [dotfiles](https://www.gitpod.io/docs/configure/user-settings/dotfiles). For sensitive information, an option (outside of introducing your secret store, such as [vault](https://www.vaultproject.io/)) is to leverage: [environment variables](https://www.gitpod.io/docs/configure/projects/environment-variables) and consider encoding, e.g. with base64. See blog posts[[1]](https://www.gitpod.io/blog/personalize-your-gitpod-workspace-environment) [[2]](https://www.gitpod.io/guides/automate-env-files-with-gitpod-environment-variables) .\n\nThere would be some use cases where we would want to persist some files between workspace starts. For example, `.bash_history` refers to previously used history commands.","metadata":{"source":"https://www.gitpod.io/guides/guide-ephemeral-dev-environment-on-gitpod","loc":{"lines":{"from":185,"to":189}}}}],["1346",{"pageContent":"There would be some use cases where we would want to persist some files between workspace starts. For example, `.bash_history` refers to previously used history commands.\n\nHere we would like to persist the `.bash_history` file under the `$HOME` directory. For this, we will create a folder `.persist` inside the `/workspace` folder.\n\nInside your workspace, Open the terminal & run the following steps:\n\n- Step 1: `mkdir -p /workspace/.persist`\n- Step 2: `cp $HOME/.bash_history /workspace/.persist`\n- Step 3: Add the following task inside `.gitpod.yml`:\n\n```yaml\ntasks:\n  - name: Restore persist\n    before: |\n      cp /workspace/.persist/.bash_history $HOME;\n      # Copy more files as necessary below\n      exit;","metadata":{"source":"https://www.gitpod.io/guides/guide-ephemeral-dev-environment-on-gitpod","loc":{"lines":{"from":189,"to":205}}}}],["1347",{"pageContent":"- Step 4: [See it in action](https://www.gitpod.io/docs/config-gitpod-file#see-it-in-action)\n\n> **Note**: This is just a temporary solution. The issue for this is still open [Issue URL](https://github.com/gitpod-io/gitpod/issues/8716)\n\n# Recommended Reading\n\n- [Docs: Config Dotfiles](https://www.gitpod.io/docs/configure/user-settings/dotfiles)\n- [GitHub Repository: Bring your own Dotfiles to Gitpod | dotfiles on Gitpod](https://github.com/gitpod-io/demo-dotfiles-with-gitpod)\n- [GitHub Repository: AWS Single Sign-On (SSO) and Amazon Elastic Container Registry (ECR) with Gitpod](https://github.com/gitpod-io/demo-aws-with-gitpod)\n- [Guide: Gitpodifying — The Ultimate Guide](https://www.gitpod.io/guides/gitpodify)\n- [Blog: Personalize your Gitpod Workspace Environments](https://www.gitpod.io/blog/personalize-your-gitpod-workspace-environment)","metadata":{"source":"https://www.gitpod.io/guides/guide-ephemeral-dev-environment-on-gitpod","loc":{"lines":{"from":208,"to":218}}}}],["1348",{"pageContent":"# Ready to code 🚀\n\nYay! You are now ready to get started with an ephemeral Dev Environment on Gitpod.\n\nIf you have questions about configuring your project, drop by our community [Discord server](https://gitpod.io/chat). We would love to hear your feedback in the [Gitpod Community](https://www.gitpod.io/community).","metadata":{"source":"https://www.gitpod.io/guides/guide-ephemeral-dev-environment-on-gitpod","loc":{"lines":{"from":222,"to":226}}}}],["1349",{"pageContent":"---\nauthor: jankeromnes\ndate: Thu Jun 6 2019 09:00:00 GMT+0000 (UTC)\nexcerpt: I recently stumbled upon a new project on GitHub that piqued my interest. It proposed a new type of database that I was dying to try out. So\nslug: gitpodify\nsubtitle: How to fully automate your dev environments on GitHub\nteaserImage: teaser.jpg\nimage: thumbnail.jpg\ntitle: Gitpodifying — The Ultimate Guide\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\nI recently stumbled upon a new project on GitHub that piqued my interest. It proposed a new type of database that I was dying to try out. So I cloned their repository, and looked at their README for a way to build their code.","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":1,"to":16}}}}],["1350",{"pageContent":"After activating a Python 3.7 virtual env and running `pip install -v -e .` as suggested, I was soon faced with a rather cryptic build output. Investigating a bit revealed that some build command was failing due to a missing package: `zlib1g-dev`. I figured out the right incantation to install it on my machine, then tried again. Next it was `libreadline6-dev` that was missing. After a few similar iterations, I guessed that the project probably needed all [PostgreSQL build dependencies](https://www.manniwood.com/postgresql_93_compile_install_howto/index.html), so I went ahead and installed all that. Yet somehow the project still wouldn't build, showing yet another error, but by then I was out of free time and had to call it a day. Sadly, I hadn't been able to run this project even once.","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":18,"to":18}}}}],["1351",{"pageContent":"If you're a developer, this scenario probably sounds familiar. In fact, that repository's setup instructions were already pretty helpful, but still we frequently face these kinds of setup problems — you probably have similar stories of your own. In the software industry, we collectively lose too much time and energy setting up many projects, on countless systems, often in half-broken ways.\n\nWhat if there was a better way to do this? Maybe one day we can all just forget about troubleshooting build dependencies, and simply focus on the projects' code itself? I have good news: Developer environments can be automated, in the form of scripts and Dockerfiles in your repository, in a way that allows anyone interested in your project to get a ready-to-code environment for free in seconds, without having to worry about dependencies ever again. How does it work? I'm glad you asked!\n\n<br>\n\n<div class=\"overflow-x-auto\">","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":20,"to":26}}}}],["1352",{"pageContent":"| <div style=\"width:120px\">&nbsp;</div>     | The idea in brief                                                                                                                                                                                                                                        |\n| ----------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| &nbsp;&nbsp;<strong>The problem</strong>  | Figuring out which dependencies, tools, and language versions to install to properly configure a dev environment takes a lot of time and energy, and has to be repeated from scratch every time you use a different computer, and for every new project. |","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":28,"to":30}}}}],["1353",{"pageContent":"| &nbsp;&nbsp;<strong>The cause</strong>    | Most setup instructions are written in a format that is not executable or reproducible, like plain text in Markdown files.                                                                                                                               |\n| &nbsp;&nbsp;<strong>The solution</strong> | To solve this problem for every developer of your project, setup instructions should be written in a format that is executable, like scripts and Dockerfiles, and ideally versioned and shipped with your code. Gitpod was invented to make this easy.   |","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":31,"to":32}}}}],["1354",{"pageContent":"</div>","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":32,"to":32}}}}],["1355",{"pageContent":"Introducing Gitpod\n\nSo you're ready to fully automate your GitHub project's development setup? That's great! I'm here to help you achieve this. 👍\n\nIn this guide, I will be using Gitpod, a free developer service that makes it easy for maintainers to automate any non-executable setup instructions as code. If you follow it, you will end up with a button that launches pre-configured containers for your project, thus allowing everyone to check out your repository and run your code in a single click.\n\nThe first thing you'll probably want to do is try opening your repository in Gitpod. You can do this by navigating to your GitHub project root, and then typing `gitpod.io/#` before the URL. It should look a bit like this:\n\n```bash\ngitpod.io/#https://github.com/gitpod-io/website","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":40,"to":49}}}}],["1356",{"pageContent":"<br>\n\nWhen you see the IDE and Terminal, just try building and running your project as usual. Maybe it will just work out of the box, but maybe you'll notice that something is missing or broken, and you can iterate on your Gitpod setup to fix it (see table of contents below).\n\nOnce you're happy with your automated setup, a cool way to guide your contributors toward it is to add a Gitpod badge to your README. Here is a Markdown snippet you can use (just replace the `...` with your repo):\n\n```markdown\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/...)\n```\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-io/website)\n\nHappy with your onboarding experience? Great! You're all set. 🎉\n\nDo you wish Gitpod would do more for your project? Then please read on. 👇","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":52,"to":66}}}}],["1357",{"pageContent":"Table of contents\n\n- [Introducing Gitpod](#introducing-gitpod)\n- [Table of contents](#table-of-contents)\n- [Running init scripts](#running-init-scripts)\n- [Accelerating startup with prebuilt workspaces](#accelerating-startup-with-prebuilt-workspaces)\n- [Installing missing packages](#installing-missing-packages)\n- [Installing databases](#installing-databases)\n  - [PostgreSQL](#postgresql)\n  - [MySQL](#mysql)\n  - [Redis](#redis)\n  - [MongoDB](#mongodb)\n- [Getting a Virtual Desktop](#getting-a-virtual-desktop)\n- [Opening previews](#opening-previews)\n- [Solving common preview problems](#solving-common-preview-problems)\n  - [Invalid Host Header](#invalid-host-header)\n  - [CSP errors](#csp-errors)\n  - [Unreachable localhost URLs](#unreachable-localhost-urls)\n  - [No usable sandbox](#no-usable-sandbox)\n- [Setting env variables](#setting-env-variables)","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":68,"to":87}}}}],["1358",{"pageContent":"Running init scripts\n\nAdding a `.gitpod.yml` file at the root of your repository allows customizing Gitpod for your project. A useful thing it can do is running scripts on start-up (or sometimes even before start-up: the [Gitpod app](https://github.com/apps/gitpod-io) can watch your repo and start pre-building the `init` step for every commit, see the next section for more info):\n\n```yml\ntasks:\n  - init: npm install\n    command: npm start\n```\n\n(Please note the single `-` symbol: `init` and `command` should run in the same Terminal, one after each other.)\n\nTo open multiple Terminals on startup, just add more `-` entries under `tasks`:\n\n```yml\ntasks:\n  - init: npm install\n    command: npm run server\n  - command: npm run client","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":89,"to":107}}}}],["1359",{"pageContent":"<br>\n\nBut this example probably won't work, because `npm run client` likely also needs dependencies from `npm install`, so you might get an error like this in your second Terminal:\n\n> `Error: Cannot find module 'lib'`\n\nIn order to make a Terminal wait for another Terminal to finish some task (e.g. installing dependencies), you can use the `gp sync-done` and `gp sync-await` commands like so:\n\n```yml\ntasks:\n  - init: |\n      npm install\n      gp sync-done installation\n    command: npm run server\n  - init: gp sync-await installation\n    command: npm run client\n```\n\nTo learn more about configuring Terminals, please visit [the docs](/docs/configure/workspaces/tasks).","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":110,"to":128}}}}],["1360",{"pageContent":"Accelerating startup with prebuilt workspaces\n\nWith medium-to-large GitHub projects, your `init` step might take a long time to complete, especially if you need to compile code. To avoid that you and your contributors wait forever, you can make Gitpod auto-build your repository on every push, and start building workspaces even before Gitpod is opened. This will shave up to several minutes off your workspace loading times, and make your developers very happy.\n\nTo enable prebuilt workspaces, simply install the [Gitpod app](https://github.com/apps/gitpod-io) for your GitHub repository, and Gitpod will start auto-building all your branches and Pull Requests continuously in the background.\n\nOptionally, you can then customize the app's behavior for your project by editing your `.gitpod.yml` like so:","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":130,"to":136}}}}],["1361",{"pageContent":"Optionally, you can then customize the app's behavior for your project by editing your `.gitpod.yml` like so:\n\n```yml\ngithub:\n  prebuilds:\n    # enable for the master/default branch (defaults to true)\n    master: true\n    # enable for all branches in this repo (defaults to false)\n    branches: false\n    # enable for pull requests coming from this repo (defaults to true)\n    pullRequests: true\n    # add a check to pull requests (defaults to true)\n    addCheck: true\n    # add a \"Review in Gitpod\" button as a comment to pull requests (defaults to false)\n    addComment: false","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":136,"to":150}}}}],["1362",{"pageContent":"To see all configuration options for the Gitpod app, please visit [the docs](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":153,"to":153}}}}],["1363",{"pageContent":"Installing missing packages\n\nThe default Docker image for all Gitpod workspaces ([gitpod/workspace-full](https://github.com/gitpod-io/workspace-images/blob/d43c719bb2ff7b6849c0456fe21e3ca06c20168f/dazzle.yaml#L18-L32)) already comes with many common developer tools. But sometimes you may see an error like this one:\n\n> `bash: tool: command not found`\n\nAnd if you try to install it locally using `sudo`, you might see an error like this:\n\n> `sudo: effective uid is not 0`\n\n<br>\n\nThe solution is to write a small Dockerfile for your project. If a particular `tool` is missing in your Gitpod workspace, simply add this at the top of your `.gitpod.yml`:\n\n```yml\nimage:\n  file: .gitpod.dockerfile\n```\n\n<br>\n\nThen add a new file called `.gitpod.dockerfile` at the root of your repository, containing:\n\n```dockerfile\nFROM gitpod/workspace-full\n\nRUN sudo apt-get update \\\n && sudo apt-get install -y \\\n    tool \\\n && sudo rm -rf /var/lib/apt/lists/*","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":155,"to":184}}}}],["1364",{"pageContent":"<br>\n\nFrom now on, every new Gitpod workspace that will be opened for your repository will come with `tool` pre-installed. Cool right?","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":187,"to":189}}}}],["1365",{"pageContent":"Installing databases\n\nMany projects need a database to work properly. Here is how to install the most common databases in Gitpod — take your pick! (If yours is missing please [let us know](https://twitter.com/gitpod), we'd love to help you.)","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":191,"to":193}}}}],["1366",{"pageContent":"PostgreSQL\n\nTo get PostgreSQL for your project, you can use our dedicated [PostgreSQL image](https://github.com/gitpod-io/workspace-images/blob/main/chunks/tool-postgresql).\n\nSimply put the following line to your `.gitpod.yml` file:\n\n```yaml\nimage: gitpod/workspace-postgres\n```\n\n<br>\n\nThis will give you an auto-starting PostgreSQL server (it should auto-start every time you open a new Terminal), plus a few utility scripts that you can run in a Terminal or in a [`.gitpod.yml`](#running-init-scripts) command:\n\n- `pg_start`: start the PostgreSQL service\n- `pg_stop`: stop the PostgreSQL service\n- `pg_ctl status`: check if the PostgreSQL service is running\n\nOnce the PostgreSQL server is running, you can use the `psql` CLI as usual:\n\n```bash\n$ psql -h localhost -d postgres\npsql (10.8 (Ubuntu 10.8-0ubuntu0.18.10.1))\nType \"help\" for help.\n\npostgres=#\n```","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":195,"to":221}}}}],["1367",{"pageContent":"MySQL\n\nIf your project needs MySQL to work, we also have a dedicated [MySQL image](https://github.com/gitpod-io/workspace-images/blob/d43c719bb2ff7b6849c0456fe21e3ca06c20168f/chunks/tool-mysql/Dockerfile#L2). Simply base your `.gitpod.dockerfile` on:\n\n```dockerfile\nFROM gitpod/workspace-mysql\n```\n\n<br>\n\nThen you'll get an auto-starting MySQL server, and you can use the `mysql` CLI like so:\n\n```bash\nmysql -e \"show databases;\"\n```\n\n### Redis\n\nTo install Redis for your project, simply add these instructions to your `.gitpod.dockerfile`:\n\n```dockerfile\nFROM gitpod/workspace-full\n\n# Install Redis.\nRUN sudo apt-get update \\\n && sudo apt-get install -y \\\n  redis-server \\\n && sudo rm -rf /var/lib/apt/lists/*\n```\n\n<br>\n\nThen, you'll be able to start the Redis server by running this in a Terminal or in a `.gitpod.yml` command:\n\n```bash\nredis-server\n```","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":223,"to":259}}}}],["1368",{"pageContent":"MongoDB\n\nTo get MongoDB for your project, you can use our dedicated [MongoDB image](https://github.com/gitpod-io/workspace-images/blob/d43c719bb2ff7b6849c0456fe21e3ca06c20168f/chunks/tool-mongodb/Dockerfile#L2) built on top of `gitpod/workspace-base`.\n\nSimply base your `.gitpod.dockerfile` on:\n\n```dockerfile\nFROM gitpod/workspace-mongodb\n```\n\n<br>\n\nThen start the MongoDB server by running this in a Terminal or in a `.gitpod.yml` command:\n\n```bash\nmkdir -p /workspace/data && mongod --dbpath /workspace/data\n```\n\nNote: Storing MongoDB's data inside `/workspace` ensures that it will get backed up and restored properly when you stop and restart a workspace, or share a snapshot.","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":261,"to":279}}}}],["1369",{"pageContent":"Getting a Virtual Desktop\n\nIf your application needs to run a graphical UI, you might see an error like this:\n\n> `Gtk: cannot open display: :0`\n\n<br>\n\nThat's because by default, Gitpod workspaces don't have a graphical environment at all. Luckily, we have a dedicated [noVNC image](https://github.com/gitpod-io/workspace-images/blob/d43c719bb2ff7b6849c0456fe21e3ca06c20168f/chunks/tool-vnc/Dockerfile#L2) built on top of `gitpod/workspace-full` that comes with a Virtual Desktop.\n\nSimply base your `.gitpod.dockerfile` on:\n\n```dockerfile\nFROM gitpod/workspace-full-vnc","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":281,"to":294}}}}],["1370",{"pageContent":"<br>\n\nThis will give you a virtual X server and a Remote Desktop client running on port `6080`:\n\n![Virtual X server and Remote Desktop client running on port 6080](../../../static/images/guides/gitpodify/virtual-x-sever-running-on-a-remote-desktop-client.png)\n\nThis can be useful for example to run Electron apps graphically. For that, you'll just need a few extra dependencies in your `.gitpod.dockerfile`:\n\n```dockerfile\nFROM gitpod/workspace-full-vnc\n\n# Install Electron dependencies.\nRUN sudo apt-get update \\\n && sudo apt-get install -y \\\n  libasound2-dev \\\n  libgtk-3-dev \\\n  libnss3-dev \\\n && sudo rm -rf /var/lib/apt/lists/*","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":297,"to":314}}}}],["1371",{"pageContent":"<br>\n\nTo learn more, please see our dedicated post on [Developing native UI applications in Gitpod](/blog/native-ui-with-vnc).\n\nOr check out this fun [Windows 95 in Electron](https://github.com/felixrieseberg/windows95) example (see the <a href=\"https://github.com/felixrieseberg/windows95/blob/master/docs/docker-kubernetes-gitpod.md\" target=\"_blank\">Gitpod demo</a>, [.gitpod.yml](https://github.com/gitpod-io/definitely-gp/blob/master/windows95/.gitpod.yml), and [Dockerfile](https://github.com/gitpod-io/definitely-gp/blob/master/windows95/Dockerfile)).","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":317,"to":321}}}}],["1372",{"pageContent":"Opening previews\n\nGitpod will automatically detect when processes like web servers start listening on a port, and display a notification that allows you to open a web preview:\n\n![Port notification](../../../static/images/guides/gitpodify/port-notification.png)\n\nIf you want to suppress these notifications, or pre-configure a specific behavior, you can do this in your `.gitpod.yml` file:\n\n```yml\nports:\n  - port: 8080\n    onOpen: open-preview\n  - port: 9000-9999\n    onOpen: ignore\n```\n\n<br>\n\nAnother way to open web previews is to run `gp preview <url>` in a Terminal or in your [`.gitpod.yml`](#running-init-scripts) commands. This can be used in combination with `gp url <port>` to open a web preview for a given port, like so:\n\n```yml\ntasks:\n  - command: python3 -m http.server 8080\n  - command: gp preview $(gp url 8080)","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":323,"to":346}}}}],["1373",{"pageContent":"<br>\n\nHowever, if the preview opens too soon, you might see an error like this:\n\n> Port 8080 didn't respond\n\nIf you'd like a task to run only when a given port becomes active, you can use `gp ports await <port>` like so:\n\n```yml\ntasks:\n  - init: npm install\n    command: npm run server 3000\n  - command: gp ports await 3000 && gp preview $(gp url 3000)\n```\n\n<br>\n\nIf the `Port X didn't respond` error persists, please double-check in the Terminal output that your server is actually running on that port, then refresh the Preview pane. (Or, if it's a Browser tab, please close it and re-open it from the IDE's \"Open Ports\" view — refresh isn't currently supported for Browser preview tabs).","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":349,"to":366}}}}],["1374",{"pageContent":"Solving common preview problems\n\nSometimes web servers like to negotiate a little before accepting to serve your precious content. Here is how to troubleshoot the most common issues.","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":368,"to":370}}}}],["1375",{"pageContent":"Invalid Host Header\n\nSince we're running in a cloud workspace, URLs like `localhost:3000` should be converted to something like `3000-abc-123.ws-eu0.gitpod.io`. You can get the exact preview URL for a port by running `gp url <port>`, or by checking the \"Open Ports\" IDE view.\n\nThis custom hostname may annoy servers like [webpack-dev-server](https://github.com/webpack/webpack-dev-server), because they usually only accept requests on `localhost`. So you might see an error like this one:\n\n> Invalid Host Header\n\n<br>\n\nTo make your server accept non-`localhost` requests, you can use the following CLI parameters (e.g. with `webpack-dev-server` or `ng serve`):\n\n> `--host 0.0.0.0 --disable-host-check`\n\n<br>\n\nOr you can edit your `webpack.config.js`, or `vue.config.js`, like so:\n\n```js\ndevServer: {\n  host: '0.0.0.0',\n  disableHostCheck: true,\n},","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":372,"to":394}}}}],["1376",{"pageContent":"<br>\n\nAlternatively, if you don't want to use `disableHostCheck`, you can also add `'.gitpod.io'` to your `allowedHosts`, like so:\n\n```js\ndevServer: {\n  host: '0.0.0.0',\n  allowedHosts: ['localhost', '.gitpod.io'],\n},\n```\n\n<br>\n\nSee all `webpack-dev-server` configuration options [here](https://webpack.js.org/configuration/dev-server/).\n\nIf you don't have direct access to the dev server configuration, e.g. when using frameworks like [Create React App](https://github.com/facebook/create-react-app), you might want to look in the framework's docs for a similar option, like CRA's environment variable `DANGEROUSLY_DISABLE_HOST_CHECK`:\n\n```yml\ntasks:\n  - before: export DANGEROUSLY_DISABLE_HOST_CHECK=true\n    init: yarn install\n    command: yarn start\n```","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":397,"to":419}}}}],["1377",{"pageContent":"CSP errors\n\nIf the Preview pane still refuses to display your web app, please open the Browser Console (e.g. by typing `F12` or by exploring your Browser menus). In there, you might see errors mentioning things like:\n\n> `X-Frame-Options`\n\nOr:\n\n> `CSP frame-src`\n\nThese mean that your web app refuses to be opened inside an `<iframe>`, for security reasons (that's what the Preview pane uses to display web apps). In that case, please open previews in an external Browser tab instead, e.g. by going to the \"Open Ports\" IDE view and clicking the `Open Browser` button.","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":421,"to":431}}}}],["1378",{"pageContent":"Unreachable localhost URLs\n\nIf your web app starts to show up in a preview, but it doesn't work well, the Browser Console might reveal failing requests to `localhost` URLs like:\n\n```bash\nhttp://localhost:9000/api/v1/","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":433,"to":438}}}}],["1379",{"pageContent":"This happens for example with some Angular apps, that like to run a web client on a port like `3000`, and an API backend on a different port like `9000`.\n\nIf that's your case, you can try two things:\n\n1. Replace all references to `localhost:9000` in your web client with the result of the `gp port 9000` command (should be something like `9000-abc-123.ws-eu0.gitpod.io`)\n2. Configure your port `3000` server to proxy certain requests (e.g. starting with `/api`) to `localhost:9000` on the server-side\n\nYou can sometimes do 1. with a simple configuration change, and here is how you can achieve 2. in an Angular app using the [Angular CLI](https://cli.angular.io/):\n\nCreate a new file called `proxy.config.json`, that includes a proxy route like:\n\n```json\n{\n  \"/api\": {\n    \"target\": \"http://localhost:9000\",\n    \"secure\": false\n  }\n}","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":441,"to":458}}}}],["1380",{"pageContent":"And then point `ng serve` to that file using the `--proxy-config` parameter:\n\n```bash\nng serve --proxy-config proxy.config.json --host 0.0.0.0 --disable-host-check --port 3000\n```\n\n<br>\n\nFor a complete example using PostgreSQL, Angular CLI, disableHostCheck, and a backend proxy, please check out the [PeerTube](https://joinpeertube.org/) project ([.gitpod.yml](https://github.com/Chocobozzz/PeerTube/blob/develop/.gitpod.yml), [Dockerfile](https://github.com/Chocobozzz/PeerTube/blob/develop/support/docker/gitpod/Dockerfile), [proxy.config.json](https://github.com/Chocobozzz/PeerTube/blob/develop/client/proxy.config.json), [ng serve command](https://github.com/Chocobozzz/PeerTube/blob/master/scripts/watch/client.sh)).","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":461,"to":469}}}}],["1381",{"pageContent":"No usable sandbox\n\nOk this is not really a preview problem, but I thought I'd mention it here anyway since we're already troubleshooting.\n\nMore and more projects are using headless Chrome as a dependency (e.g. via [Puppeteer](https://github.com/GoogleChrome/puppeteer)), and when running it in Gitpod, you might see an error that looks like:\n\n> Error: Failed to launch chrome!<br>\n> No usable sandbox!\n\n<br>\n\nIn this case, you'll want to use Chrome's `--no-sandbox` and/or `--disable-setuid-sandbox` flags. With Puppeteer, it may look like this:\n\n```js\nconst browser = await puppeteer.launch({\n  args: [\"--no-sandbox\", \"--disable-setuid-sandbox\"],\n});\n```","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":471,"to":488}}}}],["1382",{"pageContent":"Setting env variables\n\nSometimes, your project needs some extra information that is either a secret, or it's different for each developer. A good example is tokens or credentials that are used to interact with external APIs or services. A good way to give these values to your project setup is via environment variables.\n\nTo ensure that a required env variable called `TOKEN` is defined, you can do something like this in your `.gitpod.yml`:\n\n```yml\ntasks:\n  - command: >\n      while [ -z \"$TOKEN\" ] ; do\n        printf \"\\n❗ The TOKEN environment variable is required. Please enter its value.\\n\" &&\n        read -s -p \"TOKEN: \" TOKEN ;\n      done ; gp env TOKEN=$TOKEN && printf \"\\nThanks\\n\"\n      # Now you can use $TOKEN","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":490,"to":503}}}}],["1383",{"pageContent":"<br>\n\nThis will check the value of `$TOKEN`, and if it's empty, it will ask the user to manually type its value into the Terminal, and then save that value for future workspaces with `gp env`.\n\nIf you need to have these values inside a file, you can add something like this to your `.gitpod.yml` commands:\n\n```yml\ntasks:\n  - command: echo \"$SSH_PRIVATE_KEY\" > ~/.ssh/id_rsa\n```\n\n<br>\n\nAnother (unsafe) way to pass an env variable to a single workspace is to add it in the Gitpod context URL, like so:\n\n```bash\nhttps://gitpod.io/#TOKEN=value/https://github.com/gitpod-io/website","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":506,"to":522}}}}],["1384",{"pageContent":"(But please don't use this for security-sensitive data like passwords and private keys, because URLs can easily be intercepted. Also, note that values should be URL-encoded.)\n\nFinally, users can also manage env variables for all their workspaces by visiting [gitpod.io/environment-variables](https://gitpod.io/environment-variables). You can learn more about managing Gitpod env variables in [the docs](/docs/configure/projects/environment-variables).\n\nFor a complete example of a project that requires env variables (saved in `.yml` config files), please see the [dev.to](https://dev.to/) project's [.gitpod.yml](https://github.com/thepracticaldev/dev.to/blob/master/.gitpod.yml).\n\n<br>\n\nPhew... that's about it! I hope you enjoyed reading through this guide and that it helped you in some way. If you still have questions or suggestions, please [let us know](https://twitter.com/jankeromnes). I'd love to help you and make this guide more useful.","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":525,"to":533}}}}],["1385",{"pageContent":"---\nauthor: nancy-chauhan, helenjoscott\ndate: Thursday, 28 April 2022 11:00:00 UTC\ntitle: Set up a Spring Boot Remote Development Environment With JetBrains Gateway and Gitpod\nslug: set-up-spring-boot-application-remotely-with-gitpod-and-jetBrains-gateway\nexcerpt: Setting up your first Spring project using JetBrains Gateway and Gitpod.\nteaserImage: header.jpg\nimage: teaser.jpg\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n**Announcement 🚀** : Today, Gitpod and Jetbrains join forces to solve the _'works on my machine'_ problem. Bringing JetBrains' deep product integration with Gitpod's remote workspaces to developers around the world.<br><br>\nThis gives developers the best of both worlds -\n\n- Reproducible developer environments provisioned by Gitpod\n- Favorite desktop IDE from Jetbrains - IntelliJ IDEA, PyCharm, GoLand, and PhpStorm\n  <br>\n\nYou can read the full announcement on our blog [here](https://www.gitpod.io/blog/gitpod-jetbrains).\n\n<hr/>","metadata":{"source":"https://www.gitpod.io/guides/set-up-spring-boot-application-remotely-with-gitpod-and-jetBrains-gateway","loc":{"lines":{"from":1,"to":24}}}}],["1386",{"pageContent":"You can read the full announcement on our blog [here](https://www.gitpod.io/blog/gitpod-jetbrains).\n\n<hr/>\n\n[JetBrains](https://www.jetbrains.com/) IDEs are one of the highly favored IDEs amongst developers. They provide excellent debugging and refactoring experience and built-in integrations with many tools such as docker, databases, web servers, etc. Through JetBrains Gateway, Gitpod delivers the choice of using JetBrains IDEs as a development environment for Gitpod workspaces. It will provide a familiar developer experience to long time users of JetBrains IDEs with the flexibility of cloud workspaces provided by Gitpod 🍊\n\nThis guide will teach you to set up a Spring project using JetBrains Gateway and Gitpod. Let's get started 🚀\n\n# Setting up your first Spring project using JetBrains Gateway and Gitpod","metadata":{"source":"https://www.gitpod.io/guides/set-up-spring-boot-application-remotely-with-gitpod-and-jetBrains-gateway","loc":{"lines":{"from":24,"to":32}}}}],["1387",{"pageContent":"1. Setup\n\nGitpod JetBrains IDE integration is powered with JetBrains Gateway, a compact desktop app to connect to remote workspaces without installing an IDE.\n\n1. **Install [JetBrains Gateway](https://www.jetbrains.com/help/idea/remote-development-a.html#gateway)**\n\n2. **Install Gitpod Plugin in JetBrains Gateway :**\n   <br>\n   Gitpod provides a plugin that you can install in JetBrains Gateway to connect to and manage Gitpod workspaces.\n\n   - Open JetBrains Gateway `Preferences` from macOS application menu or `Settings` from `File` menu in Linux/Windows.\n\n   - Navigate to `Plugins` and search for Gitpod in the Marketplace to find and install the **Gitpod Gateway** plugin.\n   <figure>\n   <img src=\"https://user-images.githubusercontent.com/37153406/165688357-d9e223d6-a08f-4cbc-8440-5f7d1d4f812a.png\" alt=\"Installing Gitpod plugin in JetBrains Gateway\">\n   <figcaption style=\"text-align:center\">Installing Gitpod Gateway plugin in JetBrains Gateway</figcaption>\n   </figure>","metadata":{"source":"https://www.gitpod.io/guides/set-up-spring-boot-application-remotely-with-gitpod-and-jetBrains-gateway","loc":{"lines":{"from":34,"to":50}}}}],["1388",{"pageContent":"3. **Update your preferences on the Gitpod dashboard :**\n   <br>\n\n   Select IntelliJ IDEA on the [Gitpod preferences](https://gitpod.io/preferences) page. It will set IntelliJ IDEA as your default desktop IDE for future workspaces. This will launch an IDE window connected to your Gitpod workspace. You can also choose to use other JetBrains IDEs such as GoLand, PyCharm or PhpStorm.\n      <figure>\n          <img src=\"https://user-images.githubusercontent.com/37153406/165688354-d4cc2eba-f7f6-4f2a-b54b-c545889a8131.png\" alt=\"Gitpod Preferences\">\n          <figcaption style=\"text-align:center\">Gitpod Preferences</figcaption>\n      </figure>\n\n4. **Connect to your workspace from JetBrains Gateway :**\n   <br>","metadata":{"source":"https://www.gitpod.io/guides/set-up-spring-boot-application-remotely-with-gitpod-and-jetBrains-gateway","loc":{"lines":{"from":52,"to":62}}}}],["1389",{"pageContent":"4. **Connect to your workspace from JetBrains Gateway :**\n   <br>\n\n   Open JetBrains Gateway on your machine, and click `Connect to Gitpod` under the Gitpod section, connect to your workspace or create a new one from an existing repository.\n      <figure>\n          <img src=\"https://user-images.githubusercontent.com/37153406/165688355-7704fadb-c030-4a76-a387-510b91aaf87a.png\" alt=\"Connect to Gitpod\">\n          <figcaption style=\"text-align:center\">Connect to Gitpod</figcaption>\n      </figure>\n\n      <figure>\n          <img src=\"https://user-images.githubusercontent.com/37153406/165688360-78cb72a1-d867-4298-b767-8d28d81de1be.png\" alt=\"Create a new workspace\">\n          <figcaption style=\"text-align:center\">Create a new workspace</figcaption>\n      </figure>\n\nIf you want to read about the whole process in detail, you can refer to our online [documentation](https://www.gitpod.io/docs/references/ides-and-editors/intellij) 📖.","metadata":{"source":"https://www.gitpod.io/guides/set-up-spring-boot-application-remotely-with-gitpod-and-jetBrains-gateway","loc":{"lines":{"from":62,"to":76}}}}],["1390",{"pageContent":"2. How to create a new Spring Boot project\n\nYou can create a new Gitpod workspace using JetBrains Gateway with our [Spring Boot template](https://github.com/gitpod-io/template-java-spring-boot-gradle). This template uses Java 11 and Gradle and is configured for creating Gitpod workspaces.\n\n1.  Launch JetBrains Gateway and navigate to the Gitpod tab.\n2.  Enter [`https://github.com/gitpod-io/template-java-spring-boot-gradle`](https://github.com/gitpod-io/template-java-spring-boot-gradle) as the repository URL and click on `New Workspace` to start a new Gitpod workspace.\n    <figure>\n        <img src=\"https://user-images.githubusercontent.com/37153406/165688318-b07d656c-a7aa-424d-8b77-7cd9807a6c0e.png\" alt=\"Create Spring Boot project from our template\">\n        <figcaption style=\"text-align:center\">Create Spring Boot project from our template</figcaption>\n    </figure>","metadata":{"source":"https://www.gitpod.io/guides/set-up-spring-boot-application-remotely-with-gitpod-and-jetBrains-gateway","loc":{"lines":{"from":78,"to":87}}}}],["1391",{"pageContent":"3. Run your project\n\n1. Wait for the IDE to import the project and install the dependencies.\n2. Run your project by clicking on the `Run` button. IntelliJ IDEA starts your Spring application in the ‘Run window’.\n<figure>\n    <img src=\"https://user-images.githubusercontent.com/37153406/165688347-390cf9a7-11a5-4d4f-8506-e1962c0ec699.png\" alt=\"Run app inside IntelliJ IDE\">\n    <figcaption style=\"text-align:center\">Run app inside IntelliJ IDE</figcaption>\n</figure>\n\n3. Once the Spring application starts, IntelliJ IDEA will prompt you for the availability of port 8080. Click on the port and select `Forward and open in browser` to launch the application in your web browser.\n<figure>\n    <img src=\"https://user-images.githubusercontent.com/37153406/165688350-fcc27164-8e8f-41a0-9fdc-7304f6e040c7.png\" alt=\"Launch your app\">\n    <figcaption style=\"text-align:center\">Launch your app 🚀</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/guides/set-up-spring-boot-application-remotely-with-gitpod-and-jetBrains-gateway","loc":{"lines":{"from":89,"to":102}}}}],["1392",{"pageContent":"4. You can use the IntelliJ IDEA integrated terminal to run shell commands on your Gitpod workspace as well.\n\nCongratulations 🎉😄 <br>You have successfully set up your first Spring Boot project using Gitpod and JetBrains Gateway! <br>Further, if you want to learn more about running your existing codebase using Gitpod and JetBrains Gateway, you can follow the next section.\n\n# Setting up your existing codebase using JetBrains Gateway and Gitpod","metadata":{"source":"https://www.gitpod.io/guides/set-up-spring-boot-application-remotely-with-gitpod-and-jetBrains-gateway","loc":{"lines":{"from":104,"to":108}}}}],["1393",{"pageContent":"# Setting up your existing codebase using JetBrains Gateway and Gitpod\n\nYou can open an existing codebase using Gitpod and JetBrains Gateway. To get started with Gitpod, add a [`.gitpod.yml`](https://github.com/gitpod-io/template-java-spring-boot-gradle/blob/main/.gitpod.yml) file in the root directory of your existing codebase.\nThe `.gitpod.yml` file at the root of your project is where you tell Gitpod how to prepare & build your project, start development servers and configure continuous [prebuilds](https://www.gitpod.io/docs/configure/projects/prebuilds) for GitHub.\nHence, improving the developer experience on Gitpod ✨","metadata":{"source":"https://www.gitpod.io/guides/set-up-spring-boot-application-remotely-with-gitpod-and-jetBrains-gateway","loc":{"lines":{"from":108,"to":112}}}}],["1394",{"pageContent":"Customizing `.gitpod.yml`\n\nHere is the `.gitpod.yml`, used in our template. It runs Gradle build when you open the workspace.\n\n```yaml\ntasks:\n  - init: ./gradlew build","metadata":{"source":"https://www.gitpod.io/guides/set-up-spring-boot-application-remotely-with-gitpod-and-jetBrains-gateway","loc":{"lines":{"from":114,"to":120}}}}],["1395",{"pageContent":"You can change the command to build your application or add more commands to run when your workspace starts. You can also add plugins to install in your IDEA instance automatically.\n\nTo learn more about customizing `.gitpod.yml` according to your requirements, refer to our [documentation](https://www.gitpod.io/docs/references/gitpod-yml).\n\n# Working on Gitpod workspace using JetBrains Gateway\n\nUsing Gitpod on JetBrains Gateway feels like working on a project on a locally installed copy of IntelliJ IDEA. You can use the same shortcuts, powerful debugging tools, refactoring and plugins as you do on your local IDE without needing to set up your entire project on your machine.\n\nThis integration provides you with the best experience of using the cloud development environment of Gitpod and the comfort and familiarity of your JetBrains IDE. ✨","metadata":{"source":"https://www.gitpod.io/guides/set-up-spring-boot-application-remotely-with-gitpod-and-jetBrains-gateway","loc":{"lines":{"from":123,"to":131}}}}],["1396",{"pageContent":"---\nauthor: nancy-chauhan, Siddhant-K-code\ndate: Thursday, 1 September 2022 02:00:00 UTC\nexcerpt: This guide, will show you how you can set up AWS SSO & AWS ECR on Gitpod ephemeral workspace\nslug: integrate-aws-cli-ecr\nteaserImage: header.jpg\nimage: teaser.jpg\ntitle: Integrate AWS Single Sign-On (SSO) and Amazon Elastic Container Registry (ECR) with Gitpod\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\nA common use case in organizations for developers, when working on Gitpod ephemeral environment, is the need to access various AWS services. For instance, sometimes developers need to pull or push images from or to [AWS ECR](https://aws.amazon.com/ecr/). These images can be private, so some authentication is required, usually [AWS SSO](https://docs.aws.amazon.com/singlesignon/latest/userguide/getting-started.html). AWS SSO is a cloud SSO service that makes it easy to centrally manage SSO access to multiple AWS accounts and enterprise applications.","metadata":{"source":"https://www.gitpod.io/guides/integrate-aws-cli-ecr","loc":{"lines":{"from":1,"to":15}}}}],["1397",{"pageContent":"In this guide, we will show you how you can set up AWS SSO & AWS ECR on Gitpod ephemeral workspace. In 3 simple steps, we will:\n\n1. Install `aws-cli`\n2. Setup `aws-sso`\n3. Access `aws ecr`\n\nAll these steps would be automated. So you will always get a ready-to-use workspace with AWS CLI configured, including all the required secrets. This lets you work on many ephemeral workspaces at once frictionlessly as you will not have to install or configure the settings multiple times ✨\n\n> **tl;dr;** You need to configure AWS secrets, add [this configuration shell script](https://github.com/gitpod-io/demo-aws-with-gitpod/blob/main/configure_aws_with_gitpod.sh) in your project & [this task](https://github.com/gitpod-io/demo-aws-with-gitpod/blob/main/.gitpod.yml#L15-L17) in your `.gitpod.yml` for ready-to-code Gitpod Workspace 🚀\n\n# Overview","metadata":{"source":"https://www.gitpod.io/guides/integrate-aws-cli-ecr","loc":{"lines":{"from":17,"to":27}}}}],["1398",{"pageContent":"# Overview\n\nWe will provide you with a setup that will provision AWS CLI and enable SSO when you open a new ephemeral Gitpod workspace. The flow diagram below describes how we have done it in our [demo-aws-with-gitpod](https://github.com/gitpod-io/demo-aws-with-gitpod) template repo in 3 steps:\n\n<figure class=\"flex flex-col items-center text-center\">\n  <img src=\"/images/guides/integrate-aws-cli-ecr/flow-diagram.png\" alt=\"Flow Diagram of Integration of AWS CLI & Gitpod\" width=\"700\"/>\n  <figcaption>Flow Diagram of Integration of AWS CLI & Gitpod</figcaption>\n</figure>\n\n1. **Command Task execution**\n\nAs you open a new gitpod workspace, it gets configured through `.gitpod.yml file`, located at the root of your project. This initiates the [config script](https://github.com/gitpod-io/demo-aws-with-gitpod/blob/main/configure_aws_with_gitpod.sh).\n\n2. **Installation**\n\nThe config script automates the whole process of installing CLI and ECR helper whenever you open a new Gitpod workspace.","metadata":{"source":"https://www.gitpod.io/guides/integrate-aws-cli-ecr","loc":{"lines":{"from":27,"to":42}}}}],["1399",{"pageContent":"2. **Installation**\n\nThe config script automates the whole process of installing CLI and ECR helper whenever you open a new Gitpod workspace.\n\n3. **Configuration**\n\nWe will use some public configuration options from the SSO like AWS_SSO_REGION, AWS_SSO_URL etc. and add those as environment variables at [Gitpod settings](https://gitpod.io/variables). It lets you configure the persistent env variables into your workspace and use them in your code.\n\nLet's understand the Installation, Configuration and Usage steps in detail.\n\n# 💻 Installation\n\nWe will discuss various installation steps and show you a snippet of the configuration script. You can find these lines of code here in the [config script](https://github.com/gitpod-io/demo-aws-with-gitpod/blob/e61392ed478bd6cfea94fcb29e6318d6a52efb2e/configure_aws_with_gitpod.sh).","metadata":{"source":"https://www.gitpod.io/guides/integrate-aws-cli-ecr","loc":{"lines":{"from":42,"to":54}}}}],["1400",{"pageContent":"Install AWS CLI on Gitpod\n\nTo Install [AWS CLI](https://aws.amazon.com/cli/) on Gitpod, you need to run a certain set of commands given in [AWS CLI docs](https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html). To automate it, we wrote it as a shell script so that you don't need to run those commands every time.\n\n```sh\ncurl -fSsl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o \"awscliv2.zip\"\nunzip -qq awscliv2.zip\nsudo ./aws/install --update\nrm awscliv2.zip\n```\n\nIn the above script, we download the AWS CLI zip, unzip it & execute that to install AWS CLI, following which we remove the zip. To automatically get credentials for Amazon ECR, we would need to install ECR-Credential Helper.","metadata":{"source":"https://www.gitpod.io/guides/integrate-aws-cli-ecr","loc":{"lines":{"from":56,"to":67}}}}],["1401",{"pageContent":"Install ECR-Credential Helper on Gitpod\n\nThe following script installs the ECR-Credential Helper:","metadata":{"source":"https://www.gitpod.io/guides/integrate-aws-cli-ecr","loc":{"lines":{"from":69,"to":71}}}}],["1402",{"pageContent":"The following script installs the ECR-Credential Helper:\n\n```sh\nif [ ! -f /usr/local/bin/docker-credential-ecr-login ]; then\n    echo \"Installing ecr-login helper\"\n    OLD_DIR=\"$PWD\"\n    TMP_DIR=\"$(mktemp -d)\"\n    cd \"${TMP_DIR}\" || exit 1\n    ECR_LATEST=$(curl -s https://api.github.com/repos/awslabs/amazon-ecr-credential-helper/releases/latest | jq -r \".tag_name\")\n    curl -o docker-credential-ecr-login -fSsL \"https://amazon-ecr-credential-helper-releases.s3.us-east-2.amazonaws.com/${ECR_LATEST##*v}/linux-amd64/docker-credential-ecr-login\"\n    curl -o docker-credential-ecr-login.sha256 -fSsL \"https://amazon-ecr-credential-helper-releases.s3.us-east-2.amazonaws.com/${ECR_LATEST##*v}/linux-amd64/docker-credential-ecr-login.sha256\"\n    sha256sum -c docker-credential-ecr-login.sha256\n    sudo mv docker-credential-ecr-login /usr/local/bin/docker-credential-ecr-login\n    sudo chmod +x /usr/local/bin/docker-credential-ecr-login\n    cd \"${OLD_DIR}\" || exit 1\n    rm -rf \"${TMP_DIR}\"\nfi\n```","metadata":{"source":"https://www.gitpod.io/guides/integrate-aws-cli-ecr","loc":{"lines":{"from":71,"to":88}}}}],["1403",{"pageContent":"(Optional) Install AWS Session Manager Plugin\n\nThis is an optional step, but you should first install the Session Manager plugin on your local machine. This facilitates the AWS CLI to start and end sessions that connect you to your managed nodes.\n\n```sh\nif ! command -v session-manager-plugin; then\n    echo \"Installing AWS session manager plugin\"\n\n      TMP_DIR=\"$(mktemp -d)\"\n      cd \"$TMP_DIR\" || exit 1\n\n      curl \"https://s3.amazonaws.com/session-manager-downloads/plugin/latest/ubuntu_64bit/session-manager-plugin.deb\" -o \"session-manager-plugin.deb\"\n      sudo dpkg -i \"session-manager-plugin.deb\"\n\n      cd \"$OLD_DIR\"\n      rm -rf \"$TMP_DIR\"\nfi\n```\n\n# 🧪 Configuration","metadata":{"source":"https://www.gitpod.io/guides/integrate-aws-cli-ecr","loc":{"lines":{"from":90,"to":109}}}}],["1404",{"pageContent":"Configure AWS Environment Variables in Gitpod\n\nAWS CLI requires some environment variables to be configured for executing AWS CLI commands. To avoid configuring this every time you spawn a new gitpod ephemeral environment, you can add it with the following Key-Value Map in [Gitpod Environment Variables settings](https://gitpod.io/variables):\n\n`AWS_SSO_URL`\n`AWS_SSO_REGION`\n`AWS_ACCOUNT_ID`\n`AWS_ROLE_NAME`\n`AWS_REGION`\n\nYou can read more about Configuring the Environment Variables in our [documentation](https://www.gitpod.io/docs/configure/projects/environment-variables#using-the-account-settings)","metadata":{"source":"https://www.gitpod.io/guides/integrate-aws-cli-ecr","loc":{"lines":{"from":111,"to":121}}}}],["1405",{"pageContent":"Configure AWS environment variable on Gitpod Workspace\n\nTo use configured env variables with aws cli, we need to set the variables in `home/gitpod/.aws/config` :\n\n```sh\n[[ -d /home/gitpod/.aws ]] || mkdir /home/gitpod/.aws\ncat <<- AWSFILE > /home/gitpod/.aws/config\n[default]\nsso_start_url = ${AWS_SSO_URL}\nsso_region = ${AWS_SSO_REGION}\nsso_account_id = ${AWS_ACCOUNT_ID}\nsso_role_name = ${AWS_ROLE_NAME}\nregion = ${AWS_REGION}\nAWSFILE\n```","metadata":{"source":"https://www.gitpod.io/guides/integrate-aws-cli-ecr","loc":{"lines":{"from":123,"to":137}}}}],["1406",{"pageContent":"Configure Docker config to use ECR-Login\n\nTo use the ECR-Credential helper, we need to update the docker configs :\n\n```sh\n# if we don't have a .docker/config.json, create:\n\nif [ ! -d /home/gitpod/.docker ]; then\n    mkdir -p /home/gitpod/.docker && echo '{}' > /home/gitpod/.docker/config.json\nelif [ ! -f /home/gitpod/.docker/config.json ]; then\n    echo '{}' > /home/gitpod/.docker/config.json\nfi\n```\n\n# 🚀 Usage\n\nNow we have the whole [AWS Configuration shell script](https://github.com/gitpod-io/demo-aws-with-gitpod/blob/HEAD/configure_aws_with_gitpod.sh) ready. To execute this script at the start of your workspace, you need to add a [command task](https://www.gitpod.io/docs/configure/workspaces/tasks#:~:text=compiling%20source%20code.-,command,-%3A%20Use%20this%20to) in your [`.gitpod.yml`](https://www.gitpod.io/docs/references/gitpod-yml/#gitpodyml) file.\n\n```yml\ntasks:\n  - name: Initialize & Configure AWS\n    command: bash $GITPOD_REPO_ROOT/configure_aws_with_gitpod.sh","metadata":{"source":"https://www.gitpod.io/guides/integrate-aws-cli-ecr","loc":{"lines":{"from":139,"to":160}}}}],["1407",{"pageContent":"In [demo-aws-with-gitpod](https://github.com/gitpod-io/demo-aws-with-gitpod) template repo, `configure_aws_with_gitpod.sh` is in the root directory of the repository. You can replace it with your own script’s path in `command` task.\n\nYou can find the example [`.gitpod.yml`](https://github.com/gitpod-io/demo-aws-with-gitpod/blob/main/.gitpod.yml) file here for your reference.\n\n> **Bonus Tip** ✨: You can save more time in starting your workspace by using Gitpod Prebuilds. It will prebuild your workspace & directly load that previously built container image to boot it up even faster.\n\nCongratulations 🎉 Now, you are ready to use AWS CLI to access AWS ECR through SSO, to use private registries/images. You can also watch the following video, which thoroughly walks you through the whole process:\n\n`youtube: JR3fhDYEwFg`","metadata":{"source":"https://www.gitpod.io/guides/integrate-aws-cli-ecr","loc":{"lines":{"from":163,"to":171}}}}],["1408",{"pageContent":"📖 Recommended Reading\n\n### Gitpod\n\n- [Build Projects in a Gitpod Ephemeral Dev Environment — The Ultimate Guide](https://www.gitpod.io/guides/guide-ephemeral-dev-environment-on-gitpod)\n- [One workspace per task](https://www.gitpod.io/docs/introduction/learn-gitpod/one-workspace-per-task)\n- [Environment variables](https://www.gitpod.io/docs/configure/projects/environment-variables#using-the-account-settings)\n- [Custom Docker Image](https://www.gitpod.io/docs/configure/workspaces/workspace-image)\n- [Config `.gitpod.yml`](https://www.gitpod.io/docs/references/gitpod-yml)","metadata":{"source":"https://www.gitpod.io/guides/integrate-aws-cli-ecr","loc":{"lines":{"from":173,"to":181}}}}],["1409",{"pageContent":"AWS\n\n- [Automatically gets credentials for Amazon ECR on docker push/docker pull](https://github.com/awslabs/amazon-ecr-credential-helper)\n- [AWS CLI Command Reference // login](https://awscli.amazonaws.com/v2/documentation/api/latest/reference/sso/login.html)\n- [Using Amazon ECR with the AWS CLI](https://docs.aws.amazon.com/AmazonECR/latest/userguide/getting-started-cli.html)\n- [AWS Systems Manager Session Manager](https://docs.aws.amazon.com/systems-manager/latest/userguide/session-manager.html)\n\n### Docker\n\n- [Docker command line configuration files](https://docs.docker.com/engine/reference/commandline/cli/#configuration-files)","metadata":{"source":"https://www.gitpod.io/guides/integrate-aws-cli-ecr","loc":{"lines":{"from":183,"to":192}}}}],["1410",{"pageContent":"---\nsection: authentication\ntitle: Bitbucket Server Integration\n---\n\n<script context=\"module\">\n  export const prerender = true;\n  import Keybind from \"$lib/components/keybind.svelte\";\n</script>\n\n# Bitbucket Server\n\nGitpod works with public, private, or internal repositories on your own instance of [Bitbucket Server](https://bitbucket.org/product/guides/getting-started/overview#bitbucket-software-hosting-options) v7.20 or later. Setting this up requires 2 steps.\n\n1. A one-time registration of the Bitbucket server instance with Gitpod.\n2. Each Gitpod user connects their account to Bitbucket server the first time they start a workspace.","metadata":{"source":"https://www.gitpod.io/docs/configure/authentication/bitbucket-server","loc":{"lines":{"from":1,"to":16}}}}],["1411",{"pageContent":"Registering a Bitbucket Server\n\nThe Bitbucket Server Admin can register the Bitbucket Server in their own Gitpod [account settings](https://gitpod.io/integrations).\n\nStart by creating a **New Integration** and entering the **Provider Host Name** of Bitbucket Server.\n\n![Gitpod New Git Integration form](../../../static/images/integrations/bbs-new-integration.png)\n\nCopy the **Redirect URL** from the form above.\n\nOpen your Bitbucket Server Administration settings in another browser tab, and create a new incoming link for an external application.\n\n![Bitbucket Server new OAuth2 application link](../../../static/images/integrations/bbs-new-incoming-link.png)\n\nConfigure the link with the required fields, including the redirect URL copied above, and choose \"Projects Admin\" permissions.\n\n![Bitbucket Server configure OAuth2 application link](../../../static/images/integrations/bbs-configure-incoming-link.png)","metadata":{"source":"https://www.gitpod.io/docs/configure/authentication/bitbucket-server","loc":{"lines":{"from":18,"to":34}}}}],["1412",{"pageContent":"![Bitbucket Server configure OAuth2 application link](../../../static/images/integrations/bbs-configure-incoming-link.png)\n\nSaving the configuration opens a settings page where you can copy the OAuth **Client ID** and a **Client secret**.\n\n![Bitbucket Server new OAuth client ID and secret](../../../static/images/integrations/bbs-oauth-client-id-and-secret.png)\n\nCopy the **Client ID** and **Secret** into the corresponding fields in the new Gitpod integration form, and activate the integration.\n\nRefreshing the integration settings page should show a new Git provider connection to your Bitbucket Server in addition to the Git Integration registration below that.\n\n![Bitbucket Server integration and connection in Gitpod settings](../../../static/images/integrations/bbs-integration-and-connection.png)","metadata":{"source":"https://www.gitpod.io/docs/configure/authentication/bitbucket-server","loc":{"lines":{"from":34,"to":44}}}}],["1413",{"pageContent":"Connecting Gitpod accounts to Bitbucket Server\n\nOther Bitbucket Server users need to connect their own Gitpod account to their own Bitbucket Server account by starting a workspace.\n\nTo start a workspace, paste the URL of a Bitbucket Server repository into the New Workspace popup (<Keybind>CtrlCmd + O</Keybind>) in Gitpod, or prefix the repository URL as described in [Getting started](/docs/introduction/getting-started).\n\n![Open in Gitpod form](../../../static/images/integrations/bbs-open-in-gitpod.png)\n\nThe first time you do this, you'll be prompted to authorize with your Bitbucket Server instance.\n\n![Prompt to authorize with Bitbucket Server](../../../static/images/integrations/bbs-auth-prompt.png)\n\nThe Bitbucket Server OAuth window will prompt for confirmation to access projects and repositories.\n\n![OAuth confirmation from Bitbucket Server](../../../static/images/integrations/bbs-oauth-popup.png)","metadata":{"source":"https://www.gitpod.io/docs/configure/authentication/bitbucket-server","loc":{"lines":{"from":46,"to":60}}}}],["1414",{"pageContent":"The Bitbucket Server OAuth window will prompt for confirmation to access projects and repositories.\n\n![OAuth confirmation from Bitbucket Server](../../../static/images/integrations/bbs-oauth-popup.png)\n\nOnce confirmed, the connection will be saved, and the workspace should open. Subsequent workspaces with repositories from the same Bitbucket Server instance should open without reconnecting.","metadata":{"source":"https://www.gitpod.io/docs/configure/authentication/bitbucket-server","loc":{"lines":{"from":60,"to":64}}}}],["1415",{"pageContent":"Creating a project in Gitpod\n\nTo create a new project with a Bitbucket Server repository in Gitpod, select your Bitbucket Server instance from the list of git providers.\n\n![New project with Bitbucket Server](../../../static/images/integrations/bbs-new-project.png)\n\nYou should see your own repositories and those for all projects to which you have access. Use the dropdown to switch between your personal account and other projects.\n\n![New project select Bitbucket Server repo](../../../static/images/integrations/bbs-new-project-select-repo.png)\n\nSelecting the repository will install a webhook and enable automatic prebuilds for the project.","metadata":{"source":"https://www.gitpod.io/docs/configure/authentication/bitbucket-server","loc":{"lines":{"from":66,"to":76}}}}],["1416",{"pageContent":"---\nsection: authentication\ntitle: Bitbucket\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Bitbucket\n\nGitpod works with any public or private repository on [Bitbucket](https://bitbucket.org/).\n\nTo start a workspace from a Bitbucket project, prefix the Bitbucket project URL with `gitpod.io/#` as described in [Getting started](/docs/introduction/getting-started) or use the [browser extension](/docs/configure/user-settings/browser-extension) to add a convenient Gitpod button to every Bitbucket page.\n\n## Enable Prebuilds\n\nAll prebuilds require a [Gitpod project](/docs/configure/projects#add-a-new-project) for the repository.\n\nTo enable [prebuilt workspaces](/docs/configure/projects/prebuilds) for your Bitbucket project, you need to grant the `webhook` permission in Gitpod's [Integration Settings](https://gitpod.io/integrations) page. This allows Gitpod to install a webhook which creates a new prebuild for every push event.","metadata":{"source":"https://www.gitpod.io/docs/configure/authentication/bitbucket","loc":{"lines":{"from":1,"to":20}}}}],["1417",{"pageContent":"---\nsection: authentication\ntitle: GitHub Enterprise\n---\n\n<script context=\"module\">\n  export const prerender = true;\n  import Keybind from \"$lib/components/keybind.svelte\";\n</script>\n\n# GitHub Enterprise\n\nGitpod works with public, private, or internal repositories on your own instance of [GitHub Enterprise](https://docs.github.com/en/enterprise-server@3.4/get-started/onboarding/getting-started-with-github-enterprise-server) (GHE). Setting this up requires 2 steps.\n\n1. A one-time registration of the GHE server with Gitpod.\n2. Each Gitpod user connects their account to GHE the first time they start a workspace.","metadata":{"source":"https://www.gitpod.io/docs/configure/authentication/github-enterprise","loc":{"lines":{"from":1,"to":16}}}}],["1418",{"pageContent":"Registering a GitHub Enterprise Server\n\nThe GHE Admin can register the GHE server in their own Gitpod [account settings](https://gitpod.io/integrations).\n\nStart by creating a **New Integration** and entering the **Provider Host Name** of GHE server.\n\n![Gitpod New Git Integration form](../../../static/images/integrations/new-git-integration-form.png)\n\nCopy the **Redirect URL** from the form above.\n\nCreate a new OAuth application in your GHE developer settings, and fill in the **Authorization callback URL** with the copied value.\n\n![GitHub Enterprise register new OAuth application form](../../../static/images/integrations/github-new-oauth-application.png)\n\nPopulate the remaining fields and register the application in GHE. This opens a settings page where you can copy the OAuth **Client ID** and a **Client Secret**.\n\n![GitHub Enterprise new OAuth client ID and secret](../../../static/images/integrations/github-oauth-client-id-and-secret.png)","metadata":{"source":"https://www.gitpod.io/docs/configure/authentication/github-enterprise","loc":{"lines":{"from":18,"to":34}}}}],["1419",{"pageContent":"![GitHub Enterprise new OAuth client ID and secret](../../../static/images/integrations/github-oauth-client-id-and-secret.png)\n\nCopy the **Client ID** and **Secret** into the corresponding fields in Gitpod and activate the integration.","metadata":{"source":"https://www.gitpod.io/docs/configure/authentication/github-enterprise","loc":{"lines":{"from":34,"to":36}}}}],["1420",{"pageContent":"Connecting Gitpod accounts to GHE\n\nGHE users connect their Gitpod account to their GHE account by starting a workspace.\n\nTo start a workspace, paste the URL of a GHE repository into the New Workspace popup (<Keybind>CtrlCmd + O</Keybind>) in Gitpod, or prefix the repository URL as described in [Getting started](/docs/introduction/getting-started).\n\n![Open in Gitpod form](../../../static/images/integrations/open-in-gitpod.png)\n\nThe first time you do this, you will be prompted to authorize with your GHE instance.\n\n![Prompt to authorize with GitHub Enterprise](../../../static/images/integrations/github-enterprise-auth-prompt.png)\n\nThe GHE OAuth window will appear, showing the name of the registered Gitpod OAuth app.\n\n![OAuth confirmation from GitHub Enterprise](../../../static/images/integrations/github-enterprise-oauth-popup.png)\n\nIf you are trying to open a private or internal repository in GHE, you will be prompted to grant additional authorization before the workspace starts.","metadata":{"source":"https://www.gitpod.io/docs/configure/authentication/github-enterprise","loc":{"lines":{"from":38,"to":54}}}}],["1421",{"pageContent":"If you are trying to open a private or internal repository in GHE, you will be prompted to grant additional authorization before the workspace starts.\n\n![Private repo OAuth authorization from GitHub Enterprise](../../../static/images/integrations/github-enterprise-private-repo-scope-authorization.png)","metadata":{"source":"https://www.gitpod.io/docs/configure/authentication/github-enterprise","loc":{"lines":{"from":54,"to":56}}}}],["1422",{"pageContent":"Validating your GHE connection with Gitpod\n\nYou should see the connection to your GHE instance, with your GHE account ID, in your Gitpod [integration settings](https://gitpod.io/integrations)\n\n![GitHub Enterprise connection in Gitpod integration settings](../../../static/images/integrations/github-enterprise-connection.png)\n\nIf necessary, you can modify your GHE OAuth permissions to allow private repository access using the context menu on the right.\n\n![Gitpod settings for GitHub integration permissions](../../../static/images/integrations/github-oauth-permissions.png)","metadata":{"source":"https://www.gitpod.io/docs/configure/authentication/github-enterprise","loc":{"lines":{"from":58,"to":66}}}}],["1423",{"pageContent":"Creating a project in Gitpod\n\nTo create a new project with a GHE repository in Gitpod, select the your GHE instance from the list of git providers.\n\n![New project with GitHub Enterprise](../../../static/images/integrations/new-project-with-github-enterprise.png)\n\nYou should see your own repositories and those for all organizations to which you have access. Use the dropdown to switch between your personal account and other organization accounts. No additional GitHub app installation is required for each organization.\n\n![New project select GitHub Enterprise repo](../../../static/images/integrations/new-project-select-github-enterprise-repo.png)\n\nSelecting the repository will install a webhook and enable automatic prebuilds for the project.\n\n![New project on internal GitHub Enterprise repository](../../../static/images/integrations/new-project-on-internal-github-enterprise-repo.png)","metadata":{"source":"https://www.gitpod.io/docs/configure/authentication/github-enterprise","loc":{"lines":{"from":68,"to":80}}}}],["1424",{"pageContent":"---\nsection: authentication\ntitle: GitHub\n---\n\n<script context=\"module\">\n  export const prerender = true;\n  import Keybind from \"$lib/components/keybind.svelte\";\n</script>\n\n# GitHub\n\nGitpod works well with public or private repositories from [github.com](https://github.com/).\n\nThe first time you login to Gitpod with GitHub, you will be prompted to \"Authorize Gitpod\" to access your GitHub account. This creates a connection between Gitpod and your GitHub account, and installs an OAuth App in your GitHub [settings](https://github.com/settings/applications).\n\nGitpod uses the name and email from your GitHub account ID to create a new Gitpod user account. This is sufficient to start a Gitpod workspace on a public repository.\n\n![GitHub prompt for Gitpod OAuth App permissions with user:email scope](../../../static/images/integrations/github-oauth-install.png)","metadata":{"source":"https://www.gitpod.io/docs/configure/authentication/github","loc":{"lines":{"from":1,"to":19}}}}],["1425",{"pageContent":"Starting Workspaces\n\nTo start a new workspace after logging into Gitpod, use <Keybind>CtrlCmd + O</Keybind> or click on the **New Workspace** button in https://gitpod.io/workspaces. This will prompt for a repository URL, or suggest recent repositories opened with your account.\n\nYou can also start a Gitpod workspace using a GitHub repository URL. Simply point your browser to the repository URL prefixed with `gitpod.io/#` as described in [Getting started](/docs/introduction/getting-started).\n\n## Granting additional GitHub OAuth permissions\n\nGitHub requires `repo` scope permissions to open a workspace on a private repository, or to push code changes from a workspace back to your repository.\n\nYou can grant these additional permissions for GitHub at https://gitpod.io/integrations using the context menu on the right.\n\n![Gitpod settings for GitHub integration permissions](../../../static/images/integrations/github-oauth-permissions.png)","metadata":{"source":"https://www.gitpod.io/docs/configure/authentication/github","loc":{"lines":{"from":21,"to":33}}}}],["1426",{"pageContent":"Authorizing GitHub webhooks\n\nThe first time you create a new Gitpod [project](/docs/configure/projects) you will need to configure our [GitHub App](https://github.com/apps/gitpod-io) to watch your repositories and trigger prebuilds.\n\n> NOTE: Installing the GitHub App for webhooks is only required for github.com, not for [GitHub Enterprise](/docs/configure/authentication/github-enterprise) or other git providers.\n\n![Gitpod new project prompt for GitHub App authorization](../../../static/images/integrations/github-new-project-install-app.png)\n\nThe App must be installed on every GitHub user or organization account with repositories used in a Gitpod project. This allows you to grant permissions for all repositories or select repo-by-repo.\n\n![GitHub App repo authorization](../../../static/images/integrations/github-app-authorize-repos.png)","metadata":{"source":"https://www.gitpod.io/docs/configure/authentication/github","loc":{"lines":{"from":35,"to":45}}}}],["1427",{"pageContent":"Errors with private repositories on GitHub orgs\n\nIf you encounter errors setting up a Gitpod project on a private repository in a GitHub org, you may need to approve the Gitpod OAuth app for 3rd party access to the org.\n\n1. In https://github.com/settings/connections/applications/484069277e293e6d2a2a.\n2. Look for the org in question in the lower section of the page under 'Organization access'.\n3. Click on the Grant button.\n\nFor more details, see [Issue #8076](https://github.com/gitpod-io/gitpod/issues/8076).","metadata":{"source":"https://www.gitpod.io/docs/configure/authentication/github","loc":{"lines":{"from":47,"to":55}}}}],["1428",{"pageContent":"---\nsection: authentication\ntitle: Authentication\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Authentication\n\nGitpod comes with integrations for [GitLab](/docs/configure/authentication/gitlab), [GitHub](/docs/configure/authentication/github), and [Bitbucket](/docs/configure/authentication/bitbucket) projects. It also provides a [browser extension](/docs/configure/user-settings/browser-extension) or a [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) for Chromium-based browsers (Chrome, Edge, Brave) and Firefox.\n\n`youtube: nXMlnMEP784`","metadata":{"source":"https://www.gitpod.io/docs/configure/authentication","loc":{"lines":{"from":1,"to":14}}}}],["1429",{"pageContent":"FAQs\n\n### [\"Email address already used in another account\" when trying to login into Gitpod](https://discord.com/channels/816244985187008514/1015175207301947433)\n\n<!-- DISCORD_BOT_FAQ - DO NOT REMOVE -->\n\nSend us a message through the [contact form](https://www.gitpod.io/contact/support) with your Gitpod account email. After you reach out, we will delete your account so that you can sign up again, which should resolve your issue.","metadata":{"source":"https://www.gitpod.io/docs/configure/authentication","loc":{"lines":{"from":16,"to":22}}}}],["1430",{"pageContent":"[How to get SCM API token from Gitpod's GitLab, GitHub or Bitbucket integration as environment variable](https://discord.com/channels/816244985187008514/1061997373817094236)\n\n<!-- DISCORD_BOT_FAQ - DO NOT REMOVE -->\n\nRun `gp init` on your terminal or manually create a file called `.gitpod.yml`\n\n1. Put the following line in your `.gitpod.yml`:\n\n```yaml\nimage:\n  file: .gitpod.Dockerfile\n```\n\n2. Create a file called `.gitpod.Dockerfile` and put the following content in it:\n\n```dockerfile\nFROM gitpod/workspace-full\n\nRUN file=\"$HOME/.bashrc.d/770-scm_token.sh\" \\\n    && printf '%s\\n' 'if [[ \"${GITPOD_WORKSPACE_CONTEXT_URL:-}\" == *gitlab* ]]; then : \"gitlab\"; else : \"github\"; fi; scm_name=\"$_\"' > \"${file}\" \\\n    && printf 'export SCM_TOKEN=\"$(%s)\"\\n' \"gp credential-helper get <<<host=\\${scm_name}.com | sed -n 's/^password=//p'\" >> \"${file}\"","metadata":{"source":"https://www.gitpod.io/docs/configure/authentication","loc":{"lines":{"from":24,"to":44}}}}],["1431",{"pageContent":"3. [Validate your configuration changes](/docs/configure/workspaces#validate-your-gitpod-configuration) by running `gp validate` in your workspace.\n4. [Apply your .gitpod.yml changes](/docs/configure/workspaces#apply-configuration-changes) by committing and restarting a new workspace.\n\nNow you can use `$SCM_TOKEN` environment variable after you commit and create a new workspace, this variable will contain an API token based on the Git context (i.e. Gitlab/GitHub/Bitbucket)","metadata":{"source":"https://www.gitpod.io/docs/configure/authentication","loc":{"lines":{"from":47,"to":50}}}}],["1432",{"pageContent":"How to use a private GitHub email or custom email for Git commits\n\nAt the [variables](https://gitpod.io/user/variables) page, create two variables[[1](https://gitpod.io/user/account)] called:\n\n- GIT_COMMITTER_EMAIL\n- GIT_AUTHOR_EMAIL\n\nand set the custom email address as the value and `*/*` as the scope.\n\nNow all of your new workspaces should use them for Git commits. If you have a workspace running, you can restart it or run `eval \"$(gp env -e)\"` in it.","metadata":{"source":"https://www.gitpod.io/docs/configure/authentication","loc":{"lines":{"from":52,"to":61}}}}],["1433",{"pageContent":"---\nsection: authentication\ntitle: GitLab\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# GitLab\n\nGitpod works nicely with GitLab: You can start Gitpod workspaces directly from the web pages of your GitLab repositories, and you can configure Gitpod to automatically prebuild these workspaces such that you can start coding on any branch in no time.\n\nTo use Gitpod on GitLab repositories, you have to link your GitLab account to Gitpod. Gitpod redirects you to GitLab's authentication workflow when needed. Alternatively, you might want to connect your [GitLab account manually](#connecting-your-gitlab-account).\n\nAll of this is already pre-configured for `GitLab.com` (the SaaS version), and can easily be set up for [self-hosted GitLab installations](#registering-a-self-hosted-gitlab-installation).","metadata":{"source":"https://www.gitpod.io/docs/configure/authentication/gitlab","loc":{"lines":{"from":1,"to":16}}}}],["1434",{"pageContent":"Starting Workspaces\n\nYou can start a Gitpod workspace directly from the web pages of a GitLab repository. Simply click on the dropdown arrow next to the _Web IDE_ split button on the project or merge request page, and choose _Gitpod_. The Gitpod workspace will open in a new browser tab. The next time you visit a GitLab page, the last used action will be pre-selected.\n\n![GitLab Integration](../../../static/images/docs/beta/integrations/gitpod-button-project-page.png)\n\nTo launch new Gitpod workspaces for issues, branches, specific commits, etc. you can also prefix any GitLab URL with `gitpod.io/#` as described in the [Getting started](/docs/introduction/getting-started) page, or use the [browser extension](/docs/configure/user-settings/browser-extension) to add a convenient _Gitpod_ button to every GitLab page.","metadata":{"source":"https://www.gitpod.io/docs/configure/authentication/gitlab","loc":{"lines":{"from":18,"to":24}}}}],["1435",{"pageContent":"Enabling Prebuilds\n\nAll prebuilds require a [Gitpod project](/docs/configure/projects#add-a-new-project) for the repository.\n\nTo automatically create a [prebuilt workspace](/docs/configure/projects/prebuilds) for each commit, Gitpod needs access to install a webhook. To allow this, go to Gitpod's [Integrations](https://gitpod.io/integrations/) page, scroll to the \"Git Providers\" section, click on the three dot button that pops up when you hover over the \"GitLab\" entry. Then choose _Edit Permissions_ from the popup menu.\n\n![GitLab integration actions menu](../../../static/images/docs/beta/integrations/gitlab-integration-actions-menu.png)\n\nIn the \"Edit Permissions\" dialog, make sure that _api_ is checked such that Gitpod is allowed to install the webhook.\n\n![Modal Edit Permissions of GitLab in the Gitpod settings](../../../static/images/docs/beta/integrations/edit-permissions.png)","metadata":{"source":"https://www.gitpod.io/docs/configure/authentication/gitlab","loc":{"lines":{"from":26,"to":36}}}}],["1436",{"pageContent":"Connecting Your GitLab Account\n\nTo use Gitpod on a GitLab repository, you have to connect your GitLab account with your Gitpod account. In the following, we assume that you already have a valid account on the GitLab instance you want to connect to.\n\nGitpod supports the following use cases:\n\n- [GitLab](#GitLab)\n  - [Starting Workspaces](#starting-workspaces)\n  - [Enabling Prebuilds](#enabling-prebuilds)\n  - [Connecting Your GitLab Account](#connecting-your-gitlab-account)\n    - [Connecting Your GitLab.com Account](#connecting-your-gitlabcom-account)\n    - [Connecting Your Self-Hosted GitLab Account](#connecting-your-self-hosted-gitlab-account)\n    - [Disconnecting Your GitLab Account](#disconnecting-your-gitlab-account)\n  - [Registering A Self-Hosted GitLab Installation](#registering-a-self-hosted-gitlab-installation)","metadata":{"source":"https://www.gitpod.io/docs/configure/authentication/gitlab","loc":{"lines":{"from":38,"to":51}}}}],["1437",{"pageContent":"Connecting Your GitLab.com Account\n\nIf you have initially logged into Gitpod using `GitLab`, your Gitpod account is already connected to your `GitLab.com` account and you can skip this section.\n\nIf you have logged into Gitpod with a different provider, you can manually add your GitLab account as follows:\n\n1. Open [the integrations page](https://gitpod.io/integrations/). Scroll to the section about \"Git Providers\" and click on the three dot button that pops up when you hover over the _GitLab_ item. Select _Connect_ from the popup menu.\n\n![GitLab integration connect menu item](../../../static/images/docs/beta/integrations/gitlab-integration-connect-menu-item.png)\n\n2. You will be redirected to GitLab's login page. Log in with your username and password or choose one of the OAuth providers from the list.\n\n3. Once logged in successfully, you will be asked to authorize Gitpod to access your personal information on GitLab and use their API. Click _Authorize_.","metadata":{"source":"https://www.gitpod.io/docs/configure/authentication/gitlab","loc":{"lines":{"from":53,"to":65}}}}],["1438",{"pageContent":"3. Once logged in successfully, you will be asked to authorize Gitpod to access your personal information on GitLab and use their API. Click _Authorize_.\n\n![GitLab: Authorize Gitpod](../../../static/images/docs/beta/integrations/authorize-gitpod.png)\n\n4. You'll be directed back to Gitpod's settings page. A green bullet left to _GitLab_ signals you've successfully linked your GitLab account with Gitpod.\n\n![GitLab integration connected](../../../static/images/docs/beta/integrations/gitlab-integration-connected.png)","metadata":{"source":"https://www.gitpod.io/docs/configure/authentication/gitlab","loc":{"lines":{"from":65,"to":71}}}}],["1439",{"pageContent":"Connecting Your Self-Hosted GitLab Account\n\nA Self-Hosted GitLab installation has to be [registered to Gitpod](#registering-a-self-hosted-gitlab-installation) before it can be used. Once that's done, you can link your GitLab account on that installation to GitPod using the following steps:\n\n1. Make sure you are logged into Gitpod.\n2. In the same browser, open a new tab and navigate to a repository of the GitLab installation.\n3. [Start a new Gitpod workspace](#starting-workspaces) on this repository.","metadata":{"source":"https://www.gitpod.io/docs/configure/authentication/gitlab","loc":{"lines":{"from":73,"to":79}}}}],["1440",{"pageContent":"Disconnecting Your GitLab Account\n\nTo disconnect a GitLab account from your Gitpod account:\n\n1. Open [the integrations page](https://gitpod.io/integrations/). Scroll to the section about \"Git Providers\" and click on the three dot button that pops up when you hover over the item of the GitLab provider you want to disconnect. Select _Disconnect_ from the popup menu.\n\nThis will only invalidate the current access token in Gitpod. To disable access for good you have to revoke the access to Gitpod on the GitLab side.","metadata":{"source":"https://www.gitpod.io/docs/configure/authentication/gitlab","loc":{"lines":{"from":81,"to":87}}}}],["1441",{"pageContent":"Registering A Self-Hosted GitLab Installation\n\nThe SaaS service `GitLab.com` is already pre-configured in Gitpod. But if you are using a Self-Hosted GitLab installation, you have to register it in Gitpod before it can be used.\n\n> Note that the registration has to be done by one Gitpod user only, and that the GitLab account of this user is automatically connected. All other users of the same GitLab installation should just [link to their GitLab accounts](#connecting-your-self-hosted-gitlab-account).\n\nHere is how to register your Self-Hosted GitLab installation:\n\n1. In your GitLab installation, enable the native Gitpod integration as described in the [GitLab docs](https://docs.gitlab.com/ce/integration/gitpod.html). This needs administrator privileges on the GitLab installation.\n\n2. Head over to [the integrations page](https://gitpod.io/integrations/) on Gitpod. Scroll to the section about `Git Integrations` and click on the \"New Integration\" button.","metadata":{"source":"https://www.gitpod.io/docs/configure/authentication/gitlab","loc":{"lines":{"from":89,"to":99}}}}],["1442",{"pageContent":"2. Head over to [the integrations page](https://gitpod.io/integrations/) on Gitpod. Scroll to the section about `Git Integrations` and click on the \"New Integration\" button.\n\n![Git Integrations section in the Gitpod settings](../../../static/images/docs/beta/integrations/git-integrations.png)\n\n3. In the pop-up window, choose GitLab as the provider type and enter the URL of the GitLab installation you want to use.\n\n![New Git integration dialog](../../../static/images/docs/beta/integrations/new-git-integration.png)\n\n4. The next field in the form is the _redirect URL_ that you need to register Gitpod on the GitLab side. Copy the _redirect URL_ to your clipboard using the button on the right.\n\n5. Go to `/profile/applications` on your GitLab installation to create an OAuth app. Type in a name (e.g. \"Gitpod\") and paste the _redirect URL_ in the corresponding text area. Check the scopes _api_ and _read_user_. Click the button _Save Application_ below.","metadata":{"source":"https://www.gitpod.io/docs/configure/authentication/gitlab","loc":{"lines":{"from":99,"to":109}}}}],["1443",{"pageContent":"<img alt=\"create new GitLab app\" src=\"https://user-images.githubusercontent.com/372735/91146315-04abe800-e6b7-11ea-87ff-e61f5a87861f.png\">\n\n6. Copy the _Application ID_ and the _Secret_ in the corresponding form fields (_Client ID_ resp. _Client Secret_) of your Gitpod installation.\n\n<img alt=\"link new GitLab app to Gitpod\" src=\"https://user-images.githubusercontent.com/372735/91142160-9f54f880-e6b0-11ea-8436-6a9c8bc67d9f.png\">\n\n7. Press _Connect_ and go through the GitLab authentication flow to connect your user account.","metadata":{"source":"https://www.gitpod.io/docs/configure/authentication/gitlab","loc":{"lines":{"from":111,"to":117}}}}],["1444",{"pageContent":"---\nsection: orgs\ntitle: Organizations\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Organizations\n\nAn organization can be used to represent a group of people collaborating together with Gitpod, such as an entire company or an open source collective. Through Gitpod organizations you can:\n\n- [Manage Organization Members](/docs/configure/orgs/members)\n- [Manage Projects](/docs/configure/projects) (and [Prebuild](/docs/configure/projects/prebuilds) configurations)\n- [Apply Organization Policies](/docs/configure/orgs/policies) (e.g. restrict workspace sharing)\n\n## Create an organization\n\nTo create a new organization:\n\n1. On the top bar, click on the scope selector and select _New Organization_.\n2. Set the organization name (the name is also the organization slug)\n\n## View organizations\n\nTo see all the organizations the logged in user is a member of, click the scope selector on the left of the top bar in the Gitpod dashboard.","metadata":{"source":"https://www.gitpod.io/docs/configure/orgs","loc":{"lines":{"from":1,"to":27}}}}],["1445",{"pageContent":"---\nsection: orgs\ntitle: Members\n---\n\n# Organization Members\n\nMembers are users who are permitted to access the configurations of an Organization.\n\n## Member Roles\n\n| Permission                  | Owner | Member |\n| --------------------------- | ----- | ------ |\n| Manage Organization Members | Yes   | No     |\n| Edit Organization Settings  | Yes   | No     |\n| Manage Organization Billing | Yes   | No     |\n| View Organization Usage     | Yes   | No     |\n| Edit Project Settings       | Yes   | Yes    |\n| Edit Project Variables      | Yes   | Yes    |\n| Invite Organization Members | Yes   | Yes    |\n| Add Projects                | Yes   | Yes    |\n| Remove Projects             | Yes   | Yes    |\n| View Branches               | Yes   | Yes    |\n| View Prebuilds              | Yes   | Yes    |\n| Trigger Prebuilds           | Yes   | Yes    |","metadata":{"source":"https://www.gitpod.io/docs/configure/orgs/members","loc":{"lines":{"from":1,"to":25}}}}],["1446",{"pageContent":"Add members to an organization\n\nOnce you create an organization you can invite members by using the unique invite URL from the Members page within an organization.\n\n## Change member permissions\n\nNew members will join with a _Member_ role which you can later change if needed from the Members list using the more actions button. For more, see [Roles](#member-roles).\n\n## Remove a member from an organization\n\nYou can remove an organization member form the Members list using the more actions button while hovering over the user entry.\n\n## Leaving an organization\n\nYou can leave an organization using the more actions button in the Members list while hovering over your user entry.","metadata":{"source":"https://www.gitpod.io/docs/configure/orgs/members","loc":{"lines":{"from":27,"to":41}}}}],["1447",{"pageContent":"---\nsection: orgs\ntitle: Policies\n---\n\n# Policies\n\nPolicies allow you to manage and configure functionality across your Gitpod organization.\n\n## Manage a Policy\n\nTo update an Organizational policy:\n\n1. Ensure you have are a Member with the [Role](/docs/configure/orgs/members) \"Organization Owner\".\n1. Navigate to the [Gitpod dashboard](https://gitpod.io/).\n1. Ensure you are in the context of the Organization you want to set the policy.\n1. Navigate to the [settings page](https://gitpod.io/settings).\n1. Update the relevant policy.\n\n## Workspace Sharing\n\nWorkspace sharing is enabled by default. Through this policy, Organization Owners can prevent Members from sharing workspaces that have been started within an Organization.\n\n- Prevents workspaces within an Organization from sharing access to a running workspace.\n- Members can stop sharing a workspace at any time, regardless of the Organizational Policy.\n- Any currently shared workspaces will not have sharing access removed.","metadata":{"source":"https://www.gitpod.io/docs/configure/orgs/policies","loc":{"lines":{"from":1,"to":26}}}}],["1448",{"pageContent":"---\nsection: projects\ntitle: Incremental Prebuilds\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Incremental Prebuilds\n\nSimilar to [last successful prebuild](/docs/configure/projects/last-successful-prebuild), incremental prebuilds leverage older prebuilds in order to create new prebuilds faster.\n\n![Enable Incremental Prebuilds](../../../static/images/docs/projects/enable-incremental-prebuilds.webp)\n\nAn incremental prebuild is based on an older prebuild that was built for an older commit, in order to reuse pre-existing build artifacts. This is achieved by:\n\n1. Loading the older prebuild\n2. Updating the source code to the latest commit\n3. Running any `before`, `prebuild`, and `init` tasks again (incremental rebuild)<br>_Note: This means that your init tasks will be run twice on the same checkout, i.e. they need to be reentrant_","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/incremental-prebuilds","loc":{"lines":{"from":1,"to":20}}}}],["1449",{"pageContent":"How is a base prebuild selected?\n\nWhen incremental prebuilds are enabled for a project, and a new prebuild is being triggered, Gitpod will do the following:","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/incremental-prebuilds","loc":{"lines":{"from":22,"to":24}}}}],["1450",{"pageContent":"1. Retrieve the commit history of the current commit to be built (up to 100 ancestor commits)\n2. For each ancestor commit, check if there exists a corresponding prebuild that can be used as a \"base\":\n   - A suitable \"base prebuild\" must have been successful (i.e. failed, canceled, or timed out prebuilds are not reused)\n   - It must be a recent, direct ancestor of the current commit (i.e. not a commit from a different unrelated branch)\n   - It must be based on the same project configuration as the current commit (for example, if the Docker image or the `init` tasks have recently been changed, older prebuilds are no longer relevant or useful and cannot be used as a \"base\")\n3. If a suitable base prebuild is found, Gitpod will load it; update the checkout to the latest commit; and then re-run any `before`, `prebuild` and `init` task on top of it\n   - If no suitable base prebuild is found, Gitpod will build the new prebuild from scratch (i.e. a non-incremental prebuild)","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/incremental-prebuilds","loc":{"lines":{"from":26,"to":32}}}}],["1451",{"pageContent":"When are incremental prebuilds useful?\n\nIncremental prebuilds can significantly speed up most of your prebuilds, especially if:\n\n```\n(time_to_load_older_prebuild + incremental_rebuild_duration) < full_prebuild_duration\n```\n\nTypically, enabling incremental prebuilds makes sense if:\n\n- Your project's build system benefits from incremental rebuilds (i.e. rebuilds are significantly faster than your initial build)\n- Your regular prebuilds take longer than 5 minutes (the longer they take, the bigger the potential speedup is)","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/incremental-prebuilds","loc":{"lines":{"from":34,"to":45}}}}],["1452",{"pageContent":"---\nsection: projects\ntitle: Environment Variables\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Environment Variables\n\nYou can pass environment variables into your workspace and use them in your code as usual. Please refer to the documentation of your programming language of choice for details on that.\n\n`youtube: dehln1E8ylY`","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/environment-variables","loc":{"lines":{"from":1,"to":14}}}}],["1453",{"pageContent":"Default Environment Variables\n\nBelow are some environment variables which are set automatically by Gitpod and are guaranteed to exist:\n\n- `GITPOD_WORKSPACE_ID`: The Universally Unique Identifier (UUID) associated with the workspace.\n- `GITPOD_WORKSPACE_URL`: The unique URL of the workspace.\n- `GITPOD_REPO_ROOT`: Path to the directory where your git repository was cloned inside the workspace.\n\n> **Tip:** Try running **`env | grep GITPOD_`** on a workspace terminal to see all the Gitpod specific environment variables. These can be useful for scripting a dynamic workspace behavior.\n\n#### Reserved Prefix\n\nEnvironment variables beginning with the prefix `GITPOD_` are reserved for internal use by Gitpod and are overridden on every workspace startup. This means that a _user-defined_ variable set with the name `GITPOD_FOOBAR` will be ignored and not accessible in the workspace.","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/environment-variables","loc":{"lines":{"from":16,"to":28}}}}],["1454",{"pageContent":"User-Specific Environment Variables\n\nGitpod supports encrypted, user-specific environment variables.\nThey are stored as part of your user settings and can be used to set access tokens, or pass any other kind of user-specific information to your workspaces.\n\nThe `DOCKERD_ARGS` environment variable can be used to specify additional arguments to the docker installation running in your workspace. Currently\nmapping a user in your container to the gitpod user in your workspace is supported. This helps if you are using an unprivileged user with your containers\n(e.g. user 1000 in a node image) but need to edit files with vscode that have been created within the container. The content of the environment variable\nshould look like this:\n\n```json\n{ \"remap-user\": \"1000\" }\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/environment-variables","loc":{"lines":{"from":30,"to":42}}}}],["1455",{"pageContent":"Ways of setting user-specific environment variables","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/environment-variables","loc":{"lines":{"from":44,"to":44}}}}],["1456",{"pageContent":"Using the command line: `gp env`\n\nThe `gp` CLI prints and modifies the persistent environment variables associated with your user for the current repository.\n\nTo set the persistent environment variable `foo` to the value `bar` use:\n\n```sh\ngp env foo=bar\n```\n\nBeware that this does not modify your current terminal session, but rather persists this variable for the next workspace on this repository.\n`gp` can only interact with the persistent environment variables for this repository, not the environment variables of your terminal.\nIf you want to set that environment variable in your terminal, you can do so using -e:\n\n```sh\neval $(gp env -e foo=bar)\n```\n\nIf you're using `fish` shell:\n\n```sh\neval (gp env -e foo=bar)\n```\n\nTo update the current terminal session with the latest set of persistent environment variables, use:\n\n```sh\neval $(gp env -e)\n```\n\nIf you're using `fish` shell:\n\n```sh\neval (gp env -e)","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/environment-variables","loc":{"lines":{"from":46,"to":79}}}}],["1457",{"pageContent":"To update the current terminal session with the latest set of persistent environment variables, use:\n\n```sh\neval $(gp env -e)\n```\n\nIf you're using `fish` shell:\n\n```sh\neval (gp env -e)\n```\n\nTo delete a persistent environment variable use:\n\n```sh\ngp env -u foo\n\n# And if you want to remove it from your shell session too:\nunset foo\n```\n\nNote that you can delete/unset variables if their repository pattern matches the repository of this workspace exactly. I.e. you cannot\ndelete environment variables with a repository pattern of _/foo, foo/_ or _/_.\n\n```sh\nUsage:\n  gp env [flags]\n\nFlags:\n  -e, --export   produce a script that can be eval'ed in Bash\n  -h, --help     help for env\n  -u, --unset    deletes/unsets persisted environment variables\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/environment-variables","loc":{"lines":{"from":79,"to":111}}}}],["1458",{"pageContent":"Using the account settings\n\nYou can also configure and view the persistent environment variables in [your account settings](https://gitpod.io/variables).\n\n![Environment Variables in Account Settings](../../../static/images/docs/beta/configure/environment-variables/environment-variables-account-settings.png)\n\nYou can add as many environment variables as you wish.\n\nThe repository pattern of each variable determines in what workspace it will be available.\nRepository patterns follow the `owner/repository` pattern. You can use a wildcard on either of the two, e.g. `gitpod-io/*` would make that variable available in all repositories owned by `gitpod-io`.\nConversely `*/vscode` would make that variable available on all repositories called `vscode`; this is especially useful for forks.\nSubsequently `*/*` makes that variable available in every workspace.","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/environment-variables","loc":{"lines":{"from":113,"to":124}}}}],["1459",{"pageContent":"> **Beware:** while the variable values are stored encrypted, they are available as plain text inside a workspace. Be careful when sharing your live workspace or when using `*/*` as repository pattern.","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/environment-variables","loc":{"lines":{"from":126,"to":126}}}}],["1460",{"pageContent":"Project-Specific Environment Variables\n\nEnvironment variables which are defined in [project](/docs/configure/projects) settings will be visible in prebuilds, and optionally also in workspaces. This is useful for prebuilds to access restricted services.\n\nImportant notes:\n\n- Project-Specific Environment Variables will take precedence over [User-Specific Environment Variables](#user-specific-environment-variables)\n- The `gp env` command is only linked with [User-Specific Environment Variables](#user-specific-environment-variables) but not Project-Specific Environment Variables. That means, if you set an environment variable with the `gp env` command, it will be saved in [your account settings](https://gitpod.io/variables).\n\n> **Warning:** Care should be taken with secrets. Allowing secrets to be accessed from workspaces will expose those secrets to anyone who can open the workspace.","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/environment-variables","loc":{"lines":{"from":128,"to":137}}}}],["1461",{"pageContent":"Task terminal-specific Environment Variables\n\nYou can set environment variables for a Gitpod `task` terminal by setting the `env` property within the task definition in your `.gitpod.yml`. Please note that such environment variables will be limited to the `task` terminal and are not globally set across the workspace.\n\n### Using the `env` keyword\n\n```yaml\ntasks:\n  - name: Example of setting an environment variable for a task terminal\n    env:\n      PRINT_ME: \"Hello World!\"\n    command: echo \"$PRINT_ME\"\n```\n\nNote: The values should be a static string or integer, you can't refer to an existing variable via `env` keyword.","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/environment-variables","loc":{"lines":{"from":139,"to":153}}}}],["1462",{"pageContent":"Using the task SHELL\n\n```yaml\ntasks:\n  - name: Example of starting yarn with a custom environment variable set\n    command: |\n      # Example for referring to the existing system variables\n      export API_URL=\"$HOSTNAME\"\n\n      # Print out the environment variable\n      echo \"$API_URL\"\n\n      yarn start\n\n  - name: Example of updating PATH environment variable inside a task shell\n    command: |\n      # Download and install `fzf` binary to ~/.local/bin/\n      mkdir -p ~/.local/bin\n      curl -sL \"https://github.com/junegunn/fzf/releases/download/0.35.1/fzf-0.35.1-linux_amd64.tar.gz\" | tar -C ~/.local/bin -xpz\n\n      # Update PATH variable\n      export PATH=\"$HOME/.local/bin:$PATH\"\n\n      # Now `fzf` can be called without full path from the task shell\n      ls / | fzf\n```\n\nNote: You can use this method when you need to refer to other variables or want to use scripting to set them conditionally.\n\nSee [`.gitpod.yml`](/docs/references/gitpod-yml#tasksnenv) for more details.","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/environment-variables","loc":{"lines":{"from":155,"to":184}}}}],["1463",{"pageContent":"Providing one-time environment variables via URL\n\n> ❗️ This feature is great for setting one-time environment variables for dynamic workspace configurations or setups but is not appropriate for configuring sensitive information, such as passwords or long-lived API tokens. Gitpod and the [Open Web Application Security Project](https://owasp.org/www-community/vulnerabilities/Information_exposure_through_query_strings_in_url) recommends that you do not pass sensitive information through query strings. Refer to [CWE-598](https://cwe.mitre.org/data/definitions/598.html) to learn more about this recommendation.\n\nIn addition to user-specific environment variables, Gitpod also allows passing in variables through the `gitpod.io/#` URL.\nThe syntax for that is:\n\n```\nhttps://gitpod.io/#var=value,var2=value2/https://github.com/my-org/repo-to-work-on","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/environment-variables","loc":{"lines":{"from":186,"to":194}}}}],["1464",{"pageContent":"The values are [URL encoded](https://www.w3schools.com/tags/ref_urlencode.asp) to allow any non-ascii characters in values.\nIn case of a conflict, e.g. in the example above if the user already had a variable `var2` set, the user's value would be used.","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/environment-variables","loc":{"lines":{"from":197,"to":198}}}}],["1465",{"pageContent":"Exporting all the Gitpod environment variables that you created\n\nYou can run the following command in your Gitpod Workspace terminal to save your environment variables (which you have configured in [Gitpod Environment Variables](https://gitpod.io/variables)) in a different file (e.g.: gitpod.env):\n\n```bash\ngp env > gitpod.env\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/environment-variables","loc":{"lines":{"from":200,"to":206}}}}],["1466",{"pageContent":"---\nsection: projects\ntitle: Projects\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Projects\n\nProjects live under a Gitpod organization. They connect Gitpod to a git repository. A Gitpod project can only have one git repository, and a git repository can only belong to one project.\n\nA project is required in order to trigger [prebuilds](/docs/configure/projects/prebuilds) on a repository. Organization members use the project to configure and view prebuilds.\n\nWith [organization billing](/docs/configure/billing#configure-organization-billing), all project usage such as workspaces and prebuilds, may be billed to the organization.\n\nProjects have a static URL based on the organization and project name, for example:\n\n<!-- TODO: Update slug, depends upon => https://github.com/gitpod-io/gitpod/pull/16050#pullrequestreview-1272075181 -->\n\n`https://gitpod.io/t/<team>/<project>`","metadata":{"source":"https://www.gitpod.io/docs/configure/projects","loc":{"lines":{"from":1,"to":22}}}}],["1467",{"pageContent":"View projects\n\nThe Projects page for a organization shows a card for each project.\n\nCards show the name, repository URL, quick links to project branches and prebuilds, and the branch and timestamp of the latest prebuild.\n\n### Add a new project\n\nTo add a new project, click on _New Project_ on the Projects page for the organization, and select a repository from the list.\n\nThe list will show repositories from one of your git providers. Select a different provider if necessary. You may also be prompted to configure our [GitHub app](/docs/configure/authentication/github#authorizing-github-webhooks), the first time a project is created for a GitHub account. The new project will be associated with the current organization selected in the dashboard.\n\n### Configure a project\n\nOrganization members can configure Prebuilds, and set the workspace class used for project workspaces, in project settings.\n\n![Project Settings](../../../static/images/docs/project-settings.png)","metadata":{"source":"https://www.gitpod.io/docs/configure/projects","loc":{"lines":{"from":24,"to":40}}}}],["1468",{"pageContent":"Remove a project\n\nYou can remove a project using the \"Remove project\" action from a project card.","metadata":{"source":"https://www.gitpod.io/docs/configure/projects","loc":{"lines":{"from":42,"to":44}}}}],["1469",{"pageContent":"FAQs\n\n### [New Project page is stuck at fetching repositories](https://discord.com/channels/816244985187008514/1056255866791272488)\n\n<!-- DISCORD_BOT_FAQ - DO NOT REMOVE -->\n\nTo identify the problem: check browser console logs.\n\nPossible solution(s):\n\n- Try to disconnect Git(Hub/Lab) or Bitbucket from https://gitpod.io/integrations, then reconnect.\n- Make sure correct scopes are set for those Git integration providers as well.","metadata":{"source":"https://www.gitpod.io/docs/configure/projects","loc":{"lines":{"from":46,"to":57}}}}],["1470",{"pageContent":"---\nsection: projects\ntitle: Last Successful Prebuild\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Last Successful Prebuild\n\n> {title} is currently in [Alpha](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/15310).\n\nSimilar to [incremental prebuilds](/docs/configure/projects/incremental-prebuilds), last successful prebuild leverages older prebuilds in order to create new workspaces faster.\n\n![Use Last Successful Prebuild](../../../static/images/docs/projects/use-last-successful-prebuild.webp)\n\nWhen enabled, new workspaces may start based on a prebuild that was built for an older commit, in order to reuse any existing build artifacts. This is achieved by:","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/last-successful-prebuild","loc":{"lines":{"from":1,"to":18}}}}],["1471",{"pageContent":"When enabled, new workspaces may start based on a prebuild that was built for an older commit, in order to reuse any existing build artifacts. This is achieved by:\n\n1. Loading the older prebuild\n2. Updating the source code to the latest commit\n3. Running any `before`, `prebuild`, and `init` tasks again interactively (incremental rebuild)<br>_Note: This means that your init tasks will be run twice on the same checkout, i.e. they need to be reentrant_\n\nThus, your new workspace will both:\n\n- _load quickly_: no waiting, even if a newer prebuild is still being computed (i.e. you'll never see the \"Prebuild in Progress\" screen again ⏩)\n- and it will be _ready quickly_: your IDE Terminal will run either no build at all (if none is needed), or just a quick incremental rebuild (faster than a full build ♻️)","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/last-successful-prebuild","loc":{"lines":{"from":18,"to":27}}}}],["1472",{"pageContent":"Skip Prebuilds\n\nWhen Gitpod can leverage older prebuilds to start your workspaces faster, you no longer necessarily need to create a new prebuild for every commit that is pushed to your repository.\n\nThis is where the ability to skip prebuilds becomes helpful: For example, you could decide to only trigger a new prebuild every 5 commits, or every 10 commits.\n\nThe ideal number depends on your project. For example:\n\n- If you push new commits to your repository very frequently, you may want a higher number (especially if your prebuilds also take a long time to build)\n- On the other hand, if your prebuilds finish quickly, and you typically don't push new commits very often, it may be fine to not skip any prebuild (i.e. `skip prebuilds = 0`)\n\nPlease feel free to adjust and experiment with this value.","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/last-successful-prebuild","loc":{"lines":{"from":29,"to":40}}}}],["1473",{"pageContent":"---\nsection: projects\ntitle: Gitpod Prebuilds\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n<script lang=\"ts\">\n  import OpenGraph from \"$lib/components/open-graph.svelte\";\n</script>\n\n<OpenGraph\ndata={{\n    description:\n      \"Learn how to configure prebuilds for your Gitpod projects.\",\n    title: \"Gitpod Prebuilds\",\n    keywords: \"prebuilds, Gitpod, faster workspace start, faster workspace init, faster workspace creation\",\n  }}\n/>\n\n# Prebuilds\n\nPrebuilds reduce wait time, by installing dependencies or running builds **before** you start a new workspace.\n\n`youtube: DwkoOz1GSVg`\n\n## .gitpod.yml\n\nPrebuilds are typically configured using an `init` [task](/docs/configure/workspaces/tasks) in your gitpod.yml.\n\nIn the example below, the `init` task installs npm packages into the node_modules directory of the workspace. The `command` task runs 'npm start' on every workspace startup.\n\n```yaml\ntasks:\n  - init: |\n      npm install\n  - command: |\n      npm start\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/prebuilds","loc":{"lines":{"from":1,"to":41}}}}],["1474",{"pageContent":"Enable prebuilds on your repository project\n\nUse the following steps to enable prebuilds on your repository:\n\n- [Create a project](/docs/configure/projects/prebuilds#projects-and-prebuilds) for the repository.\n- Define the prebuild steps in an init [task](https://www.gitpod.io/docs/configure/workspaces/tasks) in your [gitpod.yml](https://www.gitpod.io/docs/references/gitpod-yml).\n\nSince prebuilds are included in all our metered [pay-as-you-go](https://www.gitpod.io/docs/configure/billing) plans, configuring prebuild settings in your project should help with managing prebuild usage.","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/prebuilds","loc":{"lines":{"from":43,"to":50}}}}],["1475",{"pageContent":"Projects and prebuilds\n\nFor prebuilds to run automatically, you also need a [project](/docs/configure#projects) for your repository.\n\nTo create a new project:\n\n- Click on _New Project_ in the Projects page of one your organizations.\n<figure>\n<video onloadstart=\"this.playbackRate = 1.5;\" controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"ARepl extension example\" src=\"/images/docs/projects/prebuilds.webm\" type=\"video/webm\"></video>\n    <figcaption>Create a new project in one of your organizations to enable prebuilds</figcaption>\n</figure>\n\n- If necessary, you will be prompted for additional authorization to install and configure the Gitpod GitHub app,\n  so that Gitpod can watch your repositories and trigger prebuilds.\n- Select the repository for your project.","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/prebuilds","loc":{"lines":{"from":52,"to":66}}}}],["1476",{"pageContent":"View prebuilds\n\nYou can find a list of recent prebuilds under the **Prebuilds** tab for your project.\n\n![Recent prebuilds list for an example project](/images/docs/projects/prebuild-dashboard.webp)\n\nFrom here, you may also trigger a new prebuild based on the last commit in the project. Selecting a prebuild will open the details page showing the current status as well as additional logs. From the prebuild details page, you may rerun the selected prebuild or start a new workspace based on it.\n\n### Rerun a prebuild\n\nPrebuilds can be triggered again which can be particularly useful when debugging an unexpected failure.\n\nTo rerun a prebuild:\n\n1. Navigate to your project and select the **Prebuilds** tab.\n2. Select the prebuild you wish to rerun.\n3. Select **Rerun Prebuild**.","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/prebuilds","loc":{"lines":{"from":68,"to":84}}}}],["1477",{"pageContent":"Start workspace based on existing prebuild\n\nTo start a workspace using an existing prebuild:\n\n1. Navigate to your project and select the **Prebuilds** tab.\n2. Select the prebuild you wish to start a workspace on top of.\n3. Select **New Workspace (with this prebuild)**.","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/prebuilds","loc":{"lines":{"from":86,"to":92}}}}],["1478",{"pageContent":"Prebuilds are shared\n\nGitpod can trigger a prebuild whenever there is a commit to a repository. That prebuild will then be used for all new workspaces opened on that branch. This is ideal for working together on branches for testing or code reviews.\n\nPrebuild users will see a message in their workspace terminal like this:\n\n```txt\n🤙 This task ran as a workspace prebuild\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/prebuilds","loc":{"lines":{"from":94,"to":102}}}}],["1479",{"pageContent":"Workspace directory only\n\nPrebuilds save **only** the workspace directory. Other directories like the home directory are not saved by prebuilds.\n\nTo use global installs like 'npm install -g', we suggest using a custom Dockerfile or a `before` task, which runs before the init task, and runs again before the command task.\n\n#### Project environment variables\n\nEnvironment variables which are defined in project settings will be visible in prebuilds. This is useful for prebuilds to access restricted services.\n\n**WARNING**\nCare should be taken with secrets in prebuilds. Do not save secrets in a way which could leak into workspaces. This especially true for public repositories.","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/prebuilds","loc":{"lines":{"from":104,"to":115}}}}],["1480",{"pageContent":"Configuring prebuilds manually\n\nAll prebuilds require a [Gitpod project](/docs/configure/projects#add-a-new-project) for the repository.\n\nFor a GitLab or Bitbucket repository, allow Gitpod to install repository webhooks, by granting `api` permissions in your [git provider integrations](https://gitpod.io/integrations)\n\nFor GitLab, if you want to trigger new Gitpod prebuilds for specific branches only, you can configure this in your GitLab [project settings](https://docs.gitlab.com/ee/user/project/integrations/webhooks.html#branch-filtering).\n\nBy default, Gitpod prepares prebuilt workspaces for all changes on the default branch and for pull/merge requests coming from the same repository.\n\n> **Note**: Prebuilds are executed as the user who enabled them. This means that if you want to use\n> prebuilds on a private repository, you must give Gitpod access to private repositories.","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/prebuilds","loc":{"lines":{"from":117,"to":128}}}}],["1481",{"pageContent":"> **Note**: Prebuilds are executed as the user who enabled them. This means that if you want to use\n> prebuilds on a private repository, you must give Gitpod access to private repositories.\n\nPrebuilds are configured in your repository's [`.gitpod.yml`](/docs/references/gitpod-yml) file with the following start tasks:\n\n- `before`\n- `init`\n\nNote the absence of the `command` task. Since this task may potentially run indefinitely, e.g. if you start a dev server, Gitpod does not execute the `command` task during prebuilds.\n\nPrebuilds have a timeout of 1 hour. If your `before` and `init` tasks combined exceed 1 hour, your prebuild will fail. Subscribe to [this issue](https://github.com/gitpod-io/gitpod/issues/6283) for updates when this limit will be lifted.\n\nEach prebuild starts with a clean environment. In other words, Gitpod does not cache artifacts between prebuilds.","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/prebuilds","loc":{"lines":{"from":128,"to":140}}}}],["1482",{"pageContent":"Each prebuild starts with a clean environment. In other words, Gitpod does not cache artifacts between prebuilds.\n\nIncremental Prebuilds use an earlier, successful Prebuild as the base. This can reduce the duration of your Prebuilds significantly, especially if they normally take more than ten minutes to complete. Incremental Prebuilds can be found under the project settings in your Gitpod dashboard.","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/prebuilds","loc":{"lines":{"from":140,"to":142}}}}],["1483",{"pageContent":"GitHub-specific configuration\n\nThe `github` `prebuilds` section in the `.gitpod.yml` file configures when prebuilds are run.\nBy default, prebuilds are run on push to the default branch and for each pull request coming from the same repository.\nAdditionally, you can enable prebuilds for all branches (`branches`) and for pull requests from forks (`pullRequestsFromForks`).\n\n> **Note:** The Gitpod GitHub app has no equivalent for GitLab or Bitbucket yet, so this entire section is GitHub-specific for now.","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/prebuilds","loc":{"lines":{"from":144,"to":150}}}}],["1484",{"pageContent":"> **Note:** The Gitpod GitHub app has no equivalent for GitLab or Bitbucket yet, so this entire section is GitHub-specific for now.\n\n```yaml\ngithub:\n  prebuilds:\n    # enable for the default branch (defaults to true)\n    master: true\n    # enable for all branches in this repo (defaults to false)\n    branches: false\n    # enable for pull requests coming from this repo (defaults to true)\n    pullRequests: true\n    # enable for pull requests coming from forks (defaults to false)\n    pullRequestsFromForks: false\n    # add a check to pull requests (defaults to true)\n    addCheck: true\n    # add a \"Review in Gitpod\" button as a comment to pull requests (defaults to false)\n    addComment: false\n    # add a \"Review in Gitpod\" button to the pull request's description (defaults to false)\n    addBadge: false\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/prebuilds","loc":{"lines":{"from":150,"to":169}}}}],["1485",{"pageContent":"Additional GitHub integration\n\nOnce the GitHub app is installed, Gitpod can add helpful annotations to your pull requests.\n\n#### Checks\n\nBy default, Gitpod registers itself as a check to pull requests - much like a continuous integration system would do.\n\nThe default behavior, however, would not make the checks fail when the prebuild failed.\nThis can be enabled with the following snippet:\n\n```yaml\ngithub:\n  prebuilds:\n    addCheck: prevent-merge-on-error\n```\n\nYou can disable this behaviour in the `.gitpod.yml` file in your default branch:\n\n```yaml\ngithub:\n  prebuilds:\n    addCheck: false\n```\n\n#### Comment\n\nGitpod can add a comment with an \"Open in Gitpod\" button to your pull requests.\n\nYou can enable this behaviour in the `.gitpod.yml` file in your default branch:\n\n```yaml\ngithub:\n  prebuilds:\n    addComment: true\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/prebuilds","loc":{"lines":{"from":171,"to":206}}}}],["1486",{"pageContent":"Badge\n\nInstead of adding a comment, Gitpod can also modify the description of a pull request to add the \"Open in Gitpod\" button.\nThis approach produces fewer GitHub notifications, but can also create a concurrent editing conflict when the bot and a user try to edit the description of a pull request at the same time.\n\nYou can enable this behaviour in the `.gitpod.yml` file in your default branch:\n\n```yaml\ngithub:\n  prebuilds:\n    addBadge: true\n```\n\nThe `addComment` and `addBadge` behaviours are not mutually exclusive (i.e. enabling one does not disable the other).\nIf you don't want the comments to be added, disable them using `addComment: false`.","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/prebuilds","loc":{"lines":{"from":208,"to":222}}}}],["1487",{"pageContent":"User specific environment variables in prebuilds\n\nIt is not necessarily best practice to have user specific environment variables in a prebuild `init` block, but sometimes there are build time requirements that mean certain tokens need setting or files need creating. Environment variables defined within your Gitpod Variables preferences are not imported by default, but they can be accessed with the following command within a `before` or `init` block:\n\n```yaml\ntasks:\n  - init: |\n      eval $(command gp env -e)\n      echo \"Hello ${MY_VAR}\"\n```\n\nAfter that, the available environment variables will be installed into the rest of you shell script and can be accessed normally.","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/prebuilds","loc":{"lines":{"from":224,"to":235}}}}],["1488",{"pageContent":"---\nsection: billing\ntitle: Billing\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Billing\n\nGitpod charges for usage based on how long workspaces run, and the resources consumed by different [workspace classes](/docs/configure/workspaces/workspace-classes). Metered usage also includes [prebuilds](/docs/configure/projects/prebuilds).\n\nYou can access and manage organization billing settings from the organization menu or the organization usage page.\n\n> **Note:** You need to be an owner of the organization to access the **Billing** page[[1](/docs/configure/orgs/members)].\n\n## Credits\n\nGitpod usage is measured in **credits**.\n\nLarger [workspace classes](/docs/configure/workspaces/workspace-classes) use credits at a faster rate. E.g. Standard workspaces use 10 credits per hour, whereas Large workspaces use 20 credits per hour.\n\nYour invoice will show the total amount of credits consumed in a billing period.","metadata":{"source":"https://www.gitpod.io/docs/configure/billing","loc":{"lines":{"from":1,"to":24}}}}],["1489",{"pageContent":"Free tier\n\nAll users receive a free usage allowance of up to 500 credits per month to try Gitpod in their first created organization.\n\n## Configure billing\n\nOrganization owners can set up billing in the organization settings by clicking \"Upgrade Plan\".\n\n![Configure Billing](../../static/images/docs/billing/configure-org-billing.png)\n\nOnce billing is configured, Gitpod will charge the organization billing account for usage by organization members.\n\n![Active billing](../../static/images/docs/billing/active-org-billing.png)\n\n## Configure a usage limit\n\nThe usage limit prevents workspaces from starting once the limit has been reached.\n\nTo change the usage limit, look for \"Update limit\" in the BALANCE section of your personal or organization billing settings, after you have configured billing.\n\n![Active billing](../../static/images/docs/billing/update-usage-limit-2.png)\n\nNote that it will not stop running workspaces.","metadata":{"source":"https://www.gitpod.io/docs/configure/billing","loc":{"lines":{"from":26,"to":48}}}}],["1490",{"pageContent":"View usage details\n\nOrganization owners can view usage details for their organization.\n\n![View usage](../../static/images/docs/billing/view-org-usage-details.png)\n\n## Old pricing plans\n\nAll old seat-based or personal plans have been faded out. If you had one of those, and need help of any kind related to those, please contact support at support@gitpod.io.","metadata":{"source":"https://www.gitpod.io/docs/configure/billing","loc":{"lines":{"from":50,"to":58}}}}],["1491",{"pageContent":"Old pricing plans\n\nAll old seat-based or personal plans have been faded out. If you had one of those, and need help of any kind related to those, please contact support at support@gitpod.io.\n\n## FAQs\n\n### [How can I limit or optimize prebuild costs?](https://discord.com/channels/816244985187008514/1070648758716600371)\n\n<!-- DISCORD_BOT_FAQ - DO NOT REMOVE -->\n\nThere are a few built-in Gitpod features that can optimize your prebuild costs, such as:\n\n- **Skip prebuilds** every X commits and use [last successful prebuild](https://www.gitpod.io/docs/configure/projects/last-successful-prebuild)\n\n- **Stop prebuilds** for all branches, PRs and etc. when on GitHub. See [this page](https://www.gitpod.io/docs/references/gitpod-yml/#github). (might not be necessary)\n\n### With prebuilds enabled, does every push to my repository cost me credits?\n\nIt depends on how you configured prebuilds. Prebuilds run on headless Gitpod workspaces and the cost depends on how long they run when triggered.","metadata":{"source":"https://www.gitpod.io/docs/configure/billing","loc":{"lines":{"from":58,"to":76}}}}],["1492",{"pageContent":"<script context=\"module\">\n  export const prerender = true;\n  export const load = () => {\n    return {\n      status: 301,\n      redirect: \"/docs/configure/billing\"\n    }\n  };\n</script>","metadata":{"source":"https://www.gitpod.io/docs/configure/billing/org-billing","loc":{"lines":{"from":1,"to":9}}}}],["1493",{"pageContent":"<script context=\"module\">\n  export const prerender = true;\n  export const load = () => {\n    return {\n      status: 301,\n      redirect: \"/docs/configure/billing\"\n    }\n  };\n</script>","metadata":{"source":"https://www.gitpod.io/docs/configure/billing/org-plans","loc":{"lines":{"from":1,"to":9}}}}],["1494",{"pageContent":"<script context=\"module\">\n  export const prerender = true;\n  export const load = () => {\n    return {\n      status: 301,\n      redirect: \"/docs/configure/billing\"\n    }\n  };\n</script>","metadata":{"source":"https://www.gitpod.io/docs/configure/billing/pay-as-you-go","loc":{"lines":{"from":1,"to":9}}}}],["1495",{"pageContent":"<script context=\"module\">\n  export const prerender = true;\n  export const load = () => {\n    return {\n      status: 301,\n      redirect: \"/docs/configure/billing\"\n    }\n  };\n</script>","metadata":{"source":"https://www.gitpod.io/docs/configure/billing/personal-plans","loc":{"lines":{"from":1,"to":9}}}}],["1496",{"pageContent":"---\nsection: self-hosted/latest\ntitle: Self-Hosted\n---\n\n<script context=\"module\">\n  export const prerender = true;\n  export const load = () => {\n    return {\n      status: 301,\n      redirect: \"/docs/configure/self-hosted/latest\"\n    }\n  };\n</script>","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted","loc":{"lines":{"from":1,"to":14}}}}],["1497",{"pageContent":"---\nsection: workspaces\ntitle: Collaboration & Sharing of Gitpod workspaces\n---\n\n<script context=\"module\">\n  export const prerender = true;\n  import IdeToggle from \"$lib/components/docs/ide-toggle.svelte\";\n</script>\n\n# Collaboration & Sharing of Workspaces\n\nThere are currently two ways to share a Gitpod workspace, either by creating a [workspace snapshot](#sharing-snapshots), a \"point in time\" capture of a workspace state that can be then opened by another user. Or, by [sharing a running workspace](#sharing-running-workspaces) which shares access to a single running workspace to multiple users.\n\n`youtube: HcKlXfKpolM`","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/collaboration","loc":{"lines":{"from":1,"to":15}}}}],["1498",{"pageContent":"Workspace Snapshots\n\nSnapshotting a workspace is useful when you want to create reproducible workspace state for reporting support issues, or when giving training, or presentations. You can create up to three snapshots from any workspace.\n\nYou can create a snapshot URL of your workspace to share your workspace files with others. Following a Gitpod snapshot URL starts a new workspace, but under the account of the user who followed that original snapshot URL.\n\nThere are a few important things to note about workspace snapshots:\n\n- **Snapshots behave like workspace restarts** - All workspace state, including files changed since the original workspace start are preserved in a snapshot. Any tasks or processes typically launched via a workspace start will not run for a workspace snapshot.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/collaboration","loc":{"lines":{"from":17,"to":25}}}}],["1499",{"pageContent":"- **Access to secret information** - Snapshotted workspaces do not grant access to Gitpod environment variables, Gitpod authentication or Git credentials within a snapshot. However, you should use caution that you did not store any secret or private information in any files of a workspace snapshot before generating a snapshot URL.\n\n- **Deleting and managing snapshots** - If you want to remove any created snapshot URLs, deleting the workspace directly removes any created snapshot URLs associated with that workspace.\n\n- **Users must have repository access** - Each workspace snapshot creates a new unique URL. Access to a snapshot is based on the access rules on the repository the workspace is based on. This means snapshots based on private repositories can only be opened by those with access to the repository. Public repository snapshots can be accessed without authentication.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/collaboration","loc":{"lines":{"from":27,"to":31}}}}],["1500",{"pageContent":"> **Note:** Caution should always be taken when sharing potentially sensitive information, including Gitpod workspace snapshots. If you are concerned you have accidentally shared sensitive information, we suggest you follow best practices such as immediately rotating credentials and adhere to your typical security response process.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/collaboration","loc":{"lines":{"from":33,"to":33}}}}],["1501",{"pageContent":"How To Take a Snapshot URL\n\n<IdeToggle id=\"ide-toggle-ports\">\n\n<div slot=\"jetbrains\">\n\nTo create a snapshot, run \"Gitpod: Share Workspace Snapshot\" from the Backend Control Center, or from the JetBrains IDE search. Once you execute the command, the snapshot is taken and the URL is shown in a dialog.\n\n</div>\n\n<div slot=\"vscodedesktop\">\n\nTo create a snapshot, run \"Gitpod: Share Workspace Snapshot\" from the hamburger menu at the top left of VS Code, from the Gitpod menu at the bottom, or via the VS Code command palette. Once you execute the command, the snapshot is taken and the URL is shown in a dialog.\n\n</div>\n\n<div slot=\"vscodebrowser\">\n\nTo create a snapshot, run \"Gitpod: Share Workspace Snapshot\" from the hamburger menu at the top left of VS Code, from the Gitpod menu at the bottom, or via the VS Code command palette. Once you execute the command, the snapshot is taken and the URL is shown in a dialog.\n\n</div>\n\n<div slot=\"commandline\">","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/collaboration","loc":{"lines":{"from":35,"to":57}}}}],["1502",{"pageContent":"</div>\n\n<div slot=\"commandline\">\n\n    You can run `gp snapshot` from any workspace to generate a snapshot URL.\n\n</div>\n\n</IdeToggle>","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/collaboration","loc":{"lines":{"from":57,"to":65}}}}],["1503",{"pageContent":"Sharing Running Workspaces\n\nSharing running workspaces makes it possible to quickly look at a workspace together with a (remote) colleague. It is similar to collaborating on Google Docs, in that you can see who is online and look at the same code and processes.\n\nTo share your workspace, navigate to the workspaces page at https://gitpod.io/workspaces. From there:\n\n1. Move your mouse over the workspace you want to share (change the filter to All if you don't see your workspace).\n1. Click the three dots menu to the right of the highlighted workspace.\n1. Click **Share**\n\nThis marks your workspace as shared. When you open it, you can copy & share its URL.\n\n> **Note:** You can join shared workspaces only by using VS Code Browser. If you prefer to use another editor, please consider using [external collaboration plugins](#external-collaboration-plugins).","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/collaboration","loc":{"lines":{"from":67,"to":79}}}}],["1504",{"pageContent":"> **Note:** You can join shared workspaces only by using VS Code Browser. If you prefer to use another editor, please consider using [external collaboration plugins](#external-collaboration-plugins).\n\n> **Security note:**\n>\n> Beware, anybody with this URL and a Gitpod account will be able to access the workspace as long as\n> it is shared and running.\n>\n> Every action involving Git in a shared workspace happens on behalf of the workspace owner's account without further authorization. This includes access to secrets used in a shared workspace.\n> It is highly recommended to give workspace URLs only to trusted users and unshare workspaces as soon as sharing them is no longer necessary.\n>\n> **A running Gitpod workspace really is your personal machine.**\n>\n> At present, this feature cannot be disabled. If this is something you are interested in, please [let us know in this issue](https://github.com/gitpod-io/gitpod/issues/6328).","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/collaboration","loc":{"lines":{"from":79,"to":91}}}}],["1505",{"pageContent":"External Collaboration Plugins\n\nWith Gitpod you can also use the following third-party integrations for real-time collaboration:\n\n- [Code Together](https://www.codetogether.com/) - Works on VS Code Desktop, VS Code Browser, and via JetBrains or Eclipse.\n- [GitLive](https://git.live/) - Works on VS Code Desktop, VS Code Browser, and via JetBrains.\n- [Duckly](https://duckly.com/) - Works on VS Code Desktop and VS Code Browser.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/collaboration","loc":{"lines":{"from":93,"to":99}}}}],["1506",{"pageContent":"---\nsection: workspaces\ntitle: Multi-repo\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Multi-repo\n\n> {title} is currently in [Beta](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/8623).\n\nIf your software project is comprised of multiple source control repositories it is possible to configure Gitpod to clone these additional repositories through the configuration keys of `additionalRepositories` and `mainConfiguration` in the [.gitpod.yml](/docs/references/gitpod-yml) file which removes the need to run multiple workspaces, and makes it easier to configure services which need to be aware of each other.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/multi-repo","loc":{"lines":{"from":1,"to":14}}}}],["1507",{"pageContent":"Cloning additional repositories\n\nThe `additionalRepositories` key is an array of repositories which contains two properties which define the source control `url` to clone and the `checkoutLocation` of where the repository is cloned is under `/workspaces`\n\n```yaml\n# example .gitpod.yml from https://github.com/gitpod-io/demo-multi-repo-frontend\nadditionalRepositories:\n  - url: https://github.com/gitpod-io/demo-multi-repo-backend\n    # checkoutLocation is relative to /workspaces\n    checkoutLocation: backend","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/multi-repo","loc":{"lines":{"from":16,"to":25}}}}],["1508",{"pageContent":"When the above configuration is defined then the following additional steps happen when Gitpod workspace is started:\n\n1. If you open a workspace on a branch, Gitpod will clone the same-named branch in all repositories. If such a branch doesn’t exist Gitpod checks out the default branch.\n1. The contents of `https://github.com/gitpod-io/demo-multi-repo-frontend` is cloned to `/workspaces/demo-multi-repo-frontend`\n1. The contents of `https://github.com/gitpod-io/demo-multi-repo-backend` is cloned to `/workspaces/backend`\n\nAfter all of the source control repositories have been cloned then the `before`, `init` and `command` [tasks](https://www.gitpod.io/docs/configure/workspaces/tasks) are executed as per normal. If you need to run commands (such as package installation or compilation) on the source control repositories which have been cloned then change your working directory the `checkoutLocation` location using the `before` task.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/multi-repo","loc":{"lines":{"from":28,"to":34}}}}],["1509",{"pageContent":"```yaml\n# example .gitpod.yml from https://github.com/gitpod-io/demo-multi-repo-frontend\nadditionalRepositories:\n  - url: https://github.com/gitpod-io/demo-multi-repo-backend\n    checkoutLocation: backend\n\ntasks:\n  - name: backend\n    # change working directory as per configured in `checkoutLocation`\n    # which is configured above as `/workspaces/backend`\n    before: |\n      cd ../backend\n    init: |\n      echo npm install\n    command: |\n      echo npm run dev\n\n    # changing of working directory is not required as these tasks will\n    # by default by executed in `/workspaces/demo-multi-repo-frontend`\n  - name: frontend\n    init: |\n      echo npm install\n      echo npm run build\n    command: |\n      echo npm run dev","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/multi-repo","loc":{"lines":{"from":36,"to":60}}}}],["1510",{"pageContent":"Try it out at https://github.com/gitpod-io/demo-multi-repo-frontend","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/multi-repo","loc":{"lines":{"from":63,"to":63}}}}],["1511",{"pageContent":"Delegating configuration\n\nThe optional `mainConfiguration` configuration key when configured in additional repositories points to the repository with the main [.gitpod.yml](/docs/references/gitpod-yml) file and makes it possible to open the same workspace from any issue, branch or other context URL from any of the participating repositories. Since the main configuration is used for prebuilds, those will show up under the main project.\n\n```yaml\n# example .gitpod.yml from https://github.com/gitpod-io/demo-multi-repo-backend\nmainConfiguration: https://github.com/gitpod-io/demo-multi-repo-frontend\n```\n\nTry it out at https://github.com/gitpod-io/demo-multi-repo-backend","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/multi-repo","loc":{"lines":{"from":65,"to":74}}}}],["1512",{"pageContent":"Adding additional repo folders to VSCode Explorer\n\n![VSCode workspace folders](.../../../static/images/docs/vscode-workspace-folders.png)\n\nYou might want to see the [`additionalRepositories`](#cloning-additional-repositories) on your VSCode.\n\nTo do so:\n\n1. Create a file called `main.code-workspace` (for example) on your main(e.g. frontend) repository that everyone is expected to open via Gitpod.\n2. Now you can define the folder paths:\n\n```json\n{\n  // All paths are relative to your main repo\n  // The additional repos are cloned inside /workspace dir\n  \"folders\": [\n    {\n      \"path\": \".\" // Main repo that you will open in Gitpod (e.g. frontend)\n    },\n    {\n      \"path\": \"../backend\" // Additional repo\n    },\n    {\n      \"path\": \"../db\" // Additional repo\n    }\n  ]\n}\n```\n\n3. Specify your `.code-workspace` file path on `.gitpod.yml`:\n\n```yaml\nworkspaceLocation: frontend/main.code-workspace # Relative to /workspace dir","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/multi-repo","loc":{"lines":{"from":76,"to":108}}}}],["1513",{"pageContent":"3. Specify your `.code-workspace` file path on `.gitpod.yml`:\n\n```yaml\nworkspaceLocation: frontend/main.code-workspace # Relative to /workspace dir\n```\n\n4. [Validate your configuration changes](/docs/configure/workspaces#validate-your-gitpod-configuration) by running `gp validate` in your workspace.\n5. [Apply your .gitpod.yml changes](/docs/configure/workspaces#apply-configuration-changes) by committing and restarting a new workspace.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/multi-repo","loc":{"lines":{"from":108,"to":115}}}}],["1514",{"pageContent":"FAQs","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/multi-repo","loc":{"lines":{"from":117,"to":117}}}}],["1515",{"pageContent":"[Single repo but instances of multiple branches](https://discord.com/channels/816244985187008514/1063202039955476540)\n\n<!-- DISCORD_BOT_FAQ - DO NOT REMOVE -->\n\nIf you want to create multiple instances of one repository with different branches, you could use such a method:\n\n```yaml\ntasks:\n  - name: Multi branch\n    before: |\n      # Get primary repo dir path and name\n      main_repo_dir=\"${GITPOD_REPO_ROOT}\"\n      primary_repo_name=\"${main_repo_dir##*/}\"\n\n      # Array for BRANCH name(s).\n      extra_clone_branches=(\n          backend\n          docs\n          next\n      )\n\n      for reference in \"${extra_clone_branches[@]}\"; do {\n          dir=\"${main_repo_dir}-${reference}\"","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/multi-repo","loc":{"lines":{"from":119,"to":141}}}}],["1516",{"pageContent":"for reference in \"${extra_clone_branches[@]}\"; do {\n          dir=\"${main_repo_dir}-${reference}\"\n\n          if test ! -e \"${dir}\" && git -C \"${main_repo_dir}\" show-ref --quiet \"refs/heads/${reference}\"; then {\n            printf 'INFO: %s\\n' \"Duplicating ${primary_repo_name} to ${dir} with ${reference} branch\"\n            cp -ra \"${main_repo_dir}\" \"${dir}\"\n            git -C \"${dir}\" checkout \"${reference}\" 2>&1 | grep -v \"Switched to branch '${reference}'\"\n          } fi\n      } done\n\n      # Send signal to awaiting task(s)\n      gp sync-done multi_branch\n\n  - name: Some other task\n    command: |\n      # Wait for multi_branch to avoid race condition\n      gp sync-await multi_branch\n\n      echo hello\n      true 'something'","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/multi-repo","loc":{"lines":{"from":141,"to":160}}}}],["1517",{"pageContent":"And to have such a feature built-in, please react with a \" 👍 \" on this issue: https://github.com/gitpod-io/gitpod/issues/15608","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/multi-repo","loc":{"lines":{"from":163,"to":163}}}}],["1518",{"pageContent":"---\nsection: workspaces\ntitle: Workspaces\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Workspaces\n\nGitpod is not simply \"moving your laptop into the cloud\". One key benefit of using a Cloud Development Environment ([CDE](/cde)) is _reproducibility_. When your workspace is configured, opening a new workspace is effortless—allowing you to fully embrace ephemeral development environments.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces","loc":{"lines":{"from":1,"to":12}}}}],["1519",{"pageContent":"Understanding Gitpod configuration\n\n### The gitpod.yml file\n\nThe primary method of configuration is using a YAML file named `.gitpod.yml`, located at the root of your repository. The `gitpod.yml` file defines (for example):\n\n1. The processes to start for your project - e.g. a database or webserver.\n2. Required tools to install before the project starts.\n3. Any editor extensions or IDE plugins to install.\n\nSee the [.gitpod.yml reference](/docs/references/gitpod-yml) page for more.\n\n`youtube: fA2fpqP1xaM`","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces","loc":{"lines":{"from":14,"to":26}}}}],["1520",{"pageContent":"A gitpod.yml example\n\n```yaml\nimage: gitpod/workspace-full\n\n# Commands that will run on workspace start\ntasks:\n  - name: Setup, Install & Build\n    before: yarn global add express\n    init: yarn install\n    command: yarn build\n\n# Ports to expose on workspace startup\nports:\n  - port: 3000\n    onOpen: open-preview\n    name: Website\n    description: Website Preview\n```\n\n**Caption:** An example project configured to install, build and run a `yarn` project with a webserver, exposed on port 3000. On start, an in-editor preview of the webserver is opened automatically.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces","loc":{"lines":{"from":28,"to":48}}}}],["1521",{"pageContent":"The workspace image\n\nIn addition to the `gitpod.yml` you can also specify a workspace image for:\n\n1. Application portability\n2. Re-using an existing Dockerfile\n\nCurrently, Gitpod only supports Docker for workspace images. The Dockerfile can either be kept alongside your Gitpod configuration, or you can consume an existing public, or private image.\n\nSee [Workspace Image](/docs/configure/workspaces/workspace-image) for more.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces","loc":{"lines":{"from":50,"to":59}}}}],["1522",{"pageContent":"Creating a Gitpod configuration\n\nYou can create a `.gitpod.yml` manually, or by using the `gp init` command (or `gp init -i` for interactive mode). The `gp` CLI tool is part of the [Gitpod CLI](/docs/references/gitpod-cli), which is included in all Gitpod workspaces by default.\n\n```sh\ngp init\n```\n\nSee the [Gitpod CLI](/docs/references/gitpod-cli) page for more.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces","loc":{"lines":{"from":61,"to":69}}}}],["1523",{"pageContent":"Validate your Gitpod configuration\n\nYou can test your configuration, including your `.gitpod.yml`, without leaving your workspace or committing your changes by using the `gp validate` command. This command opens a workspace (that runs from within your current workspace) which includes your configuration changes. Thus, allowing you to troubleshoot workspace configuration (ports, tasks, etc.) and more.\n\nYou can use the `gp validate` command to test various configuration setups: simple workspace starts (without Prebuilds enabled), workspace starts using a Prebuild, or for debugging Prebuilds themselves. See below for the differences:\n\n| Command                  | Steps ran                     |\n| ------------------------ | ----------------------------- |\n| `gp validate`            | `before` + `init` + `command` |\n| `gp validate --prebuild` | `before` + `init`             |\n\n<!-- | `gp validate --from=\"prebuild\"` | `before` + `command`          | -->","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces","loc":{"lines":{"from":71,"to":82}}}}],["1524",{"pageContent":"<!-- | `gp validate --from=\"prebuild\"` | `before` + `command`          | -->\n\n> **Tip:** For improved speed and convenience while updating your workspace configuration, consider starting your workspace using a large [Workspace Class](/docs/configure/workspaces/workspace-classes).","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces","loc":{"lines":{"from":82,"to":84}}}}],["1525",{"pageContent":"Validate a workspace start\n\n1. Run `gp validate` to emit a Workspace URL.\n2. Open the workspace and review your configuration.\n3. Update your configuration in the original workspace, and re-run `gp validate` (if needed).\n\n### Validate a Prebuild\n\nYou can run `gp validate --prebuild` to validate how a prebuild process would look upon completion (this runs `before` and `init` tasks, but not `command` tasks).\n\n1. Run `gp validate --prebuild` - This command will emit a Workspace URL.\n2. Open the workspace to check your configuration.\n3. Update configuration in the original workspace, re-running `gp validate` if needed.\n\n> **Important:** This command runs the workspace _as_ a Prebuild not _from_ a prebuild. Meaning this produces the same environment that is created by a Prebuild process, before a workspace is subsequently started using it.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces","loc":{"lines":{"from":86,"to":100}}}}],["1526",{"pageContent":"Apply configuration changes\n\nTo apply your changes for all subsequent workspaces, commit and push the `gitpod.yml` (and `.gitpod.Dockerfile` if you created one) to the root of your repository.\n\nOpen the commit in a new workspace by either:\n\n1. Prefixing your repo URL with `https://gitpod.io/#`\n   - **For example:** https://gitpod.io/#https://github.com/nodejs/node\n2. Opening a new workspace from the [Gitpod dashboard](https://gitpod.io/dashboard)\n3. Installing, and using the [Gitpod Browser Extension](/docs/configure/user-settings/browser-extension#browser-extension)\n\n> **Important:** You must commit the `.gitpod.yml` to the root of the repository and start a new workspace for changes to apply (a workspace restart is not sufficient).","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces","loc":{"lines":{"from":102,"to":113}}}}],["1527",{"pageContent":"FAQs\n\n### [IP addresses of Gitpod workspace](https://discord.com/channels/816244985187008514/1099925986088333424)\n\n**Q: How can I connect to an Azure SQL instance from a Gitpod.io workspace? Is there a way to get a public IP to whitelist?**\n\nA: Gitpod workspaces do not have dedicated static IPs. However, you can use a proxy server IP and link it with your Gitpod workspaces using Tailscale integration. For more information, refer to [Gitpod's Tailscale Integration documentation](https://www.gitpod.io/docs/integrations/tailscale).","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces","loc":{"lines":{"from":115,"to":121}}}}],["1528",{"pageContent":"[Is it possible to run a Kubernetes cluster in a Gitpod workspace using minikube or kind (or other alternatives)?](https://discord.com/channels/816244985187008514/1094565343038550016)\n\nYou cannot run a Kubernetes cluster directly in a Gitpod workspace using minikube or kind. However, you can run it through QEMU using the following Gitpod template: [template-k3s](https://github.com/gitpod-io/template-k3s). You can also use [template-nixos](https://github.com/gitpod-io/template-nixos).\n\nRelevant GitHub issue: https://github.com/gitpod-io/gitpod/issues/4889","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces","loc":{"lines":{"from":123,"to":127}}}}],["1529",{"pageContent":"---\nsection: workspaces\ntitle: Ports\n---\n\n<script context=\"module\">\n  export const prerender = true;\n  import IdeToggle from \"$lib/components/docs/ide-toggle.svelte\";\n  import Action from \"$lib/components/action.svelte\";\n</script>\n\n# Ports\n\nGitpod supports exposing HTTP ports via a custom domain that is associated with your workspace. You can also use port forwarding, so that you do not need to update your application if it already references the localhost hostname. You can forward all ports using the [local companion](/docs/references/ides-and-editors/local-companion), natively in both [VS Code Desktop](/docs/references/ides-and-editors/vscode), [JetBrains](/docs/integrations/jetbrains-gateway) and also via the [command-line](/docs/references/ides-and-editors/command-line) using SSH.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/ports","loc":{"lines":{"from":1,"to":14}}}}],["1530",{"pageContent":"Default port behaviors\n\nBy default, when a port is opening in a Gitpod workspace, Gitpod will:\n\n1. **Direct HTTP traffic** - When an application starts listening to an HTTP port, Gitpod detects the port and exposes it on a URL that requires authentication. Setting the port to \"public\" would make the port URL accessible to anyone on the internet (or the installed network if using self-hosted Gitpod).\n1. **Notify the user** - Gitpod sends the user a popup notification in their [IDE or editor](/docs/references/ides-and-editors) to let the user know that a port has been detected.\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Setting a port public/private in VS Code Browser\" src=\"/images/editors/port-notification-vscode.png\">\n    <figcaption>Setting a port public/private in VS Code Browser</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/ports","loc":{"lines":{"from":16,"to":26}}}}],["1531",{"pageContent":"<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Setting a port public/private in a JetBrains IDE\" src=\"/images/jetbrains-gateway/jetbrains-notification.png\">\n    <figcaption>Setting a port public/private in a JetBrains IDE</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/ports","loc":{"lines":{"from":28,"to":31}}}}],["1532",{"pageContent":"Accessing port URLs\n\nYou can access the dedicated port URL by pre-pending the port number to the workspace URL.\n\ne.g `3000-yourworkspace.ws-eu45.gitpod.io`\n\nYou can also print the port URL using the [gp url](/docs/references/gitpod-cli) command (e.g. `gp url 3000`).\n\nAnd if you prefer listing all open ports URLs at once, use [gp ports list](/docs/references/gitpod-cli) command.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/ports","loc":{"lines":{"from":33,"to":41}}}}],["1533",{"pageContent":"Configuring port behaviors\n\nTo modify or change default port behaviors, update the `ports` section of your [`.gitpod.yml`](/docs/references/gitpod-yml).\n\nAll changes to port behaviors take effect immediately, not requiring a workspace restart.\n\n**Note:** Some actions (e.g. setting a port public/private) can be taken via the IDE or editor.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/ports","loc":{"lines":{"from":43,"to":49}}}}],["1534",{"pageContent":"Configure port opening\n\nThe port open event is triggered when a new port is detected as open within the workspace.\n\nPort opening behavior can only be set via the [`.gitpod.yml`](/docs/references/gitpod-yml)\n\nThe property `onOpen` configures port opening behaviors:\n\n- `notify` (default) - Show a notification for newly detected ports.\n- `open-preview` - Open the port URL in a preview within the editor or IDE.\n- `open-browser` - Open the port URL in a browser tab.\n- `ignore` - Ignore default behavior (notify).\n\n**Example**: Open a browser tab for port 8080\n\n```yaml\nports:\n  - name: Web App\n    description: The main application web server\n    port: 8080\n    onOpen: open-browser\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/ports","loc":{"lines":{"from":51,"to":72}}}}],["1535",{"pageContent":"Specify port names & descriptions\n\nYou can give ports a `name` and a `description` (both optional). These properties will help you to add context about what the port is being used for.\n\n<IdeToggle id=\"ide-toggle-ports\">\n\n<div slot=\"vscodebrowser\">\n    <p>\n        Every exposed port's information and its corresponding actions can be found in the <Action>PORTS</Action> tab inside of VS Code Browser.\n    </p>\n    <figure>\n        <img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"The PORTS tab in VS Code Browser with a single port's actions\" src=\"/images/docs/ports-view-vscode.png\" />\n        <figcaption>The <Action>PORTS</Action> tab in VS Code Browser with a single port's actions</figcaption>\n    </figure>\n</div>","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/ports","loc":{"lines":{"from":74,"to":88}}}}],["1536",{"pageContent":"<div slot=\"vscodedesktop\">\n    <p>\n        Every exposed port's information and its corresponding actions can be found in the <Action>EXPOSED PORTS</Action> tab inside of VS Code Desktop.\n    </p>\n    <figure>\n        <img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"The EXPOSED PORTS view in VS Code Desktop with a single port's actions\" src=\"/images/docs/ports-view-vscodedesktop.png\" />\n        <figcaption>The <Action>EXPOSED PORTS</Action> view in VS Code Desktop with a single port's actions</figcaption>\n    </figure>\n</div>","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/ports","loc":{"lines":{"from":90,"to":98}}}}],["1537",{"pageContent":"<div slot=\"jetbrains\">\n    <p>\n        You can execute <a href=\"/docs/references/gitpod-cli#list-1\"><code>gp ports list</code></a> in the terminal to output a table-formatted list of ports along with their status, URL, name and description.\n    </p>\n    <figure>\n        <img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Display ports info with the Gitpod CLI\" src=\"/images/docs/ports-with-name-cmd.png\" />\n        <figcaption>Display ports info with the Gitpod CLI</figcaption>\n    </figure>\n</div>","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/ports","loc":{"lines":{"from":100,"to":108}}}}],["1538",{"pageContent":"<div slot=\"commandline\">\n    <p>\n        You can execute <a href=\"/docs/references/gitpod-cli#list-1\"><code>gp ports list</code></a> to output a table-formatted list of ports along with their status, URL, name and description.\n    </p>\n    <figure>\n        <img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Display ports info with the Gitpod CLI\" src=\"/images/docs/ports-with-name-cmd.png\" />\n        <figcaption>Display ports info with the Gitpod CLI</figcaption>\n    </figure>\n</div>\n\n</IdeToggle>\n\nThe property `visibility` configures who can access a port:\n\n- `private` (default) - Only allow users with workspace access to access the port.\n- `public` - Allows everyone with the port URL to access the port.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/ports","loc":{"lines":{"from":110,"to":125}}}}],["1539",{"pageContent":"Configure port visibility\n\nPort visibility can be set in [`.gitpod.yml`](/docs/references/gitpod-yml), changed via the [Gitpod CLI](/docs/references/gitpod-cli), or manually changed within the IDE or editor.\n\n<IdeToggle id=\"ide-toggle-ports\">\n\n<div slot=\"jetbrains\">\n    <p>Using the <a href=\"/docs/references/gitpod-cli#visibility\">Gitpod CLI with ports visibility</a> in the terminal.</p>\n</div>\n\n<div slot=\"vscodebrowser\">\n    <figure>\n    <img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Setting a port public/private in VS Code Browser\" src=\"/images/editors/toggle-port-visibility-vscode.png\">\n        <figcaption>Setting a port public/private in VS Code Browser</figcaption>\n    </figure>\n</div>\n\n<div slot=\"vscodedesktop\">\n    <p>Using the <a href=\"/docs/references/gitpod-cli#visibility\">Gitpod CLI with ports visibility</a> in the terminal.</p>\n</div>\n\n</IdeToggle>","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/ports","loc":{"lines":{"from":127,"to":148}}}}],["1540",{"pageContent":"Configure port ranges\n\nAll port configurations can be applied to ranges as well as single ports.\n\n**Example:** Prevent notifications for ports between 3000 and 8999.\n\nPorts won't be shown in VS Code's <Action>PORTS</Action> view or in the [Gitpod CLI](/docs/references/gitpod-cli) until they are opened.\n\n```yaml\nports:\n  - port: 3000-8999\n    onOpen: ignore\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/ports","loc":{"lines":{"from":150,"to":162}}}}],["1541",{"pageContent":"Ports ordering\n\nPorts are ordered according to their definition in `.gitpod.yml`. Any undefined ports are sorted numerically in ascending order. Port ordering rules apply to all ports views, for example, when using `gp ports list` or viewing ports in VS Code or JetBrains.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/ports","loc":{"lines":{"from":164,"to":166}}}}],["1542",{"pageContent":"Port forwarding\n\nThere are two types of port forwarding: local and remote.\n\nLocal port forwarding allows you to forward a port running in your Gitpod workspace to access via your localhost hostname. Remote port forwarding exposes a locally running process to use in your workspace. Remote port forwarding is not currently supported.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/ports","loc":{"lines":{"from":168,"to":172}}}}],["1543",{"pageContent":"Local port forwarding\n\n<IdeToggle id=\"ide-toggle-ports\">\n\n<div slot=\"jetbrains\">\n    <p>To forward a port in JetBrains, navigate to the preferences page in the <a href=\"/docs/integrations/jetbrains-gateway\">JetBrains Gateway</a> client to select the port and protocol to be forwarded.</p>\n    <figure>\n    <img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Port forwarding in a JetBrains IDE\" src=\"/images/jetbrains-gateway/port-forward-jetbrains.png\">\n        <figcaption>Port forwarding in a JetBrains IDE</figcaption>\n    </figure>\n</div>\n\n<div slot=\"vscodebrowser\">\n    <p>Using the <a href=\"/docs/references/ides-and-editors/local-companion\">Local Companion</a>, you can automatically forward all ports from your workspace to localhost. Setting up port forwarding for VS Code Browser allows you to use a project already configured with <code>localhost</code> without requiring any code changes.</p>\n</div>","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/ports","loc":{"lines":{"from":174,"to":188}}}}],["1544",{"pageContent":"<div slot=\"vscodedesktop\">\n    <p>With VS Code Desktop, all ports are automatically forwarded, allowing you to access any forwarded ports on your localhost address. You can also manually forward a port using the ports view.</p>\n\n    <figure>\n    <img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Port forwarding in VS Code Desktop\" src=\"/images/editors/port-forwarding-vscode-desktop.png\">\n        <figcaption>Port forwarding in VS Code Desktop</figcaption>\n    </figure>\n\n</div>\n\n</IdeToggle>","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/ports","loc":{"lines":{"from":190,"to":200}}}}],["1545",{"pageContent":"Local port forwarding via SSH\n\nUsing [SSH command-line](/docs/references/ides-and-editors/command-line) access to your workspace, ports can also be forwarded manually using tools such as the OpenSSH remote login client.\n\n**Example:** Forwarding port `3000` to `localhost:3000`\n\n`ssh -L 3000:localhost:3000 <workspace-ssh-connection>`","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/ports","loc":{"lines":{"from":202,"to":208}}}}],["1546",{"pageContent":"Local reverse port forwarding via SSH\n\nIf you have a port open in your local machine but you want to access it inside Gitpod via SSH, you could do the following:\n\n- [Copy the SSH command for a workspace](/docs/references/ides-and-editors/command-line#workspace-ssh-approaches).\n- Paste the SSH command on your **local machine terminal**.\n- Append `-N -R <port>:localhost:<port>` to the command and press enter, make sure to change the <port>.\n  - Assuming the port is `5000`, it would look like `-N -R 5000:localhost:5000`.\n\nNow, from your Gitpod workspace, you can access it via `localhost:5000`.\n\n**Example Scenario:**\n\n- You start a HTTP file server on port 5000 **on your local machine**: `python3 -m http.server 5000`.\n\n- Start reverse port forwarding from a different terminal **on your local machine** to access it **from your Gitpod workspace**:\n\n```bash\nssh 'some-special-ws-id@gitpod.io' -N -R 5000:localhost:5000","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/ports","loc":{"lines":{"from":211,"to":229}}}}],["1547",{"pageContent":"- Now run `curl -L http://localhost:9000` **inside your Gitpod workspace**, which will hit the port 5000 **on your local machine's** HTTP server.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/ports","loc":{"lines":{"from":232,"to":232}}}}],["1548",{"pageContent":"Cross-Origin Resource Sharing (CORS)\n\nIf you start a server on a private port, let's say 5001, and want to connect to it from your web application which runs on a different port, e.g. 3000, you have to configure your requests. This is necessary because Gitpod requires credentials for private ports. Without credentials, Gitpod cannot verify that the request is made by an authorized user.\n\n**Configure your web application**\n\nTo make this work, your web application's `fetch` request needs to have the `credentials: \"include\"` option set. See the [MDN doc's `credentials` description](https://developer.mozilla.org/en-US/docs/Web/API/fetch) for more details.\n\n**Configure your server**\n\nIn your server (the one on port 5001 in the above example), you have to configure the response to include the `Access-Control-Allow-Credentials` header. Without it, your browser rejects the response and you see CORS errors in the browser console.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/ports","loc":{"lines":{"from":235,"to":245}}}}],["1549",{"pageContent":"---\nsection: workspaces\ntitle: Tasks\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Tasks\n\n<!--\n  Source for diagrams: https://excalidraw.com/#json=5144082254921728,Kl_Vys0jGocSg6BQ9musNw\n\n  ! If you update the diagrams, make sure you replace the above, immutable URL !\n-->\n\nTo get the most out of ephemeral developer environments, it is important to let Gitpod know how to build your project. We can achieve this by defining `tasks` in the [`.gitpod.yml`](/docs/references/gitpod-yml) configuration file.\n\n> **Note**: In your local developer environment, you likely set up your project only once. If you work in a team, you probably have written instructions on how to get started. With Gitpod, you automate these manual steps so that a new environment can be set up repeatedly by Gitpod.\n\nTasks are shell scripts that run on top of the Docker image you configure (learn more about [custom Docker images](/docs/configure/workspaces/workspace-image)).\n\n`youtube: E95oV_iqUtI`","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/tasks","loc":{"lines":{"from":1,"to":24}}}}],["1550",{"pageContent":"Execution order\n\nWith Gitpod, you have the following three types of tasks:\n\n- `before`: Use this for tasks that need to run before `init` and before `command`. For example, customize the terminal or install global project dependencies.\n- `init`: Use this for heavy-lifting tasks such as downloading dependencies or compiling source code.\n- `command`: Use this to start your database or development server.\n\nThe order in which these tasks execute depends on whether you have [Prebuilds](/docs/configure/projects/prebuilds) configured for your project and which startup scenario applies. Let's look at the details.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/tasks","loc":{"lines":{"from":26,"to":34}}}}],["1551",{"pageContent":"> **Caveats**\n>\n> - Any file changes made outside of `/workspace` file hierarchy from `init` tasks will be lost on workspace start when prebuilds are enabled. [Learn more](/docs/configure/projects/prebuilds#workspace-directory-only)\n> - User specific environment variables are not loaded automatically for `init` and `before` tasks but can be loaded if you want. [Learn more](/docs/configure/projects/prebuilds#user-specific-environment-variables-in-prebuilds)","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/tasks","loc":{"lines":{"from":36,"to":39}}}}],["1552",{"pageContent":"Prebuild and New Workspaces\n\nIn this startup scenario, you can see how Prebuilds impact the execution order of tasks:\n\n![Start tasks for Prebuilds & New Workspace](../../../static/images/docs/beta/configure/start-tasks/prebuilds-new-workspace-light-theme.png)\n![Start tasks for Prebuilds & New Workspace](../../../static/images/docs/beta/configure/start-tasks/prebuilds-new-workspace-dark-theme.png)\n\nThe `init` task is where you want to do the heavy lifting, things like:\n\n- Download & install dependencies\n- Compile your source code\n- Run your test suite\n- Any other long-running, terminating processes necessary to prepare your project\n\nAs displayed in the diagram above, we highly recommend you enable Prebuilds for your project. In that case, Gitpod executes the `before` and most importantly, `init` tasks automatically for each new commit to your project.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/tasks","loc":{"lines":{"from":41,"to":55}}}}],["1553",{"pageContent":"By the time you start a new workspace, all that's left to do is execute the `before` (optional) and `command` tasks. The latter most often starts a database and/or development server.\n\n> Let Gitpod run the time-consuming `init` tasks continuously behind the scene so you and anyone who opens your project on Gitpod doesn't have to wait.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/tasks","loc":{"lines":{"from":57,"to":59}}}}],["1554",{"pageContent":"Restart a Workspace\n\nWhen you restart a workspace, Gitpod already executed the `init` task ([see above](#prebuild-and-new-workspaces)) either as part of a Prebuild or when you started the workspace for the first time.\n\nAs part of a workspace restart, Gitpod executes the `before` and `command` tasks:\n\n![Restart a workspace](../../../static/images/docs/beta/configure/start-tasks/restart-workspace-light-theme.png)\n![Restart a workspace](../../../static/images/docs/beta/configure/start-tasks/restart-workspace-dark-theme.png)","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/tasks","loc":{"lines":{"from":61,"to":68}}}}],["1555",{"pageContent":"Start a Snapshot\n\nWhen you start a snapshot, Gitpod already executed the `init` task ([see above](#prebuild-and-new-workspaces)) either as part of a Prebuild or when you or a team member started the snapshot's initial workspace for the first time.\n\nAs part of starting a snapshot, Gitpod executes the `before` and `command` tasks:\n\n![Start a snapshot](../../../static/images/docs/beta/configure/start-tasks/start-snapshot-light-theme.png)\n![Start a snapshot](../../../static/images/docs/beta/configure/start-tasks/start-snapshot-dark-theme.png)","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/tasks","loc":{"lines":{"from":70,"to":77}}}}],["1556",{"pageContent":"Configure the terminal\n\nYou can configure where terminals open using the `openMode` properties below.\nPlease note that this information is used if no previous terminals in the layout exist.\nSnapshots will first try to reuse existing terminals in the layout, before opening new ones.\n\n```yaml\ntasks:\n  - name: Static Server\n    command: python3 -m http.server 8080\n  - name: DB Server\n    command: sh ./scripts/start-db.sh\n    openMode: split-right\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/tasks","loc":{"lines":{"from":79,"to":92}}}}],["1557",{"pageContent":"openMode\n\nYou can configure how the terminal should be opened relative to the previous task.\n\n<div class=\"overflow-x-auto\">\n\n| openMode                 | Description                                                |\n| ------------------------ | ---------------------------------------------------------- |\n| `openMode: tab-after`    | Opens in the same tab group right after the previous tab   |\n| `openMode: tab-before`   | Opens in the same tab group left before the previous tab   |\n| `openMode: split-right`  | Splits and adds the terminal to the right                  |\n| `openMode: split-left`   | Splits and adds the terminal to the left                   |\n| `openMode: split-top`    | **Deprecated**. Splits and adds the terminal to the top    |\n| `openMode: split-bottom` | **Deprecated**. Splits and adds the terminal to the bottom |\n\n</div>","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/tasks","loc":{"lines":{"from":94,"to":109}}}}],["1558",{"pageContent":"Example Tasks\n\nThe examples below are common use cases you can get inspired by and adjust for your project's needs.\n\n> **Note**: `before` and `init` tasks need to terminate while `command` can run indefinitely (i.e. until cancelled with Ctrl + C). This is because `before` and `init` may run as part of a prebuild and if these tasks do not terminate, the prebuild will eventually fail with a timeout.\n\n### One-line tasks\n\nEach task contains a single `npm` command. The `init` task terminates once the dependencies are installed while the `command` task starts a development server and does not terminate.\n\n```yaml\ntasks:\n  - name: Dev Server\n    init: npm install\n    command: npm run dev\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/tasks","loc":{"lines":{"from":111,"to":126}}}}],["1559",{"pageContent":"Multi-line tasks\n\nTo run multiple commands for a given task, you can use the `|` notation where each line below (make sure you indent correctly) runs in sequence once the previous command terminates.\n\nIn the following example, the `init` task installs dependencies and configures a database. Then, the `command` task starts the dev server(s).\n\n> **Note**: In case of multiple terminals, there is no guarantee on the order in which tasks execute. The only guarantee you have is that `before`, `init` and `command` execute in that sequence **per terminal**.\n\n```yaml\ntasks:\n  - name: Dependencies & Database\n    init: |\n      npm install\n      npm run configure-database\n    command: npm run dev\n```\n\n> **Note**: This doesn't stop execution on errors. If `npm install` in the example above fails, the `npm run configure-database` will still run. See [how to exit after failure](#immediately-exit-for-any-command-failure-within-a-task) below for a workaround.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/tasks","loc":{"lines":{"from":128,"to":145}}}}],["1560",{"pageContent":"Wait for commands to complete\n\nWhen working with multiple terminals, you may have a situation where terminal 1 runs build scripts and terminal 2 and 3 require that these scripts complete first. This can be achieved with [`gp sync-await`](/docs/references/gitpod-cli#sync-await) and [`gp sync-done`](/docs/references/gitpod-cli#sync-done).\n\n```yaml\ntasks:\n  - name: Rails\n    init: >\n      bundle install &&\n      yarn install --check-files &&\n      rails db:setup &&\n      gp sync-done bundle # 'bundle' is an arbitrary name\n    command: rails server\n\n  - name: Webpack\n    init: gp sync-await bundle # wait for the above 'init' to finish\n    command: bin/webpack-dev-server\n\n  - name: Redis\n    init: gp sync-await bundle\n    command: redis-server\n\n  - name: Sidekiq\n    init: gp sync-await bundle\n    command: sidekiq\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/tasks","loc":{"lines":{"from":147,"to":172}}}}],["1561",{"pageContent":"Wait for a port to be available\n\nLet's say you have a web app dev server that takes a moment to start up to listen on port 3000. Once it's up and running, you want to run end-to-end tests against `http://localhost:3000`.\n\nYou can achieve this with two terminals and the `gp ports await` CLI command.\n\n```yaml\ntasks:\n  - name: Dev Server\n    init: npm install\n    command: npm run dev\n\n  - name: e2e Tests\n    command: |\n      gp ports await 3000\n      npm run test\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/tasks","loc":{"lines":{"from":174,"to":190}}}}],["1562",{"pageContent":"Immediately exit for any command failure within a task\n\nIf you wish to halt an entire task with for an error within the task script, then you could do the following:\n\n```yaml\ntasks:\n  - init: |\n      (\n        set -e # Tells bash to immediately exit on failure off a command\n        bundle install\n        yarn install --frozen-lockfile\n        bundle exec rake\n        bundle exec nanoc compile\n      )","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/tasks","loc":{"lines":{"from":192,"to":205}}}}],["1563",{"pageContent":"Gitpod starts all your `tasks` inside separate `bash` (`$SHELL`) shells. Gitpod can only assert the exit status of the shell process of a task. Normally `bash` or other shells don't halt on a failure of a command unless you explicitly ask it to. `bash` only inherits the last exit status of a script run with it before it's own `exit`. Hence Gitpod can't determine if all of your commands inside the `init` task succeeded. To have that effect, you can put `set -e;` on top of task shell-commands and wrap your whole task-script with `()` to configure that particular task shell to halt and immediately exit with an error code for a failure of any command. This can be specially helpful for prebuilds (i.e `init` tasks)","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/tasks","loc":{"lines":{"from":208,"to":208}}}}],["1564",{"pageContent":"Missing examples?\n\nWe'd love to hear from you if you have specific questions or ideas for additional examples. Please click the following link to open a pre-configured GitHub issue: [Ask for a new Start Task example](https://github.com/gitpod-io/website/issues/new?title=[Start+Task+Example]&labels=documentation).","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/tasks","loc":{"lines":{"from":210,"to":212}}}}],["1565",{"pageContent":"---\nsection: workspaces\ntitle: Workspace classes\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Workspace classes\n\nWorkspace classes allow you to select the resources available to your workspaces.\n\nOn gitpod.io, the options are:\n\n- **Standard**: up to 4 cores, up to 8GB RAM, 30GB storage\n- **Large**: up to 8 cores, up to 16GB RAM, 50GB storage\n\nYou can override the default (Standard) workspace class in the [Gitpod project](/docs/configure/projects) settings for your repository.\n\n![Project Settings](../../../static/images/docs/project-settings.png)","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/workspace-classes","loc":{"lines":{"from":1,"to":21}}}}],["1566",{"pageContent":"Select a workspace class for your workspace\n\nYou can select workspace class directly from [Gitpod Dashboard](https://gitpod.io/workspaces). You can do that from by clicking on the `New Workspace` button. Then, you can select the [context url](/docs/introduction/learn-gitpod/context-url) and [Editor](/docs/references/ides-and-editors).\n\n<figure>\n<video onloadstart=\"this.playbackRate = 1.5;\" controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-2xl mt-x-small\" alt=\"Start Gitpod new workspace with options\" src=\"/images/docs/new-workspace-start-with-options.webm\" type=\"video/webm\"></video>\n    <figcaption>Open New Gitpod Workspace with required workspace class • <a href=\"https://gitpod.io/workspaces\">Gitpod Dashboard</a></figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/workspace-classes","loc":{"lines":{"from":23,"to":30}}}}],["1567",{"pageContent":"Good to know\n\n- Large workspace classes use [credits](/docs/configure/billing#credits) at a faster rate. Standard workspaces use 10 credits per hour, whereas Large workspaces use 20 credits per hour.\n- [Prebuilds](/docs/configure/projects/prebuilds) currently use the same workspace class as regular workspaces.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/workspace-classes","loc":{"lines":{"from":32,"to":35}}}}],["1568",{"pageContent":"FAQs\n\n### [How to select Large workspace type for extended storage and CPU](https://discord.com/channels/816244985187008514/1061902096389111849)\n\n<!-- DISCORD_BOT_FAQ - DO NOT REMOVE -->\n\nCreate a team [project](/docs/configure/projects) on Gitpod, from the project settings you can select a large workspace.\n\n### [Is it possible to build (android) AOSP source on Gitpod?](https://discord.com/channels/816244985187008514/1055454782908792843)\n\n<!-- DISCORD_BOT_FAQ - DO NOT REMOVE -->\n\nIt is not quite feasible to build an entire AOSP tree right now due to current storage capacity limitations. Please react with a \"👍\" on https://github.com/gitpod-io/gitpod/issues/13950 and comment your requirements.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/workspace-classes","loc":{"lines":{"from":37,"to":49}}}}],["1569",{"pageContent":"---\nsection: workspaces\ntitle: Workspace Image\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Workspace Image\n\nBy default, Gitpod uses a standard Docker Image called [`Workspace-Full`](https://github.com/gitpod-io/workspace-images/blob/481f7600b725e0ab507fbf8377641a562a475625/dazzle.yaml#L18) as the foundation for workspaces. Workspaces started based on this default image come pre-installed with Docker, Nix, Go, Java, Node.js, C/C++, Python, Ruby, Rust, Clojure as well as tools such as Homebrew, Tailscale, Nginx and several more.\n\nIf this image does not include the tools you need for your project, you can provide a public Docker image or your own [Dockerfile](#configure-a-custom-dockerfile). This provides you with the flexibility to install the tools & libraries required for your project.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/workspace-image","loc":{"lines":{"from":1,"to":14}}}}],["1570",{"pageContent":"> **Note:** Gitpod supports Debian/Ubuntu based Docker images. Alpine images do not include [libgcc and libstdc++](https://code.visualstudio.com/docs/remote/linux#_tips-by-linux-distribution) which breaks Visual Studio Code. See also [Issue #3356](https://github.com/gitpod-io/gitpod/issues/3356).","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/workspace-image","loc":{"lines":{"from":16,"to":16}}}}],["1571",{"pageContent":"Configuring a Workspace Image\n\n### Use a public Docker image\n\nYou can define a public Docker image in your `.gitpod.yml` file with the following configuration:\n\n```yaml\nimage: node:buster\n```\n\nThe official Gitpod Docker images are hosted on <a href=\"https://hub.docker.com/u/gitpod/\" target=\"_blank\">Docker Hub</a>.\n\nYou can find the source code for these images in <a href=\"https://github.com/gitpod-io/workspace-images/\" target=\"_blank\">this GitHub repository</a>.\n\n**Docker image tags**\n\nFor public images, feel free to specify a tag, e.g. `image: node:buster` if you are interested in a particular version of the Docker image.\n\nFor Gitpod images, we recommend using timestamped tag for maximum reproducibility, for example `image: gitpod/workspace-full:2022-05-08-14-31-53` (taken from the `Tags` panel on [this dockerhub page](https://hub.docker.com/r/gitpod/workspace-full/tags) for example)","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/workspace-image","loc":{"lines":{"from":18,"to":36}}}}],["1572",{"pageContent":"Use a private Docker image\n\n> This is currently in [Alpha](/docs/help/public-roadmap/release-cycle).\n\nYou may also use private Docker images.\n\nTo do so you must provide the registry authentication details to Gitpod by setting `GITPOD_IMAGE_AUTH` with the following value `<registry-domain>:<base64-encoded 'username:password'>` as a [Project-level environment variable](/docs/configure/projects/environment-variables#project-specific-environment-variables).\n\nFor example, if the registry is `docker.io`, the username is `foo` and the password is `bar`, the `GITPOD_IMAGE_AUTH` environment variable value may be calculated using the command `echo -n \"docker.io:\"; echo -n \"foo:bar\" | base64 -w0` which outputs `docker.io:Zm9vOmJhcg==`.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/workspace-image","loc":{"lines":{"from":38,"to":46}}}}],["1573",{"pageContent":"Using a custom Dockerfile\n\nThis option provides you with the most flexibility. Start by adding the following configuration in your `.gitpod.yml` file:\n\n```yaml\nimage:\n  file: .gitpod.Dockerfile\n```\n\nNext, create a `.gitpod.Dockerfile` file at the root of your project. The syntax is the regular `Dockerfile` syntax as <a href=\"https://docs.docker.com/engine/reference/builder/\" target=\"_blank\">documented on docs.docker.com</a>.\n\nA good starting point for creating a custom `.gitpod.Dockerfile` is the\n<a href=\"https://github.com/gitpod-io/workspace-images/blob/481f7600b725e0ab507fbf8377641a562a475625/dazzle.yaml#L18\" target=\"_blank\">gitpod/workspace-full</a> image as it already contains all the tools necessary to work with all languages Gitpod supports.\n\n```dockerfile\n# You can find the new timestamped tags here: https://hub.docker.com/r/gitpod/workspace-full/tags\nFROM gitpod/workspace-full:2022-05-08-14-31-53\n\n# Install custom tools, runtime, etc.\nRUN brew install fzf","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/workspace-image","loc":{"lines":{"from":48,"to":67}}}}],["1574",{"pageContent":"> ⚠️ **Caveat:** > `COPY` instructions in a Dockerfile is only evaluated once and then cached.\n> [See this](#manually-rebuild-a-workspace-image) to break the cache and trigger a rebuild.\n\n> ⚠️ **Caveat:** The base image of a custom Dockerfile must be public.\n\n**Docker support**: If you use the `gitpod/workspace-full` image, you get Docker support built-in to your environment.\n\nIf you want a base image without the default tooling installed then use the <a href=\"https://github.com/gitpod-io/workspace-images/blob/481f7600b725e0ab507fbf8377641a562a475625/dazzle.yaml#L3\" target=\"_blank\">gitpod/workspace-base</a> image.\n\n```dockerfile\n# You can find the new timestamped tags here: https://hub.docker.com/r/gitpod/workspace-base/tags\nFROM gitpod/workspace-base:2022-05-08-14-31-53","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/workspace-image","loc":{"lines":{"from":70,"to":81}}}}],["1575",{"pageContent":"```dockerfile\n# You can find the new timestamped tags here: https://hub.docker.com/r/gitpod/workspace-base/tags\nFROM gitpod/workspace-base:2022-05-08-14-31-53\n\n# Install custom tools, runtime, etc.\n# base image only got `apt` as the package manager\n# install-packages is a wrapper for `apt` that helps skip a few commands in the docker env.\nRUN sudo install-packages shellcheck tree llvm","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/workspace-image","loc":{"lines":{"from":81,"to":88}}}}],["1576",{"pageContent":"When you launch a Gitpod workspace, the local console will use the `gitpod` user, so all local settings, config file, etc. should apply to `/home/gitpod` or be run using `USER gitpod` (we no longer recommend using `USER root`).\n\nYou can however use `sudo` in your Dockerfile. The following example shows a typical `.gitpod.Dockerfile` inheriting from `gitpod/workspace-full`:\n\n```dockerfile\n# You can find the new timestamped tags here: https://hub.docker.com/r/gitpod/workspace-full/tags\nFROM gitpod/workspace-full:2022-05-08-14-31-53\n\n# Install custom tools, runtime, etc.\n# install-packages is a wrapper for `apt` that helps skip a few commands in the docker env.\nRUN sudo install-packages \\\n          binwalk \\\n          clang \\\n          tmux\n\n# Apply user-specific settings","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/workspace-image","loc":{"lines":{"from":91,"to":106}}}}],["1577",{"pageContent":"Once committed and pushed, Gitpod will automatically build this Dockerfile when (or [before](/docs/configure/projects/prebuilds)) new workspaces are created.\n\nSee also [Gero's blog post](/blog/docker-in-gitpod) running through an example.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/workspace-image","loc":{"lines":{"from":109,"to":111}}}}],["1578",{"pageContent":"Custom base image\n\nWhile it is recommended to extend one of the <a href=\"https://hub.docker.com/u/gitpod/\" target=\"_blank\">Gitpod-provided base images</a> for custom Dockerfiles to ensure the image has the required dependencies for a workspace, it is possible to configure a Dockerfile with a public (Debian/Ubuntu-based) image as its base.\n\nThere are some requirements though for a public base image to work properly as a workspace. See the below Dockerfile as a reference. For instance, you'll need to set up the `gitpod` user with the right UID, and install `git` to enable your configured dotfiles for the workspace.\n\n```dockerfile\nFROM ubuntu:latest","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/workspace-image","loc":{"lines":{"from":113,"to":120}}}}],["1579",{"pageContent":"```dockerfile\nFROM ubuntu:latest\n\n# Install:\n# - git (and git-lfs), for git operations (to e.g. push your work).\n#   Also required for setting up your configured dotfiles in the workspace.\n# - sudo, while not required, is recommended to be installed, since the\n#   workspace user (`gitpod`) is non-root and won't be able to install\n#   and use `sudo` to install any other tools in a live workspace.\nRUN apt-get update && apt-get install -yq \\\n    git \\\n    git-lfs \\\n    sudo \\\n    && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/*\n\n# Create the gitpod user. UID must be 33333.\nRUN useradd -l -u 33333 -G sudo -md /home/gitpod -s /bin/bash -p gitpod gitpod\n\nUSER gitpod","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/workspace-image","loc":{"lines":{"from":120,"to":138}}}}],["1580",{"pageContent":"**Additional tools & languages:** see https://github.com/gitpod-io/workspace-images/tree/main/chunks for references to configure your workspace image with common tools and languages. For instance, [this Dockerfile](https://github.com/gitpod-io/workspace-images/blob/main/chunks/tool-docker/Dockerfile) shows how to install `docker` and `docker-compose`.\n\n**Tailscale:** see [the Tailscale integration docs](/docs/integrations/tailscale#integration) for setting up Tailscale in a custom Dockerfile.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/workspace-image","loc":{"lines":{"from":141,"to":143}}}}],["1581",{"pageContent":"Validate and apply a workspace image\n\nTo validate your workspace image is working execute the `gp validate` command from within the workspace with your configuration changes. For the configuration change to apply for all new workspaces you must commit and push your configuration to source control.\n\nFor a full guide, see [Configuring Workspaces](/docs/configure/workspaces).\n\n## Manually rebuild a workspace image\n\nIf you want to force a rebuild of the image associated with a repository,\n\nSometimes you find yourself in situations where you want to manually rebuild a workspace image, for example if packages you rely on released a security fix.\n\nYou can trigger a workspace image rebuild with the following URL pattern: `https://gitpod.io/#imagebuild/<your-repo-url>`.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/workspace-image","loc":{"lines":{"from":145,"to":157}}}}],["1582",{"pageContent":"Configure a custom shell\n\n> **Feedback needed**: Custom shell support is in the works. The below shows a method for running some of the `~/.bashrc.d` startup scripts. To leave feedback on the approach, please see this GitHub issue: [#10105](https://github.com/gitpod-io/gitpod/issues/10105).\n\nFor example, if you wish to default your workspace-image to `zsh`, you could do it from your [custom dockerfile](#custom-docker-image) with the following line:\n\n```dockerfile\nENV SHELL=/usr/bin/zsh\n```\n\nTip: You could also create an environment variable at https://gitpod.io/variables called `SHELL` with `*/*` scope for setting a personal default SHELL.\n\nCaveat: Shells like `fish`, `zsh` and etc. are not POSIX-compliant or bash-compatible, so your Gitpod tasks might error if you use some POSIX or bash specific features in your task scripts.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/workspace-image","loc":{"lines":{"from":159,"to":171}}}}],["1583",{"pageContent":"Load bash environment in custom shell\n\nCurrently we put some startup scripts for the workspace-images at `~/.bashrc.d`, that means if you change your SHELL from `bash` to something else, they will not auto run. You could run the following command from your SHELL to workaround:\n\n```bash\nbash -lic 'true'\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/workspace-image","loc":{"lines":{"from":173,"to":179}}}}],["1584",{"pageContent":"FAQs","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/workspace-image","loc":{"lines":{"from":181,"to":181}}}}],["1585",{"pageContent":"[Why is my custom dockerfile rebuilding everytime even with no change made to it?](https://discord.com/channels/816244985187008514/1069452552111923280)\n\n<!-- DISCORD_BOT_FAQ - DO NOT REMOVE -->\n\nThis usually happens when you don't pin the image tag (AKA version) inside your [custom dockerfile](#use-a-custom-dockerfile).\n\nIn such cases, it could be that there has been long gaps between the time you reuse a workspace or create a new one. We usually release new images every week so if there was more than one week between each start then the image will be rebuild every time.\n\nSo, for example, if your `.gitpod.Dockerfile` looks like the following:\n\n```dockerfile\nFROM gitpod/workspace-full:latest\n\n# ... more stuff\n```\n\nYou could grab a timestamped tag from [here](https://hub.docker.com/r/gitpod/workspace-full/tags) for `gitpod/workspace-full`.\n\nAnd then your `.gitpod.Dockerfile` could look like:\n\n```dockerfile\nFROM gitpod/workspace-full:2023-01-16-03-31-28\n\n# ... more stuff","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/workspace-image","loc":{"lines":{"from":183,"to":206}}}}],["1586",{"pageContent":"Note: Please grab a recent tag from the linked page, don't copy paste the example from here.\n\nAlso see [docker-image-tags](#docker-image-tags) for more info.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/workspace-image","loc":{"lines":{"from":209,"to":211}}}}],["1587",{"pageContent":"[How to run a Desktop app for GUI development inside a Gitpod workspace](https://discord.com/channels/816244985187008514/1069538137572909106)\n\n<!-- DISCORD_BOT_FAQ - DO NOT REMOVE -->\n\nIf you wish to do GUI application development in Gitpod and getting errors such as:\n\n- Unable to init server: Could not connect : Connection refused\n- No display server running\n- Xorg missing\n- `xdg-open` command not found\n\nThen you need to use the `gitpod/workspace-full-vnc` docker image. See [this page](https://github.com/gitpod-io/workspace-images/blob/axonasif/add_docs/chunks/tool-vnc/README.md#details) for more info.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/workspace-image","loc":{"lines":{"from":213,"to":224}}}}],["1588",{"pageContent":"---\nsection: workspaces\ntitle: Workspace Lifecycle\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Workspace Lifecycle\n\nGitpod brings a new way to think about your development environment. Rather than a single local environment that you keep up-to-date, with Gitpod you can have as many [workspaces](/docs/configure/workspaces) as you need.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/workspace-lifecycle","loc":{"lines":{"from":1,"to":12}}}}],["1589",{"pageContent":"Workspace Statuses\n\nThe state of the workspace is indicated by the color of the workspace indicator. For example, in the Gitpod [dashboard](https://gitpod.io/workspaces), workspace state is shown on the workspace list.\n\n1. 🟠 **Starting** - Workspace provisioning, inaccessible to the user.\n2. 🟢 **Running** - Workspace loaded, accessible to the user.\n3. 🟠 **Stopping** - Workspace being stopped, backups performing.\n4. 🔴 **Stopped** - Workspace no longer accessible. File system preserved for restart.\n\n> **Important:**\n> - Only files in the `/workspace` directory are kept between state transitions.\n> - Any changes made to `/workspace` from a [custom Dockerfile](/docs/configure/workspaces/workspace-image#use-a-custom-dockerfile) will be overwritten/overlaid by a mount.\n\nThe following describes each workspace status in detail, including what can cause a workspace to transition from one status to another.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/workspace-lifecycle","loc":{"lines":{"from":14,"to":27}}}}],["1590",{"pageContent":"Workspace Starting\n\nWhen you open a workspace, it will be in the \"starting\" state. This means that the workspace is being created and the initialization process is running.\n\n- Where a workspace is being provisioned and initialized.\n- If configured and available, a prebuild snapshot is used.\n- Otherwise, source control is downloaded into the workspace.\n\n### Workspace Running\n\n- An active workspace is provisioned within Gitpod.\n- The workspace can be accessed by the user.\n\n### Workspace Stopped\n\n- No provisioned workspace is running (e.g. ports and URLs are not accessible).\n- Only files and directories inside `/workspace` are preserved.\n- If the workspace is restarted, the URL is preserved.\n- A start is required before the workspace can be used.\n\n### Workspace Deleted\n\nWorkspaces are deleted after 14 days. Pinned workspaces are never deleted automatically.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/workspace-lifecycle","loc":{"lines":{"from":29,"to":51}}}}],["1591",{"pageContent":"Workspace Actions\n\n### Workspace Pinning\n\nA pinned workspace is never deleted. You can pin a workspace from your [workspace list](https://gitpod.io/workspaces/) in the Gitpod dashboard.\n\n### Workspace Snapshotting\n\nYou can create a snapshot of a workspace to save its state. This is useful if you want to keep a workspace around for a longer period of time, than the default. Read more about [Snapshots](/docs/configure/workspaces/collaboration).\n\n## Workspace Deletion\n\nStopped workspaces are automatically deleted 14 days since the last workspace start. Pinned workspaces are never deleted. You can pin a workspace from your [workspace list](https://gitpod.io/workspaces/) in the Gitpod dashboard.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/workspace-lifecycle","loc":{"lines":{"from":53,"to":65}}}}],["1592",{"pageContent":"Workspace Timeouts\n\nRunning workspaces stop automatically after a period of inactivity.\n\n### Workspace Inactivity\n\nBy default, workspaces stop following 30 minutes without user input (e.g. keystrokes or terminal input commands). You can increase the workspace timeout up to a maximum of 24 hours.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/workspace-lifecycle","loc":{"lines":{"from":67,"to":73}}}}],["1593",{"pageContent":"Extend Inactivity Timeouts\n\n> Free plan users cannot update their default workspace inactivity timeout (see [pricing](https://www.gitpod.io/pricing)).\n\n**Current workspace** - You can extend the inactivity timeout of their current workspace using the `gp timeout set` command from the [Gitpod CLI](/docs/references/gitpod-cli) (installed in all gitpod workspaces by default), through the Command Palette in VS Code, or the Backend Control Center in JetBrains Gateway. Extending the workspace inactivity timeout only applies to the currently running workspace.\n\n**Default** - You can set a default workspace inactivity timeout for all new workspaces opened via the [preferences page](https://gitpod.io/preferences). The timeout default cannot currently be set by an organization owner.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/workspace-lifecycle","loc":{"lines":{"from":75,"to":81}}}}],["1594",{"pageContent":"Editor or IDE Disconnect\n\nAll inactivity timeouts are dependent on an active editor or IDE connection. Closing your Gitpod connected editor or IDE will reduce the workspace timeout to 5 minutes unless an explicit workspace inactivity timeout is set via user preference, or via the Gitpod CLI.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/workspace-lifecycle","loc":{"lines":{"from":83,"to":85}}}}],["1595",{"pageContent":"---\nsection: help/contribute\ntitle: Contribute\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Contribute\n\nThe team behind Gitpod has built in the open for the last decade. Transparency is key and as a company Gitpod strives to be as open about as many things as possible. This refers to both developing Gitpod in the open (public issues, public roadmap, public milestones) as well as how employees interact on a personal level with other human beings. Gitpodders are strong believers in the benefits that an open culture provides. At Gitpod we are open-minded, inclusive, transparent, and curious. We always remain students of the game, not masters of the game.\n\n`youtube: KcSeDGSMexs`\n\nWe 🧡 the people who are involved in this project, and we’d love to have you on board, especially if you are just getting started or have never contributed to open-source before. So here's to you, lovely person who wants to join us — this is how you can support us:","metadata":{"source":"https://www.gitpod.io/docs/help/contribute","loc":{"lines":{"from":1,"to":16}}}}],["1596",{"pageContent":"- [Contribute to Gitpod Samples](https://github.com/gitpod-samples#-welcome-to-gitpod-samples)\n- [Participating in the Gitpod Discord community](https://www.gitpod.io/chat).\n- [Responding to questions on StackOverflow](https://stackoverflow.com/questions/tagged/gitpod).\n- [Creating content that shares your experiences with Gitpod](contribute/content)\n- [Using the feedback widget at the bottom of each page in our documentation](contribute/documentation).\n- [Submitting documentation updates when you learn something that you think other developers would also benefit from](contribute/documentation).\n- [Making contributions to the code base](contribute/features-and-patches).","metadata":{"source":"https://www.gitpod.io/docs/help/contribute","loc":{"lines":{"from":18,"to":24}}}}],["1597",{"pageContent":"---\nsection: user-settings\ntitle: Access Tokens\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Access Tokens\n\n> Access Tokens are currently in [Beta](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/14280).\n\nAccess Tokens are secrets that allow you to interact with Gitpod through Gitpod APIs. When you use an Access Token, all actions performed with the token assume the same level of authorization of the Access Token user.\n\n![Create Access Token](../../../static/images/docs/access-token-create.png)\n\n## Permissions (Scopes)\n\nEach Access Token either has:\n\n- No Access.\n- Full Access to Resources and APIs which the token owner also has access to.\n\nBy default, an Access Token has **No Access**. You need to explicitly select Full Access to succesfully authorize.\n\nIn the future, we will expand Access Tokens with fine grained permissions.","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/access-tokens","loc":{"lines":{"from":1,"to":27}}}}],["1598",{"pageContent":"Expiration\n\nAll Access Tokens have an expiration time. When a token expires, requests made with the token will fail with Unathorized. When a token expires, you can [regenerate](#regenerating-access-tokens) it.\n\n## Managing Access Tokens\n\n### Listing Access Tokens\n\nYou can list your Access Tokens in your user Settings, or by going to [gitpod.io/tokens](https://gitpod.io/tokens).\n\n![List Access Tokens](../../../static/images/docs/access-token-list.png)\n\n### Creating an Access Token\n\nYou can create an Access Token by navigating to [gitpod.io/tokens](https://gitpod.io/tokens) or through Settings > Access Tokens. Clicking **New Access Token** will prompt you to specify details of the token.\n\n- Your access tokens will automatically expire after the specified duration.\n- Once you create an Access Token, it will be shown to you **once**. Make sure you store it in a secure place, you will not be able to retrieve it again.","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/access-tokens","loc":{"lines":{"from":29,"to":46}}}}],["1599",{"pageContent":"Updating an Access Token\n\nAccess Token can be updated. You can update the following properties on a token:\n\n- Name\n- Permission scopes\n\nWhen you update a token, the token secret remains unaffected and you can continue to use it, until it expires.\n\n## Regenerating Access Tokens\n\nAccess Token can be regenerated. Regenerating a token will:\n\n- Create a new token secret, which you'll need to store in a secure place and replace your old one.\n- The new token will have a new expiration time.\n- The old token will no longer be valid and will receive Unathorized when interacting with APIs.\n\n## Deleting Access Tokens\n\nPersonal Access token can be deleted. Once deleted, the token is no longer valid for interaction with APIs.","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/access-tokens","loc":{"lines":{"from":48,"to":67}}}}],["1600",{"pageContent":"---\nsection: user-settings\ntitle: Browser Bookmarklet\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Browser Bookmarklet\n\nCreating a workspace is as easy as prefixing any GitHub URL with `gitpod.io/#`.\n\nFor convenience, we developed a Gitpod browser bookmarklet as an alternative to [installing our browser extension](/docs/configure/user-settings/browser-extension) that does the\nprefixing for you - as simple as that.\n\n1. Drag the following image to your bookmark bar.\n\n![Open in Gitpod](../../../static/images/docs/browser-bookmarklet.png)\n\n2. Select all of the code below and then copy it to your clipboard.","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/browser-bookmarklet","loc":{"lines":{"from":1,"to":21}}}}],["1601",{"pageContent":"1. Drag the following image to your bookmark bar.\n\n![Open in Gitpod](../../../static/images/docs/browser-bookmarklet.png)\n\n2. Select all of the code below and then copy it to your clipboard.\n\n```javascript\njavascript: (() => {\n  \"use strict\";\n  (function () {\n    for (\n      var t = document.getElementsByTagName(\"meta\"), n = 0;\n      n < t.length;\n      n++\n    ) {\n      var o = t[n];\n      if (o.content.toLowerCase().includes(\"gitlab\")) return !0;\n      if (\"hostname\" === o.name && o.content.includes(\"github\")) return !0;\n      if (\n        \"application-name\" === o.name &&\n        o.content.toLowerCase().includes(\"bitbucket\")\n      )\n        return !0;\n    }\n    return !1;\n  })() &&\n    window.open(\n      (\"https://gitpod.io\",\n      \"https://gitpod.io/#\" +\n        (window.location.protocol + \"//\" + window.location.host) +\n        window.location.pathname)\n    );\n})();","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/browser-bookmarklet","loc":{"lines":{"from":21,"to":53}}}}],["1602",{"pageContent":"3. Right-click edit the bookmark and replace the contents of the URL field with the code that is in your clipboard:\n\n![Browser Extension](../../../static/images/docs/browser-bookmarklet-edit.png)\n\n4. Done! Next time you are viewing a repository on GitHub, GitLab or Bitbucket press the bookmarklet to open the repository in Gitpod.","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/browser-bookmarklet","loc":{"lines":{"from":56,"to":60}}}}],["1603",{"pageContent":"Use with Gitpod Self-Hosted\n\nIf you are using Gitpod Self-Hosted you can still use the browser bookmarklet by configuring it with your self-hosted URL by replacing the `gitpod.io` URL with your self-hosted URL in the bookmarklet code.\n\n```javascript\nwindow.open((\"https://gitpod.io\",\"https://gitpod.io/#\n```\n\n## Source Code\n\nGitpod's browser bookmarklet is open source. You can check out its [source code](https://github.com/gitpod-io/browser-bookmarklet), or even open it in Gitpod:\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-io/browser-bookmarklet)","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/browser-bookmarklet","loc":{"lines":{"from":62,"to":74}}}}],["1604",{"pageContent":"---\nsection: user-settings\ntitle: Browser Extension\n---\n\n<script context=\"module\">\n  export const prerender = true;\n  import Keybind from \"$lib/components/keybind.svelte\";\n</script>\n\n# Browser Extension\n\nCreating a workspace is as easy as prefixing any GitHub URL with `gitpod.io/#`.\n\nFor convenience, we developed a Gitpod browser extension. It adds a button to GitHub, GitLab or Bitbucket that does the\nprefixing for you - as simple as that.\n\n![Browser Extension](../../../static/images/docs/browser-extension-lense.png)\n\nWe provide the extension for:\n\n- [Chrome](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) - also works for Edge, Brave and other Chromium-based browsers.\n- [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/)","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/browser-extension","loc":{"lines":{"from":1,"to":23}}}}],["1605",{"pageContent":"Access the extension settings\n\n1. Right-click on the Gitpod extension icon.\n2. Select `Options` for chrome based browsers. For Firefox, select `Manage Extension` and then `Preferences`.\n\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Gitpod browser extension configuration\" src=\"/images/docs/beta/integrations/new-browser-extension-options.png\">\n\n## Use a custom Gitpod instance URL\n\nIf you are using custom Gitpod instance (e.g. [dedicated](https://www.gitpod.io/dedicated)) you can still use the browser extension by configuring it with your instance URL\n\nAfter you have installed the extension go to the options panel and enter your custom Gitpod instance URL.\n\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Gitpod browser extension configuration\" src=\"/images/docs/beta/integrations/browser-extension-options.png\">","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/browser-extension","loc":{"lines":{"from":25,"to":38}}}}],["1606",{"pageContent":"Open repositories with <Keybind>.</Keybind> (dot) keybind\n\nToggle on the `Enable . keybind to open repositories in Gitpod` option in the Gitpod extension [preferences/options](#accessing-the-extension-optionspreferences). After doing this, whenever you hit <Keybind>.</Keybind> on GitHub or GitLab, the current repository will open in Gitpod.\n\n## Source Code\n\nGitpod's browser extension is open source. You can check out its [source code](https://github.com/gitpod-io/browser-extension), or even open it in Gitpod:\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-io/browser-extension)","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/browser-extension","loc":{"lines":{"from":40,"to":48}}}}],["1607",{"pageContent":"---\nsection: user-settings\ntitle: Browser settings\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Browser Settings\n\nFor the best experience when working with Gitpod, we recommend you whitelist the `.gitpod.io` domain in your browser for the following permissions:\n\n- Paste content from your clipboard to a Gitpod workspace\n- Pop-ups, to preview your dev server in a new tab\n\nEach browser handles this slightly differently:\n\n- [Chrome](#chrome)\n- [Edge](#edge)\n- [Brave](#brave)\n- [Firefox](#firefox)\n- [Safari](#safari)","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/browser-settings","loc":{"lines":{"from":1,"to":23}}}}],["1608",{"pageContent":"Chrome\n\n### Clipboard\n\n1. Navigate to the Clipboard site permissions at [chrome://settings/content/clipboard](chrome://settings/content/clipboard).\n1. To the right of the \"Allowed to see your clipboard\" heading, click the \"Add\" button.\n1. Paste `[*.]gitpod.io` in the _Site_ field and click \"Add\".\n\n### Pop-ups\n\n1. Navigate to the Pop-ups site permissions at [chrome://settings/content/popups](chrome://settings/content/popups).\n1. To the right of the \"Allowed to send pop-ups and use redirects\" heading, click the \"Add\" button.\n1. Paste `[*.]gitpod.io` in the _Site_ field and click \"Add\".","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/browser-settings","loc":{"lines":{"from":25,"to":37}}}}],["1609",{"pageContent":"Edge\n\n### Clipboard\n\n1. Navigate to the Clipboard site permissions at [edge://settings/content/clipboard](edge://settings/content/clipboard).\n1. To the right of the \"Allow\" heading, click the \"Add\" button.\n1. Paste `[*.]gitpod.io` in the _Site_ field and click \"Add\".\n\n### Pop-ups\n\n1. Navigate to the Pop-ups site permissions at [edge://settings/content/popups](edge://settings/content/popups).\n1. To the right of the \"All\" heading, click the \"Add\" button.\n1. Paste `[*.]gitpod.io` in the _Site_ field and click \"Add\".","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/browser-settings","loc":{"lines":{"from":39,"to":51}}}}],["1610",{"pageContent":"Brave\n\n### Clipboard\n\n1. Navigate to the Clipboard site permissions at [brave://settings/content/clipboard](brave://settings/content/clipboard).\n1. To the right of the \"Allowed to see your clipboard\" heading, click the \"Add\" button.\n1. Paste `[*.]gitpod.io` in the _Site_ field and click \"Add\".\n\n### Pop-ups\n\n1. Navigate to the Pop-ups site permissions at [brave://settings/content/popups](brave://settings/content/popups).\n1. To the right of the \"Allowed to send pop-ups and use redirects\" heading, click the \"Add\" button.\n1. Paste `[*.]gitpod.io` in the _Site_ field and click \"Add\".\n\n## Firefox\n\n### Clipboard\n\nIt works by default.\n\n### Pop-ups\n\n1. Navigate to the Pop-ups site permissions at [about:preferences#privacy](about:preferences#privacy).\n1. To the right of the \"Block pop-up windows\" checkbox, click the \"Exceptions\" button.\n1. Paste `gitpod.io` in the _Address of website_ field and click \"Allow\".\n1. Click \"Save Changes\".","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/browser-settings","loc":{"lines":{"from":53,"to":78}}}}],["1611",{"pageContent":"Safari\n\n### Clipboard\n\nIt works by default.\n\n### Pop-ups\n\n🤷‍♂️ We can't find a solution to whitelist all Gitpod workspaces. If we missed anything, please do let us know through the feedback widget below 🙏.","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/browser-settings","loc":{"lines":{"from":80,"to":88}}}}],["1612",{"pageContent":"---\nsection: user-settings\ntitle: Dotfiles\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Dotfiles\n\nDotfiles are a way to customize your developer environment according to your personal needs.\n\nTo configure Gitpod to use your own dotfiles for all your workspaces, enter the URL of a dotfiles repository in [your user preferences](https://gitpod.io/preferences).\n\n`youtube: 00dif9QWXNU`\n\n## Custom installation script\n\nGitpod will recognize and run one of the following install scripts from your dotfiles repository.\n\n- install.sh\n- install\n- bootstrap.sh\n- bootstrap\n- script/bootstrap\n- setup.sh\n- setup\n- script/setup\n\nNote: Your installation script will be terminated if it exceeds 120 seconds.\n\nMake sure to make your installation script executable with `chmod 755 <install-script-name>.sh` before committing and pushing to your dotfiles repository.\n\nIf there is no install script, your dotfiles will be symlinked into `/home/gitpod`.","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/dotfiles","loc":{"lines":{"from":1,"to":35}}}}],["1613",{"pageContent":"Example\n\n> You can refer this [demo-dotfiles template](https://github.com/gitpod-io/demo-dotfiles) to bring your dotfiles to Gitpod.\n\nThe example below has just one dotfile called `.bash_aliases`. If this file is present in a workspace home directory, it will be found by the '.bashrc' startup script in the Gitpod default image, so no additional install script is required.\n\n**.bash_aliases**\n\n```sh\necho Hello Gitpod\necho Here is my .bash_aliases dotfile\n\nalias gitsha='git rev-parse HEAD'\n```\n\n### Troubleshooting\n\nThe dotfiles repository installation logs are saved to `/home/gitpod/.dotfiles.log` and can be viewed via\n\n```bash\ncat /home/gitpod/.dotfiles.log\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/dotfiles","loc":{"lines":{"from":37,"to":58}}}}],["1614",{"pageContent":"FAQs","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/dotfiles","loc":{"lines":{"from":60,"to":60}}}}],["1615",{"pageContent":"How to debug or test dotfiles changes inside an existing workspace without creating a new one each time?\n\nIf you want to quickly test out dotfiles inside an existing workspace created from your `dotfiles` repository, you can run the below command snippet in your terminal as a workaround:","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/dotfiles","loc":{"lines":{"from":62,"to":64}}}}],["1616",{"pageContent":"```bash","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/dotfiles","loc":{"lines":{"from":64,"to":64}}}}],["1617",{"pageContent":"gitpod_evars=\"${!GITPOD_*}\" gp_evars=\"${!GP_*}\"; for k in ${gitpod_evars:-} ${gp_evars:-}; do dargs+=(-e \"${k}\"); done; docker run \"${dargs[@]}\" --net=host --rm -v $PWD:/home/gitpod/.dotfiles -v /workspace:/workspace -v /ide:/ide -v /usr/bin/gp:/usr/bin/gp:ro -v /.supervisor:/.supervisor -v /var/run/docker.sock:/var/run/docker.sock --privileged -it gitpod/workspace-full bash -c 'trap \"echo -e \\\"=== Run \\033[1;32mexit\\033[0m command to leave debug workspace\\\"; exec bash -li\" EXIT ERR; echo \"PROMPT_COMMAND=\\\"echo -n \\\\\\\"[debug-workspace] \\\\\\\"; \\$PROMPT_COMMAND\\\"\" >> $HOME/.bashrc; eval \"$(gp env -e)\"; dot_path=\"${HOME}/.dotfiles\"; for s in install setup bootstrap; do if p=\"${dot_path}/${s}\" && test -x \"${p}\" || p=\"${p}.sh\" && test -x \"${p}\"; then set +m; \"$p\"; set -m; exit; fi; done; while read -r file; do rf_path=\"${file#\"${dot_path}\"/}\"; target_file=\"${HOME}/${rf_path}\"; target_dir=\"${target_file%/*}\"; if test ! -d \"$target_dir\"; then mkdir -p \"$target_dir\"; fi; ln -sf \"$file\" \"$target_file\"; done < <(find \"${dot_path}\" -type f);'","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/dotfiles","loc":{"lines":{"from":75,"to":75}}}}],["1618",{"pageContent":"This will simulate a fake minimal workspace inside your existing Gitpod workspace using `docker`, where your dotfiles will be installed so you can easily test.\n\nFor convenience, you can create a file called `debug.sh` in your dotfiles repository and paste the snippet there. You could then run `bash debug.sh` to use it.","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/dotfiles","loc":{"lines":{"from":78,"to":80}}}}],["1619",{"pageContent":"How to install symlinks from dotfiles when using a [custom installation script](#custom-installation-script)?\n\nWhen you commit a custom script such as `install.sh` in your dotfiles repository, Gitpod will no longer auto symlink your dotfiles under `$HOME` for you. It is by design so that you can have full control of how your dotfiles gets installed. An example of setting up a symlinking step is described below:\n\n- Create a directory called `home_files` inside your dotfiles repository. You can place your .dotfiles in the `home_files` directory, that means you could put files like `.zshrc`, `.tmux.conf`, `.config/nvim/` and etc. in there.\n- In your [custom installation script](#custom-installation-script) (e.g. `install.sh`), use/append the below snippet:\n\n```bash\ncurrent_dir=\"$(cd -- \"$( dirname -- \"${BASH_SOURCE[0]}\" )\" &> /dev/null && pwd)\"\ndotfiles_source=\"${current_dir}/home_files\"\n\nwhile read -r file; do","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/dotfiles","loc":{"lines":{"from":82,"to":93}}}}],["1620",{"pageContent":"```bash\ncurrent_dir=\"$(cd -- \"$( dirname -- \"${BASH_SOURCE[0]}\" )\" &> /dev/null && pwd)\"\ndotfiles_source=\"${current_dir}/home_files\"\n\nwhile read -r file; do\n\n    relative_file_path=\"${file#\"${dotfiles_source}\"/}\"\n    target_file=\"${HOME}/${relative_file_path}\"\n    target_dir=\"${target_file%/*}\"\n\n    if test ! -d \"${target_dir}\"; then\n        mkdir -p \"${target_dir}\"\n    fi\n\n    printf 'Installing dotfiles symlink %s\\n' \"${target_file}\"\n    ln -sf \"${file}\" \"${target_file}\"\n\ndone < <(find \"${dotfiles_source}\" -type f)\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/dotfiles","loc":{"lines":{"from":93,"to":111}}}}],["1621",{"pageContent":"[It it possible to cache the dotfiles installation?](https://discord.com/channels/816244985187008514/1072003259075657849)\n\n<!-- DISCORD_BOT_FAQ - DO NOT REMOVE -->\n\nIf your dotfiles installation relies on some heavy dependencies, that can take some time to install by nature.\n\nSo, everytime you start a workspace, you may have to wait for the dotfiles installation to complete before you can enter the workspace.\n\nFor some cases, you can start the commands in background from your `install.sh`, by adding `& disown` at the end of a command:\n\n```bash\nsudo apt install qemu-user-static & disown","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/dotfiles","loc":{"lines":{"from":113,"to":124}}}}],["1622",{"pageContent":"This is a good workaround, so your workspace can start early and the long-running commands from your dotfiles installation script can happen in parallel.\n\nBut it may not work if you are installing a SHELL (e.g. `zsh`) or a dependency of something else that has to start before your dotfiles can get installed.\n\nSee [#7592](https://github.com/gitpod-io/gitpod/issues/7592) for more info, please upvote and share your feedback on this issue.","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/dotfiles","loc":{"lines":{"from":127,"to":131}}}}],["1623",{"pageContent":"---\nsection: user-settings\ntitle: User settings\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# User settings\n\nUser settings allow you to customize your own personal Gitpod experience.\n\n- [Browser Extension](/docs/configure/user-settings/browser-extension)\n- [Browser Settings](/docs/configure/user-settings/browser-settings)\n- [Browser Bookmarklet](/docs/configure/user-settings/browser-bookmarklet)\n- [Dotfiles](/docs/configure/user-settings/dotfiles)\n- [SSH](/docs/configure/user-settings/ssh)\n- [Access Tokens](/docs/configure/user-settings/access-tokens)","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings","loc":{"lines":{"from":1,"to":19}}}}],["1624",{"pageContent":"---\nsection: user-settings\ntitle: SSH\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# SSH\n\nSecure Shell Protocol (SSH) is the basis for connecting to your Gitpod workspace when using [VS Code Desktop](/docs/references/ides-and-editors/vscode), [JetBrains Gateway](/docs/integrations/jetbrains-gateway), or accessing via the [command-line](/docs/references/ides-and-editors/command-line) from a local machine.\n\nSee [command-line](/docs/references/ides-and-editors/command-line) editors & IDEs documentation for more.","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/ssh","loc":{"lines":{"from":1,"to":14}}}}],["1625",{"pageContent":"Manage your SSH Keys","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/ssh","loc":{"lines":{"from":16,"to":16}}}}],["1626",{"pageContent":"Installing a supported SSH client\n\nHow to install a local SSH client depending on your operating system.","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/ssh","loc":{"lines":{"from":18,"to":20}}}}],["1627",{"pageContent":"| OS                                        | Instructions                                                                                                                     |\n| ----------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------- |\n| Windows 10 1803+ / Server 2016/2019 1803+ | Install the [Windows OpenSSH Client](https://docs.microsoft.com/windows-server/administration/openssh/openssh_install_firstuse). |\n| Earlier Windows                           | Install [Git for Windows](https://git-scm.com/download/win).                                                                     |\n| macOS                                     | Comes pre-installed.                                                                                                             |","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/ssh","loc":{"lines":{"from":22,"to":26}}}}],["1628",{"pageContent":"| macOS                                     | Comes pre-installed.                                                                                                             |\n| Debian / Ubuntu / Mint                    | Run `sudo apt-get install openssh-client`                                                                                        |\n| RHEL / Fedora / CentOS                    | Run `sudo yum install openssh-clients`                                                                                           |\n| Arch / Manjaro                            | Comes pre-installed.                                                                                                             |","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/ssh","loc":{"lines":{"from":26,"to":29}}}}],["1629",{"pageContent":"> ❗️ PuTTY for Windows is not a supported client","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/ssh","loc":{"lines":{"from":31,"to":31}}}}],["1630",{"pageContent":"Create an SSH key\n\nCheck to see if you already have an SSH key on your **local** machine. The key is typically located at `~/.ssh/id_ed25519.pub` on macOS / Linux, and the `.ssh` directory in your user profile folder on Windows (for example `C:\\Users\\your-user\\.ssh\\id_ed25519.pub`).\n\nIf you do not have a key, run the following command in a **local** terminal / PowerShell to generate an SSH key pair:\n\n```bash\nssh-keygen -t ed25519\n```\n\nYou will then be prompted to enter a secure passphrase, but you can leave that blank. You should now have a `id_ed25519.pub` file which contains your new public SSH key.\n\n> **Note**: If you are using a legacy system that doesn't support the Ed25519 algorithm, you can use rsa instead: `ssh-keygen -t rsa -b 4096`\n\n> **Tip:** Don't have `ssh-keygen`? Install [a supported SSH client](#installing-a-supported-ssh-client).","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/ssh","loc":{"lines":{"from":33,"to":47}}}}],["1631",{"pageContent":"SSH file and folder permissions\n\n**macOS / Linux:**\n\nOn your local machine, make sure the following permissions are set:\n\n| Folder / File                             | Permissions                       |\n| ----------------------------------------- | --------------------------------- |\n| `.ssh` in your user folder                | `chmod 700 ~/.ssh`                |\n| `.ssh/config` in your user folder         | `chmod 600 ~/.ssh/config`         |\n| `.ssh/id_ed25519.pub` in your user folder | `chmod 600 ~/.ssh/id_ed25519.pub` |\n| Any other key file                        | `chmod 600 /path/to/key/file`     |\n\n**Windows:**\n\nThe specific expected permissions can vary depending on the exact SSH implementation you are using. We recommend using the out of box [Windows 10 OpenSSH Client](https://docs.microsoft.com/windows-server/administration/openssh/openssh_overview).","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/ssh","loc":{"lines":{"from":49,"to":64}}}}],["1632",{"pageContent":"In this case, make sure that all of the files in the `.ssh` folder for your remote user on the SSH host is owned by you and no other user has permissions to access it. See the [Windows OpenSSH wiki](https://github.com/PowerShell/Win32-OpenSSH/wiki/Security-protection-of-various-files-in-Win32-OpenSSH) for details.\n\nFor all other clients, consult your client's documentation for what the implementation expects.","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/ssh","loc":{"lines":{"from":66,"to":68}}}}],["1633",{"pageContent":"Upload an SSH key to Gitpod\n\nOnce you've created an SSH key pair, you can upload your public SSH key to Gitpod, by navigating to [gitpod.io/keys](https://gitpod.io/keys) where you can upload one or more public SSH keys.\n\n![SSH page of the Gitpod dashboard](/images/docs/ssh-key-upload-dark-theme.png)\n![SSH page of the Gitpod dashboard](/images/docs/ssh-key-upload-light-theme.png)\n\nPaste your public key, and give your key a memorable title so that you can remember the name of the public key later if you choose to add multiple keys, e.g. \"Gitpod Bastion Host SSH Key\"\n\n![Adding an SSH Key to Gitpod](/images/docs/new-ssh-key-light-theme.png)\n![Adding an SSH Key to Gitpod](/images/docs/new-ssh-key-dark-theme.png)\n\n### Edit an SSH key in Gitpod\n\nGitpod doesn't support editing an SSH key.\n\nTo update an SSH key, delete the key and re-upload the SSH key to Gitpod.","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/ssh","loc":{"lines":{"from":70,"to":86}}}}],["1634",{"pageContent":"Edit an SSH key in Gitpod\n\nGitpod doesn't support editing an SSH key.\n\nTo update an SSH key, delete the key and re-upload the SSH key to Gitpod.\n\n### Delete an SSH key from Gitpod\n\nTo delete an SSH key, click the kebab menu to the right of the SSH key in the dashboard and select \"delete\".\n\n![Deleting an SSH key from Gitpod](/images/docs/delete-ssh-key-light-theme.png)\n![Deleting an SSH key from Gitpod](/images/docs/delete-ssh-key-dark-theme.png)","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/ssh","loc":{"lines":{"from":86,"to":97}}}}],["1635",{"pageContent":"SSH Gateway\n\nSSH Gateway facilitates connection via SSH for direct SSH access using uploaded public keys, and using the workspace owner token. Both the [VS Code Desktop](/docs/references/ides-and-editors/vscode) and [JetBrains](/docs/integrations/jetbrains-gateway) integrations use SSH Gateway to connect to Gitpod workspaces.\n\n### What is SSH Gateway?\n\nSSH Gateway is an intermediary service within Gitpod that proxies incoming SSH requests to the appropriate running workspaces.\n\n![SSH Gateway architecture in Gitpod](/images/ssh-gateway/ssh-gateway-dark-theme.png)\n![SSH Gateway architecture in Gitpod](/images/ssh-gateway/ssh-gateway-light-theme.png)","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/ssh","loc":{"lines":{"from":99,"to":108}}}}],["1636",{"pageContent":"SSH Gateway in Self-Hosted\n\nIf you are running a [Self-Hosted](https://www.gitpod.io/self-hosted) Gitpod installation, you will need to ensure that:\n\n1. The installation has the SSH Gateway component configured and deployed\n2. Your networking and firewalls are configured to allow SSH traffic via port `22`.\n\nSee the [Self-Hosted Reference Architectures](/docs/configure/self-hosted/latest/reference-architecture) for more.\n\n# Troubleshooting\n\n[VS Code Desktop and SSH explained](/blog/vscode-desktop-ssh-updates#diagnosing--fixing-common-ssh-connection-issues) blog has a bunch of good troubleshooting notes, you may check them out.","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/ssh","loc":{"lines":{"from":110,"to":121}}}}],["1637",{"pageContent":"unix_listener: path \"/somewhere/xyz\" too long for Unix domain socket\n\n- Open your SSH `config` file in a text editor. (i.e. `~/.ssh/config` or `/etc/ssh/ssh_config`[[1](https://www.ssh.com/academy/ssh/config)])\n- Append the following to it:\n\n```\nHost *.gitpod.io\n     ControlPath /tmp/%r-gitpod\n```\n\n- Save the file.\n- Now try connecting via SSH or VSCode-Desktop again.","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/ssh","loc":{"lines":{"from":123,"to":134}}}}],["1638",{"pageContent":"---\nsection: public-roadmap\ntitle: Public roadmap\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Public roadmap\n\n> 🚧 **Under Construction** 🚧 - Looking for the Gitpod public roadmap?\n\nWe are currently in a process of re-thinking how we can best communicate upcoming changes to Gitpod with our customers, users and community members.\n\nWe still _love_ hearing what you think about Gitpod, as we build the future of [CDE](https://www.gitpod.io/cde)'s together—that has not changed! In the mean time, here are some ways that you can stay in touch:\n\n- To see what was recently released, see our [Changelog](https://gitpod.io/changelog).\n- For feedback and feature requests, see our repo on [GitHub](https://github.com/gitpod-io/gitpod/issues/new/choose).\n- To chat about Gitpod, join us in [Discord](https://gitpod.io/chat).\n\n**Why did we deprecate the public roadmap?**","metadata":{"source":"https://www.gitpod.io/docs/help/public-roadmap","loc":{"lines":{"from":1,"to":22}}}}],["1639",{"pageContent":"**Why did we deprecate the public roadmap?**\n\nOur previous public roadmap was tied to GitHub issues, which became difficult to maintain and could at times be confusing or misleading, especially when plans changed—as they often do—as we adapted Gitpod features to the feedback of our users and customers.\n\n**Where can I hear about what's planned and upcoming?**\n\nKeep an eye on our [Changelog](https://gitpod.io/changelog), because we like to [rollout features early](https://www.gitpod.io/docs/help/public-roadmap/release-cycle) to get your feedback and input. We're also very active in [Discord](https://gitpod.io/chat), which is a great place for discussions and conversations about Gitpod... so, why not join the next community session?","metadata":{"source":"https://www.gitpod.io/docs/help/public-roadmap","loc":{"lines":{"from":22,"to":28}}}}],["1640",{"pageContent":"---\nsection: public-roadmap\ntitle: Release Cycle\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Release Cycle\n\nInformation regarding how, and when Gitpod releases updates.\n\nFor information on latest changes, please see the [changelog](/changelog).\n\n## Gitpod Release Cycle\n\n1. **Early Access** - Available by invitation to gather user feedback -- changes likely.\n2. **Alpha** - Feature and published APIs unstable.\n3. **Beta** - Feature and published APIs are relatively stable.\n4. **General Availability (GA)** - Features and published API's are stable. Deprecations and API changes will be communicated in advance.","metadata":{"source":"https://www.gitpod.io/docs/help/public-roadmap/release-cycle","loc":{"lines":{"from":1,"to":21}}}}],["1641",{"pageContent":"---\nsection: getting-started\ntitle: Getting started\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n<script lang=\"ts\">\n  import OpenGraph from \"$lib/components/open-graph.svelte\";\n</script>\n\n<OpenGraph\ndata={{\n    description:\n      \"Learn how to start your first workspace, set up a gitpod.yml configuration file and enable Prebuilds. Get started for free.\",\n    title: \"Getting started with Gitpod\",\n    keywords: \"get started, fast, free\",\n  }}\n/>\n\n# Getting started\n\nIn this guide we'll walk you through the basics to get up and running with Gitpod today.\n\n- [Step 1: Your first workspace](#step-1-your-first-workspace)\n- [Step 2: Customize Gitpod](#step-2-customize-gitpod)\n- [Step 3: Gitpodify a project](#step-3-gitpodify-a-project)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started","loc":{"lines":{"from":1,"to":29}}}}],["1642",{"pageContent":"Step 1: Your first workspace\n\n`youtube: ij1msCffQZA`\n\nThe best way to get see the power of Gitpod, is to try it out by starting your first [Workspace](/docs/configure/workspaces).\n\nTo start your first workspace:\n\n1. Navigate to a GitHub, GitLab or Bitbucket repository.\n2. Open the repo in Gitpod by prefixing the URL with: `gitpod.io/#`.\n3. Confirm the workspace creation.\n\nFor example, click this link to open the NodeJS project in a Gitpod workspace:\n\n[`https://gitpod.io/#https://github.com/nodejs/node`](https://gitpod.io/#https://github.com/nodejs/node)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started","loc":{"lines":{"from":31,"to":45}}}}],["1643",{"pageContent":"Step 2: Customize Gitpod\n\n<!-- `youtube: VYHsd1zI_tE` -->\n\nGitpod can be customized depending on the needs of the project, and your own personal taste. With Gitpod, you can set an IDE preference between VS Code and JetBrains, either working in the browser, or on your desktop application. You can add custom scripts via Dotfiles.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started","loc":{"lines":{"from":47,"to":51}}}}],["1644",{"pageContent":"Set your IDE preference\n\n<figure>\n  <video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" src=\"/images/editors/select-jetbrains-ide.webm\" type=\"video/webm\"></video>\n  <figcaption>Updating Gitpod IDE preferences to {title}</figcaption>\n</figure>\n\nWork in the browser with [VS Code Browser](/docs/references/ides-and-editors/vscode-browser), or on desktop with [VS Code Desktop](/docs/references/ides-and-editors/vscode) or [JetBrains Gateway](/docs/integrations/jetbrains-gateway). To set your preferences, navigate to [gitpod.io/preferences](https://gitpod.io/preferences) to set your [IDE preference](/docs/references/ides-and-editors).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started","loc":{"lines":{"from":53,"to":60}}}}],["1645",{"pageContent":"Install the browser extension\n\n![Browser Extension](../../../static/images/docs/browser-extension-lense.png)\n\nA convenient way to work with Gitpod is using the custom [browser extension](/docs/configure/user-settings/browser-extension). Using the extension you can open workspaces directly from inside GitHub and GitLab.\n\n### Set your Dotfiles\n\nDotfiles are a way to customize your developer environment according to your personal needs. To configure Gitpod to use your own dotfiles for all your workspaces, enter the URL of a dotfiles repository in your user preferences. See [Dotfiles](/docs/configure/user-settings/dotfiles) for more.\n\nSee [User Settings](/docs/configure/user-settings) for more ways to customize Gitpod.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started","loc":{"lines":{"from":62,"to":72}}}}],["1646",{"pageContent":"Step 3: Gitpodify a project\n\nGitpod uses a `.gitpod.yml` file located at the root of your repository to unlock all benefits. It defines the processes to start for your project (e.g. a database or webserver), installs the required tools, editor extensions or IDE plugins. To get started:\n\n1. Add a `.gitpod.yml` at the root of your repository.\n   - You can use `gp init` to quickly generate the `.gitpod.yml` file.\n2. Use the `gp validate` command to validate your configuration is working.\n3. Commit and push to apply the configuration for all subsequent workspace starts.\n\nEvery opened workspace will now run the steps defined in your `gitpod.yml`.\n\nFor more, see the [.gitpod.yml reference](/docs/references/gitpod-yml) and [configuring workspaces](/docs/configure/workspaces).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started","loc":{"lines":{"from":74,"to":85}}}}],["1647",{"pageContent":"A gitpod.yml example\n\n```yaml\nimage: gitpod/workspace-full\n\n# Commands that will run on workspace start\ntasks:\n  - name: Setup, Install & Build\n    before: yarn global add express\n    init: yarn install\n    command: yarn build\n\n# Ports to expose on workspace startup\nports:\n  - port: 3000\n    onOpen: open-preview\n    name: Website\n    description: Website Preview\n```\n\n**Caption:** An example project configured to install, build and run a `yarn` project with a webserver, exposed on port 3000. On start, the webserver preview is opened automatically.\n\nSee the [.gitpod.yml reference page](/docs/references/gitpod-yml) for more.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started","loc":{"lines":{"from":87,"to":109}}}}],["1648",{"pageContent":"---\nsection: languages\ntitle: Bash in Gitpod\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Bash in Gitpod\n\nBash is the default shell for Gitpod. However, if you're developing a Bash script yourself, you may want to configure additional language support.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/bash","loc":{"lines":{"from":1,"to":12}}}}],["1649",{"pageContent":"Example Repositories\n\nHere are a few Bash example projects that are already automated with Gitpod:\n\n<div class=\"overflow-x-auto\">\n\n| Repository                                        | Description                      | Try It                                                                                                                |\n| ------------------------------------------------- | -------------------------------- | --------------------------------------------------------------------------------------------------------------------- |\n| [inlets/inlets](https://github.com/inlets/inlets) | Reverse proxy and service tunnel | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/inlets/inlets) |\n\n</div>","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/bash","loc":{"lines":{"from":14,"to":24}}}}],["1650",{"pageContent":"VSCode Extensions\n\n### ShellCheck\n\nShellCheck provides linting for common mistakes in your shell script.\n\nTo use ShellCheck in Gitpod, first, we must install the `shellcheck` tool. Here is a simple Dockerfile to get you started:\n\n```dockerfile\nFROM gitpod/workspace-full\n\nUSER gitpod\n\nRUN brew install shellcheck\n```\n\nYou should also install the shellcheck VS Code extension in Gitpod, by adding a [.gitpod.yml](/docs/references/gitpod-yml) configuration file to your repository that looks like this (notice the `vscode` extensions section):\n\n```yaml\nimage:\n  file: .gitpod.Dockerfile\n\nvscode:\n  extensions:\n    - timonwong.shellcheck@0.9.0:hsU/Rd39aqPYowTqL+DbXg==\n```\n\nNot sure about ShellCheck? Try it in Gitpod!\n\n[![gitpod-io/Gitpod-ShellCheck](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-io/Gitpod-ShellCheck)","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/bash","loc":{"lines":{"from":26,"to":55}}}}],["1651",{"pageContent":"Bash IDE\n\n![A Bash IDE demonstration](../../../static/images/docs/bashIDE.png)\n\nJust to name a few things Bash IDE adds: Code completion, hovers, and diagnostic reporting.\n\nTo install Bash IDE to your repository add the following to your [.gitpod.Dockerfile](/docs/configure/workspaces/workspace-image)\n\n```dockerfile\nRUN npm i -g bash-language-server\n```\n\nAlso the following in your\n[.gitpod.yml](/docs/references/gitpod-yml)\n\n```yaml\nvscode:\n  extensions:\n    - mads-hartmann.bash-ide-vscode@1.4.0:/qx+rdXE/fGTGWhelNf3aQ==\n```\n\nNot sure about Bash IDE? Try it in Gitpod\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-io/Gitpod-BashIDE)","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/bash","loc":{"lines":{"from":57,"to":80}}}}],["1652",{"pageContent":"Further Reading\n\n- For more information about ShellCheck please see [shellcheck.net](https://shellcheck.net)\n\n## Known issues\n\n### The shellcheck program was not found\n\n[It has been reported](https://github.com/gitpod-io/gitpod/issues/1461#issuecomment-621232166) that shellcheck extension fails to detect shellcheck from homebrew which results in:\n![shellcheck notification](https://user-images.githubusercontent.com/11302521/80605581-91110b80-8a33-11ea-9247-44cb33134cc9.png)\n\nTo resolve this you need to set `\"shellcheck.executablePath\": \"/home/linuxbrew/.linuxbrew/bin/shellcheck\",` (or to path that point to shellcheck on your system), See https://github.com/vivek-verma202/GWAS_FM/pull/3/files","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/bash","loc":{"lines":{"from":82,"to":93}}}}],["1653",{"pageContent":"---\nsection: languages\ntitle: C++ in Gitpod\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# C++ in Gitpod\n\nGitpod supports C++ right out of the box, but there are still ways to enhance your C++ experience within Gitpod.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/cpp","loc":{"lines":{"from":1,"to":12}}}}],["1654",{"pageContent":"Example Repositories\n\nHere are a few C++ example projects that are already automated with Gitpod:\n\n<div class=\"overflow-x-auto\">","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/cpp","loc":{"lines":{"from":14,"to":18}}}}],["1655",{"pageContent":"| Repository                                                         | Description                                                       | Try it                                                                                                                                           |\n| ------------------------------------------------------------------ | ----------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------ |\n| [Component Editor](https://github.com/Circuito-io/ComponentEditor) | circuito.io Component Editor                                      | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/Circuito-io/ComponentEditor)              |","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/cpp","loc":{"lines":{"from":20,"to":22}}}}],["1656",{"pageContent":"| [tinyraycaster](https://github.com/ssloy/tinyraycaster)            | old-school FPS in a weekend                                       | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/ssloy/tinyraycaster)                      |\n| [HelloGitPod](https://github.com/Shadouw/HelloGitPod)              | Example Gitpod C++ configuration with `clang-tidy` linter enabled | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/Shadouw/HelloGitPod/blob/master/main.cpp) |","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/cpp","loc":{"lines":{"from":23,"to":24}}}}],["1657",{"pageContent":"</div>","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/cpp","loc":{"lines":{"from":26,"to":26}}}}],["1658",{"pageContent":"Environment\n\n### C++ Tools\n\nAll Gitpod workspaces come with the latest available `clang`, `gcc`, `cmake`, `gdb`, and other useful C++ tools pre-installed by default.\n\nHowever, if you're missing some additional tools, you can simply run `brew install <tool_name>` to install it in the current workspace or [write your own .gitpod.Dockerfile](/docs/configure/workspaces/workspace-image#creating-docker-images-for-gitpod) to install it across all workspaces for your repository.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/cpp","loc":{"lines":{"from":28,"to":34}}}}],["1659",{"pageContent":"IDE Features","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/cpp","loc":{"lines":{"from":36,"to":36}}}}],["1660",{"pageContent":"Debugging\n\nSince `gdb` is already pre-installed in Gitpod, you can already debug any C, C++, Go, etc. program directly from the Terminal with a single command.\n\nHowever, you can also get the IDE's Debugging features to work with your C++ program, using GDB as a backend.\n\nTo enable C++ debugging for your project, simply follow these steps:\n\n1. Open the Extensions panel (in the IDE's left vertical menu bar)\n\n2. Use the Search feature to find the extension called \"[Native Debug](https://open-vsx.org/extension/webfreak/debug)\", then click on `Install`, and select `Install for this project`\n\n3. Next, open the Debug panel (also in the IDE's left vertical menu bar), and click on the Gear (⚙️) icon to open the `launch.json` configuration file\n\n4. Finally, configure debugging for your project by adding a GDB launch configuration. You can use auto-completion for assistance. In the end, your `launch.json` should look something like this:","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/cpp","loc":{"lines":{"from":38,"to":52}}}}],["1661",{"pageContent":"4. Finally, configure debugging for your project by adding a GDB launch configuration. You can use auto-completion for assistance. In the end, your `launch.json` should look something like this:\n\n```js\n{\n  // Use IntelliSense to learn about possible attributes.\n  // Hover to view descriptions of existing attributes.\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n      {\n          \"type\": \"gdb\",\n          \"request\": \"launch\",\n          \"name\": \"Debug Firefox (GDB)\",\n          \"target\": \"./obj-x86_64-pc-linux-gnu/dist/bin/firefox\",\n          \"cwd\": \"${workspaceRoot}\",\n          \"valuesFormatting\": \"parseText\"\n      }\n  ]\n}","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/cpp","loc":{"lines":{"from":52,"to":69}}}}],["1662",{"pageContent":"Note: This example GDB launch configuration points to a compiled Firefox browser binary. You'll need to adjust it to point to your project's own compiled binary.\n\nWith this, you should be able to set breakpoints in your C++ code directly from the code editor margin, then start a debugging session from the Debug panel. The IDE should then show you debug information, hopefully pause execution on your breakpoint, and allow you to step through the code.\n\nIf that doesn't work, please feel free to ask for help in [community.gitpod.io](https://community.gitpod.io) and we'll be happy to help you make debugging work for your project.\n\nFor a more in-depth walk-through of how do debug applications, please [refer to this comment on GitHub](https://github.com/gitpod-io/gitpod/issues/4805#issuecomment-883228543).","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/cpp","loc":{"lines":{"from":72,"to":78}}}}],["1663",{"pageContent":"Further Reading\n\n- <a class=\"no-nowrap\" href=\"https://community.gitpod.io/t/gitpod-and-c/622\">How to enable the `clang-tidy` linter in Gitpod</a>","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/cpp","loc":{"lines":{"from":80,"to":82}}}}],["1664",{"pageContent":"---\nsection: languages\ntitle: Dart in Gitpod\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Dart in Gitpod","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/dart","loc":{"lines":{"from":1,"to":10}}}}],["1665",{"pageContent":"Example Repositories\n\nHere are a few Dart example projects that are already automated with Gitpod:\n\n<div class=\"overflow-x-auto\">\n\n| Repository                                                                | Description                                                 | Try it                                                                                                                             |\n| ------------------------------------------------------------------------- | ----------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------- |\n| [Flutter Hello World Demo](https://github.com/gitpod-io/template-flutter) | The Flutter hello world demo template configured for Gitpod | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-io/template-flutter) |\n\n</div>","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/dart","loc":{"lines":{"from":12,"to":22}}}}],["1666",{"pageContent":"Installing Dart\n\nTo install the Dart SDK in Gitpod one must add the following to your [.gitpod.Dockerfile](/docs/configure/workspaces/workspace-image)\n\n```dockerfile\nRUN brew tap dart-lang/dart && brew install dart\n```\n\n## VSCode Extensions\n\n### Dart\n\nThis Extension adds cool syntax highlighting\n\n![Syntax highlighting example](../../../static/images/docs/AfterSyntaxHighlighting.png)\n\nIt adds [IntelliSense](https://code.visualstudio.com/docs/editor/intellisense) support for autocompletion\n\n![Dart IntelliSense example](../../../static/images/docs/DartIntellisenseExample.png)\n\n## Try it\n\nHere is a hello world example of a [Gitpodified](/guides/gitpodify) project running in the browser, try it!\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-io/Gitpod-Dart)","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/dart","loc":{"lines":{"from":24,"to":48}}}}],["1667",{"pageContent":"---\nsection: languages\ntitle: Deno in Gitpod\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Deno in Gitpod\n\nIt's easy to set up Deno in Gitpod.\n\n## Setting up the Dockerfile\n\nAdd a Dockerfile to your project as [.gitpod.Dockerfile](/docs/configure/workspaces/workspace-image):\n\n```dockerfile\nFROM gitpod/workspace-full\n\nRUN curl -fsSL https://deno.land/x/install/install.sh | sh\nRUN /home/gitpod/.deno/bin/deno completions bash > /home/gitpod/.bashrc.d/90-deno && \\\n    echo 'export DENO_INSTALL=\"/home/gitpod/.deno\"' >> /home/gitpod/.bashrc.d/90-deno && \\\n    echo 'export PATH=\"$DENO_INSTALL/bin:$PATH\"' >> /home/gitpod/.bashrc.d/90-deno\n```\n\nAnd configure this Dockerfile in your [.gitpod.yml](/docs/references/gitpod-yml):\n\n```YAML\nimage:\n  file: .gitpod.Dockerfile\n```\n\nIt'll run the latest Deno version and install the Bash completions.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/deno","loc":{"lines":{"from":1,"to":34}}}}],["1668",{"pageContent":"Example Repositories\n\nHere are a few Deno example projects that are already automated with Gitpod:\n\n<div class=\"overflow-x-auto\">\n\n| Repository                                                         | Description                                     | Try it                                                                                                                            |\n| ------------------------------------------------------------------ | ----------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------- |\n| [fake-log-generator](https://github.com/fknipp/fake-log-generator) | Generator for fake log files as CLI application | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/fknipp/fake-log-generator) |\n\n</div>","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/deno","loc":{"lines":{"from":36,"to":46}}}}],["1669",{"pageContent":"VSCode Extensions\n\nHere is a useful extensions that you'll likely want to install in your Deno project.\n\n### [Deno](https://marketplace.visualstudio.com/items?itemName=denoland.vscode-deno)\n\nTo add this extension to your repository, simply open Gitpod's Extensions panel (see left vertical menu in the IDE), then search for \"Deno\" and install it \"for this project\".\n\nNext, simply commit the [.gitpod.yml](/docs/references/gitpod-yml) configuration file that was automatically created (or updated) by Gitpod.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/deno","loc":{"lines":{"from":48,"to":56}}}}],["1670",{"pageContent":"---\nsection: languages\ntitle: .NET in Gitpod\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# .NET in Gitpod","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/dotnet","loc":{"lines":{"from":1,"to":10}}}}],["1671",{"pageContent":"Example Repositories\n\n<div class=\"overflow-x-auto\">","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/dotnet","loc":{"lines":{"from":12,"to":14}}}}],["1672",{"pageContent":"| Repository                                                      | Description                                                                   | Try it                                                                                                                                |\n| --------------------------------------------------------------- | ----------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------- |\n| [dotnetcore](https://github.com/gitpod-io/example-dotnet-core)  | C# .NET Core template                                                         | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-io/example-dotnet-core) |","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/dotnet","loc":{"lines":{"from":16,"to":18}}}}],["1673",{"pageContent":"| [uno](https://github.com/unoplatform/uno)                       | Build Mobile, Desktop and WebAssembly apps with C# and XAML                   | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/unoplatform/uno)               |\n| [uno.quickstart](https://github.com/unoplatform/uno.quickstart) | An Uno \"Hello world!\" project using Windows UWP, iOS, Android and WebAssembly | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/unoplatform/uno.quickstart)    |","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/dotnet","loc":{"lines":{"from":19,"to":20}}}}],["1674",{"pageContent":"</div>","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/dotnet","loc":{"lines":{"from":22,"to":22}}}}],["1675",{"pageContent":"Installing the .NET Tools\n\nTo get all the .NET tools that you need pre-installed in your Gitpod workspaces, use the following base image in your [.gitpod.yml](/docs/references/gitpod-yml):\n\n```YAML\nimage: gitpod/workspace-dotnet\n```\n\nIf your project requires a GUI or Virtual Desktop, please use this image instead:\n\n```YAML\nimage: gitpod/workspace-dotnet-vnc\n```\n\nThis will give you a full GUI Virtual Desktop for your .NET application! The Virtual Desktop will be running on port `6080`.\n\n## Compiling .NET Code in Gitpod\n\nTo compile your **C#** or **F#** Code in Gitpod, run `dotnet build <FILE>`, where `<FILE>` is the path to the C# or F# project file or .NET solution file you want to compile.\n\n## Running .NET Code in Gitpod\n\nTo run your code after it has been compiled run `dotnet <FILE>` where `<FILE>` is the path to the EXE file you want to run. You can also run application with `dotnet run <FILE>` where `<FILE>` is the path to the C# or F# project file you want to compile and run.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/dotnet","loc":{"lines":{"from":24,"to":46}}}}],["1676",{"pageContent":"Running .NET Code in watch-mode\n\nAlternatively, you can also run your application in so-called watch-mode. In such configuration the application will recompile and rerun itself every time you save any source file belonging to the project. To run your code in watch-mode use `dotnet watch --project <FILE> run` where `<FILE>` is the path to the C# or F# project file you want to compile and run.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/dotnet","loc":{"lines":{"from":48,"to":50}}}}],["1677",{"pageContent":"Useful VSCode Extensions\n\n### C#\n\nThe official C# extension from Microsoft [is proprietary](https://aka.ms/VSCode-DotNet-DbgLicense) and unfortunately cannot be used. The MIT licensed [muhammad-sammy.csharp](https://open-vsx.org/extension/muhammad-sammy/csharp) extension from Samsung brings code completion, snippets, auto-formatting, peek definition, refactoring, hover documentation and breakpoint debugging for C# however!\n\n![C# Extension Demo](../../../static/images/docs/CSharpDemo.png)\n\nTo add this extension to your repository, add the following to your [.gitpod.yml](/docs/references/gitpod-yml):\n\n```yaml\nvscode:\n  extensions:\n    - muhammad-sammy.csharp\n```","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/dotnet","loc":{"lines":{"from":52,"to":66}}}}],["1678",{"pageContent":"F#\n\nThe [Ionide-fsharp](https://ionide.io/) extensin gives F# developers the following features:\n\n- A Widget for your F# needs\n- Auto completion\n- Shows errors inline\n- Quickfix\n- Goto definition\n- Peek definition\n- And more...\n\n![Ionide fsharp Example](../../../static/images/docs/Iondine_Example.png)\n\nTo add this extension to your repository, add the following to your [.gitpod.yml](/docs/references/gitpod-yml):\n\n```yaml\nvscode:\n  extensions:\n    - Ionide.Ionide-fsharp@4.6.2:yBkAE6j7z7gJ5WEcyMjEOg==\n```","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/dotnet","loc":{"lines":{"from":68,"to":88}}}}],["1679",{"pageContent":"---\nsection: languages\ntitle: Go in Gitpod\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Go in Gitpod\n\nGitpod includes Go in the default image, but if you need to customize your Go version or IDE setup in Gitpod, this guide will help you.\n\n## Prerequisites\n\nThis guide assumes familiarity with:\n\n[Docker](https://docs.docker.com/), [YAML](https://yaml.org/spec/1.1/), [Linux](https://www.linux.org/), [Bash](https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html) and Linux [environment variables](https://wiki.archlinux.org/title/environment_variables).","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/go","loc":{"lines":{"from":1,"to":18}}}}],["1680",{"pageContent":"Getting started / Quick Start\n\n`youtube: ij1msCffQZA`\n\nTo see a full working Go application, take a look at [gitpod-samples/template-golang-cli](https://github.com/gitpod-samples/template-golang-cli). To update an existing Go application, follow the steps below in this guide.\n\n<a href=\"https://gitpod.io/#https://github.com/gitpod-samples/template-golang-cli\">\n    <img src=\"https://gitpod.io/button/open-in-gitpod.svg\" alt=\"Push\" align=\"center\" >\n</a>","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/go","loc":{"lines":{"from":20,"to":28}}}}],["1681",{"pageContent":"Installing Dependencies\n\n### The default base image\n\nThe default Gitpod workspace image default is [workspace-full](https://github.com/gitpod-io/workspace-images) based on [Ubuntu](https://ubuntu.com/).\n\nThis base image includes:\n\n- [Go](https://golang.org/) `v1.19.1` (`go version`)\n\n> **Note:** We discuss how to set up a [custom base image](/docs/introduction/languages/go#setting-up-a-custom-dockerfile) later in the guide.\n\n### Updating Go Versions\n\nGitpod uses the latest stable version of Go by default. If you want to use a different version, you can use the [Go Version Manager](https://github.com/moovweb/gvm) to install and manage multiple versions of Go or you can following their [official guide](https://go.dev/doc/manage-install).","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/go","loc":{"lines":{"from":30,"to":44}}}}],["1682",{"pageContent":"Setting up a custom Dockerfile\n\n`youtube: jFsbmcXCRf8`\n\nTo ensure Gitpod workspaces always start with the correct dependencies, configure a Dockerfile:\n\n1. Create a `.gitpod.yml`\n\n```bash\ntouch .gitpod.yml\n```\n\n2. Create a custom Dockerfile\n\n```bash\ntouch .gitpod.Dockerfile\n```\n\n3. Reference your newly created Dockerfile in your `.gitpod.yml`\n\n```yaml\nimage:\n  file: .gitpod.Dockerfile","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/go","loc":{"lines":{"from":46,"to":68}}}}],["1683",{"pageContent":"2. Create a custom Dockerfile\n\n```bash\ntouch .gitpod.Dockerfile\n```\n\n3. Reference your newly created Dockerfile in your `.gitpod.yml`\n\n```yaml\nimage:\n  file: .gitpod.Dockerfile\n```\n\n4. Update your `.gitpod.Dockerfile` to install your preferred [dependency versions](https://go.dev/project)\n\n```dockerfile\n# You can find the new timestamped tags here: https://hub.docker.com/r/gitpod/workspace-base/tags\nFROM gitpod/workspace-base:latest\n\n# Change your version here\nENV GO_VERSION=1.17\n\n# For ref, see: https://github.com/gitpod-io/workspace-images/blob/61df77aad71689504112e1087bb7e26d45a43d10/chunks/lang-go/Dockerfile#L10\nENV GOPATH=$HOME/go-packages\nENV GOROOT=$HOME/go\nENV PATH=$GOROOT/bin:$GOPATH/bin:$PATH\nRUN curl -fsSL https://dl.google.com/go/go${GO_VERSION}.linux-amd64.tar.gz | tar xzs \\\n    && printf '%s\\n' 'export GOPATH=/workspace/go' \\\n                      'export PATH=$GOPATH/bin:$PATH' > $HOME/.bashrc.d/300-go","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/go","loc":{"lines":{"from":68,"to":96}}}}],["1684",{"pageContent":"5. Commit and push both `.gitpod.yml` and `.gitpod.Dockerfile`\n\n```bash\ngit commit -m \"configuring gitpod with go\" && git push\n```\n\n6. Start a **new workspace** from the branch with the committed `.gitpod.Dockerfile`\n\nFor example, opening: `gitpod.io/#https://github.com/gitpod-io/gitpod`\n\n7. Test your dependencies are correct in the new workspace\n\n```bash\ngo version\n```\n\n> **Note:** If your changes are not taking effect, ensure your workspace is building from the correct [context](/docs/introduction/learn-gitpod/context-url), where your `gitpod.yml` or `gitpod.Dockerfile` are checked in to version control and are on the branch or commit that you are opening.\n\nSee [configure Docker](/docs/configure/workspaces/workspace-image) for more.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/go","loc":{"lines":{"from":99,"to":117}}}}],["1685",{"pageContent":"Using the `dep` dependency manager in Gitpod\n\nIf your project uses the [`dep` _(deprecated - v0.5.4)_](https://golang.github.io/dep/) dependency manager then you need to add a [.gitpod.Dockerfile](/docs/configure/workspaces/workspace-image) to your project. A basic example that extends the default workspace image might be something like:\n\n```dockerfile\nFROM gitpod/workspace-full\n\nUSER gitpod\n\nRUN sudo apt-get install go-dep\n```\n\nAlso, don't forget to reference the above Dockerfile in your `.gitpod.yml` configuration file, like so:\n\n```YAML\nimage:\n  file: .gitpod.Dockerfile\n\ntasks:\n  - init: dep ensure\n\nvscode:\n  extensions:\n    - golang.go\n    - premparihar.gotestexplorer\n```","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/go","loc":{"lines":{"from":119,"to":144}}}}],["1686",{"pageContent":"Debugging your Go application in Gitpod","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/go","loc":{"lines":{"from":146,"to":146}}}}],["1687",{"pageContent":"Debugging your Go applications in VS Code\n\nHere is a quick clip on how to automatically configure debugging for Go!\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Go debugging example\" src=\"/images/docs/GoDebug.webm\" type=\"video/webm\"></video>\n    <figcaption>Go debugging example</figcaption>\n</figure>\n\nSo, basically in this video we:\n\n1. First, open the Go file that we want to debug\n2. Then, go to the debug menu and select \"Add Configuration...\"\n3. Next, in the dropdown choose \"Go launch file\"\n4. Finally, start debugging your Go program!\n\nYou can also create the Go debug configuration file manually\n\nTo start debugging your Go application in Gitpod, please create a new directory called `.theia/`, and inside add a file called `launch.json`, finally, add the following to it:","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/go","loc":{"lines":{"from":148,"to":166}}}}],["1688",{"pageContent":"To start debugging your Go application in Gitpod, please create a new directory called `.theia/`, and inside add a file called `launch.json`, finally, add the following to it:\n\n```json\n{\n  // Use IntelliSense to learn about possible attributes.\n  // Hover to view descriptions of existing attributes.\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Launch file\",\n      \"type\": \"go\",\n      \"request\": \"launch\",\n      \"mode\": \"debug\",\n      \"program\": \"${file}\"\n    }\n  ]\n}","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/go","loc":{"lines":{"from":166,"to":182}}}}],["1689",{"pageContent":"Then, simply open the Go file you want to debug, open the Debug panel (in the left vertical toolbar, click the icon with the crossed-out-spider), and click the green \"Run\" button.\n\n<br>\n\nTo see a basic repository with Go debugging, please check out [gitpod-samples/template-golang-cli](https://github.com/gitpod-samples/template-golang-cli):\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-samples/template-golang-cli)","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/go","loc":{"lines":{"from":185,"to":191}}}}],["1690",{"pageContent":"Debugging your Go applications in GoLand\n\nSteps to debug your Go application in GoLand:\n\n1. Open your project in Gitpod with GoLand.\n2. Open the `main.go` file in the editor.\n3. Click on the `Run` menu and select `Edit Configurations...`.\n4. Click on the `+` button and select `Go Application`.\n5. In the `Go Application` window, enter the name of the configuration and the path to the file you want to debug.\n6. Click on the `Apply` button.\n7. Click on the `Debug` button to start debugging your Go application.\n\n<img class=\"shadow-medium rounded-xl max-w-xl mt-x-small\" src=\"/images/docs/goland-debug.webp\" alt=\"Debug on GoLand in Gitpod\" loading=\"lazy\"/>","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/go","loc":{"lines":{"from":193,"to":205}}}}],["1691",{"pageContent":"Using `$GOPATH`\n\nOlder Go projects without module support need a <a href=\"https://golang.org/doc/code.html#Organization\" target=\"_blank\">specific workspace layout</a>:\nthe source code of your repository and its dependencies must be in the directories\n\n```sh\nsrc/[repository-provider]/[repository-owner]/[repository-name]\n```\n\nin the `$GOPATH`. Using the `.gitpod.yml` file, you can bring about such a workspace layout. Here is\nhow we do that for the example <a href=\"https://github.com/gitpod-io/definitely-gp/blob/master/go-gin-app/.gitpod.yml\" target=\"_blank\">go-gin-app</a> repository:\n\n```yaml\n---\ncheckoutLocation: \"src/github.com/demo-apps/go-gin-app\"\nworkspaceLocation: \".\"\ntasks:\n  - init: |\n      cd /workspace/src/github.com/demo-apps/go-gin-app &&\n      go get -v ./... &&\n      go build -o app\n    command: |\n      cd /workspace/src/github.com/demo-apps/go-gin-app &&\n      ./app","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/go","loc":{"lines":{"from":207,"to":230}}}}],["1692",{"pageContent":"In more detail:\n\n- By default, Gitpod clones the repository into the directory `/workspace`, which becomes the\n  root directory for the workspace. With [`checkoutLocation`](/docs/references/gitpod-yml#checkoutlocation) and [`workspaceLocation`](/docs/references/gitpod-yml#workspacelocation) you can\n  change this behavior (the paths are taken relative to `/workspace`).\n- Gitpod preconfigures the `$GOPATH` environment variable to include the directory `/workspace/go`.\n- With `go get -v ./...` we retrieve the sources of the dependencies from GitHub.\n- To build the app, we run `go build -o app`.\n- Lastly, we start the application.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/go","loc":{"lines":{"from":233,"to":241}}}}],["1693",{"pageContent":"Example Repositories\n\nHere are a few Go example projects that are already automated with Gitpod:","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/go","loc":{"lines":{"from":243,"to":245}}}}],["1694",{"pageContent":"|                       Repository                       |                        Description                        |                                                                                                                        Try It |\n| :----------------------------------------------------: | :-------------------------------------------------------: | ----------------------------------------------------------------------------------------------------------------------------: |\n| [prometheus](https://github.com/prometheus/prometheus) | The Prometheus monitoring system and time series database | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/prometheus/prometheus) |\n| [go-swagger](https://github.com/go-swagger/go-swagger) | A simple yet powerful representation of your RESTful API  | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/go-swagger/go-swagger) |","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/go","loc":{"lines":{"from":247,"to":250}}}}],["1695",{"pageContent":"| [go-gin-app](https://github.com/gitpod-io/go-gin-app)  |               Gin example running in Gitpod               |  [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-io/go-gin-app) |\n| [gosh-terminal](https://github.com/gosh-terminal/gosh) |  A terminal implemented in Go where you can do anything   |    [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gosh-terminal/gosh) |","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/go","loc":{"lines":{"from":251,"to":252}}}}],["1696",{"pageContent":"Further Reading\n\n- [VSCode/Go Documentation](https://code.visualstudio.com/docs/languages/go) The stuff here also applies to Gitpod!\n- [JetBrains/GoLand Documentation](https://www.jetbrains.com/help/go) The stuff here also applies to Gitpod!\n- [VSCode/Go debugging](https://github.com/Microsoft/vscode-go/wiki/Debugging-Go-code-using-VS-Code) VSCode's Documentation on Go debugging","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/go","loc":{"lines":{"from":254,"to":258}}}}],["1697",{"pageContent":"---\nsection: languages\ntitle: HTML & CSS in Gitpod\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# HTML & CSS in Gitpod\n\nGitpod has great HTML and CSS support. In fact, Gitpod was made with web development in mind. And, depending on your needs, you may want to customize this experience further!","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/html","loc":{"lines":{"from":1,"to":12}}}}],["1698",{"pageContent":"Example Repositories\n\nHere are a few HTML/CSS example projects that are already automated with Gitpod:\n\n<div class=\"overflow-x-auto\">","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/html","loc":{"lines":{"from":14,"to":18}}}}],["1699",{"pageContent":"| Repository                                                                 | Description                                                                   | Try it                                                                                                                                   |\n| -------------------------------------------------------------------------- | ----------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------- |\n| [Front-End-Checklist](https://github.com/thedaviddias/Front-End-Checklist) | The perfect Front-End Checklist for modern websites and meticulous developers | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/thedaviddias/Front-End-Checklist) |","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/html","loc":{"lines":{"from":20,"to":22}}}}],["1700",{"pageContent":"| [Devhints](https://github.com/rstacruz/cheatsheets)                        | TL;DR for developer documentation - a ridiculous collection of cheatsheets    | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/rstacruz/cheatsheets)             |","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/html","loc":{"lines":{"from":23,"to":23}}}}],["1701",{"pageContent":"</div>","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/html","loc":{"lines":{"from":25,"to":25}}}}],["1702",{"pageContent":"[emmet](https://emmet.io/) &nbsp;Support\n\n![emmet demo](../../../static/images/docs/emmet.png)\nGitpod comes with [emmet](https://emmet.io/) support right out of the box giving you access to powerful snippets and completions\n\n## Live Preview\n\n![Live Preview Demo](../../../static/images/docs/html-preview.png)\nWith Gitpod you can open a preview for HTML files while you are coding. You can do this by opening a web server `python -m http.server 8000`.\n\nYou can also automate this in your [`.gitpod.yml`](/docs/references/gitpod-yml) file, so that every time you start a new workspace your preview is ready to go. For example:\n\n```yaml\ntasks:\n  - name: Start web server\n    init: python -m http.server 8000\n\nports:\n  - port: 8000\n    onOpen: open-preview\n```","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/html","loc":{"lines":{"from":27,"to":47}}}}],["1703",{"pageContent":"Try It!\n\nWant to see a minimal example in action? Try it out by opening an example on Gitpod:\n\n[![gitpod-io/Gitpod-Web-Development-Example](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-io/Gitpod-Web-Development-Example)","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/html","loc":{"lines":{"from":49,"to":53}}}}],["1704",{"pageContent":"---\nsection: languages\ntitle: Languages\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n<script lang=\"ts\">\n  import PopularLanguages from \"$lib/components/docs/languages/popular-languages.svelte\"\n  import RemainingLanguages from \"$lib/components/docs/languages/remaining-languages.svelte\"\n</script>\n\n# Languages\n\nGitpod is a very flexible tool and can be configured with many languages.\n\n<PopularLanguages />\n\n---\n\n<RemainingLanguages />","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages","loc":{"lines":{"from":1,"to":23}}}}],["1705",{"pageContent":"---\nsection: languages\ntitle: JavaScript in Gitpod\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# JavaScript in Gitpod\n\nGitpod comes with great built-in support for JavaScript, TypeScript, and tools like Node.js, npm, pnpm & yarn pre-installed with [Gitpod workspace image](https://www.gitpod.io/docs/configure/workspaces/workspace-image). This guide walks you through how to fully configure a JavaScript application using Gitpod.\n\n## Prerequisites\n\nThis guide assumes familiarity with:\n\n[Docker](https://docs.docker.com/), [YAML](https://yaml.org/spec/1.1/), [Linux](https://www.linux.org/), [Bash](https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html) and Linux [environment variables](https://wiki.archlinux.org/title/environment_variables).","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/javascript","loc":{"lines":{"from":1,"to":18}}}}],["1706",{"pageContent":"Getting started / Quick Start\n\n`youtube: ij1msCffQZA`\n\nTo see a full working Node/TypeScript application, take a look at [gitpod-samples/template-typescript-node](https://github.com/gitpod-samples/template-typescript-node). To update an existing JavaScript application, follow the steps below in this guide.\n\n<a href=\"https://gitpod.io/#https://github.com/gitpod-samples/template-typescript-node\">\n    <img src=\"https://gitpod.io/button/open-in-gitpod.svg\" alt=\"Push\" align=\"center\" >\n</a>","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/javascript","loc":{"lines":{"from":20,"to":28}}}}],["1707",{"pageContent":"Installing dependencies\n\n### The default base image\n\nThe default Gitpod workspace image default is [workspace-full](https://github.com/gitpod-io/workspace-images) based on [Ubuntu](https://ubuntu.com/).\n\nAlong with other languages and tools, this base image includes:\n\n- [Node.js](https://nodejs.org/en/) `v16.18.1` (`node -v`)\n- [Node Package Manager - npm](https://www.npmjs.com/) `v8.19.2` (`npm -v`)\n- [Node Version Manager - nvm](https://nvm.sh) `0.39.0` (`nvm -v`)\n\n> **Note:** We discuss how to set up a [custom base image](/docs/introduction/languages/javascript#setting-up-a-custom-dockerfile) later in the guide.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/javascript","loc":{"lines":{"from":30,"to":42}}}}],["1708",{"pageContent":"Updating Node Versions\n\nGitpod comes with the latest stable Node.js version pre-installed but let's say your project uses a different version of `node` (say `14.8.0` for example), well the good news is that Gitpod also comes with `nvm` (a tool used to manage multiple active Node.js versions) installed. To install and configure the desired version of node: `nvm install 14.8.0` and `nvm use 14.8.0` (you can also use `nvm alias default 14.8.0` to set the default version of node) or you can setup [custom Dockerfile](/docs/introduction/languages/javascript#setting-up-a-custom-dockerfile) to install the desired version of node & other required tools.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/javascript","loc":{"lines":{"from":44,"to":46}}}}],["1709",{"pageContent":"Setting up a custom Dockerfile\n\n`youtube: jFsbmcXCRf8`\n\nTo ensure Gitpod workspaces always start with the correct dependencies, configure a Dockerfile:\n\n1. Create a `.gitpod.yml`\n\n```bash\ntouch .gitpod.yml\n```\n\n2. Create a custom Dockerfile\n\n```bash\ntouch .gitpod.Dockerfile\n```\n\n3. Reference your newly created Dockerfile in your `.gitpod.yml`\n\n```yaml\nimage:\n  file: .gitpod.Dockerfile\n```\n\n4. Update your `.gitpod.Dockerfile` to install your dependency versions\n\n```dockerfile\nFROM gitpod/workspace-full:latest\n\nRUN bash -c 'VERSION=\"14.8.0\" \\\n    && source $HOME/.nvm/nvm.sh && nvm install $VERSION \\\n    && nvm use $VERSION && nvm alias default $VERSION'\n\nRUN echo \"nvm use default &>/dev/null\" >> ~/.bashrc.d/51-nvm-fix\n```\n\n5. Commit and push both `.gitpod.yml` and `.gitpod.Dockerfile`\n\n```bash\ngit commit -m \"configuring gitpod with javascript\" && git push","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/javascript","loc":{"lines":{"from":48,"to":88}}}}],["1710",{"pageContent":"5. Commit and push both `.gitpod.yml` and `.gitpod.Dockerfile`\n\n```bash\ngit commit -m \"configuring gitpod with javascript\" && git push\n```\n\n6. Start a **new workspace** from the branch with the committed `.gitpod.Dockerfile`\n\nFor example, opening: `gitpod.io/#https://github.com/gitpod-io/gitpod`\n\n7. Test your dependencies are correct in the new workspace\n\n```bash\nnode -v\n```\n\n> **Note:** If your changes are not taking effect, ensure your workspace is building from the correct [context](/docs/introduction/learn-gitpod/context-url), where your `gitpod.yml` or `gitpod.Dockerfile` are checked in to version control and are on the branch or commit that you are opening.\n\nSee [configure Docker](/docs/configure/workspaces/workspace-image) for more.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/javascript","loc":{"lines":{"from":88,"to":106}}}}],["1711",{"pageContent":"Build and run your application","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/javascript","loc":{"lines":{"from":108,"to":108}}}}],["1712",{"pageContent":"Building a JavaScript application\n\nTo build your application, you'll need to configure a [start task](/docs/configure/workspaces/tasks).\n\nStart tasks are processes that are initiated on every workspace start. Depending on your project setup, start tasks can be used to build your application, run your application directly, or start any necessary tools for the application to run, such as starting database processes.\n\n1. Add the command to build your application to your `.gitpod.yml`\n\n**Example with npm**\n\n```yaml\ntasks:\n  - init: npm install && npm run build\n```\n\n**Example with yarn**\n\n```yaml\ntasks:\n  - init: yarn install && yarn build\n```\n\n2. **Optional:** Validate by stopping and starting (restart) your workspace\n\n```bash\ngp stop\n```\n\n3. **Optional:** Validate your commands by running [`gp tasks`](/docs/references/gitpod-cli#tasks)\n\n```shell\ngp tasks","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/javascript","loc":{"lines":{"from":110,"to":141}}}}],["1713",{"pageContent":"3. **Optional:** Validate your commands by running [`gp tasks`](/docs/references/gitpod-cli#tasks)\n\n```shell\ngp tasks\n```\n\n> **Tip:** If you're using [VS Code Browser](/docs/references/ides-and-editors/vscode-browser) or [VS Code Desktop](/docs/references/ides-and-editors/vscode), then your tasks will open as terminal windows. You can configure their layout using the [openMode](/docs/configure/workspaces/tasks#openmode) property.\n\n> **Note:** We are using the `init` property so that we can perform application building during a [prebuild](/docs/configure/projects/prebuilds), for increased performance. We'll discuss prebuilds more later on.\n\nSee [start tasks](/docs/configure/workspaces/tasks) and [.gitpod.yml reference](/docs/references/gitpod-yml) for more.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/javascript","loc":{"lines":{"from":141,"to":151}}}}],["1714",{"pageContent":"Running a JavaScript application\n\nTo run your application, you have two options:\n\n1. **Update your start task command** - Starting your application using the `command` start task will run the start process on workspace start. With both [VS Code Browser](/docs/references/ides-and-editors/vscode) and [VS Code Desktop](/docs/references/ides-and-editors/vscode-browser), tasks are automatically opened in the terminal(s). With [IntelliJ](/docs/references/ides-and-editors/intellij) / [JetBrains Gateway](/docs/integrations/jetbrains-gateway), configured tasks can be viewed by running `gp tasks` in the workspace.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/javascript","loc":{"lines":{"from":153,"to":157}}}}],["1715",{"pageContent":"Using start tasks to run JavaScript\n\n1. Add a `command` for starting your application to your `.gitpod.yml`\n\n**Example with npm**\n\n```yaml\ntasks:\n  - init: npm install && npm run build\n    command: npm run dev\n```\n\n**Example with yarn**\n\n```yaml\ntasks:\n  - init: yarn install && yarn build\n    command: yarn start\n```\n\n2. **Optional:** Validate by stopping and starting (restart) your workspace\n\n```bash\ngp stop\n```\n\n3. **Optional:** Validate your commands by running [`gp tasks`](/docs/references/gitpod-cli#tasks)\n\n```shell\ngp tasks\n```","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/javascript","loc":{"lines":{"from":159,"to":189}}}}],["1716",{"pageContent":"Using ESLint for linting\n\nIf your project's `package.json` does not mention ESLint as a dependency then you have to install it first. For installing it add the following to the end of the `init` phase of your [.gitpod.yml](/docs/references/gitpod-yml) as shown:\n\n```yaml\ntasks:\n  - init: npm install && npm run build && npm install -g eslint\n```\n\nand then search for `eslint` in the extensions tab and then install it from there using the install button as shown in the screenshot.\n\n![Install ESLint in Gitpod](.../../../static/images/docs/eslint-extension.png)\n\n### Hot Module Replacement (HMR)\n\nEspecially when it comes to Frontend Projects, the dev-server should be able to auto-reload on file changes. The implementation varies from server to server. To make this work, some additional config is required:","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/javascript","loc":{"lines":{"from":191,"to":206}}}}],["1717",{"pageContent":"Vite\n\nVite 3+ works with Gitpod out of the box. However, if you are using Vite 2 you should add the following config:\n\n```js title=\"vite.config.js\"\nimport { defineConfig } from \"vite\";\n\nexport default defineConfig({\n  server: {\n    hmr: process.env.GITPOD_WORKSPACE_URL\n      ? {\n          protocol: \"wss\",\n          clientPort: 443,\n          host: process.env.GITPOD_WORKSPACE_URL.replace(\"https://\", \"3000-\"),\n        }\n      : true,\n  },\n});\n```","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/javascript","loc":{"lines":{"from":208,"to":226}}}}],["1718",{"pageContent":"Webpack\n\nIn your `.gitpod.yml` file, you should export the workspace url for the port your server runs into the environment.\n\n```yaml title=\".gitpod.yml\"\ntasks:\n  - init: npm install\n    command: |\n      export HMR_HOST=`gp url 3000`\n```\n\nAfter the workspace URL with the given port is exported to the environment, it can be used in the `webpack.config.js` to determine the right port and hostname.\n\n```js title=\"webpack.config.js\"\nmodule.exports = {\n  devServer: {\n    client: {\n      webSocketURL: {\n        hostname: process.env.HMR_HOST\n          ? new URL(process.env.HMR_HOST).hostname\n          : \"localhost\",\n        port: process.env.HMR_HOST ? 443 : 3000,\n        protocol: \"wss\",\n      },\n    },\n  },\n};\n```","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/javascript","loc":{"lines":{"from":228,"to":255}}}}],["1719",{"pageContent":"Use of Private Packages\n\nIf you want to use private packages from npm or yarn on Gitpod, you can use the [`NPM_TOKEN`](https://docs.npmjs.com/creating-and-viewing-access-tokens) environment variable. You can set it in your [Gitpod user settings](/docs/configure/projects/environment-variables#using-the-account-settings).","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/javascript","loc":{"lines":{"from":257,"to":259}}}}],["1720",{"pageContent":"Debug your JavaScript application in Gitpod\n\n### Debugging JavaScript applications in VS Code\n\nTo debug your application, you can use the [VS Code Browser](/docs/references/ides-and-editors/vscode-browser) or [VS Code Desktop](/docs/references/ides-and-editors/vscode) IDE. You can start debugging by clicking the `Debug` button in the IDE's status bar or by pressing `F5` or following the steps below:\n\n![Debugger Option in Gitpod VS Code](.../../../static/images/docs/debugger-option-vscode.webp)\n\n_You Can follow [this official blog](https://code.visualstudio.com/docs/editor/debugging) for more._","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/javascript","loc":{"lines":{"from":261,"to":269}}}}],["1721",{"pageContent":"Debugging JavaScript applications in JetBrains IDE (WebStorm)\n\nTo debug your application, you can use the [WebStorm](/docs/references/ides-and-editors/webstorm) IDE. You can start debugging by clicking the `Add Configurations` button in the IDE's top status bar.\n\n![Debugger Option in Gitpod WebStorm](.../../../static/images/docs/debugger-option-webstorm.webp)\n\n_You Can follow [this official blog](https://blog.jetbrains.com/webstorm/2018/01/how-to-debug-with-webstorm/) for more._","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/javascript","loc":{"lines":{"from":271,"to":277}}}}],["1722",{"pageContent":"Example Repositories\n\nHere are a few JavaScript/TypeScript example projects that are automated with Gitpod:","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/javascript","loc":{"lines":{"from":279,"to":281}}}}],["1723",{"pageContent":"|                          Repository                          |                                       Description                                       |                                                              Try it                                                               |\n| :----------------------------------------------------------: | :-------------------------------------------------------------------------------------: | :-------------------------------------------------------------------------------------------------------------------------------: |\n|    [Tesseract.js](https://github.com/naptha/tesseract.js)    |                     Pure JavaScript OCR for more than 100 Languages                     |    [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/naptha/tesseract.js)    |","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/javascript","loc":{"lines":{"from":283,"to":285}}}}],["1724",{"pageContent":"| [freeCodeCamp](https://github.com/freeCodeCamp/freeCodeCamp) | [freeCodeCamp.org](https://www.freecodecamp.org/)'s open source codebase and curriculum | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/freeCodeCamp/freeCodeCamp) |\n|     [Mozilla PDF.js](https://github.com/mozilla/pdf.js)      |                     PDF.js is a PDF viewer that is built with HTML5                     |      [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/mozilla/pdf.js)       |","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/javascript","loc":{"lines":{"from":286,"to":287}}}}],["1725",{"pageContent":"Recommended Reading\n\n- [Build Projects in a Gitpod Ephemeral Dev Environment — The Ultimate Guide](/guides/guide-ephemeral-dev-environment-on-gitpod)\n- [Sustainable Node.js development with only a browser](/blog/node-js-development).\n- [Developing a Nuxt.js app entirely in your browser](/blog/developing-nuxtjs-in-browser)\n- [Gitpodifying — The Ultimate Guide](/guides/gitpodify)\n- [Debugging Node.js applications in Theia](/blog/node-js-gitpod)","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/javascript","loc":{"lines":{"from":289,"to":295}}}}],["1726",{"pageContent":"---\nsection: languages\ntitle: Julia in Gitpod\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Julia in Gitpod\n\n## Example Repositories\n\nHere are a few Julia example projects that are already automated with Gitpod:\n\nA minimal example of a ready-to-code Julia developer environment is [JesterOrNot/Gitpod-Julia](https://github.com/JesterOrNot/Gitpod-Julia). Feel free to take a look.\n\nAnd to showcase a real-world Julia project in Gitpod, we've gitpodified the [Julia repository](https://github.com/JesterOrNot/Julia) itself! Try it via the following button:\n\n[![JesterOrNot/Julia](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/JesterOrNot/Julia)","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/julia","loc":{"lines":{"from":1,"to":20}}}}],["1727",{"pageContent":"---\nsection: languages\ntitle: Java in Gitpod\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Java in Gitpod\n\nGitpod comes with great support for Java. This guide walks you through how to fully configure a Java application using Gitpod.\n\n## Prerequisites\n\nThis guide assumes familiarity with:\n\n[Docker](https://docs.docker.com/), [YAML](https://yaml.org/spec/1.1/), [Linux](https://www.linux.org/), [Bash](https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html) and Linux [environment variables](https://wiki.archlinux.org/title/environment_variables).","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/java","loc":{"lines":{"from":1,"to":18}}}}],["1728",{"pageContent":"Getting started / Quick Start\n\n`youtube: ij1msCffQZA`\n\nTo see a full working Java application, take a look at [gitpod-io/spring-petclinic](https://github.com/gitpod-io/spring-petclinic/). To update an existing Java application, follow the steps below in this guide.\n\n<a href=\"https://gitpod.io/#https://github.com/gitpod-io/spring-petclinic\">\n    <img src=\"https://gitpod.io/button/open-in-gitpod.svg\" alt=\"Push\" align=\"center\" >\n</a>","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/java","loc":{"lines":{"from":20,"to":28}}}}],["1729",{"pageContent":"Installing dependencies\n\n### The default base image\n\nThe default Gitpod workspace image default is [workspace-full](https://github.com/gitpod-io/workspace-images) based on [Ubuntu](https://ubuntu.com/).\n\nAlong with other languages and tools, this base image includes:\n\n- [SDKMAN!](https://sdkman.io/) `v5.16.0` (`sdk version`)\n- [Java](https://www.java.com) `v11.0.16` (`java -version`)\n- [Gradle](https://gradle.org/) `v7.5.1` (`gradle -version`)\n- [Maven](https://maven.apache.org/) `v3.8.6` (`mvn -version`)\n\n> **Note:** We discuss how to set up a [custom base image](/docs/introduction/languages/java#setting-up-a-custom-dockerfile) later in the guide.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/java","loc":{"lines":{"from":30,"to":43}}}}],["1730",{"pageContent":"Updating Java, Maven & Gradle\n\nFor alternative versions to those provided in the Gitpod base image, with [SDKMAN!](https://sdkman.io/usage#listversions) you can quickly update your dependencies: `sdk install <candidate> [version]`\n\n> **Important:** Dynamically swapping Java, Maven or Gradle versions manually is a quick way to explore Gitpod. However, for day-to-day development **strongly recommend to add explicit dependency versions in your gitpod.yml or Dockerfile**.\n\n#### Updating Java version\n\n- `sdk list java` - to see available java versions\n- `sdk install java 18.0.1.fx-zulu` - to install a specific version\n\n#### Updating Maven version\n\n- `sdk list maven` - to see available maven versions\n- `sdk install maven 3.8.6` - to install a specific version\n\n#### Updating Gradle version\n\n- `sdk list gradle` - to see available gradle versions\n- `sdk install gradle 7.4.1` - to install a specific version","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/java","loc":{"lines":{"from":45,"to":64}}}}],["1731",{"pageContent":"Setting up a custom Dockerfile\n\n`youtube: jFsbmcXCRf8`\n\nTo ensure Gitpod workspaces always start with the correct dependencies, configure a Dockerfile:\n\n1. Create a `.gitpod.yml`\n\n```bash\ntouch .gitpod.yml\n```\n\n2. Create a custom Dockerfile\n\n```bash\ntouch .gitpod.Dockerfile\n```\n\n3. Reference your newly created Dockerfile in your `.gitpod.yml`\n\n```yaml\nimage:\n  file: .gitpod.Dockerfile\n```\n\n4. Update your `.gitpod.Dockerfile` to install your dependency versions\n\n```Dockerfile\nFROM gitpod/workspace-full\n\nUSER gitpod\n\nRUN bash -c \". /home/gitpod/.sdkman/bin/sdkman-init.sh && \\\n    sdk install java 17.0.3-ms && \\\n    sdk default java 17.0.3-ms\"\n```\n\n5. Commit and push both `gitpod.yml` and `.gitpod.Dockerfile`\n\n```bash\ngit commit -m \"configuring gitpod with java\" && git push","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/java","loc":{"lines":{"from":66,"to":106}}}}],["1732",{"pageContent":"5. Commit and push both `gitpod.yml` and `.gitpod.Dockerfile`\n\n```bash\ngit commit -m \"configuring gitpod with java\" && git push\n```\n\n6. Start a **new workspace** from the branch with the committed `.gitpod.Dockerfile`\n\nFor example, opening: `gitpod.io/#https://github.com/gitpod-io/gitpod`\n\n7. Test your dependencies are correct in the new workspace\n\n```bash\nsdk current\n```\n\n> **Note:** If your changes are not taking effect, ensure your workspace is building from the correct [context](/docs/introduction/learn-gitpod/context-url), where your `gitpod.yml` or `gitpod.Dockerfile` are checked in to version control and are on the branch or commit that you are opening.\n\nSee [configure Docker](/docs/configure/workspaces/workspace-image) for more.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/java","loc":{"lines":{"from":106,"to":124}}}}],["1733",{"pageContent":"Build and run your application","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/java","loc":{"lines":{"from":126,"to":126}}}}],["1734",{"pageContent":"Building a Java application\n\nTo build your application, you'll need to configure a [start task](/docs/configure/workspaces/tasks).\n\nStart tasks are processes that are initiated on every workspace start. Depending on your project setup, start tasks can be used to build your application, run your application directly, or start any necessary tools for the application to run, such as starting database processes.\n\n1. Add the command to build your application to your `.gitpod.yml`\n\n**Example with Gradle**\n\n```yaml\ntasks:\n  - init: gradle build\n```\n\n**Example with Maven**\n\n```yaml\ntasks:\n  - init: mvn package\n```\n\n2. **Optional:** Validate by stopping and starting (restart) your workspace\n\n```bash\ngp stop\n```\n\n3. **Optional:** Validate your commands by running [`gp tasks`](/docs/references/gitpod-cli#tasks)\n\n```shell\ngp tasks","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/java","loc":{"lines":{"from":128,"to":159}}}}],["1735",{"pageContent":"3. **Optional:** Validate your commands by running [`gp tasks`](/docs/references/gitpod-cli#tasks)\n\n```shell\ngp tasks\n```\n\n> **Tip:** If you're using [VS Code Browser](/docs/references/ides-and-editors/vscode-browser) or [VS Code Desktop](/docs/references/ides-and-editors/vscode), then your tasks will open as terminal windows. You can configure their layout using the [openMode](/docs/configure/workspaces/tasks#openmode) property.\n\n> **Note:** We are using the `init` property so that we can perform application building during a [prebuild](/docs/configure/projects/prebuilds), for increased performance. We'll discuss prebuilds more later on.\n\nSee [start tasks](/docs/configure/workspaces/tasks) and [.gitpod.yml reference](/docs/references/gitpod-yml) for more.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/java","loc":{"lines":{"from":159,"to":169}}}}],["1736",{"pageContent":"Running a Java application\n\nTo run your application, you have two options:\n\n1. **Update your start task command** - Starting your application using the `command` start task will run the start process on workspace start. With both [VS Code Browser](/docs/references/ides-and-editors/vscode) and [VS Code Desktop](/docs/references/ides-and-editors/vscode-browser), tasks are automatically opened in the terminal(s). With [IntelliJ](/docs/references/ides-and-editors/intellij) / [JetBrains Gateway](/docs/integrations/jetbrains-gateway), configured tasks can be viewed by running `gp tasks` in the workspace.\n2. **Use a run / launch configuration** - Alternatively, you can commit a [run/debug configuration in IntelliJ IDEA](/docs/introduction/languages/java#configuring-jetbrains-rundebug-configurations) or a [launch configuration in VS Code](/docs/introduction/languages/java#configuring-vs-code-launch-configurations) as a way to start your application.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/java","loc":{"lines":{"from":171,"to":176}}}}],["1737",{"pageContent":"Using start tasks to run Java\n\n1. Add a `command` for starting your application to your `.gitpod.yml`\n\n**Example with Gradle**\n\n```yaml\ntasks:\n  - init: gradle build\n    command: gradle run\n```\n\n**Example with Maven**\n\n```yaml\ntasks:\n  - init: mvn package\n    command: mvn exec:java\n```\n\n1. **Optional:** Validate by stopping and starting (restart) your workspace\n\n```bash\ngp stop\n```\n\n3. **Optional:** Validate your commands by running [`gp tasks`](/docs/references/gitpod-cli#tasks)\n\n```shell\ngp tasks\n```","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/java","loc":{"lines":{"from":178,"to":208}}}}],["1738",{"pageContent":"Configuring environment variables\n\n`youtube: dehln1E8ylY`\n\nGitpod supports encrypted, user-specific environment variables.\n\nEnvironment variables are stored as part of your user settings and can be used to set access tokens, or pass any other kind of user-specific information to your workspaces. You can set environment variables using `gp env`, or in your project and account settings.\n\nSee [environment variables](/docs/configure/projects/environment-variables) for more.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/java","loc":{"lines":{"from":210,"to":218}}}}],["1739",{"pageContent":"Configuring ports\n\nWhen your project starts a service that listens on a given port, Gitpod automatically serves traffic to this port of your application on an authenticated URL.\n\nIf you want to configure ports, such as: their visibility, what Gitpod does when it detects a new port being available, etc, you can do that in the ports section of the .gitpod.yml configuration file.\n\nFor example, add the following to your `.gitpod.yml` to configure port `3000` to open in your browser on workspace start.\n\n```yaml\nports:\n  - port: 3000\n    onOpen: open-browser\n```\n\nSee [configuring ports](/docs/configure/workspaces/ports) for more","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/java","loc":{"lines":{"from":220,"to":234}}}}],["1740",{"pageContent":"Configuring localhost\n\nYour development application might rely on the `localhost` hostname to effectively run.\n\nTo ensure your localhost address works with Gitpod, you have two options:\n\n1. **Replace localhost references** - Swap `localhost` references within the application with the output of `gp url <port>`, typically via an [environment variable](/docs/configure/projects/environment-variables).\n\n**Example:** Using the `DEV_ENVIRONMENT_HOST` environment variable instead of localhost within the application, configured in the `command` of the `.gitpod.yml` start tasks.\n\n```yaml\ntasks:\n  - command: |\n    export DEV_ENVIRONMENT_HOST=`gp url 3000`\n    java <application-entry>","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/java","loc":{"lines":{"from":236,"to":250}}}}],["1741",{"pageContent":"2. **Setup localhost port forwarding** - Connect your local machine with your running workspace means that you don't need to replace localhost references, to do that you'll need to configure port forwarding. Port forwarding is useful if you're working with a framework that needs localhost, and the application cannot be reconfigured.\n\nWith [VS Code Desktop](/docs/references/ides-and-editors/vscode), local port-forwarding is handled automatically and can be configured via the ports view within VS Code Desktop.\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Port forwarding in VS Code Desktop\" src=\"/images/editors/port-forwarding-vscode-desktop.png\">\n    <figcaption>Port forwarding in VS Code Desktop</figcaption>\n</figure>\n\nWith IntelliJ IDEA using [JetBrains Gateway](/docs/integrations/jetbrains-gateway) you can setup remote port-forwarding manually.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/java","loc":{"lines":{"from":253,"to":262}}}}],["1742",{"pageContent":"With IntelliJ IDEA using [JetBrains Gateway](/docs/integrations/jetbrains-gateway) you can setup remote port-forwarding manually.\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Port forwarding in a JetBrains IDE\" src=\"/images/jetbrains-gateway/port-forward-jetbrains.png\">\n    <figcaption>Port forwarding in a JetBrains IDE</figcaption>\n</figure>\n\nAlternatively, by using [local companion](/docs/references/ides-and-editors/local-companion) all workspace ports will be forwarded automatically.\n\nSee [configuring ports](/docs/configure/workspaces/ports) for more.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/java","loc":{"lines":{"from":262,"to":271}}}}],["1743",{"pageContent":"Configuring VS Code extensions\n\nTo set default plugins to be installed for all users starting a workspace for the project, add a list of the JetBrains plugin identifiers to your `.gitpod.yml` under `vscode.extensions`.\n\n```yaml\nvscode:\n  extensions:\n    - vscjava.vscode-java-pack\n```\n\nSee [.gitpod.yml reference](/docs/references/gitpod-yml) for more.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/java","loc":{"lines":{"from":273,"to":283}}}}],["1744",{"pageContent":"Configuring VS Code Launch configurations\n\nLaunch configurations can be shared by committing the `.vscode/launch.json` file to version control. To use a launch configuration with Java, need Java version 11 or above, and some VS Code extensions. Assuming you have configured your base image with a compatible JDK version as described above, a simple way to get set up is by adding the Extension Pack for Java will configure the correct VS Code extensions. Alternatively, you can selectively choose the extensions to install.\n\n```yaml\nvscode:\n  extensions:\n    - vscjava.vscode-java-pack\n```\n\nSee [Debugging in Visual Studio Code](https://code.visualstudio.com/docs/editor/debugging#_launch-configurations) and [VS Code Java Extensions](https://code.visualstudio.com/docs/java/extensions) for more.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/java","loc":{"lines":{"from":285,"to":295}}}}],["1745",{"pageContent":"Configuring JetBrains Run/Debug configurations\n\nTo share your run/debug configurations, you can commit their definitions to source control. Since the `.idea` folder contains lots of information used for IntelliJ (which can include sensitive information or secrets) you may wish to ignore the `.idea` from version control, and explicitly allow `.idea/runConfigurations`.\n\nAdd run/debug configurations to git, by adding the following to your `.gitignore`.\n\n```\n/.idea/*\n!/.idea/runConfigurations\n```\n\nSee [JetBrains Run/Debug configuration](https://www.jetbrains.com/help/idea/run-debug-configuration.html) documentation for more.\n\n### Configuring JetBrains Plugins\n\nTo set default extensions to be installed for all users starting a workspace for the project, add a list of the VS Code extension identifiers to your `.gitpod.yml`.\n\n```yaml\njetbrains:\n  intellij:\n    plugins:\n      - com.intellij.lang.jsgraphql\n```\n\nSee [.gitpod.yml reference](/docs/references/gitpod-yml) for more.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/java","loc":{"lines":{"from":297,"to":321}}}}],["1746",{"pageContent":"Optimising Java Applications\n\nGitpod prebuilds reduce wait time by installing dependencies or running builds before you start a new workspace. By default, Gitpod prepares prebuilt workspaces for all changes on the default branch and pull/merge requests coming from the same repository. However, prebuilds save only the `workspace` directory, any files stored outside of the workspace directory will be lost. For Java applications, we recommend to execute build commands within an `init` startup task.\n\n`youtube: DwkoOz1GSVg`\n\nSee [prebuilds](/docs/configure/projects/prebuilds) and [start tasks](/docs/configure/workspaces/tasks) for more.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/java","loc":{"lines":{"from":323,"to":329}}}}],["1747",{"pageContent":"Optimising JetBrains indexing\n\n> JetBrains prebuilds support (via gitpod.yml) is currently in [Alpha](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/6576).\n\nGitpod currently has early support for improved indexing performance with JetBrains IDEs that works out-of-the-box. You can enable this setting via the `.gitpod.yml`.\n\n**Example:** Index both the stable and latest of the IntelliJ IDE\n\n```yaml\njetbrains:\n  intellij:\n    prebuilds:\n      version: stable\n```","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/java","loc":{"lines":{"from":331,"to":344}}}}],["1748",{"pageContent":"Caching Maven dependencies\n\nThe default cache location for Maven is the `.m2` directory. However, since this location is by default outside of the `/workspace` directory caches will not be stored as part of a prebuild.\n\nIf you are using the [workspace-full](https://github.com/gitpod-io/workspace-images) image, Maven caching configuration is already enabled.\n\nTo configure Maven caching, add the following to your custom [Dockerfile](/docs/configure/workspaces/workspace-image).\n\n1. Create an `.m2` directory in the users (`gitpod`) home directory.\n\n```bash\nmkdir /home/gitpod/.m2\n```\n\n2. Create a `settings.xml` and configure `localRepository` within `workspace`.\n\n```bash\nprintf '<settings>\\n  <localRepository>/workspace/m2-repository/</localRepository>\\n</settings>\\n' > /home/gitpod/.m2/settings.xml\n```\n\nSee [prebuilds](/docs/configure/projects/prebuilds) for more.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/java","loc":{"lines":{"from":346,"to":366}}}}],["1749",{"pageContent":"Caching Gradle dependencies\n\nThe default location of the gradle home is `$USER_HOME/.gradle`, however, since this location is by default outside of the `/workspace` directory caches will not be stored as part of a prebuild.\n\nIf you are using the [workspace-full](https://github.com/gitpod-io/workspace-images) image, Gradle caching configuration is already enabled.\n\nTo configure Gradle caching, add the following to your custom [Dockerfile](/docs/configure/workspaces/workspace-image).\n\n```\nENV GRADLE_USER_HOME=/workspace/.gradle/\n```\n\nSee [prebuilds](/docs/configure/projects/prebuilds) for more.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/java","loc":{"lines":{"from":368,"to":380}}}}],["1750",{"pageContent":"Personalizing Gitpod\n\nAll settings introduced so far, such as `.gitpod.yml` and `Dockerfile` apply for all users using of the gitpod project. To apply personalisation, consider setting up [dotfiles](/docs/configure/user-settings/dotfiles), the Gitpod [Browser Extension](/docs/configure/user-settings/browser-extension),\n\n### Dotfiles\n\nDotfiles allow you to setup per-user configurations in your Gitpod workspace, such as modifying your shell and adding command aliases. To configure Gitpod to use your own dotfiles for all your workspaces, enter the URL of a public dotfiles repository in your Gitpod [preferences](https://gitpod.io/preferences).\n\nSee [dotfiles](/docs/configure/user-settings/dotfiles) for more.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/java","loc":{"lines":{"from":382,"to":390}}}}],["1751",{"pageContent":"Browser Extension\n\n![Browser Extension](../../../static/images/docs/browser-extension-lense.png)\n\nTo make opening Gitpod workspaces easier, install the Gitpod browser extension, which enables an \"Open in Gitpod\" button on GitHub, GitLab and Bitbucket.\n\nSee [Browser Extension](/docs/configure/user-settings/browser-extension) for more.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/java","loc":{"lines":{"from":392,"to":398}}}}],["1752",{"pageContent":"Configure your IDE or editor\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Updating Gitpod IDE preferences\" src=\"/images/editors/select-jetbrains-ide.webm\" type=\"video/webm\"></video>\n    <figcaption>Updating Gitpod IDE preferences to a JetBrains IDE</figcaption>\n</figure>\n\nWith Gitpod, you can work with [VS Code Browser](/docs/references/ides-and-editors/vscode-browser), [VS Code Desktop](/docs/references/ides-and-editors/vscode) or [JetBrains](/docs/integrations/jetbrains-gateway) IDEs, such as [IntelliJ IDEA](/docs/references/ides-and-editors/intellij). Setting your preference ensures all future workspaces start with the chosen IDE or editor. Visit the [preferences](https://gitpod.io/preferences) page to configure these settings.\n\nSee [IDEs & Editors](/docs/references/ides-and-editors) for more.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/java","loc":{"lines":{"from":400,"to":409}}}}],["1753",{"pageContent":"VS Code Desktop Settings Sync\n\n![Enable Settings Sync with Gitpod](/images/editors/enable-signin-with-gitpod-light-theme.png)\n![Enable Settings Sync with Gitpod](/images/editors/enable-signin-with-gitpod-dark-theme.png)\n_Enable Settings Sync with Gitpod_\n\nVS Code Desktop by default is not setup to sync your VS Code settings (e.g. your fonts, layouts, etc) with VS Code running in the browser of Gitpod. You can configure Gitpod to sync settings between browser and desktop by running the command palette action \"Settings Sync: Enable signing in with Gitpod\" from the Gitpod VS Code extension.\n\nSee [VS Code settings sync](/docs/references/ides-and-editors/settings-sync) for more.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/java","loc":{"lines":{"from":411,"to":419}}}}],["1754",{"pageContent":"---\nsection: languages\ntitle: Kotlin in Gitpod\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Kotlin in Gitpod\n\nTo work with Kotlin in Gitpod, you will need to properly configure your repository. Here is how to do it.\n\n## Installing Kotlin\n\nTo install Kotlin in Gitpod add the following to your [.gitpod.Dockerfile](/docs/configure/workspaces/workspace-image):\n\n```dockerfile\nRUN brew install kotlin\n```\n\nA full example could look like this:\n\n```dockerfile\nFROM gitpod/workspace-full\n\nUSER gitpod\nRUN brew install kotlin\n```","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/kotlin","loc":{"lines":{"from":1,"to":29}}}}],["1755",{"pageContent":"VS Code extensions\n\n### Kotlin Language\n\nThis extension provides Kotlin language support for Gitpod and other IDEs, with:\n\n- Syntax highlighting\n- Code snippets\n- Region code folding\n\nTo get it, open Gitpod's **Extensions** panel (left vertical menu), then search for \"Kotlin\" and install the extension by Mathias Fröhlich for your project. Next, commit the [.gitpod.yml](/docs/references/gitpod-yml) file that was automatically created (or updated) by Gitpod.\n\n### Code Runner\n\nWhile this extension isn't Kotlin-specific, but allows to run code snippets in many different languages, including Kotlin.\n\nTo get it, open Gitpod's Extensions panel, then search for \"Code Runner\" and install it for your project.\n\n## Try it\n\nPlease use the button below to see a gitpodified [Kotlin example project](https://github.com/gitpod-io/Gitpod-Kotlin) in Gitpod:\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-io/Gitpod-Kotlin)","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/kotlin","loc":{"lines":{"from":31,"to":53}}}}],["1756",{"pageContent":"---\nsection: languages\ntitle: LaTeX in Gitpod\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# LaTeX in Gitpod\n\nThis tutorial will demonstrate how to configure Gitpod to work with [LaTeX](https://www.latex-project.org/) files. You can find a complete [example repository](https://github.com/ptrottier/latex) at the end.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/latex","loc":{"lines":{"from":1,"to":12}}}}],["1757",{"pageContent":"Installing LaTeX\n\nFirst, you will probably want to install LaTeX in Gitpod. To do this, add a new file to your repository called [.gitpod.Dockerfile](/docs/configure/workspaces/workspace-image), and add the following content to it:\n\n```dockerfile\nFROM gitpod/workspace-full\n\n# Install LaTeX\nRUN sudo apt-get -q update && \\\n    sudo apt-get install -yq texlive && \\\n    sudo rm -rf /var/lib/apt/lists/*\n```\n\nNext, create a file called [.gitpod.yml](/docs/references/gitpod-yml) and add the following to it:\n\n```YAML\nimage:\n  file: .gitpod.Dockerfile\n```\n\nNow commit both files into source control, and push them to your GitHub or GitLab repository.\n\nThis will be your base configuration for LaTeX in Gitpod — from now on, every time you create a new Gitpod workspace for your repository, it will be configured as specified in your `.gitpod.yml` and `.gitpod.Dockerfile`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/latex","loc":{"lines":{"from":14,"to":36}}}}],["1758",{"pageContent":"Automatically compiling LaTeX files on save\n\nOne way to achieve this is to install `inotify-tools` by modifying your earlier `.gitpod.Dockerfile` like so:\n\n```dockerfile\nFROM gitpod/workspace-full\n\n# Install LaTeX\nRUN sudo apt-get -q update && \\\n    sudo apt-get install -yq texlive-full inotify-tools && \\\n    sudo rm -rf /var/lib/apt/lists/*\n```\n\nNext, modify your `.gitpod.yml` like so:\n\n```YAML\nimage:\n  file: .gitpod.Dockerfile\n\ntasks:\n  - name: LaTeX auto-rebuild\n    command: >\n      while find . -name '*.tex' | xargs inotifywait -qqre modify .; do \\\n        latexmk -pdf ; \\\n      done\n  - name: Terminal\n```\n\nThis will start a watcher process that automatically recompiles your `*.tex` files when they are changed. Note: The watcher process will start in a separate Terminal on every workspace start.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/latex","loc":{"lines":{"from":38,"to":66}}}}],["1759",{"pageContent":"VSCode Extensions\n\n### TexLab\n\nThis extension provides rich editing support for the LaTeX typesetting system powered by the [TexLab](https://github.com/latex-lsp/texlab-vscode) language server.\n\nTo install it in Gitpod, simply download the corresponding `*.vsix` file [Open VSX](https://open-vsx.org/), and then drag-and-drop it into Gitpod's Extensions view (which can be found in the left vertical menu bar).\n\nThis will automatically append something like this to your `.gitpod.yml` file:\n\n```yml\nvscode:\n  extensions:\n    - efoerster.texlab@1.10.0:/Vq+k9Ug/81LYWajjTgMpA==\n```\n\n(Note: You can also append these lines yourself if you don't want to download & re-upload the `*.vsix` file.)\n\n### LaTeX Workshop\n\nAnother great LaTeX extension is [LaTeX Workshop](https://github.com/James-Yu/LaTeX-Workshop):\n\n> Boost LaTeX typesetting efficiency with preview, compile, autocomplete, colorize, and more.\n\nIt is also available [on Open VSX](https://open-vsx.org/extension/James-Yu/latex-workshop).","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/latex","loc":{"lines":{"from":68,"to":92}}}}],["1760",{"pageContent":"LaTeX Snippets\n\nThere is also [LaTeX Snippets](https://github.com/JeffersonQin/VSCode-LaTeX-Snippets):\n\n> This extension includes a variety of snippets for LaTeX including making environments and plotting images for functions, etc.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/latex","loc":{"lines":{"from":94,"to":98}}}}],["1761",{"pageContent":"Try it!\n\nTo see a complete minimal example repository with a Gitpod configuration for LaTeX, including most of the tools we've covered, see [ptrottier/latex](https://github.com/ptrottier/latex). You can try it in your browser:\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/ptrottier/latex)","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/latex","loc":{"lines":{"from":100,"to":104}}}}],["1762",{"pageContent":"---\nsection: languages\ntitle: PHP in Gitpod\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# PHP in Gitpod\n\nGitpod supports PHP right out of the box, but more advanced features such as debugging can be configured, so here is how to do it!\n\n> There is also an awesome community project that utilizes [ddev](https://github.com/drud/ddev) with Gitpod and makes things much easier.\n> Be sure to check it out first from below!\n>\n> https://drud.github.io/ddev-gitpod-launcher/\n>\n> With it, you can run XDebug out of the box, change PHP versions on the fly, and much more!","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/php","loc":{"lines":{"from":1,"to":19}}}}],["1763",{"pageContent":"Example Repositories\n\n<div class=\"overflow-x-auto\">","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/php","loc":{"lines":{"from":21,"to":23}}}}],["1764",{"pageContent":"| Repository                                                         | Description                                                                    | Try it                                                                                                                                        |\n| ------------------------------------------------------------------ | ------------------------------------------------------------------------------ | --------------------------------------------------------------------------------------------------------------------------------------------- |\n| [symfony-demo](https://github.com/gitpod-io/symfony-demo)          | A PHP/Symfony reference application following best practices                   | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-io/symfony-demo)                |","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/php","loc":{"lines":{"from":25,"to":27}}}}],["1765",{"pageContent":"| [magento2gitpod](https://github.com/nemke82/magento2gitpod)        | Magento 2 optimized setup for Gitpod: Nginx, MySQL, PHP 7.2, PHP-FPM and more  | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/nemke82/magento2gitpod)                |\n| [koel](https://github.com/phanan/koel)                             | A personal music streaming server that works                                   | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/phanan/koel)                           |\n| [drupal](https://github.com/bserem/gitpod-drupal-mysql-starterkit) | Drupal 9 with MySQL, suitable for site building and contrib module development | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/bserem/gitpod-drupal-mysql-starterkit) |","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/php","loc":{"lines":{"from":28,"to":30}}}}],["1766",{"pageContent":"| [phpmyadmin](https://github.com/apolopena/gitpod-phpmyadmin)       | A phpMyAdmin example with Node.js, a REST API and MySQL for data persistence   | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/apolopena/gitpod-phpmyadmin)           |","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/php","loc":{"lines":{"from":31,"to":31}}}}],["1767",{"pageContent":"</div>","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/php","loc":{"lines":{"from":33,"to":33}}}}],["1768",{"pageContent":"Switching PHP versions\n\nGitpod installs PHP from [Ondřej Surý's PPA](https://launchpad.net/~ondrej/+archive/ubuntu/php) in [here](https://github.com/gitpod-io/workspace-images/blob/main/chunks/tool-nginx/Dockerfile). The default version should be set to PHP8.\n\nBut let's say you want to switch to PHP7.4, follow along!\nAt first, add a [.gitpod.Dockerfile](/docs/configure/workspaces/workspace-image) file on your repo with the following content in it:\n\n```dockerfile\n# You can find the new timestamped tags here: https://hub.docker.com/r/gitpod/workspace-full/tags\nFROM gitpod/workspace-full:2022-05-08-14-31-53\n\n# Change your version here\nRUN sudo update-alternatives --set php $(which php7.4)\n```\n\nSecondly, reference the above Dockerfile in your `.gitpod.yml` configuration file, like so:\n\n```yaml\nimage:\n  file: .gitpod.Dockerfile\n```\n\nNow you can [See it in action on a new workspace](/docs/references/gitpod-yml#see-it-in-action)","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/php","loc":{"lines":{"from":35,"to":57}}}}],["1769",{"pageContent":"Debugging PHP in Gitpod\n\n![PHP debugging example](../../../static/images/docs/phpDebug.png)\n\nThe PHP Debug extension allows debugging PHP applications from within Gitpod.\n\nTo get this extension for your project, you must do two things:\n\nFirst, you must create a [.gitpod.Dockerfile](/docs/configure/workspaces/workspace-image) for your repository:\n\n```dockerfile\nFROM gitpod/workspace-full:2022-05-08-14-31-53\n\nRUN sudo install-packages php-xdebug\n```\n\nSecond, reference the above Dockerfile in a [.gitpod.yml](/docs/references/gitpod-yml) file, and then also install the extension, like so:\n\n```yaml\nimage:\n  file: .gitpod.Dockerfile\n\nvscode:\n  extensions:\n    - felixfbecker.php-debug","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/php","loc":{"lines":{"from":59,"to":83}}}}],["1770",{"pageContent":"Now you can [See it in action on a new workspace](/docs/references/gitpod-yml#see-it-in-action)\n\nLater, you can head over to `Run and Debug` on the left hand side and have fun debugging PHP! You can also create a `launch.json` file.\n\nFinally, here is a full [example repository](https://github.com/gitpod-io/Gitpod-PHP-Debug) containing the complete Gitpod PHP debug configuration described above. You can try it by clicking here:\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-io/Gitpod-PHP-Debug)","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/php","loc":{"lines":{"from":86,"to":92}}}}],["1771",{"pageContent":"PECL Package Manager\n\nGitpod's default workspace image also comes with the [PECL](https://pecl.php.net/) package manager pre-installed. To install packages with it, you must use `sudo pecl install <EXTENSION>` in your repository's [.gitpod.Dockerfile](/docs/configure/workspaces/workspace-image), e.g. like so:\n\n```dockerfile\nFROM gitpod/workspace-full\n\nRUN sudo pecl channel-update pecl.php.net && \\\n    sudo pecl install <EXTENSION>\n```\n\nwhere `<EXTENSION>` is the PHP extension you want to install, e.g. `xdebug`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/php","loc":{"lines":{"from":94,"to":105}}}}],["1772",{"pageContent":"Setting GitHub token to Composer\n\nSome composer plugins like [symfony/flex](https://github.com/symfony/flex) does direct API call against GitHub to fetch additional information. These unauthenticated requests will be rate-limited and may fail your task steps. To fix this behavior we can use the default credential-helper to obtain a GitHub Token and configure composer properly\n\n```bash\ncomposer config --global github-oauth.github.com $(printf '%s\\n' host=github.com | gp credential-helper get | sort | head -2 | tail -1 | sed 's;password=;;')\n```\n\n## Further Reading\n\n- <a class=\"no-nowrap\" href=\"https://notes.etin.space/posts/gitpodifying-a-new-laravel-application\">Gitpodifying a new Laravel Application</a> by Etin Obaseki","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/php","loc":{"lines":{"from":107,"to":117}}}}],["1773",{"pageContent":"---\nsection: languages\ntitle: Python in Gitpod\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Python in Gitpod\n\nGitpod comes with great support for Python built-in. Still, depending on your project, you might want to further optimize the experience.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/python","loc":{"lines":{"from":1,"to":12}}}}],["1774",{"pageContent":"Python Project Examples\n\nBefore we get started, here are some examples of already-[gitpodified](/guides/gitpodify) repositories!\n\n<div class=\"overflow-x-auto\">","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/python","loc":{"lines":{"from":14,"to":18}}}}],["1775",{"pageContent":"| Repository                                                                                | Description                                               | Try it                                                                                                                                         |\n| ----------------------------------------------------------------------------------------- | --------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------- |\n| [python-flask-api-tutorial](https://github.com/breatheco-de/python-flask-api-tutorial)    | A step by step Todo List API tutorial with Flask + Python | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/breatheco-de/python-flask-api-tutorial) |","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/python","loc":{"lines":{"from":20,"to":22}}}}],["1776",{"pageContent":"| [django-locallibrary-tutorial](https://github.com/gitpod-io/django-locallibrary-tutorial) | An example website written in Django by MDN               | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-io/django-locallibrary-tutorial) |\n| [Gitpod-PyQt](https://github.com/gitpod-io/Gitpod-PyQt)                                   | A PyQt example for Gitpod                                 | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-io/Gitpod-PyQt)                  |\n| [wxPython-example](https://github.com/gitpod-io/wxPython-example)                         | A wxPython example for Gitpod                             | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-io/wxPython-example)             |","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/python","loc":{"lines":{"from":23,"to":25}}}}],["1777",{"pageContent":"| [template-python-django](https://github.com/gitpod-io/template-python-django)             | A Django example for Gitpod                               | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-io/template-python-django)       |\n| [template-python-flask](https://github.com/gitpod-io/template-python-flask)               | A Flask example for Gitpod                                | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-io/template-python-flask)        |","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/python","loc":{"lines":{"from":26,"to":27}}}}],["1778",{"pageContent":"</div>","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/python","loc":{"lines":{"from":29,"to":29}}}}],["1779",{"pageContent":"Pandas\n\nWelcome data scientists! This part of the guide will show you how to configure Gitpod for Pandas development.\n\n### Try Pandas in Gitpod\n\nTo see a minimal project with Pandas installed and configured, please check out [gitpod-io/Gitpod-Pandas](https://github.com/gitpod-io/Gitpod-Pandas):\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-io/Gitpod-Pandas)\n\n### Use Gitpod for Pandas development\n\nPandas Team has their official docs on how to use Gitpod for Pandas development. Please check out [Pandas Team's Gitpod guide](https://pandas.pydata.org/docs/dev/development/contributing_gitpod.html).\n\n## Jupyter Notebooks in VSCode\n\nFor the best experience with Jupyter, please open your Gitpod workspaces in [VSCode Desktop](/docs/references/ides-and-editors/vscode).","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/python","loc":{"lines":{"from":31,"to":47}}}}],["1780",{"pageContent":"Python Versions\n\nRun `pyenv versions` to see which Python versions are pre-installed in Gitpod.\n\nThe easiest way to install a new Python version is to use `pyenv install <VERSION>`. For example, suppose you wanted to install Python `3.6.4`, you would run `pyenv install 3.6.4`.\n\nYou can switch between Python versions using `pyenv local <VERSION>`. For example, if you wanted to switch to Python version `2.7.17` you would run `pyenv local 2.7.17`. This will create a `.python-version` file that controls which Python version is the default in your project.\n\nIf you want to setup a [custom dockerfile](/docs/configure/workspaces/workspace-image#use-a-custom-dockerfile) so that you don't have to repeat the process, here's how your `.gitpod.Dockerfile` could look like:\n\n```dockerfile\n# You could use `gitpod/workspace-full` as well.\nFROM gitpod/workspace-python\n\nRUN pyenv install 3.11 \\\n    && pyenv global 3.11\n```","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/python","loc":{"lines":{"from":49,"to":65}}}}],["1781",{"pageContent":"[Start tasks](/docs/configure/workspaces/tasks)\n\nYou can start building your project when, or even [before](/docs/configure/projects/prebuilds) you start your Gitpod workspace. Are you using a `requirements.txt` file to manage dependencies? If so, add this to your [.gitpod.yml](/docs/references/gitpod-yml) to automatically pre-install all dependencies when starting a workspace:\n\n```yaml\ntasks:\n  - init: pip3 install -r requirements.txt\n    command: python3 main.py\n```","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/python","loc":{"lines":{"from":67,"to":75}}}}],["1782",{"pageContent":"Linting\n\nYou can <a class=\"no-nowrap\" href=\"https://github.com/palantir/python-language-server#configuration\">create a `setup.cfg` or a `pycodestyle.cfg` in the project root</a> and [adjust pycodestyle](http://pycodestyle.pycqa.org/en/latest/intro.html#configuration) rules there like this:\n\n```toml\n[pycodestyle]\nignore = E226,E302,E41\nmax-line-length = 160\nstatistics = True\n```\n\nYou'll need to refresh the browser in order to update these rule. [Source](https://github.com/gitpod-io/gitpod/issues/640#issuecomment-506622491).","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/python","loc":{"lines":{"from":77,"to":88}}}}],["1783",{"pageContent":"VSCode Extensions\n\nWhile the most popular Python VSCode extensions are built into Gitpod, here are a few \"nice to have\" extensions that you can use as well.\n\n### ARepl for Python\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"ARepl extension example\" src=\"/images/docs/AReplExample.webm\" type=\"video/webm\"></video>\n    <figcaption>ARepl extension example</figcaption>\n</figure>\n\nARepl for Python is helpful for constantly checking your code and debugging.\nTo install this extension for your repository, add the following to your [.gitpod.yml](/docs/references/gitpod-yml):\n\n```yaml\nvscode:\n  extensions:\n    - almenon.arepl\n```","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/python","loc":{"lines":{"from":90,"to":108}}}}],["1784",{"pageContent":"Python Test Explorer\n\n![Python test explorer example](../../../static/images/docs/python_Test_In_Gitpod.png)\nEasily test your python code with the Python Test Explorer.\nTo add this to your repository add the following to your [.gitpod.yml](/docs/references/gitpod-yml)\n\n```yaml\nvscode:\n  extensions:\n    - littlefoxteam.vscode-python-test-adapter@0.3.16:tZ/6xOSSdKUaq6JCUVkD+A==\n```","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/python","loc":{"lines":{"from":110,"to":120}}}}],["1785",{"pageContent":"GUI Applications with wxPython\n\nTo install wxPython to your repository please add the following to your [.gitpod.Dockerfile](/docs/configure/workspaces/workspace-image). If you don't have one, simply run [`gp init`](/docs/references/gitpod-cli) and commit the two generated files.\n\n```dockerfile\n# This will pull the official Gitpod `vnc` image\n# which has much of what you need to start\nFROM gitpod/workspace-full-vnc\n\nUSER gitpod\n\n# Install wxPython dependencies\nRUN sudo apt-get -q update && \\\n    sudo DEBIAN_FRONTEND=noninteractive apt-get install -yq freeglut3-dev python3.7-dev libpython3.7-dev libgl1-mesa-dev libglu1-mesa-dev libgstreamer-plugins-base1.0-dev libgtk-3-dev libnotify-dev libsdl2-dev libwebkit2gtk-4.0-dev libxtst-dev libgtk2.0-dev && \\\n    sudo rm -rf /var/lib/apt/lists/*\n\n# Install wxPython\nRUN pip3 install -U -f https://extras.wxpython.org/wxPython4/extras/linux/gtk3/ubuntu-18.04/ wxPython","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/python","loc":{"lines":{"from":122,"to":139}}}}],["1786",{"pageContent":"Here is a corresponding [.gitpod.yml](/docs/references/gitpod-yml) example:\n\n```yaml\nimage:\n  file: .gitpod.Dockerfile\n\n# This will expose all necessary ports needed for your VNC image\nports:\n  - port: 6080\n    onOpen: open-preview\n  - port: 5900\n    onOpen: ignore\n  - port: 35900\n    onOpen: ignore\n\n# This will make it so that on workspace start it will run a file called `app.py`\ntasks:\n  - command: python3 app.py","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/python","loc":{"lines":{"from":142,"to":159}}}}],["1787",{"pageContent":"<br>\nWe also support other GUI frameworks such as `Kivy` and `PyQt`\n<br>\nHere are some other examples of Python GUI applications in Gitpod:\n\n<div class=\"overflow-x-auto\">","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/python","loc":{"lines":{"from":162,"to":167}}}}],["1788",{"pageContent":"| Name                                                              | Framework | Try it                                                                                                                              |\n| ----------------------------------------------------------------- | --------- | ----------------------------------------------------------------------------------------------------------------------------------- |\n| [Tic-Tac-Toe-GUI](https://github.com/JesterOrNot/Tic-Tac-Toe-GUI) | Kivy      | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/JesterOrNot/Tic-Tac-Toe-GUI) |\n| [Pong](https://github.com/JesterOrNot/Pong)                       | Kivy      | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/JesterOrNot/Pong)            |","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/python","loc":{"lines":{"from":169,"to":172}}}}],["1789",{"pageContent":"| [Gitpod-PyQt](https://github.com/gitpod-io/Gitpod-PyQt)           | PyQt      | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-io/Gitpod-PyQt)       |","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/python","loc":{"lines":{"from":173,"to":173}}}}],["1790",{"pageContent":"</div>\n\n<br>","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/python","loc":{"lines":{"from":175,"to":177}}}}],["1791",{"pageContent":"Debugging\n\nHere is a quick clip on how to automatically configure debugging for Python!\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Python debugging example\" src=\"/images/docs/PythonDebug.webm\" type=\"video/webm\"></video>\n    <figcaption>Python debugging example</figcaption>\n</figure>\n\nSo, basically in this video we:\n\n1. First, open the Python file that we want to debug\n2. Then, go to the debug menu and select \"Add Configuration...\"\n3. Next, in the dropdown choose \"Python\"\n4. Next, choose \"Python File\" as the debug configuration\n5. Finally, start debugging your Python program!\n\nYou can also create the Python debug configuration file manually\n\nTo start debugging your Python application in Gitpod, please create a new directory called `.theia/`, and inside add a file called `launch.json`, finally, add the following to it:","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/python","loc":{"lines":{"from":179,"to":198}}}}],["1792",{"pageContent":"To start debugging your Python application in Gitpod, please create a new directory called `.theia/`, and inside add a file called `launch.json`, finally, add the following to it:\n\n```json\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Python: Current File\",\n      \"type\": \"python\",\n      \"request\": \"launch\",\n      \"program\": \"${file}\",\n      \"console\": \"internalConsole\"\n    }\n  ]\n}","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/python","loc":{"lines":{"from":198,"to":212}}}}],["1793",{"pageContent":"Then, simply open the Python file you want to debug, open the Debug panel (in the left vertical toolbar, click the icon with the crossed-out-spider), and click the green \"Run\" button.\n\n<br>\n\nTo see a basic repository with Python debugging enabled, please check out [gitpod-io/Gitpod-Python-Debug](https://github.com/gitpod-io/Gitpod-Python-Debug):\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-io/Gitpod-Python-Debug)\n\n<br>","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/python","loc":{"lines":{"from":215,"to":223}}}}],["1794",{"pageContent":"Further Reading\n\n- **_[VSCode documentation for Python debugging](https://code.visualstudio.com/docs/python/debugging)_** All the information there should also apply to Gitpod as well.\n- **_[Troubleshooting Matplotlib/TK](https://github.com/gitpod-io/gitpod/issues/795)_** Here is how to troubleshoot Matplotlib/TK issues for Python GUI applications.\n- **_[Debugging Django](https://community.gitpod.io/t/django-debugging/381/6)_** This is how to debug Django applications in Gitpod.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/python","loc":{"lines":{"from":225,"to":229}}}}],["1795",{"pageContent":"---\nsection: languages\ntitle: R in Gitpod\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# R in Gitpod\n\nTo work with R in Gitpod, you will need to properly configure your repository. Here is how to do it.\n\n## Installing R\n\nFirst, you'll probably want to install R itself. To do this, add a new file to your repository called [.gitpod.Dockerfile](/docs/configure/workspaces/workspace-image), and add the following content to it:\n\n```dockerfile\nFROM gitpod/workspace-full\n\nRUN brew install R\n```\n\nNext, create a Gitpod configuration file called [.gitpod.yml](/docs/references/gitpod-yml) (you can also simply run `gp init` and Gitpod will generate the file), and reference the above Dockerfile in it like so:\n\n```yml\nimage:\n  file: .gitpod.Dockerfile\n```\n\nThen commit and push both files to your repository. After that, every new Gitpod workspace created for your project will have R pre-installed.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/r","loc":{"lines":{"from":1,"to":31}}}}],["1796",{"pageContent":"VSCode Extensions\n\n### R Extension\n\n![R extension](../../../static/images/docs/RGitpod.png)\nTo install the R extension to your repository, add the following to your [.gitpod.yml](/docs/references/gitpod-yml) file:\n\n```yaml\nvscode:\n  extensions:\n    - Ikuyadeu.r@1.2.1:z5vr1v1bfS++U/aHLSXQ6Q==\n```\n\nHere is a minimal example of [R running in Gitpod](https://github.com/gitpod-io/Gitpod-R). You can try it here:\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-io/Gitpod-R)","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/r","loc":{"lines":{"from":33,"to":48}}}}],["1797",{"pageContent":"---\nsection: languages\ntitle: Ruby in Gitpod\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Ruby in Gitpod\n\nIt's relatively easy to set up your Ruby project in Gitpod.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/ruby","loc":{"lines":{"from":1,"to":12}}}}],["1798",{"pageContent":"Ruby Versions\n\nAs of this writing, Gitpod comes with Ruby 3.1 pre-installed in the [gitpod/workspace-full](https://hub.docker.com/r/gitpod/workspace-full).\n\nTo use a different Ruby version, you can [change the base image](https://www.gitpod.io/docs/configure/workspaces/workspace-image#configure-a-public-docker-image) to one of the following:\n\n- [gitpod/workspace-ruby-2](https://hub.docker.com/r/gitpod/workspace-ruby-2)\n- [gitpod/workspace-ruby-3.0](https://hub.docker.com/r/gitpod/workspace-ruby-3.0)\n\nThese images are automatically updated every week with the latest ruby patch versions.\n\nTo use a fixed version, you may use a [custom Dockerfile](https://www.gitpod.io/docs/configure/workspaces/workspace-image#configure-a-custom-dockerfile).\n\n```dockerfile\nFROM gitpod/workspace-full\nUSER gitpod","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/ruby","loc":{"lines":{"from":14,"to":29}}}}],["1799",{"pageContent":"```dockerfile\nFROM gitpod/workspace-full\nUSER gitpod\n\n# Install Ruby version 2.7.6 and set it as default\nRUN _ruby_version=ruby-2.7.6 \\\n    && printf \"rvm_gems_path=/home/gitpod/.rvm\\n\" > ~/.rvmrc \\\n    && bash -lc \"rvm reinstall ${_ruby_version} && \\\n                 rvm use ${_ruby_version} --default\" \\\n    && printf \"rvm_gems_path=/workspace/.rvm\" > ~/.rvmrc \\\n    && printf \"{ rvm use \\$(rvm current); } >/dev/null 2>&1\\n\" >> \"$HOME/.bashrc.d/70-ruby\"","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/ruby","loc":{"lines":{"from":29,"to":39}}}}],["1800",{"pageContent":"> 💡 Explanation: Gitpod initially [sets up RVM](https://github.com/gitpod-io/workspace-images/blob/481f7600b725e0ab507fbf8377641a562a475625/chunks/lang-ruby/Dockerfile#L11-L26) in `/home/gitpod/.rvm`, but then later switches the RVM configuration directory to `/workspace/.rvm`, so that any user-made changes (like installing new gems) are persisted within a Gitpod workspace. However, during the Dockerfile build, the `/workspace` directory doesn't exist yet, so we temporarily reset RVM's configuration directory to `/home/gitpod/.rvm`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/ruby","loc":{"lines":{"from":42,"to":42}}}}],["1801",{"pageContent":"Example Repositories\n\nHere are a few Ruby example projects that are already automated with Gitpod:\n\n<div class=\"overflow-x-auto\">","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/ruby","loc":{"lines":{"from":44,"to":48}}}}],["1802",{"pageContent":"| Repository                                                           | Description                                              | Try it                                                                                                                          |\n| -------------------------------------------------------------------- | -------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------- |\n| [Ruby on Rails template](https://github.com/gitpod-io/ruby-on-rails) | Ruby on Rails template with a PostgreSQL database        | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-io/ruby-on-rails) |","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/ruby","loc":{"lines":{"from":50,"to":52}}}}],["1803",{"pageContent":"| [Forem](https://github.com/forem/forem)                              | The platform that powers [dev.to](https://dev.to)        | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/forem/forem)             |\n| [GitLab](https://gitlab.com/gitlab-org/gitlab)                       | The open source end-to-end software development platform | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://gitlab.com/gitlab-org/gitlab)       |","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/ruby","loc":{"lines":{"from":53,"to":54}}}}],["1804",{"pageContent":"</div>","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/ruby","loc":{"lines":{"from":56,"to":56}}}}],["1805",{"pageContent":"VSCode Extensions\n\nHere are a few useful extensions that you'll likely want to install in your Ruby project.\n\n### [Ruby Test Explorer](https://marketplace.visualstudio.com/items?itemName=connorshea.vscode-ruby-test-adapter)\n\nWith the Ruby test explorer, you can run unit tests from within the Gitpod UI.\n![Ruby test explorer example](../../../static/images/docs/ruby_test_ui.png)\nTo add this extension to your repository, simply add these lines to your [.gitpod.yml](/docs/references/gitpod-yml) configuration file:\n\n```YAML\nvscode:\n  extensions:\n    - connorshea.vscode-ruby-test-adapter@0.9.0\n    - hbenl.vscode-test-explorer@2.21.1\n```","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/ruby","loc":{"lines":{"from":58,"to":73}}}}],["1806",{"pageContent":"Ruby On Rails\n\nSo, you want to write your cool new Ruby On Rails application in Gitpod? Well, here is an idea of how to do it. Please take a look at our [minimal Rails example](https://github.com/gitpod-io/Gitpod-Ruby-On-Rails) running in Gitpod:\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-io/Gitpod-Ruby-On-Rails)","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/ruby","loc":{"lines":{"from":75,"to":79}}}}],["1807",{"pageContent":"FAQs\n\n### [How to avoid the need to run \"bundle install\" each time I restart my workspace?](https://discord.com/channels/816244985187008514/1082108211936645182)\n\nTo avoid running `bundle install` each time you restart your workspace in Gitpod, try changing your `.gitpod.yml` file configuration. Instead of using `init`, use a `before` task, as it will be re-run each time the workspace is restarted.\n\nHere's an example:\n\n```yaml\ntasks:\n  - before: bundle install\n```\n\nFor more information on tasks, refer to the Gitpod [docs on tasks](https://www.gitpod.io/docs/configure/workspaces/tasks).\n\n**Note**: When a workspace is deactivated, only the workspace directory is saved and restored. Therefore, if `bundle install` creates files in various places in the file system, they may not be retained after a restart.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/ruby","loc":{"lines":{"from":82,"to":97}}}}],["1808",{"pageContent":"---\nsection: languages\ntitle: Rust in Gitpod\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Rust in Gitpod\n\nWelcome, Rustacean!\n\nRust is a first-class language in Gitpod, and we believe that Gitpod is a great tool for Rust projects. Some of Gitpod's core developers frequently work with Rust code (in Gitpod), and several key components of Gitpod are written in Rust:\n\n- The fantastic language support is provided by the [rls](https://github.com/rust-lang/rls)\n- The blazing-fast workspace search is powered by [ripgrep](https://github.com/BurntSushi/ripgrep)","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/rust","loc":{"lines":{"from":1,"to":17}}}}],["1809",{"pageContent":"Rust Version\n\nGitpod always comes with the latest available Rust toolchain pre-installed using [rustup](https://rustup.rs/). (As of this writing, the Rust version is `1.68.1`.\n\nYou can also use `rustup` yourself in Gitpod in order to switch to a different Rust version, or to install extra components. See [the rustup book](https://rust-lang.github.io/rustup/index.html) to learn more about `rustup` itself.\n\nNote: If you try to use `rustup` in your repository's [.gitpod.Dockerfile](/docs/configure/workspaces/workspace-image), you might get the following error:\n\n```\n/bin/sh: rustup command not found\n```\n\nTo fix this, simply wrap the `rustup` command in a login Bash shell, like so:\n\n```dockerfile\nRUN bash -cl \"rustup toolchain install nightly\"","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/rust","loc":{"lines":{"from":19,"to":34}}}}],["1810",{"pageContent":"To fix this, simply wrap the `rustup` command in a login Bash shell, like so:\n\n```dockerfile\nRUN bash -cl \"rustup toolchain install nightly\"\n```\n\nYou can override this default by committing a `rustup-toolchain` file in the root of your repository. Say for example you need the nightly compiler for March 4th, 2020, you would create a `rustup-toolchain` file and add the following\n\n```text\nnightly-2020-03-04\n```\n\nwhich will set the required Rust version and if you commit the file into source control it will set the default nightly version across all workspaces.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/rust","loc":{"lines":{"from":34,"to":46}}}}],["1811",{"pageContent":"Example Repositories\n\nHere are a few Rust example projects that are already automated with Gitpod:\n\n<div class=\"overflow-x-auto\">","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/rust","loc":{"lines":{"from":48,"to":52}}}}],["1812",{"pageContent":"| Repository                                          | Description                         | Try it                                                                                                                       |\n| --------------------------------------------------- | ----------------------------------- | ---------------------------------------------------------------------------------------------------------------------------- |\n| [Nushell](https://github.com/nushell/nushell/)      | A next-gen shell for the GitHub era | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/nushell/nushell)      |\n| [MathLang](https://github.com/JesterOrNot/mathlang) | Basic maths language in Rust        | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/JesterOrNot/MathLang) |","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/rust","loc":{"lines":{"from":54,"to":57}}}}],["1813",{"pageContent":"| [Servo](https://github.com/servo/servo)             | The Servo Browser Engine            | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/servo/servo)          |","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/rust","loc":{"lines":{"from":58,"to":58}}}}],["1814",{"pageContent":"</div>","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/rust","loc":{"lines":{"from":60,"to":60}}}}],["1815",{"pageContent":"VSCode Extensions\n\nThe most popular Rust VSCode extensions are already pre-installed in Gitpod. But here are a few \"nice to have\" extensions you may choose to install as well.\n\nIn order to install one of these extensions for your repository, simply head to Gitpod's [Extensions panel](/docs/references/ides-and-editors/vscode-extensions) (find it in the IDE's left vertical menu), then search for the desired extension by name, and install it for your project. This will add an entry to your [.gitpod.yml](/docs/references/gitpod-yml) file that ensures all future Gitpod workspaces for your repository will already have this extension pre-installed.\n\n### Rust Test Explorer\n\n![Rust test explorer example](../../../static/images/docs/rustTest.png)\n<br>\n<br>\nThe Rust Test Explorer makes it easy to run Rust tests.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/rust","loc":{"lines":{"from":62,"to":73}}}}],["1816",{"pageContent":"Rust Test Explorer\n\n![Rust test explorer example](../../../static/images/docs/rustTest.png)\n<br>\n<br>\nThe Rust Test Explorer makes it easy to run Rust tests.\n\n### Crates\n\n> **_Note: This extension outputs emojis by default if the crate version is set at the latest. You can disable this by using `crates.upToDateDecorator` option in your preferences_** > <br>\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"A crates extension demo\" src=\"/images/docs/cratesDemo.webm\" type=\"video/webm\"></video>\n    <figcaption>A crates extension demo</figcaption>\n</figure>\n\nThe VSCode extension Crates makes it easier to manage your Cargo dependency versions.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/rust","loc":{"lines":{"from":73,"to":89}}}}],["1817",{"pageContent":"Search Crates.io\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"An example of search crates.io extension\" src=\"/images/docs/searchCratesio.webm\" type=\"video/webm\"></video>\n    <figcaption>An example of search crates.io extension</figcaption>\n</figure>\n\nDo you have an idea of a library you want to use but don't know the version well just type in the name of the library and Search Crates.io will get the version.\n\n### Better TOML\n\n![TOML Syntax highlighting example](../../../static/images/docs/feature_syntax_highlight.png)\n\nBetter TOML adds syntax highlighting to your `Cargo.toml`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/rust","loc":{"lines":{"from":91,"to":104}}}}],["1818",{"pageContent":"Cross-compiling with MUSL\n\nTo cross-compile with MUSL in Gitpod, you can:\n\n- Run `rustup target add x86_64-unknown-linux-musl`, for example in your [.gitpod.Dockerfile](/docs/configure/workspaces/workspace-image)\n- Then, build with `cargo build --target x86_64-unknown-linux-musl`\n\nTo learn more, see [MUSL support for fully static binaries](https://doc.rust-lang.org/edition-guide/rust-2018/platform-and-target-support/musl-support-for-fully-static-binaries.html).","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/rust","loc":{"lines":{"from":106,"to":113}}}}],["1819",{"pageContent":"Debugging\n\nIn this section we will show you how to configure your project for debugging in Gitpod.\n\nFirst, before we get to that we need to get some prerequisites set-up.\n\nFirst we'll install the needed extension. If you haven't already, head over to Gitpod's [Extensions panel](/docs/references/ides-and-editors/vscode-extensions) (left vertical menu in the IDE) and search for an extension called `Native Debug` by webfreak. When you see it, click to install it for your project.\n\nThe next prerequisite is a Docker configuration.\n\nIf you already have a [.gitpod.Dockerfile](/docs/configure/workspaces/workspace-image) just add the following:\n\n```dockerfile\nRUN sudo apt-get -q update \\\n    && sudo apt-get install -yq \\\n        libpython3.6 \\\n        rust-lldb \\\n    && sudo rm -rf /var/lib/apt/lists/*\n\nENV RUST_LLDB=/usr/bin/lldb-8","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/rust","loc":{"lines":{"from":115,"to":134}}}}],["1820",{"pageContent":"If not there are two steps. First, create a file called `.gitpod.Dockerfile` with the following content:\n\n```dockerfile\nFROM gitpod/workspace-full\n\nUSER gitpod\n\nRUN sudo apt-get -q update \\\n    && sudo apt-get install -yq \\\n        libpython3.6 \\\n        rust-lldb \\\n    && sudo rm -rf /var/lib/apt/lists/*\n\nENV RUST_LLDB=/usr/bin/lldb-8\n```\n\nNext, add the following to your [.gitpod.yml](/docs/references/gitpod-yml) file:\n\n```yaml\nimage:\n  file: .gitpod.Dockerfile","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/rust","loc":{"lines":{"from":137,"to":157}}}}],["1821",{"pageContent":"Now that's out of the way, here is a video on how to configure the debug configuration\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Rust debugging example\" src=\"/images/docs/RustDebug.webm\" type=\"video/webm\"></video>\n    <figcaption>Rust debugging example</figcaption>\n</figure>\n\nSo, basically in this video we:","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/rust","loc":{"lines":{"from":160,"to":167}}}}],["1822",{"pageContent":"1. Go to the debug menu and select \"Add Configuration...\"\n2. Next, in the dropdown choose \"GDB: Launch Program\"\n3. Go to the `Cargo.toml` file and find the name of the program.\n4. Modify the target field and change it to `${workspaceFolder}/target/debug/<PROGRAM_NAME>` where `<PROGRAM_NAME>` is the name of the program under the name field in the `Cargo.toml` file.\n5. Add another property to the created file called `preLaunchTask` and set it to \"cargo\"\n6. Go to the terminal menu and click configure tasks\n7. Select cargo build from the menu that pops up\n8. change the tag `type` to `command`\n9. change the tag `subcommand` to `args` and the value to `[\"build\"]`\n10. Next remove the `problemMatcher` field.\n11. Add a field called `type` and set it to `process`\n12. Add a field called `label` and set it to `cargo`\n13. Go to the Rust file you want to debug\n14. Add a breakpoint or two\n15. Go back to the debug menu that has the crossed out spider\n16. Click the green run button.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/rust","loc":{"lines":{"from":169,"to":184}}}}],["1823",{"pageContent":"13. Go to the Rust file you want to debug\n14. Add a breakpoint or two\n15. Go back to the debug menu that has the crossed out spider\n16. Click the green run button.\n17. Finally, start debugging your Rust program!","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/rust","loc":{"lines":{"from":184,"to":188}}}}],["1824",{"pageContent":"You can also create the Rust debug configuration file manually\n\nTo start debugging your Rust application in Gitpod, please create a new directory called `.theia/`, and inside add a file called `launch.json`, add the following to it:\n\n```json\n{\n  // Use IntelliSense to learn about possible attributes.\n  // Hover to view descriptions of existing attributes.\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"type\": \"gdb\",\n      \"request\": \"launch\",\n      \"name\": \"Debug Rust Code\",\n      \"preLaunchTask\": \"cargo\",\n      \"target\": \"${workspaceFolder}/target/debug/rust_debug\",\n      \"cwd\": \"${workspaceFolder}\",\n      \"valuesFormatting\": \"parseText\"\n    }\n  ]\n}","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/rust","loc":{"lines":{"from":190,"to":210}}}}],["1825",{"pageContent":"Next create another file in the same `.theia/` directory called `tasks.json` with the following content:\n\n```json\n{\n  \"tasks\": [\n    {\n      \"command\": \"cargo\",\n      \"args\": [\"build\"],\n      \"type\": \"process\",\n      \"label\": \"cargo\"\n    }\n  ]\n}\n```\n\nThen, simply open the Rust file you want to debug, add some breakpoints, and open the Debug panel (in the left vertical toolbar, click the icon with the crossed-out-spider), and click the green \"Run\" button.\n\n<br>\n\nTo see a basic repository with Rust debugging configured, please check out [gitpod-io/Gitpod-Rust-Debug](https://github.com/gitpod-io/Gitpod-Rust-Debug):\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-io/Gitpod-Rust-Debug)\n\n<br>","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/rust","loc":{"lines":{"from":213,"to":236}}}}],["1826",{"pageContent":"Further Reading\n\n- **_[Rocket-Example](/blog/docker-in-gitpod)_** For an example of how to setup a project for the [`Rocket`](https://rocket.rs/) web-development framework","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/rust","loc":{"lines":{"from":238,"to":240}}}}],["1827",{"pageContent":"---\nsection: languages\ntitle: Scala in Gitpod\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Scala in Gitpod\n\nWelcome, Scala programmer. Today we will show you how to configure Gitpod for your project.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/scala","loc":{"lines":{"from":1,"to":12}}}}],["1828",{"pageContent":"Installing Scala\n\nFirst, you'll probably want to install Scala. To do this, add a new file to your repository called [.gitpod.Dockerfile](/docs/configure/workspaces/workspace-image), and add the following content to it:\n\n```dockerfile\nFROM gitpod/workspace-full\n\nRUN brew install scala\n```\n\nAdditionally create a file called [.gitpod.yml](/docs/references/gitpod-yml) and add the following:\n\n```YAML\nimage:\n  file: .gitpod.Dockerfile\n```\n\nNow commit both files into source control.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/scala","loc":{"lines":{"from":14,"to":31}}}}],["1829",{"pageContent":"What are these files for?\n\nLet's break this down. First, in `.gitpod.Dockerfile`, we declare `FROM gitpod/workspace-full` to have your project use Gitpod's default workspace image (recommended). You can use other images too, but some Gitpod features might not work as well with untested images.\n\nNext, we declare `RUN brew install scala`. This simply installs Scala into the workspace image via HomeBrew.\n\nThen, we register our custom Dockerfile in Gitpod's configuration file `.gitpod.yml`, so that Gitpod knows it should pick it up and build it on-the-fly when booting up new workspaces.\n\nFinally, please note that these changes will only take effect in new workspaces. To try out your new automated dev setup, simply commit both files; push them to GitHub; and then open a new Gitpod workspace for your repository. 🚀","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/scala","loc":{"lines":{"from":33,"to":41}}}}],["1830",{"pageContent":"Using the Ammonite REPL\n\n![The Ammonite REPL in action](../../../static/images/docs/AmmoniteRepl.png)\n\nTo install the [Ammonite REPL](https://ammonite.io/) in Gitpod, you must add the following to our previously-created [.gitpod.Dockerfile](/docs/configure/workspaces/workspace-image):\n\n```dockerfile\nRUN sudo sh -c '(echo \"#!/usr/bin/env sh\" && curl -L https://github.com/lihaoyi/Ammonite/releases/download/2.0.4/2.13-2.0.4) > /usr/local/bin/amm && chmod +x /usr/local/bin/amm'\n```\n\nThen commit the changes and push to your repository. Finally, when you open a new workspace, you will be able to type `amm` in the terminal, and behold a super cool Scala REPL in your workspace!","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/scala","loc":{"lines":{"from":43,"to":53}}}}],["1831",{"pageContent":"Building projects with sbt\n\nTo use [sbt](https://www.scala-sbt.org/) (simple build tool) in Gitpod, you can add the following to that [.gitpod.Dockerfile](/docs/configure/workspaces/workspace-image) we created:\n\n```dockerfile\nRUN brew install sbt\n```\n\nAs usual, commit and push the changes, and `sbt` will be installed in all future workspaces.\n\n## Managing Scala versions with scalaenv\n\nSay your project needs a specific Scala version. You can use [scalaenv](https://github.com/scalaenv/scalaenv), a version manager for Scala, to switch between different Scala versions. But first, we must install `scalaenv`. As usual, we need to change our [.gitpod.Dockerfile](/docs/configure/workspaces/workspace-image), by adding this to it:\n\n```dockerfile\nRUN brew install scalaenv\n```\n\nThen, say you need Scala version `2.12.11`, you would add the following line as well:\n\n```dockerfile\nRUN scalaenv install scala-2.12.11 && scalaenv global scala-2.12.11\n```","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/scala","loc":{"lines":{"from":55,"to":77}}}}],["1832",{"pageContent":"Using coursier, an artifact fetcher for Scala\n\n[coursier](https://get-coursier.io/) is useful for building certain Scala projects and installing different tools.\n\n```dockerfile\nRUN brew install coursier/formulas/coursier\n```\n\n(Don't forget to commit and push this change!)\n\n## Formatting Scala code with scalafmt\n\nTo install [scalafmt](https://scalameta.org/scalafmt/) for your repository, add the following to your [.gitpod.Dockerfile](/docs/configure/workspaces/workspace-image):\n\n```dockerfile\nRUN sudo env \"PATH=$PATH\" coursier bootstrap org.scalameta:scalafmt-cli_2.12:2.4.2 \\\n  -r sonatype:snapshots \\\n  -o /usr/local/bin/scalafmt --standalone --main org.scalafmt.cli.Cli\n```\n\nThen to format your code simply run `scalafmt`!","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/scala","loc":{"lines":{"from":79,"to":99}}}}],["1833",{"pageContent":"Putting it all together\n\nA full example of a [.gitpod.Dockerfile](/docs/configure/workspaces/workspace-image) configured for Scala could look something like:\n\n```dockerfile\nFROM gitpod/workspace-full\n\nRUN sudo sh -c '(echo \"#!/usr/bin/env sh\" && curl -L https://github.com/lihaoyi/Ammonite/releases/download/2.0.4/2.13-2.0.4) > /usr/local/bin/amm && chmod +x /usr/local/bin/amm'\n\nRUN brew install scala coursier/formulas/coursier sbt scalaenv\n\nRUN sudo env \"PATH=$PATH\" coursier bootstrap org.scalameta:scalafmt-cli_2.12:2.4.2 \\\n  -r sonatype:snapshots \\\n  -o /usr/local/bin/scalafmt --standalone --main org.scalafmt.cli.Cli\n\nRUN scalaenv install scala-2.12.11 && scalaenv global scala-2.12.11","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/scala","loc":{"lines":{"from":101,"to":116}}}}],["1834",{"pageContent":"You will notice that all the `brew install` commands are on the same line. We recommend grouping similar commands together to minimize the number of [Docker layers](https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#minimize-the-number-of-layers).\n\nAdditionally, your [.gitpod.yml](/docs/references/gitpod-yml) file should still look like this:\n\n```YAML\nimage:\n  file: .gitpod.Dockerfile\n```","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/scala","loc":{"lines":{"from":119,"to":126}}}}],["1835",{"pageContent":"VSCode Extensions\n\n### Scala Syntax (official)\n\n![Scala Syntax demo](../../../static/images/docs/scala-syntax.png)\n\nScala Syntax adds basic syntax highlighting for Scala and `sbt` files.\n\nTo get it, open Gitpod's **Extensions** panel (left vertical menu in the IDE), then search for \"Scala Syntax\", and install it \"for this project\". Then, commit the automatic `.gitpod.yml` change that was made by Gitpod.\n\n### Metals\n\n![An example of the metals in Gitpod](../../../static/images/docs/metals-demo.png)\n\nMetals adds helpful Scala features to Gitpod, for example, advanced autocompletion and debugging support just to name a few. Although to use it you must also have the previously mentioned Scala Syntax.\n\nTo get it, open Gitpod's **Extensions** panel (left vertical menu in the IDE), then search for \"Scala Metals\", and install it \"for this project\". Then, commit the automatic `.gitpod.yml` change that was made by Gitpod.\n\nBoom! You're done! (Just a reminder, don't forget to push the changes.)","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/scala","loc":{"lines":{"from":128,"to":146}}}}],["1836",{"pageContent":"Debugging Scala code\n\nTo debug Scala code in Gitpod you should use the Metals extension which we just went over. Here is an example of Scala Debugging in action:\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Example of debugging Scala in Gitpod\" src=\"/images/docs/scala-debug.webm\" type=\"video/webm\"></video>\n    <figcaption>Example of debugging Scala in Gitpod</figcaption>\n</figure>\n\nIn general when debugging Scala code, go to the main method, and click the Debug button over it! And boom you're debugging.\n\n## Try it!\n\nTo see a minimal repository with a Gitpod configuration that installs all the tools we've covered, see [gitpod-io/Gitpod-Scala](https://github.com/gitpod-io/Gitpod-Scala). You can try it in your browser:\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-io/Gitpod-Scala)","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/scala","loc":{"lines":{"from":148,"to":163}}}}],["1837",{"pageContent":"Need help?\n\nIf you are having trouble and need help please find us in the [Gitpod community](https://community.gitpod.io/), or, [file an issue on GitHub](https://github.com/gitpod-io/gitpod/issues/new/choose).\n\n## Feedback\n\nWe love feedback and want to continuously improve all of our guides and documentation. If you found a grammar mistake, or we left out your favorite Scala tool, or you just have general feedback on the guide, please feel free to [edit this guide](https://gitpod.io/#https://github.com/gitpod-io/website/blob/master/src/docs/introduction/languages/scala.md) or to [file a website issue on GitHub](https://github.com/gitpod-io/website/issues/new/choose).","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/scala","loc":{"lines":{"from":165,"to":171}}}}],["1838",{"pageContent":"---\nsection: languages\ntitle: Svelte in Gitpod\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Svelte in Gitpod\n\nTo work with Svelte in Gitpod, you will need to properly configure your repository. Here is how to do that, assuming that you're using the official sveltejs [template](https://github.com/sveltejs/template) which uses Rollup:\n\n## Create a .gitpod.yml\n\nStart by creating a `.gitpod.yml` file in the root of your project and add the following to it:\n\n```yml\ntasks:\n  - init: npm install\n    command: npm run dev\n\nports:\n  - port: 5000\n    onOpen: open-preview\n  - port: 35729\n    onOpen: ignore\n```\n\nAfter committing and pushing this file to your repository, start a new Gitpod workspace. You'll see that Gitpod will automatically install the dependencies; start the dev server; and open a preview on the side for port `5000`.\n\n![Sveltejs Template in Gitpod](../../../static/images/docs/svelte-template-in-gitpod.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/svelte","loc":{"lines":{"from":1,"to":32}}}}],["1839",{"pageContent":"Making Live Reload work\n\nIn order to make live reload work we need to add a bit of configuration as specified below:\n\n- Setup an environment variable called `CLIENT_URL` in the `.gitpod.yml` config file as shown below please make sure that you set it up before the task which starts the dev server(which is `npm run dev` in this case):\n\n  ```bash\n  - init: npm install\n      command: |\n        export CLIENT_URL=\"$(gp url 35729)/livereload.js?snipver=1&port=443\"\n        npm run dev\n  ```\n\n- Pass the value of `CLIENT_URL` environment variable to the `rollup-plugin-livereload` in `rollup-config.js` inside of the `plugins` array as shown:\n  ```js\n  plugins: [\n    !production &&\n      livereload({\n        watch: \"public\",\n        clientUrl: process.env.CLIENT_URL,\n      }),\n  ];\n  ```\n  This will set `CLIENT_URL` to the workspace url of port `35729` (default port for livereload in Gitpod).","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/svelte","loc":{"lines":{"from":34,"to":57}}}}],["1840",{"pageContent":"Example Projects\n\n<div class=\"overflow-x-auto\">\n\n| Repository                                                          | Description                        | Try it                                                                                                                              |\n| ------------------------------------------------------------------- | ---------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------- |\n| [SvelteJS template](https://github.com/gitpod-io/sveltejs-template) | A project template for Svelte apps | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-io/sveltejs-template) |\n\n</div>","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/svelte","loc":{"lines":{"from":59,"to":67}}}}],["1841",{"pageContent":"VSCode Extensions\n\n### Svelte for VS Code\n\nSvelte for VS Code Provides syntax highlighting and rich IntelliSense for Svelte components in VS Code, utilising the [svelte language server](https://github.com/sveltejs/language-tools/tree/master/packages/language-server).\n\nTo add this extension to your repository, simply head to Gitpod’s [Extensions panel](/docs/references/ides-and-editors/vscode-extensions) (find it in the IDE’s left vertical menu), then search for the desired extension by name, and install it for your project. This will add an entry to your [.gitpod.yml](/docs/references/gitpod-yml) file that ensures all future Gitpod workspaces for your repository will already have this extension pre-installed.\n\nhttps://github.com/gitpod-io/sveltejs-template repo is a working example of the config described above <span aria-hidden=\"true\">👆</span>.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/svelte","loc":{"lines":{"from":69,"to":77}}}}],["1842",{"pageContent":"---\nsection: languages\ntitle: Vue.js in Gitpod\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Vue.js in Gitpod\n\nTo work with Vue.js in Gitpod, you will need to properly configure your repository. Here is how to do it.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/vue","loc":{"lines":{"from":1,"to":12}}}}],["1843",{"pageContent":"Example Repositories\n\nHere are a few Vue.js example projects that are already automated with Gitpod:\n\n<div class=\"overflow-x-auto\">","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/vue","loc":{"lines":{"from":14,"to":18}}}}],["1844",{"pageContent":"| Repository                                            | Description                                                                     | Try it                                                                                                                        |\n| ----------------------------------------------------- | ------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------- |\n| [vuepress](https://github.com/vuejs/vuepress)         | Minimalistic Vue-powered static site generator                                  | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/vuejs/vuepress)        |","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/vue","loc":{"lines":{"from":20,"to":22}}}}],["1845",{"pageContent":"| [postwoman](https://github.com/liyasthomas/postwoman) | A free, fast and beautiful API request builder (web alternative to Postman)     | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/liyasthomas/postwoman) |\n| [nuxtjs.org](https://github.com/nuxt/nuxtjs.org)      | Nuxt.js Documentation Website (Universal Vue.js Application built with Nuxt.js) | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/nuxt/nuxtjs.org)       |","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/vue","loc":{"lines":{"from":23,"to":24}}}}],["1846",{"pageContent":"</div>","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/vue","loc":{"lines":{"from":26,"to":26}}}}],["1847",{"pageContent":"Vue-CLI\n\nTo install the Vue.js command-line interface in your current workspace run the following\n\n```bash\nnpm i -g vue-cli\n```\n\nTo install globally across all workspaces add the following to your [.gitpod.Dockerfile](/docs/configure/workspaces/workspace-image)\n\n```dockerfile\nRUN npm i -g vue-cli\n```\n\n> Please note: If you don't already have one please run [`gp init`](/docs/references/gitpod-cli#init) which should generate two files [.gitpod.yml](/docs/references/gitpod-yml) and [.gitpod.Dockerfile](/docs/configure/workspaces/workspace-image)","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/vue","loc":{"lines":{"from":28,"to":42}}}}],["1848",{"pageContent":"VSCode Extensions\n\n### Vetur\n\n![Vetur extension](../../../static/images/docs/Vetur.png)\n\nVetur provides syntax highlighting, snippets, Emmet support, linting/error checking, auto-formatting, and auto-complete for Vue files.\n\nTo add this extension to your repository add the following to your [.gitpod.yml](/docs/references/gitpod-yml)\n\n```yaml\nvscode:\n  extensions:\n    - octref.vetur@0.23.0:TEzauMObB6f3i2JqlvrOpA==\n```\n\nFor projects that already have a [.gitpod.yml](/docs/references/gitpod-yml), you can skip the first part and just add the provided snippet.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/vue","loc":{"lines":{"from":44,"to":60}}}}],["1849",{"pageContent":"---\nsection: learn-gitpod\ntitle: Context URL\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Context URL\n\nGitpod understands a variety of common situations you experience as part of your development workflow and automates repetitive tasks, giving you time to focus on more impactful work.\n\nThe context is determined by a Gitpod URL's [_anchor_](https://developer.mozilla.org/en-US/docs/Learn/Common_questions/What_is_a_URL), i.e. the link provided at the end of the `#` character in the `gitpod.io/#` URL.\n\nRegardless of the context, Gitpod performs the tasks configured in `.gitpod.yml` if this configuration file is available for a given repository.\n\nGitpod is aware of the following contexts:\n\n- [Context URL](#Context-URL)\n  - [Repository Context](#repository-context)\n  - [Branch and Commit Contexts](#branch-and-commit-contexts)\n  - [Issue Context](#issue-context)\n  - [Pull/Merge Request Context](#pullmerge-request-context)","metadata":{"source":"https://www.gitpod.io/docs/introduction/learn-gitpod/context-url","loc":{"lines":{"from":1,"to":24}}}}],["1850",{"pageContent":"Please note, these contexts are supported for GitHub, GitLab, and Bitbucket. This also includes Self-Hosted installations of these git providers, where available.","metadata":{"source":"https://www.gitpod.io/docs/introduction/learn-gitpod/context-url","loc":{"lines":{"from":26,"to":26}}}}],["1851",{"pageContent":"Repository Context\n\nTo start a new workspace, you prefix your repository URL with `gitpod.io/#`. E.g. [gitpod.io/#https://github.com/gitpod-io/website](https://gitpod.io/#https://github.com/gitpod-io/website).\n\nThis is the most basic context and Gitpod simply checks out the default branch and opens the Welcome screen once the workspace is ready.\n\nAn example URL for the repository context is:\n\n```\ngitpod.io/#https://github.com/gitpod-io/website\n```","metadata":{"source":"https://www.gitpod.io/docs/introduction/learn-gitpod/context-url","loc":{"lines":{"from":28,"to":38}}}}],["1852",{"pageContent":"Branch and Commit Contexts\n\nThe branch and commit contexts are very similar to the repository context described above. When you open a new workspace for a given branch or commit, Gitpod automatically checks out that branch or commit, allowing you to browse the repository on that branch or at the time of the given commit.\n\nAn example URL for the branch context is:\n\n```\ngitpod.io/#https://github.com/gitpod-io/website/tree/my-branch\n```\n\nAn example URL for the commit SHA context is:\n\n```\ngitpod.io/#https://github.com/gitpod-io/website/commit/f5d4eb4cd3859a760ac613598e840b94e8094649\n```","metadata":{"source":"https://www.gitpod.io/docs/introduction/learn-gitpod/context-url","loc":{"lines":{"from":40,"to":54}}}}],["1853",{"pageContent":"Issue Context\n\nThe fastest way to work on an issue is to start a Gitpod workspace with an issue context. Gitpod automatically creates a local branch based on the following pattern:\n\n```text\n<your-username>/<issue-title>-<issue-number>\n```\n\nThis branch is based on the most recent commit in your project's default branch.\n\nYou can commit your changes with the `git` command line interface or use the _Source Control_ panel on the left side of the editor. From there, you can also create a new pull/merge request without leaving Gitpod.\n\nAn example URL for the issue context is:\n\n```\ngitpod.io/#https://github.com/gitpod-io/website/issues/470\n```","metadata":{"source":"https://www.gitpod.io/docs/introduction/learn-gitpod/context-url","loc":{"lines":{"from":56,"to":72}}}}],["1854",{"pageContent":"Pull/Merge Request Context\n\n> **Note:** Currently pull-request based context URLs are only supported by [GitHub authentication](https://www.gitpod.io/docs/configure/authentication/github) as a [Gitpod authentication method](https://www.gitpod.io/docs/configure/authentication).\n\nWhen Gitpod recognizes a pull or merge request context, it knows you most likely have one of two intentions:\n\n- As a reviewer, provide PR/MR feedback\n- As an author, process feedback and update the code\n\nIn either case, Gitpod automatically performs the following tasks for you:\n\n1. Starts a workspace with the correct branch checked out\n1. Opens the PR/MR review panel where you can see and contribute to existing conversations\n1. Displays a list of files changed as part of that PR/MR\n1. Enables you to leave comments right within individual files (yep, no need to switch between the code and the PR/MR in your browser)","metadata":{"source":"https://www.gitpod.io/docs/introduction/learn-gitpod/context-url","loc":{"lines":{"from":74,"to":88}}}}],["1855",{"pageContent":"In addition, Gitpod lets you merge a PR/MR. Once merged, you close the browser tab and move on to your next task - in a new, ephemeral developer environment 🎉.\n\nAn example URL for the pull/merge request context is:\n\n```\ngitpod.io/#https://github.com/gitpod-io/website/pull/494\n```","metadata":{"source":"https://www.gitpod.io/docs/introduction/learn-gitpod/context-url","loc":{"lines":{"from":90,"to":96}}}}],["1856",{"pageContent":"---\nsection: learn-gitpod\ntitle: Learn Gitpod\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Learn Gitpod\n\n- [One workspace per task](/docs/introduction/learn-gitpod/one-workspace-per-task)\n- [Context URL](/docs/introduction/learn-gitpod/context-url)","metadata":{"source":"https://www.gitpod.io/docs/introduction/learn-gitpod","loc":{"lines":{"from":1,"to":13}}}}],["1857",{"pageContent":"---\nsection: learn-gitpod\ntitle: One workspace per task\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# One workspace per task\n\nOn any given day, you may be involved in tasks such as the following:\n\n- Implement a new feature\n- Fix a bug\n- Review a pull/merge request\n- Pair-program with a team member\n- Browse an open source project's source code\n\nFor each of these tasks, you start a clean, ephemeral Gitpod workspace. You can even start **multiple workspaces in parallel**. For example, while you're working on a feature, you can start a second workspace to review a production hotfix. When the review is complete, you close the browser tab of that workspace and continue to work on your feature. This works for any GitLab, GitHub or Bitbucket project.\n\nYou can learn more about the [Life of a workspace](/docs/configure/workspaces/workspace-lifecycle\n\n`youtube: n7Ca3jHFtZg`","metadata":{"source":"https://www.gitpod.io/docs/introduction/learn-gitpod/one-workspace-per-task","loc":{"lines":{"from":1,"to":24}}}}],["1858",{"pageContent":"Gitpod vs. local development\n\nA Gitpod workspace is similar to your local developer environment, except for two key differentiators:\n\n1. It is configured as code\n1. It is ephemeral and only lives for as long as you work on a task\n\n### Configuration vs. manual setup\n\nYour project's `.gitpod.yml` and optional `.gitpod.Dockerfile` files control what tools will be available in your Gitpod workspace. Both files are version-controlled and let you monitor changes to the developer environment over time. There is no longer a need to `@channel` in your team's communication software to tell everyone to upgrade their version of Node.js, only to find out that some people were on vacation and didn't see the message.","metadata":{"source":"https://www.gitpod.io/docs/introduction/learn-gitpod/one-workspace-per-task","loc":{"lines":{"from":26,"to":35}}}}],["1859",{"pageContent":"Ephemeral vs. long-lived\n\nThanks to the fact that Gitpod workspaces are configured as code, you can start and stop them as frequently as you want. You know that each workspace has the tools it needs and even more importantly, has the latest code from your default branch checked out! You no longer have to pull the latest default branch a few times per day because each time you start a new workspace, it has the latest code already available.","metadata":{"source":"https://www.gitpod.io/docs/introduction/learn-gitpod/one-workspace-per-task","loc":{"lines":{"from":37,"to":39}}}}],["1860",{"pageContent":"<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# February Release 2019 🎉\n\nWe are close to leaving the beta phase and with that are also approaching a more regular release schedule.\nThis means we are going to have monthly release notes. They will pop up only once and you can easily dismiss them by pressing <kbd>[ESC]</kbd>.\nIf you want to look up the release notes later you can open them through the command palette <kbd>[F1]</kbd>. Simply search for 'Release Notes'.\n\nSo here are the new & noteworthy things that we have been hard at work at this time.\n\n## GitHub Links\n\nYou can now navigate to GitHub directly from the editor. The GitHub URL of any editor position or selection can be accessed with a right-click, and used for example in GitHub issues or Pull Request comments to reference interesting code locations.\n\n![GitHub Links](../../../../../static/images/docs/release-notes/2019-02-15/github-navi.jpg)","metadata":{"source":"https://www.gitpod.io/docs/release-notes/2019-02-15/february-2019","loc":{"lines":{"from":1,"to":17}}}}],["1861",{"pageContent":"Snapshots\n\nIn addition to live sharing a running Gitpod workspace, you can now take a snapshot. Snapshots capture the current state of a workspace session including the UI layout and the file changes. Anyone who has a snapshot link can create a fresh workspace based on that.\n\nThis is super handy for providing reproducibles in GitHub issues and StackOverflow posts. They are also great to prepare trainigs, tutorials, or just to showcase stuff you have thrown together.\n\nPlease see this [blog post](https://medium.com/gitpod/code-never-lies-creating-reproducibles-for-any-programming-language-7946021a68f2) as well as the [documentation](/docs/configure/workspaces/collaboration#sharing-snapshots) for more details.\n\n![Snapshot](../../../../../static/images/docs/release-notes/2019-02-15/snapshots.png)","metadata":{"source":"https://www.gitpod.io/docs/release-notes/2019-02-15/february-2019","loc":{"lines":{"from":19,"to":27}}}}],["1862",{"pageContent":"Configuration\n\nThe possibilities to fine-tune the developer experience when using Gitpod on your repository have been improved. Here are the features you can define in your `.gitpod.yml`:\n\n### Tasks\n\nYou can now specify multiple tasks. Each task will have its own terminal view on start. You can even specify where those terminals whould be opened.\nThe following config, for instance, will make sure that two terminals are opened next to each other.\n\n```yaml\ntasks:\n  - command: echo 'left'\n  - command: echo 'right'\n    openMode: split-right\n```\n\n![Split Terminals](../../../../../static/images/docs/release-notes/2019-02-15/terminal-split.png)","metadata":{"source":"https://www.gitpod.io/docs/release-notes/2019-02-15/february-2019","loc":{"lines":{"from":29,"to":45}}}}],["1863",{"pageContent":"Lifecycles\n\nIn addition we have introduced multiple lifecycle phases for the tasks, such as [init](/docs/configure/workspaces/tasks#init-command) and [before](/docs/configure/workspaces/tasks#before-command). The main purpose is to avoid rerunning unnecessary commands such as full builds, when restarting workspaces or opening snapshots.\n\nCheck the table below for an overview of the different starting scenarios.\n\n<div class=\"overflow-x-auto\">\n\n| Start Mode        | Execution                   |\n| ----------------- | --------------------------- |\n| Fresh Workspace   | `before && init && command` |\n| Restart Workspace | `before && command`         |\n| Snapshot          | `before && command`         |\n\n</div>","metadata":{"source":"https://www.gitpod.io/docs/release-notes/2019-02-15/february-2019","loc":{"lines":{"from":47,"to":61}}}}],["1864",{"pageContent":"Ports\n\nYou can now specify the default behavior on port detection. By default users get a notification when starting a server, asking whether they want to open a web view or an external browser.\n\nThis behavior can now be pre-configured so users are not bothered with annoying notifications. Here is an example where we configure port `8080` to automatically open in a web preview pane:\n\n```yaml\nports:\n  - port: 8080\n    onOpen: open-preview\n```\n\nCheck out [the docs](/docs/configure/workspaces/tasks) to learn more about pre-configuring things in Gitpod.","metadata":{"source":"https://www.gitpod.io/docs/release-notes/2019-02-15/february-2019","loc":{"lines":{"from":63,"to":75}}}}],["1865",{"pageContent":"YAML Support\n\nGitpod now understands YAML syntax and uses json schema specifications to validate and guide developers. While this works for any YAML files it comes in especially handy when editing `.gitpod.yml`.\n\n![yaml in action](../../../../../static/images/docs/release-notes/2019-02-15/yaml-support.png)","metadata":{"source":"https://www.gitpod.io/docs/release-notes/2019-02-15/february-2019","loc":{"lines":{"from":77,"to":81}}}}],["1866",{"pageContent":"Gitpod CLI\n\nThe CLI for Gitpod has learned new tricks. Check out all the cool things you can do with it by typing `gp help`.\n\nHere are the new commands we added:\n\n### gp init\n\nTo get the best experience with Gitpod, you should configure your repository to have the right tools, run the right commands on start, etc. This information is stored in a `.gitpod.yml` file sitting in your repository.\n\nThe `gp init` command walks you through the basic setup and generates a `.gitpod.yml` and if desired a corresponding `Dockerfile`.\n\n```sh\ngitpod /workspace/my-repo $ gp init\nUse the arrow keys to navigate: ↓ ↑ → ←\n? Workspace Docker image:\n  ▸ default\n    custom image\n    docker file\n```\n\nMore information about writing `.gitpod.yml` configurations can be found in [the docs](/docs/configure).","metadata":{"source":"https://www.gitpod.io/docs/release-notes/2019-02-15/february-2019","loc":{"lines":{"from":83,"to":104}}}}],["1867",{"pageContent":"gp url\n\nOne of the things you do in a `.gitpod.yml` is declaring the exposed ports. Gitpod maps them to a specific subdomain in order to make them accessible. For instance if you have a dev server running on `0.0.0.0:3000` the `gp url` command gives you the external url for that service.\n\nHere is an example:\n\n```sh\ngitpod /workspace/release-notes $ gp url 3000\nhttps://3000-b33f605e-b32a-4e44-ae5a-acad9641de0a.ws-eu0.gitpod.io/\n```\n\n`gp url` can also give you the URL of the workspace itself:\n\n```sh\ngitpod /workspace/release-notes $ gp url\nhttps://b33f605e-b32a-4e44-ae5a-acad9641de0a.ws-eu0.gitpod.io/\n```\n\n### gp preview\n\n`gp preview` is similar to `gp open`, except that it does not open a file in the editor but a URL in a preview pane on the right.\n\nThis is especially handy together with `gp url` if you want to open a specific path from a script.\n\nHere's an example:\n\n```sh\ngp preview $(gp url 3000)my/special/path.html\n```","metadata":{"source":"https://www.gitpod.io/docs/release-notes/2019-02-15/february-2019","loc":{"lines":{"from":106,"to":134}}}}],["1868",{"pageContent":"Improved Docker Performance\n\nIn addition to the `.gitpod.yml` you can provide a `Dockerfile` which is automatically picked up by Gitpod. See [this blog post](https://medium.com/gitpod/bring-your-own-docker-image-to-gitpod-52db1aa861de) for more information on setting up a Dockerfile for your project.\n\nFor example, here is a Dockerfile that allows developing native UI applications in Go on Gitpod:\n\n```sh\nFROM gitpod/workspace-full-vnc\nRUN sudo apt-get update && \\\n    sudo apt-get install -y libgtk-3-dev && \\\n    sudo rm -rf /var/lib/apt/lists/*\n```\n\nSince we launched this feature, the performance and logging for docker builds have also been improved significantly.","metadata":{"source":"https://www.gitpod.io/docs/release-notes/2019-02-15/february-2019","loc":{"lines":{"from":136,"to":149}}}}],["1869",{"pageContent":"Status Page\n\nAs we continuously improve and expand Gitpod, there are times when things inevitably don't go as planned, occasionally causing downtime. If you're ever curious about the status of [gitpod.io](https://gitpod.io), or you'd like to follow how we resolve an incident, we made [status.gitpod.io](https://status.gitpod.io/) just for you.\n\nIn fact, thanks to [Statusfy](https://github.com/bazzite/statusfy), it took us just a few hours to build an entire [open source status page](https://github.com/gitpod-io/gitpod-status). Learn more about this short adventure in [this blog post](https://medium.com/gitpod/status-update-gitpod-%EF%B8%8F-statusfy-ed8266d63a20).","metadata":{"source":"https://www.gitpod.io/docs/release-notes/2019-02-15/february-2019","loc":{"lines":{"from":151,"to":155}}}}],["1870",{"pageContent":"Java Debugging\n\nIn addition to Node.js one can now also launch and debug Java applications directly from within the editor. Code lense actions on `main()` methods will automatically use the right classpath from the current project settings (based on maven, gradle or eclipse classpath information).\n\nLaunch configs are stored in a VS Code compatible `launch.json` file.\n\n![Debug Java](../../../../../static/images/docs/release-notes/2019-02-15/debug-java.jpg)\n\n## XML Support\n\nThe new improved XML support not only does syntax highlighting for XML and XSD but also uses associated schemas to provide diagnostics, content assist and hover information.\n\n![XML Support](../../../../../static/images/docs/release-notes/2019-02-15/xml-support.png)","metadata":{"source":"https://www.gitpod.io/docs/release-notes/2019-02-15/february-2019","loc":{"lines":{"from":157,"to":169}}}}],["1871",{"pageContent":"Better Previews\n\nPreviews can now easily be opened by clicking on the top right icon (![icon](../../../../../static/images/docs/release-notes/2019-02-15/icon.jpg)) on any previewable files, such as Markdown, HTML and SVG files.\n\nThe inverse is supported, too. I.e. clicking the file icon on the top right of a preview will open the corresponding editor on the left. For Markdown even scrolling is synced between the two views.\n\n## AsciiDoc Support\n\nIn addition to Markdown, Gitpod now also supports previewing AsciiDoc as you type.\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"ASCIIdoc Support\" src=\"/images/docs/release-notes/2019-02-15/asciidoc-support.webm\" type=\"video/webm\"></video>\n    <figcaption>ASCIIdoc Support</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/release-notes/2019-02-15/february-2019","loc":{"lines":{"from":171,"to":184}}}}],["1872",{"pageContent":"Many Bugfixes, small features and other improvements\n\nThese are just the most noteworthy features we have been working on.\nFor a more detailed list of bugfixes and enhancemenst see all the issues we've closed:\n\n- [Closed Issues in Gitpod](https://github.com/gitpod-io/gitpod/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aclosed+closed%3A%3E2018-11-01)\n- [Merged PRs in Theia](https://github.com/theia-ide/theia/pulls?utf8=%E2%9C%93&q=merged%3A%3E2018-11-01+merged%3A%3C2018-02-13+)","metadata":{"source":"https://www.gitpod.io/docs/release-notes/2019-02-15/february-2019","loc":{"lines":{"from":186,"to":192}}}}],["1873",{"pageContent":"<script context=\"module\">\n  export const prerender = true;\n  export const load = () => {\n    return {\n      status: 301,\n      redirect: \"/docs/release-notes/2019-02-15/february-2019\"\n    }\n  };\n</script>","metadata":{"source":"https://www.gitpod.io/docs/release-notes/2019-02-15","loc":{"lines":{"from":1,"to":9}}}}],["1874",{"pageContent":"<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# April 2019\n\nToday we are happy to announce that we are moving out of beta.\nWe want to thank all the beta testers who have provided great feedback. Gitpod wouldn't be what it is without you! ❤️\n\nYou can read more about the announcement in [the blog post](/blog/gitpod-launch).\n\nBesides a complete relaunch of the website and app, we have added some very exciting new features:","metadata":{"source":"https://www.gitpod.io/docs/release-notes/2019-04-05/april-2019","loc":{"lines":{"from":1,"to":12}}}}],["1875",{"pageContent":"GitHub App / Prebuilt Workspaces 🚀\n\nWe have been busy developing a <a href=\"https://github.com/apps/gitpod-io\" target=\"_blank\">new GitHub app</a>, that once installed on your repository will prebuild your project on every push.\nOn GitHub pull requests this is communicated through a status check.\n\n![Prebuilt Check on PR](../../../../../static/images/docs/release-notes/2019-04-05/prebuilt-check.png)\n\nAs a result, Gitpod is now the first IDE that builds your project, before you open it.\n\nRead more about this exciting feature in [the docs](/docs/configure/projects/prebuilds) and in [Chris' blog post](/blog/prebuilds).\n\n## Better `localhost` Handling\n\nWhen starting web servers in Gitpod, often times you need to explicitly make sure the dev server allows connections from non-localhost.\nStarting today, you no longer need to worry about that. Gitpod now forwards the port locally and rewrites the host headers,\nso that dev servers will be fine.","metadata":{"source":"https://www.gitpod.io/docs/release-notes/2019-04-05/april-2019","loc":{"lines":{"from":14,"to":29}}}}],["1876",{"pageContent":"Better Go Support\n\nGitpod now directly uses Microsoft's great Go support for VS Code.\n\n![VS Code Go Extension](../../../../../static/images/docs/release-notes/2019-04-05/vscode-go.png)\n\n## Unlimited Hours\n\nIf you don't feel comfortable with a time-based limit, you can now purchase the 'Unlimited' plan to use Gitpod as much as you like on public and private repositories.\n\nWe also offer [unlimited plans for teams](https://gitpod.io/teams/), and [for students](/pricing) the price for an unlimited plan is only 9$ or 8€.\n\n> If you have created your account during the beta, i.e. before April 5th, you will be able to work on private repositories for free for another month, on us.\n\nYou can check out the various [pricing options on the website](/pricing).","metadata":{"source":"https://www.gitpod.io/docs/release-notes/2019-04-05/april-2019","loc":{"lines":{"from":31,"to":45}}}}],["1877",{"pageContent":"New Design 💄\n\nAs part of the launch, we have refreshed the design of Gitpod. The website and dashboard now use a new dark theme that we hope you'll like, and the UI of the\nIDE is more closely matching the look of VS Code.\n\n![New Dashboard](../../../../../static/images/docs/release-notes/2019-04-05/dashboard-design.png)\n\n## Delete Workspace\n\nYou can now delete workspaces in the dashboard. Please note that deletion can not be reversed as we are really\ndeleting all the contents of your workspace.\n\nYou can also delete your entire account (hopefully the least used feature).\n\n## Many Small Improvements\n\nBesides these bigger features, we have fixed many bugs and improved the performance and user experience of Gitpod.\nWe have merged 146 PRs in Gitpod and <a href=\"https://github.com/theia-ide/theia/pulls?utf8=%E2%9C%93&q=is%3Apr+merged%3A%3E2019-02-05+\" target=\"_blank\">206 in Theia</a>.","metadata":{"source":"https://www.gitpod.io/docs/release-notes/2019-04-05/april-2019","loc":{"lines":{"from":47,"to":64}}}}],["1878",{"pageContent":"What's next?\n\nWith this release we have already added some VS Code extensions. Going forward we will double down on the integration.\nWe are looking at one programming language after the other, making sure the experience is excellent and the VS Code extensions\nwork as expected. Once we've reached a state where we are confident VS Code extensions work reliably in general, we will allow users to install them.\nFurthermore, we are focusing on start-up time improvements and, of course, bug-fixing and offering you a great development experience.","metadata":{"source":"https://www.gitpod.io/docs/release-notes/2019-04-05/april-2019","loc":{"lines":{"from":66,"to":71}}}}],["1879",{"pageContent":"<script context=\"module\">\n  export const prerender = true;\n  export const load = () => {\n    return {\n      status: 301,\n      redirect: \"/docs/release-notes/2019-04-05/april-2019\"\n    }\n  };\n</script>","metadata":{"source":"https://www.gitpod.io/docs/release-notes/2019-04-05","loc":{"lines":{"from":1,"to":9}}}}],["1880",{"pageContent":"<script context=\"module\">\n  export const prerender = true;\n  export const load = () => {\n    return {\n      status: 301,\n      redirect: \"/docs/release-notes/2019-06-17/june-2019\"\n    }\n  };\n</script>","metadata":{"source":"https://www.gitpod.io/docs/release-notes/2019-06-17","loc":{"lines":{"from":1,"to":9}}}}],["1881",{"pageContent":"<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# June 2019\n\nAfter the public launch of Gitpod.io in April, we have spent most of our time on changing our internal architecture to better scale and improve the cloud density as well\nas supporting VS Code extension. Although this work is not yet finished, we have added a bunch of new features on the way, which are listed below.\n\n## Toggle Maximize\n\nSimple but useful: Double-clicking a tab will maximize the corresponding panel.\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Toggle Maximize\" src=\"/images/docs/release-notes/2019-06-17/maximize.webm\" type=\"video/webm\"></video>\n    <figcaption>Toggle Maximize</figcaption>\n</figure>\n\n## Links in terminals\n\nYou can now follow links and open files from the terminal by clicking on the respective links.\n\n![Terminal Links](../../../../../static/images/docs/release-notes/2019-06-17/terminal-link.png)","metadata":{"source":"https://www.gitpod.io/docs/release-notes/2019-06-17/june-2019","loc":{"lines":{"from":1,"to":23}}}}],["1882",{"pageContent":"Environment Variables\n\nGitpod allows users to inject environment variables into workspaces. Based on a simple pattern against the repository name\none can filter which env vars are actually injected. Also please note that all environment variable values are encrypted before stored in the database.\n\nIn addition to user-based environment variables, you can pass environment variables through the context link on start.\nSee the [docs](/docs/configure/projects/environment-variables) for more information.","metadata":{"source":"https://www.gitpod.io/docs/release-notes/2019-06-17/june-2019","loc":{"lines":{"from":25,"to":31}}}}],["1883",{"pageContent":"Bi-directional Scroll Sync\n\nWhen editing Markdown files it is very convenient to see the preview next to the editor. You can open a preview by click the icon on the top right of the editor.\nNow you can scroll both the editor or the preview and see how the other part is scrolling with it, showing the corresponding sections.\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Scroll sync\" src=\"/images/docs/release-notes/2019-06-17/scroll-sync.webm\" type=\"video/webm\"></video>\n    <figcaption>Scroll sync</figcaption>\n</figure>\n\nContributed through [PR #5442](https://github.com/theia-ide/theia/pull/5442).\n\n## Better Rust support\n\nIn addition to the Go VS Code extension, Gitpod now also runs the official [Rust VS Code extensions](https://github.com/rust-lang/rls-vscode).\nSo expect faster and more reliable support for Rust.","metadata":{"source":"https://www.gitpod.io/docs/release-notes/2019-06-17/june-2019","loc":{"lines":{"from":33,"to":48}}}}],["1884",{"pageContent":"Emmet support\n\nGitpod comes with support for emmet, a web-developer’s toolkit that can greatly improve your HTML & CSS workflow.\nAmong other things it allows to quickly generate html boilerplate using shortcuts.\n\n![Emmet](../../../../../static/images/docs/release-notes/2019-06-17/emmet.png)\nSee the [cheat-sheet](https://docs.emmet.io/cheat-sheet/) for a quick overview of what's supported.\n\n## Debugging in Java\n\nThe debugging of Java applications had a problem in that it the process would pick a wrong java executable when launching processes.\nThis is now fixed.\n\n## Better Upload\n\nYou can now upload large files through drag and drop and see proper progress information on the top of the window.\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"upload\" src=\"/images/docs/release-notes/2019-06-17/upload.webm\" type=\"video/webm\"></video>\n    <figcaption>upload</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/release-notes/2019-06-17/june-2019","loc":{"lines":{"from":50,"to":70}}}}],["1885",{"pageContent":"Improved C++ Language Support\n\nWe have upgrade the language services to use the latest clangd version.\n\n## Better Git Amend\n\nThe git amend UI has been improved so that you can amend / squash multiple commits but also\nundo that.\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Git amend\" src=\"/images/docs/release-notes/2019-06-17/git-amend.webm\" type=\"video/webm\"></video>\n    <figcaption>Git amend</figcaption>\n</figure>\n\nAlso the entire SCM widget has been rewritten to match VS Code's UX.\n\n## Config: Port ranges\n\nIn your `.gitpod.yml` one can now specify [port ranges](/docs/configure/workspaces/ports#port-ranges), so you can manage antire ranges addition\nand tell Gitpod what to do when a service opens on one of those ports.","metadata":{"source":"https://www.gitpod.io/docs/release-notes/2019-06-17/june-2019","loc":{"lines":{"from":72,"to":91}}}}],["1886",{"pageContent":"CLI: _gp await-port_\n\nThe cli learned a new thing, that let's you wait for a certain port to open.\nThis is useful if you want to wait for a certain path and then take a specific action.\n\nHere's an example that will open a certain path in the preview once a service is a available port 3000:\n\n```sh\ngp await-port 3000 && gp preview $(gp url 3000)my/path/index.html\n```\n\n## Many Small Improvements\n\nBesides these bigger features, we have fixed many bugs and improved the performance and user experience of Gitpod.\nWe have merged 146 PRs in Gitpod and [220 in Theia](https://github.com/theia-ide/theia/pulls?utf8=%E2%9C%93&q=is%3Apr+merged%3A%3E2019-04-01+).","metadata":{"source":"https://www.gitpod.io/docs/release-notes/2019-06-17/june-2019","loc":{"lines":{"from":93,"to":107}}}}],["1887",{"pageContent":"What's next?\n\nWith this release we have added some additional VS Code extensions.\nThe upcoming release will allow you to install arbitrary VS Code extensions and add that as configuration to your `.gitpod.yml` files.\nThe GitLab integration as well as a easy-to-install, Self-Hosted version of Gitpod is in the works.\nFinally, we are looking into optimizing start-up time improvements and, of course, bug-fixing and offering you a great development experience.","metadata":{"source":"https://www.gitpod.io/docs/release-notes/2019-06-17/june-2019","loc":{"lines":{"from":109,"to":114}}}}],["1888",{"pageContent":"---\nsection: ides-and-editors\ntitle: CLion\n---\n\n<!--\n  This document is auto generated from generators/ide/jb-product.md\n  Edit this file instead and run `yarn generate:jb`to apply.\n-->\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n<!-- prettier-ignore -->\n# CLion\n\n> {title} is currently in [Beta](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/6576).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/clion","loc":{"lines":{"from":1,"to":18}}}}],["1889",{"pageContent":"Getting started\n\n1. **Install [JetBrains Gateway](https://www.jetbrains.com/help/clion/remote-development-a.html#gateway)** - With the [JetBrains Gateway and Gitpod](/docs/integrations/jetbrains-gateway) plugin you can create and manage your latest 20 Gitpod workspaces.\n2. **Install the Gitpod plugin** - Open JetBrains Gateway and you'll see the Gitpod logo on the main page. Click \"install\" to install the [Gitpod plugin](https://plugins.jetbrains.com/plugin/18438-gitpod-gateway) for JetBrains Gateway.\n3. **Update your Gitpod preferences** - Select {title} on the [Gitpod preferences page](https://gitpod.io/preferences) which will set {title} as your default IDE for future workspace starts.\n4. **Start (or restart) your workspace** - Either start a workspace directly from within the [JetBrains Gateway](/docs/integrations/jetbrains-gateway) via the Gitpod plugin **OR** open a new workspace directly in Gitpod where on workspace start you will be prompted to open {title} for that workspace.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/clion","loc":{"lines":{"from":20,"to":25}}}}],["1890",{"pageContent":"<figure>\n  <video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" src=\"/images/editors/select-jetbrains-ide.webm\" type=\"video/webm\"></video>\n  <figcaption>Updating Gitpod IDE preferences to {title}</figcaption>\n</figure>\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Opening a JetBrains IDE from Gitpod\" src=\"/images/editors/opening-the-thin-jetbrains-client.webm\" type=\"video/webm\"></video>\n    <figcaption>Opening a JetBrains IDE from Gitpod</figcaption>\n</figure>\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Updating the Gitpod plugin in JetBrains Gateway\" src=\"/images/editors/update-jetbrains-gateway-settings.webm\" type=\"video/webm\"></video>\n    <figcaption>Updating the Gitpod plugin in JetBrains Gateway</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/clion","loc":{"lines":{"from":27,"to":40}}}}],["1891",{"pageContent":"<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Opening a JetBrains IDE from Gateway\" src=\"/images/editors/open-from-jetbrains-gateway.webm\" type=\"video/webm\"></video>\n    <figcaption>Opening a JetBrains IDE from Gateway</figcaption>\n</figure>\n\n**Important:** You must restart any started workspaces for your IDE preferences to take effect.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/clion","loc":{"lines":{"from":42,"to":47}}}}],["1892",{"pageContent":"Install Plugins\n\n> This section relates to plugin management when using JetBrains IDEs in a remote development context. For information on regular plugin management, refer to <a href=\"https://www.jetbrains.com/help/clion/managing-plugins.html\" target=\"_blank\">{title} docs</a>.\n\nUnlike with regular development, JetBrains [Remote development](https://www.jetbrains.com/help/clion/remote-development-overview.html#defs) with {title} allows users to install plugins in different locations:","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/clion","loc":{"lines":{"from":49,"to":53}}}}],["1893",{"pageContent":"- [**{title} backend plugins**](#install-on-title-backend) - The JetBrains {title} backend runs within the remote Gitpod workspace. Backend plugins contribute functionality for IDE experiences relating to the filesystem, tools or languages and frameworks. When installed, **a backend plugin only applies to the currently running Gitpod workspace** and is not associated with a user. However, a plugin can be [preconfigured for all users of a repository](#preconfigure-for-repository) so that the plugin is enabled with every workspace start. It is not currently possible to install a backend plugin that applies to all workspaces of a Gitpod user or organization.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/clion","loc":{"lines":{"from":55,"to":55}}}}],["1894",{"pageContent":"- [**JetBrains Client plugins**](#install-on-jetbrains-client) - The JetBrains client runs on the users local machine and can be thought of as the user interface to the remote {title} backend. Client plugins are different to backend plugins as they contribute to the user interface aspect of the IDE experience (e.g. keyboard shortcuts and themes). Once installed, **a client plugin is enabled for all Gitpod workspaces the user opens** (if the workspace is running the exact same version of the {title} backend where the plugin was initially installed).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/clion","loc":{"lines":{"from":56,"to":56}}}}],["1895",{"pageContent":"- [**JetBrains Gateway plugins**](/docs/integrations/jetbrains-gateway#getting-started) - The JetBrains Gateway is an application downloaded onto a users local machine which allows users to start JetBrains Clients that are compatible with the {title} backend, running in a Gitpod workspace. JetBrains Gateway plugins are installed directly in JetBrains Gateway and contribute to remote development connection experiences (e.g. the [Gitpod JetBrains Gateway](https://plugins.jetbrains.com/plugin/18438-gitpod-gateway) plugin).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/clion","loc":{"lines":{"from":57,"to":57}}}}],["1896",{"pageContent":"Install on JetBrains Client\n\nThe JetBrains client runs on the users local machine and can be thought of as the user interface to the remote {title} backend. Client plugins contribute to the user interface aspect of the IDE experience (e.g. keyboard shortcuts and themes).\n\nOnce installed, **a client plugin is enabled for all Gitpod workspaces the user opens** (if the workspace is running the exact same version of the {title} backend where the plugin was initially installed).\n\nTo install a plugin on **JetBrains Client** follow these steps:\n\n- In **JetBrains Client** open the IDE settings and select **Plugins**.\n- Find the plugin in the **Marketplace** and click **Install**.\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Install a plugin on JetBrains Client\" src=\"/images/editors/install-local-jb-plugin.png\">\n    <figcaption>Install a plugin on JetBrains Client</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/clion","loc":{"lines":{"from":59,"to":73}}}}],["1897",{"pageContent":"Install on {title} backend\n\nThe JetBrains {title} backend runs within the remote Gitpod workspace. Backend plugins contribute functionality requiring access to IDE experiences such as the remote filesystem (e.g. contributing support of languages and frameworks).\n\nWhen installed, **a backend plugin only applies to the currently running Gitpod workspace** and is not associated with a user. However, a plugin can be [preconfigured for all users of a repository](#preconfigure-for-repository) so that the plugin is enabled with every workspace start.\n\nIt is not currently possible to install a backend plugin that applies to all workspaces of a Gitpod user or organization.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/clion","loc":{"lines":{"from":75,"to":81}}}}],["1898",{"pageContent":"Install for your current workspace\n\nYou can install a plugin only for **your current workspace** following these steps:\n\n- In **JetBrains Client** open the IDE settings and select **Plugins On Host**.\n- Find the plugin in the **Marketplace** and click **Install**.\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Install a plugin on {title} backend\" src=\"/images/editors/install-remote-jb-plugin.png\">\n    <figcaption>Install a plugin on {title} backend</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/clion","loc":{"lines":{"from":83,"to":93}}}}],["1899",{"pageContent":"Preconfigure for repository\n\n> JetBrains plugin support is currently in [Beta](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/6576).\n\nYou can share a plugin on **{title} backend** with everybody working on the repository by adding it to [.gitpod.yml](/docs/references/gitpod-yml) and pushing to your Git repository.\nEach workspace is preconfigured with plugins from the `gitpod.yml` configuration file. For example:\n\n```yaml\njetbrains:\n  clion:\n    plugins:\n      - zielu.gittoolbox\n      - izhangzhihao.rainbow.brackets\n```\n\nYou can find the **pluginId** on the [JetBrains Marketplace](https://plugins.jetbrains.com) page:\n\n- Find a page of the required plugin.\n- Select the **Versions** tab.\n- Click any version to copy the **pluginId** (short name such as `org.rust.lang`) of the plugin you want to install.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/clion","loc":{"lines":{"from":95,"to":114}}}}],["1900",{"pageContent":"Install for your user\n\nIt is not yet possible to install plugins on **{title} backend** for your user to share across all your Gitpod workspaces.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/clion","loc":{"lines":{"from":116,"to":118}}}}],["1901",{"pageContent":"Configure JVM options\n\n> Configuration of JVM options is currently in [Alpha](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/8704).\n\nYou can adjust JVM options for {title} backend, especially if you want to increase the `-Xmx` memory size. For example:\n\n```yaml\njetbrains:\n  clion:\n    vmoptions: \"-Xmx4g\"\n```\n\nFor more detailed information on JVM options, refer to [Common JVM Options](https://www.jetbrains.com/help/clion/tuning-the-ide.html#common-jvm-options) from JetBrains documentation.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/clion","loc":{"lines":{"from":120,"to":132}}}}],["1902",{"pageContent":"Configure IDE settings\n\n> **Feedback needed:** The JetBrains Gitpod integration is currently beta. Gitpod [continues to collaborate with JetBrains](https://www.gitpod.io/blog/gitpod-jetbrains). The below shows how you can configure global settings with JetBrains. To leave feedback on the approach, please see this GitHub issue: [#6576](https://github.com/gitpod-io/gitpod/issues/6576). Also note that JetBrains is working on [comprehensive settings sync functionality](https://youtrack.jetbrains.com/issue/RDCT-1/Settings-synchronization).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/clion","loc":{"lines":{"from":134,"to":136}}}}],["1903",{"pageContent":"When running {title} locally, the JetBrains IDE applies [global settings](https://www.jetbrains.com/help/clion/configuring-project-and-ide-settings.html) to all projects on your machine. However when running in a remote context using [JetBrains Gateway](/docs/integrations/jetbrains-gateway), it's important to note that some IDE settings are configured on the [JetBrains Client](#on-jetbrains-client) and others in the [{title} backend](#on-title-backend) running in your Gitpod [Workspace](/docs/configure/workspaces). See below instructions for more.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/clion","loc":{"lines":{"from":138,"to":138}}}}],["1904",{"pageContent":"On JetBrains Client\n\nIDE Settings that are configured on the JetBrains Client are stored on your local machine and don't have `On Host` label in the IDE settings. These IDE settings are reused if the workspace is running the exact same version of the {title} backend where the settings were initially configured.\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Configure IDE settings on JetBrains client\" src=\"/images/editors/jb-client-configure-settings-client.webp\">\n    <figcaption>JetBrains client settings don't have <code>On Host</code> label.</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/clion","loc":{"lines":{"from":140,"to":147}}}}],["1905",{"pageContent":"On {title} backend\n\nSettings configured on {title} backend are stored in a Gitpod workspace and have `On Host` label in the IDE settings.\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Configure IDE settings on JetBrains client\" src=\"/images/editors/jb-backend-configure-settings.webp\">\n    <figcaption>{title} backend settings have `On Host` label.</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/clion","loc":{"lines":{"from":149,"to":156}}}}],["1906",{"pageContent":"Configure IDE settings per project\n\nSome IDE settings cannot be configured via [environment variables](/docs/configure/projects/environment-variables#environment-variables) or through setting [vm options](#configure-jvm-options). These settings can only be set via the UI of JetBrains client, and must be manually copied to be syned between workspaces. The below steps detail how to configure your IDE settings for all the users of a given Gitpod project:\n\n**Step 1: Manually use JetBrains UI to configure settings** - Set your IDE settings as you normally would, using the JetBrains UI.\n\n**Step 2: Find generated IDE settings** - You will need to manually find any global settings generated by JetBrains backend within the following path: `/workspace/.config/JetBrains<-latest>/RemoteDev-/<your-project-name>/options`","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/clion","loc":{"lines":{"from":158,"to":164}}}}],["1907",{"pageContent":"**Step 3:** Move any relevant settings manually to a persistent location within your Gitpod project. Either via a [Workspace Image](/docs/configure/workspaces/workspace-image), or persisted in the version control of your project, for example by committing settings data to GitHub.\n\n**Include relevant IDE settings in your Workspace Image**\n\n- `/home/gitpod/.gitpod/jetbrains/options` - This location applies settings to all JetBrains products (IntelliJ IDEA, GoLang, etc).\n- `/home/gitpod/.gitpod/jetbrains/clion/options` - This location will apply settings only to the given IDE, e.g. {title}.\n\n**Commit relevant IDE settings to source control**\n\n- `/workspace/<your-project-name>/.gitpod/jetbrains/options` - This location applies settings to all JetBrains products (IntelliJ IDEA, GoLang, etc).\n- `/workspace/<your-project-name>/.gitpod/jetbrains/clion/options` - This location will apply settings only to the given IDE, e.g. {title}.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/clion","loc":{"lines":{"from":166,"to":176}}}}],["1908",{"pageContent":"For any further changes to your IDE settings, you will need to follow the above steps again.\n\n> **Note:** When locating and applying IDE settings, Gitpod will read the locations specified above in priority order. The locations specified first are overriden by the locations specified later.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/clion","loc":{"lines":{"from":178,"to":180}}}}],["1909",{"pageContent":"Configure IDE settings per user\n\nTo configure IDE settings for your user only, and not all those using a project.\n\nFollow the instructions for [configuring IDE settings per project](#configure-ide-settings-per-project), but instead use [.dotfiles](/docs/configure/user-settings/dotfiles#dotfiles) rather than a workspace image or source control to store your IDE settings.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/clion","loc":{"lines":{"from":182,"to":186}}}}],["1910",{"pageContent":"Indexing using Prebuilds\n\n> JetBrains Prebuilds is currently in [Alpha](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/6576).\n\nWhen you open the project {title} starts indexing to load modules and\nenable the core functionality like code completion and navigation.\nDepending on the size of your project indexing speed can vary significantly.\n\nYou can speed up the indexing of a project by applying these [general recommendations](https://www.jetbrains.com/help/clion/performance-tuning-tips.html).\nGitpod prebuilds allow you to improve it further by indexing before you start a new workspace.\n\nTo leverage it:\n\n- configure prebuilds for your repository, refer to [Prebuilds](/docs/configure/projects/prebuilds);\n- enable indexing for {title} in prebuilds by editing [.gitpod.yml](/docs/references/gitpod-yml) in your repository:\n\n```yaml\njetbrains:\n  clion:\n    prebuilds:\n      version: stable","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/clion","loc":{"lines":{"from":188,"to":208}}}}],["1911",{"pageContent":"- push changes to your Git repository to apply.\n\nThe `version` property allows you to control whether to index for `stable`, `latest`, or `both` versions of {title} compatible with Gitpod.\nUsers can switch between `stable` and `latest` versions of {title} on the [user preferences](https://gitpod.io/preferences) page.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/clion","loc":{"lines":{"from":211,"to":214}}}}],["1912",{"pageContent":"Workspace performance\n\nWhen using a Gitpod workspace you might experience performance issues caused by:\n\n- An application using more resources than expected\n- Resource consumption in adjacent containers running on the workspace node.\n\nIn your JetBrains IDE within the JetBrains Gateway [Backend Control Center](https://www.jetbrains.com/help/idea/work-inside-remote-project.html#control_center) you can find two metrics relating to your running workspace: `Workspace CPU` and `Workspace Memory`.\n\nThe remaining metrics you can find in the Backend Control Center regarding the node that your workspace is running on, and not the workspace itself.\n\n> **Note:** Performance information shown in the Backend Control Center is the same as the information that is shown when running the command [`gp top`](/docs/references/gitpod-cli#top) in your workspace, see the [Command Line Interface](/docs/references/gitpod-cli) documentation for more.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/clion","loc":{"lines":{"from":216,"to":227}}}}],["1913",{"pageContent":"![jetbrains performance](/images/jetbrains-gateway/jetbrains-performance-center.png)","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/clion","loc":{"lines":{"from":229,"to":229}}}}],["1914",{"pageContent":"FAQs\n\n- For the questions about supported IDEs and Editors in Gitpod, refer to [FAQs](/docs/references/ides-and-editors/faqs).\n\n- For the general questions about JetBrains Remote Development, refer to refer to the general IDE <a href=\"https://www.jetbrains.com/help/clion/faq-about-remote-development.html\" target=\"_blank\">{title} FAQ</a>.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/clion","loc":{"lines":{"from":231,"to":235}}}}],["1915",{"pageContent":"Are there any JetBrains optimizations I can make if my workspace is slow?\n\nDebugging performance can be challenging, as performance issues can depend on many factors such as how Gitpod is configured (if you're operating Gitpod on Self-Hosted). However, there are some ways you can gather performance information and optimise your JetBrains IDE setup with Gitpod:\n\n1. Firstly, to gather information on performance, you can [view workspace performance metrics from within the IDE](/docs/references/ides-and-editors/intellij#workspace-performance) in the Backend Control Center, or by using [`gp top`](/docs/references/gitpod-cli#top).\n2. You may also want to try adjusting the Max Heap Size allocated to the JetBrains Backend in the Settings tab of the Backend Control Center. If updating this setting helps your performance, you can set the `vmoptions` value for your JetBrains IDE in your `.gitpod.yml`.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/clion","loc":{"lines":{"from":237,"to":242}}}}],["1916",{"pageContent":"> **Note:** If the performance metrics show that your workspace is hitting its resource limits, and you are using Gitpod Self-Hosted, it might make sense to consider changing the resource configuration for your workspaces. This can be done via a [config-patch](/docs/configure/self-hosted/latest/config-patches). Configuring workspace resources is not yet available on SaaS.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/clion","loc":{"lines":{"from":244,"to":244}}}}],["1917",{"pageContent":"Troubleshooting\n\n- [What should I do if JetBrains Gateway and Gitpod aren’t working?](/docs/help/troubleshooting#what-should-i-do-if-jetbrains-gateway-and-gitpod-arent-working)\n- [Gitpod logs in JetBrains Client](/docs/help/troubleshooting#gitpod-logs-in-jetbrains-client)\n- [Gitpod logs in JetBrains Gateway](/docs/help/troubleshooting#gitpod-logs-in-jetbrains-gateway)","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/clion","loc":{"lines":{"from":246,"to":250}}}}],["1918",{"pageContent":"---\nsection: ides-and-editors\ntitle: Command Line (SSH)\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Command Line (SSH)\n\nYou can directly access your workspace via SSH for editing code directly using a [command-line editor](/docs/references/ides-and-editors/command-line), such as Vim & Emacs or for connecting SSH supported applications such as a database client.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/command-line","loc":{"lines":{"from":1,"to":12}}}}],["1919",{"pageContent":"Workspace SSH approaches\n\nThere are two ways to access a workspace via SSH using an SSH key or an Access Token.\n\n![Copy SSH key from modal](/images/docs/ssh-key-modal-dark-light-theme.png)\n![Copy SSH key from modal](/images/docs/ssh-key-modal-dark-theme.png)\n\n1. **SSH Key** (recommended) - By creating your own public/private SSH key pair, and uploading the public key to Gitpod you can directly SSH into a Gitpod workspace. Uploading a public key means that you do not need to keep re-visiting the Gitpod dashboard to retrieve an SSH command. It is also a more secure approach. See [configure SSH](/docs/configure/user-settings/ssh) for more.\n\n2. **Access Token** - Alternatively, you can access a workspace using the copy/paste SSH command. This approach uses an access token which is reset on every workspace start. This approach is useful for quick SSH access, or when installing an SSH key locally is not possible, such as on some devices.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/command-line","loc":{"lines":{"from":14,"to":23}}}}],["1920",{"pageContent":"SSH key Access\n\n> **Note:** You must upload a public key to Gitpod before you can access your workspace using an SSH key. See [configure SSH](/docs/configure/user-settings/ssh) for more.\n\nTo access a workspace using an SSH Key:\n\n1. Visit [your workspace list](https://gitpod.io/workspaces) in Gitpod\n2. View a running Gitpod workspace and click the more actions menu\n3. Select \"connect via SSH\"\n4. Copy paste the selected command\n\n<br/>\n\n![Accessing an SSH key from the workspace list](/images/docs/ssh-workspace-list-dark-theme.png)\n![Accessing an SSH key from the workspace list](/images/docs/ssh-workspace-list-light-theme.png)\n\n<br/>\n\n![SSH Key access via modal](/images/docs/ssh-key-modal-dark-light-theme.png)\n![SSH Key access via modal](/images/docs/ssh-key-modal-dark-theme.png)\n\nYou can also access the SSH connection string from the workspace start page, which is shown to users who have selected a desktop IDE or editor as their [preference](https://gitpod.io/preferences).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/command-line","loc":{"lines":{"from":25,"to":46}}}}],["1921",{"pageContent":"You can also access the SSH connection string from the workspace start page, which is shown to users who have selected a desktop IDE or editor as their [preference](https://gitpod.io/preferences).\n\n![SSH to a workspace via the workspace splash page](/images/docs/ssh-connect-splash-dark-theme.png)\n![SSH to a workspace via the workspace splash page](/images/docs/ssh-connect-splash-light-theme.png)","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/command-line","loc":{"lines":{"from":46,"to":49}}}}],["1922",{"pageContent":"Access Token SSH\n\nYou can currently copy/paste a simple SSH command to get command line access to your workspace from the Gitpod dashboard.\n\n1. Visit [your workspace list](https://gitpod.io/workspaces) in Gitpod\n2. View a running Gitpod workspace and click the more actions menu\n3. Select \"connect via SSH\"\n4. Navigate to the \"Access Token\" tab\n5. Copy paste the selected command\n\n<br/>\n\n![Accessing an SSH key from the workspace list](/images/docs/ssh-workspace-list-dark-theme.png)\n![Accessing an SSH key from the workspace list](/images/docs/ssh-workspace-list-light-theme.png)\n\n<br/>\n\n![SSH via access token from the workspace list](/images/docs/ssh-accesss-modal-dark-theme.png)\n![SSH via access token from the workspace list](/images/docs/ssh-accesss-modal-light-theme.png)\n\nYou can also access the SSH connection string from the workspace start page, which is shown to users who have selected a desktop IDE or editor as their [preference](https://gitpod.io/preferences).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/command-line","loc":{"lines":{"from":51,"to":71}}}}],["1923",{"pageContent":"You can also access the SSH connection string from the workspace start page, which is shown to users who have selected a desktop IDE or editor as their [preference](https://gitpod.io/preferences).\n\n![SSH to a workspace via the workspace splash page](/images/docs/ssh-connect-splash-dark-theme.png)\n![SSH to a workspace via the workspace splash page](/images/docs/ssh-connect-splash-light-theme.png)","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/command-line","loc":{"lines":{"from":71,"to":74}}}}],["1924",{"pageContent":"SSH via Local Companion\n\n> **Note:** It is possible to access your Gitpod workspaces via the command line using [local companion](/docs/references/ides-and-editors/local-companion), however access using an SSH key is the preferred approach.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/command-line","loc":{"lines":{"from":101,"to":103}}}}],["1925",{"pageContent":"---\nsection: ides-and-editors\ntitle: FAQs\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# FAQs\n\n## Is there a limit of IDE/editor connections to Gitpod?\n\nThere is no hard-limit about how many IDE/editors can be connected to a running Gitpod workspace. All connected IDEs/editors will have access to the same underlying file system and directories.\n\n## What version of VS Code runs in Gitpod (in the browser)?\n\nVS Code in the browser in Gitpod uses a fork of [VS Code](https://github.com/microsoft/vscode) called [openvscode-server](https://github.com/gitpod-io/openvscode-server). Gitpod actively monitors VS Code's release cycle, and releases the latest version of VS Code shortly after the upstream repository is updated. You can find more information about which version of VS Code is running in the browser by navigating to \"Help > About\" from a running Gitpod workspace.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/faqs","loc":{"lines":{"from":1,"to":18}}}}],["1926",{"pageContent":"Does Gitpod VS Code settings sync work with other products (e.g. Codespaces)?\n\nGitpod doesn't currently support settings sync with other hosted VS Code environments, such as [Codespaces](https://github.com/features/codespaces) or [vscode.dev](https://vscode.dev/).\n\n## My VS Code extensions are not syncing, what should I do?\n\n1. When installing an extension in Gitpod using the `Install (Do Not Sync)` option.\n2. Extensions defined in [`gitpod.yml`](https://www.gitpod.io/docs/references/gitpod-yml/)\n3. Extensions manually installed from a `vsix` file","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/faqs","loc":{"lines":{"from":20,"to":28}}}}],["1927",{"pageContent":"Can I use both a desktop IDE and a browser editor in Gitpod?\n\nYes, you can. Both desktop and browser IDEs/editors have full access to files and directories within the workspace. So, when you connect to your Gitpod workspace from your Desktop you can also access your workspace via your browser. This means browser-based editing can either be used as your first-choice editor, or as a \"fall back\" alternative option for when you want to make edits on the move. With Gitpod, where and how you edit your code is very flexible.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/faqs","loc":{"lines":{"from":30,"to":32}}}}],["1928",{"pageContent":"What is the preferred IDE/editor for Gitpod?\n\nThere are many supported ways to edit your code in Gitpod, there is no preferred experience. Gitpod is intended to be flexible to allow you and your team to use the tools you are most familiar and comfortable with. You can edit code in Gitpod using:\n\n1. [JetBrains IDE's](/docs/references/ides-and-editors) via [JetBrains Gateway](/docs/integrations/jetbrains-gateway)\n2. [VS Code in the browser](/docs/references/ides-and-editors/vscode-browser) and [VS Code on desktop](/docs/references/ides-and-editors/vscode)\n3. [Command-line](/docs/references/ides-and-editors/command-line) based editors such as Vim\n\nPlease see the [IDEs & editors](/docs/references/ides-and-editors) documentation for more details.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/faqs","loc":{"lines":{"from":34,"to":42}}}}],["1929",{"pageContent":"How do desktop and browser differ regarding performance?\n\nUsing a desktop editor like JetBrains or VS Code Desktop, files persist in the Gitpod workspace, however a copy of files is fetched to the client to improve performance. All desktop clients communicate via the SSH protocol. Most processing tasks like intellisense and auto-completion are executed in the server (the Gitpod workspace). You can optimize your in-terminal typing experience using [local echo](https://code.visualstudio.com/updates/v1_51#_local-echo) or [typeahead](https://www.jetbrains.com/help/rider/Advanced_settings.html#advanced_terminal).\n\n## Do I need a license to use JetBrains and Gitpod?\n\nThe licensing of Remote Development is handled on the local machine and is covered by your existing active IDE license. See [JetBrains documentation](https://www.jetbrains.com/help/idea/remote-development-starting-page.html#licensing) for more.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/faqs","loc":{"lines":{"from":44,"to":50}}}}],["1930",{"pageContent":"Will Gitpod support all the JetBrains IDE's?\n\nYes, the plan is to eventually support all of the JetBrains IDE's. Please refer to the [Gitpod roadmap](https://www.gitpod.io/roadmap) for future updates.\n\n## Does Gitpod support the IntelliJ IDEA Community edition?\n\nNo, JetBrains Remote Development and Gateway are available only in the IntelliJ IDEA Ultimate edition, please refer to [IntelliJ IDEA FAQ](https://www.jetbrains.com/help/idea/faq-about-remote-development.html#community).\n\n## Will Gitpod support JetBrains Fleet?\n\n[JetBrains Fleet](https://www.jetbrains.com/fleet/) is a next-generation IDE from JetBrains. The currently supported method of using JetBrains IDE's with Gitpod is on desktop via [JetBrains Gateway](/docs/integrations/jetbrains-gateway), please refer to our documentation for current [IDE and editor support](/docs/references/ides-and-editors) and the [Gitpod roadmap](https://www.gitpod.io/roadmap) for future updates.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/faqs","loc":{"lines":{"from":52,"to":62}}}}],["1931",{"pageContent":"Can I use JetBrains Projector with Gitpod?\n\nGitpod does not officially support [JetBrains Projector](https://lp.jetbrains.com/projector/). Gitpod has support for [JetBrains Gateway](/docs/integrations/jetbrains-gateway), which is the primary tool for remote development when using JetBrains IDE's.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/faqs","loc":{"lines":{"from":64,"to":66}}}}],["1932",{"pageContent":"---\nsection: ides-and-editors\ntitle: GoLand\n---\n\n<!--\n  This document is auto generated from generators/ide/jb-product.md\n  Edit this file instead and run `yarn generate:jb`to apply.\n-->\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n<!-- prettier-ignore -->\n# GoLand\n\n> {title} is currently in [Beta](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/6576).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/goland","loc":{"lines":{"from":1,"to":18}}}}],["1933",{"pageContent":"Getting started\n\n1. **Install [JetBrains Gateway](https://www.jetbrains.com/help/go/remote-development-a.html#gateway)** - With the [JetBrains Gateway and Gitpod](/docs/integrations/jetbrains-gateway) plugin you can create and manage your latest 20 Gitpod workspaces.\n2. **Install the Gitpod plugin** - Open JetBrains Gateway and you'll see the Gitpod logo on the main page. Click \"install\" to install the [Gitpod plugin](https://plugins.jetbrains.com/plugin/18438-gitpod-gateway) for JetBrains Gateway.\n3. **Update your Gitpod preferences** - Select {title} on the [Gitpod preferences page](https://gitpod.io/preferences) which will set {title} as your default IDE for future workspace starts.\n4. **Start (or restart) your workspace** - Either start a workspace directly from within the [JetBrains Gateway](/docs/integrations/jetbrains-gateway) via the Gitpod plugin **OR** open a new workspace directly in Gitpod where on workspace start you will be prompted to open {title} for that workspace.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/goland","loc":{"lines":{"from":20,"to":25}}}}],["1934",{"pageContent":"<figure>\n  <video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" src=\"/images/editors/select-jetbrains-ide.webm\" type=\"video/webm\"></video>\n  <figcaption>Updating Gitpod IDE preferences to {title}</figcaption>\n</figure>\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Opening a JetBrains IDE from Gitpod\" src=\"/images/editors/opening-the-thin-jetbrains-client.webm\" type=\"video/webm\"></video>\n    <figcaption>Opening a JetBrains IDE from Gitpod</figcaption>\n</figure>\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Updating the Gitpod plugin in JetBrains Gateway\" src=\"/images/editors/update-jetbrains-gateway-settings.webm\" type=\"video/webm\"></video>\n    <figcaption>Updating the Gitpod plugin in JetBrains Gateway</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/goland","loc":{"lines":{"from":27,"to":40}}}}],["1935",{"pageContent":"<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Opening a JetBrains IDE from Gateway\" src=\"/images/editors/open-from-jetbrains-gateway.webm\" type=\"video/webm\"></video>\n    <figcaption>Opening a JetBrains IDE from Gateway</figcaption>\n</figure>\n\n**Important:** You must restart any started workspaces for your IDE preferences to take effect.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/goland","loc":{"lines":{"from":42,"to":47}}}}],["1936",{"pageContent":"Install Plugins\n\n> This section relates to plugin management when using JetBrains IDEs in a remote development context. For information on regular plugin management, refer to <a href=\"https://www.jetbrains.com/help/go/managing-plugins.html\" target=\"_blank\">{title} docs</a>.\n\nUnlike with regular development, JetBrains [Remote development](https://www.jetbrains.com/help/go/remote-development-overview.html#defs) with {title} allows users to install plugins in different locations:","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/goland","loc":{"lines":{"from":49,"to":53}}}}],["1937",{"pageContent":"- [**{title} backend plugins**](#install-on-title-backend) - The JetBrains {title} backend runs within the remote Gitpod workspace. Backend plugins contribute functionality for IDE experiences relating to the filesystem, tools or languages and frameworks. When installed, **a backend plugin only applies to the currently running Gitpod workspace** and is not associated with a user. However, a plugin can be [preconfigured for all users of a repository](#preconfigure-for-repository) so that the plugin is enabled with every workspace start. It is not currently possible to install a backend plugin that applies to all workspaces of a Gitpod user or organization.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/goland","loc":{"lines":{"from":55,"to":55}}}}],["1938",{"pageContent":"- [**JetBrains Client plugins**](#install-on-jetbrains-client) - The JetBrains client runs on the users local machine and can be thought of as the user interface to the remote {title} backend. Client plugins are different to backend plugins as they contribute to the user interface aspect of the IDE experience (e.g. keyboard shortcuts and themes). Once installed, **a client plugin is enabled for all Gitpod workspaces the user opens** (if the workspace is running the exact same version of the {title} backend where the plugin was initially installed).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/goland","loc":{"lines":{"from":56,"to":56}}}}],["1939",{"pageContent":"- [**JetBrains Gateway plugins**](/docs/integrations/jetbrains-gateway#getting-started) - The JetBrains Gateway is an application downloaded onto a users local machine which allows users to start JetBrains Clients that are compatible with the {title} backend, running in a Gitpod workspace. JetBrains Gateway plugins are installed directly in JetBrains Gateway and contribute to remote development connection experiences (e.g. the [Gitpod JetBrains Gateway](https://plugins.jetbrains.com/plugin/18438-gitpod-gateway) plugin).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/goland","loc":{"lines":{"from":57,"to":57}}}}],["1940",{"pageContent":"Install on JetBrains Client\n\nThe JetBrains client runs on the users local machine and can be thought of as the user interface to the remote {title} backend. Client plugins contribute to the user interface aspect of the IDE experience (e.g. keyboard shortcuts and themes).\n\nOnce installed, **a client plugin is enabled for all Gitpod workspaces the user opens** (if the workspace is running the exact same version of the {title} backend where the plugin was initially installed).\n\nTo install a plugin on **JetBrains Client** follow these steps:\n\n- In **JetBrains Client** open the IDE settings and select **Plugins**.\n- Find the plugin in the **Marketplace** and click **Install**.\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Install a plugin on JetBrains Client\" src=\"/images/editors/install-local-jb-plugin.png\">\n    <figcaption>Install a plugin on JetBrains Client</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/goland","loc":{"lines":{"from":59,"to":73}}}}],["1941",{"pageContent":"Install on {title} backend\n\nThe JetBrains {title} backend runs within the remote Gitpod workspace. Backend plugins contribute functionality requiring access to IDE experiences such as the remote filesystem (e.g. contributing support of languages and frameworks).\n\nWhen installed, **a backend plugin only applies to the currently running Gitpod workspace** and is not associated with a user. However, a plugin can be [preconfigured for all users of a repository](#preconfigure-for-repository) so that the plugin is enabled with every workspace start.\n\nIt is not currently possible to install a backend plugin that applies to all workspaces of a Gitpod user or organization.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/goland","loc":{"lines":{"from":75,"to":81}}}}],["1942",{"pageContent":"Install for your current workspace\n\nYou can install a plugin only for **your current workspace** following these steps:\n\n- In **JetBrains Client** open the IDE settings and select **Plugins On Host**.\n- Find the plugin in the **Marketplace** and click **Install**.\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Install a plugin on {title} backend\" src=\"/images/editors/install-remote-jb-plugin.png\">\n    <figcaption>Install a plugin on {title} backend</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/goland","loc":{"lines":{"from":83,"to":93}}}}],["1943",{"pageContent":"Preconfigure for repository\n\n> JetBrains plugin support is currently in [Beta](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/6576).\n\nYou can share a plugin on **{title} backend** with everybody working on the repository by adding it to [.gitpod.yml](/docs/references/gitpod-yml) and pushing to your Git repository.\nEach workspace is preconfigured with plugins from the `gitpod.yml` configuration file. For example:\n\n```yaml\njetbrains:\n  goland:\n    plugins:\n      - zielu.gittoolbox\n      - izhangzhihao.rainbow.brackets\n```\n\nYou can find the **pluginId** on the [JetBrains Marketplace](https://plugins.jetbrains.com) page:\n\n- Find a page of the required plugin.\n- Select the **Versions** tab.\n- Click any version to copy the **pluginId** (short name such as `org.rust.lang`) of the plugin you want to install.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/goland","loc":{"lines":{"from":95,"to":114}}}}],["1944",{"pageContent":"Install for your user\n\nIt is not yet possible to install plugins on **{title} backend** for your user to share across all your Gitpod workspaces.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/goland","loc":{"lines":{"from":116,"to":118}}}}],["1945",{"pageContent":"Configure JVM options\n\n> Configuration of JVM options is currently in [Alpha](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/8704).\n\nYou can adjust JVM options for {title} backend, especially if you want to increase the `-Xmx` memory size. For example:\n\n```yaml\njetbrains:\n  goland:\n    vmoptions: \"-Xmx4g\"\n```\n\nFor more detailed information on JVM options, refer to [Common JVM Options](https://www.jetbrains.com/help/go/tuning-the-ide.html#common-jvm-options) from JetBrains documentation.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/goland","loc":{"lines":{"from":120,"to":132}}}}],["1946",{"pageContent":"Configure IDE settings\n\n> **Feedback needed:** The JetBrains Gitpod integration is currently beta. Gitpod [continues to collaborate with JetBrains](https://www.gitpod.io/blog/gitpod-jetbrains). The below shows how you can configure global settings with JetBrains. To leave feedback on the approach, please see this GitHub issue: [#6576](https://github.com/gitpod-io/gitpod/issues/6576). Also note that JetBrains is working on [comprehensive settings sync functionality](https://youtrack.jetbrains.com/issue/RDCT-1/Settings-synchronization).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/goland","loc":{"lines":{"from":134,"to":136}}}}],["1947",{"pageContent":"When running {title} locally, the JetBrains IDE applies [global settings](https://www.jetbrains.com/help/go/configuring-project-and-ide-settings.html) to all projects on your machine. However when running in a remote context using [JetBrains Gateway](/docs/integrations/jetbrains-gateway), it's important to note that some IDE settings are configured on the [JetBrains Client](#on-jetbrains-client) and others in the [{title} backend](#on-title-backend) running in your Gitpod [Workspace](/docs/configure/workspaces). See below instructions for more.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/goland","loc":{"lines":{"from":138,"to":138}}}}],["1948",{"pageContent":"On JetBrains Client\n\nIDE Settings that are configured on the JetBrains Client are stored on your local machine and don't have `On Host` label in the IDE settings. These IDE settings are reused if the workspace is running the exact same version of the {title} backend where the settings were initially configured.\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Configure IDE settings on JetBrains client\" src=\"/images/editors/jb-client-configure-settings-client.webp\">\n    <figcaption>JetBrains client settings don't have <code>On Host</code> label.</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/goland","loc":{"lines":{"from":140,"to":147}}}}],["1949",{"pageContent":"On {title} backend\n\nSettings configured on {title} backend are stored in a Gitpod workspace and have `On Host` label in the IDE settings.\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Configure IDE settings on JetBrains client\" src=\"/images/editors/jb-backend-configure-settings.webp\">\n    <figcaption>{title} backend settings have `On Host` label.</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/goland","loc":{"lines":{"from":149,"to":156}}}}],["1950",{"pageContent":"Configure IDE settings per project\n\nSome IDE settings cannot be configured via [environment variables](/docs/configure/projects/environment-variables#environment-variables) or through setting [vm options](#configure-jvm-options). These settings can only be set via the UI of JetBrains client, and must be manually copied to be syned between workspaces. The below steps detail how to configure your IDE settings for all the users of a given Gitpod project:\n\n**Step 1: Manually use JetBrains UI to configure settings** - Set your IDE settings as you normally would, using the JetBrains UI.\n\n**Step 2: Find generated IDE settings** - You will need to manually find any global settings generated by JetBrains backend within the following path: `/workspace/.config/JetBrains<-latest>/RemoteDev-GO/<your-project-name>/options`","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/goland","loc":{"lines":{"from":158,"to":164}}}}],["1951",{"pageContent":"**Step 3:** Move any relevant settings manually to a persistent location within your Gitpod project. Either via a [Workspace Image](/docs/configure/workspaces/workspace-image), or persisted in the version control of your project, for example by committing settings data to GitHub.\n\n**Include relevant IDE settings in your Workspace Image**\n\n- `/home/gitpod/.gitpod/jetbrains/options` - This location applies settings to all JetBrains products (IntelliJ IDEA, GoLang, etc).\n- `/home/gitpod/.gitpod/jetbrains/goland/options` - This location will apply settings only to the given IDE, e.g. {title}.\n\n**Commit relevant IDE settings to source control**\n\n- `/workspace/<your-project-name>/.gitpod/jetbrains/options` - This location applies settings to all JetBrains products (IntelliJ IDEA, GoLang, etc).\n- `/workspace/<your-project-name>/.gitpod/jetbrains/goland/options` - This location will apply settings only to the given IDE, e.g. {title}.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/goland","loc":{"lines":{"from":166,"to":176}}}}],["1952",{"pageContent":"For any further changes to your IDE settings, you will need to follow the above steps again.\n\n> **Note:** When locating and applying IDE settings, Gitpod will read the locations specified above in priority order. The locations specified first are overriden by the locations specified later.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/goland","loc":{"lines":{"from":178,"to":180}}}}],["1953",{"pageContent":"Configure IDE settings per user\n\nTo configure IDE settings for your user only, and not all those using a project.\n\nFollow the instructions for [configuring IDE settings per project](#configure-ide-settings-per-project), but instead use [.dotfiles](/docs/configure/user-settings/dotfiles#dotfiles) rather than a workspace image or source control to store your IDE settings.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/goland","loc":{"lines":{"from":182,"to":186}}}}],["1954",{"pageContent":"Indexing using Prebuilds\n\n> JetBrains Prebuilds is currently in [Alpha](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/6576).\n\nWhen you open the project {title} starts indexing to load modules and\nenable the core functionality like code completion and navigation.\nDepending on the size of your project indexing speed can vary significantly.\n\nYou can speed up the indexing of a project by applying these [general recommendations](https://www.jetbrains.com/help/go/indexing.html).\nGitpod prebuilds allow you to improve it further by indexing before you start a new workspace.\n\nTo leverage it:\n\n- configure prebuilds for your repository, refer to [Prebuilds](/docs/configure/projects/prebuilds);\n- enable indexing for {title} in prebuilds by editing [.gitpod.yml](/docs/references/gitpod-yml) in your repository:\n\n```yaml\njetbrains:\n  goland:\n    prebuilds:\n      version: stable","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/goland","loc":{"lines":{"from":188,"to":208}}}}],["1955",{"pageContent":"- push changes to your Git repository to apply.\n\nThe `version` property allows you to control whether to index for `stable`, `latest`, or `both` versions of {title} compatible with Gitpod.\nUsers can switch between `stable` and `latest` versions of {title} on the [user preferences](https://gitpod.io/preferences) page.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/goland","loc":{"lines":{"from":211,"to":214}}}}],["1956",{"pageContent":"Workspace performance\n\nWhen using a Gitpod workspace you might experience performance issues caused by:\n\n- An application using more resources than expected\n- Resource consumption in adjacent containers running on the workspace node.\n\nIn your JetBrains IDE within the JetBrains Gateway [Backend Control Center](https://www.jetbrains.com/help/idea/work-inside-remote-project.html#control_center) you can find two metrics relating to your running workspace: `Workspace CPU` and `Workspace Memory`.\n\nThe remaining metrics you can find in the Backend Control Center regarding the node that your workspace is running on, and not the workspace itself.\n\n> **Note:** Performance information shown in the Backend Control Center is the same as the information that is shown when running the command [`gp top`](/docs/references/gitpod-cli#top) in your workspace, see the [Command Line Interface](/docs/references/gitpod-cli) documentation for more.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/goland","loc":{"lines":{"from":216,"to":227}}}}],["1957",{"pageContent":"![jetbrains performance](/images/jetbrains-gateway/jetbrains-performance-center.png)","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/goland","loc":{"lines":{"from":229,"to":229}}}}],["1958",{"pageContent":"FAQs\n\n- For the questions about supported IDEs and Editors in Gitpod, refer to [FAQs](/docs/references/ides-and-editors/faqs).\n\n- For the general questions about JetBrains Remote Development, refer to refer to the general IDE <a href=\"https://www.jetbrains.com/help/go/faq-about-remote-development.html\" target=\"_blank\">{title} FAQ</a>.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/goland","loc":{"lines":{"from":231,"to":235}}}}],["1959",{"pageContent":"Are there any JetBrains optimizations I can make if my workspace is slow?\n\nDebugging performance can be challenging, as performance issues can depend on many factors such as how Gitpod is configured (if you're operating Gitpod on Self-Hosted). However, there are some ways you can gather performance information and optimise your JetBrains IDE setup with Gitpod:\n\n1. Firstly, to gather information on performance, you can [view workspace performance metrics from within the IDE](/docs/references/ides-and-editors/intellij#workspace-performance) in the Backend Control Center, or by using [`gp top`](/docs/references/gitpod-cli#top).\n2. You may also want to try adjusting the Max Heap Size allocated to the JetBrains Backend in the Settings tab of the Backend Control Center. If updating this setting helps your performance, you can set the `vmoptions` value for your JetBrains IDE in your `.gitpod.yml`.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/goland","loc":{"lines":{"from":237,"to":242}}}}],["1960",{"pageContent":"> **Note:** If the performance metrics show that your workspace is hitting its resource limits, and you are using Gitpod Self-Hosted, it might make sense to consider changing the resource configuration for your workspaces. This can be done via a [config-patch](/docs/configure/self-hosted/latest/config-patches). Configuring workspace resources is not yet available on SaaS.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/goland","loc":{"lines":{"from":244,"to":244}}}}],["1961",{"pageContent":"Troubleshooting\n\n- [What should I do if JetBrains Gateway and Gitpod aren’t working?](/docs/help/troubleshooting#what-should-i-do-if-jetbrains-gateway-and-gitpod-arent-working)\n- [Gitpod logs in JetBrains Client](/docs/help/troubleshooting#gitpod-logs-in-jetbrains-client)\n- [Gitpod logs in JetBrains Gateway](/docs/help/troubleshooting#gitpod-logs-in-jetbrains-gateway)","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/goland","loc":{"lines":{"from":246,"to":250}}}}],["1962",{"pageContent":"---\nsection: ides-and-editors\ntitle: IDEs & Editors\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n<script lang=\"ts\">\n    import OpenGraph from \"$lib/components/open-graph.svelte\";\n</script>\n\n<OpenGraph\ndata={{\n    description:\n      \"Connect and integrate Gitpod workspaces with your favourite IDE or editor. VS Code Browser and Desktop. JetBrains. IntelliJ. GoLand. PhpStorm. PyCharm. Vim. Emacs. SSH.\",\n    title: \"Gitpod integrates with VS Code, JetBrains and SSH.\",\n    keywords: \"online IDEs, JetBrains, VS Code, IntelliJ, PHPStorm, PyCharm, Rider, RubyMine, WebStorm, CLion etc.\",\n  }}\n/>\n\n# IDEs & Editors","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors","loc":{"lines":{"from":1,"to":23}}}}],["1963",{"pageContent":"# IDEs & Editors\n\nIn line with [our ambition to \"remove all friction from the developer experience\"](https://www.notion.so/gitpod/Values-Attributes-2ed4c2f93c84499b98e3b5389980992e), Gitpod currently supports many popular IDE/editors e.g. JetBrains and VS Code through both the browser and on desktop. You can even use the command-line directly for editors like Vim (via SSH). There are many ways to configure your IDE/editor in Gitpod to match your preferred workflow or setup.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors","loc":{"lines":{"from":23,"to":25}}}}],["1964",{"pageContent":"Connecting an IDE/editor to Gitpod\n\nThe three main ways to edit code or access a Gitpod workspace:\n\n1. **Browser** - Using [VS Code Browser](/docs/references/ides-and-editors/vscode-browser).\n2. **SSH** - Using an [SSH key](/docs/references/ides-and-editors/command-line#ssh-key-access) or an [Access Token](/docs/references/ides-and-editors/command-line#access-token-ssh).\n3. **Desktop** - Using [VS Code Desktop](ides-and-editors/vscode) or [JetBrains Gateway](/docs/integrations/jetbrains-gateway).\n\n### Supported IDE/editors\n\n- [VS Code Browser](ides-and-editors/vscode-browser)\n- [VS Code Desktop](ides-and-editors/vscode)\n- [IntelliJ](ides-and-editors/intellij)\n- [GoLand](ides-and-editors/goland)\n- [PhpStorm](ides-and-editors/phpstorm)\n- [PyCharm](ides-and-editors/pycharm)\n- [RubyMine](ides-and-editors/rubymine)\n- [WebStorm](ides-and-editors/webstorm)\n- [Rider](ides-and-editors/rider)\n- [CLion](ides-and-editors/clion)\n- [Command Line (e.g. Vim)](ides-and-editors/command-line)","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors","loc":{"lines":{"from":27,"to":47}}}}],["1965",{"pageContent":"Start a workspace with an IDE/editor\n\nYou can start a workspace with your favourite IDE/editor directly from [Gitpod Dashboard](https://gitpod.io/workspaces). You can do that from by clicking on the `New Workspace` button. Then, you can select the [context url](/docs/introduction/learn-gitpod/context-url), Editor and custom [workspace class](/docs/configure/workspaces/workspace-classes).\n\n<figure>\n<video onloadstart=\"this.playbackRate = 1.5;\" controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-2xl mt-x-small\" alt=\"Start Gitpod new workspace with options\" src=\"/images/docs/new-workspace-start-with-options.webm\" type=\"video/webm\"></video>\n    <figcaption>Open New Gitpod Workspace with your favourite IDE • <a href=\"https://gitpod.io/workspaces\">Gitpod Dashboard</a></figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors","loc":{"lines":{"from":49,"to":56}}}}],["1966",{"pageContent":"---\nsection: ides-and-editors\ntitle: IntelliJ IDEA\n---\n\n<!--\n  This document is auto generated from generators/ide/jb-product.md\n  Edit this file instead and run `yarn generate:jb`to apply.\n-->\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n<!-- prettier-ignore -->\n# IntelliJ IDEA Ultimate\n\n> {title} is currently in [Beta](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/6576).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/intellij","loc":{"lines":{"from":1,"to":18}}}}],["1967",{"pageContent":"Getting started\n\n1. **Install [JetBrains Gateway](https://www.jetbrains.com/help/idea/remote-development-a.html#gateway)** - With the [JetBrains Gateway and Gitpod](/docs/integrations/jetbrains-gateway) plugin you can create and manage your latest 20 Gitpod workspaces.\n2. **Install the Gitpod plugin** - Open JetBrains Gateway and you'll see the Gitpod logo on the main page. Click \"install\" to install the [Gitpod plugin](https://plugins.jetbrains.com/plugin/18438-gitpod-gateway) for JetBrains Gateway.\n3. **Update your Gitpod preferences** - Select {title} on the [Gitpod preferences page](https://gitpod.io/preferences) which will set {title} as your default IDE for future workspace starts.\n4. **Start (or restart) your workspace** - Either start a workspace directly from within the [JetBrains Gateway](/docs/integrations/jetbrains-gateway) via the Gitpod plugin **OR** open a new workspace directly in Gitpod where on workspace start you will be prompted to open {title} for that workspace.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/intellij","loc":{"lines":{"from":20,"to":25}}}}],["1968",{"pageContent":"<figure>\n  <video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" src=\"/images/editors/select-jetbrains-ide.webm\" type=\"video/webm\"></video>\n  <figcaption>Updating Gitpod IDE preferences to {title}</figcaption>\n</figure>\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Opening a JetBrains IDE from Gitpod\" src=\"/images/editors/opening-the-thin-jetbrains-client.webm\" type=\"video/webm\"></video>\n    <figcaption>Opening a JetBrains IDE from Gitpod</figcaption>\n</figure>\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Updating the Gitpod plugin in JetBrains Gateway\" src=\"/images/editors/update-jetbrains-gateway-settings.webm\" type=\"video/webm\"></video>\n    <figcaption>Updating the Gitpod plugin in JetBrains Gateway</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/intellij","loc":{"lines":{"from":27,"to":40}}}}],["1969",{"pageContent":"<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Opening a JetBrains IDE from Gateway\" src=\"/images/editors/open-from-jetbrains-gateway.webm\" type=\"video/webm\"></video>\n    <figcaption>Opening a JetBrains IDE from Gateway</figcaption>\n</figure>\n\n**Important:** You must restart any started workspaces for your IDE preferences to take effect.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/intellij","loc":{"lines":{"from":42,"to":47}}}}],["1970",{"pageContent":"Install Plugins\n\n> This section relates to plugin management when using JetBrains IDEs in a remote development context. For information on regular plugin management, refer to <a href=\"https://www.jetbrains.com/help/idea/managing-plugins.html\" target=\"_blank\">{title} docs</a>.\n\nUnlike with regular development, JetBrains [Remote development](https://www.jetbrains.com/help/idea/remote-development-overview.html#defs) with {title} allows users to install plugins in different locations:","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/intellij","loc":{"lines":{"from":49,"to":53}}}}],["1971",{"pageContent":"- [**{title} backend plugins**](#install-on-title-backend) - The JetBrains {title} backend runs within the remote Gitpod workspace. Backend plugins contribute functionality for IDE experiences relating to the filesystem, tools or languages and frameworks. When installed, **a backend plugin only applies to the currently running Gitpod workspace** and is not associated with a user. However, a plugin can be [preconfigured for all users of a repository](#preconfigure-for-repository) so that the plugin is enabled with every workspace start. It is not currently possible to install a backend plugin that applies to all workspaces of a Gitpod user or organization.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/intellij","loc":{"lines":{"from":55,"to":55}}}}],["1972",{"pageContent":"- [**JetBrains Client plugins**](#install-on-jetbrains-client) - The JetBrains client runs on the users local machine and can be thought of as the user interface to the remote {title} backend. Client plugins are different to backend plugins as they contribute to the user interface aspect of the IDE experience (e.g. keyboard shortcuts and themes). Once installed, **a client plugin is enabled for all Gitpod workspaces the user opens** (if the workspace is running the exact same version of the {title} backend where the plugin was initially installed).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/intellij","loc":{"lines":{"from":56,"to":56}}}}],["1973",{"pageContent":"- [**JetBrains Gateway plugins**](/docs/integrations/jetbrains-gateway#getting-started) - The JetBrains Gateway is an application downloaded onto a users local machine which allows users to start JetBrains Clients that are compatible with the {title} backend, running in a Gitpod workspace. JetBrains Gateway plugins are installed directly in JetBrains Gateway and contribute to remote development connection experiences (e.g. the [Gitpod JetBrains Gateway](https://plugins.jetbrains.com/plugin/18438-gitpod-gateway) plugin).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/intellij","loc":{"lines":{"from":57,"to":57}}}}],["1974",{"pageContent":"Install on JetBrains Client\n\nThe JetBrains client runs on the users local machine and can be thought of as the user interface to the remote {title} backend. Client plugins contribute to the user interface aspect of the IDE experience (e.g. keyboard shortcuts and themes).\n\nOnce installed, **a client plugin is enabled for all Gitpod workspaces the user opens** (if the workspace is running the exact same version of the {title} backend where the plugin was initially installed).\n\nTo install a plugin on **JetBrains Client** follow these steps:\n\n- In **JetBrains Client** open the IDE settings and select **Plugins**.\n- Find the plugin in the **Marketplace** and click **Install**.\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Install a plugin on JetBrains Client\" src=\"/images/editors/install-local-jb-plugin.png\">\n    <figcaption>Install a plugin on JetBrains Client</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/intellij","loc":{"lines":{"from":59,"to":73}}}}],["1975",{"pageContent":"Install on {title} backend\n\nThe JetBrains {title} backend runs within the remote Gitpod workspace. Backend plugins contribute functionality requiring access to IDE experiences such as the remote filesystem (e.g. contributing support of languages and frameworks).\n\nWhen installed, **a backend plugin only applies to the currently running Gitpod workspace** and is not associated with a user. However, a plugin can be [preconfigured for all users of a repository](#preconfigure-for-repository) so that the plugin is enabled with every workspace start.\n\nIt is not currently possible to install a backend plugin that applies to all workspaces of a Gitpod user or organization.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/intellij","loc":{"lines":{"from":75,"to":81}}}}],["1976",{"pageContent":"Install for your current workspace\n\nYou can install a plugin only for **your current workspace** following these steps:\n\n- In **JetBrains Client** open the IDE settings and select **Plugins On Host**.\n- Find the plugin in the **Marketplace** and click **Install**.\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Install a plugin on {title} backend\" src=\"/images/editors/install-remote-jb-plugin.png\">\n    <figcaption>Install a plugin on {title} backend</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/intellij","loc":{"lines":{"from":83,"to":93}}}}],["1977",{"pageContent":"Preconfigure for repository\n\n> JetBrains plugin support is currently in [Beta](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/6576).\n\nYou can share a plugin on **{title} backend** with everybody working on the repository by adding it to [.gitpod.yml](/docs/references/gitpod-yml) and pushing to your Git repository.\nEach workspace is preconfigured with plugins from the `gitpod.yml` configuration file. For example:\n\n```yaml\njetbrains:\n  intellij:\n    plugins:\n      - zielu.gittoolbox\n      - izhangzhihao.rainbow.brackets\n```\n\nYou can find the **pluginId** on the [JetBrains Marketplace](https://plugins.jetbrains.com) page:\n\n- Find a page of the required plugin.\n- Select the **Versions** tab.\n- Click any version to copy the **pluginId** (short name such as `org.rust.lang`) of the plugin you want to install.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/intellij","loc":{"lines":{"from":95,"to":114}}}}],["1978",{"pageContent":"Install for your user\n\nIt is not yet possible to install plugins on **{title} backend** for your user to share across all your Gitpod workspaces.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/intellij","loc":{"lines":{"from":116,"to":118}}}}],["1979",{"pageContent":"Configure JVM options\n\n> Configuration of JVM options is currently in [Alpha](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/8704).\n\nYou can adjust JVM options for {title} backend, especially if you want to increase the `-Xmx` memory size. For example:\n\n```yaml\njetbrains:\n  intellij:\n    vmoptions: \"-Xmx4g\"\n```\n\nFor more detailed information on JVM options, refer to [Common JVM Options](https://www.jetbrains.com/help/idea/tuning-the-ide.html#common-jvm-options) from JetBrains documentation.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/intellij","loc":{"lines":{"from":120,"to":132}}}}],["1980",{"pageContent":"Configure IDE settings\n\n> **Feedback needed:** The JetBrains Gitpod integration is currently beta. Gitpod [continues to collaborate with JetBrains](https://www.gitpod.io/blog/gitpod-jetbrains). The below shows how you can configure global settings with JetBrains. To leave feedback on the approach, please see this GitHub issue: [#6576](https://github.com/gitpod-io/gitpod/issues/6576). Also note that JetBrains is working on [comprehensive settings sync functionality](https://youtrack.jetbrains.com/issue/RDCT-1/Settings-synchronization).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/intellij","loc":{"lines":{"from":134,"to":136}}}}],["1981",{"pageContent":"When running {title} locally, the JetBrains IDE applies [global settings](https://www.jetbrains.com/help/idea/configuring-project-and-ide-settings.html) to all projects on your machine. However when running in a remote context using [JetBrains Gateway](/docs/integrations/jetbrains-gateway), it's important to note that some IDE settings are configured on the [JetBrains Client](#on-jetbrains-client) and others in the [{title} backend](#on-title-backend) running in your Gitpod [Workspace](/docs/configure/workspaces). See below instructions for more.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/intellij","loc":{"lines":{"from":138,"to":138}}}}],["1982",{"pageContent":"On JetBrains Client\n\nIDE Settings that are configured on the JetBrains Client are stored on your local machine and don't have `On Host` label in the IDE settings. These IDE settings are reused if the workspace is running the exact same version of the {title} backend where the settings were initially configured.\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Configure IDE settings on JetBrains client\" src=\"/images/editors/jb-client-configure-settings-client.webp\">\n    <figcaption>JetBrains client settings don't have <code>On Host</code> label.</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/intellij","loc":{"lines":{"from":140,"to":147}}}}],["1983",{"pageContent":"On {title} backend\n\nSettings configured on {title} backend are stored in a Gitpod workspace and have `On Host` label in the IDE settings.\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Configure IDE settings on JetBrains client\" src=\"/images/editors/jb-backend-configure-settings.webp\">\n    <figcaption>{title} backend settings have `On Host` label.</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/intellij","loc":{"lines":{"from":149,"to":156}}}}],["1984",{"pageContent":"Configure IDE settings per project\n\nSome IDE settings cannot be configured via [environment variables](/docs/configure/projects/environment-variables#environment-variables) or through setting [vm options](#configure-jvm-options). These settings can only be set via the UI of JetBrains client, and must be manually copied to be syned between workspaces. The below steps detail how to configure your IDE settings for all the users of a given Gitpod project:\n\n**Step 1: Manually use JetBrains UI to configure settings** - Set your IDE settings as you normally would, using the JetBrains UI.\n\n**Step 2: Find generated IDE settings** - You will need to manually find any global settings generated by JetBrains backend within the following path: `/workspace/.config/JetBrains<-latest>/RemoteDev-IU/<your-project-name>/options`","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/intellij","loc":{"lines":{"from":158,"to":164}}}}],["1985",{"pageContent":"**Step 3:** Move any relevant settings manually to a persistent location within your Gitpod project. Either via a [Workspace Image](/docs/configure/workspaces/workspace-image), or persisted in the version control of your project, for example by committing settings data to GitHub.\n\n**Include relevant IDE settings in your Workspace Image**\n\n- `/home/gitpod/.gitpod/jetbrains/options` - This location applies settings to all JetBrains products (IntelliJ IDEA, GoLang, etc).\n- `/home/gitpod/.gitpod/jetbrains/intellij/options` - This location will apply settings only to the given IDE, e.g. {title}.\n\n**Commit relevant IDE settings to source control**\n\n- `/workspace/<your-project-name>/.gitpod/jetbrains/options` - This location applies settings to all JetBrains products (IntelliJ IDEA, GoLang, etc).\n- `/workspace/<your-project-name>/.gitpod/jetbrains/intellij/options` - This location will apply settings only to the given IDE, e.g. {title}.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/intellij","loc":{"lines":{"from":166,"to":176}}}}],["1986",{"pageContent":"For any further changes to your IDE settings, you will need to follow the above steps again.\n\n> **Note:** When locating and applying IDE settings, Gitpod will read the locations specified above in priority order. The locations specified first are overriden by the locations specified later.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/intellij","loc":{"lines":{"from":178,"to":180}}}}],["1987",{"pageContent":"Configure IDE settings per user\n\nTo configure IDE settings for your user only, and not all those using a project.\n\nFollow the instructions for [configuring IDE settings per project](#configure-ide-settings-per-project), but instead use [.dotfiles](/docs/configure/user-settings/dotfiles#dotfiles) rather than a workspace image or source control to store your IDE settings.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/intellij","loc":{"lines":{"from":182,"to":186}}}}],["1988",{"pageContent":"Indexing using Prebuilds\n\n> JetBrains Prebuilds is currently in [Alpha](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/6576).\n\nWhen you open the project {title} starts indexing to load modules and\nenable the core functionality like code completion and navigation.\nDepending on the size of your project indexing speed can vary significantly.\n\nYou can speed up the indexing of a project by applying these [general recommendations](https://www.jetbrains.com/help/idea/indexing.html).\nGitpod prebuilds allow you to improve it further by indexing before you start a new workspace.\n\nTo leverage it:\n\n- configure prebuilds for your repository, refer to [Prebuilds](/docs/configure/projects/prebuilds);\n- enable indexing for {title} in prebuilds by editing [.gitpod.yml](/docs/references/gitpod-yml) in your repository:\n\n```yaml\njetbrains:\n  intellij:\n    prebuilds:\n      version: stable","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/intellij","loc":{"lines":{"from":188,"to":208}}}}],["1989",{"pageContent":"- push changes to your Git repository to apply.\n\nThe `version` property allows you to control whether to index for `stable`, `latest`, or `both` versions of {title} compatible with Gitpod.\nUsers can switch between `stable` and `latest` versions of {title} on the [user preferences](https://gitpod.io/preferences) page.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/intellij","loc":{"lines":{"from":211,"to":214}}}}],["1990",{"pageContent":"Workspace performance\n\nWhen using a Gitpod workspace you might experience performance issues caused by:\n\n- An application using more resources than expected\n- Resource consumption in adjacent containers running on the workspace node.\n\nIn your JetBrains IDE within the JetBrains Gateway [Backend Control Center](https://www.jetbrains.com/help/idea/work-inside-remote-project.html#control_center) you can find two metrics relating to your running workspace: `Workspace CPU` and `Workspace Memory`.\n\nThe remaining metrics you can find in the Backend Control Center regarding the node that your workspace is running on, and not the workspace itself.\n\n> **Note:** Performance information shown in the Backend Control Center is the same as the information that is shown when running the command [`gp top`](/docs/references/gitpod-cli#top) in your workspace, see the [Command Line Interface](/docs/references/gitpod-cli) documentation for more.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/intellij","loc":{"lines":{"from":216,"to":227}}}}],["1991",{"pageContent":"![jetbrains performance](/images/jetbrains-gateway/jetbrains-performance-center.png)","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/intellij","loc":{"lines":{"from":229,"to":229}}}}],["1992",{"pageContent":"FAQs\n\n- For the questions about supported IDEs and Editors in Gitpod, refer to [FAQs](/docs/references/ides-and-editors/faqs).\n\n- For the general questions about JetBrains Remote Development, refer to refer to the general IDE <a href=\"https://www.jetbrains.com/help/idea/faq-about-remote-development.html\" target=\"_blank\">{title} FAQ</a>.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/intellij","loc":{"lines":{"from":231,"to":235}}}}],["1993",{"pageContent":"Are there any JetBrains optimizations I can make if my workspace is slow?\n\nDebugging performance can be challenging, as performance issues can depend on many factors such as how Gitpod is configured (if you're operating Gitpod on Self-Hosted). However, there are some ways you can gather performance information and optimise your JetBrains IDE setup with Gitpod:\n\n1. Firstly, to gather information on performance, you can [view workspace performance metrics from within the IDE](/docs/references/ides-and-editors/intellij#workspace-performance) in the Backend Control Center, or by using [`gp top`](/docs/references/gitpod-cli#top).\n2. You may also want to try adjusting the Max Heap Size allocated to the JetBrains Backend in the Settings tab of the Backend Control Center. If updating this setting helps your performance, you can set the `vmoptions` value for your JetBrains IDE in your `.gitpod.yml`.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/intellij","loc":{"lines":{"from":237,"to":242}}}}],["1994",{"pageContent":"> **Note:** If the performance metrics show that your workspace is hitting its resource limits, and you are using Gitpod Self-Hosted, it might make sense to consider changing the resource configuration for your workspaces. This can be done via a [config-patch](/docs/configure/self-hosted/latest/config-patches). Configuring workspace resources is not yet available on SaaS.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/intellij","loc":{"lines":{"from":244,"to":244}}}}],["1995",{"pageContent":"Troubleshooting\n\n- [What should I do if JetBrains Gateway and Gitpod aren’t working?](/docs/help/troubleshooting#what-should-i-do-if-jetbrains-gateway-and-gitpod-arent-working)\n- [Gitpod logs in JetBrains Client](/docs/help/troubleshooting#gitpod-logs-in-jetbrains-client)\n- [Gitpod logs in JetBrains Gateway](/docs/help/troubleshooting#gitpod-logs-in-jetbrains-gateway)","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/intellij","loc":{"lines":{"from":246,"to":250}}}}],["1996",{"pageContent":"---\nsection: ides-and-editors\ntitle: Gitpod Local Companion\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Gitpod Local Companion\n\n> {title} is currently in [Beta](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/5712).\n\nPlease refer to the [Gitpod Local Companion - localhost is going remote](/blog/local-app) announcement blog post for more details on how to explore the beta release of the _Gitpod local companion_.\n\n## Connect To VS Code Desktop\n\nWhilst it is possible to use the Gitpod local companion to connect your desktop VS Code application to Gitpod, the best way is to use the Gitpod VSCode Plugin, which you can access directly from the command pallette via any Gitpod the workspace. For more details about VS Code Desktop, please refer to the [VS Code desktop support docs](/docs/references/ides-and-editors/vscode).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/local-companion","loc":{"lines":{"from":1,"to":18}}}}],["1997",{"pageContent":"---\nsection: ides-and-editors\ntitle: PhpStorm\n---\n\n<!--\n  This document is auto generated from generators/ide/jb-product.md\n  Edit this file instead and run `yarn generate:jb`to apply.\n-->\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n<!-- prettier-ignore -->\n# PhpStorm\n\n> {title} is currently in [Beta](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/6576).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/phpstorm","loc":{"lines":{"from":1,"to":18}}}}],["1998",{"pageContent":"Getting started","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/phpstorm","loc":{"lines":{"from":20,"to":20}}}}],["1999",{"pageContent":"Getting started\n\n1. **Install [JetBrains Gateway](https://www.jetbrains.com/help/phpstorm/remote-development-a.html#gateway)** - With the [JetBrains Gateway and Gitpod](/docs/integrations/jetbrains-gateway) plugin you can create and manage your latest 20 Gitpod workspaces.\n2. **Install the Gitpod plugin** - Open JetBrains Gateway and you'll see the Gitpod logo on the main page. Click \"install\" to install the [Gitpod plugin](https://plugins.jetbrains.com/plugin/18438-gitpod-gateway) for JetBrains Gateway.\n3. **Update your Gitpod preferences** - Select {title} on the [Gitpod preferences page](https://gitpod.io/preferences) which will set {title} as your default IDE for future workspace starts.\n4. **Start (or restart) your workspace** - Either start a workspace directly from within the [JetBrains Gateway](/docs/integrations/jetbrains-gateway) via the Gitpod plugin **OR** open a new workspace directly in Gitpod where on workspace start you will be prompted to open {title} for that workspace.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/phpstorm","loc":{"lines":{"from":20,"to":25}}}}],["2000",{"pageContent":"<figure>\n  <video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" src=\"/images/editors/select-jetbrains-ide.webm\" type=\"video/webm\"></video>\n  <figcaption>Updating Gitpod IDE preferences to {title}</figcaption>\n</figure>\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Opening a JetBrains IDE from Gitpod\" src=\"/images/editors/opening-the-thin-jetbrains-client.webm\" type=\"video/webm\"></video>\n    <figcaption>Opening a JetBrains IDE from Gitpod</figcaption>\n</figure>\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Updating the Gitpod plugin in JetBrains Gateway\" src=\"/images/editors/update-jetbrains-gateway-settings.webm\" type=\"video/webm\"></video>\n    <figcaption>Updating the Gitpod plugin in JetBrains Gateway</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/phpstorm","loc":{"lines":{"from":27,"to":40}}}}],["2001",{"pageContent":"<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Opening a JetBrains IDE from Gateway\" src=\"/images/editors/open-from-jetbrains-gateway.webm\" type=\"video/webm\"></video>\n    <figcaption>Opening a JetBrains IDE from Gateway</figcaption>\n</figure>\n\n**Important:** You must restart any started workspaces for your IDE preferences to take effect.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/phpstorm","loc":{"lines":{"from":42,"to":47}}}}],["2002",{"pageContent":"Install Plugins\n\n> This section relates to plugin management when using JetBrains IDEs in a remote development context. For information on regular plugin management, refer to <a href=\"https://www.jetbrains.com/help/phpstorm/managing-plugins.html\" target=\"_blank\">{title} docs</a>.\n\nUnlike with regular development, JetBrains [Remote development](https://www.jetbrains.com/help/phpstorm/remote-development-overview.html#defs) with {title} allows users to install plugins in different locations:","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/phpstorm","loc":{"lines":{"from":49,"to":53}}}}],["2003",{"pageContent":"- [**{title} backend plugins**](#install-on-title-backend) - The JetBrains {title} backend runs within the remote Gitpod workspace. Backend plugins contribute functionality for IDE experiences relating to the filesystem, tools or languages and frameworks. When installed, **a backend plugin only applies to the currently running Gitpod workspace** and is not associated with a user. However, a plugin can be [preconfigured for all users of a repository](#preconfigure-for-repository) so that the plugin is enabled with every workspace start. It is not currently possible to install a backend plugin that applies to all workspaces of a Gitpod user or organization.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/phpstorm","loc":{"lines":{"from":55,"to":55}}}}],["2004",{"pageContent":"- [**JetBrains Client plugins**](#install-on-jetbrains-client) - The JetBrains client runs on the users local machine and can be thought of as the user interface to the remote {title} backend. Client plugins are different to backend plugins as they contribute to the user interface aspect of the IDE experience (e.g. keyboard shortcuts and themes). Once installed, **a client plugin is enabled for all Gitpod workspaces the user opens** (if the workspace is running the exact same version of the {title} backend where the plugin was initially installed).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/phpstorm","loc":{"lines":{"from":56,"to":56}}}}],["2005",{"pageContent":"- [**JetBrains Gateway plugins**](/docs/integrations/jetbrains-gateway#getting-started) - The JetBrains Gateway is an application downloaded onto a users local machine which allows users to start JetBrains Clients that are compatible with the {title} backend, running in a Gitpod workspace. JetBrains Gateway plugins are installed directly in JetBrains Gateway and contribute to remote development connection experiences (e.g. the [Gitpod JetBrains Gateway](https://plugins.jetbrains.com/plugin/18438-gitpod-gateway) plugin).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/phpstorm","loc":{"lines":{"from":57,"to":57}}}}],["2006",{"pageContent":"Install on JetBrains Client\n\nThe JetBrains client runs on the users local machine and can be thought of as the user interface to the remote {title} backend. Client plugins contribute to the user interface aspect of the IDE experience (e.g. keyboard shortcuts and themes).\n\nOnce installed, **a client plugin is enabled for all Gitpod workspaces the user opens** (if the workspace is running the exact same version of the {title} backend where the plugin was initially installed).\n\nTo install a plugin on **JetBrains Client** follow these steps:\n\n- In **JetBrains Client** open the IDE settings and select **Plugins**.\n- Find the plugin in the **Marketplace** and click **Install**.\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Install a plugin on JetBrains Client\" src=\"/images/editors/install-local-jb-plugin.png\">\n    <figcaption>Install a plugin on JetBrains Client</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/phpstorm","loc":{"lines":{"from":59,"to":73}}}}],["2007",{"pageContent":"Install on {title} backend\n\nThe JetBrains {title} backend runs within the remote Gitpod workspace. Backend plugins contribute functionality requiring access to IDE experiences such as the remote filesystem (e.g. contributing support of languages and frameworks).\n\nWhen installed, **a backend plugin only applies to the currently running Gitpod workspace** and is not associated with a user. However, a plugin can be [preconfigured for all users of a repository](#preconfigure-for-repository) so that the plugin is enabled with every workspace start.\n\nIt is not currently possible to install a backend plugin that applies to all workspaces of a Gitpod user or organization.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/phpstorm","loc":{"lines":{"from":75,"to":81}}}}],["2008",{"pageContent":"Install for your current workspace\n\nYou can install a plugin only for **your current workspace** following these steps:\n\n- In **JetBrains Client** open the IDE settings and select **Plugins On Host**.\n- Find the plugin in the **Marketplace** and click **Install**.\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Install a plugin on {title} backend\" src=\"/images/editors/install-remote-jb-plugin.png\">\n    <figcaption>Install a plugin on {title} backend</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/phpstorm","loc":{"lines":{"from":83,"to":93}}}}],["2009",{"pageContent":"Preconfigure for repository\n\n> JetBrains plugin support is currently in [Beta](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/6576).\n\nYou can share a plugin on **{title} backend** with everybody working on the repository by adding it to [.gitpod.yml](/docs/references/gitpod-yml) and pushing to your Git repository.\nEach workspace is preconfigured with plugins from the `gitpod.yml` configuration file. For example:\n\n```yaml\njetbrains:\n  phpstorm:\n    plugins:\n      - zielu.gittoolbox\n      - izhangzhihao.rainbow.brackets\n```\n\nYou can find the **pluginId** on the [JetBrains Marketplace](https://plugins.jetbrains.com) page:\n\n- Find a page of the required plugin.\n- Select the **Versions** tab.\n- Click any version to copy the **pluginId** (short name such as `org.rust.lang`) of the plugin you want to install.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/phpstorm","loc":{"lines":{"from":95,"to":114}}}}],["2010",{"pageContent":"Install for your user\n\nIt is not yet possible to install plugins on **{title} backend** for your user to share across all your Gitpod workspaces.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/phpstorm","loc":{"lines":{"from":116,"to":118}}}}],["2011",{"pageContent":"Configure JVM options\n\n> Configuration of JVM options is currently in [Alpha](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/8704).\n\nYou can adjust JVM options for {title} backend, especially if you want to increase the `-Xmx` memory size. For example:\n\n```yaml\njetbrains:\n  phpstorm:\n    vmoptions: \"-Xmx4g\"\n```\n\nFor more detailed information on JVM options, refer to [Common JVM Options](https://www.jetbrains.com/help/phpstorm/tuning-the-ide.html#common-jvm-options) from JetBrains documentation.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/phpstorm","loc":{"lines":{"from":120,"to":132}}}}],["2012",{"pageContent":"Configure IDE settings\n\n> **Feedback needed:** The JetBrains Gitpod integration is currently beta. Gitpod [continues to collaborate with JetBrains](https://www.gitpod.io/blog/gitpod-jetbrains). The below shows how you can configure global settings with JetBrains. To leave feedback on the approach, please see this GitHub issue: [#6576](https://github.com/gitpod-io/gitpod/issues/6576). Also note that JetBrains is working on [comprehensive settings sync functionality](https://youtrack.jetbrains.com/issue/RDCT-1/Settings-synchronization).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/phpstorm","loc":{"lines":{"from":134,"to":136}}}}],["2013",{"pageContent":"When running {title} locally, the JetBrains IDE applies [global settings](https://www.jetbrains.com/help/phpstorm/configuring-project-and-ide-settings.html) to all projects on your machine. However when running in a remote context using [JetBrains Gateway](/docs/integrations/jetbrains-gateway), it's important to note that some IDE settings are configured on the [JetBrains Client](#on-jetbrains-client) and others in the [{title} backend](#on-title-backend) running in your Gitpod [Workspace](/docs/configure/workspaces). See below instructions for more.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/phpstorm","loc":{"lines":{"from":138,"to":138}}}}],["2014",{"pageContent":"On JetBrains Client\n\nIDE Settings that are configured on the JetBrains Client are stored on your local machine and don't have `On Host` label in the IDE settings. These IDE settings are reused if the workspace is running the exact same version of the {title} backend where the settings were initially configured.\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Configure IDE settings on JetBrains client\" src=\"/images/editors/jb-client-configure-settings-client.webp\">\n    <figcaption>JetBrains client settings don't have <code>On Host</code> label.</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/phpstorm","loc":{"lines":{"from":140,"to":147}}}}],["2015",{"pageContent":"On {title} backend\n\nSettings configured on {title} backend are stored in a Gitpod workspace and have `On Host` label in the IDE settings.\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Configure IDE settings on JetBrains client\" src=\"/images/editors/jb-backend-configure-settings.webp\">\n    <figcaption>{title} backend settings have `On Host` label.</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/phpstorm","loc":{"lines":{"from":149,"to":156}}}}],["2016",{"pageContent":"Configure IDE settings per project\n\nSome IDE settings cannot be configured via [environment variables](/docs/configure/projects/environment-variables#environment-variables) or through setting [vm options](#configure-jvm-options). These settings can only be set via the UI of JetBrains client, and must be manually copied to be syned between workspaces. The below steps detail how to configure your IDE settings for all the users of a given Gitpod project:\n\n**Step 1: Manually use JetBrains UI to configure settings** - Set your IDE settings as you normally would, using the JetBrains UI.\n\n**Step 2: Find generated IDE settings** - You will need to manually find any global settings generated by JetBrains backend within the following path: `/workspace/.config/JetBrains<-latest>/RemoteDev-PS/<your-project-name>/options`","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/phpstorm","loc":{"lines":{"from":158,"to":164}}}}],["2017",{"pageContent":"**Step 3:** Move any relevant settings manually to a persistent location within your Gitpod project. Either via a [Workspace Image](/docs/configure/workspaces/workspace-image), or persisted in the version control of your project, for example by committing settings data to GitHub.\n\n**Include relevant IDE settings in your Workspace Image**\n\n- `/home/gitpod/.gitpod/jetbrains/options` - This location applies settings to all JetBrains products (IntelliJ IDEA, GoLang, etc).\n- `/home/gitpod/.gitpod/jetbrains/phpstorm/options` - This location will apply settings only to the given IDE, e.g. {title}.\n\n**Commit relevant IDE settings to source control**\n\n- `/workspace/<your-project-name>/.gitpod/jetbrains/options` - This location applies settings to all JetBrains products (IntelliJ IDEA, GoLang, etc).\n- `/workspace/<your-project-name>/.gitpod/jetbrains/phpstorm/options` - This location will apply settings only to the given IDE, e.g. {title}.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/phpstorm","loc":{"lines":{"from":166,"to":176}}}}],["2018",{"pageContent":"For any further changes to your IDE settings, you will need to follow the above steps again.\n\n> **Note:** When locating and applying IDE settings, Gitpod will read the locations specified above in priority order. The locations specified first are overriden by the locations specified later.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/phpstorm","loc":{"lines":{"from":178,"to":180}}}}],["2019",{"pageContent":"Configure IDE settings per user\n\nTo configure IDE settings for your user only, and not all those using a project.\n\nFollow the instructions for [configuring IDE settings per project](#configure-ide-settings-per-project), but instead use [.dotfiles](/docs/configure/user-settings/dotfiles#dotfiles) rather than a workspace image or source control to store your IDE settings.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/phpstorm","loc":{"lines":{"from":182,"to":186}}}}],["2020",{"pageContent":"Indexing using Prebuilds\n\n> JetBrains Prebuilds is currently in [Alpha](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/6576).\n\nWhen you open the project {title} starts indexing to load modules and\nenable the core functionality like code completion and navigation.\nDepending on the size of your project indexing speed can vary significantly.\n\nYou can speed up the indexing of a project by applying these [general recommendations](https://www.jetbrains.com/help/phpstorm/indexing.html).\nGitpod prebuilds allow you to improve it further by indexing before you start a new workspace.\n\nTo leverage it:\n\n- configure prebuilds for your repository, refer to [Prebuilds](/docs/configure/projects/prebuilds);\n- enable indexing for {title} in prebuilds by editing [.gitpod.yml](/docs/references/gitpod-yml) in your repository:\n\n```yaml\njetbrains:\n  phpstorm:\n    prebuilds:\n      version: stable","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/phpstorm","loc":{"lines":{"from":188,"to":208}}}}],["2021",{"pageContent":"- push changes to your Git repository to apply.\n\nThe `version` property allows you to control whether to index for `stable`, `latest`, or `both` versions of {title} compatible with Gitpod.\nUsers can switch between `stable` and `latest` versions of {title} on the [user preferences](https://gitpod.io/preferences) page.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/phpstorm","loc":{"lines":{"from":211,"to":214}}}}],["2022",{"pageContent":"Workspace performance\n\nWhen using a Gitpod workspace you might experience performance issues caused by:\n\n- An application using more resources than expected\n- Resource consumption in adjacent containers running on the workspace node.\n\nIn your JetBrains IDE within the JetBrains Gateway [Backend Control Center](https://www.jetbrains.com/help/idea/work-inside-remote-project.html#control_center) you can find two metrics relating to your running workspace: `Workspace CPU` and `Workspace Memory`.\n\nThe remaining metrics you can find in the Backend Control Center regarding the node that your workspace is running on, and not the workspace itself.\n\n> **Note:** Performance information shown in the Backend Control Center is the same as the information that is shown when running the command [`gp top`](/docs/references/gitpod-cli#top) in your workspace, see the [Command Line Interface](/docs/references/gitpod-cli) documentation for more.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/phpstorm","loc":{"lines":{"from":216,"to":227}}}}],["2023",{"pageContent":"![jetbrains performance](/images/jetbrains-gateway/jetbrains-performance-center.png)","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/phpstorm","loc":{"lines":{"from":229,"to":229}}}}],["2024",{"pageContent":"FAQs\n\n- For the questions about supported IDEs and Editors in Gitpod, refer to [FAQs](/docs/references/ides-and-editors/faqs).\n\n- For the general questions about JetBrains Remote Development, refer to refer to the general IDE <a href=\"https://www.jetbrains.com/help/phpstorm/faq-about-remote-development.html\" target=\"_blank\">{title} FAQ</a>.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/phpstorm","loc":{"lines":{"from":231,"to":235}}}}],["2025",{"pageContent":"Are there any JetBrains optimizations I can make if my workspace is slow?\n\nDebugging performance can be challenging, as performance issues can depend on many factors such as how Gitpod is configured (if you're operating Gitpod on Self-Hosted). However, there are some ways you can gather performance information and optimise your JetBrains IDE setup with Gitpod:\n\n1. Firstly, to gather information on performance, you can [view workspace performance metrics from within the IDE](/docs/references/ides-and-editors/intellij#workspace-performance) in the Backend Control Center, or by using [`gp top`](/docs/references/gitpod-cli#top).\n2. You may also want to try adjusting the Max Heap Size allocated to the JetBrains Backend in the Settings tab of the Backend Control Center. If updating this setting helps your performance, you can set the `vmoptions` value for your JetBrains IDE in your `.gitpod.yml`.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/phpstorm","loc":{"lines":{"from":237,"to":242}}}}],["2026",{"pageContent":"> **Note:** If the performance metrics show that your workspace is hitting its resource limits, and you are using Gitpod Self-Hosted, it might make sense to consider changing the resource configuration for your workspaces. This can be done via a [config-patch](/docs/configure/self-hosted/latest/config-patches). Configuring workspace resources is not yet available on SaaS.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/phpstorm","loc":{"lines":{"from":244,"to":244}}}}],["2027",{"pageContent":"Troubleshooting\n\n- [What should I do if JetBrains Gateway and Gitpod aren’t working?](/docs/help/troubleshooting#what-should-i-do-if-jetbrains-gateway-and-gitpod-arent-working)\n- [Gitpod logs in JetBrains Client](/docs/help/troubleshooting#gitpod-logs-in-jetbrains-client)\n- [Gitpod logs in JetBrains Gateway](/docs/help/troubleshooting#gitpod-logs-in-jetbrains-gateway)","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/phpstorm","loc":{"lines":{"from":246,"to":250}}}}],["2028",{"pageContent":"---\nsection: ides-and-editors\ntitle: PyCharm\n---\n\n<!--\n  This document is auto generated from generators/ide/jb-product.md\n  Edit this file instead and run `yarn generate:jb`to apply.\n-->\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n<!-- prettier-ignore -->\n# PyCharm\n\n> {title} is currently in [Beta](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/6576).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/pycharm","loc":{"lines":{"from":1,"to":18}}}}],["2029",{"pageContent":"Getting started","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/pycharm","loc":{"lines":{"from":20,"to":20}}}}],["2030",{"pageContent":"Getting started\n\n1. **Install [JetBrains Gateway](https://www.jetbrains.com/help/pycharm/remote-development-a.html#gateway)** - With the [JetBrains Gateway and Gitpod](/docs/integrations/jetbrains-gateway) plugin you can create and manage your latest 20 Gitpod workspaces.\n2. **Install the Gitpod plugin** - Open JetBrains Gateway and you'll see the Gitpod logo on the main page. Click \"install\" to install the [Gitpod plugin](https://plugins.jetbrains.com/plugin/18438-gitpod-gateway) for JetBrains Gateway.\n3. **Update your Gitpod preferences** - Select {title} on the [Gitpod preferences page](https://gitpod.io/preferences) which will set {title} as your default IDE for future workspace starts.\n4. **Start (or restart) your workspace** - Either start a workspace directly from within the [JetBrains Gateway](/docs/integrations/jetbrains-gateway) via the Gitpod plugin **OR** open a new workspace directly in Gitpod where on workspace start you will be prompted to open {title} for that workspace.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/pycharm","loc":{"lines":{"from":20,"to":25}}}}],["2031",{"pageContent":"<figure>\n  <video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" src=\"/images/editors/select-jetbrains-ide.webm\" type=\"video/webm\"></video>\n  <figcaption>Updating Gitpod IDE preferences to {title}</figcaption>\n</figure>\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Opening a JetBrains IDE from Gitpod\" src=\"/images/editors/opening-the-thin-jetbrains-client.webm\" type=\"video/webm\"></video>\n    <figcaption>Opening a JetBrains IDE from Gitpod</figcaption>\n</figure>\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Updating the Gitpod plugin in JetBrains Gateway\" src=\"/images/editors/update-jetbrains-gateway-settings.webm\" type=\"video/webm\"></video>\n    <figcaption>Updating the Gitpod plugin in JetBrains Gateway</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/pycharm","loc":{"lines":{"from":27,"to":40}}}}],["2032",{"pageContent":"<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Opening a JetBrains IDE from Gateway\" src=\"/images/editors/open-from-jetbrains-gateway.webm\" type=\"video/webm\"></video>\n    <figcaption>Opening a JetBrains IDE from Gateway</figcaption>\n</figure>\n\n**Important:** You must restart any started workspaces for your IDE preferences to take effect.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/pycharm","loc":{"lines":{"from":42,"to":47}}}}],["2033",{"pageContent":"Install Plugins\n\n> This section relates to plugin management when using JetBrains IDEs in a remote development context. For information on regular plugin management, refer to <a href=\"https://www.jetbrains.com/help/pycharm/managing-plugins.html\" target=\"_blank\">{title} docs</a>.\n\nUnlike with regular development, JetBrains [Remote development](https://www.jetbrains.com/help/pycharm/remote-development-overview.html#defs) with {title} allows users to install plugins in different locations:","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/pycharm","loc":{"lines":{"from":49,"to":53}}}}],["2034",{"pageContent":"- [**{title} backend plugins**](#install-on-title-backend) - The JetBrains {title} backend runs within the remote Gitpod workspace. Backend plugins contribute functionality for IDE experiences relating to the filesystem, tools or languages and frameworks. When installed, **a backend plugin only applies to the currently running Gitpod workspace** and is not associated with a user. However, a plugin can be [preconfigured for all users of a repository](#preconfigure-for-repository) so that the plugin is enabled with every workspace start. It is not currently possible to install a backend plugin that applies to all workspaces of a Gitpod user or organization.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/pycharm","loc":{"lines":{"from":55,"to":55}}}}],["2035",{"pageContent":"- [**JetBrains Client plugins**](#install-on-jetbrains-client) - The JetBrains client runs on the users local machine and can be thought of as the user interface to the remote {title} backend. Client plugins are different to backend plugins as they contribute to the user interface aspect of the IDE experience (e.g. keyboard shortcuts and themes). Once installed, **a client plugin is enabled for all Gitpod workspaces the user opens** (if the workspace is running the exact same version of the {title} backend where the plugin was initially installed).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/pycharm","loc":{"lines":{"from":56,"to":56}}}}],["2036",{"pageContent":"- [**JetBrains Gateway plugins**](/docs/integrations/jetbrains-gateway#getting-started) - The JetBrains Gateway is an application downloaded onto a users local machine which allows users to start JetBrains Clients that are compatible with the {title} backend, running in a Gitpod workspace. JetBrains Gateway plugins are installed directly in JetBrains Gateway and contribute to remote development connection experiences (e.g. the [Gitpod JetBrains Gateway](https://plugins.jetbrains.com/plugin/18438-gitpod-gateway) plugin).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/pycharm","loc":{"lines":{"from":57,"to":57}}}}],["2037",{"pageContent":"Install on JetBrains Client\n\nThe JetBrains client runs on the users local machine and can be thought of as the user interface to the remote {title} backend. Client plugins contribute to the user interface aspect of the IDE experience (e.g. keyboard shortcuts and themes).\n\nOnce installed, **a client plugin is enabled for all Gitpod workspaces the user opens** (if the workspace is running the exact same version of the {title} backend where the plugin was initially installed).\n\nTo install a plugin on **JetBrains Client** follow these steps:\n\n- In **JetBrains Client** open the IDE settings and select **Plugins**.\n- Find the plugin in the **Marketplace** and click **Install**.\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Install a plugin on JetBrains Client\" src=\"/images/editors/install-local-jb-plugin.png\">\n    <figcaption>Install a plugin on JetBrains Client</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/pycharm","loc":{"lines":{"from":59,"to":73}}}}],["2038",{"pageContent":"Install on {title} backend\n\nThe JetBrains {title} backend runs within the remote Gitpod workspace. Backend plugins contribute functionality requiring access to IDE experiences such as the remote filesystem (e.g. contributing support of languages and frameworks).\n\nWhen installed, **a backend plugin only applies to the currently running Gitpod workspace** and is not associated with a user. However, a plugin can be [preconfigured for all users of a repository](#preconfigure-for-repository) so that the plugin is enabled with every workspace start.\n\nIt is not currently possible to install a backend plugin that applies to all workspaces of a Gitpod user or organization.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/pycharm","loc":{"lines":{"from":75,"to":81}}}}],["2039",{"pageContent":"Install for your current workspace\n\nYou can install a plugin only for **your current workspace** following these steps:\n\n- In **JetBrains Client** open the IDE settings and select **Plugins On Host**.\n- Find the plugin in the **Marketplace** and click **Install**.\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Install a plugin on {title} backend\" src=\"/images/editors/install-remote-jb-plugin.png\">\n    <figcaption>Install a plugin on {title} backend</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/pycharm","loc":{"lines":{"from":83,"to":93}}}}],["2040",{"pageContent":"Preconfigure for repository\n\n> JetBrains plugin support is currently in [Beta](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/6576).\n\nYou can share a plugin on **{title} backend** with everybody working on the repository by adding it to [.gitpod.yml](/docs/references/gitpod-yml) and pushing to your Git repository.\nEach workspace is preconfigured with plugins from the `gitpod.yml` configuration file. For example:\n\n```yaml\njetbrains:\n  pycharm:\n    plugins:\n      - zielu.gittoolbox\n      - izhangzhihao.rainbow.brackets\n```\n\nYou can find the **pluginId** on the [JetBrains Marketplace](https://plugins.jetbrains.com) page:\n\n- Find a page of the required plugin.\n- Select the **Versions** tab.\n- Click any version to copy the **pluginId** (short name such as `org.rust.lang`) of the plugin you want to install.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/pycharm","loc":{"lines":{"from":95,"to":114}}}}],["2041",{"pageContent":"Install for your user\n\nIt is not yet possible to install plugins on **{title} backend** for your user to share across all your Gitpod workspaces.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/pycharm","loc":{"lines":{"from":116,"to":118}}}}],["2042",{"pageContent":"Configure JVM options\n\n> Configuration of JVM options is currently in [Alpha](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/8704).\n\nYou can adjust JVM options for {title} backend, especially if you want to increase the `-Xmx` memory size. For example:\n\n```yaml\njetbrains:\n  pycharm:\n    vmoptions: \"-Xmx4g\"\n```\n\nFor more detailed information on JVM options, refer to [Common JVM Options](https://www.jetbrains.com/help/pycharm/tuning-the-ide.html#common-jvm-options) from JetBrains documentation.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/pycharm","loc":{"lines":{"from":120,"to":132}}}}],["2043",{"pageContent":"Configure IDE settings\n\n> **Feedback needed:** The JetBrains Gitpod integration is currently beta. Gitpod [continues to collaborate with JetBrains](https://www.gitpod.io/blog/gitpod-jetbrains). The below shows how you can configure global settings with JetBrains. To leave feedback on the approach, please see this GitHub issue: [#6576](https://github.com/gitpod-io/gitpod/issues/6576). Also note that JetBrains is working on [comprehensive settings sync functionality](https://youtrack.jetbrains.com/issue/RDCT-1/Settings-synchronization).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/pycharm","loc":{"lines":{"from":134,"to":136}}}}],["2044",{"pageContent":"When running {title} locally, the JetBrains IDE applies [global settings](https://www.jetbrains.com/help/pycharm/configuring-project-and-ide-settings.html) to all projects on your machine. However when running in a remote context using [JetBrains Gateway](/docs/integrations/jetbrains-gateway), it's important to note that some IDE settings are configured on the [JetBrains Client](#on-jetbrains-client) and others in the [{title} backend](#on-title-backend) running in your Gitpod [Workspace](/docs/configure/workspaces). See below instructions for more.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/pycharm","loc":{"lines":{"from":138,"to":138}}}}],["2045",{"pageContent":"On JetBrains Client\n\nIDE Settings that are configured on the JetBrains Client are stored on your local machine and don't have `On Host` label in the IDE settings. These IDE settings are reused if the workspace is running the exact same version of the {title} backend where the settings were initially configured.\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Configure IDE settings on JetBrains client\" src=\"/images/editors/jb-client-configure-settings-client.webp\">\n    <figcaption>JetBrains client settings don't have <code>On Host</code> label.</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/pycharm","loc":{"lines":{"from":140,"to":147}}}}],["2046",{"pageContent":"On {title} backend\n\nSettings configured on {title} backend are stored in a Gitpod workspace and have `On Host` label in the IDE settings.\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Configure IDE settings on JetBrains client\" src=\"/images/editors/jb-backend-configure-settings.webp\">\n    <figcaption>{title} backend settings have `On Host` label.</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/pycharm","loc":{"lines":{"from":149,"to":156}}}}],["2047",{"pageContent":"Configure IDE settings per project\n\nSome IDE settings cannot be configured via [environment variables](/docs/configure/projects/environment-variables#environment-variables) or through setting [vm options](#configure-jvm-options). These settings can only be set via the UI of JetBrains client, and must be manually copied to be syned between workspaces. The below steps detail how to configure your IDE settings for all the users of a given Gitpod project:\n\n**Step 1: Manually use JetBrains UI to configure settings** - Set your IDE settings as you normally would, using the JetBrains UI.\n\n**Step 2: Find generated IDE settings** - You will need to manually find any global settings generated by JetBrains backend within the following path: `/workspace/.config/JetBrains<-latest>/RemoteDev-PY/<your-project-name>/options`","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/pycharm","loc":{"lines":{"from":158,"to":164}}}}],["2048",{"pageContent":"**Step 3:** Move any relevant settings manually to a persistent location within your Gitpod project. Either via a [Workspace Image](/docs/configure/workspaces/workspace-image), or persisted in the version control of your project, for example by committing settings data to GitHub.\n\n**Include relevant IDE settings in your Workspace Image**\n\n- `/home/gitpod/.gitpod/jetbrains/options` - This location applies settings to all JetBrains products (IntelliJ IDEA, GoLang, etc).\n- `/home/gitpod/.gitpod/jetbrains/pycharm/options` - This location will apply settings only to the given IDE, e.g. {title}.\n\n**Commit relevant IDE settings to source control**\n\n- `/workspace/<your-project-name>/.gitpod/jetbrains/options` - This location applies settings to all JetBrains products (IntelliJ IDEA, GoLang, etc).\n- `/workspace/<your-project-name>/.gitpod/jetbrains/pycharm/options` - This location will apply settings only to the given IDE, e.g. {title}.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/pycharm","loc":{"lines":{"from":166,"to":176}}}}],["2049",{"pageContent":"For any further changes to your IDE settings, you will need to follow the above steps again.\n\n> **Note:** When locating and applying IDE settings, Gitpod will read the locations specified above in priority order. The locations specified first are overriden by the locations specified later.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/pycharm","loc":{"lines":{"from":178,"to":180}}}}],["2050",{"pageContent":"Configure IDE settings per user\n\nTo configure IDE settings for your user only, and not all those using a project.\n\nFollow the instructions for [configuring IDE settings per project](#configure-ide-settings-per-project), but instead use [.dotfiles](/docs/configure/user-settings/dotfiles#dotfiles) rather than a workspace image or source control to store your IDE settings.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/pycharm","loc":{"lines":{"from":182,"to":186}}}}],["2051",{"pageContent":"Indexing using Prebuilds\n\n> JetBrains Prebuilds is currently in [Alpha](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/6576).\n\nWhen you open the project {title} starts indexing to load modules and\nenable the core functionality like code completion and navigation.\nDepending on the size of your project indexing speed can vary significantly.\n\nYou can speed up the indexing of a project by applying these [general recommendations](https://www.jetbrains.com/help/pycharm/indexing.html).\nGitpod prebuilds allow you to improve it further by indexing before you start a new workspace.\n\nTo leverage it:\n\n- configure prebuilds for your repository, refer to [Prebuilds](/docs/configure/projects/prebuilds);\n- enable indexing for {title} in prebuilds by editing [.gitpod.yml](/docs/references/gitpod-yml) in your repository:\n\n```yaml\njetbrains:\n  pycharm:\n    prebuilds:\n      version: stable","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/pycharm","loc":{"lines":{"from":188,"to":208}}}}],["2052",{"pageContent":"- push changes to your Git repository to apply.\n\nThe `version` property allows you to control whether to index for `stable`, `latest`, or `both` versions of {title} compatible with Gitpod.\nUsers can switch between `stable` and `latest` versions of {title} on the [user preferences](https://gitpod.io/preferences) page.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/pycharm","loc":{"lines":{"from":211,"to":214}}}}],["2053",{"pageContent":"Workspace performance\n\nWhen using a Gitpod workspace you might experience performance issues caused by:\n\n- An application using more resources than expected\n- Resource consumption in adjacent containers running on the workspace node.\n\nIn your JetBrains IDE within the JetBrains Gateway [Backend Control Center](https://www.jetbrains.com/help/idea/work-inside-remote-project.html#control_center) you can find two metrics relating to your running workspace: `Workspace CPU` and `Workspace Memory`.\n\nThe remaining metrics you can find in the Backend Control Center regarding the node that your workspace is running on, and not the workspace itself.\n\n> **Note:** Performance information shown in the Backend Control Center is the same as the information that is shown when running the command [`gp top`](/docs/references/gitpod-cli#top) in your workspace, see the [Command Line Interface](/docs/references/gitpod-cli) documentation for more.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/pycharm","loc":{"lines":{"from":216,"to":227}}}}],["2054",{"pageContent":"![jetbrains performance](/images/jetbrains-gateway/jetbrains-performance-center.png)","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/pycharm","loc":{"lines":{"from":229,"to":229}}}}],["2055",{"pageContent":"FAQs\n\n- For the questions about supported IDEs and Editors in Gitpod, refer to [FAQs](/docs/references/ides-and-editors/faqs).\n\n- For the general questions about JetBrains Remote Development, refer to refer to the general IDE <a href=\"https://www.jetbrains.com/help/pycharm/faq-about-remote-development.html\" target=\"_blank\">{title} FAQ</a>.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/pycharm","loc":{"lines":{"from":231,"to":235}}}}],["2056",{"pageContent":"Are there any JetBrains optimizations I can make if my workspace is slow?\n\nDebugging performance can be challenging, as performance issues can depend on many factors such as how Gitpod is configured (if you're operating Gitpod on Self-Hosted). However, there are some ways you can gather performance information and optimise your JetBrains IDE setup with Gitpod:\n\n1. Firstly, to gather information on performance, you can [view workspace performance metrics from within the IDE](/docs/references/ides-and-editors/intellij#workspace-performance) in the Backend Control Center, or by using [`gp top`](/docs/references/gitpod-cli#top).\n2. You may also want to try adjusting the Max Heap Size allocated to the JetBrains Backend in the Settings tab of the Backend Control Center. If updating this setting helps your performance, you can set the `vmoptions` value for your JetBrains IDE in your `.gitpod.yml`.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/pycharm","loc":{"lines":{"from":237,"to":242}}}}],["2057",{"pageContent":"> **Note:** If the performance metrics show that your workspace is hitting its resource limits, and you are using Gitpod Self-Hosted, it might make sense to consider changing the resource configuration for your workspaces. This can be done via a [config-patch](/docs/configure/self-hosted/latest/config-patches). Configuring workspace resources is not yet available on SaaS.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/pycharm","loc":{"lines":{"from":244,"to":244}}}}],["2058",{"pageContent":"Troubleshooting\n\n- [What should I do if JetBrains Gateway and Gitpod aren’t working?](/docs/help/troubleshooting#what-should-i-do-if-jetbrains-gateway-and-gitpod-arent-working)\n- [Gitpod logs in JetBrains Client](/docs/help/troubleshooting#gitpod-logs-in-jetbrains-client)\n- [Gitpod logs in JetBrains Gateway](/docs/help/troubleshooting#gitpod-logs-in-jetbrains-gateway)","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/pycharm","loc":{"lines":{"from":246,"to":250}}}}],["2059",{"pageContent":"---\nsection: ides-and-editors\ntitle: Rider\n---\n\n<!--\n  This document is auto generated from generators/ide/jb-product.md\n  Edit this file instead and run `yarn generate:jb`to apply.\n-->\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n<!-- prettier-ignore -->\n# Rider\n\n> {title} is currently in [Beta](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/6576).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rider","loc":{"lines":{"from":1,"to":18}}}}],["2060",{"pageContent":"Getting started","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rider","loc":{"lines":{"from":20,"to":20}}}}],["2061",{"pageContent":"1. **Install [JetBrains Gateway](https://www.jetbrains.com/help/rider/Remote_development-a.html#gateway#gateway)** - With the [JetBrains Gateway and Gitpod](/docs/integrations/jetbrains-gateway) plugin you can create and manage your latest 20 Gitpod workspaces.\n2. **Install the Gitpod plugin** - Open JetBrains Gateway and you'll see the Gitpod logo on the main page. Click \"install\" to install the [Gitpod plugin](https://plugins.jetbrains.com/plugin/18438-gitpod-gateway) for JetBrains Gateway.\n3. **Update your Gitpod preferences** - Select {title} on the [Gitpod preferences page](https://gitpod.io/preferences) which will set {title} as your default IDE for future workspace starts.\n4. **Start (or restart) your workspace** - Either start a workspace directly from within the [JetBrains Gateway](/docs/integrations/jetbrains-gateway) via the Gitpod plugin **OR** open a new workspace directly in Gitpod where on workspace start you will be prompted to open {title} for that workspace.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rider","loc":{"lines":{"from":22,"to":25}}}}],["2062",{"pageContent":"<figure>\n  <video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" src=\"/images/editors/select-jetbrains-ide.webm\" type=\"video/webm\"></video>\n  <figcaption>Updating Gitpod IDE preferences to {title}</figcaption>\n</figure>\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Opening a JetBrains IDE from Gitpod\" src=\"/images/editors/opening-the-thin-jetbrains-client.webm\" type=\"video/webm\"></video>\n    <figcaption>Opening a JetBrains IDE from Gitpod</figcaption>\n</figure>\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Updating the Gitpod plugin in JetBrains Gateway\" src=\"/images/editors/update-jetbrains-gateway-settings.webm\" type=\"video/webm\"></video>\n    <figcaption>Updating the Gitpod plugin in JetBrains Gateway</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rider","loc":{"lines":{"from":27,"to":40}}}}],["2063",{"pageContent":"<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Opening a JetBrains IDE from Gateway\" src=\"/images/editors/open-from-jetbrains-gateway.webm\" type=\"video/webm\"></video>\n    <figcaption>Opening a JetBrains IDE from Gateway</figcaption>\n</figure>\n\n**Important:** You must restart any started workspaces for your IDE preferences to take effect.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rider","loc":{"lines":{"from":42,"to":47}}}}],["2064",{"pageContent":"Prerequisites\n\nTo successfully use Rider and load a .NET project, your workspace needs the .NET Framework or a compatible alternative, to be installed. The [default workspace image](/docs/configure/workspaces/workspace-image#use-a-public-docker-image) does not come with .NET pre-installed, so you have two options:\n\n**Using the .NET workspace image (Recommended)**\n\n1. Create a `.gitpod.yml` file\n2. Set the `image` property to `image: gitpod/workspace-dotnet:latest` or alternatively, [use a custom Dockerfile](https://www.gitpod.io/docs/configure/workspaces/workspace-image#use-a-custom-dockerfile)\n\nIf you need a specific version of .NET, check out our [Dockerfile](https://github.com/gitpod-io/workspace-images/blob/main/chunks/tool-dotnet/Dockerfile) so you can create your own, specifying the version you need.\n\nFor additional examples, check out [.NET in Gitpod](/docs/introduction/languages/dotnet).\n\n**Manually install .NET**","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rider","loc":{"lines":{"from":49,"to":62}}}}],["2065",{"pageContent":"For additional examples, check out [.NET in Gitpod](/docs/introduction/languages/dotnet).\n\n**Manually install .NET**\n\n1. Using a workspace terminal, install `dotnet` or a compatible alternative\n2. Restart the IDE\n\nNote: manually installed dependencies are only available in the current workspace, when you start a new workspace dotnet will not be pre-installed, for this reason we recommend the first option.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rider","loc":{"lines":{"from":62,"to":69}}}}],["2066",{"pageContent":"Install Plugins\n\n> This section relates to plugin management when using JetBrains IDEs in a remote development context. For information on regular plugin management, refer to <a href=\"https://www.jetbrains.com/help/rider/Managing_Plugins.html\" target=\"_blank\">{title} docs</a>.\n\nUnlike with regular development, JetBrains [Remote development](https://www.jetbrains.com/help/rider/Remote_development_overview.html#defs) with {title} allows users to install plugins in different locations:","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rider","loc":{"lines":{"from":71,"to":75}}}}],["2067",{"pageContent":"- [**{title} backend plugins**](#install-on-title-backend) - The JetBrains {title} backend runs within the remote Gitpod workspace. Backend plugins contribute functionality for IDE experiences relating to the filesystem, tools or languages and frameworks. When installed, **a backend plugin only applies to the currently running Gitpod workspace** and is not associated with a user. However, a plugin can be [preconfigured for all users of a repository](#preconfigure-for-repository) so that the plugin is enabled with every workspace start. It is not currently possible to install a backend plugin that applies to all workspaces of a Gitpod user or organization.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rider","loc":{"lines":{"from":77,"to":77}}}}],["2068",{"pageContent":"- [**JetBrains Client plugins**](#install-on-jetbrains-client) - The JetBrains client runs on the users local machine and can be thought of as the user interface to the remote {title} backend. Client plugins are different to backend plugins as they contribute to the user interface aspect of the IDE experience (e.g. keyboard shortcuts and themes). Once installed, **a client plugin is enabled for all Gitpod workspaces the user opens** (if the workspace is running the exact same version of the {title} backend where the plugin was initially installed).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rider","loc":{"lines":{"from":78,"to":78}}}}],["2069",{"pageContent":"- [**JetBrains Gateway plugins**](/docs/integrations/jetbrains-gateway#getting-started) - The JetBrains Gateway is an application downloaded onto a users local machine which allows users to start JetBrains Clients that are compatible with the {title} backend, running in a Gitpod workspace. JetBrains Gateway plugins are installed directly in JetBrains Gateway and contribute to remote development connection experiences (e.g. the [Gitpod JetBrains Gateway](https://plugins.jetbrains.com/plugin/18438-gitpod-gateway) plugin).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rider","loc":{"lines":{"from":79,"to":79}}}}],["2070",{"pageContent":"Install on JetBrains Client\n\nThe JetBrains client runs on the users local machine and can be thought of as the user interface to the remote {title} backend. Client plugins contribute to the user interface aspect of the IDE experience (e.g. keyboard shortcuts and themes).\n\nOnce installed, **a client plugin is enabled for all Gitpod workspaces the user opens** (if the workspace is running the exact same version of the {title} backend where the plugin was initially installed).\n\nTo install a plugin on **JetBrains Client** follow these steps:\n\n- In **JetBrains Client** open the IDE settings and select **Plugins**.\n- Find the plugin in the **Marketplace** and click **Install**.\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Install a plugin on JetBrains Client\" src=\"/images/editors/install-local-jb-plugin.png\">\n    <figcaption>Install a plugin on JetBrains Client</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rider","loc":{"lines":{"from":81,"to":95}}}}],["2071",{"pageContent":"Install on {title} backend\n\nThe JetBrains {title} backend runs within the remote Gitpod workspace. Backend plugins contribute functionality requiring access to IDE experiences such as the remote filesystem (e.g. contributing support of languages and frameworks).\n\nWhen installed, **a backend plugin only applies to the currently running Gitpod workspace** and is not associated with a user. However, a plugin can be [preconfigured for all users of a repository](#preconfigure-for-repository) so that the plugin is enabled with every workspace start.\n\nIt is not currently possible to install a backend plugin that applies to all workspaces of a Gitpod user or organization.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rider","loc":{"lines":{"from":97,"to":103}}}}],["2072",{"pageContent":"Install for your current workspace\n\nYou can install a plugin only for **your current workspace** following these steps:\n\n- In **JetBrains Client** open the IDE settings and select **Plugins On Host**.\n- Find the plugin in the **Marketplace** and click **Install**.\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Install a plugin on {title} backend\" src=\"/images/editors/install-remote-jb-plugin.png\">\n    <figcaption>Install a plugin on {title} backend</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rider","loc":{"lines":{"from":105,"to":115}}}}],["2073",{"pageContent":"Preconfigure for repository\n\n> JetBrains plugin support is currently in [Beta](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/6576).\n\nYou can share a plugin on **{title} backend** with everybody working on the repository by adding it to [.gitpod.yml](/docs/references/gitpod-yml) and pushing to your Git repository.\nEach workspace is preconfigured with plugins from the `gitpod.yml` configuration file. For example:\n\n```yaml\njetbrains:\n  rider:\n    plugins:\n      - zielu.gittoolbox\n      - izhangzhihao.rainbow.brackets\n```\n\nYou can find the **pluginId** on the [JetBrains Marketplace](https://plugins.jetbrains.com) page:\n\n- Find a page of the required plugin.\n- Select the **Versions** tab.\n- Click any version to copy the **pluginId** (short name such as `org.rust.lang`) of the plugin you want to install.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rider","loc":{"lines":{"from":117,"to":136}}}}],["2074",{"pageContent":"Install for your user\n\nIt is not yet possible to install plugins on **{title} backend** for your user to share across all your Gitpod workspaces.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rider","loc":{"lines":{"from":138,"to":140}}}}],["2075",{"pageContent":"Configure JVM options\n\n> Configuration of JVM options is currently in [Alpha](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/8704).\n\nYou can adjust JVM options for {title} backend, especially if you want to increase the `-Xmx` memory size. For example:\n\n```yaml\njetbrains:\n  rider:\n    vmoptions: \"-Xmx4g\"\n```\n\nFor more detailed information on JVM options, refer to [Common JVM Options](https://www.jetbrains.com/help/rider/Tuning_the_IDE.html#common-jvm-options) from JetBrains documentation.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rider","loc":{"lines":{"from":142,"to":154}}}}],["2076",{"pageContent":"Configure IDE settings\n\n> **Feedback needed:** The JetBrains Gitpod integration is currently beta. Gitpod [continues to collaborate with JetBrains](https://www.gitpod.io/blog/gitpod-jetbrains). The below shows how you can configure global settings with JetBrains. To leave feedback on the approach, please see this GitHub issue: [#6576](https://github.com/gitpod-io/gitpod/issues/6576). Also note that JetBrains is working on [comprehensive settings sync functionality](https://youtrack.jetbrains.com/issue/RDCT-1/Settings-synchronization).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rider","loc":{"lines":{"from":156,"to":158}}}}],["2077",{"pageContent":"When running {title} locally, the JetBrains IDE applies [global settings](https://www.jetbrains.com/help/rider/Rider_Settings.html) to all projects on your machine. However when running in a remote context using [JetBrains Gateway](/docs/integrations/jetbrains-gateway), it's important to note that some IDE settings are configured on the [JetBrains Client](#on-jetbrains-client) and others in the [{title} backend](#on-title-backend) running in your Gitpod [Workspace](/docs/configure/workspaces). See below instructions for more.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rider","loc":{"lines":{"from":160,"to":160}}}}],["2078",{"pageContent":"On JetBrains Client\n\nIDE Settings that are configured on the JetBrains Client are stored on your local machine and don't have `On Host` label in the IDE settings. These IDE settings are reused if the workspace is running the exact same version of the {title} backend where the settings were initially configured.\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Configure IDE settings on JetBrains client\" src=\"/images/editors/jb-client-configure-settings-client.webp\">\n    <figcaption>JetBrains client settings don't have <code>On Host</code> label.</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rider","loc":{"lines":{"from":162,"to":169}}}}],["2079",{"pageContent":"On {title} backend\n\nSettings configured on {title} backend are stored in a Gitpod workspace and have `On Host` label in the IDE settings.\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Configure IDE settings on JetBrains client\" src=\"/images/editors/jb-backend-configure-settings.webp\">\n    <figcaption>{title} backend settings have `On Host` label.</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rider","loc":{"lines":{"from":171,"to":178}}}}],["2080",{"pageContent":"Configure IDE settings per project\n\nSome IDE settings cannot be configured via [environment variables](/docs/configure/projects/environment-variables#environment-variables) or through setting [vm options](#configure-jvm-options). These settings can only be set via the UI of JetBrains client, and must be manually copied to be syned between workspaces. The below steps detail how to configure your IDE settings for all the users of a given Gitpod project:\n\n**Step 1: Manually use JetBrains UI to configure settings** - Set your IDE settings as you normally would, using the JetBrains UI.\n\n**Step 2: Find generated IDE settings** - You will need to manually find any global settings generated by JetBrains backend within the following path: `/workspace/.config/JetBrains<-latest>/RemoteDev-/<your-project-name>/options`","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rider","loc":{"lines":{"from":180,"to":186}}}}],["2081",{"pageContent":"**Step 3:** Move any relevant settings manually to a persistent location within your Gitpod project. Either via a [Workspace Image](/docs/configure/workspaces/workspace-image), or persisted in the version control of your project, for example by committing settings data to GitHub.\n\n**Include relevant IDE settings in your Workspace Image**\n\n- `/home/gitpod/.gitpod/jetbrains/options` - This location applies settings to all JetBrains products (IntelliJ IDEA, GoLang, etc).\n- `/home/gitpod/.gitpod/jetbrains/rider/options` - This location will apply settings only to the given IDE, e.g. {title}.\n\n**Commit relevant IDE settings to source control**\n\n- `/workspace/<your-project-name>/.gitpod/jetbrains/options` - This location applies settings to all JetBrains products (IntelliJ IDEA, GoLang, etc).\n- `/workspace/<your-project-name>/.gitpod/jetbrains/rider/options` - This location will apply settings only to the given IDE, e.g. {title}.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rider","loc":{"lines":{"from":188,"to":198}}}}],["2082",{"pageContent":"For any further changes to your IDE settings, you will need to follow the above steps again.\n\n> **Note:** When locating and applying IDE settings, Gitpod will read the locations specified above in priority order. The locations specified first are overriden by the locations specified later.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rider","loc":{"lines":{"from":200,"to":202}}}}],["2083",{"pageContent":"Configure IDE settings per user\n\nTo configure IDE settings for your user only, and not all those using a project.\n\nFollow the instructions for [configuring IDE settings per project](#configure-ide-settings-per-project), but instead use [.dotfiles](/docs/configure/user-settings/dotfiles#dotfiles) rather than a workspace image or source control to store your IDE settings.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rider","loc":{"lines":{"from":204,"to":208}}}}],["2084",{"pageContent":"Indexing using Prebuilds\n\nCurrently, prebuilds for Rider are not supported. To leave feedback or check for updates, see [gitpod/issues/6740](https://github.com/gitpod-io/gitpod/issues/6740).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rider","loc":{"lines":{"from":210,"to":212}}}}],["2085",{"pageContent":"Workspace performance\n\nWhen using a Gitpod workspace you might experience performance issues caused by:\n\n- An application using more resources than expected\n- Resource consumption in adjacent containers running on the workspace node.\n\nIn your JetBrains IDE within the JetBrains Gateway [Backend Control Center](https://www.jetbrains.com/help/idea/work-inside-remote-project.html#control_center) you can find two metrics relating to your running workspace: `Workspace CPU` and `Workspace Memory`.\n\nThe remaining metrics you can find in the Backend Control Center regarding the node that your workspace is running on, and not the workspace itself.\n\n> **Note:** Performance information shown in the Backend Control Center is the same as the information that is shown when running the command [`gp top`](/docs/references/gitpod-cli#top) in your workspace, see the [Command Line Interface](/docs/references/gitpod-cli) documentation for more.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rider","loc":{"lines":{"from":214,"to":225}}}}],["2086",{"pageContent":"![jetbrains performance](/images/jetbrains-gateway/jetbrains-performance-center.png)","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rider","loc":{"lines":{"from":227,"to":227}}}}],["2087",{"pageContent":"FAQs\n\n- For the questions about supported IDEs and Editors in Gitpod, refer to [FAQs](/docs/references/ides-and-editors/faqs).\n\n- For the general questions about JetBrains Remote Development, refer to refer to the general IDE <a href=\"https://www.jetbrains.com/help/rider/FAQ_about_remote_development.html\" target=\"_blank\">{title} FAQ</a>.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rider","loc":{"lines":{"from":229,"to":233}}}}],["2088",{"pageContent":"Are there any JetBrains optimizations I can make if my workspace is slow?\n\nDebugging performance can be challenging, as performance issues can depend on many factors such as how Gitpod is configured (if you're operating Gitpod on Self-Hosted). However, there are some ways you can gather performance information and optimise your JetBrains IDE setup with Gitpod:\n\n1. Firstly, to gather information on performance, you can [view workspace performance metrics from within the IDE](/docs/references/ides-and-editors/intellij#workspace-performance) in the Backend Control Center, or by using [`gp top`](/docs/references/gitpod-cli#top).\n2. You may also want to try adjusting the Max Heap Size allocated to the JetBrains Backend in the Settings tab of the Backend Control Center. If updating this setting helps your performance, you can set the `vmoptions` value for your JetBrains IDE in your `.gitpod.yml`.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rider","loc":{"lines":{"from":235,"to":240}}}}],["2089",{"pageContent":"> **Note:** If the performance metrics show that your workspace is hitting its resource limits, and you are using Gitpod Self-Hosted, it might make sense to consider changing the resource configuration for your workspaces. This can be done via a [config-patch](/docs/configure/self-hosted/latest/config-patches). Configuring workspace resources is not yet available on SaaS.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rider","loc":{"lines":{"from":242,"to":242}}}}],["2090",{"pageContent":"Troubleshooting\n\n- [What should I do if JetBrains Gateway and Gitpod aren’t working?](/docs/help/troubleshooting#what-should-i-do-if-jetbrains-gateway-and-gitpod-arent-working)\n- [Gitpod logs in JetBrains Client](/docs/help/troubleshooting#gitpod-logs-in-jetbrains-client)\n- [Gitpod logs in JetBrains Gateway](/docs/help/troubleshooting#gitpod-logs-in-jetbrains-gateway)","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rider","loc":{"lines":{"from":244,"to":248}}}}],["2091",{"pageContent":"---\nsection: ides-and-editors\ntitle: RubyMine\n---\n\n<!--\n  This document is auto generated from generators/ide/jb-product.md\n  Edit this file instead and run `yarn generate:jb`to apply.\n-->\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n<!-- prettier-ignore -->\n# RubyMine\n\n> {title} is currently in [Beta](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/6576).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rubymine","loc":{"lines":{"from":1,"to":18}}}}],["2092",{"pageContent":"Getting started\n\n1. **Install [JetBrains Gateway](https://www.jetbrains.com/help/ruby/remote-development-a.html#gateway)** - With the [JetBrains Gateway and Gitpod](/docs/integrations/jetbrains-gateway) plugin you can create and manage your latest 20 Gitpod workspaces.\n2. **Install the Gitpod plugin** - Open JetBrains Gateway and you'll see the Gitpod logo on the main page. Click \"install\" to install the [Gitpod plugin](https://plugins.jetbrains.com/plugin/18438-gitpod-gateway) for JetBrains Gateway.\n3. **Update your Gitpod preferences** - Select {title} on the [Gitpod preferences page](https://gitpod.io/preferences) which will set {title} as your default IDE for future workspace starts.\n4. **Start (or restart) your workspace** - Either start a workspace directly from within the [JetBrains Gateway](/docs/integrations/jetbrains-gateway) via the Gitpod plugin **OR** open a new workspace directly in Gitpod where on workspace start you will be prompted to open {title} for that workspace.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rubymine","loc":{"lines":{"from":20,"to":25}}}}],["2093",{"pageContent":"<figure>\n  <video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" src=\"/images/editors/select-jetbrains-ide.webm\" type=\"video/webm\"></video>\n  <figcaption>Updating Gitpod IDE preferences to {title}</figcaption>\n</figure>\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Opening a JetBrains IDE from Gitpod\" src=\"/images/editors/opening-the-thin-jetbrains-client.webm\" type=\"video/webm\"></video>\n    <figcaption>Opening a JetBrains IDE from Gitpod</figcaption>\n</figure>\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Updating the Gitpod plugin in JetBrains Gateway\" src=\"/images/editors/update-jetbrains-gateway-settings.webm\" type=\"video/webm\"></video>\n    <figcaption>Updating the Gitpod plugin in JetBrains Gateway</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rubymine","loc":{"lines":{"from":27,"to":40}}}}],["2094",{"pageContent":"<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Opening a JetBrains IDE from Gateway\" src=\"/images/editors/open-from-jetbrains-gateway.webm\" type=\"video/webm\"></video>\n    <figcaption>Opening a JetBrains IDE from Gateway</figcaption>\n</figure>\n\n**Important:** You must restart any started workspaces for your IDE preferences to take effect.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rubymine","loc":{"lines":{"from":42,"to":47}}}}],["2095",{"pageContent":"Install Plugins\n\n> This section relates to plugin management when using JetBrains IDEs in a remote development context. For information on regular plugin management, refer to <a href=\"https://www.jetbrains.com/help/ruby/managing-plugins.html\" target=\"_blank\">{title} docs</a>.\n\nUnlike with regular development, JetBrains [Remote development](https://www.jetbrains.com/help/ruby/remote-development-overview.html#defs) with {title} allows users to install plugins in different locations:","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rubymine","loc":{"lines":{"from":49,"to":53}}}}],["2096",{"pageContent":"- [**{title} backend plugins**](#install-on-title-backend) - The JetBrains {title} backend runs within the remote Gitpod workspace. Backend plugins contribute functionality for IDE experiences relating to the filesystem, tools or languages and frameworks. When installed, **a backend plugin only applies to the currently running Gitpod workspace** and is not associated with a user. However, a plugin can be [preconfigured for all users of a repository](#preconfigure-for-repository) so that the plugin is enabled with every workspace start. It is not currently possible to install a backend plugin that applies to all workspaces of a Gitpod user or organization.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rubymine","loc":{"lines":{"from":55,"to":55}}}}],["2097",{"pageContent":"- [**JetBrains Client plugins**](#install-on-jetbrains-client) - The JetBrains client runs on the users local machine and can be thought of as the user interface to the remote {title} backend. Client plugins are different to backend plugins as they contribute to the user interface aspect of the IDE experience (e.g. keyboard shortcuts and themes). Once installed, **a client plugin is enabled for all Gitpod workspaces the user opens** (if the workspace is running the exact same version of the {title} backend where the plugin was initially installed).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rubymine","loc":{"lines":{"from":56,"to":56}}}}],["2098",{"pageContent":"- [**JetBrains Gateway plugins**](/docs/integrations/jetbrains-gateway#getting-started) - The JetBrains Gateway is an application downloaded onto a users local machine which allows users to start JetBrains Clients that are compatible with the {title} backend, running in a Gitpod workspace. JetBrains Gateway plugins are installed directly in JetBrains Gateway and contribute to remote development connection experiences (e.g. the [Gitpod JetBrains Gateway](https://plugins.jetbrains.com/plugin/18438-gitpod-gateway) plugin).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rubymine","loc":{"lines":{"from":57,"to":57}}}}],["2099",{"pageContent":"Install on JetBrains Client\n\nThe JetBrains client runs on the users local machine and can be thought of as the user interface to the remote {title} backend. Client plugins contribute to the user interface aspect of the IDE experience (e.g. keyboard shortcuts and themes).\n\nOnce installed, **a client plugin is enabled for all Gitpod workspaces the user opens** (if the workspace is running the exact same version of the {title} backend where the plugin was initially installed).\n\nTo install a plugin on **JetBrains Client** follow these steps:\n\n- In **JetBrains Client** open the IDE settings and select **Plugins**.\n- Find the plugin in the **Marketplace** and click **Install**.\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Install a plugin on JetBrains Client\" src=\"/images/editors/install-local-jb-plugin.png\">\n    <figcaption>Install a plugin on JetBrains Client</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rubymine","loc":{"lines":{"from":59,"to":73}}}}],["2100",{"pageContent":"Install on {title} backend\n\nThe JetBrains {title} backend runs within the remote Gitpod workspace. Backend plugins contribute functionality requiring access to IDE experiences such as the remote filesystem (e.g. contributing support of languages and frameworks).\n\nWhen installed, **a backend plugin only applies to the currently running Gitpod workspace** and is not associated with a user. However, a plugin can be [preconfigured for all users of a repository](#preconfigure-for-repository) so that the plugin is enabled with every workspace start.\n\nIt is not currently possible to install a backend plugin that applies to all workspaces of a Gitpod user or organization.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rubymine","loc":{"lines":{"from":75,"to":81}}}}],["2101",{"pageContent":"Install for your current workspace\n\nYou can install a plugin only for **your current workspace** following these steps:\n\n- In **JetBrains Client** open the IDE settings and select **Plugins On Host**.\n- Find the plugin in the **Marketplace** and click **Install**.\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Install a plugin on {title} backend\" src=\"/images/editors/install-remote-jb-plugin.png\">\n    <figcaption>Install a plugin on {title} backend</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rubymine","loc":{"lines":{"from":83,"to":93}}}}],["2102",{"pageContent":"Preconfigure for repository\n\n> JetBrains plugin support is currently in [Beta](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/6576).\n\nYou can share a plugin on **{title} backend** with everybody working on the repository by adding it to [.gitpod.yml](/docs/references/gitpod-yml) and pushing to your Git repository.\nEach workspace is preconfigured with plugins from the `gitpod.yml` configuration file. For example:\n\n```yaml\njetbrains:\n  rubymine:\n    plugins:\n      - zielu.gittoolbox\n      - izhangzhihao.rainbow.brackets\n```\n\nYou can find the **pluginId** on the [JetBrains Marketplace](https://plugins.jetbrains.com) page:\n\n- Find a page of the required plugin.\n- Select the **Versions** tab.\n- Click any version to copy the **pluginId** (short name such as `org.rust.lang`) of the plugin you want to install.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rubymine","loc":{"lines":{"from":95,"to":114}}}}],["2103",{"pageContent":"Install for your user\n\nIt is not yet possible to install plugins on **{title} backend** for your user to share across all your Gitpod workspaces.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rubymine","loc":{"lines":{"from":116,"to":118}}}}],["2104",{"pageContent":"Configure JVM options\n\n> Configuration of JVM options is currently in [Alpha](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/8704).\n\nYou can adjust JVM options for {title} backend, especially if you want to increase the `-Xmx` memory size. For example:\n\n```yaml\njetbrains:\n  rubymine:\n    vmoptions: \"-Xmx4g\"\n```\n\nFor more detailed information on JVM options, refer to [Common JVM Options](https://www.jetbrains.com/help/ruby/tuning-the-ide.html#common-jvm-options) from JetBrains documentation.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rubymine","loc":{"lines":{"from":120,"to":132}}}}],["2105",{"pageContent":"Configure IDE settings\n\n> **Feedback needed:** The JetBrains Gitpod integration is currently beta. Gitpod [continues to collaborate with JetBrains](https://www.gitpod.io/blog/gitpod-jetbrains). The below shows how you can configure global settings with JetBrains. To leave feedback on the approach, please see this GitHub issue: [#6576](https://github.com/gitpod-io/gitpod/issues/6576). Also note that JetBrains is working on [comprehensive settings sync functionality](https://youtrack.jetbrains.com/issue/RDCT-1/Settings-synchronization).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rubymine","loc":{"lines":{"from":134,"to":136}}}}],["2106",{"pageContent":"When running {title} locally, the JetBrains IDE applies [global settings](https://www.jetbrains.com/help/ruby/configuring-project-and-ide-settings.html) to all projects on your machine. However when running in a remote context using [JetBrains Gateway](/docs/integrations/jetbrains-gateway), it's important to note that some IDE settings are configured on the [JetBrains Client](#on-jetbrains-client) and others in the [{title} backend](#on-title-backend) running in your Gitpod [Workspace](/docs/configure/workspaces). See below instructions for more.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rubymine","loc":{"lines":{"from":138,"to":138}}}}],["2107",{"pageContent":"On JetBrains Client\n\nIDE Settings that are configured on the JetBrains Client are stored on your local machine and don't have `On Host` label in the IDE settings. These IDE settings are reused if the workspace is running the exact same version of the {title} backend where the settings were initially configured.\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Configure IDE settings on JetBrains client\" src=\"/images/editors/jb-client-configure-settings-client.webp\">\n    <figcaption>JetBrains client settings don't have <code>On Host</code> label.</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rubymine","loc":{"lines":{"from":140,"to":147}}}}],["2108",{"pageContent":"On {title} backend\n\nSettings configured on {title} backend are stored in a Gitpod workspace and have `On Host` label in the IDE settings.\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Configure IDE settings on JetBrains client\" src=\"/images/editors/jb-backend-configure-settings.webp\">\n    <figcaption>{title} backend settings have `On Host` label.</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rubymine","loc":{"lines":{"from":149,"to":156}}}}],["2109",{"pageContent":"Configure IDE settings per project\n\nSome IDE settings cannot be configured via [environment variables](/docs/configure/projects/environment-variables#environment-variables) or through setting [vm options](#configure-jvm-options). These settings can only be set via the UI of JetBrains client, and must be manually copied to be syned between workspaces. The below steps detail how to configure your IDE settings for all the users of a given Gitpod project:\n\n**Step 1: Manually use JetBrains UI to configure settings** - Set your IDE settings as you normally would, using the JetBrains UI.\n\n**Step 2: Find generated IDE settings** - You will need to manually find any global settings generated by JetBrains backend within the following path: `/workspace/.config/JetBrains<-latest>/RemoteDev-RM/<your-project-name>/options`","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rubymine","loc":{"lines":{"from":158,"to":164}}}}],["2110",{"pageContent":"**Step 3:** Move any relevant settings manually to a persistent location within your Gitpod project. Either via a [Workspace Image](/docs/configure/workspaces/workspace-image), or persisted in the version control of your project, for example by committing settings data to GitHub.\n\n**Include relevant IDE settings in your Workspace Image**\n\n- `/home/gitpod/.gitpod/jetbrains/options` - This location applies settings to all JetBrains products (IntelliJ IDEA, GoLang, etc).\n- `/home/gitpod/.gitpod/jetbrains/rubymine/options` - This location will apply settings only to the given IDE, e.g. {title}.\n\n**Commit relevant IDE settings to source control**\n\n- `/workspace/<your-project-name>/.gitpod/jetbrains/options` - This location applies settings to all JetBrains products (IntelliJ IDEA, GoLang, etc).\n- `/workspace/<your-project-name>/.gitpod/jetbrains/rubymine/options` - This location will apply settings only to the given IDE, e.g. {title}.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rubymine","loc":{"lines":{"from":166,"to":176}}}}],["2111",{"pageContent":"For any further changes to your IDE settings, you will need to follow the above steps again.\n\n> **Note:** When locating and applying IDE settings, Gitpod will read the locations specified above in priority order. The locations specified first are overriden by the locations specified later.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rubymine","loc":{"lines":{"from":178,"to":180}}}}],["2112",{"pageContent":"Configure IDE settings per user\n\nTo configure IDE settings for your user only, and not all those using a project.\n\nFollow the instructions for [configuring IDE settings per project](#configure-ide-settings-per-project), but instead use [.dotfiles](/docs/configure/user-settings/dotfiles#dotfiles) rather than a workspace image or source control to store your IDE settings.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rubymine","loc":{"lines":{"from":182,"to":186}}}}],["2113",{"pageContent":"Indexing using Prebuilds\n\n> JetBrains Prebuilds is currently in [Alpha](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/6576).\n\nWhen you open the project {title} starts indexing to load modules and\nenable the core functionality like code completion and navigation.\nDepending on the size of your project indexing speed can vary significantly.\n\nYou can speed up the indexing of a project by applying these [general recommendations](https://www.jetbrains.com/help/ruby/indexing.html).\nGitpod prebuilds allow you to improve it further by indexing before you start a new workspace.\n\nTo leverage it:\n\n- configure prebuilds for your repository, refer to [Prebuilds](/docs/configure/projects/prebuilds);\n- enable indexing for {title} in prebuilds by editing [.gitpod.yml](/docs/references/gitpod-yml) in your repository:\n\n```yaml\njetbrains:\n  rubymine:\n    prebuilds:\n      version: stable","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rubymine","loc":{"lines":{"from":188,"to":208}}}}],["2114",{"pageContent":"- push changes to your Git repository to apply.\n\nThe `version` property allows you to control whether to index for `stable`, `latest`, or `both` versions of {title} compatible with Gitpod.\nUsers can switch between `stable` and `latest` versions of {title} on the [user preferences](https://gitpod.io/preferences) page.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rubymine","loc":{"lines":{"from":211,"to":214}}}}],["2115",{"pageContent":"Workspace performance\n\nWhen using a Gitpod workspace you might experience performance issues caused by:\n\n- An application using more resources than expected\n- Resource consumption in adjacent containers running on the workspace node.\n\nIn your JetBrains IDE within the JetBrains Gateway [Backend Control Center](https://www.jetbrains.com/help/idea/work-inside-remote-project.html#control_center) you can find two metrics relating to your running workspace: `Workspace CPU` and `Workspace Memory`.\n\nThe remaining metrics you can find in the Backend Control Center regarding the node that your workspace is running on, and not the workspace itself.\n\n> **Note:** Performance information shown in the Backend Control Center is the same as the information that is shown when running the command [`gp top`](/docs/references/gitpod-cli#top) in your workspace, see the [Command Line Interface](/docs/references/gitpod-cli) documentation for more.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rubymine","loc":{"lines":{"from":216,"to":227}}}}],["2116",{"pageContent":"![jetbrains performance](/images/jetbrains-gateway/jetbrains-performance-center.png)","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rubymine","loc":{"lines":{"from":229,"to":229}}}}],["2117",{"pageContent":"FAQs\n\n- For the questions about supported IDEs and Editors in Gitpod, refer to [FAQs](/docs/references/ides-and-editors/faqs).\n\n- For the general questions about JetBrains Remote Development, refer to refer to the general IDE <a href=\"https://www.jetbrains.com/help/ruby/faq-about-remote-development.html\" target=\"_blank\">{title} FAQ</a>.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rubymine","loc":{"lines":{"from":231,"to":235}}}}],["2118",{"pageContent":"Are there any JetBrains optimizations I can make if my workspace is slow?\n\nDebugging performance can be challenging, as performance issues can depend on many factors such as how Gitpod is configured (if you're operating Gitpod on Self-Hosted). However, there are some ways you can gather performance information and optimise your JetBrains IDE setup with Gitpod:\n\n1. Firstly, to gather information on performance, you can [view workspace performance metrics from within the IDE](/docs/references/ides-and-editors/intellij#workspace-performance) in the Backend Control Center, or by using [`gp top`](/docs/references/gitpod-cli#top).\n2. You may also want to try adjusting the Max Heap Size allocated to the JetBrains Backend in the Settings tab of the Backend Control Center. If updating this setting helps your performance, you can set the `vmoptions` value for your JetBrains IDE in your `.gitpod.yml`.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rubymine","loc":{"lines":{"from":237,"to":242}}}}],["2119",{"pageContent":"> **Note:** If the performance metrics show that your workspace is hitting its resource limits, and you are using Gitpod Self-Hosted, it might make sense to consider changing the resource configuration for your workspaces. This can be done via a [config-patch](/docs/configure/self-hosted/latest/config-patches). Configuring workspace resources is not yet available on SaaS.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rubymine","loc":{"lines":{"from":244,"to":244}}}}],["2120",{"pageContent":"Troubleshooting\n\n- [What should I do if JetBrains Gateway and Gitpod aren’t working?](/docs/help/troubleshooting#what-should-i-do-if-jetbrains-gateway-and-gitpod-arent-working)\n- [Gitpod logs in JetBrains Client](/docs/help/troubleshooting#gitpod-logs-in-jetbrains-client)\n- [Gitpod logs in JetBrains Gateway](/docs/help/troubleshooting#gitpod-logs-in-jetbrains-gateway)","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rubymine","loc":{"lines":{"from":246,"to":250}}}}],["2121",{"pageContent":"---\nsection: ides-and-editors\ntitle: VS Code settings sync\n---\n\n<script context=\"module\">\n  export const prerender = true;\n  import Keybind from \"$lib/components/keybind.svelte\";\n</script>\n\n# VS Code settings sync\n\nVS Code is beloved for its endless customization possibilities.\n\nHowever, you may come across the challenge of having many multiple VS Code instances needing to share the same extensions, themes and settings. Since every start of a [Gitpod workspace](https://www.gitpod.io/docs/introduction/learn-gitpod/one-workspace-per-task) is a new instance of VS Code, using [Settings Sync](https://code.visualstudio.com/docs/editor/settings-sync) helps you avoid re-setting your environment for each new workspace and embrace ephemeral Gitpod workspaces.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/settings-sync","loc":{"lines":{"from":1,"to":15}}}}],["2122",{"pageContent":"How VS Code Setting Sync works\n\nOnce enabled, Settings Sync polls the backend to ensure that your settings are stored. To save network bandwidth and allow for more frequent synchronization only changed items are pushed to the server after the first sync.\n\nThe following settings are synced via Settings Sync:\n\n- [VS Code preferences](https://code.visualstudio.com/docs/getstarted/settings)\n- [Keybindings](https://code.visualstudio.com/docs/getstarted/keybindings)\n- [Snippets](https://code.visualstudio.com/docs/editor/userdefinedsnippets)\n- [Tasks](https://code.visualstudio.com/Docs/editor/tasks#_user-level-tasks)\n- [Installed Extensions](https://code.visualstudio.com/docs/editor/extension-marketplace#_manage-extensions)\n- [Global State](https://code.visualstudio.com/docs/editor/settings-sync#_sync-user-global-state-between-machines)","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/settings-sync","loc":{"lines":{"from":17,"to":28}}}}],["2123",{"pageContent":"Gitpod vs Microsoft Settings Sync\n\nBy default, most desktop VS Code installations are configured to sync settings via a GitHub or a Microsoft account. These settings are synced to Microsoft's servers and are inaccessible to third-parties, including Gitpod. Due to this limitation of access to settings stored in Microsoft servers, Gitpod implements its own VS Code settings sync server. Gitpod **Settings Sync is enabled by default for VS Code in the browser, but must be configured for desktop**.\n\n### Enabling Settings Sync in VS Code Browser\n\nVS Code in the browser with Gitpod has Settings Sync enabled by default, syncing preferences to Gitpod's servers.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/settings-sync","loc":{"lines":{"from":30,"to":36}}}}],["2124",{"pageContent":"Enabling Settings Sync in VS Code Desktop\n\n1. Install and enable the [Gitpod extension](https://marketplace.visualstudio.com/items?itemName=gitpod.gitpod-desktop).\n\n**Note:** If you open VS Code Desktop directly from Gitpod, the Gitpod extension is automatically installed for you.\n\n<figure>\n<img class=\"shadow-medium rounded-xl max-w-md mt-x-small\" alt=\"The Gitpod VS Code Desktop plugin\" src=\"/images/editors/gitpod-extension.png\">\n    <figcaption>The Gitpod VS Code Desktop plugin</figcaption>\n</figure>\n\n2. Using the [Command Palette](https://code.visualstudio.com/api/ux-guidelines/command-palette) select: \"Settings Sync: Enable signing in with Gitpod\".\n\n![Enable Settings Sync with Gitpod](/images/editors/enable-signin-with-gitpod-light-theme.png)\n![Enable Settings Sync with Gitpod](/images/editors/enable-signin-with-gitpod-dark-theme.png)\n_Enable Settings Sync with Gitpod_\n\n3. Restart your VS Code Desktop application.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/settings-sync","loc":{"lines":{"from":38,"to":55}}}}],["2125",{"pageContent":"3. Restart your VS Code Desktop application.\n\n<figure>\n<img class=\"shadow-medium rounded-xl max-w-md mt-x-small\" alt=\"Prompt to restart VS Code Desktop\" src=\"/images/editors/restart-vscode.png\">\n    <figcaption>Prompt to restart VS Code Desktop</figcaption>\n</figure>\n\n> **Important:** You must entirely close VS Code Desktop for changes to take effect.\n\n4. Enable settings sync from the Manage gear menu at the bottom of the Activity Bar.\n\nYou must authenticate with Gitpod to enable settings sync.\n\n<figure>\n<img class=\"shadow-medium rounded-xl max-w-md mt-x-small\" alt=\"Enable settings sync from the Manage gear menu\" src=\"/images/editors/enable-settings-sync.png\">\n    <figcaption>Enable settings sync from the Manage gear menu</figcaption>\n</figure>\n\nYou will be prompted which settings to sync, and to authenticate via Gitpod.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/settings-sync","loc":{"lines":{"from":55,"to":73}}}}],["2126",{"pageContent":"You will be prompted which settings to sync, and to authenticate via Gitpod.\n\n<figure>\n<img class=\"shadow-medium rounded-xl max-w-md mt-x-small\" alt=\"Sign into Gitpod to enable VS Code settings sync\" src=\"/images/editors/signin-and-turnon.png\">\n    <figcaption>Sign into Gitpod to enable VS Code settings sync</figcaption>\n</figure>\n\n5. Resolve any settings conflicts\n\nSettings in VS Code Desktop might differ from your remote settings, follow the instructions in VS Code to resolve any conflicts with the preferences files.\n\n<figure>\n<img class=\"shadow-medium rounded-xl max-w-md mt-x-small\" alt=\"Merge or replace VS Code Settings\" src=\"/images/editors/resolve-merge-conflicts.png\">\n    <figcaption>Merge or replace VS Code Settings</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/settings-sync","loc":{"lines":{"from":73,"to":87}}}}],["2127",{"pageContent":"FAQs\n\n### How do I disable VS Code Settings Sync?\n\nSearch for `settings sync off` in your VS Code [Command Palette](https://code.visualstudio.com/docs/getstarted/userinterface#_command-palette) and hit <Keybind>Enter</Keybind>.\n\n> **Note:** This will only work properly inside of VS Code Desktop. If you choose to disable Settings Sync inside of VS Code Browser, you will have to disable it in every new workspace and every time a workspace restarts.\n\n<figure>\n<img class=\"shadow-medium rounded-xl max-w-md mt-x-small\" alt=\"Disable Gitpod settings sync\" src=\"/images/editors/disable-settings-sync.png\">\n    <figcaption>Searching for \"setting sync\" on the Command Palette</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/settings-sync","loc":{"lines":{"from":89,"to":100}}}}],["2128",{"pageContent":"---\nsection: ides-and-editors\ntitle: VS Code Browser\n---\n\n<script context=\"module\">\n  export const prerender = true;\n  import Keybind from \"$lib/components/keybind.svelte\";\n</script>\n\n# VS Code Browser\n\nVS Code Browser is the default editor that workspaces open in when using Gitpod. You can even [configure your VS Code extension](/docs/references/ides-and-editors/vscode-extensions) preferences by updating your .gitpod.yml.\n\n![VS Code](../../../static/images/gitpod-editor.jpg)\n\n## Changing the VS Code Browser version\n\nVS Code Browser in Gitpod is based on a fork of [VS Code](https://github.com/microsoft/vscode) called [OpenVSCode Server\n](https://github.com/gitpod-io/openvscode-server). VS Code in the browser in Gitpod is updated frequently, to use the latest nightly build of Gitpod you can switch to the \"insiders\" version of VS Code from [your Gitpod preferences page](https://gitpod.io/preferences).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode-browser","loc":{"lines":{"from":1,"to":20}}}}],["2129",{"pageContent":"Settings Sync\n\nBy default, all your extensions and other preferences are synced between all of your workspaces on Gitpod. You can read more about over at [Settings Sync](settings-sync).\n\n## Upload Files\n\nYou can upload files to your workspace by dragging and dropping them into the editor. You can also upload files by clicking the \"Upload\" button in the file explorer.\n\n<figure>\n  <video onloadstart=\"this.playbackRate = 1.5;\" controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" src=\"/images/editors/file-upload-ui-button.webm\" type=\"video/webm\"></video>\n  <figcaption>Upload Files from local to VS Code Browser</figcaption>\n</figure>\n\n## FAQs","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode-browser","loc":{"lines":{"from":22,"to":35}}}}],["2130",{"pageContent":"FAQs\n\n## Is it possible to intercept shortcuts like cmd+w in VSCode browser?\n\nIt is not possible to intercept <Keybind>Cmd + W</Keybind> directly in browsers like Chrome or Firefox, as it would require overriding the native keyboard shortcut.\n\n### Recommended Solution\n\n- Use [Gitpod with VS Code Desktop](/docs/references/ides-and-editors/vscode) for the best keyboard experience.\n\n### Alternative Solution\n\nYou can also install Gitpod as a <abbr title=\"Progressive Web App\">PWA</abbr>. If you're interested in this approach, you can follow the instructions listed in the accompanying GitHub Issue [here](https://github.com/gitpod-io/gitpod/issues/1445#issuecomment-1028706854).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode-browser","loc":{"lines":{"from":35,"to":47}}}}],["2131",{"pageContent":"---\nsection: ides-and-editors\ntitle: VS Code extensions\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# VS Code extensions\n\nGitpod already comes well equipped for most development tasks, and provides language support for the most popular programming languages such as Python, JavaScript, Go, Rust, C/C++, Java, Ruby, and many more out of the box.\n\nStill, you may wish to customize Gitpod, or to extend it with new features. You can do this by installing VS Code extensions.\n\n`youtube: TwXYbZKEuoA`","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode-extensions","loc":{"lines":{"from":1,"to":16}}}}],["2132",{"pageContent":"Installing an Extension\n\nTo install a VS Code extension in Gitpod, simply go to the left vertical menu, and open the Extensions view. There you can search for an extension and install it with one click.\n\nFor [VS Code Browser](vscode-browser), we use the [Open VSX](#open-vsx) registry. If you can't find an extension you use in your local VS Code, please read the \"[Where do I find extensions?](#where-do-i-find-extensions)\" section below.\n\nIf the extension is helpful to anyone who works on the project, you can add it to the `.gitpod.yml` configuration file so that it gets installed for anyone who works on the project. To do that:\n\n1. Visit the extension page (where you installed it from)\n2. Click the settings icon\n3. Select \"Add to .gitpod.yml\" from the menu\n\nYour project's `.gitpod.yml` is updated automatically and lists the given extension. You can also directly edit this file to install or remove extensions manually.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode-extensions","loc":{"lines":{"from":18,"to":30}}}}],["2133",{"pageContent":"Your project's `.gitpod.yml` is updated automatically and lists the given extension. You can also directly edit this file to install or remove extensions manually.\n\nHere is an example of what a `.gitpod.yml` with installed extensions may look like:\n\n```yaml\nvscode:\n  extensions:\n    - svelte.svelte-vscode\n    - bradlc.vscode-tailwindcss@0.6.11\n    - https://example.com/abc/releases/extension-0.26.0.vsix","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode-extensions","loc":{"lines":{"from":30,"to":39}}}}],["2134",{"pageContent":"You can share the installed extensions with your organization by committing the `.gitpod.yml` change and pushing it to your Git repository.\n\nExtensions are installed in the `/workspace/.vscode-remote/extensions/` directory.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode-extensions","loc":{"lines":{"from":42,"to":44}}}}],["2135",{"pageContent":"User Extensions\n\nYou have two options to install extensions for yourself only:\n\n1. For the current workspace only - if you don't want extensions to be synced across workspaces, select `Install (Do Not Sync)` instead of `Install` when installing new extensions.\n2. For all your workspaces - can be useful for extensions that you want to have in all your projects (for example a custom theme), and this doesn't require changing every project's `.gitpod.yml` configuration. **All manually installed extensions are synced across workspaces by default**.\n\nYou can read more about why and how extensions are synced on the [Settings Sync](settings-sync) page.\n\n## Built-in Extensions\n\nGitpod already comes with a number of commonly used VS Code extensions pre-installed by default.\n\nYou can view all pre-installed extensions by navigating to VS Code's Extensions section on the left-hand side. In the \"Search Extensions in Marketplace\" input field, type `@builtin` to see the built-in extensions.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode-extensions","loc":{"lines":{"from":46,"to":59}}}}],["2136",{"pageContent":"Use of Microsoft-owned extensions in Gitpod\n\nYou can only use extensions available on the [Open VSX](#open-vsx) registry with [VS Code Browser](vscode-browser) on Gitpod. Microsoft only permits use of their marketplace via \"Microsoft’s publicly supported interfaces\" (see their [ToS](https://cdn.vsassets.io/v/M190_20210811.1/_content/Microsoft-Visual-Studio-Marketplace-Terms-of-Use.pdf) section `1f`), and this restriction applies to the Gitpod VS Code Browser integration. If you wish to use extensions from Microsoft's VS Code Marketplace, you must use [VS Code Desktop](vscode).\n\nThe following extensions are therefore not available in VS Code Browser:","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode-extensions","loc":{"lines":{"from":61,"to":65}}}}],["2137",{"pageContent":"The following extensions are therefore not available in VS Code Browser:\n\n- [Microsoft Pylance](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance)\n- [Microsoft C#](https://marketplace.visualstudio.com/items?itemName=ms-dotnettools.csharp)\n- [Microsoft .Net](https://marketplace.visualstudio.com/items?itemName=ms-dotnettools.vscode-dotnet-runtime)\n- [Microsoft C++](https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools)\n- [GitHub Copilot](https://marketplace.visualstudio.com/items?itemName=GitHub.copilot)","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode-extensions","loc":{"lines":{"from":65,"to":71}}}}],["2138",{"pageContent":"Install VS Code extensions from a VSIX file\n\nIt is possible to develop, install and test your own custom VS Code extensions in Gitpod. While developing the extension, you can test it by uploading the `.vsix` file to your Gitpod workspace.\n\n**Please note:**\n\n- You can install any private extensions using manual VSIX installation.\n- Installing a `.vsix` in Gitpod does not list that extension anywhere public.\n- Any `.vsix` referenced in the `.gitpod.yml` must be publicly accessible.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode-extensions","loc":{"lines":{"from":73,"to":81}}}}],["2139",{"pageContent":"Open VSX\n\nOpen VSX is an open source VS Code extensions registry. For VS Code Browser in Gitpod, Gitpod uses a self-hosted mirror of the public Open VSX instance provided by the [Eclipse Foundation](https://www.eclipse.org/), [open-vsx.org](https://open-vsx.org/). Any extensions published to Open VSX are immediately reflected in the Gitpod OpenVSX mirror.\n\n### Why do we need Open VSX?\n\nVS Code Browser is prohibited from accessing the Microsoft VS Code Extensions marketplace.\n\nSee [Use of Microsoft owned extensions in Gitpod](#use-of-microsoft-owned-extensions-in-gitpod) for more.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode-extensions","loc":{"lines":{"from":83,"to":91}}}}],["2140",{"pageContent":"Where do I find extensions?\n\nIf you cannot find an extension by searching in Gitpod using [VS Code Browser](vscode-browser), the extension, in many cases, was not yet added to the [Open VSX](https://open-vsx.org/) registry.\n\nIn that case, please reach out to the extension author and politely ask them to publish their extension to the vendor-neutral, open-source Open VSX registry. The [\"how to Publish an Extension\"](https://github.com/eclipse/openvsx/wiki/Publishing-Extensions) docs provide step-by-step instructions.\n\n> **Note**: `.vsix` files downloaded from the [Visual Studio Marketplace](https://marketplace.visualstudio.com/vscode) should not be installed in Gitpod.\n\nSee [Use of Microsoft owned extensions in Gitpod](#use-of-microsoft-owned-extensions-in-gitpod) for more.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode-extensions","loc":{"lines":{"from":93,"to":101}}}}],["2141",{"pageContent":"---\nsection: ides-and-editors\ntitle: VS Code Desktop\n---\n\n<script context=\"module\">\n  export const prerender = true;\n  import Keybind from \"$lib/components/keybind.svelte\";\n</script>\n\n# VS Code Desktop\n\nWith VS Code Desktop Support, you keep your local editor configurations<sup>1</sup> and benefit from Gitpod's high-spec servers & automated prebuilds. As usual, your code executes in an ephemeral Gitpod workspace, keeping each of your projects isolated from one another.\n\n`youtube: kI6firDA0Bw`","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode","loc":{"lines":{"from":1,"to":15}}}}],["2142",{"pageContent":"Open a workspace in VS Code Desktop\n\nThere are currently three supported ways to open a VS Code Desktop session connected to a Gitpod workspace, either by opening it from the [Gitpod dashboard](https://gitpod.io/workspaces), choosing VS Code Desktop as your default preference, or directly from within VS Code Browser itself.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode","loc":{"lines":{"from":17,"to":19}}}}],["2143",{"pageContent":"Open VS Code Desktop from the Gitpod Dashboard\n\nYou can start a workspace with VS Code Desktop directly from [Gitpod Dashboard](https://gitpod.io/workspaces). You can do that from by clicking on the `New Workspace` button. Then, you can select the [context url](/docs/introduction/learn-gitpod/context-url), Editor and custom [workspace class](/docs/configure/workspaces/workspace-classes).\n\n<figure>\n<video onloadstart=\"this.playbackRate = 1.5;\" controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-2xl mt-x-small\" alt=\"Start Gitpod new workspace with options\" src=\"/images/docs/new-workspace-start-with-options.webm\" type=\"video/webm\"></video>\n    <figcaption>Open New Gitpod Workspace with VS Code Desktop • <a href=\"https://gitpod.io/workspaces\">Gitpod Dashboard</a></figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode","loc":{"lines":{"from":21,"to":28}}}}],["2144",{"pageContent":"Open VS Code Desktop from VS Code Browser\n\n1. Start a new Gitpod workspace\n2. Open the command palette (<Keybind>CtrlCmd + Shift + P</Keybind>)\n3. Type \"Open in VS Code\" and hit <Keybind>Enter</Keybind>\n\nYou will now be redirected to VS Code Desktop.\n\n![Open VS Code via the Command Palette](/images/editors/open-in-vscode-command-palette-light-theme.png)\n![Open VS Code via the Command Palette](/images/editors/open-in-vscode-command-palette-dark-theme.png)\n_Open VS Code via the Command Palette_","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode","loc":{"lines":{"from":30,"to":40}}}}],["2145",{"pageContent":"Open VS Code Desktop using your preferences\n\n1. Navigate to your [Gitpod preferences](https://gitpod.io/preferences)\n2. Select \"VS Code\" (without the browser label)\n3. Restart any running workspaces\n\nWhen the workspace starts, you will be prompted to open VS Code Desktop. You can also access your workspace using VS Code Browser, or copy SSH credentials from this page.\n\n![Open VS Code Desktop from the workspace start page](/images/editors/vscode-desktop-splash-light-theme.png)\n![Open VS Code Desktop from the workspace start page](/images/editors/vscode-desktop-splash-dark-theme.png)\n_Open VS Code Desktop from the workspace start page_\n\n![Selecting VS Code Desktop as an editor preference](/images/editors/select-vscode-desktop-preference-light-theme.png)\n![Selecting VS Code Desktop as an editor preference](/images/editors/select-vscode-desktop-preference-dark-theme.png)\n_Selecting VS Code Desktop as an editor preference_","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode","loc":{"lines":{"from":42,"to":56}}}}],["2146",{"pageContent":"Connecting to VS Code Desktop (SSH)\n\nThe three main methods granting VS Code Desktop access to your workspace are:\n\n1. SSH Gateway access using an uploaded public SSH key (recommended)\n2. SSH Gateway access using the owner token\n3. Using Local Companion (legacy)\n\nSee [configure SSH](/docs/configure/user-settings/ssh) for more on SSH Gateway.\n\n> **Important:** You must first ensure that `gitpod.remote.useLocalApp` is set to `false` in your VS Code user preferences for Gitpod to connect via the two SSH Gateway methods.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode","loc":{"lines":{"from":58,"to":68}}}}],["2147",{"pageContent":"Connect to VS Code Desktop using an uploaded public SSH key\n\nFirst, VS Code Desktop will check if you have already added a public SSH key to Gitpod and that the associated private key is available on your device.\n\nIf you haven't set up an SSH key with Gitpod, you can go to [gitpod.io/keys](https://gitpod.io/keys) to upload a public key. Alternatively, you can continue using the owner token approach detailed below.\n\n<div align=\"center\">\n  <img alt=\"The VS Code Desktop prompt from Gitpod when opening a workspace with no SSH key found locally or uploaded to Gitpod\" src=\"/images/editors/no-registered-ssh-key-for-this-machine.png\" width=\"50%\">\n  <p><i>The VS Code Desktop prompt from Gitpod when opening a workspace with no SSH key found locally or uploaded to Gitpod.</i></p>\n  <br />\n</div>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode","loc":{"lines":{"from":70,"to":80}}}}],["2148",{"pageContent":"You must have at least one public key uploaded to Gitpod, and a matching private key locally on your device to avoid this prompt. VS Code Desktop will look to find private keys in the following named files within the `.ssh` directory listed under your home directory.\n\n- `id_dsa`\n- `id_dsa`\n- `id_ecdsa`\n- `id_rsa`\n- `id_ed25519`\n- `id_xmss`\n- `id_ecdsa_sk`\n- `id_ed25519_sk`","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode","loc":{"lines":{"from":82,"to":91}}}}],["2149",{"pageContent":"Connect to VS Code Desktop using the workspace owner token\n\nIf you cannot upload a public key to Gitpod (for whatever reason) selecting **Copy** will allow you to proceed to access your Gitpod workspace using the owner token approach. Selecting **Copy** will copy the necessary password to your clipboard to be pasted in the subsequent password prompt.\n\n![VS Code prompting for a password. This message is shown when the public key warning notice is dismissed on the previous page by selecting Copy](/images/editors/enter-password-for-ssh-connection-dark-theme.png)\n![VS Code prompting for a password. This message is shown when the public key warning notice is dismissed on the previous page by selecting Copy](/images/editors/enter-password-for-ssh-connection-light-theme.png)\n_VS Code prompting for a password. This message is shown when the public key warning notice is dismissed on the previous page by selecting Copy._","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode","loc":{"lines":{"from":93,"to":99}}}}],["2150",{"pageContent":"> **Note:** Gitpod previously required a local private SSH key to be stored in the default SSH directory, otherwise Gitpod would prompt for a \"password\". This limitation is no longer required. If not using an SSH uploaded key, you may be prompted for a password (the owner token), or asked for the passphrase associated with your SSH key.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode","loc":{"lines":{"from":101,"to":101}}}}],["2151",{"pageContent":"Connect to VS Code Desktop using Local Companion (Legacy)\n\nIf VS Code Desktop cannot connect directly via the SSH Gateway methods described above, the Local Companion approach is used as a fallback to tunnel your SSH connection. Gitpod via the VS Code Desktop plugin will download and start the Local Companion process on your behalf.\n\nThis approach is not recommended because:\n\n1. It overwrites your [`remote.SSH.configFile`](https://code.visualstudio.com/blogs/2019/10/03/remote-ssh-tips-and-tricks) VS Code setting.\n2. Downloads and starts Local Companion in a non-transparent way.\n3. Is less performant than the SSH Gateway approach.\n\nIf required, you manually can force VS Code Desktop to always fallback to the Local Companion by setting the property `gitpod.remote.useLocalApp` in your user preferences to `true`.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode","loc":{"lines":{"from":103,"to":113}}}}],["2152",{"pageContent":"If required, you manually can force VS Code Desktop to always fallback to the Local Companion by setting the property `gitpod.remote.useLocalApp` in your user preferences to `true`.\n\n![The VS Code Desktop Gitpod extension useLocalApp setting](/images/editors/vscode-local-app-setting-dark-theme.png)\n![The VS Code Desktop Gitpod extension useLocalApp setting](/images/editors/vscode-local-app-setting-light-theme.png)\n_The VS Code Desktop Gitpod extension \"useLocalApp\" setting_\n\n> **Deprecation Notice:** The fallback SSH connection using Local Companion for VS Code Desktop will be deprecated in a future release of Gitpod. If you cannot connect to your workspaces directly via SSH, for example, because your firewall is blocking the SSH connection, please [contact support](https://www.gitpod.io/support) with [troubleshooting logs](https://www.gitpod.io/docs/help/troubleshooting#gitpod-logs-in-vs-code-web-and-desktop).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode","loc":{"lines":{"from":113,"to":119}}}}],["2153",{"pageContent":"Reconnect to VS Code Desktop\n\nWhen VS Code Desktop disconnects from the workspace, either you are experiencing genuine connectivity issues, or it's possible that the workspace has timed out and stopped.\n\n![VS Code Desktop attempting to reconnect](/images/editors/reconnect-window-light-theme.png)\n![VS Code Desktop attempting to reconnect](/images/editors/reconnect-window-dark-theme.png)\n_VS Code Desktop attempting to reconnect_\n\nTo restart the workspace, click **Open Workspace** from the workspace start page or from the dashboard and VS Code Desktop should automatically reconnect.\n\n**Please note:** There is currently no way to start a workspace directly from VS Code Desktop.\n\n![Open workspace button shown on a stopped workspace page](/images/editors/workspace-stopped-dark-theme.png)\n![Open workspace button shown on a stopped workspace page](/images/editors/workspace-stopped-light-theme.png)\n_The open workspace button shown on a stopped workspace page_","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode","loc":{"lines":{"from":121,"to":135}}}}],["2154",{"pageContent":"VS Code settings sync\n\nYou can optionally enable Settings Sync with Gitpod to keep your extensions, themes and settings up-to-date with VS Code Browser and Desktop. See [VS Code settings sync](settings-sync) for more\n\n![Enable Settings Sync with Gitpod](/images/editors/enable-signin-with-gitpod-light-theme.png)\n![Enable Settings Sync with Gitpod](/images/editors/enable-signin-with-gitpod-dark-theme.png)\n_Enable Settings Sync with Gitpod_\n\n## Managing VS Code extensions\n\nVS Code runs extensions in one of two places: locally on the UI / client side, or remotely on your Gitpod workspace.\n\nFor further details, please refer to the official VS Code docs on how to [manage extensions](https://code.visualstudio.com/docs/remote/ssh#_managing-extensions).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode","loc":{"lines":{"from":137,"to":149}}}}],["2155",{"pageContent":"Custom fonts in VS Code Desktop\n\nThe process of installing fonts matches how you typically install custom fonts locally:\n\n1. Download the desired font to your local machine and install it locally on your operating system.\n1. Open the editor's user settings (e.g. _File_ > _Preferences_ > _Settings_ > _User_)\n1. Configure your font with the `editor.fontFamily` setting:\n   ```json\n   {\n     \"editor.fontFamily\": \"Your custom font name\"\n   }\n   ```","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode","loc":{"lines":{"from":151,"to":162}}}}],["2156",{"pageContent":"Optimizing VS Code Desktop\n\nIf you're using VS Code Desktop for frequent work you'll want to optimize your setup. Below are some tips to get a workspace set up as efficient as possible.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode","loc":{"lines":{"from":164,"to":166}}}}],["2157",{"pageContent":"SSH fingerprint\n\n![Accepting the SSH fingerprint in VS Code](/images/editors/vscode-ssh-fingerprint-light-theme.png)\n![Accepting the SSH fingerprint in VS Code](/images/editors/vscode-ssh-fingerprint-dark-theme.png)\n_Accepting the SSH fingerprint in VS Code_\n\nIt is common convention to be asked for a fingerprint when accessing a new SSH server. When the fingerprint is accepted, a reference to the server is stored in your local `known_hosts` file, which suppresses subsequent SSH connection prompts for that server.\n\nYou should only be presented with a request to trust the Gitpod workspace when using the legacy Local Companion approach of connecting to VS Code Desktop.\n\nBy swapping to the SSH Gateway approach of accessing VS Code Desktop, your known hosts file will be updated automatically. See [connecting to VS Code Desktop](/docs/references/ides-and-editors/vscode#connecting-to-vs-code-desktop-ssh) for more.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode","loc":{"lines":{"from":168,"to":178}}}}],["2158",{"pageContent":"Workspace Trust\n\n![The VS Code Workspace Trust popup](/images/editors/trust-authors-workspace-light-theme.png)\n![The VS Code Workspace Trust popup](/images/editors/trust-authors-workspace-dark-theme.png)\n_The VS Code Workspace Trust popup_\n\n[Workspace Trust](https://code.visualstudio.com/docs/editor/workspace-trust#_trusting-a-workspace) is a feature within VS Code implemented to help prevent automatic code execution by disabling or limiting the operation of several VS Code features: tasks, debugging, workspace settings, and extensions.\n\nWhen opening a Gitpod workspace with VS Code Desktop for the first time you will be prompted by a trust modal (given that you have not disabled the workspace trust setting in VS Code).\n\nSelecting \"**Yes, I trust the authors**\" will open the workspace and store a reference to the workspace host and directory. Opening the same workspace will not show the prompt again. However, due to a hostname change, new workspaces require trust to be accepted on first open.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode","loc":{"lines":{"from":180,"to":190}}}}],["2159",{"pageContent":"Choosing \"**No, I do not trust the authors**\" will enter you into the VS Code Restricted Mode. You can edit code in your workspace, but some features will be restricted. You can disable the VS Code Restricted Mode after the initial prompt.\n\nIf required, you can disable the workspace trust feature, however this is not recommended. Select \"**Manage Workspace Trust**\" from the Manage gear menu to view and modify your VS Code Workspace Trust settings.\n\n![Updating Workspace Trust settings](/images/editors/manage-workspace-trust-dark-theme.png)\n![Updating Workspace Trust settings](/images/editors/manage-workspace-trust-light-theme.png)\n_Updating Workspace Trust settings_\n\nSee [Workspace Trust](https://code.visualstudio.com/docs/editor/workspace-trust) in the VS Code official documentation for more.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode","loc":{"lines":{"from":192,"to":200}}}}],["2160",{"pageContent":"FAQs","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode","loc":{"lines":{"from":202,"to":202}}}}],["2161",{"pageContent":"When opening VS Code Desktop, the owner token wasn't copied to my clipboard, where can I find it?\n\nWhen opening VS Code Desktop, if you are being prompted for the owner token password, but cannot copy it to clipboard, you can find the password on the gitpod [workspaces page](https://gitpod.io/workspaces) under \"connect via SSH\".\n\n![The password prompt in VS Code Desktop for the owner token](/images/editors/enter-password-for-ssh-connection-dark-theme.png)\n![The password prompt in VS Code Desktop for the owner token](/images/editors/enter-password-for-ssh-connection-light-theme.png)\n_The password prompt in VS Code Desktop for the owner token_\n\n![Accessing the owner token string manually from the Gitpod dashboard](/images/editors/connect-via-ssh-dashboard-dark-theme.png)\n![Accessing the owner token string manually from the Gitpod dashboard](/images/editors/connect-via-ssh-dashboard-light-theme.png)\n_Accessing the owner token string manually from the Gitpod dashboard_","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode","loc":{"lines":{"from":204,"to":214}}}}],["2162",{"pageContent":"> **Note:** Pattern of the owner token is: `user#password@host`","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode","loc":{"lines":{"from":216,"to":216}}}}],["2163",{"pageContent":"How do I know whether I'm connecting to VS Code Desktop via Local Companion or SSH Gateway?\n\nIf you're unsure whether you're connecting via the local companion, or SSH Gateway approach, when connected to your Gitpod workspace, VS Code Desktop will show the connection host in the bottom left.\n\n- **SSH Gateway** - `SSH: workspaceid.ssh.*.gitpod.io`\n- **Local Companion**: `workspaceid` (no domain)\n\n![The SSH host information shown in the bottom left of VS Code Desktop](/images/editors/show-ssh-connection-vscode-light-theme.png)\n![The SSH host information shown in the bottom left of VS Code Desktop](/images/editors/show-ssh-connection-vscode-dark-theme.png)\n_The SSH host information shown in the bottom left of VS Code Desktop_","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode","loc":{"lines":{"from":218,"to":227}}}}],["2164",{"pageContent":"I'm being asked to choose the `platform of the remote host`. What should I choose?\n\nWhen connecting, sometimes VS Code Desktop fails to automatically detect the host OS of a Gitpod workspace, asking the following: `Select the platform of the remote host \"{id}\"`.\n\nNo matter what the OS is on your computer, you should always choose `Linux` as the remote host platform, since this is the operating system all Gitpod workspaces run on.\n\nIf you choose another option, you may encounter an error like this:\n\n```text\nResolver error: Error: Got bad result from install script\n```","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode","loc":{"lines":{"from":229,"to":239}}}}],["2165",{"pageContent":"I'm being prompted for a password/passphrase but VS Code Desktop cannot authenticate?\n\nThe owner token prompt and passphrase prompt in VS Code Desktop can look similar, however require different inputs. If you're seeing a failure to connect it could be you are using the incorrect authentication method, e.g. pasting an owner token for a passphrase, or vice versa.\n\n1. **Owner token** - If the password prompt in VS Code Desktop asks `Enter password for workspace@\\*.gitpod.io`, this prompt is for the owner token of the workspace, not the passphrase associated with your SSH key.\n\n![The password prompt in VS Code Desktop for the owner token](/images/editors/enter-password-for-ssh-connection-dark-theme.png)\n![The password prompt in VS Code Desktop for the owner token](/images/editors/enter-password-for-ssh-connection-light-theme.png)\n_The password prompt in VS Code Desktop for the owner token_","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode","loc":{"lines":{"from":241,"to":249}}}}],["2166",{"pageContent":"![Accessing the owner token string manually from the Gitpod dashboard](/images/editors/connect-via-ssh-dashboard-dark-theme.png)\n![Accessing the owner token string manually from the Gitpod dashboard](/images/editors/connect-via-ssh-dashboard-light-theme.png)\n_Accessing the owner token string manually from the Gitpod dashboard_\n\n1. **SSH key Passphrase** - If your SSH key has a \"passphrase\" associated with the SSH key (it is not required for SSH keys), you'll need to enter your passphrase. If your public key has no passphrase, you should not see the passphrase prompt.\n\n![Passphrase prompt from VS Code requiring the SSH key passphrase](/images/editors/enter-passphrase-for-ssh.png)\n_Passphrase prompt from VS Code requiring the SSH key passphrase_\n\n> **Note:** If you cannot remember your passphrase, consider creating a new SSH key and uploading the new key to Gitpod.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode","loc":{"lines":{"from":251,"to":260}}}}],["2167",{"pageContent":"How do I enable SSH agent forwarding for Desktop VSCode?\n\nGitpod extension delegates ssh connection to the [MS Remote - SSH](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-ssh) extension so agent forwarding should just work if you configure it in your `~/.ssh/config` file:\n\n```\nHost *.gitpod.io\n    ForwardAgent yes\n```","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode","loc":{"lines":{"from":262,"to":269}}}}],["2168",{"pageContent":"Upload Files\n\nYou can upload files to your workspace by dragging and dropping them into the editor. This method works with every IDE (e.g. Intellij, PyCharm, etc.)\n\n<figure>\n  <video onloadstart=\"this.playbackRate = 1.5;\" controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" src=\"/images/editors/file-upload-drag-and-drop.webm\" type=\"video/webm\"></video>\n  <figcaption>Upload Files from local to VS Code Desktop</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode","loc":{"lines":{"from":271,"to":278}}}}],["2169",{"pageContent":"Troubleshooting\n\nIf you are still having issues connecting to VS Code Desktop from Gitpod, try:\n\n1. Checking your Gitpod VS Code Desktop extension version is using the latest version.\n2. Attempt to directly connect via SSH using the `-v` to show verbose SSH logs. For example: `ssh -v workspacename@hostname`. You can find the `ssh` command in the workspace list on your Gitpod dashboard, see the [command-line](/docs/references/ides-and-editors/command-line) docs for more.\n3. If you're a self-hosted customer, ensure [SSH Gateway](/docs/configure/user-settings/ssh) is configured correctly.\n\nIf you are still experiencing issues using VS Code Desktop and Gitpod, please [contact support](/support) with any related [troubleshooting logs](/docs/help/troubleshooting#gitpod-logs-in-vs-code-web-and-desktop)","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode","loc":{"lines":{"from":280,"to":288}}}}],["2170",{"pageContent":"---\nsection: ides-and-editors\ntitle: WebStorm\n---\n\n<!--\n  This document is auto generated from generators/ide/jb-product.md\n  Edit this file instead and run `yarn generate:jb`to apply.\n-->\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n<!-- prettier-ignore -->\n# WebStorm\n\n> {title} is currently in [Beta](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/6576).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/webstorm","loc":{"lines":{"from":1,"to":18}}}}],["2171",{"pageContent":"Getting started","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/webstorm","loc":{"lines":{"from":20,"to":20}}}}],["2172",{"pageContent":"Getting started\n\n1. **Install [JetBrains Gateway](https://www.jetbrains.com/help/webstorm/remote-development-a.html#gateway)** - With the [JetBrains Gateway and Gitpod](/docs/integrations/jetbrains-gateway) plugin you can create and manage your latest 20 Gitpod workspaces.\n2. **Install the Gitpod plugin** - Open JetBrains Gateway and you'll see the Gitpod logo on the main page. Click \"install\" to install the [Gitpod plugin](https://plugins.jetbrains.com/plugin/18438-gitpod-gateway) for JetBrains Gateway.\n3. **Update your Gitpod preferences** - Select {title} on the [Gitpod preferences page](https://gitpod.io/preferences) which will set {title} as your default IDE for future workspace starts.\n4. **Start (or restart) your workspace** - Either start a workspace directly from within the [JetBrains Gateway](/docs/integrations/jetbrains-gateway) via the Gitpod plugin **OR** open a new workspace directly in Gitpod where on workspace start you will be prompted to open {title} for that workspace.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/webstorm","loc":{"lines":{"from":20,"to":25}}}}],["2173",{"pageContent":"<figure>\n  <video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" src=\"/images/editors/select-jetbrains-ide.webm\" type=\"video/webm\"></video>\n  <figcaption>Updating Gitpod IDE preferences to {title}</figcaption>\n</figure>\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Opening a JetBrains IDE from Gitpod\" src=\"/images/editors/opening-the-thin-jetbrains-client.webm\" type=\"video/webm\"></video>\n    <figcaption>Opening a JetBrains IDE from Gitpod</figcaption>\n</figure>\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Updating the Gitpod plugin in JetBrains Gateway\" src=\"/images/editors/update-jetbrains-gateway-settings.webm\" type=\"video/webm\"></video>\n    <figcaption>Updating the Gitpod plugin in JetBrains Gateway</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/webstorm","loc":{"lines":{"from":27,"to":40}}}}],["2174",{"pageContent":"<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Opening a JetBrains IDE from Gateway\" src=\"/images/editors/open-from-jetbrains-gateway.webm\" type=\"video/webm\"></video>\n    <figcaption>Opening a JetBrains IDE from Gateway</figcaption>\n</figure>\n\n**Important:** You must restart any started workspaces for your IDE preferences to take effect.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/webstorm","loc":{"lines":{"from":42,"to":47}}}}],["2175",{"pageContent":"Install Plugins\n\n> This section relates to plugin management when using JetBrains IDEs in a remote development context. For information on regular plugin management, refer to <a href=\"https://www.jetbrains.com/help/webstorm/managing-plugins.html\" target=\"_blank\">{title} docs</a>.\n\nUnlike with regular development, JetBrains [Remote development](https://www.jetbrains.com/help/webstorm/remote-development-overview.html#defs) with {title} allows users to install plugins in different locations:","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/webstorm","loc":{"lines":{"from":49,"to":53}}}}],["2176",{"pageContent":"- [**{title} backend plugins**](#install-on-title-backend) - The JetBrains {title} backend runs within the remote Gitpod workspace. Backend plugins contribute functionality for IDE experiences relating to the filesystem, tools or languages and frameworks. When installed, **a backend plugin only applies to the currently running Gitpod workspace** and is not associated with a user. However, a plugin can be [preconfigured for all users of a repository](#preconfigure-for-repository) so that the plugin is enabled with every workspace start. It is not currently possible to install a backend plugin that applies to all workspaces of a Gitpod user or organization.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/webstorm","loc":{"lines":{"from":55,"to":55}}}}],["2177",{"pageContent":"- [**JetBrains Client plugins**](#install-on-jetbrains-client) - The JetBrains client runs on the users local machine and can be thought of as the user interface to the remote {title} backend. Client plugins are different to backend plugins as they contribute to the user interface aspect of the IDE experience (e.g. keyboard shortcuts and themes). Once installed, **a client plugin is enabled for all Gitpod workspaces the user opens** (if the workspace is running the exact same version of the {title} backend where the plugin was initially installed).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/webstorm","loc":{"lines":{"from":56,"to":56}}}}],["2178",{"pageContent":"- [**JetBrains Gateway plugins**](/docs/integrations/jetbrains-gateway#getting-started) - The JetBrains Gateway is an application downloaded onto a users local machine which allows users to start JetBrains Clients that are compatible with the {title} backend, running in a Gitpod workspace. JetBrains Gateway plugins are installed directly in JetBrains Gateway and contribute to remote development connection experiences (e.g. the [Gitpod JetBrains Gateway](https://plugins.jetbrains.com/plugin/18438-gitpod-gateway) plugin).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/webstorm","loc":{"lines":{"from":57,"to":57}}}}],["2179",{"pageContent":"Install on JetBrains Client\n\nThe JetBrains client runs on the users local machine and can be thought of as the user interface to the remote {title} backend. Client plugins contribute to the user interface aspect of the IDE experience (e.g. keyboard shortcuts and themes).\n\nOnce installed, **a client plugin is enabled for all Gitpod workspaces the user opens** (if the workspace is running the exact same version of the {title} backend where the plugin was initially installed).\n\nTo install a plugin on **JetBrains Client** follow these steps:\n\n- In **JetBrains Client** open the IDE settings and select **Plugins**.\n- Find the plugin in the **Marketplace** and click **Install**.\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Install a plugin on JetBrains Client\" src=\"/images/editors/install-local-jb-plugin.png\">\n    <figcaption>Install a plugin on JetBrains Client</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/webstorm","loc":{"lines":{"from":59,"to":73}}}}],["2180",{"pageContent":"Install on {title} backend\n\nThe JetBrains {title} backend runs within the remote Gitpod workspace. Backend plugins contribute functionality requiring access to IDE experiences such as the remote filesystem (e.g. contributing support of languages and frameworks).\n\nWhen installed, **a backend plugin only applies to the currently running Gitpod workspace** and is not associated with a user. However, a plugin can be [preconfigured for all users of a repository](#preconfigure-for-repository) so that the plugin is enabled with every workspace start.\n\nIt is not currently possible to install a backend plugin that applies to all workspaces of a Gitpod user or organization.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/webstorm","loc":{"lines":{"from":75,"to":81}}}}],["2181",{"pageContent":"Install for your current workspace\n\nYou can install a plugin only for **your current workspace** following these steps:\n\n- In **JetBrains Client** open the IDE settings and select **Plugins On Host**.\n- Find the plugin in the **Marketplace** and click **Install**.\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Install a plugin on {title} backend\" src=\"/images/editors/install-remote-jb-plugin.png\">\n    <figcaption>Install a plugin on {title} backend</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/webstorm","loc":{"lines":{"from":83,"to":93}}}}],["2182",{"pageContent":"Preconfigure for repository\n\n> JetBrains plugin support is currently in [Beta](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/6576).\n\nYou can share a plugin on **{title} backend** with everybody working on the repository by adding it to [.gitpod.yml](/docs/references/gitpod-yml) and pushing to your Git repository.\nEach workspace is preconfigured with plugins from the `gitpod.yml` configuration file. For example:\n\n```yaml\njetbrains:\n  webstorm:\n    plugins:\n      - zielu.gittoolbox\n      - izhangzhihao.rainbow.brackets\n```\n\nYou can find the **pluginId** on the [JetBrains Marketplace](https://plugins.jetbrains.com) page:\n\n- Find a page of the required plugin.\n- Select the **Versions** tab.\n- Click any version to copy the **pluginId** (short name such as `org.rust.lang`) of the plugin you want to install.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/webstorm","loc":{"lines":{"from":95,"to":114}}}}],["2183",{"pageContent":"Install for your user\n\nIt is not yet possible to install plugins on **{title} backend** for your user to share across all your Gitpod workspaces.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/webstorm","loc":{"lines":{"from":116,"to":118}}}}],["2184",{"pageContent":"Configure JVM options\n\n> Configuration of JVM options is currently in [Alpha](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/8704).\n\nYou can adjust JVM options for {title} backend, especially if you want to increase the `-Xmx` memory size. For example:\n\n```yaml\njetbrains:\n  webstorm:\n    vmoptions: \"-Xmx4g\"\n```\n\nFor more detailed information on JVM options, refer to [Common JVM Options](https://www.jetbrains.com/help/webstorm/tuning-the-ide.html#common-jvm-options) from JetBrains documentation.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/webstorm","loc":{"lines":{"from":120,"to":132}}}}],["2185",{"pageContent":"Configure IDE settings\n\n> **Feedback needed:** The JetBrains Gitpod integration is currently beta. Gitpod [continues to collaborate with JetBrains](https://www.gitpod.io/blog/gitpod-jetbrains). The below shows how you can configure global settings with JetBrains. To leave feedback on the approach, please see this GitHub issue: [#6576](https://github.com/gitpod-io/gitpod/issues/6576). Also note that JetBrains is working on [comprehensive settings sync functionality](https://youtrack.jetbrains.com/issue/RDCT-1/Settings-synchronization).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/webstorm","loc":{"lines":{"from":134,"to":136}}}}],["2186",{"pageContent":"When running {title} locally, the JetBrains IDE applies [global settings](https://www.jetbrains.com/help/webstorm/configuring-project-and-ide-settings.html) to all projects on your machine. However when running in a remote context using [JetBrains Gateway](/docs/integrations/jetbrains-gateway), it's important to note that some IDE settings are configured on the [JetBrains Client](#on-jetbrains-client) and others in the [{title} backend](#on-title-backend) running in your Gitpod [Workspace](/docs/configure/workspaces). See below instructions for more.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/webstorm","loc":{"lines":{"from":138,"to":138}}}}],["2187",{"pageContent":"On JetBrains Client\n\nIDE Settings that are configured on the JetBrains Client are stored on your local machine and don't have `On Host` label in the IDE settings. These IDE settings are reused if the workspace is running the exact same version of the {title} backend where the settings were initially configured.\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Configure IDE settings on JetBrains client\" src=\"/images/editors/jb-client-configure-settings-client.webp\">\n    <figcaption>JetBrains client settings don't have <code>On Host</code> label.</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/webstorm","loc":{"lines":{"from":140,"to":147}}}}],["2188",{"pageContent":"On {title} backend\n\nSettings configured on {title} backend are stored in a Gitpod workspace and have `On Host` label in the IDE settings.\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Configure IDE settings on JetBrains client\" src=\"/images/editors/jb-backend-configure-settings.webp\">\n    <figcaption>{title} backend settings have `On Host` label.</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/webstorm","loc":{"lines":{"from":149,"to":156}}}}],["2189",{"pageContent":"Configure IDE settings per project\n\nSome IDE settings cannot be configured via [environment variables](/docs/configure/projects/environment-variables#environment-variables) or through setting [vm options](#configure-jvm-options). These settings can only be set via the UI of JetBrains client, and must be manually copied to be syned between workspaces. The below steps detail how to configure your IDE settings for all the users of a given Gitpod project:\n\n**Step 1: Manually use JetBrains UI to configure settings** - Set your IDE settings as you normally would, using the JetBrains UI.\n\n**Step 2: Find generated IDE settings** - You will need to manually find any global settings generated by JetBrains backend within the following path: `/workspace/.config/JetBrains<-latest>/RemoteDev-WS/<your-project-name>/options`","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/webstorm","loc":{"lines":{"from":158,"to":164}}}}],["2190",{"pageContent":"**Step 3:** Move any relevant settings manually to a persistent location within your Gitpod project. Either via a [Workspace Image](/docs/configure/workspaces/workspace-image), or persisted in the version control of your project, for example by committing settings data to GitHub.\n\n**Include relevant IDE settings in your Workspace Image**\n\n- `/home/gitpod/.gitpod/jetbrains/options` - This location applies settings to all JetBrains products (IntelliJ IDEA, GoLang, etc).\n- `/home/gitpod/.gitpod/jetbrains/webstorm/options` - This location will apply settings only to the given IDE, e.g. {title}.\n\n**Commit relevant IDE settings to source control**\n\n- `/workspace/<your-project-name>/.gitpod/jetbrains/options` - This location applies settings to all JetBrains products (IntelliJ IDEA, GoLang, etc).\n- `/workspace/<your-project-name>/.gitpod/jetbrains/webstorm/options` - This location will apply settings only to the given IDE, e.g. {title}.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/webstorm","loc":{"lines":{"from":166,"to":176}}}}],["2191",{"pageContent":"For any further changes to your IDE settings, you will need to follow the above steps again.\n\n> **Note:** When locating and applying IDE settings, Gitpod will read the locations specified above in priority order. The locations specified first are overriden by the locations specified later.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/webstorm","loc":{"lines":{"from":178,"to":180}}}}],["2192",{"pageContent":"Configure IDE settings per user\n\nTo configure IDE settings for your user only, and not all those using a project.\n\nFollow the instructions for [configuring IDE settings per project](#configure-ide-settings-per-project), but instead use [.dotfiles](/docs/configure/user-settings/dotfiles#dotfiles) rather than a workspace image or source control to store your IDE settings.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/webstorm","loc":{"lines":{"from":182,"to":186}}}}],["2193",{"pageContent":"Indexing using Prebuilds\n\n> JetBrains Prebuilds is currently in [Alpha](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/6576).\n\nWhen you open the project {title} starts indexing to load modules and\nenable the core functionality like code completion and navigation.\nDepending on the size of your project indexing speed can vary significantly.\n\nYou can speed up the indexing of a project by applying these [general recommendations](https://www.jetbrains.com/help/webstorm/indexing.html).\nGitpod prebuilds allow you to improve it further by indexing before you start a new workspace.\n\nTo leverage it:\n\n- configure prebuilds for your repository, refer to [Prebuilds](/docs/configure/projects/prebuilds);\n- enable indexing for {title} in prebuilds by editing [.gitpod.yml](/docs/references/gitpod-yml) in your repository:\n\n```yaml\njetbrains:\n  webstorm:\n    prebuilds:\n      version: stable","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/webstorm","loc":{"lines":{"from":188,"to":208}}}}],["2194",{"pageContent":"- push changes to your Git repository to apply.\n\nThe `version` property allows you to control whether to index for `stable`, `latest`, or `both` versions of {title} compatible with Gitpod.\nUsers can switch between `stable` and `latest` versions of {title} on the [user preferences](https://gitpod.io/preferences) page.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/webstorm","loc":{"lines":{"from":211,"to":214}}}}],["2195",{"pageContent":"Workspace performance\n\nWhen using a Gitpod workspace you might experience performance issues caused by:\n\n- An application using more resources than expected\n- Resource consumption in adjacent containers running on the workspace node.\n\nIn your JetBrains IDE within the JetBrains Gateway [Backend Control Center](https://www.jetbrains.com/help/idea/work-inside-remote-project.html#control_center) you can find two metrics relating to your running workspace: `Workspace CPU` and `Workspace Memory`.\n\nThe remaining metrics you can find in the Backend Control Center regarding the node that your workspace is running on, and not the workspace itself.\n\n> **Note:** Performance information shown in the Backend Control Center is the same as the information that is shown when running the command [`gp top`](/docs/references/gitpod-cli#top) in your workspace, see the [Command Line Interface](/docs/references/gitpod-cli) documentation for more.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/webstorm","loc":{"lines":{"from":216,"to":227}}}}],["2196",{"pageContent":"![jetbrains performance](/images/jetbrains-gateway/jetbrains-performance-center.png)","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/webstorm","loc":{"lines":{"from":229,"to":229}}}}],["2197",{"pageContent":"FAQs\n\n- For the questions about supported IDEs and Editors in Gitpod, refer to [FAQs](/docs/references/ides-and-editors/faqs).\n\n- For the general questions about JetBrains Remote Development, refer to refer to the general IDE <a href=\"https://www.jetbrains.com/help/webstorm/faq-about-remote-development.html\" target=\"_blank\">{title} FAQ</a>.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/webstorm","loc":{"lines":{"from":231,"to":235}}}}],["2198",{"pageContent":"Are there any JetBrains optimizations I can make if my workspace is slow?\n\nDebugging performance can be challenging, as performance issues can depend on many factors such as how Gitpod is configured (if you're operating Gitpod on Self-Hosted). However, there are some ways you can gather performance information and optimise your JetBrains IDE setup with Gitpod:\n\n1. Firstly, to gather information on performance, you can [view workspace performance metrics from within the IDE](/docs/references/ides-and-editors/intellij#workspace-performance) in the Backend Control Center, or by using [`gp top`](/docs/references/gitpod-cli#top).\n2. You may also want to try adjusting the Max Heap Size allocated to the JetBrains Backend in the Settings tab of the Backend Control Center. If updating this setting helps your performance, you can set the `vmoptions` value for your JetBrains IDE in your `.gitpod.yml`.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/webstorm","loc":{"lines":{"from":237,"to":242}}}}],["2199",{"pageContent":"> **Note:** If the performance metrics show that your workspace is hitting its resource limits, and you are using Gitpod Self-Hosted, it might make sense to consider changing the resource configuration for your workspaces. This can be done via a [config-patch](/docs/configure/self-hosted/latest/config-patches). Configuring workspace resources is not yet available on SaaS.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/webstorm","loc":{"lines":{"from":244,"to":244}}}}],["2200",{"pageContent":"Troubleshooting\n\n- [What should I do if JetBrains Gateway and Gitpod aren’t working?](/docs/help/troubleshooting#what-should-i-do-if-jetbrains-gateway-and-gitpod-arent-working)\n- [Gitpod logs in JetBrains Client](/docs/help/troubleshooting#gitpod-logs-in-jetbrains-client)\n- [Gitpod logs in JetBrains Gateway](/docs/help/troubleshooting#gitpod-logs-in-jetbrains-gateway)","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/webstorm","loc":{"lines":{"from":246,"to":250}}}}],["2201",{"pageContent":"---\nsection: security\ntitle: Security FAQ\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Security FAQ\n\n## What type of data does Gitpod collect?\n\nGitpod processes first name, last name, and email in order to provide the services, in addition to the user account from your company’s code repository. For more information, please contact your Account Manager for the Gitpod DPA.\n\n## How does Gitpod integrate with code repositories?\n\nAuthentication occurs via OAuth tokens which can be revoked and/or re-authorized at any time.\n\n## How is data secured within the Gitpod platform?\n\nAll Workspace content is encrypted at rest with (AES256) and in-transit (TLS 1.2 or above).\n\n## Are Workspaces isolated?\n\nWorkspaces deploy as Kubernetes pods. Each Workspace operates within its own set of namespaces, so that they cannot interfere with each other.","metadata":{"source":"https://www.gitpod.io/docs/references/security/faq","loc":{"lines":{"from":1,"to":26}}}}],["2202",{"pageContent":"Are Workspaces isolated?\n\nWorkspaces deploy as Kubernetes pods. Each Workspace operates within its own set of namespaces, so that they cannot interfere with each other.\n\n## How is Gitpod’s Infrastructure deployed?\n\nGitpod is deployed on GCP and AWS. Their certifications are available [here](https://cloud.google.com/security/compliance) and [here](https://aws.amazon.com/compliance/).\n\n## What certifications does Gitpod have?\n\nWe are SOC 2 Type 2 compliant for two years running and conduct pentesting at least annually. Reports are available upon request and under MNDA; please contact your Account Manager.\n\n## How does Gitpod deploy?\n\nGitpod can be hosted end-to-end by us, or deployed by you in your own AWS account. For more information, please see this [link](https://www.youtube.com/watch?v=iYLCHQgj0fE) for deployment architecture.","metadata":{"source":"https://www.gitpod.io/docs/references/security/faq","loc":{"lines":{"from":26,"to":40}}}}],["2203",{"pageContent":"---\nsection: self-hosted/helm-deprecated\ntitle: Gitpod Self-Hosted\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Gitpod Self-Hosted\n\n> ⚠️ **Deprecated Content**\n>\n> The content of this page assumes you are using Helm, which is now deprecated. Please use the [Installer](./latest) instead.\n\nGitpod, just as you know it from [gitpod.io](https://gitpod.io), can be deployed and operated on your own infrastructure. It supports different cloud providers, self-managed Kubernetes clusters, corporate firewalls, and even off-grid / air-gapped networks.\n\n- [Requirements for Gitpod Self-Hosted](./helm-deprecated/requirements)\n- [Installing Gitpod Self-Hosted](./helm-deprecated/installation)\n- [Configuring Gitpod Self-Hosted](./helm-deprecated/configuration)\n- [Troubleshooting Gitpod Self-Hosted](./helm-deprecated/troubleshooting)\n- [Updating Gitpod Self-Hosted](./helm-deprecated/updating)","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated","loc":{"lines":{"from":1,"to":22}}}}],["2204",{"pageContent":"---\nsection: self-hosted/latest\nsubsection: background\ntitle: Background\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Background\n\n> ⚠️ **Self-hosted as a product is no longer supported**\n>\n> The last official update of this product is the [November 2022 self-hosted release](https://www.gitpod.io/changelog/november-self-hosted-release). We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our [free community license](https://www.gitpod.io/community-license). However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n> Read [our blog on Gitpod Dedicated](/blog/introducing-gitpod-dedicated) to learn why we made the decision to discontinue self-hosted.\n\nThis section gives you relevant background information about Gitpod Self-Hosted:","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/background","loc":{"lines":{"from":1,"to":18}}}}],["2205",{"pageContent":"This section gives you relevant background information about Gitpod Self-Hosted:\n\n- [Disaster Recovery](disaster-recovery) - Best practices around disaster recovery","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/background","loc":{"lines":{"from":18,"to":20}}}}],["2206",{"pageContent":"---\nsection: self-hosted/latest\nsubsection: operational-guides\ntitle: How to backup and restore Gitpod\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# How to Backup and Restore Gitpod\n\n> ⚠️ **Self-hosted as a product is no longer supported**\n>\n> The last official update of this product is the [November 2022 self-hosted release](https://www.gitpod.io/changelog/november-self-hosted-release). We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our [free community license](https://www.gitpod.io/community-license). However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n> Read [our blog on Gitpod Dedicated](/blog/introducing-gitpod-dedicated) to learn why we made the decision to discontinue self-hosted.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/backup-restore","loc":{"lines":{"from":1,"to":16}}}}],["2207",{"pageContent":"For [business continuity](https://en.wikipedia.org/wiki/Business_continuity_planning) purposes, it is important to think about how you might restore your ability to use Gitpod, and thus develop software in the event of a catastrophic failure of Gitpod or the underlying infrastructure it runs on. This guide assumes that you will use the backup and restore strategy for disaster recovery and will guide you towards what needs to be backed up and how to restore using said backup. Please see our background reading on [disaster recovery](./disaster-recovery) for more information.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/backup-restore","loc":{"lines":{"from":18,"to":18}}}}],["2208",{"pageContent":"> **Important:** When using Gitpod in a production setting, we recommend you base your installation on the [single cluster reference architecture](./reference-architecture/single-cluster-ref-arch). Using in-cluster dependencies is not recommended because there is no means to produce backups, and the database/storages systems are within failure domain of the cluster. If possible consider using Gitpod [SaaS](https://www.gitpod.io/pricing).\n\n> **Note:** We recommend to regularly trial run a recovery using this method to ensure that it works in practice and to allow yourself the chance to spot any unforeseen issues.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/backup-restore","loc":{"lines":{"from":20,"to":22}}}}],["2209",{"pageContent":"What to back up\n\nIt is critical to consider what needs to be backed up and ensure you take the necessary steps to secure each of the listed elements. What needs to be backed up is closely aligned with [Gitpod’s architecture](./reference-architecture/single-cluster-ref-arch#overview) and how it runs.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/backup-restore","loc":{"lines":{"from":24,"to":26}}}}],["2210",{"pageContent":"Database\n\nThe database is a central component in Gitpod where all metadata about users and workspaces, as well as settings of the Gitpod instance (such as auth providers) are stored. This makes the database a critical component. In case of a database outage, you are not able to log in, use the Gitpod dashboard, or start workspaces. We recommend using a cloud provider native relational database service that supports MySQL - see [required components](./requirements). This means that you can rely on the best practices of each service for disaster recovery. For example:","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/backup-restore","loc":{"lines":{"from":28,"to":30}}}}],["2211",{"pageContent":"- **AWS Relational Database Service**: You can rely on RDS’s [backup and restore mechanisms](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_CommonTasks.BackupRestore.html) and set it up to run in [multiple availability zones](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/create-multi-az-db-cluster.html) to allow for higher availability. You can also consider other [disaster best practices](https://medium.com/tensult/amazon-rds-disaster-recovery-8a40dd8350ea).\n- **Google Cloud SQL:** You can rely on Cloud SQLs [backup and restore features](https://cloud.google.com/sql/docs/mysql/backup-recovery/backups) and run the instance in a [high availability configuration](https://cloud.google.com/sql/docs/mysql/high-availability) to decrease the chance of failure. You can also refer to the general [Google Cloud disaster recovery best practices](https://cloud.google.com/architecture/dr-scenarios-planning-guide).","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/backup-restore","loc":{"lines":{"from":32,"to":33}}}}],["2212",{"pageContent":"Object Storage\n\nGitpod uses **object storage** to store blob data. This includes workspace backups created when a workspace stops and are used to restore the state upon restart. As such, to secure the work of your users, it is critical to think about backing up this data and/or relying on the best practices for disaster recovery of the object storage service being used. For example:\n\n- **AWS S3:** You can consider using [cross-region replication](https://docs.aws.amazon.com/AmazonS3/latest/userguide/replication.html) to increase reliability further - although S3 already stores your data across multiple geographically distant _Availability Zones_ by default.\n- **Google Cloud Storage:** Consider using the [Multi-Regional Storage option](https://cloud.google.com/storage/docs/storage-classes) for additional availability.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/backup-restore","loc":{"lines":{"from":35,"to":40}}}}],["2213",{"pageContent":"OCI Image Registry\n\nGitpod uses an image registry to cache images and store images it builds on behalf of users. _Note: For non-airgapped environments, this is **not** the registry that contains the images of Gitpod’s services._ As such, losing this data means that workspace starts may take longer because images need to be re-built. Consider implementing best practices for securing the registry you are using.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/backup-restore","loc":{"lines":{"from":42,"to":44}}}}],["2214",{"pageContent":"Application Config\n\n> **Important:** KOTS Snapshots will **NOT** save any data from your Gitpod database, registry or object storage. It will also not backup any data outside of your `gitpod` namespace. It will backup:\n>\n> - the KOTS dashboard\n> - the KOTS configuration\n> - the version of Gitpod installed\n> - the TLS certificate generated by cert-manager (if enabled)\n\nAlthough you could simply re-install Gitpod using the regular [installation path](./installing-gitpod), this can take some time and you would need to re-configure it to the state you had last had it in. To minimize your recovery time, you can persist the application configuration (ideally regularly).","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/backup-restore","loc":{"lines":{"from":46,"to":55}}}}],["2215",{"pageContent":"Configuring Velero\n\n[Velero](https://velero.io/) is an open source tool to safely backup and restore, perform disaster recovery, and migrate Kubernetes cluster resources and persistent volumes. It is used by KOTS to connect to your backup location. It supports many [data sources](https://docs.replicated.com/enterprise/snapshots-storage-destinations), including AWS, Azure and GCP storage solutions.\n\nPlease follow the installation instructions as per the [Velero documentation](https://velero.io/docs/latest/basic-install). KOTS requires [Restic integration](https://velero.io/docs/v1.9/restic) to function correctly, which can be added by appending the `--use-restic` flag to the `velero install` command.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/backup-restore","loc":{"lines":{"from":57,"to":61}}}}],["2216",{"pageContent":"Triggering Your First Backup\n\n> For full documentation on the KOTS backup solution, please see their [documentation](https://docs.replicated.com/enterprise/snapshots-understanding).\n\nTo create a new backup via the KOTS CLI or in the Snapshots section of your KOTS dashboard, you can do this by running the following command:\n\n```bash\nkubectl kots backup --namespace gitpod\n```\n\nWhen that has finished, you will be able to list your backups:\n\n```bash\nkubectl kots backup ls\n```\n\nAnd it will display a list that looks similar to this:\n\n```bash\nNAME              STATUS       ERRORS    WARNINGS    STARTED                          COMPLETED                        EXPIRES\ninstance-ab1cd    Completed    0         0           2022-08-11 13:36:38 +0100 BST    2022-08-11 13:36:54 +0100 BST    29d\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/backup-restore","loc":{"lines":{"from":63,"to":84}}}}],["2217",{"pageContent":"Cluster Configuration\n\nTo reduce the time it takes you to re-create a cluster, you can move to an infrastructure as code flow, e.g. by codifying the infrastructure you need using Terraform.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/backup-restore","loc":{"lines":{"from":86,"to":88}}}}],["2218",{"pageContent":"How to restore\n\nThe following explains how you might restore Gitpod after its underlying cluster fails.\n\n1. Recreate your infrastructure. Ideally, you do this using something like a Terraform script.\n2. Configure Velero using the instructions [above](#configuring-velero) - it is recommended that you install the same version that you used previously.\n3. List your available backups using:\n\n```bash\nkubectl kots backup ls\n```\n\n4. Restore the backup using:\n\n```bash\nkubectl kots restore --from-backup instance-ab1cd\n```\n\n5. Load the KOTS dashboard:\n\n```bash\nkubectl kots admin-console --namespace gitpod\n```\n\n6. Hit the \"Redeploy\" button.\n7. This should result in your Gitpod instance having the same state as before, thus allowing your users to pick up where they left off.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/backup-restore","loc":{"lines":{"from":90,"to":115}}}}],["2219",{"pageContent":"Security considerations\n\n### Application Config\n\nVelero should be configured so that is deployed to a different namespace to Gitpod. The Velero deployment will contain secrets which will allow access to your backup source of choice. Your Kubernetes cluster should be configured to limit access to these resources with use of a role-based access policy (RBAC).\n\nYou should always consult with the Velero documentation to ensure that you are following their best practice guidelines to ensure the integrity of your backup artifacts.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/backup-restore","loc":{"lines":{"from":117,"to":123}}}}],["2220",{"pageContent":"---\nsection: self-hosted/latest\nsubsection: reference\ntitle: Cluster Set-Up\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Cluster Requirements\n\n> ⚠️ **Self-hosted as a product is no longer supported**\n>\n> The last official update of this product is the [November 2022 self-hosted release](https://www.gitpod.io/changelog/november-self-hosted-release). We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our [free community license](https://www.gitpod.io/community-license). However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n> Read [our blog on Gitpod Dedicated](/blog/introducing-gitpod-dedicated) to learn why we made the decision to discontinue self-hosted.\n\nGitpod is a Kubernetes application running with certain expectations on the characteristics of the cluster it is running on.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/cluster-requirements","loc":{"lines":{"from":1,"to":18}}}}],["2221",{"pageContent":"Gitpod is a Kubernetes application running with certain expectations on the characteristics of the cluster it is running on.\n\n![cluster requirements](../../static/images/docs/self-hosted/cluster-requirements.png)\n\n<!-- raw editable diagram can be found under static/images/docs/self-hosted/cluster-requirements.excalidraw -->","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/cluster-requirements","loc":{"lines":{"from":18,"to":22}}}}],["2222",{"pageContent":"Reference Architectures\n\nWe have created a set of [reference architectures](../latest/reference-architecture) for all the major cloud providers that fulfil the requirements below. These are intended as a starting point for you to create an environment to install Gitpod into. If you wish to use K3s, please refer to the [k3s guide](../latest/cluster-set-up/on-k3s).","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/cluster-requirements","loc":{"lines":{"from":24,"to":26}}}}],["2223",{"pageContent":"Supported Kubernetes Distributions\n\nGitpod requires Kubernetes as an orchestration technology in order to spin workspaces up and down--ideally in combination with cluster autoscaling to minimize cost. We strongly recommend deploying a dedicated Kubernetes cluster just for Gitpod Self-Hosted.\n\n> Kubernetes version `1.21` or above is required\n\nGitpod Self-Hosted runs well on:\n\n- Amazon Elastic Kubernetes Service\n- Google Kubernetes Engine\n- Microsoft Azure Kubernetes Service\n- K3s","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/cluster-requirements","loc":{"lines":{"from":28,"to":39}}}}],["2224",{"pageContent":"Incompatible Kubernetes Distributions\n\nThese platforms do not currently work with Gitpod Self-Hosted but we would like to support them in the future. Gitpod is an open-source project, maybe you could contribute the required changes to help get them working sooner?\n\n- [Red Hat® OpenShift®](https://github.com/gitpod-io/gitpod/issues/5409)\n- [Rancher Kubernetes Engine (RKE)](https://github.com/gitpod-io/gitpod/issues/5410)\n\nIf you are considering purchasing a commercial license for Gitpod Self-Hosted and need one of the above platforms then please [contact us](/contact/sales) to start discussions about making support for them happen sooner.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/cluster-requirements","loc":{"lines":{"from":41,"to":48}}}}],["2225",{"pageContent":"Node Affinity Labels Requirements\n\nYour Kubernetes cluster must have node(s) with the following labels applied to them:\n\n- `gitpod.io/workload_meta=true`\n- `gitpod.io/workload_ide=true`\n- `gitpod.io/workload_workspace_services=true`\n- `gitpod.io/workload_workspace_regular=true`\n- `gitpod.io/workload_workspace_headless=true`\n\nIt is recommended to have a minimum of two node pools, grouping the `meta` and `ide` nodes into one node pool and `workspace` related nodes into another. These two groups of workloads have different performance characteristics. Separating them into node pools after the fact is more difficult and incurs downtime.\n\n## Node and Container Requirements\n\nThese are the components expected on each node:\n\n- Either Ubuntu 18.04 with ≥ v5.4 kernel or Ubuntu 20.04 with ≥ v5.4 kernel\n- Calico for the networking overlay and network policy\n- Containerd ≥ 1.5\n- At least 4 vCPU and 16GB of RAM","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/cluster-requirements","loc":{"lines":{"from":50,"to":69}}}}],["2226",{"pageContent":"Kubernetes Privilege Requirements\n\nYour Kubernetes cluster must allow Gitpod to run privileged pods and manage PodSecurityPolicies, as Gitpod depends on these privileges to provide workspace isolation.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/cluster-requirements","loc":{"lines":{"from":71,"to":73}}}}],["2227",{"pageContent":"Load Balancer Requirements\n\nGitpod uses [`LoadBalancer` type services](https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer) to expose the Gitpod Dashboard, browser-based IDEs, and SSH connections used by desktop IDEs. Your Kubernetes cluster must be able to provision layer 4 or layer 7 load balancers for `LoadBalancer` type services that can route HTTP(S) connections to Gitpod services. If you intend to use desktop IDEs or SSH to workspaces then your cluster must also be able to provision layer 4 load balancers that can route SSH connection to Gitpod services.\n\nAll supported Kubernetes distributions provide load balancers that meet Gitpod's needs. For more information see the Kubernetes distribution documentation below:","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/cluster-requirements","loc":{"lines":{"from":75,"to":79}}}}],["2228",{"pageContent":"All supported Kubernetes distributions provide load balancers that meet Gitpod's needs. For more information see the Kubernetes distribution documentation below:\n\n- [Google Kubernetes Engine](https://cloud.google.com/kubernetes-engine/docs/concepts/service-load-balancer)\n- Amazon Elastic Kubernetes Engine:\n  - Layer 4/7 (default): [Classic Load Balancer](https://aws.amazon.com/premiumsupport/knowledge-center/eks-kubernetes-services-cluster/)\n  - Layer 4 only: [Network Load Balancing](https://docs.aws.amazon.com/eks/latest/userguide/network-load-balancing.html)\n- [Microsoft Azure Kubernetes Service](https://docs.microsoft.com/en-us/azure/aks/concepts-network)\n- [K3s](https://rancher.com/docs/k3s/latest/en/networking/#service-load-balancer)","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/cluster-requirements","loc":{"lines":{"from":79,"to":86}}}}],["2229",{"pageContent":"---\nsection: self-hosted/latest\nsubsection: troubleshooting\ntitle: Config Patches\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Gitpod Configuration Patches\n\n> ⚠️ **Self-hosted as a product is no longer supported**\n>\n> The last official update of this product is the [November 2022 self-hosted release](https://www.gitpod.io/changelog/november-self-hosted-release). We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our [free community license](https://www.gitpod.io/community-license). However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n> Read [our blog on Gitpod Dedicated](/blog/introducing-gitpod-dedicated) to learn why we made the decision to discontinue self-hosted.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/config-patches","loc":{"lines":{"from":1,"to":16}}}}],["2230",{"pageContent":"Further customization of your installation is possible within the installation UI, where Gitpod can provide you with a config patch to tailor the installation to your specific needs. In the “Additional Options” section, click the “Enable additional options” checkbox, and upload the file in the “Gitpod config patch” field.\n\n![config patch](../../static/images/docs/self-hosted/config-patch.png)\n\nThe patch file is effectively a patch for the internally used [Gitpod Installer config file](https://github.com/gitpod-io/gitpod/blob/main/install/installer/example-config.yaml). It gives you access to all configuration options that Gitpod accepts - even those not present in the UI. All values that are set in the patch file will override the generated config file values.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/config-patches","loc":{"lines":{"from":18,"to":22}}}}],["2231",{"pageContent":"---\nsection: self-hosted/latest\nsubsection: operational-guides\ntitle: Configuring workspace resources and limits\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Configuring workspace resources\n\n> ⚠️ **Self-hosted as a product is no longer supported**\n>\n> The last official update of this product is the [November 2022 self-hosted release](https://www.gitpod.io/changelog/november-self-hosted-release). We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our [free community license](https://www.gitpod.io/community-license). However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n> Read [our blog on Gitpod Dedicated](/blog/introducing-gitpod-dedicated) to learn why we made the decision to discontinue self-hosted.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/configuring-workspace-resources","loc":{"lines":{"from":1,"to":16}}}}],["2232",{"pageContent":"Configuring workspace resources and limits is essential to balancing the following factors:\n\n- **Workspace performance:** The amount of compute available to each workspace\n- **Workspace startup times:** Having smaller workspaces on a node increases the chances of there being space available for another workspace, meaning that a new node does not need to be spun up. On the other extreme: one workspace per node means a new node needs to be spun up for every new workspace\n- **Your cost of compute:** The fewer resources your workspaces request, the more you can fit on the node - and the fewer nodes you have to pay for","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/configuring-workspace-resources","loc":{"lines":{"from":18,"to":22}}}}],["2233",{"pageContent":"How to configure workspace requests and limits\n\n> You should always be setting limits for your workspaces in order to avoid a process taking up the resources of an entire node, starving all other processes. We recommend sizing workspaces onto a node such that `4 cores` and `8 GiB of RAM` are left unused for Gitpod's services (mainly `ws-daemon`) and other processes (e.g. the kubelet).\n\nCurrently, workspace resources and limits can be set via a [config-patch](./config-patches).\n\nFor example, assuming a machine with 16 CPUs and 64 GB of memory, we recommend the following config-patch:\n\n```yaml\nworkspace:\n  resources:\n    requests:\n      cpu: \"4\"\n      memory: 16Gi\n    limits:\n      cpu: \"4\"\n      memory: 16Gi","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/configuring-workspace-resources","loc":{"lines":{"from":24,"to":40}}}}],["2234",{"pageContent":"With this configuration, 3 workspaces should fit onto the aforementioned 16 CPU / 64 GB memory node (with CPU cores being the limiting factor). A workspace would always have 4 CPUs and 16 GB of RAM available. These numbers are also used when scheduling workspaces onto pods - workspaces are only scheduled onto nodes that have at least these amounts of resources available.\n\n> This is intentionally on the conservative side due to potential resource conflicts concerning I/O bandwidth.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/configuring-workspace-resources","loc":{"lines":{"from":43,"to":45}}}}],["2235",{"pageContent":"---\nsection: self-hosted/latest\nsubsection: background\ntitle: Disaster Recovery\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Business Continuity and Disaster Recovery Considerations with Gitpod\n\n> ⚠️ **Self-hosted as a product is no longer supported**\n>\n> The last official update of this product is the [November 2022 self-hosted release](https://www.gitpod.io/changelog/november-self-hosted-release). We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our [free community license](https://www.gitpod.io/community-license). However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n> Read [our blog on Gitpod Dedicated](/blog/introducing-gitpod-dedicated) to learn why we made the decision to discontinue self-hosted.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/disaster-recovery","loc":{"lines":{"from":1,"to":16}}}}],["2236",{"pageContent":"> **Note:** There is a lot more to disaster recovery than we can cover here. This is just a high-level overview that speaks to how disaster recovery relates to Gitpod - it does not aim to be a complete guide to the topic.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/disaster-recovery","loc":{"lines":{"from":18,"to":18}}}}],["2237",{"pageContent":"Disaster Recovery Principles\n\nThinking about disaster recovery with Gitpod is essential for business continuity and compliance reasons given how critical Gitpod is within your business’ practices: it is not only used to write code for new features but also e.g. to fix a security vulnerability.\n\nWhen evaluating different disaster recovery strategies, it is important to keep in mind the business impact of different strategies. This impact is often defined by these interconnected metrics:","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/disaster-recovery","loc":{"lines":{"from":20,"to":24}}}}],["2238",{"pageContent":"When evaluating different disaster recovery strategies, it is important to keep in mind the business impact of different strategies. This impact is often defined by these interconnected metrics:\n\n- **Recovery Time Objective (RTO):** this is the amount of time it takes to recover from a catastrophic failure. Applying this to Gitpod, this would be the time between a major outage that renders Gitpod unusable and the point at which Gitpod is restored and developers can develop again.\n- **Recovery Point Objective (RPO):** This is the maximum amount of data loss (measured by time) during an outage that is acceptable to an organisation.\n- **Acceptable Cost:** Different disaster recovery strategies come with different cost profiles. You need to know the acceptable cost level for your business to help choose the right strategy.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/disaster-recovery","loc":{"lines":{"from":24,"to":28}}}}],["2239",{"pageContent":"The accepted value of each key metric will depend on your business’ risk appetite and acceptable cost levels. These metrics can be used to better understand and categorise the different disaster recovery options available with Gitpod.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/disaster-recovery","loc":{"lines":{"from":30,"to":30}}}}],["2240",{"pageContent":"Disaster Recovery Strategies\n\n> **Note:** Whichever disaster recovery strategy you chose, make sure that you practice it end-to-end regularly to ensure that you can execute it successfully if ever it does become necessary.\n\nPlease refer to our guide around [backing up and restoring Gitpod](backup-restore) to learn more about which data Gitpod produces and how it can be backed up.\n\n### Backup And Restore (Higher RTO)\n\nWith this strategy, you aim to replace a failed Gitpod instance or Kubernetes cluster by spinning up an entirely new cluster. You can find out more on how to do this in our [How to Backup and Restore Guide](backup-restore).\n\nThis strategy has the benefit of being cost-effective because you only operate a single cluster at a time. However, the time to spin up a new cluster and install Gitpod can be high increasing the time to recover. Thus, depending on your recovery time objective, it may be beneficial to evaluate the strategies mentioned below.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/disaster-recovery","loc":{"lines":{"from":32,"to":42}}}}],["2241",{"pageContent":"Pilot Light (Medium RTO)\n\nWith this strategy, you keep a secondary Kubernetes cluster running that is identical to the one used in production - but in a separate data center and scaled down to the minimum set of nodes to save cost. This means that you do not need to first spin up a cluster in case of disaster but can rather use the one already running to install Gitpod onto (using the same external dependencies and thus data as your production cluster) and then shift traffic to. This can significantly reduce your time to recovery but comes with the cost of running an additional cluster.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/disaster-recovery","loc":{"lines":{"from":44,"to":46}}}}],["2242",{"pageContent":"---\nsection: self-hosted/latest\ntitle: Self-Hosted\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n<script lang=\"ts\">\n  import OpenGraph from \"$lib/components/open-graph.svelte\";\n</script>\n\n<OpenGraph\ndata={{\n    description:\n      \"Install and run Gitpod with full control on public cloud providers or self-managed Kubernetes clusters. Enterprise-grade security within corporate firewalls and air-gapped networks. Requirements. Installation. Configuration. GKE. EKS. AKS. Open-source.\",\n    title: \"Gitpod Self-Hosted installation guide\",\n    keywords: \"installation\",\n  }}\n/>\n\n# Self-Hosted","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest","loc":{"lines":{"from":1,"to":22}}}}],["2243",{"pageContent":"# Self-Hosted\n\n> ⚠️ **Self-hosted as a product is no longer supported**\n>\n> The last official update of this product is the [November 2022 self-hosted release](https://www.gitpod.io/changelog/november-self-hosted-release). We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our [free community license](https://www.gitpod.io/community-license). However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n> Read [our blog on Gitpod Dedicated](/blog/introducing-gitpod-dedicated) to learn why we made the decision to discontinue self-hosted.\n\nGitpod can be deployed and operated on your own infrastructure. It supports different cloud providers, self-managed Kubernetes clusters, corporate firewalls, and even off-grid / air-gapped networks.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest","loc":{"lines":{"from":22,"to":29}}}}],["2244",{"pageContent":"Local Preview\n\nThe [Local Preview](/docs/configure/self-hosted/latest/local-preview) installation of Gitpod Self-Hosted is the easiest way to try out Gitpod locally in situations where you cannot use the [SaaS version](https://gitpod.io/workspaces/) and cannot easily spin up a Kubernetes cluster to use the Proof-of-Value [reference architecture](/docs/configure/self-hosted/latest/reference-architecture).\n\nIt is intended for preview purposes only - we strongly encourage the Kubernetes-based installation below for continuous usage.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest","loc":{"lines":{"from":31,"to":35}}}}],["2245",{"pageContent":"Prerequisites to Install Gitpod Self-Hosted\n\n> **Note:** Gitpod is not just a simple Kubernetes application like a web shop app. It is more of an infrastructure tool comparable to a build system that heavily makes use of Kubernetes internals to build and deploy images, control Kubernetes containers (the workspaces) and more. This is why it needs more permissions in Kubernetes than a simple web app.\n\n- **Kubernetes expertise** <br />\n  Gitpod is a Kubernetes application that makes heavy use of various Kubernetes features. It is highly recommended to have sufficient Kubernetes experience in order to install Gitpod. These docs expect that you are able to create and maintain a Kubernetes cluster that meets our [requirements](./latest/requirements) on your own.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest","loc":{"lines":{"from":37,"to":42}}}}],["2246",{"pageContent":"- **Compatible Kubernetes cluster** <br />\n  To install Gitpod you need to have a Kubernetes cluster up and running. There are a few [requirements](/docs/configure/self-hosted/latest/requirements) that must be met. Please see the [product compatibility matrix](/docs/references/compatibility?admin) supported Kubernetes distributions. To help you get started, there are several different situation-dependent [reference architectures](./latest/reference-architecture) for all major cloud providers that include both a detailed guide as well as terraform configuration.\n\n- **Cert-Manager** <br />\n  Gitpod expects a properly configured [cert-manager](https://cert-manager.io/) that runs in the cluster. It is used to issue internal certificates for the Gitpod installation and to create certificates for the Gitpod domain (unless you bring your own domain certificates).","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest","loc":{"lines":{"from":44,"to":48}}}}],["2247",{"pageContent":"- **DNS setup** <br />\n  For your Gitpod installation you need a properly configured domain. The domain itself and the wildcard subdomain `*.example.com`, `*.ws.example.com` (replace `example.com` with your Gitpod domain) need to point to the cluster ingress.\n\n- **Gitpod product license** <br />\n  To install Gitpod, you need a license that you can get [here](/community-license).","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest","loc":{"lines":{"from":50,"to":54}}}}],["2248",{"pageContent":"Installing Gitpod\n\nThe [installation guide](./latest/installing-gitpod) provides you with step-by-step instructions on how to install Gitpod on your infrastructure.\n\n## Troubleshooting\n\nRefer to the [troubleshooting section](./latest/troubleshooting) for help with your Gitpod Self-Hosted Instance. You can also take a look at our [support page](/support) to learn how to reach our community and support team.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest","loc":{"lines":{"from":56,"to":62}}}}],["2249",{"pageContent":"---\nsection: self-hosted/latest\nsubsection: installation-guides\ntitle: Installation Guides\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Installation Guides\n\n> ⚠️ **Self-hosted as a product is no longer supported**\n>\n> The last official update of this product is the [November 2022 self-hosted release](https://www.gitpod.io/changelog/november-self-hosted-release). We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our [free community license](https://www.gitpod.io/community-license). However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n> Read [our blog on Gitpod Dedicated](/blog/introducing-gitpod-dedicated) to learn why we made the decision to discontinue self-hosted.\n\nThis section has the guides you need to install Gitpod:","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/installation-guides","loc":{"lines":{"from":1,"to":18}}}}],["2250",{"pageContent":"This section has the guides you need to install Gitpod:\n\n- [Local Preview](local-preview) - Try out Gitpod locally without having to set up a Kubernetes cluster\n- [Reference Architectures](./reference-architecture) - Help with setting up your Kubernetes cluster to run Gitpod on\n- [Installation guide](./installing-gitpod) - How to install Gitpod onto an Kubernetes cluster\n- [Advanced Installation Guides](./advanced) - Help with advanced installation topics","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/installation-guides","loc":{"lines":{"from":18,"to":23}}}}],["2251",{"pageContent":"---\nsection: self-hosted/latest\nsubsection: installation-guides\ntitle: Installing Gitpod Self-Hosted\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Installing Gitpod Self-Hosted\n\n> ⚠️ **Self-hosted as a product is no longer supported**\n>\n> The last official update of this product is the [November 2022 self-hosted release](https://www.gitpod.io/changelog/november-self-hosted-release). We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our [free community license](https://www.gitpod.io/community-license). However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n> Read [our blog on Gitpod Dedicated](/blog/introducing-gitpod-dedicated) to learn why we made the decision to discontinue self-hosted.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/installing-gitpod","loc":{"lines":{"from":1,"to":16}}}}],["2252",{"pageContent":"> **Note:** Setting up a self-hosted Gitpod instance needs some Kubernetes experience. Detailed guidance on how to setup and maintain a Kubernetes cluster is behind the scope of these docs. Please also see the [_prerequisites_](./installing-gitpod#prerequisites) below.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/installing-gitpod","loc":{"lines":{"from":18,"to":18}}}}],["2253",{"pageContent":"Prerequisites\n\n> These prerequisites are fulfilled already if you used one of the [reference architectures](./reference-architecture). We strongly encourage the use of these reference architectures. Please see the [requirements](./requirements) for more information on what Gitpod needs to function.\n\n<details>\n  <summary  class=\"text-p-medium\"><b> Kubernetes Cluster</b></summary>\n\nGitpod is a Kubernetes application that uses Kubernetes internally to provision workspaces as Kubernetes pods. Before you can start installing Gitpod, you need to create a compatible Kubernetes cluster. The [reference architectures](./reference-architecture) will help you to get started with your favorite cloud provider. If you are creating a cluster yourself, it's up to you to set up a cluster that meets the [requirements](./requirements).\n\n</details>\n\n<details>\n  <summary  class=\"text-p-medium\"><b>Cert-Manager installed on the cluster</b></summary>","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/installing-gitpod","loc":{"lines":{"from":20,"to":32}}}}],["2254",{"pageContent":"</details>\n\n<details>\n  <summary  class=\"text-p-medium\"><b>Cert-Manager installed on the cluster</b></summary>\n\nOnce you have created your Kubernetes cluster you need to install [cert-manager](https://cert-manager.io/). cert-manager is needed even when you bring your own TLS certificate for your domain. Please consider the [cert-manager documentation](https://cert-manager.io/docs/) on how to install it.\n\n</details>\n\n<details>\n  <summary  class=\"text-p-medium\"><b>DNS and TLS configured</b></summary>\n\nTo install Gitpod you need a domain with a TLS certificate. The DNS setup to your domain needs to be configured such that it points to the ingress of your Kubernetes cluster. You need to configure your actual domain (say `example.com`) as well as the wildcard subdomains `*.example.com` and `*.ws.example.com`. Alternatively, you can rely on a configured `Issuer`/`ClusterIssuer` plus a `Certificate` (that also includes the wildcard domains) for cert-manager:","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/installing-gitpod","loc":{"lines":{"from":32,"to":44}}}}],["2255",{"pageContent":"**Creating TLS certs for your domain with cert-manager**\n\ncert-manager provides the Gitpod installation with certificates for internal communication. Besides this, cert-manager can also create a TLS certificate for your domain. Since Gitpod needs wildcard certificates, you must use the [DNS-01 challenge](https://letsencrypt.org/docs/challenge-types/#dns-01-challenge). Please consult the [cert-manager documentation](https://cert-manager.io/docs/configuration/acme/dns01) for instructions. You can use either an [`Issuer` or `ClusterIssuer`](https://cert-manager.io/docs/concepts/issuer).\n\nFollowing the cert-manager instructions, you will have an `Issuer` or `ClusterIssuer` with a configured `dns01` solver (most probably with a proper secret with credentials for your DNS provider) as well a `Certificate` with the following `dnsNames`:\n\n- `example.com`\n- `*.example.com`\n- `*.ws.example.com`\n\n_(replace `example.com` with your Gitpod domain)_\n\n</details>","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/installing-gitpod","loc":{"lines":{"from":46,"to":58}}}}],["2256",{"pageContent":"Install Gitpod\n\nTo start with installing Gitpod, you need a terminal where you can run `kubectl` against your cluster. First, install the KOTS kubectl plugin:\n\n```shell\ncurl https://kots.io/install | bash\n```\n\nNow, you are ready to install Gitpod. Run the following command in your terminal:\n\n```shell\nkubectl kots install gitpod\n```\n\nYou will be asked for the namespace you want to install Gitpod to as well as a password for the admin console. After some time, you will see the following output:\n\n```\n  • Press Ctrl+C to exit\n  • Go to http://localhost:8800 to access the Admin Console","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/installing-gitpod","loc":{"lines":{"from":60,"to":78}}}}],["2257",{"pageContent":"Open your favorite browser and go to `http://localhost:8800` (port `8800` is opened on your node on `localhost` only--you may want to forward the port to your workstation in order to access the admin console).\n\nThe first page will ask you to upload your Gitpod license which you can get [here](/community-license) For more information about our licenses and respective pricing plans, please visit our [self-hosted pricing page](https://www.gitpod.io/self-hosted).\n\nAfter uploading the license, you will be forwarded to the config page. On this page, you need to enter your domain name for your Gitpod installation. You can also configure to use [external components](./requirements) (by default internal ones are installed) as well as your TLS certs setup or your [workspace size](./configuring-workspace-resources). Click “Continue” to proceed with the installation.\n\n![kots-install-config](../../static/images/docs/self-hosted/kots-install-config.png)","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/installing-gitpod","loc":{"lines":{"from":81,"to":87}}}}],["2258",{"pageContent":"![kots-install-config](../../static/images/docs/self-hosted/kots-install-config.png)\n\nIn the next step, the installer runs a preflight check. This validates your cluster meets the minimum requirements. Everything is green? Awesome! Click “Continue” to proceed.\n\n![kots-preflights-results](../../static/images/docs/self-hosted/kots-preflights-results.png)\n\nNow, you are seeing the installation admin page. Once the installation has been finished successfully, you will see the status “Ready” with a small green indicator next to the Gitpod logo. You will also see which version you installed and which license you are using.\n\n![kots-admin-dashboard](../../static/images/docs/self-hosted/kots-admin-dashboard.png)\n\nOpen your Gitpod domain in your browser to access your running Gitpod instance. You should be greeted by the following screen:\n\n![welcome screen](../../static/images/docs/self-hosted/welcome-screen.png)\n\nYou will then be asked to configure a git integration:","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/installing-gitpod","loc":{"lines":{"from":87,"to":101}}}}],["2259",{"pageContent":"![welcome screen](../../static/images/docs/self-hosted/welcome-screen.png)\n\nYou will then be asked to configure a git integration:\n\n![git integration setup](../../static/images/docs/self-hosted/git-integration-setup.png)\n\nThis git integration will also serve as the way that you and your users get authenticated against your Gitpod installation. You can find out more in the [Integrations](/docs/integrations) section.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/installing-gitpod","loc":{"lines":{"from":101,"to":107}}}}],["2260",{"pageContent":"> **Important:** Public (SaaS) Source Control Management Systems (SCMs) (i.e. [GitLab.com](http://Gitlab.com), [GitHub.com](http://github.com/) and [Bitbucket.org](http://Bitbucket.org)) are **not** integrated by default with a Self-Hosted Gitpod instance because OAuth apps are tied to domains. Therefore, these public SCMs need to be integrated manually with an OAuth application you specifically create for your domain. This is done similarly to how it is done for the private/self-hosted versions of each SCM. As such their respective guides also apply here:\n>\n> - Follow [these](/docs/configure/authentication/gitlab#registering-a-self-hosted-gitlab-installation) steps to integrate [`GitLab.com`](https://gitlab.com/) with your self-hosted Gitpod instance. You will need to enter `gitlab.com` as the `Provider Host Name` in the New Git Integration Modal.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/installing-gitpod","loc":{"lines":{"from":109,"to":111}}}}],["2261",{"pageContent":"> - Follow [these](/docs/configure/authentication/github-enterprise) steps to integrate [`GitHub.com`](http://github.com) with your self-hosted Gitpod instance. You will need to enter `github.com` as the `Provider Host Name` in the New Git Integration Modal.\n> - Follow [these](/docs/configure/authentication/bitbucket-server) steps to integrate [`Bitbucket.org`](https://bitbucket.org/) with your self-hosted Gitpod instance. Select `Bitbucket` as the `Provider Type` in the New Git Integration Modal. For bitbucket.org this requires configuring an \"OAuth consumer\" on a \"workspace\". This is slightly different from the documented Bitbucket Server integration. See [gitpod PR #9894](https://github.com/gitpod-io/gitpod/pull/9894#pullrequestreview-969013833) for an example.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/installing-gitpod","loc":{"lines":{"from":112,"to":113}}}}],["2262",{"pageContent":"> **Note:** Your first workspace start can take a bit of time because the workspace image first needs to be built and then downloaded. Subsequent workspace starts should be much quicker.\n\nOnce you are all set up, you can visit the [getting started with Gitpod page](/docs/introduction/getting-started) to start learning about using Gitpod. You should also familiarise yourself with our [guides around operating Gitpod Self-Hosted](./operational-guides), especially the guide that explains [how to update Gitpod](./updating).","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/installing-gitpod","loc":{"lines":{"from":115,"to":117}}}}],["2263",{"pageContent":"---\nsection: self-hosted/latest\nsubsection: installation-guides\ntitle: Local Preview of Gitpod Self-Hosted\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n<script lang=\"ts\">\n\n  import BigPill from \"$lib/components/big-pill.svelte\";\n  import Tooltip from \"$lib/components/tooltip.svelte\";\n</script>\n\n# How to Install the Local Preview of Gitpod Self-Hosted","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/local-preview","loc":{"lines":{"from":1,"to":17}}}}],["2264",{"pageContent":"<script lang=\"ts\">\n\n  import BigPill from \"$lib/components/big-pill.svelte\";\n  import Tooltip from \"$lib/components/tooltip.svelte\";\n</script>\n\n# How to Install the Local Preview of Gitpod Self-Hosted\n\n> ⚠️ **Self-hosted as a product is no longer supported**\n>\n> The last official update of this product is the [November 2022 self-hosted release](https://www.gitpod.io/changelog/november-self-hosted-release). We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our [free community license](https://www.gitpod.io/community-license). However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n> Read [our blog on Gitpod Dedicated](/blog/introducing-gitpod-dedicated) to learn why we made the decision to discontinue self-hosted.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/local-preview","loc":{"lines":{"from":17,"to":28}}}}],["2265",{"pageContent":"| <!-- Our markdown parser does not support tables without a header --> ||","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/local-preview","loc":{"lines":{"from":30,"to":30}}}}],["2266",{"pageContent":"| --------------------------------------------------------------------- ||","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/local-preview","loc":{"lines":{"from":31,"to":31}}}}],["2267",{"pageContent":"| Status:                                                               | <BigPill text=\"beta\" class=\"ml|","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/local-preview","loc":{"lines":{"from":32,"to":32}}}}],["2268",{"pageContent":"| Intended for:                                                         | The Local Preview allows you to experience Gitpod Self-Hosted on your local machine without having to set up a Kubernetes cluster. It is purely intended for testing purposes. Please see the [installation guides section](./installation-guides) for recommended sustainable installation methods. <!-- To Do : replace link to getting started with reference architectures once these are fully ready-->                                                                                                                                                                                          |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/local-preview","loc":{"lines":{"from":33,"to":33}}}}],["2269",{"pageContent":"| Limitations:                                                          | - Performance is limited by the capabilities of your machine. Your experience is likely to be better when using the SaaS version ([gitpod.io](/docs/introduction/getting-started)) or when running on one of our [reference architectures](./reference-architecture) <br /> - Minimum of 4 cores and 6GB of ram required. **Macs with Apple Silicon (e.g. M1) are currently not supported.** See [the relevant issue](https://github.com/gitpod-io/gitpod/issues/11309) for more information <br /> - [Prebuilds](/docs/configure/projects/prebuilds) are not supported because they require webhooks |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/local-preview","loc":{"lines":{"from":34,"to":34}}}}],["2270",{"pageContent":"The Local Preview of Gitpod Self-Hosted is the easiest way to try out Gitpod locally in situations where you cannot use the SaaS version ([gitpod.io](/docs/introduction/getting-started)) and cannot easily spin up a Kubernetes cluster to use the [Proof-of-Value Reference Architecture](./reference-architecture/proof-of-value). It allows you to try Gitpod Self-Hosted locally with minimal effort and resource requirements. As a result, this is **not intended for production** nor continuous usage. Please refer to the [installation guide](./installing-gitpod) for instructions on how to install Gitpod for continuous usage. <!-- To Do : replace link to getting started with reference architectures once these are fully ready-->","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/local-preview","loc":{"lines":{"from":36,"to":36}}}}],["2271",{"pageContent":"This install method runs a [K3s](https://k3s.io/) cluster inside a Docker container. Self-signed certificates are automatically created and a Gitpod instance using these certificates will be installed into the `k3s` cluster. See our [TLS](./advanced/tls) page for more information about Gitpod and certificates.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/local-preview","loc":{"lines":{"from":38,"to":38}}}}],["2272",{"pageContent":"1. Running the Docker container\n\nRun the following command to get the `local-preview` Docker container up and running:\n\n```bash\ndocker run -p 443:443 --privileged --name gitpod -it --mount type=volume,source=gitpod,destination=/var/gitpod eu.gcr.io/gitpod-core-dev/build/local-preview","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/local-preview","loc":{"lines":{"from":40,"to":45}}}}],["2273",{"pageContent":"Unpacking the above command:\n\n- `-p 443:443` to map the `443` container port to host.\n- `--privileged` to be able to run docker (and hence `k3s`) inside the container. This is necessary.\n- `--name gitpod` to set the name of the docker container for further access.\n- `--rm` to delete the Docker container after stopping.\n- `--mount type=volume,source=gitpod,destination=/var/gitpod` to create a volume called `gitpod`, and mounting it to the container.\n\n> **Note:** By default, `preview.gitpod-self-hosted.com` is the DOMAIN to access Gitpod which routes to `127.0.0.1` localhost IP address. To use another host network IP Address, the `DOMAIN` environment can be set accordingly via an `-e` flag in the above command. This is useful to share access to the Gitpod Self-Hosted instance running on your machine within your local network. For Example, `192.168.0.42` Host Network IP would be `192-168-0-42.nip.io`, set by appending `-e DOMAIN=192-168-0-42.nip.io`.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/local-preview","loc":{"lines":{"from":48,"to":56}}}}],["2274",{"pageContent":"2. Accessing Gitpod\n\n> **Note:** It usually takes around 5 minutes to go from the `starting Gitpod` status to `Gitpod is running`. Among other things, this will depend on the speed of your internet connection. Once Gitpod is ready, it will look as follows:\n\n![gitpod is ready](../../static/images/docs/self-hosted/local-preview-ready.png)\n\nAs this is a self-signed instance of Gitpod, the Gitpod root CA cert has to be imported into your browser manually to access the full functionality of Gitpod. The certificate can be retrieved by running the following:\n\n```bash\ndocker cp gitpod:/var/gitpod/gitpod-ca.crt $HOME/gitpod-ca.crt","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/local-preview","loc":{"lines":{"from":58,"to":67}}}}],["2275",{"pageContent":"This certificate is saved at `$HOME/gitpod-ca.crt` and can then be loaded into your browser. Most browsers also require a restart before they can start to use the imported certificate. For instructions on how to load the certificate, choose your setup below:\n\n<details>\n  <summary  class=\"text-p-medium\">Chrome on Windows</summary>\n\n<div class=\"not-prose\" style=\"position: relative; padding-bottom: 56.25%; height: 0;\"><iframe src=\"https://www.loom.com/embed/1814061fbd9c4be7b18d8ae8919cabc6\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%;\"></iframe></div>\n</details>\n<details>\n  <summary  class=\"text-p-medium\">Edge on Windows</summary>","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/local-preview","loc":{"lines":{"from":70,"to":78}}}}],["2276",{"pageContent":"<div class=\"not-prose\" style=\"position: relative; padding-bottom: 56.25%; height: 0;\"><iframe src=\"https://www.loom.com/embed/ee3051ac367140c3a2f60cd4e15a0192\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%;\"></iframe></div>\n\n</details>\n\n<details>\n  <summary  class=\"text-p-medium\">Firefox on Windows</summary>\n\n<div class=\"not-prose\" style=\"position: relative; padding-bottom: 56.25%; height: 0;\"><iframe src=\"https://www.loom.com/embed/513796d28a2647dba2cdd8f9312d4f98\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%;\"></iframe></div>\n\n</details>\n\n<details>\n  <summary  class=\"text-p-medium\">Google Chrome on MacOS</summary>","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/local-preview","loc":{"lines":{"from":80,"to":92}}}}],["2277",{"pageContent":"</details>\n\n<details>\n  <summary  class=\"text-p-medium\">Google Chrome on MacOS</summary>\n\n<div class=\"not-prose\" style=\"position: relative; padding-bottom: 56.25%; height: 0;\"><iframe src=\"https://www.loom.com/embed/39e870e6f91c4f5bad1550f3647fed29\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%;\"></iframe></div>\n\n</details>\n\n<details >\n  <summary  class=\"text-p-medium\">Mozilla Firefox on MacOS</summary>\n\n<div class=\"not-prose\" style=\"position: relative; padding-bottom: 56.25%; height: 0;\"><iframe src=\"https://www.loom.com/embed/2ce25cf844744359ae2b14263d9c2fb0\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%;\"></iframe></div>\n\n</details>\n\n<br/>","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/local-preview","loc":{"lines":{"from":92,"to":108}}}}],["2278",{"pageContent":"</details>\n\n<br/>\n\nOnce the certificate is loaded and Gitpod is ready, the URL to access the Gitpod instance would be `https://preview.gitpod-self-hosted.com` unless the `DOMAIN` environment is overridden in which case the same has to be used.\n\nYou should be greeted by the following screen:\n\n![welcome screen](../../static/images/docs/self-hosted/welcome-screen.png)\n\nYou will then be asked to configure a git integration:\n\n![git integration setup](../../static/images/docs/self-hosted/git-integration-setup.png)\n\nThis git integration will also serve as the way that you and your users get authenticated against your Gitpod installation. You can find out more in the [Integrations](/docs/integrations) section.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/local-preview","loc":{"lines":{"from":108,"to":122}}}}],["2279",{"pageContent":"> **Important:** Public (SaaS) Source Control Management Systems (SCMs) (i.e. [GitLab.com](http://Gitlab.com), [GitHub.com](http://github.com/) and [Bitbucket.org](http://Bitbucket.org)) are **not** integrated by default with a Self-Hosted Gitpod instance because OAuth apps are tied to domains. Therefore, these public SCMs need to be integrated manually with an OAuth application you specifically create for your domain. This is done similarly to how it is done for the private/self-hosted versions of each SCM. As such their respective guides also apply here:\n>\n> - Follow [these](/docs/configure/authentication/gitlab#registering-a-self-hosted-gitlab-installation) steps to integrate [`GitLab.com`](https://gitlab.com/) with your self-hosted Gitpod instance. You will need to enter `gitlab.com` as the `Provider Host Name` in the New Git Integration Modal.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/local-preview","loc":{"lines":{"from":124,"to":126}}}}],["2280",{"pageContent":"> - Follow [these](/docs/configure/authentication/github-enterprise) steps to integrate [`GitHub.com`](http://github.com) with your self-hosted Gitpod instance. You will need to enter `github.com` as the `Provider Host Name` in the New Git Integration Modal.\n> - Follow [these](/docs/configure/authentication/bitbucket-server) steps to integrate [`Bitbucket.org`](https://bitbucket.org/) with your self-hosted Gitpod instance. Select `Bitbucket` as the `Provider Type` in the New Git Integration Modal. For bitbucket.org this requires configuring an \"OAuth consumer\" on a \"workspace\". This is slightly different from the documented Bitbucket Server integration. See [gitpod PR #9894](https://github.com/gitpod-io/gitpod/pull/9894#pullrequestreview-969013833) for an example.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/local-preview","loc":{"lines":{"from":127,"to":128}}}}],["2281",{"pageContent":"> **Note:** Your first workspace start can take a bit of time because the workspace image first needs to be built and then downloaded. Subsequent workspace starts should be much quicker.\n\nOnce you are all set up, you can visit the [getting started with Gitpod page](/docs/introduction/getting-started) to start learning about using Gitpod.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/local-preview","loc":{"lines":{"from":130,"to":132}}}}],["2282",{"pageContent":"---\nsection: self-hosted/latest\nsubsection: operational-guides\ntitle: Monitoring Gitpod Self-Hosted\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n> This guide aims at helping you set up basic monitoring of your Gitpod instance. In the end, you will have a continuous, high-level view of the health of your installation that you can monitor and alert on to respond to any issues quicker.\n\n# Monitoring","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/monitoring","loc":{"lines":{"from":1,"to":13}}}}],["2283",{"pageContent":"# Monitoring\n\n> ⚠️ **Self-hosted as a product is no longer supported**\n>\n> The last official update of this product is the [November 2022 self-hosted release](https://www.gitpod.io/changelog/november-self-hosted-release). We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our [free community license](https://www.gitpod.io/community-license). However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n> Read [our blog on Gitpod Dedicated](/blog/introducing-gitpod-dedicated) to learn why we made the decision to discontinue self-hosted.\n\nOnce you have Gitpod self-hosted up and running, the next step is making sure it _continues_ to run as expected. This guide shows you how to set up a monitoring solution that consumes the data that Gitpod produces in order to help you understand the overall state of your Gitpod installation.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/monitoring","loc":{"lines":{"from":13,"to":20}}}}],["2284",{"pageContent":"> **Note** All metrics shown on this page are experimental and might change in the future.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/monitoring","loc":{"lines":{"from":22,"to":22}}}}],["2285",{"pageContent":"Metrics collection\n\nSeveral components of Gitpod expose metrics using the [Prometheus exposition format](https://prometheus.io/docs/concepts/data_model/), but for this guide, we'll focus on the most important one that makes sure that Workspaces are starting and running reasonably.\n\nGitpod is all about Workspaces, so the information that you want to keep an eye on is:\n\n- How many workspaces are currently running.\n- Workspaces are starting.\n- Workspaces are starting in a reasonable time frame.\n- Running workspaces don't stop unexpectedly.\n\n`ws-manager` is the component responsible for measuring and exposing such data, so you want to make sure that your Prometheus instance is scraping metrics from this specific component. Metrics are exposed through port `9500`, at the `/metrics` endpoint.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/monitoring","loc":{"lines":{"from":24,"to":35}}}}],["2286",{"pageContent":"We recommend using the [Prometheus-Operator](https://github.com/prometheus-operator/prometheus-operator) and the [ServiceMonitor](https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api.md#servicemonitorspec) or [PodMonitor](https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api.md#podmonitorspec) CRDs to simplify the configuration surface.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/monitoring","loc":{"lines":{"from":37,"to":37}}}}],["2287",{"pageContent":"Dashboards and Alerts\n\nTo have all useful data available and presented in a friendly way, it is recommend building [Grafana Dashboards](https://grafana.com/grafana/dashboards/) with the most important metrics (the ones shown in this guide). If you prefer, you can [import](https://grafana.com/docs/grafana/latest/dashboards/export-import/#import-dashboard) [one of our examples](https://github.com/gitpod-io/gitpod/blob/main/operations/observability/mixins/self-hosted/dashboards/examples/overview.json) as a baseline to your own dashboards.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/monitoring","loc":{"lines":{"from":39,"to":41}}}}],["2288",{"pageContent":"Alerting can be done with [Prometheus itself](https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/). If you are using the Prometheus-Operator as we recommended, you can also use the [PrometheusRule](https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api.md#prometheusrulespec) CRD to simplify alerting configuration. The [Alertmanager](https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api.md#alertmanagerspec) CRD can be used to configure alert routing to different popular platform such as [PagerDuty](https://www.pagerduty.com/) or [Slack](https://slack.com/).","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/monitoring","loc":{"lines":{"from":43,"to":43}}}}],["2289",{"pageContent":"What you should keep an eye on\n\n### How many workspaces are currently running\n\nTo discover how many workspaces are currently running, use the [PromQL query](https://prometheus.io/docs/prometheus/latest/querying/basics/) below:\n\n```promql\nsum(gitpod_ws_manager_workspace_phase_total{phase=\"RUNNING\"}) by (type)\n```\n\n`gitpod_ws_manager_workspace_phase_total` is a [Gauge](https://prometheus.io/docs/concepts/metric_types/#gauge). Although not suitable for alerting (because the amount of workspaces say little about your installation's health), with this query, you're able to tell how many workspaces, prebuilds and imagebuilds are running. This can be good information to tell how saturated your Gitpod instance is.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/monitoring","loc":{"lines":{"from":45,"to":55}}}}],["2290",{"pageContent":"Workspaces are starting\n\nThe metric for this one is very similar to the one mentioned above, we're just changing the phase to `PENDING` instead of `RUNNING`.\n\n```promql\nsum(gitpod_ws_manager_workspace_phase_total{phase=\"PENDING\"}) by (type)\n```\n\nThis metric is a good candidate for alerting. If this number is steadily going up, it means that Workspaces are having a hard time getting to the `RUNNING` state, which is a good indicator of bad user experience. A good threshold changes from organization to organization, it is recommended to periodically review this alert's threshold as the usage of Gitpod increases or decreases.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/monitoring","loc":{"lines":{"from":57,"to":65}}}}],["2291",{"pageContent":"Workspaces are starting in a reasonable time frame\n\nTo ensure a good user experience, you'll also want to make sure that Workspaces are starting swiftly! [Histograms](https://prometheus.io/docs/concepts/metric_types/#histogram) are used to capture this information. With histograms, it's possible to measure different percentiles and capture a high-level overview and outliers at the same time.\n\nExample queries are shown below:\n\n```promql\n# 95th percentile\nhistogram_quantile(0.95,\n    sum(rate(gitpod_ws_manager_workspace_startup_seconds_bucket{type=\"REGULAR\"}[5m])) by (le)\n)\n\n# 50th percentile\nhistogram_quantile(0.5,\n    sum(rate(gitpod_ws_manager_workspace_startup_seconds_bucket{type=\"REGULAR\"}[5m])) by (le)\n)","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/monitoring","loc":{"lines":{"from":67,"to":82}}}}],["2292",{"pageContent":"Sluggishness, depending on how bad it is, can be even worst than a fast failure. For that reason, alerting on workspaces taking too long to start is a good idea. It is suggested to collect feedback from users of your Gitpod installation to decide the correct thresholds for the alert on this metric.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/monitoring","loc":{"lines":{"from":85,"to":85}}}}],["2293",{"pageContent":"Running workspaces don't stop unexpectedly\n\nLast but not less important, you want to make sure that running workspaces do not fail and stop abruptly. `ws-manager` exposes a [counter](https://prometheus.io/docs/concepts/metric_types/#counter) that counts all workspace failures, making it possible to measure workspace failure rate (i.e. how many workspaces are failing per second).\n\nThe query is shown below:\n\n```promql\nsum(rate(gitpod_ws_manager_workspace_stops_total{reason=\"failed\"}[5m])) by (type)\n```\n\nThe goal is that this metric stays as close to 0 as possible. If it starts to increase it means something is going wrong! Alerting can be set for high error rates, but just like the ones above the threshold will come from experience operating Gitpod. It is suggested to periodically review the threshold as your installation increases or decreases usage.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/monitoring","loc":{"lines":{"from":87,"to":97}}}}],["2294",{"pageContent":"Troubleshooting\n\nPlease refer to the [troubleshooting](https://www.gitpod.io/docs/configure/self-hosted/latest/troubleshooting) docs.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/monitoring","loc":{"lines":{"from":99,"to":101}}}}],["2295",{"pageContent":"---\nsection: self-hosted/latest\nsubsection: operational-guides\ntitle: Operational Guides\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Operational Guides\n\n> ⚠️ **Self-hosted as a product is no longer supported**\n>\n> The last official update of this product is the [November 2022 self-hosted release](https://www.gitpod.io/changelog/november-self-hosted-release). We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our [free community license](https://www.gitpod.io/community-license). However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n> Read [our blog on Gitpod Dedicated](/blog/introducing-gitpod-dedicated) to learn why we made the decision to discontinue self-hosted.\n\nThis section has the guides you need to operate Gitpod:","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/operational-guides","loc":{"lines":{"from":1,"to":18}}}}],["2296",{"pageContent":"This section has the guides you need to operate Gitpod:\n\n- [How to update Gitpod](./updating) - This guide shows you how to update Gitpod\n- [How to monitor Gitpod](./monitoring) - This guide shows you how to set up monitoring via metrics for your Gitpod installation\n- [How to configure workspace resources](./configuring-workspace-resources) - This guide shows you how to configure workspace resources to ensure performance and reliability\n- [How to backup and restore Gitpod](./backup-restore) - This guide shows you how to back up and then restore your Gitpod installation for [disaster recovery](./disaster-recovery) purposes","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/operational-guides","loc":{"lines":{"from":18,"to":23}}}}],["2297",{"pageContent":"---\nsection: self-hosted/latest\nsubsection: troubleshooting\ntitle: Manage Cluster Nodes\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Manage Cluster Nodes\n\n> ⚠️ **Self-hosted as a product is no longer supported**\n>\n> The last official update of this product is the [November 2022 self-hosted release](https://www.gitpod.io/changelog/november-self-hosted-release). We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our [free community license](https://www.gitpod.io/community-license). However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n> Read [our blog on Gitpod Dedicated](/blog/introducing-gitpod-dedicated) to learn why we made the decision to discontinue self-hosted.\n\nSometimes nodes become unhealthy, or you need to prevent the autoscaler from removing the node from your cluster.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/manage-cluster-nodes","loc":{"lines":{"from":1,"to":18}}}}],["2298",{"pageContent":"Avoiding Node Scale-down\n\nIf you wish to cordon a node with terminating workspaces, or, keep a node so you have time to manually backup user data:\n\n```shell\n# reference: https://github.com/kubernetes/autoscaler/blob/master/cluster-autoscaler/FAQ.md#how-can-i-prevent-cluster-autoscaler-from-scaling-down-a-particular-node\n$ kubectl annotate node <nodename> cluster-autoscaler.kubernetes.io/scale-down-disabled=true\n```\n\n## Handling Unhealthy Nodes\n\nPrevent new workspaces from being scheduled to a node if they become unhealthy:\n\n```shell\n$ kubectl cordon <nodename>\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/manage-cluster-nodes","loc":{"lines":{"from":20,"to":35}}}}],["2299",{"pageContent":"---\nsection: self-hosted/latest\nsubsection: troubleshooting\ntitle: Prevent Workspace Starts\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Prevent Workspace Starts\n\n> ⚠️ **Self-hosted as a product is no longer supported**\n>\n> The last official update of this product is the [November 2022 self-hosted release](https://www.gitpod.io/changelog/november-self-hosted-release). We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our [free community license](https://www.gitpod.io/community-license). However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n> Read [our blog on Gitpod Dedicated](/blog/introducing-gitpod-dedicated) to learn why we made the decision to discontinue self-hosted.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/prevent-workspace-starts","loc":{"lines":{"from":1,"to":16}}}}],["2300",{"pageContent":"It may be necessary for you to prevent users from starting Gitpod workspaces (in a `<namespace>`). Please see the [update guide](./updating) for more information.\n\n> It is required to prevent workspace starts when updating Gitpod and using the [Single Cluster Reference Architecture](../latest/reference-architecture/single-cluster-ref-arch) because it is not highly-available.\n\nThis can be done with `kubectl`, after which, users won't be able to start workspaces until the `ws-manager` pod is running again.\n\n> **Caution:** You must [stop running workspaces](./stop-workspaces) and wait for them to terminate before proceeding. Failure to do so can result in user data loss, because the workspaces will not be able to reliably back-up.\n\nTo scale-down the `ws-manager` component and prevent workspace starts:\n\n```shell\nkubectl scale --replicas=0 deployment/ws-manager -n <namespace>","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/prevent-workspace-starts","loc":{"lines":{"from":18,"to":29}}}}],["2301",{"pageContent":"After which, users will receive an error when trying to start workspaces. Once Gitpod is redeployed, this change will be reset automatically and workspaces will be allowed to start again.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/prevent-workspace-starts","loc":{"lines":{"from":32,"to":32}}}}],["2302",{"pageContent":"---\nsection: self-hosted/latest\nsubsection: reference\ntitle: Reference\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Gitpod Self-Hosted Reference\n\n> ⚠️ **Self-hosted as a product is no longer supported**\n>\n> The last official update of this product is the [November 2022 self-hosted release](https://www.gitpod.io/changelog/november-self-hosted-release). We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our [free community license](https://www.gitpod.io/community-license). However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n> Read [our blog on Gitpod Dedicated](/blog/introducing-gitpod-dedicated) to learn why we made the decision to discontinue self-hosted.\n\nReference information for Gitpod Self-Hosted:","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference","loc":{"lines":{"from":1,"to":18}}}}],["2303",{"pageContent":"Reference information for Gitpod Self-Hosted:\n\n- [Requirements](./requirements) - Information on which components Gitpod requires\n- [Product compatibility Matrix](/docs/references/compatibility?admin) - Information on which versions of components do and do not work with Gitpod\n- [Releases](./releases) - Information about how Gitpod is released\n- [Telemetry](./telemetry) - Information about the telemetry that is gathered\n- [Upgrade Guides](./upgrade-guides) - Information to take into account when upgrading to a specific version","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference","loc":{"lines":{"from":18,"to":24}}}}],["2304",{"pageContent":"---\nsection: self-hosted/latest\nsubsection: reference\ntitle: Gitpod Self-Hosted Requirements\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Gitpod Self-Hosted Requirements\n\n> ⚠️ **Self-hosted as a product is no longer supported**\n>\n> The last official update of this product is the [November 2022 self-hosted release](https://www.gitpod.io/changelog/november-self-hosted-release). We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our [free community license](https://www.gitpod.io/community-license). However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n> Read [our blog on Gitpod Dedicated](/blog/introducing-gitpod-dedicated) to learn why we made the decision to discontinue self-hosted.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/requirements","loc":{"lines":{"from":1,"to":16}}}}],["2305",{"pageContent":"Gitpod has certain expectations on the characteristics of the cluster it is running on as well as the (software) components connected to it.\n\n> Please refer to the [product compatibility matrix](/docs/references/compatibility?admin) for the supported types and versions of these components.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/requirements","loc":{"lines":{"from":18,"to":20}}}}],["2306",{"pageContent":"Cluster Requirements\n\n![cluster requirements](../../static/images/docs/self-hosted/cluster-requirements.png)\n\n<!-- raw editable diagram can be found under static/images/docs/self-hosted/cluster-requirements.excalidraw -->\n\n### Reference Architectures\n\nWe have created a set of [reference architectures](/docs/configure/self-hosted/latest/reference-architecture) for all the major cloud providers that fulfill the requirements below. These are intended as a starting point for you to create an environment to install Gitpod into. If you wish to use K3s, please refer to the [k3s guide](/docs/configure/self-hosted/latest/cluster-set-up/on-k3s). Please see the [product compatibility matrix](/docs/references/compatibility?admin) for the current level of k3s support.\n\n### Supported Kubernetes Versions and distributions\n\nPlease refer to the [product compatibility matrix](/docs/references/compatibility?admin) for supported Kubernetes versions and distributions.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/requirements","loc":{"lines":{"from":22,"to":34}}}}],["2307",{"pageContent":"Node Affinity Labels Requirements\n\nYour Kubernetes cluster must have node(s) with the following labels applied to them:\n\n- `gitpod.io/workload_meta=true`\n- `gitpod.io/workload_ide=true`\n- `gitpod.io/workload_workspace_services=true`\n- `gitpod.io/workload_workspace_regular=true`\n- `gitpod.io/workload_workspace_headless=true`\n\nIt is recommended to have a minimum of two node pools, grouping the `meta` and `ide` nodes into one node pool and `workspace` related nodes into another. These two groups of workloads have different performance characteristics. Separating them into node pools after the fact is more difficult and incurs downtime. A further improvement is to also separate the headless workspaces (these are [prebuilds](/docs/configure/projects/prebuilds)) and regular workspaces into separate node pools. Prebuilds can use up a lot of compute and this might impact regular workspaces if they are running on the same node.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/requirements","loc":{"lines":{"from":36,"to":46}}}}],["2308",{"pageContent":"Node and Container Requirements\n\nThese are the components expected on each node (see [product compatibility matrix](/docs/references/compatibility?admin) for supported versions):\n\n- Ubuntu Linux\n- Calico for the networking overlay and network policy\n- Containerd\n- At least 4 vCPU and 16GB of RAM\n\n### Kubernetes Privilege Requirements\n\nYour Kubernetes cluster must allow Gitpod to run privileged pods, as Gitpod depends on these privileges to provide workspace isolation.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/requirements","loc":{"lines":{"from":48,"to":59}}}}],["2309",{"pageContent":"Load Balancer Requirements\n\nGitpod uses [`LoadBalancer` type services](https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer) to expose the Gitpod Dashboard, browser-based IDEs, and SSH connections used by desktop IDEs. Your Kubernetes cluster must be able to provision layer 4 or layer 7 load balancers for `LoadBalancer` type services that can route HTTP(S) connections to Gitpod services. If you intend to use desktop IDEs or SSH to workspaces then your cluster must also be able to provision layer 4 load balancers that can route SSH connection to Gitpod services.\n\nAll supported Kubernetes distributions provide load balancers that meet Gitpod's needs. For more information see the Kubernetes distribution documentation below:","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/requirements","loc":{"lines":{"from":61,"to":65}}}}],["2310",{"pageContent":"All supported Kubernetes distributions provide load balancers that meet Gitpod's needs. For more information see the Kubernetes distribution documentation below:\n\n- [Google Kubernetes Engine](https://cloud.google.com/kubernetes-engine/docs/concepts/service-load-balancer)\n- Amazon Elastic Kubernetes Engine:\n  - Layer 4/7 (default): [Classic Load Balancer](https://aws.amazon.com/premiumsupport/knowledge-center/eks-kubernetes-services-cluster/)\n  - Layer 4 only: [Network Load Balancing](https://docs.aws.amazon.com/eks/latest/userguide/network-load-balancing.html)\n- [Microsoft Azure Kubernetes Service](https://docs.microsoft.com/en-us/azure/aks/concepts-network)\n- [K3s](https://rancher.com/docs/k3s/latest/en/networking/#service-load-balancer)","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/requirements","loc":{"lines":{"from":65,"to":72}}}}],["2311",{"pageContent":"Required Components\n\nGitpod relies on certain components and services for it to function. By default, most of these can be automatically installed in-cluster during installation. However, you can also configure Gitpod to use your own version of these that may or may not live inside the cluster. We recommend using external components when running Gitpod for sustained usage because this avoids the risk of data loss when the cluster goes down.\n\n> Please refer to the [product compatibility matrix](/docs/references/compatibility?admin) for the supported types and versions of these components.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/requirements","loc":{"lines":{"from":74,"to":78}}}}],["2312",{"pageContent":"| Component                                                                                                            | Required?                      |\n| -------------------------------------------------------------------------------------------------------------------- | ------------------------------ |\n| [Bucket Storage](/docs/configure/self-hosted/latest/requirements#bucket-storage)                                     | Use default or bring your own  |\n| [Database](/docs/configure/self-hosted/latest/requirements#database)                                                 | Use default or bring your own  |\n| [Image Registry](/docs/configure/self-hosted/latest/requirements#image-registry)                                     | Use default or bring your own  |\n| [Source Control Management System](/docs/configure/self-hosted/latest/requirements#source-control-management-system) | Yes (cloud or self-hosted SCM) |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/requirements","loc":{"lines":{"from":80,"to":85}}}}],["2313",{"pageContent":"| [Source Control Management System](/docs/configure/self-hosted/latest/requirements#source-control-management-system) | Yes (cloud or self-hosted SCM) |\n| [Cert-manager](/docs/configure/self-hosted/latest/requirements#cert-manager)                                         | Yes                            |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/requirements","loc":{"lines":{"from":85,"to":86}}}}],["2314",{"pageContent":"Bucket Storage\n\nBy default, MinIO is installed in the cluster to store static content and to back an in-cluster image registry. During the installation process you can also configure Gitpod to use an external storage providers like S3.\n\n### Database\n\nGitpod uses a MySQL database to store user data. By default Gitpod ships with a MySQL database built-in and data is stored using a Kubernetes PersistentVolume. For production settings, we recommend operating your own MySQL database (version v5.7 or newer). Which database is used can be configured during installation. <!--- todo: Is this true? How do you configure this? --->","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/requirements","loc":{"lines":{"from":88,"to":94}}}}],["2315",{"pageContent":"Image Registry\n\nGitpod relies on an image registry to store images used to start workspaces. By default, a docker based image registry backed by MiniIO is installed in the cluster (this can be configured during the installation). However, Gitpod is also compatible with any registry that implements the [Docker Registry HTTP API V2](https://docs.docker.com/registry/spec/api/) specification.\n\n### Source Control Management System\n\nGitpod expects to be connected to a Source Control Management System (SCM) such as GitLab in order to function. You can find out more about which SCMs are supported and how to connect to them in the [Integrations](/docs/configure/authentication) section. You will also be guided through connecting your SCM once you access your Gitpod installation for the first time.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/requirements","loc":{"lines":{"from":96,"to":102}}}}],["2316",{"pageContent":"Cert Manager\n\n[Cert-manager](https://cert-manager.io/) must be installed in your cluster before you can install Gitpod. It is used to create and manage certificates needed to secure communication between the various internal Gitpod components. It can also be used to fetch a TLS certificate for your Gitpod instance from Let's Encrypt for example. Please consider the [cert-manager documentation](https://cert-manager.io/docs/) on how to install it.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/requirements","loc":{"lines":{"from":104,"to":106}}}}],["2317",{"pageContent":"---\nsection: self-hosted/latest\nsubsection: installation-guides\ntitle: Resource Configuration\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# How To Configure Gitpod To Work With Certain External Components\n\n> ⚠️ **Self-hosted as a product is no longer supported**\n>\n> The last official update of this product is the [November 2022 self-hosted release](https://www.gitpod.io/changelog/november-self-hosted-release). We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our [free community license](https://www.gitpod.io/community-license). However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n> Read [our blog on Gitpod Dedicated](/blog/introducing-gitpod-dedicated) to learn why we made the decision to discontinue self-hosted.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/resource-configuration","loc":{"lines":{"from":1,"to":16}}}}],["2318",{"pageContent":"Gitpod has three resource dependencies that are required to function correctly. For convenience, you can use the in-cluster dependencies, but you should use external resources for a high-performance application.\n\nThis page highlights some of the common gotchas found when working with cloud resources and how to overcome them.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/resource-configuration","loc":{"lines":{"from":18,"to":20}}}}],["2319",{"pageContent":"Container Registry\n\n### [Amazon Elastic Container Registry (ECR)](https://aws.amazon.com/ecr/)\n\nAmazon ECR does not fully implement the [Docker v2 API](https://docs.docker.com/registry/spec/api), namely it does not automatically create the remote image if it does not already exist when pushed. For that reason, ECR is not supported with Gitpod.\n\nWhen using AWS, you should select an in-cluster registry and use S3 as your in-cluster storage provider. This will use the in-cluster registry as a facade for an S3 bucket where all the images will be stored.\n\nIf using a region other than `us-east-1`, you will need to change the endpoint to be `s3.<region>.amazonaws.com`.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/resource-configuration","loc":{"lines":{"from":22,"to":30}}}}],["2320",{"pageContent":"[Google Container Registry (GCR)](https://cloud.google.com/container-registry)\n\n> This example uses the format `gcr.io`, which is the global hostnames. This can be swapped with any of the [regional hostnames](https://cloud.google.com/container-registry/docs/pushing-and-pulling) and it will work in the same way.\n\nGoogle Container Registry authentication requires specific configuration. The \"Container registry URL\" will be in a format similar to `gcr.io/<project-name>/gitpod`. In order for the authentication to work, you must also enter the \"Container registry server\". This will always be your GCR hostname, eg `gcr.io`.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/resource-configuration","loc":{"lines":{"from":32,"to":36}}}}],["2321",{"pageContent":"[Google Artifact Registry (GAR)](https://cloud.google.com/artifact-registry)\n\nAs with [GCR](#google-container-registry-gcr), Google Artifact Registry requires both the \"Container registry URL\" and \"Container registry server\" to be completed. The URL will be in the format `<region>-docker.pkg.dev/<project-name>/gitpod` and the server address will be `<region>-docker.pkg.dev`.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/resource-configuration","loc":{"lines":{"from":38,"to":40}}}}],["2322",{"pageContent":"---\nsection: self-hosted/latest\nsubsection: troubleshooting\ntitle: Stop Workspaces\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Stop Workspaces\n\n> ⚠️ **Self-hosted as a product is no longer supported**\n>\n> The last official update of this product is the [November 2022 self-hosted release](https://www.gitpod.io/changelog/november-self-hosted-release). We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our [free community license](https://www.gitpod.io/community-license). However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n> Read [our blog on Gitpod Dedicated](/blog/introducing-gitpod-dedicated) to learn why we made the decision to discontinue self-hosted.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/stop-workspaces","loc":{"lines":{"from":1,"to":16}}}}],["2323",{"pageContent":"Sometimes it becomes necessary to stop Gitpod workspaces (in a `<namespace>`). Usually this needs to be done when updating Gitpod. Please see the [update guide](./updating) for more information.\n\nThis can be done with `kubectl`, and when done so, the IDE is closed, data in `/workspace` is backed up, and then the pod finally terminates.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/stop-workspaces","loc":{"lines":{"from":18,"to":20}}}}],["2324",{"pageContent":"A Single Workspace\n\n```shell\n$ kubectl delete pods <workspace-or-headless-pod-name> -n <namespace>\n```\n\n## All Workspaces\n\n> **Caution**: This will delete all actively running workspaces.\n\nCan be done prior to outage windows, or for troubleshooting.\n\n```shell\n$ kubectl delete pods -l component=workspace -n <namespace>\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/stop-workspaces","loc":{"lines":{"from":22,"to":36}}}}],["2325",{"pageContent":"---\nsection: self-hosted/latest\nsubsection: troubleshooting\ntitle: Support Bundles\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Generating a Support Bundle\n\nSomething is wrong with your Gitpod installation? This guide shows you how you can create a support bundle.\n\nAt first, you need to start the installation admin console. In a terminal with configured `kubectl` run the following command (`<namespace>` is the Kubernetes namespace your Gitpod installation has been installed to):\n\n```shell\n$ kubectl kots admin-console --namespace <namespace>","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/support-bundle","loc":{"lines":{"from":1,"to":18}}}}],["2326",{"pageContent":"Open your favorite browser and go to `http://localhost:8800` (port `8800` is opened on your node on `localhost` only--you may want to forward the port to your workstation to access the admin console). Enter your password and click on “Troubleshoot” in the top menu. Click “Analyze Gitpod” to create a support bundle that contains relevant logs and configs.\n\n![kots-troubleshoot](../../static/images/docs/self-hosted/kots-troubleshoot.png)\n\nCreating the support bundle will take some while. Once it is ready, you can inspect the content. Nothing will be shared with us unless you have explicitly chosen to do so.\n\n![kots-troubleshoot](../../static/images/docs/self-hosted/kots-support-bundle-analysis.png)","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/support-bundle","loc":{"lines":{"from":21,"to":27}}}}],["2327",{"pageContent":"---\nsection: self-hosted/latest\nsubsection: troubleshooting\ntitle: Troubleshooting\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Troubleshooting Self-Hosted Gitpod\n\n> ⚠️ **Self-hosted as a product is no longer supported**\n>\n> The last official update of this product is the [November 2022 self-hosted release](https://www.gitpod.io/changelog/november-self-hosted-release). We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our [free community license](https://www.gitpod.io/community-license). However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n> Read [our blog on Gitpod Dedicated](/blog/introducing-gitpod-dedicated) to learn why we made the decision to discontinue self-hosted.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/troubleshooting","loc":{"lines":{"from":1,"to":16}}}}],["2328",{"pageContent":"Something is wrong with your Gitpod installation? Please refer to the following troubleshooting resources. You can also take a look at our [support page](/support) to learn how to reach our community and support team for help.\n\n- [Generating a Support Bundle](./support-bundle)\n- [Gitpod provided Config Patches](./config-patches)\n- [Stop running workspaces](./stop-workspaces)\n- [Prevent workspace starts](/docs/configure/self-hosted/latest/prevent-workspace-starts)\n- [Manage cluster nodes](/docs/configure/self-hosted/latest/manage-cluster-nodes)","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/troubleshooting","loc":{"lines":{"from":18,"to":24}}}}],["2329",{"pageContent":"---\nsection: self-hosted/latest\nsubsection: reference\ntitle: Telemetry in Gitpod Self-Hosted\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Telemetry\n\n> ⚠️ **Self-hosted as a product is no longer supported**\n>\n> The last official update of this product is the [November 2022 self-hosted release](https://www.gitpod.io/changelog/november-self-hosted-release). We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our [free community license](https://www.gitpod.io/community-license). However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n> Read [our blog on Gitpod Dedicated](/blog/introducing-gitpod-dedicated) to learn why we made the decision to discontinue self-hosted.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/telemetry","loc":{"lines":{"from":1,"to":16}}}}],["2330",{"pageContent":"We optionally collect telemetry from Gitpod Self-Hosted installations to better understand the needs and use cases of the Gitpod community. Collected telemetry contains simple usage statistics like the number of users and workspaces. Our [Privacy Policy](https://www.gitpod.io/privacy) describes in detail how we use this data.\n\nTo provide individualized support to enterprise customers we optionally collect a customer ID. This customer ID provides insights into enterprise adoption of Gitpod and helps us ensure that customers get the best value from their installations. Self-hosted installations using the community license do not have a customer ID and will be anonymous.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/telemetry","loc":{"lines":{"from":18,"to":20}}}}],["2331",{"pageContent":"Controlling your telemetry\n\nYou can preview your usage telemetry, control how much information you share, and enable/disable all usage telemetry on `Settings` tab on the `Admin` dashboard. To anonymize your usage telemetry, uncheck the **Include customer ID in telemetry** option. To fully disable telemetry, uncheck the **Enable usage telemetry** option.\n\nA preview of your usage telemetry is available on the settings page to provide transparency about the data we'd like to collect.\n\n![Enable Service Ping in Admin Settings](../../../static/images/docs/self-hosted/telemetry-setting.png)","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/telemetry","loc":{"lines":{"from":22,"to":28}}}}],["2332",{"pageContent":"---\nsection: self-hosted/latest\nsubsection: operational-guides\ntitle: Updating Gitpod Self-Hosted\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# How to Update your Gitpod Installation\n\n> ⚠️ **Self-hosted as a product is no longer supported**\n>\n> The last official update of this product is the [November 2022 self-hosted release](https://www.gitpod.io/changelog/november-self-hosted-release). We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our [free community license](https://www.gitpod.io/community-license). However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n> Read [our blog on Gitpod Dedicated](/blog/introducing-gitpod-dedicated) to learn why we made the decision to discontinue self-hosted.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/updating","loc":{"lines":{"from":1,"to":16}}}}],["2333",{"pageContent":"At first, you must decide on an [update strategy](#update-strategies), and follow related instructions.\n\nAfter following instructions for your desired update strategy, you need to start the installation admin console. In a terminal with configured `kubectl` run the following command (`<namespace>` is the Kubernetes namespace your Gitpod installation has been installed to):\n\n```shell\n$ kubectl kots admin-console --namespace <namespace>","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/updating","loc":{"lines":{"from":18,"to":23}}}}],["2334",{"pageContent":"Open `http://localhost:8800` (port `8800` is opened on your node on `localhost` only—you may want to forward the port to your workstation to access the admin console). Enter your password. Click on “Check for update”.\n\n> **Note:** For air gapped installations, you need to click `Upload a new version` to upload a new version and then deploy it. A new version is made available to you to download via the download portal provided to you by Gitpod.\n\nWhen an update is available, you will be asked to deploy the new version. You can run preflight checks on the new version and when you press deploy your current running version will be updated.\n\nIn most cases, updates should work without further effort - and your existing data is carried over. In some cases (with breaking changes) we will provide instructions on how to upgrade to a specific version in our [Update Guides](../latest/upgrade-guides).","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/updating","loc":{"lines":{"from":26,"to":32}}}}],["2335",{"pageContent":"> Gitpod allows you to [apply custom labels, annotations and environment variables to your resources](./advanced/customization). When using this feature, you will need to manually delete resources that have immutable labels on them for updates to take effect. See the [documentation](./advanced/customization#limitations) for full details.\n\n![kots-admin-dashboard](../../static/images/docs/self-hosted/kots-admin-dashboard.png)","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/updating","loc":{"lines":{"from":34,"to":36}}}}],["2336",{"pageContent":"Update Strategies\n\nYou can deploy different strategies to update your Gitpod instance. Each strategy comes with trade-offs regarding downtime, risk, and cost. In any case, you should ensure that the chosen strategy matches your (company’s) risk profile and that every part of your update strategy (incl. rollbacks) is regularly practiced.\n\nPlease refer to [Update Guides](../latest/upgrade-guides) to check for breaking changes that need to be handled as part of your upgrade.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/updating","loc":{"lines":{"from":38,"to":42}}}}],["2337",{"pageContent":"Maintenance Window (Higher downtime, low risk and medium cost) - Recommended\n\n> **Important:** [Single Cluster Reference Architecture](../latest/reference-architecture/single-cluster-ref-arch) is not highly-available, please [stop workspaces](./stop-workspaces) and [prevent workspace starts](./prevent-workspace-starts) prior to proceeding.\n\nIn this strategy, you have scheduled maintenance windows where you take down your entire Gitpod installation, update it, test it, and then make it available again. Ideally, this is done during times of low demand, e.g. outside of work hours.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/updating","loc":{"lines":{"from":44,"to":48}}}}],["2338",{"pageContent":"Secondary Staging Deployment (medium downtime, lower risk, higher cost)\n\n> **Important:** [Single Cluster Reference Architecture](../latest/reference-architecture/single-cluster-ref-arch) is not highly-available, please [stop workspaces](./stop-workspaces) and [prevent workspace starts](./prevent-workspace-starts) prior to proceeding.\n\nIn this strategy, you run the newest version of Gitpod on a secondary (staging) cluster to ensure compatibility/fitness of the newest version within your specific environment. Given that you are testing on a secondary cluster, you save on downtime in your primary cluster. If you are confident in the release, you can then also apply the update to your primary cluster. Given that workspace startups may fail for a brief period _during_ the update process, a maintenance window (albeit smaller) will still be required.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/updating","loc":{"lines":{"from":50,"to":54}}}}],["2339",{"pageContent":"Live update (not available, yet)\n\n> **Important:** Please check back soon, we're planning high-availability [reference architecture](../latest/reference-architecture).\n\nThe [Single Cluster Reference Architecture](../latest/reference-architecture/single-cluster-ref-arch) does not support live update. Please choose another update strategy.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/updating","loc":{"lines":{"from":56,"to":60}}}}],["2340",{"pageContent":"---\nsection: self-hosted/latest\nsubsection: reference\ntitle: Upgrade Guides and Breaking Changes\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Upgrade Guides and Breaking Changes\n\n> ⚠️ **Self-hosted as a product is no longer supported**\n>\n> The last official update of this product is the [November 2022 self-hosted release](https://www.gitpod.io/changelog/november-self-hosted-release). We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our [free community license](https://www.gitpod.io/community-license). However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n> Read [our blog on Gitpod Dedicated](/blog/introducing-gitpod-dedicated) to learn why we made the decision to discontinue self-hosted.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/upgrade-guides","loc":{"lines":{"from":1,"to":16}}}}],["2341",{"pageContent":"This page informs you if there are specific considerations to take into account when upgrading to a specific version. If no breaking changes and thus specific recommendations when updating are mentioned here (or if they do not apply to you), please follow the normal upgrade procedure mentioned on the [Updating your Gitpod Installation](../latest/updating) page.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/upgrade-guides","loc":{"lines":{"from":18,"to":18}}}}],["2342",{"pageContent":"2022.09\n\n### Security\n\nThis release includes security fixes addressing information leakage in logs; see the [security announcement log](https://www.gitpod.io/security/log) for more information.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/upgrade-guides","loc":{"lines":{"from":20,"to":24}}}}],["2343",{"pageContent":"Breaking Changes\n\n- [Single Cluster Reference Architecture](https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/single-cluster-ref-arch) changes:\n  - Regular workspaces and headless workspaces are isolated to separate node pools to help avoid noisy neighbor issues between the two and guarantee maximum performance for workspaces\n  - Workspace Services (such as `ws-manager`) are deployed to the services nodepool to prevent potential service degradation from high `ws-daemon` memory use.\n  - We've increased the default node size to 16 core / 64 GB nodes. This is to allow for more workspaces per node, and avoid the scenario where there is just one workspace per node. We've also added [documentation](https://www.gitpod.io/docs/configure/self-hosted/latest/configuring-workspace-resources) to detail our recommendations around workspace resources.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/upgrade-guides","loc":{"lines":{"from":26,"to":31}}}}],["2344",{"pageContent":"2022.08\n\n> There is no expected impact from these changes if using KOTS. These are documented for transparency purposes only.\n> **Custom labels from the pod selector labels removed**\n\n[11954](https://github.com/gitpod-io/gitpod/pull/11954): remove custom labels from the pod selector labels. This removes this [limitation](https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/customization#limitations) so this is a long-term improvement. The impact of this should be handled transparently for you by the KOTS installer.\n\n**Usage of PodSecurityPolicies removed**","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/upgrade-guides","loc":{"lines":{"from":33,"to":40}}}}],["2345",{"pageContent":"**Usage of PodSecurityPolicies removed**\n\n[12336](https://github.com/gitpod-io/gitpod/pull/12336): Removal of PodSecurityPolicies. These were deprecated from Kubernetes 1.21 and removed from 1.25. This allows Gitpod to run on Kubernetes 1.25+, which is scheduled for imminent release. If you have PodSecurityPolicies enabled on your cluster, we suggest you disable them as soon as possible. If an installation is deployed to a cluster with PSPs enabled, you will need to add `experimental.common.usePodSecurityPolicies = true` to a [config-patch file](./config-patches) - however, do note that this is deprecated and exists to ease the transition away from PSPs.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/upgrade-guides","loc":{"lines":{"from":40,"to":42}}}}],["2346",{"pageContent":"2022.07\n\n### Setting the service type of the proxy component\n\nYou can now configure the service type of the proxy service in the installation UI (see image below) - you do not need to upload a `.yaml` file as a [config patch](./config-patches) anymore to configure this. However, having it in the config patch will still work until December.\n\n![proxy service type UI](../../static/images/docs/self-hosted/proxy-service-type-ui.png)","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/upgrade-guides","loc":{"lines":{"from":44,"to":50}}}}],["2347",{"pageContent":"Setting the default workspace image and which image registries the default image can be pulled from\n\nWe've moved the configuration of the default workspace image and the default base image registry whitelist out of the experimental section of the [config-patch](../latest/config-patches) file. The latter was also renamed. Using them in the experimental section will still work for the time being (until approx. December 2022).\n\n**Before:**\n\n```yaml\nexperimental:\n  webApp:\n    server:\n      defaultBaseImageRegistryWhitelist:\n        - <allowed registries>\n    workspaceDefaults:\n      workspaceImage: <path to your default workspace image>\n```\n\n**After:**\n\n```yaml\nworkspace:\n  workspaceImage: <path to your default workspace image>\ncontainerRegistry:\n  privateBaseImageAllowList:\n    - <allowed registries>\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/upgrade-guides","loc":{"lines":{"from":52,"to":76}}}}],["2348",{"pageContent":"---\nsection: help/contribute\ntitle: Contribute Content\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Contribute Content\n\nCreating content (blog posts, YouTube and TikTok videos, presentations and demos) that shares tips+tricks and your experiences with Gitpod is amongst one of the most impactful ways you can help contribute. Everyone at Gitpod including our founders, engineers and product managers loves [reading](https://ghuntley.com/anywhere/) and [watching](https://www.youtube.com/watch?v=XLOwNev0TM0&t=18s) content created by people in our community.\n\nGitpod maintains an invitational showcase of community contributed guides which are used to highlight content that is hosted elsewhere. Please do not raise pull-requests to the website that adds guides or blog posts without prior discussion and consent.","metadata":{"source":"https://www.gitpod.io/docs/help/contribute/content","loc":{"lines":{"from":1,"to":14}}}}],["2349",{"pageContent":"Instead follow the IndieWeb guidelines of [POSSE](https://indieweb.org/POSSE) when authoring content by posting first on your own site/channel. By posting content first on your own site/channel then a direct feedback cycle forms between you and your readership through ownership of your content that helps you to improve your content.\n\nAfter the content has been published please:\n\n1. Send a tweet that mentions the [@Gitpod](http://twitter.com/gitpod) Twitter account which will broadcast the content internally within the company.\n\n1. Add a link to the content at https://github.com/shaal/awesome-gitpod\n\nThanks 🧡","metadata":{"source":"https://www.gitpod.io/docs/help/contribute/content","loc":{"lines":{"from":16,"to":24}}}}],["2350",{"pageContent":"---\nsection: help/contribute\ntitle: Code style\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Code Style\n\n## Go\n\nWe typically follow the [Uber Go Style Guide](https://github.com/uber-go/guide/blob/master/style.md) as our north star as the guide is comprehensive but not overburdening, easy to read and pretty good. Here's how our codebase differs:\n\n- Gitpod uses `xerrors` for error wrapping instead of `pkg/errors`\n\n## TypeScript\n\nTBA","metadata":{"source":"https://www.gitpod.io/docs/help/contribute/features-and-patches/code-style","loc":{"lines":{"from":1,"to":20}}}}],["2351",{"pageContent":"---\nsection: help/contribute\ntitle: Commit Message Convention\n---\n\n <script context=\"module\">\n   export const prerender = true;\n </script>\n\n# Commit Message Convention\n\nWe do not yet have an established convention but one is [currently being discussed](https://www.notion.so/gitpod/Commit-Message-Convention-f1dac0d4dba6405c9086077c0fd65814).","metadata":{"source":"https://www.gitpod.io/docs/help/contribute/features-and-patches/commit-message-convention","loc":{"lines":{"from":1,"to":12}}}}],["2352",{"pageContent":"---\nsection: help/contribute\ntitle: Submitting a pull request\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Submitting a pull request\n\nBefore you submit your pull request, please:\n\n- If you are considering submitting a pull-request that is more than a simple fix, open a discussion on GitHub first with your proposal.\n- Search [GitHub](https://github.com/gitpod-io/gitpod/pulls) for an open or closed Pull Request that relates to your submission.\n\nMake your changes in a new git branch:\n\n```shell\ngit checkout -b my-fix-branch main\n```\n\n- Follow our [Coding Style](code-style).\n- Create your patch, **including appropriate test cases and documentation**.\n- Run the test suite.\n- Commit your changes using a descriptive commit message that follows our [commit message conventions](commit-message-convention).\n\n```shell\ngit commit -a","metadata":{"source":"https://www.gitpod.io/docs/help/contribute/features-and-patches/submitting-a-pull-request","loc":{"lines":{"from":1,"to":29}}}}],["2353",{"pageContent":"Note: the optional commit `-a` command line option will automatically \"add\" and \"rm\" edited files.\n\n- Build your changes locally to ensure all the tests pass.\n\n- Push your branch to GitHub:\n\n```shell\ngit push origin my-fix-branch\n```\n\nIn GitHub, send a pull request to `gitpod-io:main`.\n\nIf we suggest changes, then:\n\n- Make the required updates.\n- Re-run the test suite to ensure tests are still passing.\n- Commit your changes to your branch (e.g. `my-fix-branch`).\n- Push the changes to your GitHub repository (this will update your Pull Request).\n\nThat's it! Thank you for your contribution!","metadata":{"source":"https://www.gitpod.io/docs/help/contribute/features-and-patches/submitting-a-pull-request","loc":{"lines":{"from":32,"to":51}}}}],["2354",{"pageContent":"[Optional] Submitting a pull request with Gitpod\n\nBefore you submit your pull request, please:\n\n- If you are considering submitting a pull-request that is more than a simple fix, open a discussion on GitHub first with your proposal.\n- Search [GitHub](https://github.com/gitpod-io/gitpod/pulls) for an open or closed Pull Request that relates to your submission.\n\nIf we suggest changes, then:\n\n- Make the required updates.\n- Re-run the test suite to ensure tests are still passing.\n- Commit your changes to your branch (e.g. `my-fix-branch`).\n- Push the changes to your GitHub repository (this will update your Pull Request).\n\nThat's it! Thank you for your contribution!","metadata":{"source":"https://www.gitpod.io/docs/help/contribute/features-and-patches/submitting-a-pull-request","loc":{"lines":{"from":53,"to":67}}}}],["2355",{"pageContent":"---\nsection: help/contribute\ntitle: Contribute Features & Patches\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Contribute Features & Patches\n\nGitpod is developed as an open core product under an [OSI-approved open source license](https://github.com/gitpod-io/gitpod), making the majority of functionality freely usable and distributable, even for commercial use. As is typical with open core enterprise features are developed under a non OSI-approved license. Where contributions are not trivial (\"de minimis\") Gitpod requires contributors to sign a contributors license agreement before we will be able to merge your contribution.","metadata":{"source":"https://www.gitpod.io/docs/help/contribute/features-and-patches","loc":{"lines":{"from":1,"to":12}}}}],["2356",{"pageContent":"Gitpodders have built-in the open for the last decade. Transparency is key and as a company Gitpod strives to be as open about as many things as possible. This refers to both developing Gitpod in the open (public issues, public roadmap, public milestones) as well as how employees interact on a personal level with other human beings. Gitpodders are strong believers in the benefits that an open culture provides. At Gitpod we are open-minded, inclusive, transparent, and curious. We always remain students of the game, not masters of the game.\n\n- [Code Style](features-and-patches/code-style)\n- [Commit message convention](features-and-patches/commit-message-convention)\n- [Submitting a pull request](features-and-patches/submitting-a-pull-request)\n\nWe 🧡 the people who are involved in this project, and we’d love to help you with onboarding. Drop by the `#contributing` channel on the [Gitpod Discord server](https://www.gitpod.io/chat) and _ask for help_.","metadata":{"source":"https://www.gitpod.io/docs/help/contribute/features-and-patches","loc":{"lines":{"from":14,"to":20}}}}],["2357",{"pageContent":"---\nsection: help/contribute\ntitle: Contribute Documentation\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Contribute Documentation\n\nGitpod has a dedicated team that looks after our documentation. You can help improve our documentation by:\n\n- Using the feedback widget at the bottom of each page in our documentation. All feedback is recorded into a spreadsheet and we use this information to drive the process to improve the Gitpod documentation.\n- Submitting documentation updates via the \"Edit on Gitpod button\" (top right on every page) when you learn something that you think other developers would also benefit from.\n\nWe 🧡 the people who are involved in this project, and we’d love to help you with onboarding. Drop by the `#contributing` channel on the [Gitpod Discord server](https://www.gitpod.io/chat) and _ask for help_.","metadata":{"source":"https://www.gitpod.io/docs/help/contribute/documentation","loc":{"lines":{"from":1,"to":17}}}}],["2358",{"pageContent":"---\nsection: quickstart\ntitle: Agda template\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Agda Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [Agda](https://github.com/gitpod-io/template-agda) template.\n\nThe following guide will:\n\n- Walk you through a real world example with an existing Gitpod config\n- Introduce you to prebuilds\n- Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n## Step 1: Clone Git repository\n\n- Create a new repository based on the [Agda template](https://github.com/gitpod-io/template-agda/generate).\n- Name it e.g. `my-agda-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/agda","loc":{"lines":{"from":1,"to":25}}}}],["2359",{"pageContent":"Step 1: Clone Git repository\n\n- Create a new repository based on the [Agda template](https://github.com/gitpod-io/template-agda/generate).\n- Name it e.g. `my-agda-template`.\n\n## Step 2: Install the Gitpod app\n\n- Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n  Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for Maven or NPM downloading the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/agda","loc":{"lines":{"from":25,"to":34}}}}],["2360",{"pageContent":"Step 3: First prebuild\n\n- Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/<my-agda-template>`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/agda","loc":{"lines":{"from":36,"to":42}}}}],["2361",{"pageContent":"Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](../../../static/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/agda","loc":{"lines":{"from":44,"to":56}}}}],["2362",{"pageContent":"![Browser Extension](../../../static/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/agda","loc":{"lines":{"from":56,"to":70}}}}],["2363",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/agda","loc":{"lines":{"from":72,"to":74}}}}],["2364",{"pageContent":"Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n- [Getting started with your own project](/docs/configure)\n- [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/agda","loc":{"lines":{"from":76,"to":81}}}}],["2365",{"pageContent":"---\nsection: quickstart\ntitle: C template\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# C Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [C](https://github.com/gitpod-io/template-c) template.\n\nThe following guide will:\n\n- Walk you through a real world example with an existing Gitpod config\n- Introduce you to prebuilds\n- Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n## Step 1: Clone Git repository\n\n- Create a new repository based on the [C template](https://github.com/gitpod-io/template-c/generate).\n- Name it e.g. `my-c-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/c","loc":{"lines":{"from":1,"to":25}}}}],["2366",{"pageContent":"Step 1: Clone Git repository\n\n- Create a new repository based on the [C template](https://github.com/gitpod-io/template-c/generate).\n- Name it e.g. `my-c-template`.\n\n## Step 2: Install Gitpod app\n\n- Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n  Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for installation of dependencies from the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/c","loc":{"lines":{"from":25,"to":34}}}}],["2367",{"pageContent":"Step 3: First prebuild\n\n- Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/my-c-template`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/c","loc":{"lines":{"from":36,"to":42}}}}],["2368",{"pageContent":"Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](../../../static/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/c","loc":{"lines":{"from":44,"to":56}}}}],["2369",{"pageContent":"![Browser Extension](../../../static/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/c","loc":{"lines":{"from":56,"to":70}}}}],["2370",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/c","loc":{"lines":{"from":72,"to":74}}}}],["2371",{"pageContent":"Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n- [Getting started with your own project](/docs/configure)\n- [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/c","loc":{"lines":{"from":76,"to":81}}}}],["2372",{"pageContent":"---\nsection: quickstart\ntitle: Clojure template\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Clojure Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [Clojure](https://github.com/gitpod-io/template-clojure) template.\n\nThe following guide will:\n\n- Walk you through a real world example with an existing Gitpod config\n- Introduce you to prebuilds\n- Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n## Step 1: Clone Git repository\n\n- Create a new repository based on the [Clojure template](https://github.com/gitpod-io/template-clojure/generate).\n- Name it e.g. `my-clojure-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/clojure","loc":{"lines":{"from":1,"to":25}}}}],["2373",{"pageContent":"Step 1: Clone Git repository\n\n- Create a new repository based on the [Clojure template](https://github.com/gitpod-io/template-clojure/generate).\n- Name it e.g. `my-clojure-template`.\n\n## Step 2: Install Gitpod app\n\n- Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n  Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for installation of dependencies from the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/clojure","loc":{"lines":{"from":25,"to":34}}}}],["2374",{"pageContent":"Step 3: First prebuild\n\n- Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/my-clojure-template`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/clojure","loc":{"lines":{"from":36,"to":42}}}}],["2375",{"pageContent":"Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](../../../static/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/clojure","loc":{"lines":{"from":44,"to":56}}}}],["2376",{"pageContent":"![Browser Extension](../../../static/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/clojure","loc":{"lines":{"from":56,"to":70}}}}],["2377",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/clojure","loc":{"lines":{"from":72,"to":74}}}}],["2378",{"pageContent":"Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n- [Getting started with your own project](/docs/configure)\n- [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/clojure","loc":{"lines":{"from":76,"to":81}}}}],["2379",{"pageContent":"---\nsection: quickstart\ntitle: Coq template\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Coq Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [Coq](https://github.com/gitpod-io/template-coq) template.\n\nThe following guide will:\n\n- Walk you through a real world example with an existing Gitpod config\n- Introduce you to prebuilds\n- Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n### Step 1: Clone Git repository\n\n- Create a new repository based on the [Coq template](https://github.com/gitpod-io/template-coq/generate).\n- Name it e.g. `my-coq-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/coq","loc":{"lines":{"from":1,"to":25}}}}],["2380",{"pageContent":"Step 1: Clone Git repository\n\n- Create a new repository based on the [Coq template](https://github.com/gitpod-io/template-coq/generate).\n- Name it e.g. `my-coq-template`.\n\n### Step 2: Install Gitpod app\n\n- Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n  Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for installation of dependencies from the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/coq","loc":{"lines":{"from":25,"to":34}}}}],["2381",{"pageContent":"Step 3: First prebuild\n\n- Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/my-coq-template`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/coq","loc":{"lines":{"from":36,"to":42}}}}],["2382",{"pageContent":"Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](../../../static/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/coq","loc":{"lines":{"from":44,"to":56}}}}],["2383",{"pageContent":"![Browser Extension](../../../static/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/coq","loc":{"lines":{"from":56,"to":70}}}}],["2384",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/coq","loc":{"lines":{"from":72,"to":74}}}}],["2385",{"pageContent":"Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n- [Getting started with your own project](/docs/configure)\n- [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/coq","loc":{"lines":{"from":76,"to":81}}}}],["2386",{"pageContent":"---\nsection: quickstart\ntitle: Datasette template\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Datasette Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [Datasette](https://github.com/gitpod-io/template-datasette) template.\n\nThe following guide will:\n\n- Walk you through a real world example with an existing Gitpod config\n- Introduce you to prebuilds\n- Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n## Step 1: Clone Git repository\n\n- Create a new repository based on the [Datasette template](https://github.com/gitpod-io/template-datasette/generate).\n- Name it e.g. `my-datasette-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/datasette","loc":{"lines":{"from":1,"to":25}}}}],["2387",{"pageContent":"Step 1: Clone Git repository\n\n- Create a new repository based on the [Datasette template](https://github.com/gitpod-io/template-datasette/generate).\n- Name it e.g. `my-datasette-template`.\n\n## Step 2: Install the Gitpod app\n\n- Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n  Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for Maven or NPM downloading the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/datasette","loc":{"lines":{"from":25,"to":34}}}}],["2388",{"pageContent":"Step 3: First prebuild\n\n- Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/<my-datasette-template>`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/datasette","loc":{"lines":{"from":36,"to":42}}}}],["2389",{"pageContent":"Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](../../../static/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/datasette","loc":{"lines":{"from":44,"to":56}}}}],["2390",{"pageContent":"![Browser Extension](../../../static/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/datasette","loc":{"lines":{"from":56,"to":70}}}}],["2391",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/datasette","loc":{"lines":{"from":72,"to":74}}}}],["2392",{"pageContent":"Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n- [Getting started with your own project](/docs/configure)\n- [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/datasette","loc":{"lines":{"from":76,"to":81}}}}],["2393",{"pageContent":"---\nsection: quickstart\ntitle: C++ CMake template\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# C++ CMake Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [C++ CMake](https://github.com/gitpod-io/template-cpp) template.\n\nThe following guide will:\n\n- Walk you through a real world example with an existing Gitpod config\n- Introduce you to prebuilds\n- Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n### Step 1: Clone Git repository\n\n- Create a new repository based on the [C template](https://github.com/gitpod-io/template-cpp/generate).\n- Name it e.g. `my-cpp-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/cpp","loc":{"lines":{"from":1,"to":25}}}}],["2394",{"pageContent":"Step 1: Clone Git repository\n\n- Create a new repository based on the [C template](https://github.com/gitpod-io/template-cpp/generate).\n- Name it e.g. `my-cpp-template`.\n\n### Step 2: Install Gitpod app\n\n- Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n  Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for installation of dependencies from the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/cpp","loc":{"lines":{"from":25,"to":34}}}}],["2395",{"pageContent":"Step 3: First prebuild\n\n- Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/my-cpp-template`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/cpp","loc":{"lines":{"from":36,"to":42}}}}],["2396",{"pageContent":"Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](../../../static/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/cpp","loc":{"lines":{"from":44,"to":56}}}}],["2397",{"pageContent":"![Browser Extension](../../../static/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/cpp","loc":{"lines":{"from":56,"to":70}}}}],["2398",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/cpp","loc":{"lines":{"from":72,"to":74}}}}],["2399",{"pageContent":"Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n- [Getting started with your own project](/docs/configure)\n- [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/cpp","loc":{"lines":{"from":76,"to":81}}}}],["2400",{"pageContent":"---\nsection: quickstart\ntitle: Deno template\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Deno Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [Deno](https://github.com/gitpod-io/template-typescript-deno) template.\n\nThe following guide will:\n\n- Walk you through a real world example with an existing Gitpod config\n- Introduce you to prebuilds\n- Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n## Step 1: Clone Git repository\n\n- Create a new repository based on the [Deno template](https://github.com/gitpod-io/template-typescript-deno/generate).\n- Name it e.g. `my-typescript-deno-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/deno","loc":{"lines":{"from":1,"to":25}}}}],["2401",{"pageContent":"Step 1: Clone Git repository\n\n- Create a new repository based on the [Deno template](https://github.com/gitpod-io/template-typescript-deno/generate).\n- Name it e.g. `my-typescript-deno-template`.\n\n## Step 2: Install Gitpod app\n\n- Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n  Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for Maven or NPM downloading the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/deno","loc":{"lines":{"from":25,"to":34}}}}],["2402",{"pageContent":"Step 3: First prebuild\n\n- Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/my-typescript-deno-template`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/deno","loc":{"lines":{"from":36,"to":42}}}}],["2403",{"pageContent":"Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](../../../static/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/deno","loc":{"lines":{"from":44,"to":56}}}}],["2404",{"pageContent":"![Browser Extension](../../../static/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/deno","loc":{"lines":{"from":56,"to":70}}}}],["2405",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/deno","loc":{"lines":{"from":72,"to":74}}}}],["2406",{"pageContent":"Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n- [Getting started with your own project](/docs/configure)\n- [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/deno","loc":{"lines":{"from":76,"to":81}}}}],["2407",{"pageContent":"---\nsection: quickstart\ntitle: Docker Compose template\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Docker Compose Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [Docker Compose](https://github.com/gitpod-io/template-docker-compose) template.\n\nThe following guide will:\n\n- Walk you through a real world example with an existing Gitpod config\n- Introduce you to prebuilds\n- Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n## Step 1: Clone Git repository\n\n- Create a new repository based on the [Docker Compose template](https://github.com/gitpod-io/template-docker-compose/generate).\n- Name it e.g. `my-docker-compose-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/docker-compose","loc":{"lines":{"from":1,"to":25}}}}],["2408",{"pageContent":"Step 2: Install the Gitpod app\n\n- Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n  Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for Maven or NPM downloading the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/docker-compose","loc":{"lines":{"from":27,"to":31}}}}],["2409",{"pageContent":"Step 3: First prebuild\n\n- Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/<my-docker-compose-template>`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/docker-compose","loc":{"lines":{"from":33,"to":39}}}}],["2410",{"pageContent":"Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](../../../static/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/docker-compose","loc":{"lines":{"from":41,"to":53}}}}],["2411",{"pageContent":"![Browser Extension](../../../static/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/docker-compose","loc":{"lines":{"from":53,"to":67}}}}],["2412",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/docker-compose","loc":{"lines":{"from":69,"to":71}}}}],["2413",{"pageContent":"Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n- [Getting started with your own project](/docs/configure)\n- [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/docker-compose","loc":{"lines":{"from":73,"to":78}}}}],["2414",{"pageContent":"---\nsection: quickstart\ntitle: C# .NET template\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# C# .NET Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [C# .NET](https://github.com/gitpod-io/example-dotnet-core) template.\n\nThe following guide will:\n\n- Walk you through a real world example with an existing Gitpod config\n- Introduce you to prebuilds\n- Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n### Step 1: Clone Git repository\n\n- Create a new repository based on the [C# template](https://github.com/gitpod-io/example-dotnet-core/generate).\n- Name it e.g. `my-dotnet-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/dotnet","loc":{"lines":{"from":1,"to":25}}}}],["2415",{"pageContent":"Step 1: Clone Git repository\n\n- Create a new repository based on the [C# template](https://github.com/gitpod-io/example-dotnet-core/generate).\n- Name it e.g. `my-dotnet-template`.\n\n### Step 2: Install Gitpod app\n\n- Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n  Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for installation of dependencies from the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/dotnet","loc":{"lines":{"from":25,"to":34}}}}],["2416",{"pageContent":"Step 3: First prebuild\n\n- Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/my-dotnet-template`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/dotnet","loc":{"lines":{"from":36,"to":42}}}}],["2417",{"pageContent":"Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](../../../static/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/dotnet","loc":{"lines":{"from":44,"to":56}}}}],["2418",{"pageContent":"![Browser Extension](../../../static/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/dotnet","loc":{"lines":{"from":56,"to":70}}}}],["2419",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/dotnet","loc":{"lines":{"from":72,"to":74}}}}],["2420",{"pageContent":"Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n- [Getting started with your own project](/docs/configure)\n- [Git Integrations](/docs/integrations)\n- [.NET in Gitpod](/docs/introduction/languages/dotnet)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/dotnet","loc":{"lines":{"from":76,"to":82}}}}],["2421",{"pageContent":"---\nsection: quickstart\ntitle: Drupal template\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Drupal Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [Drupal](https://github.com/gitpod-io/template-php-drupal-ddev) template.\n\nThe following guide will:\n\n- Walk you through a real world example with an existing Gitpod config\n- Introduce you to prebuilds\n- Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n## Step 1: Clone Git repository\n\n- Create a new repository based on the [Drupal template](https://github.com/gitpod-io/template-php-drupal-ddev/generate).\n- Name it e.g. `my-drupal-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/drupal","loc":{"lines":{"from":1,"to":25}}}}],["2422",{"pageContent":"Step 1: Clone Git repository\n\n- Create a new repository based on the [Drupal template](https://github.com/gitpod-io/template-php-drupal-ddev/generate).\n- Name it e.g. `my-drupal-template`.\n\n## Step 2: Install the Gitpod app\n\n- Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n  Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for Maven or NPM downloading the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/drupal","loc":{"lines":{"from":25,"to":34}}}}],["2423",{"pageContent":"Step 3: First prebuild\n\n- Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/<my-drupal-template>`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/drupal","loc":{"lines":{"from":36,"to":42}}}}],["2424",{"pageContent":"Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](../../../static/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/drupal","loc":{"lines":{"from":44,"to":56}}}}],["2425",{"pageContent":"![Browser Extension](../../../static/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/drupal","loc":{"lines":{"from":56,"to":70}}}}],["2426",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/drupal","loc":{"lines":{"from":72,"to":74}}}}],["2427",{"pageContent":"Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n- [Getting started with your own project](/docs/configure)\n- [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/drupal","loc":{"lines":{"from":76,"to":81}}}}],["2428",{"pageContent":"---\nsection: quickstart\ntitle: Elixir template\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Elixir Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with an [Elixir](https://github.com/gitpod-io/template-elixir) template.\n\n> Thank you [@tnb24](https://github.com/tnb24) for creating the repository 🙏!\n\nThe following guide will:\n\n- Walk you through a real world example with an existing Gitpod config\n- Introduce you to prebuilds\n- Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n## Step 1: Clone Git repository\n\n- Create a new repository based on the [Elixir template](https://github.com/gitpod-io/template-elixir/generate).\n- Name it e.g. `my-elixir-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/elixir","loc":{"lines":{"from":1,"to":27}}}}],["2429",{"pageContent":"Step 1: Clone Git repository\n\n- Create a new repository based on the [Elixir template](https://github.com/gitpod-io/template-elixir/generate).\n- Name it e.g. `my-elixir-template`.\n\n## Step 2: Install Gitpod app\n\n- Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n  Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for Maven or NPM downloading the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/elixir","loc":{"lines":{"from":27,"to":36}}}}],["2430",{"pageContent":"Step 3: First prebuild\n\n- Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/my-elixir-template`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/elixir","loc":{"lines":{"from":38,"to":44}}}}],["2431",{"pageContent":"Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](../../../static/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/elixir","loc":{"lines":{"from":46,"to":58}}}}],["2432",{"pageContent":"![Browser Extension](../../../static/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/elixir","loc":{"lines":{"from":58,"to":72}}}}],["2433",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/elixir","loc":{"lines":{"from":74,"to":76}}}}],["2434",{"pageContent":"Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n- [Getting started with your own project](/docs/configure)\n- [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/elixir","loc":{"lines":{"from":78,"to":83}}}}],["2435",{"pageContent":"---\nsection: quickstart\ntitle: Elm template\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Elm Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with an [Elm](https://github.com/avh4/gitpod-template-elm) template.\n\n> Thank you [@avh4](https://github.com/avh4) for creating the repository 🙏!\n\nThe following guide will:\n\n- Walk you through a real world example with an existing Gitpod config\n- Introduce you to prebuilds\n- Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n## Step 1: Clone Git repository\n\n- Create a new repository based on the [Elm template](https://github.com/avh4/gitpod-template-elm/generate).\n- Name it e.g. `my-elm-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/elm","loc":{"lines":{"from":1,"to":27}}}}],["2436",{"pageContent":"Step 1: Clone Git repository\n\n- Create a new repository based on the [Elm template](https://github.com/avh4/gitpod-template-elm/generate).\n- Name it e.g. `my-elm-template`.\n\n## Step 2: Install Gitpod app\n\n- Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n  Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for Maven or NPM downloading the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/elm","loc":{"lines":{"from":27,"to":36}}}}],["2437",{"pageContent":"Step 3: First prebuild\n\n- Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/my-elm-template`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/elm","loc":{"lines":{"from":38,"to":44}}}}],["2438",{"pageContent":"Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](../../../static/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/elm","loc":{"lines":{"from":46,"to":58}}}}],["2439",{"pageContent":"![Browser Extension](../../../static/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/elm","loc":{"lines":{"from":58,"to":72}}}}],["2440",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/elm","loc":{"lines":{"from":74,"to":76}}}}],["2441",{"pageContent":"Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n- [Getting started with your own project](/docs/configure)\n- [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/elm","loc":{"lines":{"from":78,"to":83}}}}],["2442",{"pageContent":"---\nsection: quickstart\ntitle: Flutter template\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Flutter Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [Flutter](https://github.com/gitpod-io/template-flutter) template.\n\nThe following guide will:\n\n- Walk you through a real world example with an existing Gitpod config\n- Introduce you to prebuilds\n- Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n### Step 1: Clone Git repository\n\n- Create a new repository based on the [Flutter template](https://github.com/gitpod-io/template-flutter/generate).\n- Name it e.g. `my-flutter-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/flutter","loc":{"lines":{"from":1,"to":25}}}}],["2443",{"pageContent":"Step 1: Clone Git repository\n\n- Create a new repository based on the [Flutter template](https://github.com/gitpod-io/template-flutter/generate).\n- Name it e.g. `my-flutter-template`.\n\n### Step 2: Install Gitpod app\n\n- Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n  Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for installation of dependencies from the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/flutter","loc":{"lines":{"from":25,"to":34}}}}],["2444",{"pageContent":"Step 3: First prebuild\n\n- Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/my-flutter-template`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/flutter","loc":{"lines":{"from":36,"to":42}}}}],["2445",{"pageContent":"Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](../../../static/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/flutter","loc":{"lines":{"from":44,"to":56}}}}],["2446",{"pageContent":"![Browser Extension](../../../static/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/flutter","loc":{"lines":{"from":56,"to":70}}}}],["2447",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/flutter","loc":{"lines":{"from":72,"to":74}}}}],["2448",{"pageContent":"Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n- [Getting started with your own project](/docs/configure)\n- [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/flutter","loc":{"lines":{"from":76,"to":81}}}}],["2449",{"pageContent":"---\nsection: quickstart\ntitle: Flask template\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Flask Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [Flask](https://github.com/gitpod-io/template-python-flask) template.\n\nThe following guide will:\n\n- Walk you through a real world example with an existing Gitpod config\n- Introduce you to prebuilds\n- Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n## Step 1: Clone Git repository\n\n- Create a new repository based on the [Flask template](https://github.com/gitpod-io/template-python-flask/generate).\n- Name it e.g. `my-flask-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/flask","loc":{"lines":{"from":1,"to":25}}}}],["2450",{"pageContent":"Step 1: Clone Git repository\n\n- Create a new repository based on the [Flask template](https://github.com/gitpod-io/template-python-flask/generate).\n- Name it e.g. `my-flask-template`.\n\n## Step 2: Install the Gitpod app\n\n- Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n  Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for Maven or NPM downloading the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/flask","loc":{"lines":{"from":25,"to":34}}}}],["2451",{"pageContent":"Step 3: First prebuild\n\n- Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/<my-flask-template>`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/flask","loc":{"lines":{"from":36,"to":42}}}}],["2452",{"pageContent":"Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](../../../static/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/flask","loc":{"lines":{"from":44,"to":56}}}}],["2453",{"pageContent":"![Browser Extension](../../../static/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/flask","loc":{"lines":{"from":56,"to":70}}}}],["2454",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/flask","loc":{"lines":{"from":72,"to":74}}}}],["2455",{"pageContent":"Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n- [Getting started with your own project](/docs/configure)\n- [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/flask","loc":{"lines":{"from":76,"to":81}}}}],["2456",{"pageContent":"---\nsection: quickstart\ntitle: Go template\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Go Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [Golang](https://github.com/gitpod-io/template-golang-cli) template.\n\nThe following guide will:\n\n- Walk you through a real world example with an existing Gitpod config\n- Introduce you to prebuilds\n- Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n## Step 1: Clone Git repository\n\n- Create a new repository based on the [Go template](https://github.com/gitpod-io/template-golang-cli/generate).\n- Name it e.g. `my-go-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/go","loc":{"lines":{"from":1,"to":25}}}}],["2457",{"pageContent":"Step 1: Clone Git repository\n\n- Create a new repository based on the [Go template](https://github.com/gitpod-io/template-golang-cli/generate).\n- Name it e.g. `my-go-template`.\n\n## Step 2: Install Gitpod app\n\n- Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n  Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for Maven or NPM downloading the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/go","loc":{"lines":{"from":25,"to":34}}}}],["2458",{"pageContent":"Step 3: First prebuild\n\n- Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/template-golang-cli`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/go","loc":{"lines":{"from":36,"to":42}}}}],["2459",{"pageContent":"Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](../../../static/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/go","loc":{"lines":{"from":44,"to":56}}}}],["2460",{"pageContent":"![Browser Extension](../../../static/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/go","loc":{"lines":{"from":56,"to":70}}}}],["2461",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/go","loc":{"lines":{"from":72,"to":74}}}}],["2462",{"pageContent":"Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n- [Getting started with your own project](/docs/configure)\n- [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/go","loc":{"lines":{"from":76,"to":81}}}}],["2463",{"pageContent":"---\nsection: quickstart\ntitle: Grain template\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Grain Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [Grain](https://github.com/gitpod-io/template-grain) template.\n\nThe following guide will:\n\n- Walk you through a real world example with an existing Gitpod config\n- Introduce you to prebuilds\n- Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n### Step 1: Clone Git repository\n\n- Create a new repository based on the [Grain template](https://github.com/gitpod-io/template-grain/generate).\n- Name it e.g. `my-grain-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/grain","loc":{"lines":{"from":1,"to":25}}}}],["2464",{"pageContent":"Step 1: Clone Git repository\n\n- Create a new repository based on the [Grain template](https://github.com/gitpod-io/template-grain/generate).\n- Name it e.g. `my-grain-template`.\n\n### Step 2: Install Gitpod app\n\n- Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n  Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for installation of dependencies from the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/grain","loc":{"lines":{"from":25,"to":34}}}}],["2465",{"pageContent":"Step 3: First prebuild\n\n- Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/my-grain-template`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/grain","loc":{"lines":{"from":36,"to":42}}}}],["2466",{"pageContent":"Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](../../../static/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/grain","loc":{"lines":{"from":44,"to":56}}}}],["2467",{"pageContent":"![Browser Extension](../../../static/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/grain","loc":{"lines":{"from":56,"to":70}}}}],["2468",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/grain","loc":{"lines":{"from":72,"to":74}}}}],["2469",{"pageContent":"Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n- [Getting started with your own project](/docs/configure)\n- [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/grain","loc":{"lines":{"from":76,"to":81}}}}],["2470",{"pageContent":"---\nsection: quickstart\ntitle: IHP template\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# IHP Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with the official [IHP template](https://github.com/gitpod-io/template-ihp).\n\nThe following guide will:\n\n- Walk you through a real world example with an existing Gitpod config\n- Introduce you to prebuilds\n- Demonstrate the benefits of ephemeral development environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n## Step 1: Clone Git repository\n\n- Create a new repository based on the [IHP template](https://github.com/gitpod-io/template-ihp/generate).\n- Name it e.g. `my-ihp-app`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/ihp","loc":{"lines":{"from":1,"to":25}}}}],["2471",{"pageContent":"Step 1: Clone Git repository\n\n- Create a new repository based on the [IHP template](https://github.com/gitpod-io/template-ihp/generate).\n- Name it e.g. `my-ihp-app`.\n\n## Step 2: Install the Gitpod app\n\n- Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n  Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for Maven or NPM downloading the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/ihp","loc":{"lines":{"from":25,"to":34}}}}],["2472",{"pageContent":"Step 3: First prebuild\n\n- Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/<my-ihp-app>`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/ihp","loc":{"lines":{"from":36,"to":42}}}}],["2473",{"pageContent":"Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured development environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](../../../static/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/ihp","loc":{"lines":{"from":44,"to":56}}}}],["2474",{"pageContent":"![Browser Extension](../../../static/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/ihp","loc":{"lines":{"from":56,"to":70}}}}],["2475",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/ihp","loc":{"lines":{"from":72,"to":74}}}}],["2476",{"pageContent":"Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n- [Getting started with your own project](/docs/configure)\n- [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/ihp","loc":{"lines":{"from":76,"to":81}}}}],["2477",{"pageContent":"---\nsection: quickstart\ntitle: Haskell template\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Haskell Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [Haskell](https://github.com/gitpod-io/template-haskell) template.\n\nThe following guide will:\n\n- Walk you through a real world example with an existing Gitpod config\n- Introduce you to prebuilds\n- Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n## Step 1: Clone Git repository\n\n- Create a new repository based on the [Haskell template](https://github.com/gitpod-io/template-haskell/generate).\n- Name it e.g. `my-haskell-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/haskell","loc":{"lines":{"from":1,"to":25}}}}],["2478",{"pageContent":"Step 1: Clone Git repository\n\n- Create a new repository based on the [Haskell template](https://github.com/gitpod-io/template-haskell/generate).\n- Name it e.g. `my-haskell-template`.\n\n## Step 2: Install the Gitpod app\n\n- Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n  Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for Maven or NPM downloading the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/haskell","loc":{"lines":{"from":25,"to":34}}}}],["2479",{"pageContent":"Step 3: First prebuild\n\n- Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/<my-haskell-template>`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/haskell","loc":{"lines":{"from":36,"to":42}}}}],["2480",{"pageContent":"Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](../../../static/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/haskell","loc":{"lines":{"from":44,"to":56}}}}],["2481",{"pageContent":"![Browser Extension](../../../static/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/haskell","loc":{"lines":{"from":56,"to":70}}}}],["2482",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/haskell","loc":{"lines":{"from":72,"to":74}}}}],["2483",{"pageContent":"Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n- [Getting started with your own project](/docs/configure)\n- [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/haskell","loc":{"lines":{"from":76,"to":81}}}}],["2484",{"pageContent":"---\nsection: getting-started\ntitle: Quickstart\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n<script lang=\"ts\">\n  import PopularQuickstart from \"$lib/components/docs/quickstart/popular-quickstart.svelte\";\n  import QuickstartSearch from \"$lib/components/docs/quickstart/quickstart-search.svelte\";\n  import OpenGraph from \"$lib/components/open-graph.svelte\";\n</script>\n\n<OpenGraph\ndata={{\n    description:\n      \"Learn how to start using Gitpod on an example project/template that is hosted on GitHub in less than 5 minutes. Get up and running with Gitpod quickly.\",\n    title: \"Quickstart - Gitpod\",\n    keywords: \"template, get started, example\",\n  }}\n/>\n\n# Quickstart","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart","loc":{"lines":{"from":1,"to":25}}}}],["2485",{"pageContent":"# Quickstart\n\nLearn how to start using Gitpod on an example project that is hosted on GitHub in less than 5 minutes. For simplicity we use GitHub as the git hoster but the steps outlined work equally well for GitLab and Bitbucket. This section helps you understand the features and advantages of Gitpod in a learning environment. All templates are pre-configured to use Gitpod and ready-to-code:","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart","loc":{"lines":{"from":25,"to":27}}}}],["2486",{"pageContent":"Templates\n\n### Popular Templates\n\n<PopularQuickstart />\n\n### Find your template\n\n<QuickstartSearch />\n\n<br>\n\n💡 Find more such templates on [Gitpod Samples](https://github.com/gitpod-samples)\n\n## Installing the Gitpod browser extension\n\nYou can install the Gitpod browser extension in any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browser such as Google Chrome, Microsoft Edge, Brave, and others, or in [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/).\n\nThe Gitpod extension adds a Gitpod button on every project and branch across GitLab, GitHub, and Bitbucket so that you can easily open a new workspace for any project.\n\n![Browser Extension](../../../static/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart","loc":{"lines":{"from":29,"to":51}}}}],["2487",{"pageContent":"Next Steps\n\nWith Gitpod you start treating your dev environments as something ephemeral: you start them, you code, you push your code, and you forget about them. For your next task, you'll use a fresh dev environment.\n\n- [Getting started with your own project](/docs/introduction/getting-started)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart","loc":{"lines":{"from":53,"to":57}}}}],["2488",{"pageContent":"---\nsection: quickstart\ntitle: Java template\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Java Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [Java Spring](https://github.com/gitpod-io/spring-petclinic) template.\n\nThe following guide will:\n\n- Walk you through a real world example with an existing Gitpod config\n- Introduce you to prebuilds\n- Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n## Step 1: Clone Git repository\n\n- Create a new repository based on the [Java template](https://github.com/gitpod-io/spring-petclinic/generate).\n- Name it e.g. `my-java-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/java","loc":{"lines":{"from":1,"to":25}}}}],["2489",{"pageContent":"Step 1: Clone Git repository\n\n- Create a new repository based on the [Java template](https://github.com/gitpod-io/spring-petclinic/generate).\n- Name it e.g. `my-java-template`.\n\n## Step 2: Install Gitpod app\n\n- Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n  Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for Maven or NPM downloading the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/java","loc":{"lines":{"from":25,"to":34}}}}],["2490",{"pageContent":"Step 3: First prebuild\n\n- Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/spring-petclinic`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/java","loc":{"lines":{"from":36,"to":42}}}}],["2491",{"pageContent":"Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](../../../static/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/java","loc":{"lines":{"from":44,"to":56}}}}],["2492",{"pageContent":"![Browser Extension](../../../static/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/java","loc":{"lines":{"from":56,"to":70}}}}],["2493",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/java","loc":{"lines":{"from":72,"to":74}}}}],["2494",{"pageContent":"Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n- [Getting started with your own project](/docs/configure)\n- [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/java","loc":{"lines":{"from":76,"to":81}}}}],["2495",{"pageContent":"---\nsection: quickstart\ntitle: Julia template\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Julia Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [Julia](https://github.com/gitpod-io/template-julia) template.\n\nThe following guide will:\n\n- Walk you through a real world example with an existing Gitpod config\n- Introduce you to prebuilds\n- Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n## Step 1: Clone Git repository\n\n- Create a new repository based on the [Julia template](https://github.com/gitpod-io/template-julia/generate).\n- Name it e.g. `my-julia-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/julia","loc":{"lines":{"from":1,"to":25}}}}],["2496",{"pageContent":"Step 1: Clone Git repository\n\n- Create a new repository based on the [Julia template](https://github.com/gitpod-io/template-julia/generate).\n- Name it e.g. `my-julia-template`.\n\n## Step 2: Install Gitpod app\n\n- Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n  Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for Julia packages downloading from the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/julia","loc":{"lines":{"from":25,"to":34}}}}],["2497",{"pageContent":"Step 3: First prebuild\n\n- Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/my-julia-template`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/julia","loc":{"lines":{"from":36,"to":42}}}}],["2498",{"pageContent":"Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](../../../static/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/julia","loc":{"lines":{"from":44,"to":56}}}}],["2499",{"pageContent":"![Browser Extension](../../../static/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/julia","loc":{"lines":{"from":56,"to":70}}}}],["2500",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/julia","loc":{"lines":{"from":72,"to":74}}}}],["2501",{"pageContent":"Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n- [Getting started with your own project](/docs/configure)\n- [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/julia","loc":{"lines":{"from":76,"to":81}}}}],["2502",{"pageContent":"---\nsection: quickstart\ntitle: Laravel template\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Laravel Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [Laravel](https://github.com/gitpod-io/template-php-laravel-mysql) template.\n\nThe following guide will:\n\n- Walk you through a real world example with an existing Gitpod config\n- Introduce you to prebuilds\n- Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n## Step 1: Clone Git repository\n\n- Create a new repository based on the [Laravel template](https://github.com/gitpod-io/template-php-laravel-mysql/generate).\n- Name it e.g. `my-laravel-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/laravel","loc":{"lines":{"from":1,"to":25}}}}],["2503",{"pageContent":"Step 1: Clone Git repository\n\n- Create a new repository based on the [Laravel template](https://github.com/gitpod-io/template-php-laravel-mysql/generate).\n- Name it e.g. `my-laravel-template`.\n\n## Step 2: Install the Gitpod app\n\n- Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n  Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for Maven or NPM downloading the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/laravel","loc":{"lines":{"from":25,"to":34}}}}],["2504",{"pageContent":"Step 3: First prebuild\n\n- Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/<my-laravel-template>`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/laravel","loc":{"lines":{"from":36,"to":42}}}}],["2505",{"pageContent":"Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](../../../static/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/laravel","loc":{"lines":{"from":44,"to":56}}}}],["2506",{"pageContent":"![Browser Extension](../../../static/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/laravel","loc":{"lines":{"from":56,"to":70}}}}],["2507",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/laravel","loc":{"lines":{"from":72,"to":74}}}}],["2508",{"pageContent":"Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n- [Getting started with your own project](/docs/configure)\n- [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/laravel","loc":{"lines":{"from":76,"to":81}}}}],["2509",{"pageContent":"---\nsection: quickstart\ntitle: NextJS template\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# NextJS Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [NextJS](https://github.com/gitpod-io/template-nextjs) template.\n\nThe following guide will:\n\n- Walk you through a real world example with an existing Gitpod config\n- Introduce you to prebuilds\n- Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n### Step 1: Clone Git repository\n\n- Create a new repository based on the [NextJS template](https://github.com/gitpod-io/template-nextjs/generate).\n- Name it e.g. `my-nextjs-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/nextjs","loc":{"lines":{"from":1,"to":25}}}}],["2510",{"pageContent":"Step 1: Clone Git repository\n\n- Create a new repository based on the [NextJS template](https://github.com/gitpod-io/template-nextjs/generate).\n- Name it e.g. `my-nextjs-template`.\n\n### Step 2: Install Gitpod app\n\n- Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n  Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for installation of dependencies from the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/nextjs","loc":{"lines":{"from":25,"to":34}}}}],["2511",{"pageContent":"Step 3: First prebuild\n\n- Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/my-nextjs-template`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/nextjs","loc":{"lines":{"from":36,"to":42}}}}],["2512",{"pageContent":"Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](../../../static/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/nextjs","loc":{"lines":{"from":44,"to":56}}}}],["2513",{"pageContent":"![Browser Extension](../../../static/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/nextjs","loc":{"lines":{"from":56,"to":70}}}}],["2514",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/nextjs","loc":{"lines":{"from":72,"to":74}}}}],["2515",{"pageContent":"Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n- [Getting started with your own project](/docs/configure)\n- [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/nextjs","loc":{"lines":{"from":76,"to":81}}}}],["2516",{"pageContent":"---\nsection: quickstart\ntitle: OCaml template\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Ocaml Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [OCaml](https://github.com/gitpod-io/template-ocaml) template.\n\nThe following guide will:\n\n- Walk you through a real world example with an existing Gitpod config\n- Introduce you to prebuilds\n- Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n## Step 1: Clone Git repository\n\n- Create a new repository based on the [OCaml template](https://github.com/gitpod-io/template-ocaml/generate).\n- Name it e.g. `my-ocaml-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/ocaml","loc":{"lines":{"from":1,"to":25}}}}],["2517",{"pageContent":"Step 1: Clone Git repository\n\n- Create a new repository based on the [OCaml template](https://github.com/gitpod-io/template-ocaml/generate).\n- Name it e.g. `my-ocaml-template`.\n\n## Step 2: Install the Gitpod app\n\n- Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n  Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for Maven or NPM downloading the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/ocaml","loc":{"lines":{"from":25,"to":34}}}}],["2518",{"pageContent":"Step 3: First prebuild\n\n- Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/<my-ocaml-template>`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/ocaml","loc":{"lines":{"from":36,"to":42}}}}],["2519",{"pageContent":"Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](../../../static/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/ocaml","loc":{"lines":{"from":44,"to":56}}}}],["2520",{"pageContent":"![Browser Extension](../../../static/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/ocaml","loc":{"lines":{"from":56,"to":70}}}}],["2521",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/ocaml","loc":{"lines":{"from":72,"to":74}}}}],["2522",{"pageContent":"Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n- [Getting started with your own project](/docs/configure)\n- [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/ocaml","loc":{"lines":{"from":76,"to":81}}}}],["2523",{"pageContent":"---\nsection: quickstart\ntitle: Nix template\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Nix Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [Nix](https://github.com/gitpod-io/template-nix) template.\n\nThe following guide will:\n\n- Walk you through a real world example with an existing Gitpod config\n- Introduce you to prebuilds\n- Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n## Step 1: Clone Git repository\n\n- Create a new repository based on the [Nix template](https://github.com/gitpod-io/template-nix/generate).\n- Name it e.g. `my-nix-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/nix","loc":{"lines":{"from":1,"to":25}}}}],["2524",{"pageContent":"Step 1: Clone Git repository\n\n- Create a new repository based on the [Nix template](https://github.com/gitpod-io/template-nix/generate).\n- Name it e.g. `my-nix-template`.\n\n## Step 2: Install the Gitpod app\n\n- Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n  Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for Maven or NPM downloading the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/nix","loc":{"lines":{"from":25,"to":34}}}}],["2525",{"pageContent":"Step 3: First prebuild\n\n- Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/<my-nix-template>`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/nix","loc":{"lines":{"from":36,"to":42}}}}],["2526",{"pageContent":"Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](../../../static/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/nix","loc":{"lines":{"from":44,"to":56}}}}],["2527",{"pageContent":"![Browser Extension](../../../static/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/nix","loc":{"lines":{"from":56,"to":70}}}}],["2528",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/nix","loc":{"lines":{"from":72,"to":74}}}}],["2529",{"pageContent":"Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n- [Getting started with your own project](/docs/configure)\n- [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/nix","loc":{"lines":{"from":76,"to":81}}}}],["2530",{"pageContent":"---\nsection: quickstart\ntitle: Perl template\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Perl Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [Perl](https://github.com/gitpod-io/template-perl) template.\n\nThe following guide will:\n\n- Walk you through a real world example with an existing Gitpod config\n- Introduce you to prebuilds\n- Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n## Step 1: Clone Git repository\n\n- Create a new repository based on the [Perl template](https://github.com/gitpod-io/template-perl/generate).\n- Name it e.g. `my-perl-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/perl","loc":{"lines":{"from":1,"to":25}}}}],["2531",{"pageContent":"Step 1: Clone Git repository\n\n- Create a new repository based on the [Perl template](https://github.com/gitpod-io/template-perl/generate).\n- Name it e.g. `my-perl-template`.\n\n## Step 2: Install Gitpod app\n\n- Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n  Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for CPAN downloading the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/perl","loc":{"lines":{"from":25,"to":34}}}}],["2532",{"pageContent":"Step 3: First prebuild\n\n- Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/my-perl-template`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/perl","loc":{"lines":{"from":36,"to":42}}}}],["2533",{"pageContent":"Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](../../../static/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/perl","loc":{"lines":{"from":44,"to":56}}}}],["2534",{"pageContent":"![Browser Extension](../../../static/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/perl","loc":{"lines":{"from":56,"to":70}}}}],["2535",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/perl","loc":{"lines":{"from":72,"to":74}}}}],["2536",{"pageContent":"Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n- [Getting started with your own project](/docs/configure)\n- [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/perl","loc":{"lines":{"from":76,"to":81}}}}],["2537",{"pageContent":"---\nsection: quickstart\ntitle: Python template\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Python Django Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [Python](https://github.com/gitpod-io/template-python-django) template.\n\nThe following guide will:\n\n- Walk you through a real world example with an existing Gitpod config\n- Introduce you to prebuilds\n- Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n## Step 1: Clone Git repository\n\n- Create a new repository based on the [Python template](https://github.com/gitpod-io/template-python-django/generate).\n- Name it e.g. `my-python-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/python","loc":{"lines":{"from":1,"to":25}}}}],["2538",{"pageContent":"Step 1: Clone Git repository\n\n- Create a new repository based on the [Python template](https://github.com/gitpod-io/template-python-django/generate).\n- Name it e.g. `my-python-template`.\n\n## Step 2: Install the Gitpod app\n\n- Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n  Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for Maven or NPM downloading the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/python","loc":{"lines":{"from":25,"to":34}}}}],["2539",{"pageContent":"Step 3: First prebuild\n\n- Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/<my-python-template>`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/python","loc":{"lines":{"from":36,"to":42}}}}],["2540",{"pageContent":"Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](../../../static/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/python","loc":{"lines":{"from":44,"to":56}}}}],["2541",{"pageContent":"![Browser Extension](../../../static/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/python","loc":{"lines":{"from":56,"to":70}}}}],["2542",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/python","loc":{"lines":{"from":72,"to":74}}}}],["2543",{"pageContent":"Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n- [Getting started with your own project](/docs/configure)\n- [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/python","loc":{"lines":{"from":76,"to":81}}}}],["2544",{"pageContent":"---\nsection: quickstart\ntitle: PlanetScale template\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# PlanetScale Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [PlanetScale](https://github.com/Shulammite-Aso/template-planetscale) template.\n\nThe following guide will:\n\n- Walk you through a real world example with an existing Gitpod config\n- Introduce you to prebuilds\n- Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n## Step 1: Clone Git repository\n\n- Create a new repository based on the [PlanetScale template](https://github.com/Shulammite-Aso/template-planetscale/generate).\n- Name it e.g. `my-planetscale-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/planetscale","loc":{"lines":{"from":1,"to":25}}}}],["2545",{"pageContent":"Step 1: Clone Git repository\n\n- Create a new repository based on the [PlanetScale template](https://github.com/Shulammite-Aso/template-planetscale/generate).\n- Name it e.g. `my-planetscale-template`.\n\n## Step 2: Install the Gitpod app\n\n- Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n  Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for Maven or NPM downloading the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/planetscale","loc":{"lines":{"from":25,"to":34}}}}],["2546",{"pageContent":"Step 3: First prebuild\n\n- Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/<my-planetscale-template>`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/planetscale","loc":{"lines":{"from":36,"to":42}}}}],["2547",{"pageContent":"Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](../../../static/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/planetscale","loc":{"lines":{"from":44,"to":56}}}}],["2548",{"pageContent":"![Browser Extension](../../../static/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/planetscale","loc":{"lines":{"from":56,"to":70}}}}],["2549",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/planetscale","loc":{"lines":{"from":72,"to":74}}}}],["2550",{"pageContent":"Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n- [Getting started with your own project](/docs/configure)\n- [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/planetscale","loc":{"lines":{"from":76,"to":81}}}}],["2551",{"pageContent":"---\nsection: quickstart\ntitle: React template\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# React Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [React](https://github.com/gitpod-io/template-typescript-react) template.\n\nThe following guide will:\n\n- Walk you through a real world example with an existing Gitpod config\n- Introduce you to prebuilds\n- Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n## Step 1: Clone Git repository\n\n- Create a new repository based on the [React template](https://github.com/gitpod-io/template-typescript-react/generate).\n- Name it e.g. `my-react-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/react","loc":{"lines":{"from":1,"to":25}}}}],["2552",{"pageContent":"Step 1: Clone Git repository\n\n- Create a new repository based on the [React template](https://github.com/gitpod-io/template-typescript-react/generate).\n- Name it e.g. `my-react-template`.\n\n## Step 2: Install the Gitpod app\n\n- Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n  Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for Maven or NPM downloading the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/react","loc":{"lines":{"from":25,"to":34}}}}],["2553",{"pageContent":"Step 3: First prebuild\n\n- Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/<my-react-template>`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/react","loc":{"lines":{"from":36,"to":42}}}}],["2554",{"pageContent":"Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](../../../static/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/react","loc":{"lines":{"from":44,"to":56}}}}],["2555",{"pageContent":"![Browser Extension](../../../static/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/react","loc":{"lines":{"from":56,"to":70}}}}],["2556",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/react","loc":{"lines":{"from":72,"to":74}}}}],["2557",{"pageContent":"Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n- [Getting started with your own project](/docs/configure)\n- [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/react","loc":{"lines":{"from":76,"to":81}}}}],["2558",{"pageContent":"---\nsection: quickstart\ntitle: Rust template\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Rust Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [Rust](https://github.com/gitpod-io/template-rust-cli) template.\n\nThe following guide will:\n\n- Walk you through a real world example with an existing Gitpod config\n- Introduce you to prebuilds\n- Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n## Step 1: Clone Git repository\n\n- Create a new repository based on the [Rust template](https://github.com/gitpod-io/template-rust-cli/generate).\n- Name it e.g. `my-rust-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/rust","loc":{"lines":{"from":1,"to":25}}}}],["2559",{"pageContent":"Step 1: Clone Git repository\n\n- Create a new repository based on the [Rust template](https://github.com/gitpod-io/template-rust-cli/generate).\n- Name it e.g. `my-rust-template`.\n\n## Step 2: Install Gitpod app\n\n- Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n  Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for Maven or NPM downloading the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/rust","loc":{"lines":{"from":25,"to":34}}}}],["2560",{"pageContent":"Step 3: First prebuild\n\n- Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/my-rust-template`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/rust","loc":{"lines":{"from":36,"to":42}}}}],["2561",{"pageContent":"Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](../../../static/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/rust","loc":{"lines":{"from":44,"to":56}}}}],["2562",{"pageContent":"![Browser Extension](../../../static/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/rust","loc":{"lines":{"from":56,"to":70}}}}],["2563",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/rust","loc":{"lines":{"from":72,"to":74}}}}],["2564",{"pageContent":"Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n- [Getting started with your own project](/docs/configure)\n- [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/rust","loc":{"lines":{"from":76,"to":81}}}}],["2565",{"pageContent":"---\nsection: quickstart\ntitle: Ruby on Rails template\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Ruby on Rails Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [Ruby on Rails](https://github.com/gitpod-io/template-ruby-on-rails-postgres) template.\n\nThe following guide will:\n\n- Walk you through a real world example with an existing Gitpod config\n- Introduce you to prebuilds\n- Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n## Step 1: Clone Git repository\n\n- Create a new repository based on the [Ruby on Rails template](https://github.com/gitpod-io/template-ruby-on-rails-postgres/generate).\n- Name it e.g. `my-ruby-on-rails-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/ruby-on-rails","loc":{"lines":{"from":1,"to":25}}}}],["2566",{"pageContent":"Step 2: Install the Gitpod app\n\n- Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n  Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for Maven or NPM downloading the internet when you want to start coding.\n\n## Step 3: First prebuild\n\n- Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/<my-ruby-on-rails-template>`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/ruby-on-rails","loc":{"lines":{"from":27,"to":39}}}}],["2567",{"pageContent":"Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](../../../static/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/ruby-on-rails","loc":{"lines":{"from":41,"to":53}}}}],["2568",{"pageContent":"![Browser Extension](../../../static/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/ruby-on-rails","loc":{"lines":{"from":53,"to":67}}}}],["2569",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/ruby-on-rails","loc":{"lines":{"from":69,"to":71}}}}],["2570",{"pageContent":"Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n- [Getting started with your own project](/docs/configure)\n- [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/ruby-on-rails","loc":{"lines":{"from":73,"to":78}}}}],["2571",{"pageContent":"---\nsection: quickstart\ntitle: Scala template\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Scala Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [Scala](https://github.com/gitpod-io/template-scala) template.\n\nThe following guide will:\n\n- Walk you through a real world example with an existing Gitpod config\n- Introduce you to prebuilds\n- Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n## Step 1: Clone Git repository\n\n- Create a new repository based on the [Scala template](https://github.com/gitpod-io/template-scala/generate).\n- Name it e.g. `my-scala-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/scala","loc":{"lines":{"from":1,"to":25}}}}],["2572",{"pageContent":"Step 1: Clone Git repository\n\n- Create a new repository based on the [Scala template](https://github.com/gitpod-io/template-scala/generate).\n- Name it e.g. `my-scala-template`.\n\n## Step 2: Install the Gitpod app\n\n- Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n  Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for Maven or NPM downloading the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/scala","loc":{"lines":{"from":25,"to":34}}}}],["2573",{"pageContent":"Step 3: First prebuild\n\n- Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/<my-scala-template>`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/scala","loc":{"lines":{"from":36,"to":42}}}}],["2574",{"pageContent":"Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](../../../static/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/scala","loc":{"lines":{"from":44,"to":56}}}}],["2575",{"pageContent":"![Browser Extension](../../../static/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/scala","loc":{"lines":{"from":56,"to":70}}}}],["2576",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/scala","loc":{"lines":{"from":72,"to":74}}}}],["2577",{"pageContent":"Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n- [Getting started with your own project](/docs/configure)\n- [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/scala","loc":{"lines":{"from":76,"to":81}}}}],["2578",{"pageContent":"---\nsection: quickstart\ntitle: Svelte template\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Svelte Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [SvelteJS](https://github.com/gitpod-io/template-sveltejs) template.\n\nThe following guide will:\n\n- Walk you through a real world example with an existing Gitpod config\n- Introduce you to prebuilds\n- Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n## Step 1: Clone Git repository\n\n- Create a new repository based on the [SvelteJS template](https://github.com/gitpod-io/template-sveltejs/generate).\n- Name it e.g. `my-svelte-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/svelte","loc":{"lines":{"from":1,"to":25}}}}],["2579",{"pageContent":"Step 1: Clone Git repository\n\n- Create a new repository based on the [SvelteJS template](https://github.com/gitpod-io/template-sveltejs/generate).\n- Name it e.g. `my-svelte-template`.\n\n## Step 2: Install Gitpod app\n\n- Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n  Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for Maven or NPM downloading the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/svelte","loc":{"lines":{"from":25,"to":34}}}}],["2580",{"pageContent":"Step 3: First prebuild\n\n- Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/my-svelte-template`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/svelte","loc":{"lines":{"from":36,"to":42}}}}],["2581",{"pageContent":"Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](../../../static/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/svelte","loc":{"lines":{"from":44,"to":56}}}}],["2582",{"pageContent":"![Browser Extension](../../../static/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/svelte","loc":{"lines":{"from":56,"to":70}}}}],["2583",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/svelte","loc":{"lines":{"from":72,"to":74}}}}],["2584",{"pageContent":"Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n- [Getting started with your own project](/docs/configure)\n- [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/svelte","loc":{"lines":{"from":76,"to":81}}}}],["2585",{"pageContent":"---\nsection: quickstart\ntitle: SvelteKit template\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# SvelteKit Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [SvelteKit](https://github.com/gitpod-io/template-sveltekit) template.\n\nThe following guide will:\n\n- Walk you through a real world example with an existing Gitpod config\n- Introduce you to prebuilds\n- Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n## Step 1: Clone Git repository\n\n- Create a new repository based on the [SvelteKit template](https://github.com/gitpod-io/template-sveltekit/generate).\n- Name it e.g. `my-sveltekit-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/sveltekit","loc":{"lines":{"from":1,"to":25}}}}],["2586",{"pageContent":"Step 1: Clone Git repository\n\n- Create a new repository based on the [SvelteKit template](https://github.com/gitpod-io/template-sveltekit/generate).\n- Name it e.g. `my-sveltekit-template`.\n\n## Step 2: Install Gitpod app\n\n- Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n  Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for Maven or NPM downloading the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/sveltekit","loc":{"lines":{"from":25,"to":34}}}}],["2587",{"pageContent":"Step 3: First prebuild\n\n- Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/my-svelte-template`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/sveltekit","loc":{"lines":{"from":36,"to":42}}}}],["2588",{"pageContent":"Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](../../../static/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/sveltekit","loc":{"lines":{"from":44,"to":56}}}}],["2589",{"pageContent":"![Browser Extension](../../../static/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/sveltekit","loc":{"lines":{"from":56,"to":70}}}}],["2590",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/sveltekit","loc":{"lines":{"from":72,"to":74}}}}],["2591",{"pageContent":"Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n- [Getting started with your own project](/docs/configure)\n- [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/sveltekit","loc":{"lines":{"from":76,"to":81}}}}],["2592",{"pageContent":"---\nsection: quickstart\ntitle: TLA+ template\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# TLA+ Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [TLA+](https://github.com/gitpod-io/template-tlaplus) template.\n\nThe following guide will:\n\n- Walk you through a real world example with an existing Gitpod config\n- Introduce you to prebuilds\n- Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n### Step 1: Clone Git repository\n\n- Create a new repository based on the [TLA+ template](https://github.com/gitpod-io/template-tlaplus/generate).\n- Name it e.g. `my-tlaplus-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/tlaplus","loc":{"lines":{"from":1,"to":25}}}}],["2593",{"pageContent":"Step 1: Clone Git repository\n\n- Create a new repository based on the [TLA+ template](https://github.com/gitpod-io/template-tlaplus/generate).\n- Name it e.g. `my-tlaplus-template`.\n\n### Step 2: Install Gitpod app\n\n- Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n  Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for installation of dependencies from the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/tlaplus","loc":{"lines":{"from":25,"to":34}}}}],["2594",{"pageContent":"Step 3: First prebuild\n\n- Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/my-nextjs-template`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/tlaplus","loc":{"lines":{"from":36,"to":42}}}}],["2595",{"pageContent":"Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](../../../static/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/tlaplus","loc":{"lines":{"from":44,"to":56}}}}],["2596",{"pageContent":"![Browser Extension](../../../static/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/tlaplus","loc":{"lines":{"from":56,"to":70}}}}],["2597",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/tlaplus","loc":{"lines":{"from":72,"to":74}}}}],["2598",{"pageContent":"Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n- [Getting started with your own project](/docs/configure)\n- [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/tlaplus","loc":{"lines":{"from":76,"to":81}}}}],["2599",{"pageContent":"---\nsection: quickstart\ntitle: Wordpress template\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Wordpress Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [Wordpress](https://github.com/gitpod-io/template-wordpress) template.\n\nThe following guide will:\n\n- Walk you through a real world example with an existing Gitpod config\n- Introduce you to prebuilds\n- Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n### Step 1: Clone Git repository\n\n- Create a new repository based on the [Wordpress template](https://github.com/gitpod-io/template-wordpress/generate).\n- Name it e.g. `my-wordpress-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/wordpress","loc":{"lines":{"from":1,"to":25}}}}],["2600",{"pageContent":"Step 1: Clone Git repository\n\n- Create a new repository based on the [Wordpress template](https://github.com/gitpod-io/template-wordpress/generate).\n- Name it e.g. `my-wordpress-template`.\n\n### Step 2: Install Gitpod app\n\n- Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n  Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for installation of dependencies from the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/wordpress","loc":{"lines":{"from":25,"to":34}}}}],["2601",{"pageContent":"Step 3: First prebuild\n\n- Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/my-wordpress-template`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/wordpress","loc":{"lines":{"from":36,"to":42}}}}],["2602",{"pageContent":"Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](../../../static/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/wordpress","loc":{"lines":{"from":44,"to":56}}}}],["2603",{"pageContent":"![Browser Extension](../../../static/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/wordpress","loc":{"lines":{"from":56,"to":70}}}}],["2604",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/wordpress","loc":{"lines":{"from":72,"to":74}}}}],["2605",{"pageContent":"Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n- [Getting started with your own project](/docs/configure)\n- [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/wordpress","loc":{"lines":{"from":76,"to":81}}}}],["2606",{"pageContent":"---\nsection: quickstart\ntitle: Wasp template\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Wasp Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [Wasp](https://github.com/gitpod-io/template-wasp) template.\n\nThe following guide will:\n\n- Walk you through a real world example with an existing Gitpod config\n- Introduce you to prebuilds\n- Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n## Step 1: Clone Git repository\n\n- Create a new repository based on the [Wasp template](https://github.com/gitpod-io/template-wasp/generate).\n- Name it e.g. `my-wasp-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/wasp","loc":{"lines":{"from":1,"to":25}}}}],["2607",{"pageContent":"Step 1: Clone Git repository\n\n- Create a new repository based on the [Wasp template](https://github.com/gitpod-io/template-wasp/generate).\n- Name it e.g. `my-wasp-template`.\n\n## Step 2: Install the Gitpod app\n\n- Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n  Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for Maven or NPM downloading the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/wasp","loc":{"lines":{"from":25,"to":34}}}}],["2608",{"pageContent":"Step 3: First prebuild\n\n- Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/<my-wasp-template>`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/wasp","loc":{"lines":{"from":36,"to":42}}}}],["2609",{"pageContent":"Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](../../../static/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/wasp","loc":{"lines":{"from":44,"to":56}}}}],["2610",{"pageContent":"![Browser Extension](../../../static/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/wasp","loc":{"lines":{"from":56,"to":70}}}}],["2611",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/wasp","loc":{"lines":{"from":72,"to":74}}}}],["2612",{"pageContent":"Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n- [Getting started with your own project](/docs/configure)\n- [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/wasp","loc":{"lines":{"from":76,"to":81}}}}],["2613",{"pageContent":"---\nsection: quickstart\ntitle: Node/TypeScript/Express template\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Node/TypeScript/Express Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [Node/TypeScript/Express](https://github.com/gitpod-io/template-typescript-node) template.\n\nThe following guide will:\n\n- Walk you through a real world example with an existing Gitpod config\n- Introduce you to prebuilds\n- Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n## Step 1: Clone Git repository\n\n- Create a new repository based on the [Node/TypeScript template](https://github.com/gitpod-io/template-typescript-node/generate).\n- Name it e.g. `my-typescript-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/typescript","loc":{"lines":{"from":1,"to":25}}}}],["2614",{"pageContent":"Step 2: Install Gitpod app\n\n- Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n  Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for Maven or NPM downloading from the internet when you want to start coding.\n\n## Step 3: First prebuild\n\n- Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/my-typescript-template`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/typescript","loc":{"lines":{"from":27,"to":39}}}}],["2615",{"pageContent":"Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](../../../static/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/typescript","loc":{"lines":{"from":41,"to":53}}}}],["2616",{"pageContent":"![Browser Extension](../../../static/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/typescript","loc":{"lines":{"from":53,"to":67}}}}],["2617",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/typescript","loc":{"lines":{"from":69,"to":71}}}}],["2618",{"pageContent":"Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n- [Getting started with your own project](/docs/configure)\n- [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/typescript","loc":{"lines":{"from":73,"to":78}}}}],["2619",{"pageContent":"---\nsection: quickstart\ntitle: X11 VNC template\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# X11 VNC Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [X11 VNC](https://github.com/gitpod-io/template-x11-vnc) template.\n\nThe following guide will:\n\n- Walk you through a real world example with an existing Gitpod config\n- Introduce you to prebuilds\n- Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n### Step 1: Clone Git repository\n\n- Create a new repository based on the [X11 VNC template](https://github.com/gitpod-io/template-x11-vnc/generate).\n- Name it e.g. `my-x11-vnc-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/x11-vnc","loc":{"lines":{"from":1,"to":25}}}}],["2620",{"pageContent":"Step 1: Clone Git repository\n\n- Create a new repository based on the [X11 VNC template](https://github.com/gitpod-io/template-x11-vnc/generate).\n- Name it e.g. `my-x11-vnc-template`.\n\n### Step 2: Install Gitpod app\n\n- Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n  Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for installation of dependencies from the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/x11-vnc","loc":{"lines":{"from":25,"to":34}}}}],["2621",{"pageContent":"Step 3: First prebuild\n\n- Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/my-x11-vnc-template`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/x11-vnc","loc":{"lines":{"from":36,"to":42}}}}],["2622",{"pageContent":"Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](../../../static/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/x11-vnc","loc":{"lines":{"from":44,"to":56}}}}],["2623",{"pageContent":"![Browser Extension](../../../static/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/x11-vnc","loc":{"lines":{"from":56,"to":70}}}}],["2624",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/x11-vnc","loc":{"lines":{"from":72,"to":74}}}}],["2625",{"pageContent":"Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n- [Getting started with your own project](/docs/configure)\n- [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/x11-vnc","loc":{"lines":{"from":76,"to":81}}}}],["2626",{"pageContent":"---\nsection: quickstart\ntitle: Yasm template\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Yasm Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [Yasm](https://github.com/gitpod-io/template-yasm) template.\n\nThe following guide will:\n\n- Walk you through a real world example with an existing Gitpod config\n- Introduce you to prebuilds\n- Demonstrate the benefits of ephemeral development environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n## Step 1: Clone Git repository\n\n- Create a new repository based on the [C template](https://github.com/gitpod-io/template-c/generate).\n- Name it e.g. `my-yasm-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/yasm","loc":{"lines":{"from":1,"to":25}}}}],["2627",{"pageContent":"Step 1: Clone Git repository\n\n- Create a new repository based on the [C template](https://github.com/gitpod-io/template-c/generate).\n- Name it e.g. `my-yasm-template`.\n\n## Step 2: Install Gitpod app\n\n- Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n  Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for installation of dependencies from the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/yasm","loc":{"lines":{"from":25,"to":34}}}}],["2628",{"pageContent":"Step 3: First prebuild\n\n- Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/my-yasm-template`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/yasm","loc":{"lines":{"from":36,"to":42}}}}],["2629",{"pageContent":"Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured development environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](../../../static/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/yasm","loc":{"lines":{"from":44,"to":56}}}}],["2630",{"pageContent":"![Browser Extension](../../../static/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/yasm","loc":{"lines":{"from":56,"to":70}}}}],["2631",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/yasm","loc":{"lines":{"from":72,"to":74}}}}],["2632",{"pageContent":"Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n- [Getting started with your own project](/docs/configure)\n- [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/yasm","loc":{"lines":{"from":76,"to":81}}}}],["2633",{"pageContent":"---\nsection: self-hosted/helm-deprecated\ntitle: Configure the authentication used by your Gitpod Self-Hosted installation\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Configure the authentication used by your Gitpod Self-Hosted installation\n\n> ⚠️ **Deprecated Content**\n>\n> The content of this page assumes you are using Helm, which is now deprecated. Please use the [Installer](../../latest) instead.\n\nGitpod does not implement user authentication itself, but integrates with other auth provider using [OAuth2](https://oauth.net/2/).\nUsually your Git hosting solution (e.g. GitHub or GitLab) acts as the OAuth auth provider. This way we control access to Gitpod while at\nthe same time making sure every user has proper access to their Git repository.\n\nGitpod supports the following authentication providers:","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/authentication","loc":{"lines":{"from":1,"to":20}}}}],["2634",{"pageContent":"Gitpod supports the following authentication providers:\n\n- github.com\n- GitHub Enterprise in version 2.16.x and higher\n- gitlab.com\n- GitLab Community Edition in version 11.7.x and higher\n- GitLab Enterprise Edition in version 11.7.x and higher\n- Bitbucket — coming soon\n- Custom Auth Provider – Inquiry TypeFox for a quote","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/authentication","loc":{"lines":{"from":20,"to":28}}}}],["2635",{"pageContent":"GitHub\n\nTo authenticate your users with GitHub you need to create a [GitHub OAuth App](https://developer.github.com/apps/building-oauth-apps/creating-an-oauth-app/).\nFollow the guide linked above and:\n\n- set \"Authentication callback URL\" to after replacing example.com with your domain name:\n\n  https://example.com/auth/github/callback\n\n- copy the following values and configure them in `values.yaml`:\n  - `clientId`\n  - `clientSecret`","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/authentication","loc":{"lines":{"from":30,"to":41}}}}],["2636",{"pageContent":"GitLab\n\nTo authenticate your users with GitLab you need to create an [GitLab OAuth application](https://docs.gitlab.com/ee/integration/oauth_provider.html).\nFollow the guide linked above and:\n\n- set \"Authentication callback URL\" to:\n\n  https://<your-domain.com>/auth/<gitlab.com-OR-your-gitlab.com>/callback\n\n- set \"Scopes\" to `api`, `read_user` and `read_repository`.\n- copy the following values and configure them in `values.yaml`:\n  - `clientId` is the \"Application ID\" from the GitLab OAuth application\n  - `clientSecret` is the \"Secret\" from the GitLab OAuth application","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/authentication","loc":{"lines":{"from":43,"to":55}}}}],["2637",{"pageContent":"---\nsection: self-hosted/helm-deprecated\ntitle: Configure the database used by your Gitpod installation\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Configure the database used by your Gitpod installation\n\n> ⚠️ **Deprecated Content**\n>\n> The content of this page assumes you are using Helm, which is now deprecated. Please use the [Installer](../../latest) instead.\n\nGitpod uses a MySQL database to store user data. By default Gitpod ships with a MySQL database built-in. If you operate your own MySQL database (which we'd recommend in a production setting) you can use that one. You have the following options:\n\n- Integrated database: If not disabled, this MySQL database is installed in a Kubernetes pod as a part of Gitpod’s Helm chart.\n  The database uses a Kubernetes PersistentVolume. We do not recommend using this option for a production setting.\n\n- Own MySQL database: Gitpod requires MySQL in version 5.7 or newer.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/database","loc":{"lines":{"from":1,"to":21}}}}],["2638",{"pageContent":"- Own MySQL database: Gitpod requires MySQL in version 5.7 or newer.\n\nThis chart installs a MySQL database that gets Gitpod up and running but is not suitable for production (the data is lost on each restart of the DB pod). To connect to a proper MySQL installation:","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/database","loc":{"lines":{"from":21,"to":23}}}}],["2639",{"pageContent":"1.  Copy the DB init scripts into your local folder:\n    ```bash\n    mkdir -p gpinstall\n    echo exit | docker run -v $PWD/gpinstall:/workspace -u $(id -u) -i gcr.io/gitpod-io/self-hosted/installer:latest bash\n    mkdir -p ./db-init\n    cp gpinstall/gitpod/helm/gitpod/config/db/init/*.sql ./db-init/\n    rm -Rf gpinstall\n    ```\n1.  Initialize your MySQL database using the SQL files in `config/db/init/`. E.g. in a mysql session connected to your database server run:\n    ```sql\n    SET @gitpodDbPassword = IFNULL(@gitpodDbPassword, 'your-password-goes-here');\n    source db-init/00-testdb-user.sql;\n    source db-init/01-create-user.sql;\n    source db-init/02-create-and-init-sessions-db.sql;\n    source db-init/03-recreate-gitpod-db.sql;\n    ```\n1.  Merge the following into your `values.custom.yaml`:\n\n    ```yaml\n    db:\n      host: db\n      port: 3306\n      password: your-password-goes-here\n\n    # Disable built-in MySQL instance\n    mysql:\n      enabled: false","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/database","loc":{"lines":{"from":25,"to":51}}}}],["2640",{"pageContent":"1.  Do a `helm upgrade --install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.10.0` to apply the changes.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/database","loc":{"lines":{"from":54,"to":54}}}}],["2641",{"pageContent":"---\nsection: self-hosted/helm-deprecated\ntitle: Configure the Docker registry used by your Gitpod Self-Hosted installation\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Configure the Docker registry used by your Gitpod Self-Hosted installation\n\n> ⚠️ **Deprecated Content**\n>\n> The content of this page assumes you are using Helm, which is now deprecated. Please use the [Installer](../../latest) instead.\n\nGitpod builds Docker images during workspace startup. This enables custom Dockerfiles as part of your workspace config, but is also required for Gitpod itself to function.\nTo this end, Gitpod requires a container registry where it can push the images it builds.\n\nBy default Gitpod ships with a built-in Docker registry. If you operate your own Docker registry (which we'd recommend in a production setting) you can use that one. You have the following options:","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/docker-registry","loc":{"lines":{"from":1,"to":19}}}}],["2642",{"pageContent":"By default Gitpod ships with a built-in Docker registry. If you operate your own Docker registry (which we'd recommend in a production setting) you can use that one. You have the following options:\n\n- Integrated Docker registry: If not disabled, this Docker registry is installed in a Kubernetes Pod as a dependency of Gitpod’s Helm chart.\n  The Docker registry requires a Kubernetes PersistentVolume. This registry is not recommended to be used for production.\n- Own Docker registry: Gitpod can connect to your own Docker registry. Compared to its built-in counterpart this enables performance gains and access to otherwise private images.\n\nThis helm chart can either deploy its own registry (default but requires [HTTPS certs](./ingress)) or use an existing one.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/docker-registry","loc":{"lines":{"from":19,"to":25}}}}],["2643",{"pageContent":"Configuration\n\nTo connect to an existing Docker registry, perform the following steps:\n\n1.  Merge the following into your `values.custom.yaml`:\n\n    ```yaml\n    components:\n      imageBuilder:\n        registryCerts: []\n        registry:\n          # name must not end with a \"/\"\n          name: your.registry.com/gitpod\n          secretName: image-builder-registry-secret\n          path: secrets/registry-auth.json\n\n      workspace:\n        pullSecret:\n          secretName: image-builder-registry-secret\n\n    docker-registry:\n      enabled: false","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/docker-registry","loc":{"lines":{"from":27,"to":48}}}}],["2644",{"pageContent":"Replace `your.registry.com/gitpod` with the domain your registry is available at.\n\n    > Note that Helm does _not_ merge hierarchies in a single file. Please make sure there is only ever _one_ `components` hierarchy or the last one overwrites all previous values.\n\n2.  Persist your registry authentication token to the `secrets/` folder.\n\n    ```bash\n    mkdir -p secrets\n    docker login your.registry.com/gitpod\n    cp ~/.docker/config.json secrets/registry-auth.json","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/docker-registry","loc":{"lines":{"from":51,"to":60}}}}],["2645",{"pageContent":"> This does not work for Google Cloud Registries because their login tokens are short-lived. See the [example](#example-google-cloud-registry-credentials) below on how to configure it.\n\n3.  Do a `helm upgrade --install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.10.0` to apply the changes.\n\nMake sure the resulting JSON file contains the credentials (there should be an `auths` section containing them as base64 encoded string).\n\nIf that's not the case you might have a credential store/helper set up (e.g. on macOS the _Securely store Docker logins in macOS keychain_ setting).","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/docker-registry","loc":{"lines":{"from":63,"to":69}}}}],["2646",{"pageContent":"Example Google Cloud Registry Credentials\n\nPrerequisites:\n\n- `gcloud` [installed](https://cloud.google.com/sdk/docs/quickstart) and [authenticated](https://cloud.google.com/sdk/gcloud/reference/auth/login)\n\nHow to use Google Cloud Registry as Docker registry for Gitpod:\n\n1.  Go to <a class=\"no-nowrap\" href=\"https://console.cloud.google.com/gcr/images/%3Cyour-project-id%3E?project=%3Cyour-project-id%3E\">https://console.cloud.google.com/gcr/images/\\<your-project-id>?project=\\<your-project-id></your-project-id></your-project-id></a> and hit \"Enable Registry API\" (if not already enabled).\n\n1.  Execute the following commands:\n\n    ```bash\n    export PROJECT_ID=\"<your-project-id>\"","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/docker-registry","loc":{"lines":{"from":71,"to":84}}}}],["2647",{"pageContent":"1.  Execute the following commands:\n\n    ```bash\n    export PROJECT_ID=\"<your-project-id>\"\n\n    gcloud iam service-accounts create gitpod-registry-full --project=$PROJECT_ID\n    gcloud projects add-iam-policy-binding $PROJECT_ID --member=\"serviceAccount:gitpod-registry-full@$PROJECT_ID.iam.gserviceaccount.com\" --role=roles/storage.admin\n    gcloud iam service-accounts keys create gitpod-registry-full-key.json --iam-account=gitpod-registry-full@$PROJECT_ID.iam.gserviceaccount.com\n\n    echo \"{\\\"auths\\\":{\\\"gcr.io\\\": {\\\"auth\\\": \\\"$(echo -n \"$(echo -n \"_json_key:\"; cat gitpod-registry-full-key.json)\" | base64 -w 0)\\\"}}}\" > secrets/registry-auth.json","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/docker-registry","loc":{"lines":{"from":84,"to":93}}}}],["2648",{"pageContent":"This should result in a `secrets/registry-auth.json` like this:\n\n    ```json\n    {\n      \"auths\": {\n        \"gcr.io\": {\n          \"auth\": \"<long-base64-string>\"\n        }\n      }\n    }\n    ```\n\n    > If you want to use the localized versions of gcr.io (eu.gcr.io, for instance) make sure to update the json file accordingly.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/docker-registry","loc":{"lines":{"from":96,"to":108}}}}],["2649",{"pageContent":"---\nsection: self-hosted/helm-deprecated\ntitle: Configuring Gitpod Self-Hosted\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Configuring Gitpod Self-Hosted\n\n> ⚠️ **Deprecated Content**\n>\n> The content of this page assumes you are using Helm, which is now deprecated. Please use the [Installer](../latest) instead.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration","loc":{"lines":{"from":1,"to":14}}}}],["2650",{"pageContent":"# Configuring Gitpod Self-Hosted\n\n> ⚠️ **Deprecated Content**\n>\n> The content of this page assumes you are using Helm, which is now deprecated. Please use the [Installer](../latest) instead.\n\n- [Configure the database used by your Gitpod Self-Hosted installation](./configuration/database)\n- [Configure the Docker registry used by your Gitpod Self-Hosted installation](./configuration/docker-registry)\n- [Configure the ingress to your Gitpod Self-Hosted installation](./configuration/ingress)\n- [Configure the Kubernetes nodes in your Gitpod Self-Hosted installation](./configuration/nodes)\n- [Configure the storage used by your Gitpod installation](./configuration/storage)\n- [Configure the Gitpod Workspaces in your Gitpod Self-Hosted installation](./configuration/workspaces)\n- [Configure the authentication used by your Gitpod Self-Hosted installation](./configuration/authentication)\n- [Configure the VSX registry used by your Gitpod Self-Hosted installation](./configuration/vsx-registry)","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration","loc":{"lines":{"from":14,"to":27}}}}],["2651",{"pageContent":"---\nsection: self-hosted/helm-deprecated\ntitle: Configure the Kubernetes nodes in your Gitpod Self-Hosted installation\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Configure the Kubernetes nodes in your Gitpod Self-Hosted installation\n\n> ⚠️ **Deprecated Content**\n>\n> The content of this page assumes you are using Helm, which is now deprecated. Please use the [Installer](../../latest) instead.\n\nConfigure the nodes (computers or virtual machines) that Kubernetes runs Gitpod's workspace pods on.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/nodes","loc":{"lines":{"from":1,"to":16}}}}],["2652",{"pageContent":"Assign workload to Nodes\n\nGitpod schedules two kinds of workloads: the Gitpod installation itself (which we refer to as _meta_) and the workspaces. Ideally both types of workloads run on separate nodes to make makes scaling easier.\nDepending on your cluster size that may not be feasible though. Either way, you need two node labels in your cluster:\n\n- `gitpod.io/workload_meta=true` which marks the \"meta\" nodes and\n- `gitpod.io/workload_workspace=true ` which marks the workspace nodes.\n\nIf you want to \"mix 'n match\", i.e., don't separate the nodes, you can simply run:\n\n```bash\nkubectl label node --all gitpod.io/workload_meta=true gitpod.io/workload_workspace=true\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/nodes","loc":{"lines":{"from":18,"to":30}}}}],["2653",{"pageContent":"Node Filesystem Layout\n\nGitpod relies on the node's filesystem for making workspace content available, as well as for storing Theia. By default workspace data is placed in `/data` and Theia is copied to `/theia`. Depending on your node setup the root filesystem maybe **read-only** or **slow**.\nWe recommend you change those two paths so that they're located on an SSD or some other form of fast local storage.\n\nTo do this:","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/nodes","loc":{"lines":{"from":32,"to":37}}}}],["2654",{"pageContent":"To do this:\n\n1.  Merge the following into your `values.custom.yaml`:\n    ```yaml\n    components:\n      imageBuilder:\n        # The image builder deploys a Docker-in-Docker-daemon. By default that Docker daemon works in an empty-dir on the node.\n        # Depending on the types of node you operate that may cause image builds to fail or not perform well. We recommend you give the Docker daemon\n        # fast storage on the node, e.g. an SSD.\n        hostDindData: /mnt/disks/ssd0/docker\n      wsDaemon:\n        # Workspace data is stored on the nodes. This setting configures where on the node the workspace data lives.\n        # The faster this location is (in terms of IO) the faster workspaces will initialize.\n        hostWorkspaceArea: /mnt/disks/ssd0/workspaces\n    ```\n2.  Do a `helm upgrade --install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.10.0` to apply the changes.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/nodes","loc":{"lines":{"from":37,"to":52}}}}],["2655",{"pageContent":"> Note that Helm does _not_ merge hierarchies in a single file. Please make sure there is only ever _one_ `components` hierarchy or the last one overwrites all previous values.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/nodes","loc":{"lines":{"from":54,"to":54}}}}],["2656",{"pageContent":"---\nsection: self-hosted/helm-deprecated\ntitle: Configure the ingress to your Gitpod installation\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Configure the ingress to your Gitpod installation\n\n> ⚠️ **Deprecated Content**\n>\n> The content of this page assumes you are using Helm, which is now deprecated. Please use the [Installer](../../latest) instead.\n\nConfiguring ingress into your Gitpod installation requires two things:\n\n- three DNS entries pointing at the IP of Gitpod's proxy service, and\n- HTTPS certificates.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/ingress","loc":{"lines":{"from":1,"to":19}}}}],["2657",{"pageContent":"1. DNS Entries\n\nGitpod requires a domain resolvable by some nameserver (typically a public domain name, e.g. `your-domain.com`).\nAs Gitpod launches services and workspaces on additional subdomains it also needs two wildcard domains.\nFor example:\n\n    your-domain.com\n    *.your-domain.com\n    *.ws.your-domain.com\n\nInstalling Gitpod on a subdomain works as well. For example:\n\n    gitpod.your-domain.com\n    *.gitpod.your-domain.com\n    *.ws.gitpod.your-domain.com\n\n1.  Setup `A` records for all three (sub)domains. To learn your installation's IP run:\n\n    ```bash\n    kubectl describe svc proxy | grep -i ingress\n    ```\n\n1.  Merge the following into your `values.custom.yaml` file:\n    ```yaml\n    hostname: your-domain.com\n    components:\n      proxy:\n        loadBalancerIP: <your-IP>\n    ```\n    Specifying the `loadBalancerIP` make sure it stays the same across all redeploys.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/ingress","loc":{"lines":{"from":21,"to":50}}}}],["2658",{"pageContent":"2. HTTPS\n\nGitpod requires HTTPS certificates to function properly. We recommend using [Let's Encrypt](https://letsencrypt.org/) for retrieving certificates as we do for [gitpod.io](https://gitpod.io).\n\n> Important: The HTTPS certificates for your domain must include `your-domain.com`, `*.your-domain.com` and `*.ws.your-domain.com`. Beware that wildcard certificates are valid for one level only (i.e. `*.a.com` is not valid for `c.b.a.com`).\n\nTo configure the HTTPS certificates for your domain","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/ingress","loc":{"lines":{"from":52,"to":58}}}}],["2659",{"pageContent":"To configure the HTTPS certificates for your domain\n\n1.  [Generate certificates](#using-lets-encrypt-to-generate-https-certificates) and put your certificate files under `secrets/https-certificates/`:\n    ```text\n    secrets/https-certificates:\n      |- tls.crt\n      |- tls.key\n    ```\n2.  Generate the [dhparams.pem](https://security.stackexchange.com/questions/94390/whats-the-purpose-of-dh-parameters) file using:\n    ```bash\n    openssl dhparam -out secrets/https-certificates/dhparams.pem 2048\n    ```\n3.  Create a kubernetes secret using:\n    ```bash\n    kubectl create secret generic https-certificates --from-file=secrets/https-certificates\n    ```\n4.  Afterwards, do an `helm upgrade --install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.10.0` to apply the changes.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/ingress","loc":{"lines":{"from":58,"to":74}}}}],["2660",{"pageContent":"Using Let's Encrypt to generate HTTPS certificates\n\nThe most accessible means of obtaining HTTPS certificates is using [Let's Encrypt](https://letsencrypt.org/). It provides free certificates to anybody who can prove ownership of a domain.\nLet's Encrypt offers a program called [certbot](https://certbot.eff.org/) to make acquiring certificates as straightforward as possible.\n\nAssuming you have [certbot](https://certbot.eff.org/) installed, the following script will generate and configure the required certificates (notice the placeholders):\n\n```bash\nexport DOMAIN=your-domain.com\nexport EMAIL=your@email.here\nexport WORKDIR=$PWD/letsencrypt\n\ncertbot certonly \\\n    --config-dir $WORKDIR/config \\\n    --work-dir $WORKDIR/work \\\n    --logs-dir $WORKDIR/logs \\\n    --manual \\\n    --preferred-challenges=dns \\\n    --email $EMAIL \\\n    --server https://acme-v02.api.letsencrypt.org/directory \\\n    --agree-tos \\\n    -d *.ws.$DOMAIN \\\n    -d *.$DOMAIN \\\n    -d $DOMAIN","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/ingress","loc":{"lines":{"from":76,"to":99}}}}],["2661",{"pageContent":"# move them into place\nmkdir -p secrets/https-certificates\ncp $WORKDIR/config/live/fullchain.pem secrets/https-certificates/tls.crt\ncp $WORKDIR/config/live/privkey.pem secrets/https-certificates/tls.key","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/ingress","loc":{"lines":{"from":101,"to":104}}}}],["2662",{"pageContent":"> Note: Do not refrain if `certbot` fails on first execution: Depending on the challenge used you might have to restart it _once_.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/ingress","loc":{"lines":{"from":107,"to":107}}}}],["2663",{"pageContent":"---\nsection: self-hosted/helm-deprecated\ntitle: Configure the storage used by your Gitpod installation\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Configure the storage used by your Gitpod installation\n\n> ⚠️ **Deprecated Content**\n>\n> The content of this page assumes you are using Helm, which is now deprecated. Please use the [Installer](../../latest) instead.\n\nGitpod uses bucket storage to persist the contents of workspaces. Each workspace is tarballed into a single archive file which is then uploaded to a separate bucket.\n\nBy default Gitpod installs [MinIO](https://min.io/) as built-in bucket storage which uses a [persistent volume](https://kubernetes.io/docs/concepts/storage/persistent-volumes/) to store workspace content.\n\nFor more complex use case we recommend configuring more permanent means of persistence by either:","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/storage","loc":{"lines":{"from":1,"to":20}}}}],["2664",{"pageContent":"For more complex use case we recommend configuring more permanent means of persistence by either:\n\n- Configure the contained MinIO-instance to serve as a [gateway](https://github.com/minio/minio/tree/master/docs/gateway) OR configure one of a [wide range of storage backends](https://kubernetes.io/docs/concepts/storage/persistent-volumes/#types-of-persistent-volumes).\n- Bring your own storage bucket: Configure Gitpod to either connect to:\n  - your own installation of MinIO\n  - a Google Cloud Storage compatible storage solution","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/storage","loc":{"lines":{"from":20,"to":25}}}}],["2665",{"pageContent":"a) Configure custom MinIO instance\n\n1.  Create a file `values.custom.yaml` with this content:\n\n    ```yaml\n    components:\n      contentService:\n        remoteStorage:\n          kind: minio\n          minio:\n            endpoint: your-minio-installation.somewhere-else.com:8080\n            accessKey: enterKeyHere\n            secretKey: superSecretKeyGoesHere\n            tmpdir: /tmp\n\n    # Disable built-in minio instance\n    minio:\n      enabled: false\n    ```\n\n2.  Redeploy Gitpod using `helm upgrade --install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.10.0` to apply the changes\n\n    > Note that Helm does _not_ merge hierarchies in a single file. Please make sure there is only ever _one_ `components` hierarchy or the last one overwrites all previous values.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/storage","loc":{"lines":{"from":27,"to":49}}}}],["2666",{"pageContent":"b) Configure the built-in MinIO instance\n\n1.  Consult the chart's documentation at https://helm.min.io/\n2.  Create a file `values.custom.yaml` with this content:\n    ```yaml\n    minio:\n      accessKey: add-a-radom-access-key-here\n      secretKey: add-a-radom-secret-key-here\n      # insert custom config here\n    ```\n3.  Redeploy Gitpod using `helm upgrade --install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.10.0` to apply the changes","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/storage","loc":{"lines":{"from":51,"to":61}}}}],["2667",{"pageContent":"---\nsection: self-hosted/helm-deprecated\ntitle: Configure the VSX registry used by your Gitpod Self-Hosted installation\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Configure the VSX registry used by your Gitpod Self-Hosted installation\n\n> ⚠️ **Deprecated Content**\n>\n> The content of this page assumes you are using Helm, which is now deprecated. Please use the [Installer](../../latest) instead.\n\nGitpod uses the public [OpenVSX](https://open-vsx.org) registry as only products produced by Microsoft may access the Visual Studio Code Marketplace. This document explains how Gitpod Self-Hosted can be configured in air-gapped scenarios to connect to a private OpenVSX registry.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/vsx-registry","loc":{"lines":{"from":1,"to":16}}}}],["2668",{"pageContent":"Configuration\n\nTo connect to private OpenVSX registry, perform the following steps:\n\n1.  Merge the following into your `values.custom.yaml`:\n\n    ```yaml\n    components:\n      openVsxProxy:\n        vsxRegistryUrl: open-vsx.org\n    ```\n\n    Replace `open-vsx.org` with the domain your registry is available at.\n\n2.  Do a `helm upgrade --install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.10.0` to apply the changes.\n\n## Additional resources\n\n- https://github.com/gitpod-io/gitpod/blob/cfb528c5daf5115b666ec7404bfe25d9fc9598d6/chart/values.yaml#L137","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/vsx-registry","loc":{"lines":{"from":18,"to":36}}}}],["2669",{"pageContent":"---\nsection: self-hosted/helm-deprecated\ntitle: Configure the Gitpod Workspaces in your Gitpod Self-Hosted installation\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Workspaces\n\n> ⚠️ **Deprecated Content**\n>\n> The content of this page assumes you are using Helm, which is now deprecated. Please use the [Installer](../../latest) instead.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/workspaces","loc":{"lines":{"from":1,"to":14}}}}],["2670",{"pageContent":"Sizing\n\nGitpod schedules workspaces as Kubernetes pods. Each workspace pod requests a certain amount of memory which directly affects how many workspaces are scheduled on a single node.\nIf you want to change the default sizing (~ 8GiB per workspace) you should\n\n1.  Merge the following into your `values.custom.yaml`:","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/workspaces","loc":{"lines":{"from":16,"to":21}}}}],["2671",{"pageContent":"```yaml\n    # workspaceSizing configures the resources available to each workspace. These settings directly impact how\n    # desenly we pack workspaces on nodes where workspacesPerNode = memoryAvailable(node) / memoryRequest.\n    #\n    # Beware: if a workspace exceeds its memoryLimit, some of its processes may be terminated (OOM-kill) which\n    # results in a broken user experience.\n    workspaceSizing:\n      requests:\n        cpu: \"1m\"\n        memory: \"2.25Gi\"\n        storage: \"5Gi\"\n      limits:\n        cpu: \"5\"\n        memory: \"12Gi\"\n      dynamic:\n        # Gitpod supports dynamic CPU limiting. We express those limits in \"buckets of CPU time\" (jiffies where 1 jiffie is 1% of a vCPU).\n        # Each bucket has a limit (i.e. max CPU rate in jiffies/sec, 100 jiffies/sec = 1 vCPU).\n        #\n        # For example:\n        #   # three minutes of 5 CPUs: 5 [numCPU] * 100 [jiffies/sec] * (3 * 60) [seconds] = 90000\n        #   - budget: 90000\n        #     limit: 500","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/workspaces","loc":{"lines":{"from":23,"to":44}}}}],["2672",{"pageContent":"#\n        # For example:\n        #   # three minutes of 5 CPUs: 5 [numCPU] * 100 [jiffies/sec] * (3 * 60) [seconds] = 90000\n        #   - budget: 90000\n        #     limit: 500\n        #   # five minutes  of 4 CPUs: 4 [numCPU] * 100 [jiffies/sec] * (5 * 60) [seconds] = 120000\n        #   - budget: 120000\n        #     limit: 400\n        #   # remainder of 2 CPUs where a user has to stay below sustained use of 1.8 CPUs for 5 minutes:\n        #   #                       1.8 [numCPU] * 100 [jiffies/sec] * (5 * 60) [seconds] = 54000\n        #   - budget: 54000\n        #     limit: 200\n        #\n        # if there are no buckets configured, the dynamic CPU limiting is disabled.\n        cpu:\n          buckets: []\n          samplingPeriod: \"10s\"\n          controlPeriod: \"15m\"","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/workspaces","loc":{"lines":{"from":44,"to":61}}}}],["2673",{"pageContent":"2.  Do a `helm upgrade --install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.10.0` to apply the changes.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/workspaces","loc":{"lines":{"from":64,"to":64}}}}],["2674",{"pageContent":"---\nsection: self-hosted/helm-deprecated\ntitle: Installing Gitpod Self-Hosted\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Install Gitpod Self-Hosted\n\n> ⚠️ **Deprecated Content**\n>\n> The content of this page assumes you are using Helm, which is now deprecated. Please use the [Installer](../latest) instead.\n\n- [Install Gitpod Self-Hosted on Kubernetes](./installation/on-kubernetes)","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/installation","loc":{"lines":{"from":1,"to":16}}}}],["2675",{"pageContent":"---\nsection: self-hosted/helm-deprecated\ntitle: Installation requirements for Gitpod Self-Hosted\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Installation requirements for Gitpod Self-Hosted\n\n> ⚠️ **Deprecated Content**\n>\n> The content of this page assumes you are using Helm, which is now deprecated. Please use the [Installer](../latest) instead.\n\nThis page details the software and hardware requirements for installing Gitpod Self-Hosted on your own infrastructure.\n\n## Supported Kubernetes distributions\n\nGitpod Self-Hosted runs well on:\n\n- Amazon Elastic Kubernetes Service\n- Google Kubernetes Engine\n- K3s\n- Microsoft Azure Kubernetes Service","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/requirements","loc":{"lines":{"from":1,"to":25}}}}],["2676",{"pageContent":"Supported Kubernetes distributions\n\nGitpod Self-Hosted runs well on:\n\n- Amazon Elastic Kubernetes Service\n- Google Kubernetes Engine\n- K3s\n- Microsoft Azure Kubernetes Service\n\n## Incompatible Kubernetes distributions\n\nThese platforms do not currently work with Gitpod Self-Hosted but we would like to support them in the future. Gitpod is an open-source project, maybe you could contribute the required changes to help get them working sooner?\n\n- [Red Hat® OpenShift®](https://github.com/gitpod-io/gitpod/issues/5409)\n- [Rancher Kubernetes Engine (RKE)](https://github.com/gitpod-io/gitpod/issues/5410)\n\nIf you are considering purchasing a commercial license for Gitpod Self-Hosted and need one of the above platforms then please [contact us](/contact/sales) to start discussions about making support for them happen sooner.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/requirements","loc":{"lines":{"from":25,"to":41}}}}],["2677",{"pageContent":"Minimum Kubernetes requirements\n\nWe strongly recommend deploying a dedicated kubernetes cluster just for Gitpod Self-Hosted.\n\nHere are the minimum requirements:\n\n- Either Ubuntu 18.04 with ≥ v5.4 kernel or Ubuntu 20.04 with ≥ v5.4 kernel.\n- Calico for the networking overlay and network policy.\n- Kubernetes ≥ 1.18.\n- containerd ≥ 1.2.\n- helm ≥ 3.6.\n\n## Minimum compute resources\n\nIf you want to run Gitpod Self-Hosted at home we recommend at minimum 2vCPU's and 8GB of memory. For a better experience we recommend at least 4vCPUs and 16GB RAM for workspace nodes. For cost efficiency, we recommend enabling cluster-autoscaling when running on a commercial cloud provider.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/requirements","loc":{"lines":{"from":43,"to":57}}}}],["2678",{"pageContent":"Runtime requirements\n\n### DNS\n\nGitpod requires a domain (or sub-domain on a domain) that is resolvable by your name servers. As Gitpod launches services and workspaces on additional subdomains it also needs two wildcard domains.\n\nFor example:\n\n```\nyour-domain.com\n*.your-domain.com\n*.ws.your-domain.com\n```\n\nor\n\n```\ngitpod.your-domain.com\n*.gitpod.your-domain.com\n*.ws.gitpod.your-domain.com\n```\n\n### Ingress\n\n- Gitpod is designed to serve traffic directly to your local network or internet.\n- Wrapping Gitpod Self-Hosted behind proxies such as nginx or configurations where URLs are rewritten are not supported.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/requirements","loc":{"lines":{"from":59,"to":84}}}}],["2679",{"pageContent":"SSL\n\n- Gitpod requires trusted HTTPS certificates. While there is no hard requirement on any certificate authority, we recommend using an [ACME certificate](https://caddyserver.com/docs/automatic-https#acme-challenges) issuer (such as [ZeroSSL](https://zerossl.com) or [LetsEncrypt](https://letsencrypt.org)) to automatically renew and install certificates as we do for [gitpod.io](https://gitpod.io).\n- Installation of Gitpod with SSL certificates signed with your own CA are not currently supported. This scenario is desired and we would welcome help getting [this community pull-request](https://github.com/gitpod-io/gitpod/pull/2984) merged.\n- The HTTPS certificates for your domain must include `your-domain.com`, `*.your-domain.com` and `*.ws.your-domain.com`. Beware that wildcard certificates are valid for one level only (i.e. `*.a.com` is not valid for `c.b.a.com`)\n\n### Storage\n\n- Either Google Cloud Storage or Amazon S3 or MinIO Storage.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/requirements","loc":{"lines":{"from":86,"to":94}}}}],["2680",{"pageContent":"Storage\n\n- Either Google Cloud Storage or Amazon S3 or MinIO Storage.\n\n### Database\n\n- Gitpod uses a MySQL database to store user data.\n- By default Gitpod ships with a MySQL database built-in and data is stored using a Kubernetes PersistentVolume.\n- For production settings, we recommend operating your own MySQL database (version v5.7 or newer).","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/requirements","loc":{"lines":{"from":94,"to":102}}}}],["2681",{"pageContent":"Supported web browsers\n\nGitpod Self-Hosted works with the following browsers:\n\n- Mozilla Firefox\n- Google Chrome\n- Apple Safari (iPad OS and Desktop)\n- Microsoft Edge (Chromium)","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/requirements","loc":{"lines":{"from":104,"to":111}}}}],["2682",{"pageContent":"---\nsection: self-hosted/helm-deprecated\ntitle: Install Gitpod Self-Hosted on Kubernetes\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Install Gitpod Self-Hosted on Kubernetes\n\n> ⚠️ **Deprecated Content**\n>\n> The content of this page assumes you are using Helm, which is now deprecated. Please use the [Installer](../../latest) instead.\n\nThis section describes how to install Gitpod on any Kubernetes cluster using [Helm](https://helm.sh). This is the most flexible and generic way of installing Gitpod. The chart for stable releases resides in Helm repository [charts.gitpod.io](https://charts.gitpod.io), charts for branch-builds can be found [here](#install-branch-build), and the source of the charts is in our [public git repository](https://github.com/gitpod-io/gitpod/blob/main/chart/).","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/installation/on-kubernetes","loc":{"lines":{"from":1,"to":16}}}}],["2683",{"pageContent":"For some platforms we offer [Terraform](https://www.terraform.io/) scripts that ease the infrastructure setup. Once the script has created the necessary infrastructure it will output a `values.terraform.yaml` that contains infrastructure-specific configuration for the `helm` deployment.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/installation/on-kubernetes","loc":{"lines":{"from":18,"to":18}}}}],["2684",{"pageContent":"Prerequisites\n\nSee [Installation requirements for Gitpod Self-Hosted](../requirements).","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/installation/on-kubernetes","loc":{"lines":{"from":20,"to":22}}}}],["2685",{"pageContent":"Installation\n\nTo install Gitpod in your Kubernetes cluster, follow these steps:\n\n1. Create a file `values.custom.yaml` with the following content (please replace the keys/secrets, for instance with `openssl rand -hex 20`):\n\n   ```yaml\n   docker-registry:\n     authentication:\n       username: gitpod\n       password: your-registry-password\n   rabbitmq:\n     auth:\n       username: your-rabbitmq-user\n       password: your-secret-rabbitmq-password\n   minio:\n     accessKey: your-random-access-key\n     secretKey: your-random-secret-key\n   ```\n\n   You should replace the keys with 2 different random strings unique for your installation.\n\n1. Run the following commands in your local terminal:\n\n   ```bash\n   helm repo add gitpod.io https://charts.gitpod.io\n\n   helm repo update\n\n   helm install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.10.0","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/installation/on-kubernetes","loc":{"lines":{"from":24,"to":53}}}}],["2686",{"pageContent":"1. Configure [domain and https](../configuration/ingress).\n\n1. Run `kubectl get pods` and verify that all pods are in state `RUNNING`. If some are not, please see the [Troubleshooting Guide](../troubleshooting).\n\n1. Go to `https://<your-domain.com>` and follow the steps to complete the installation.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/installation/on-kubernetes","loc":{"lines":{"from":56,"to":60}}}}],["2687",{"pageContent":"Upgrade\n\n1.  Check the [Upgrade Guide](../updating) and follow the steps outlined there.\n\n1.  Run the update\n\n    ```bash\n    helm install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.10.0\n    ```\n\n1.  Run `kubectl get pods` and verify that all pods are in state `RUNNING`. If some are not, please see the [Troubleshooting Guide](../troubleshooting).\n\n## Recommended Configuration\n\nBy default, the Helm chart installs a working Gitpod installation in a lot of scenarios. Yet, there are certain things you might want to review when installing Gitpod for long term use and/or a bigger audience:\n\n- [**Database**](../configuration/database): Configure where Gitpod stores all internal runtime data.\n- [**Storage**](../configuration/storage): Configure where Gitpod persists workspace content.\n- [**Docker Registry**](../configuration/docker-registry): Configure where Gitpod stores workspace images.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/installation/on-kubernetes","loc":{"lines":{"from":62,"to":80}}}}],["2688",{"pageContent":"Customization\n\nFurther customizations:\n\n- [**Kubernetes Nodes**](../configuration/nodes): Configure file system layout and the workspace's node associativity.\n- [**Workspaces**](../configuration/workspaces): Configure workspace sizing.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/installation/on-kubernetes","loc":{"lines":{"from":82,"to":87}}}}],["2689",{"pageContent":"---\nsection: self-hosted/helm-deprecated\ntitle: Updating Gitpod Self-Hosted\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Updating Gitpod Self-Hosted\n\n> ⚠️ **Deprecated Content**\n>\n> The content of this page assumes you are using Helm, which is now deprecated. Please use the [Installer](../latest) instead.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/updating","loc":{"lines":{"from":1,"to":14}}}}],["2690",{"pageContent":"Upgrading Gitpod from v0.9.0 to v0.10.0\n\n### default registry now requires password and username\n\nGitpod by default ships with an in-cluster docker-registry. If you use that one (instead of an external one), add the following to your `values.custom.yaml`:\n\n```yaml\ndocker-registry:\n  authentication:\n    username: gitpod\n    password: your-registry-password\n```\n\nAfterwards, a full redeploy is required (your DB and workspace state is kept in a PV):\n\n```bash\nhelm del gitpod\nhelm upgrade --install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.10.0\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/updating","loc":{"lines":{"from":16,"to":34}}}}],["2691",{"pageContent":"Certificate file names changed\n\nThe file names we expect in a secret has changed. Before we'd require the default names Let's Encrypt would use. Since 0.10.0 we require a `tls.key` and a `tls.crt`.\nTo adjust this in your existing installation:\n\n1. execute the following inside your config folder:\n\n```\nmv secrets/https-certificates/fullchain.pem secrets/https-certificates/tls.crt\nmv secrets/https-certificates/privkey.pem secrets/https-certificates/tls.key\n```\n\n2. Upgrade your installation again:\n\n```bash\nhelm install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.10.0\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/updating","loc":{"lines":{"from":36,"to":52}}}}],["2692",{"pageContent":"Upgrading Gitpod from v0.8.0 to v0.10.0\n\nWith version 0.10.0 there is one change that requires user action regarding the RabbitMQ messagebus:\n\n### RabbitMQ now requires explicitly set password and username\n\nGitpod uses a RabbitMQ installation for distributing messages between components. So far that has been using default credentials if not configured otherwise. With v0.10.0 this is now explicitly required.\nTo do so add the following to your `values.custom.yaml`:\n\n```\nrabbitmq:\n  auth:\n    username: your-rabbitmq-user\n    password: your-secret-rabbitmq-password\n```\n\nIf this is not present, `helm` will fail with the following message:\n\n> RabbitMQ username is required, please add a value to your values.yaml or with the helm flag --set rabbitmq.auth.username=xxxxx","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/updating","loc":{"lines":{"from":54,"to":72}}}}],["2693",{"pageContent":"Upgrading Gitpod from v0.6.0 to v0.7.0\n\nWith version 0.7.0 there are two major changes that require a user action. Both relate to the remote storage.\n\n### Built-in MinIO is now accessible at minio.your-gitpod-domain.com\n\nWhen you install Gitpod on your own Kubernetes installation, it brings a built-in MinIO object storage (unless disabled). As of v0.7.0, the built-in MinIO instance is accessible at https://minio.your-gitpod-domain.com. That's the reason that (for security reasons) we do not set a default access and secret key for the built-in MinIO installation anymore. That means, you need to add your own random keys in your values files like this:\n\n```\nminio:\n  accessKey: add-a-radom-access-key-here\n  secretKey: add-a-radom-secret-key-here\n```\n\nIf you don't do this, `helm` will fail with the following message:\n\n> minio access key is required, please add a value to your values.yaml","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/updating","loc":{"lines":{"from":74,"to":90}}}}],["2694",{"pageContent":"Remote storage config has been moved to a new component\n\nIf you have a custom remote storage config (e.g. you use your own MinIO instance or the Google Cloud Storage), you need to move the config from the component `wsDaemon` to the new component `contentService`. See the [Storage Guide](./configuration/storage) for an example.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/updating","loc":{"lines":{"from":92,"to":94}}}}],["2695",{"pageContent":"---\nsection: self-hosted/latest\ntitle: Administration of Gitpod Self-Hosted\n---\n\n<script context=\"module\">\n  export const prerender = true;\n  export const load = () => {\n    return {\n      status: 301,\n      redirect: \"/docs/configure/self-hosted/latest\"\n    }\n  };\n</script>","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/administration","loc":{"lines":{"from":1,"to":14}}}}],["2696",{"pageContent":"---\nsection: self-hosted/helm-deprecated\ntitle: Troubleshooting Gitpod Self-Hosted\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Troubleshooting Gitpod Self-Hosted\n\n> ⚠️ **Deprecated Content**\n>\n> The content of this page assumes you are using Helm, which is now deprecated. Please use the [Installer](../latest) instead.\n\nThis section should solve all errors that might come up during installation of Gitpod.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/troubleshooting","loc":{"lines":{"from":1,"to":16}}}}],["2697",{"pageContent":"1. `ws-daemon` is stuck in `Init: 0/1`\n\n`kubectl describe pod ws-daemon-...` gives:\n`MountVolume.SetUp failed for volume \"node-fs1\" : hostPath type check failed: /run/containerd/io.containerd.runtime.v1.linux/k8s.io is not a directory`","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/troubleshooting","loc":{"lines":{"from":18,"to":21}}}}],["2698",{"pageContent":"Solution\n\n1.  `ssh` onto the node, `mount | grep rootfs` and find the directory where your containers are stored. Common paths are:\n\n    - `/run/containerd/io.containerd.runtime.v1.linux/k8s.io`\n    - `/run/containerd/io.containerd.runtime.v1.linux/moby`\n    - `/run/containerd/io.containerd.runtime.v2.task/k8s.io`\n\n2.  _Merge_ the following into your `values.custom.yaml`:\n\n    ```\n    components:\n      wsDaemon:\n        containerRuntime:\n          nodeRoots:\n          - <your path here>\n    ```\n\n3.  Do an `helm upgrade --install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.10.0` to apply the changes.\n\n> Example: For `k3s` a common configuration looks like this:\n\n```yaml\ncomponents:\n  wsDaemon:\n    containerRuntime:\n      containerd:\n        socket: /var/run/k3s/containerd/containerd.sock\n      nodeRoots:\n        - /var/run/k3s/containerd/io.containerd.runtime.v2.task/k8s.io\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/troubleshooting","loc":{"lines":{"from":23,"to":53}}}}],["2699",{"pageContent":"2. `helm install` fails with: \"minio access key is required, please add a value to your values.yaml\"\n\nSince `0.7.0` minio requires custom credentials to be configured.\n\n### Solution\n\n1.  Follow the [Upgrade Guide](./updating).\n\n## 3. After upgrade, the `minio` Pod is stuck in `ContainerCreating`\n\nThis is caused by a bug in the minio Helm chart which blocks itself on updates.\n\n### Solution\n\n1.  `kubectl scale deployments/minio --replicas=0`\n\n1.  `kubectl scale deployments/minio --replicas=1`\n\n1.  Wait until the pod comes up.\n\n## 3. `agent-smith` daemonset fails in deployment\n\nIn the v0.10.0 release `agent-smith` is [incorrectly enabled](https://github.com/gitpod-io/gitpod/issues/4885#issuecomment-884205801) in Gitpod Self-Hosted.\n\n### Solution\n\nAdd the following to your `values.yaml` file to disable agent-smith:\n\n```yaml\ncomponents:\n  agentSmith:\n    disabled: true\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/troubleshooting","loc":{"lines":{"from":55,"to":87}}}}],["2700",{"pageContent":"4. Workspaces stopping once container image downloaded\n\nThis may be caused by your host operating system not supporting shiftfs. Check the `ws-daemon` logs for an error message like `\"error\",\"message\":\"cannot mount shiftfs mark\"` to confirm.\n\nFurther proof can be found by checking if the shiftfs kernel module is present on your host operating system:\n\n```shell\nfind /lib/modules/ -name '*shiftfs*'\n```\n\nIf this returns nothing, shiftfs is not supported by your instance and you will need to use fuse instead.\n\n### Solution\n\nAdd the following to your `values.yaml` file to use fuse-overlayfs:\n\n```yaml\ncomponents:\n  wsDaemon:\n    userNamespaces:\n      fsShift: fuse\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/troubleshooting","loc":{"lines":{"from":89,"to":110}}}}],["2701",{"pageContent":"5. Create workspace results in `7 PERMISSION_DENIED: cannot resolve workspace image` error\n\n<!-- svelte-ignore a11y-img-redundant-alt -->\n\n![Request createWorkspace failed with message: 7 PERMISSION_DENIED: cannot resolve workspace image: not authorized Unknown Error](../../../static/images/docs/self-hosted/troubleshooting/registry-unauthorized.jpeg)\n\nIf you are using the internal Docker registry, you will need to specify the username and password so your Gitpod instance can access it.\n\n### Solution\n\nAdd the following to your `values.yaml` file to authorize the Docker registry:\n\n```yaml\ncomponents:\n  docker-registry:\n    authentication:\n      username: gitpod\n      password: gitpod\n```\n\n> Replace these with your own values.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/troubleshooting","loc":{"lines":{"from":112,"to":132}}}}],["2702",{"pageContent":"---\nsection: self-hosted/latest\nsubsection: installation-guides\ntitle: Install Gitpod in an Air-Gapped Network\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Install Gitpod in an Air Gapped Network\n\n> ⚠️ **Self-hosted as a product is no longer supported**\n>\n> The last official update of this product is the [November 2022 self-hosted release](https://www.gitpod.io/changelog/november-self-hosted-release). We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our [free community license](https://www.gitpod.io/community-license). However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n> Read [our blog on Gitpod Dedicated](/blog/introducing-gitpod-dedicated) to learn why we made the decision to discontinue self-hosted.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/air-gap","loc":{"lines":{"from":1,"to":16}}}}],["2703",{"pageContent":"> **Note:** Installing Gitpod in an air gapped network is a feature limited to our [Professional Plan](https://www.gitpod.io/self-hosted). We support air-gap mode for paying customers only.\n\nIn this guide, we expect you to have a cluster up and running that [meets the requirements](../requirements) and have the [required components](../requirements) installed and configured (at least cert-manager is needed).","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/air-gap","loc":{"lines":{"from":18,"to":20}}}}],["2704",{"pageContent":"Preparation\n\nBefore you can start with the installation, you need to prepare the following:\n\n1. You need to have a Docker registry available in your network where you can push images to and where your Kubernetes cluster can pull images from.\n1. You need to download installation bundles.\n\nWe provide you with a URL and password to a download portal. There you will find the following bundles that you need to download:\n\n1. KOTS CLI package `kots_linux_amd64.tar.gz` <br/> (provides you with the `kubectl kots` CLI binary)\n2. KOTS Airgap Bundle `kotsadm.tar.gz` <br/> (provides you with the Docker images you need for the Gitpod KOTS installer)\n3. Gitpod Airgap Bundle `gitpod-<version>.airgap` <br/> (provides you with the Gitpod Docker images)\n\n![kots-airgap-download](../../static/images/docs/self-hosted/kots-airgap-download.png)\n\nCopy the KOTS CLI package as well as the KOTS Airgap Bundle to the machine where you are able to run `kubectl`.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/air-gap","loc":{"lines":{"from":22,"to":37}}}}],["2705",{"pageContent":"Install KOTS CLI\n\nUnpack the KOTS CLI package `kots_linux_amd64.tar.gz`, rename the binary `kots` to `kubectl-kots`, and copy it to `/usr/local/bin/` (or to any other folder that is in your `PATH`).\n\nNow, you should be able to run the following command:\n\n```shell\n$ kubectl kots help\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/air-gap","loc":{"lines":{"from":39,"to":47}}}}],["2706",{"pageContent":"Install Gitpod\n\nAt first, you need to push the images that are needed for the installation admin console to your registry.\n\n```bash\n$ kubectl kots admin-console push-images \\\n    ./kotsadm.tar.gz \\\n    <registry> \\\n    --registry-username <username> \\\n    --registry-password <password>","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/air-gap","loc":{"lines":{"from":49,"to":58}}}}],["2707",{"pageContent":"Replace the following placeholder:\n\n| Placeholder  |                                                                                                           |\n| ------------ | --------------------------------------------------------------------------------------------------------- |\n| `<registry>` | The registry URI in the form `<host>:<port>/<namespace>`,<br/> e.g. `my-registry.example.com:443/gitpod`. |\n| `<username>` | The username for the registry that has write access (is allowed to push).                                 |\n| `<password>` | The password to the username.                                                                             |\n\nNext, you can start installing Gitpod like this:\n\n```bash\n$ kubectl kots install gitpod \\\n    --kotsadm-namespace <namespace> \\\n    --kotsadm-registry <registry> \\\n    --registry-username <username> \\\n    --registry-password <password>","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/air-gap","loc":{"lines":{"from":61,"to":76}}}}],["2708",{"pageContent":"Replace the following placeholder:\n\n| Placeholder   |                                                                          |\n| ------------- | ------------------------------------------------------------------------ |\n| `<namespace>` | Namespace that is used in the registry URI above.                        |\n| `<registry>`  | The hostname of your registry, e.g. `my-registry.example.com:443`.       |\n| `<username>`  | The username for the registry that has read access (is allowed to pull). |\n| `<password>`  | The password to the username.                                            |\n\nYou will be asked for the namespace you want to install Gitpod to as well as a password for the admin console. After some time, you will see the following output:\n\n```\n  • Press Ctrl+C to exit\n  • Go to http://localhost:8800 to access the Admin Console","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/air-gap","loc":{"lines":{"from":79,"to":92}}}}],["2709",{"pageContent":"Open your favorite browser and go to `http://localhost:8800` (port `8800` is opened on your node on `localhost` only--you may want to forward the port to your workstation in order to access the admin console).\n\nNow, you will be asked for the password and the license. On the next page, you have to set:\n\n- the hostname of your registry (e.g. `my-registry.example.com:443`),\n- username and password (read access), as well as\n- the namespace that you used in the registry URI above (e.g. `gitpod`).\n\nClick on “choose a bundle to upload” and select your `gitpod-<version>.airgap` file on your local computer. Then hit the “Upload airgap bundle” button.\n\n![kots-airgap-upload](../../static/images/docs/self-hosted/kots-airgap-upload.png)\n\nUploading this file and pushing the images to your registry will take a while (could take several hours depending on your internet connection). Grab a cup of coffee or tea and wait for it to be ready. ☕","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/air-gap","loc":{"lines":{"from":95,"to":107}}}}],["2710",{"pageContent":"Once the images has been pushed to your registry, you can continue to install Gitpod as described in the [installation guide](../installing-gitpod). Happy coding!","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/air-gap","loc":{"lines":{"from":109,"to":109}}}}],["2711",{"pageContent":"---\nsection: self-hosted/latest\nsubsection: installation-guides\ntitle: Component Customization\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Component Customization\n\n> ⚠️ **Self-hosted as a product is no longer supported**\n>\n> The last official update of this product is the [November 2022 self-hosted release](https://www.gitpod.io/changelog/november-self-hosted-release). We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our [free community license](https://www.gitpod.io/community-license). However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n> Read [our blog on Gitpod Dedicated](/blog/introducing-gitpod-dedicated) to learn why we made the decision to discontinue self-hosted.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/components","loc":{"lines":{"from":1,"to":16}}}}],["2712",{"pageContent":"In this guide, we expect you to have a cluster up and running that [meets the requirements](../requirements) and has the [required components](../requirements) installed and configured (at least cert-manager is needed).\n\nThis guide assumes that you are using our default installation method from our [installation guide](../installing-gitpod).","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/components","loc":{"lines":{"from":18,"to":20}}}}],["2713",{"pageContent":"Rationale\n\nGitpod self-hosted is built to work by default, but it also has to be incredibly flexible. Our installation defaults will work for the vast majority of users, but there will be occassions when it does not. In order to add more flexibility, you have the ability to customise some of Gitpod's components.\n\nIn your KOTS dashboard, you will need to enable advanced options. This will enable the \"Components\" section.\n\n![kots-advanced](../../static/images/docs/self-hosted/kots-advanced.png)","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/components","loc":{"lines":{"from":22,"to":28}}}}],["2714",{"pageContent":"Proxy service type\n\nAll web traffic enters the application through the `Proxy` component. By default, this is a `LoadBalancer` type which will expose the application through the cloud provider's load balancer.\n\nUnder certain circumstances, this may be undesirable. Under the \"Advanced\" section, you may select a different service type - all [Kubernetes service types](https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types) are supported, except `ExternalName`. If you are using anything other than `LoadBalancer`, you are responsible for configuring your network to route traffic through to the `proxy` service.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/components","loc":{"lines":{"from":30,"to":34}}}}],["2715",{"pageContent":"---\nsection: self-hosted/latest\ntitle: Applying custom annotations, labels and environment variables\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Applying custom annotations, labels and environment variables\n\n> ⚠️ **Self-hosted as a product is no longer supported**\n>\n> The last official update of this product is the [November 2022 self-hosted release](https://www.gitpod.io/changelog/november-self-hosted-release). We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our [free community license](https://www.gitpod.io/community-license). However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n> Read [our blog on Gitpod Dedicated](/blog/introducing-gitpod-dedicated) to learn why we made the decision to discontinue self-hosted.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/customization","loc":{"lines":{"from":1,"to":15}}}}],["2716",{"pageContent":"In this guide, we expect you to have a cluster up and running that [meets the requirements](../requirements) and has the [required components](../requirements) installed and configured (at least cert-manager is needed).\n\nThis guide assumes that you are using our default installation method from our [installation guide](../installing-gitpod).","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/customization","loc":{"lines":{"from":17,"to":19}}}}],["2717",{"pageContent":"Rationale\n\nThere are times when it is necessary to add custom annotations, environment variables and labels to your installation in order to add it to your environment. For example, one may need to support specific monitoring and observability software or want to target a specific load balancer type.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/customization","loc":{"lines":{"from":21,"to":23}}}}],["2718",{"pageContent":"Configuration\n\nBefore you start, you will need to create a YAML file that is subsequently used to describe your customizations. The structure is based upon the standard Kubernetes resource definition.\n\nOnce created, this file can be uploaded to the Installation Admin UI during installation under the advanced features section (bottom).\n\n![kots-advanced-customization](../../static/images/docs/self-hosted/kots-advanced-customization.png)","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/customization","loc":{"lines":{"from":25,"to":31}}}}],["2719",{"pageContent":"Annotations and labels\n\nFor these to be applied to a resource, these must match the `apiVersion`, `kind` and `metadata.name` properties of the target resource. These accept any value that is valid as per the Kubernetes specifications and also an `*` as a wildcard.\n\nAny properties in `metadata.annotations` and `metadata.labels` are then applied to the matching resource(s). These are key/value maps, where both key and value are strings.\n\n**IMPORTANT** You cannot directly customize the properties on a `Pod`. Instead, these will inherit the annotation/label customization from its parent (`Deployment`, `DaemonSet`, `StatefulSet`, `Job` etc).\n\n### Environment variables\n\nFor environment variables, these must match `metadata.name`. `apiVersion` and `kind` are ignored as these are only implemented on resources with containers.\n\nAny properties in `spec.env` are then applied. These should have a `name` and `value` as per the Kubernetes specification.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/customization","loc":{"lines":{"from":33,"to":45}}}}],["2720",{"pageContent":"Example Configuration\n\n```yaml\ncustomization:\n  - apiVersion: \"*\"\n    kind: \"*\"\n    metadata:\n      name: \"*\"\n      annotations:\n        appliedToAll: value\n        hello: world\n      labels:\n        appliedToAll: value\n        hello: world\n  - apiVersion: \"apps/v1\"\n    kind: \"Deployment\"\n    metadata:\n      name: \"ws-manager\"\n      annotations:\n        hello: ws-manager\n      labels:\n        hello: ws-manager\n    spec:\n      env:\n        - name: HELLO\n          value: world","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/customization","loc":{"lines":{"from":47,"to":72}}}}],["2721",{"pageContent":"This example would generate the following spec (these are simplified for readability reasons):","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/customization","loc":{"lines":{"from":75,"to":75}}}}],["2722",{"pageContent":"```yaml\n---\n# apps/v1/DaemonSet ws-daemon\napiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  labels:\n    app: gitpod # system-value\n    component: ws-daemon # system-value\n    appliedToAll: value\n    hello: world\n  annotations:\n    appliedToAll: value\n    hello: world\n  name: ws-daemon\n---\n# apps/v1/Deployment ws-manager\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: gitpod\n    component: ws-manager\n    appliedToAll: value\n    hello: ws-manager\n  annotations:\n    appliedToAll: value\n    hello: ws-manager\n  name: ws-manager\nspec:\n  template:\n    # The custom annotations/labels are inherited from the Deployment spec\n    metadata:\n      annotations:\n        appliedToAll: value\n        gitpod.io/checksum_config: xxxx\n        hello: ws-manager\n      labels:\n        app: gitpod\n        component: ws-manager\n        appliedToAll: value\n        hello: ws-manager\n      name: ws-manager\n    spec:\n      containers:\n        - env:\n            - name: HELLO\n              value: world","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/customization","loc":{"lines":{"from":77,"to":124}}}}],["2723",{"pageContent":"In the event of multiple matches, the final matching customization is applied. Therefore, it is a good idea to structure your customization from least to most specific.\n\n> **Important:** System-generated values will never be overridden.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/customization","loc":{"lines":{"from":127,"to":129}}}}],["2724",{"pageContent":"AWS Proxy Service Example\n\nThis is an example configuration for working with [AWS Load Balancer Controllers](https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.4/) of the [Network Load Balancer](https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.4/guide/service/nlb/) variety, when deployed in [AWS EKS](https://aws.amazon.com/eks/). This example creates a load balancer with a public IP, references two subnets: `[subnet-012e8ff1de0654321,subnet-0a6d28629bc123456]`, tunes timeouts, and ensures the tags `project:gitpod-docs` and `team:cs` are applied to the AWS resources it creates.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/customization","loc":{"lines":{"from":131,"to":133}}}}],["2725",{"pageContent":"```yaml\n---\ncustomization:\n  - apiVersion: \"*\"\n    kind: \"Service\"\n    metadata:\n      name: \"proxy\"\n      annotations:\n        service.beta.kubernetes.io/aws-load-balancer-scheme: \"internet-facing\"\n        service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: \"instance\"\n        service.beta.kubernetes.io/aws-load-balancer-subnets: \"subnet-012e8ff1de0654321,subnet-0a6d28629bc123456\"\n        alb.ingress.kubernetes.io/load-balancer-attributes: \"idle_timeout.timeout_seconds=3600\"\n        service.beta.kubernetes.io/aws-load-balancer-additional-resource-tags: \"project=gitpod-docs,team=cs\"\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/customization","loc":{"lines":{"from":135,"to":148}}}}],["2726",{"pageContent":"Limitations\n\n> This limitation has been removed as of [`2022.08.0`](https://github.com/gitpod-io/gitpod/releases/tag/2022.08.0).\n\nLabels are immutable on some Kubernetes resources, such as `Deployments`, `DaemonSets` and `StatefulSets`.\n\nIf you wish to change a label on one of these resources, you must destroy that resource first. This can be achieved by running `kubectl delete <resource> --namespace <namespace> <name>` prior to running the KOTS deployment.\n\nIn the event of there being multiple resources that need to be amended, you can run `helm uninstall --namespace <namespace> gitpod`. If you are using an in-cluster database or object storage, you should not run this command without taking a backup of your persistent volumes first.\n\n> **WARNING:** If deleting Kubernetes resources, your Gitpod instance is likely to become inaccessible and unstable. This should not be attempted while it is being used for normal development as data loss is likely.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/customization","loc":{"lines":{"from":150,"to":160}}}}],["2727",{"pageContent":"---\nsection: self-hosted/latest\nsubsection: installation-guides\ntitle: Private Registries\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Setting an installation-wide default workspace image\n\n> ⚠️ **Self-hosted as a product is no longer supported**\n>\n> The last official update of this product is the [November 2022 self-hosted release](https://www.gitpod.io/changelog/november-self-hosted-release). We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our [free community license](https://www.gitpod.io/community-license). However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n> Read [our blog on Gitpod Dedicated](/blog/introducing-gitpod-dedicated) to learn why we made the decision to discontinue self-hosted.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/default-workspace-image","loc":{"lines":{"from":1,"to":16}}}}],["2728",{"pageContent":"This guide describes how to set a default workspace image that will apply to your entire Gitpod Self-Hosted installation. Please refer to the [Docker image documentation](/docs/configure/workspaces/workspace-image) for more information about workspace images.\n\n> **Note:** there are two ways of setting an image for a workspace: via the installation-wide default `workspaceImage` (mentioned here) and the [`.gitpod.yml` file](/docs/references/gitpod-yml). The `.gitpod.yml` file will take precedence if both are set.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/default-workspace-image","loc":{"lines":{"from":18,"to":20}}}}],["2729",{"pageContent":"Setting a default workspace image\n\n> **Note:** this will apply to your entire installation. If you are using a private registry for your image, please ensure you add it to the allow list and provide credentials for it - for guidance, see [using private registries](/docs/configure/self-hosted/latest/advanced/private-registries).\n\nCurrently, the default workspace image can only be set via the [config patch](/docs/configure/self-hosted/latest/config-patches). In the future, we plan to also allow you to set this via the installation UI.\n\n```yaml\nworkspace:\n  workspaceImage: string\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/default-workspace-image","loc":{"lines":{"from":22,"to":31}}}}],["2730",{"pageContent":"---\nsection: self-hosted/latest\nsubsection: installation-guides\ntitle: Setting up your EKS cluster with dual ALB + NLB load balancers\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Setting up your EKS cluster with dual ALB + NLB load balancers\n\n> ⚠️ **Self-hosted as a product is no longer supported**\n>\n> The last official update of this product is the [November 2022 self-hosted release](https://www.gitpod.io/changelog/november-self-hosted-release). We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our [free community license](https://www.gitpod.io/community-license). However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n> Read [our blog on Gitpod Dedicated](/blog/introducing-gitpod-dedicated) to learn why we made the decision to discontinue self-hosted.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/eks-with-alb-and-nlb","loc":{"lines":{"from":1,"to":16}}}}],["2731",{"pageContent":"If you are unable to use an AWS classic load balancer (CLB) (e.g. because you want to use SSL Certificates generated by AWS) you need to set up an Application Load Balancer (ALB) for HTTPS traffic (e.g. when using VS Code in the browser). If you wish to use Desktop IDEs together with Gitpod Self-Hosted, which use SSH for networking, and thus require a Level 4 load balancer, you also need to create a Network Load balancer (NLB) (which is a Level 4 load balancer that can handle ssh traffic). AWS' ALB is a level 7 load balancer and can only handle HTTPS traffic.\n\nThis guide shows how to install both an ALB and an NLB into an EKS cluster. It is meant to be used as a supplement to the [Single Cluster Reference Architecture (AWS)](../reference-architecture/single-cluster-ref-arch) which only installs a CLB by default. You will configure your DNS to point ssh traffic to the NLB and HTTPS traffic to the ALB.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/eks-with-alb-and-nlb","loc":{"lines":{"from":18,"to":20}}}}],["2732",{"pageContent":"> **Note:** This guide assumes that you will be using AWS to manage your SSL certificates.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/eks-with-alb-and-nlb","loc":{"lines":{"from":22,"to":22}}}}],["2733",{"pageContent":"Setting up an ALB and NLB","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/eks-with-alb-and-nlb","loc":{"lines":{"from":24,"to":24}}}}],["2734",{"pageContent":"0. Node configuration\n\nBecause we need to use an internal CA for communication that has to be distributed to the nodes, we need to ensure all managed nodes have `/etc/containerd/certs.d` in their `/etc/containerd/config.toml` to load the self-signed certificate used for internal communication.\n\n```toml\n[plugins.\"io.containerd.grpc.v1.cri\".registry]\n  config_path = \"/etc/containerd/certs.d\"\n```\n\nThese are two examples to enforce this:\n\n1. Use python to insert the values into the toml file respecting the formatting:\n\n```shell\napt-get update && apt-get install -y python3-pip\npip3 install toml mergedeep\n/usr/bin/env python3 - << EOF > /var/log/update-containerd-config-out.txt 2>&1\nimport toml\nfrom mergedeep import merge\nc = toml.load('/etc/containerd/config.toml')\nmerge(c, {'plugins': {'io.containerd.grpc.v1.cri': {'registry': {'config_path': '/etc/containerd/certs.d'}}}})\nwith open('/etc/containerd/config.toml', 'w') as f:\n  toml.dump(c, f)\nEOF\nservice containerd restart","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/eks-with-alb-and-nlb","loc":{"lines":{"from":26,"to":50}}}}],["2735",{"pageContent":"2. Bruteforce method that will just append the lines to `/etc/containerd/config.toml` which will work if there are no other registry settings present in your config.toml file\n\n```\ncat << CONFIG >> /etc/containerd/config.toml\n\n[plugins.\"io.containerd.grpc.v1.cri\".registry]\nconfig_path = \"/etc/containerd/certs.d\"\n\nCONFIG\n\nservice containerd restart","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/eks-with-alb-and-nlb","loc":{"lines":{"from":53,"to":63}}}}],["2736",{"pageContent":"<details>\n  <summary  class=\"text-p-medium\">Example of a complete overridebootstrap command</summary>\n\n```yaml\noverrideBootstrapCommand: |\n  #!/bin/bash\n  set -x\n  export CLUSTERNAME=gitpod\n  export NODEGROUP=services\n  export CONTAINER_RUNTIME=containerd\n  declare -a LABELS=(\n  eks.amazonaws.com/nodegroup=\"${NODEGROUP}\"\n      gitpod.io/workload_meta=true\n      gitpod.io/workload_ide=true\n    )\n    export USE_MAX_PODS=false\n    export KUBELET_EXTRA_ARGS=\"$(printf -- \"--node-labels=%s\" $(IFS=$','; echo \"${LABELS[*]}\"))\"\n  /etc/eks/bootstrap.sh ${CLUSTERNAME} --use-max-pods false\n\n  # Update containerd config while waiting on https://github.com/gitpod-io/gitpod/issues/11005","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/eks-with-alb-and-nlb","loc":{"lines":{"from":66,"to":85}}}}],["2737",{"pageContent":"# Update containerd config while waiting on https://github.com/gitpod-io/gitpod/issues/11005\n\n  apt-get update && apt-get install -y python3-pip\n  pip3 install toml mergedeep\n  /usr/bin/env python3 - << EOF > /var/log/update-containerd-config-out.txt 2>&1\n  import toml\n  from mergedeep import merge\n  c = toml.load('/etc/containerd/config.toml')\n  merge(c, {'plugins': {'io.containerd.grpc.v1.cri': {'registry': {'config_path': '/etc/containerd/certs.d'}}}})\n  with open('/etc/containerd/config.toml', 'w') as f:\n    toml.dump(c, f)\n  EOF\n  service containerd restart","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/eks-with-alb-and-nlb","loc":{"lines":{"from":85,"to":97}}}}],["2738",{"pageContent":"</details>","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/eks-with-alb-and-nlb","loc":{"lines":{"from":100,"to":100}}}}],["2739",{"pageContent":"1. Install AWS load balancer controller\n\nInstall the AWS [load balancer controller](https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.4/). The below example assumes you have created the user `aws-load-balancer-controller` with the correct [IAM permissions already](https://docs.aws.amazon.com/eks/latest/userguide/aws-load-balancer-controller.html). `--set hostNetwork=true` is required by Calico.\n\n```shell\nhelm repo add eks https://aws.github.io/eks-charts\nhelm repo update\nhelm upgrade aws-load-balancer-controller \\\n    eks/aws-load-balancer-controller \\\n    --atomic \\\n    --cleanup-on-fail \\\n    --install \\\n    --reset-values \\\n    --namespace kube-system \\\n    --set clusterName=<insert cluster name> \\\n    --set serviceAccount.create=false \\\n    --set serviceAccount.name=aws-load-balancer-controller \\\n    --set hostNetwork=true\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/eks-with-alb-and-nlb","loc":{"lines":{"from":102,"to":120}}}}],["2740",{"pageContent":"2. Install Gitpod\n\nEnsure that you've created all the required components as per [the reference architecture guide](../reference-architecture/single-cluster-ref-arch): [Object Storage](../reference-architecture/single-cluster-ref-arch#object-storage), [OCI Image Registry](../reference-architecture/single-cluster-ref-arch#oci-image-registry), [Database](../reference-architecture/single-cluster-ref-arch#database). Then [install Gitpod](../reference-architecture/single-cluster-ref-arch#install-gitpod). While configuring your Gitpod installation, make sure to check 'use self-signed certificate'. Make sure that you select `node port` as the service type for the proxy service in the components section of the installation UI (this assumes you are using version 2022.07 or later):\n\n![proxy service type](../../static/images/docs/self-hosted/proxy-service-type-ui.png)\n\nYou will also need to make sure that the \"allow login via SSH\" box is ticked:","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/eks-with-alb-and-nlb","loc":{"lines":{"from":122,"to":128}}}}],["2741",{"pageContent":"![proxy service type](../../static/images/docs/self-hosted/proxy-service-type-ui.png)\n\nYou will also need to make sure that the \"allow login via SSH\" box is ticked:\n\n![ssh gateway](../../static/images/docs/self-hosted/ssh-gateway.png)","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/eks-with-alb-and-nlb","loc":{"lines":{"from":128,"to":132}}}}],["2742",{"pageContent":"3. Create alb-ingresss.yaml\n\nUpdate the `alb-ingress.yaml` below with your site-specific options (you need to customize anything tagged with `<..>`):\n\n**alb-ingress.yaml**","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/eks-with-alb-and-nlb","loc":{"lines":{"from":134,"to":138}}}}],["2743",{"pageContent":"```yaml\n---\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  annotations:\n    kubernetes.io/ingress.class: alb\n    alb.ingress.kubernetes.io/actions.ssl-redirect: |-\n      {\n        \"Type\": \"redirect\",\n        \"RedirectConfig\": {\n          \"Protocol\": \"HTTPS\",\n          \"Port\": \"443\",\n          \"StatusCode\": \"HTTP_301\"\n        }\n      }\n    alb.ingress.kubernetes.io/backend-protocol: HTTPS\n    alb.ingress.kubernetes.io/healthcheck-protocol: HTTPS\n    alb.ingress.kubernetes.io/listen-ports: |-\n      [{\n        \"HTTP\": 80\n      }, {\n        \"HTTPS\": 443\n      }]\n    alb.ingress.kubernetes.io/load-balancer-attributes: idle_timeout.timeout_seconds=3600\n    alb.ingress.kubernetes.io/tags: Purpose=Gitpod,Service=proxy\n    alb.ingress.kubernetes.io/target-group-attributes: deregistration_delay.timeout_seconds=30\n    alb.ingress.kubernetes.io/target-node-labels: gitpod.io/workload_meta=true\n    alb.ingress.kubernetes.io/target-type: instance","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/eks-with-alb-and-nlb","loc":{"lines":{"from":140,"to":168}}}}],["2744",{"pageContent":"alb.ingress.kubernetes.io/target-node-labels: gitpod.io/workload_meta=true\n    alb.ingress.kubernetes.io/target-type: instance\n    alb.ingress.kubernetes.io/ssl-policy: ELBSecurityPolicy-FS-1-2-Res-2020-10\n    alb.ingress.kubernetes.io/certificate-arn: <YOUR-AWS-SSL-PROVIDED_CERTIFICATE>\n    alb.ingress.kubernetes.io/scheme: <SET THIS -> internet-facing or internal>\n    alb.ingress.kubernetes.io/load-balancer-name: <GITPOD-LOAD-BALANCER-NAME>\n  name: gitpod\nspec:\n  defaultBackend:\n    service:\n      name: proxy\n      port:\n        number: 80\n  rules:\n    - http:\n        paths:\n          - backend:\n              service:\n                name: proxy\n                port:\n                  number: 443\n            path: /\n            pathType: Prefix\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/eks-with-alb-and-nlb","loc":{"lines":{"from":168,"to":191}}}}],["2745",{"pageContent":"4. Install ALB and NLB\n\nInstall the ALB (for HTTPS traffic) and NLB (for SSH traffic) using the .yaml file customized above as well as this one:\n\n**nlb-ssh-service.yaml**","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/eks-with-alb-and-nlb","loc":{"lines":{"from":193,"to":197}}}}],["2746",{"pageContent":"```yaml\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: gitpod-ssh\n  labels:\n    app: gitpod\n    component: ws-proxy-ssh\n  annotations:\n    service.beta.kubernetes.io/aws-load-balancer-name: gitpod-ssh-gateway\n    service.beta.kubernetes.io/aws-load-balancer-type: external\n    service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: \"instance\"\n    service.beta.kubernetes.io/aws-load-balancer-ip-address-type: ipv4\n    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: tcp\n    service.beta.kubernetes.io/aws-load-balancer-target-node-labels: gitpod.io/workload_workspace_services=true\n    service.beta.kubernetes.io/aws-load-balancer-target-group-attributes: stickiness.enabled=true,stickiness.type=source_ip,preserve_client_ip.enabled=true\n    service.beta.kubernetes.io/aws-load-balancer-additional-resource-tags: Project=gitpod-alb\nspec:\n  ports:\n    - name: ssh\n      protocol: TCP\n      port: 22\n      targetPort: 2200\n  selector:\n    app: gitpod\n    component: ws-proxy\n  type: LoadBalancer","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/eks-with-alb-and-nlb","loc":{"lines":{"from":199,"to":226}}}}],["2747",{"pageContent":"```\nkubectl apply -f alb-ingress.yaml\nkubectl apply -f nlb-ssh-service.yaml\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/eks-with-alb-and-nlb","loc":{"lines":{"from":229,"to":232}}}}],["2748",{"pageContent":"5. Check if installed properly\n\nIf installed properly, then this should be the shell output given the command below:\n\n```bash\n> kubectl get ingress gitpod -n gitpod\nNAME     CLASS    HOSTS   ADDRESS                                                   PORTS   AGE\ngitpod   <none>   *       gitpod-airgap-alb-339697413.eu-west-1.elb.amazonaws.com   80      41s\n\n> kubectl get service gitpod-ssh -n gitpod\nNAME         TYPE           CLUSTER-IP       EXTERNAL-IP                                                       PORT(S)        AGE\ngitpod-ssh   LoadBalancer   172.20.162.102   gitpod-ssh-gateway-6588d186387780e5.elb.eu-west-1.amazonaws.com   22:30003/TCP   76s\n```\n\n### 6. Update DNS records\n\nUpdate DNS as follows to point to your newly created loadbalancers depending on the type of traffic:\n\n```\ngitpod.domain.com           --> ALB ADDRESS\n*.gitpod.domain.com         --> ALB ADDRESS\n*.ssh.ws.gitpod.domain.com  --> NLB ADDRESS\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/eks-with-alb-and-nlb","loc":{"lines":{"from":234,"to":256}}}}],["2749",{"pageContent":"---\nsection: self-hosted/latest\nsubsection: installation-guides\ntitle: Private Registries\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Using private image registries with Gitpod Self-Hosted\n\n> ⚠️ **Self-hosted as a product is no longer supported**\n>\n> The last official update of this product is the [November 2022 self-hosted release](https://www.gitpod.io/changelog/november-self-hosted-release). We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our [free community license](https://www.gitpod.io/community-license). However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n> Read [our blog on Gitpod Dedicated](/blog/introducing-gitpod-dedicated) to learn why we made the decision to discontinue self-hosted.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/private-registries","loc":{"lines":{"from":1,"to":16}}}}],["2750",{"pageContent":"This guide outlines the considerations to take when using images for workspaces that originate from private image registries that are not stored in the image registry already configured in the KOTS Installation UI. This is useful when, for example, you want to pull private base images from one registry and then store the built images in another.\n\nPlease refer to the [Docker image documentation](/docs/configure/workspaces/workspace-image) for more information about workspace images.\n\n> **Note:** there are two ways of setting an image for a workspace: via the installation-wide [default `workspaceImage`](./default-workspace-image) and the [`.gitpod.yml` file](/docs/references/gitpod-yml). The `.gitpod.yml` file will take precedence if both are set.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/private-registries","loc":{"lines":{"from":18,"to":22}}}}],["2751",{"pageContent":"Credentials\n\nTo access private registries, Gitpod needs to have the corresponding access credentials. These can be supplied in the KOTS installation UI:\n\n![registry credentials UI](../../static/images/docs/self-hosted/private-registry-credentials.png)\n\n## Allowlist\n\nGitpod also has an allow list for private base image registries. Any private image registry that is used throughout an installation needs to be on this allowlist.\n\n> **Important:** Any registry for which credentials are supplied is automatically added to this allowlist!\n\nRegistries can be added to the allowlist via the [config patch](/docs/configure/self-hosted/latest/config-patches) in the following format:\n\n```yaml\ncontainerRegistry:\n  privateBaseImageAllowList:\n    - <your_registry-url.com>\n    - <another_registry-url.com>\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/private-registries","loc":{"lines":{"from":24,"to":43}}}}],["2752",{"pageContent":"---\nsection: self-hosted/latest\nsubsection: installation-guides\ntitle: Advanced Installation of Gitpod Self-Hosted\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Advanced Installation of Gitpod Self-Hosted\n\n> ⚠️ **Self-hosted as a product is no longer supported**\n>\n> The last official update of this product is the [November 2022 self-hosted release](https://www.gitpod.io/changelog/november-self-hosted-release). We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our [free community license](https://www.gitpod.io/community-license). However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n> Read [our blog on Gitpod Dedicated](/blog/introducing-gitpod-dedicated) to learn why we made the decision to discontinue self-hosted.\n\nHere you can find advanced topics related to installing Gitpod:","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced","loc":{"lines":{"from":1,"to":18}}}}],["2753",{"pageContent":"Here you can find advanced topics related to installing Gitpod:\n\n- [TLS configuration for Gitpod Self-Hosted](./advanced/tls)\n- [Install Gitpod on an Air Gapped Network](./advanced/air-gap)\n- [Configuring popular container registries](./advanced/resource-configuration)\n- [Setting a default workspace image](./advanced/default-workspace-image)\n- [Using private image registries with Gitpod Self-Hosted](./advanced/private-registries)\n- [Setting up your EKS cluster with dual ALB + NLB load balancers](./advanced/eks-with-alb-and-nlb)\n- [Applying custom annotations, labels and environment variables](./advanced/customization)\n- [Component Customization](./advanced/components)\n<!-- The above should be removed as soon as we have most customers using the default method (a.k.a. replicated flow) -->","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced","loc":{"lines":{"from":18,"to":28}}}}],["2754",{"pageContent":"---\nsection: self-hosted/latest\nsubsection: installation-guides\ntitle: Resource Configuration\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# How To Configure Gitpod To Work With Certain External Components\n\n> ⚠️ **Self-hosted as a product is no longer supported**\n>\n> The last official update of this product is the [November 2022 self-hosted release](https://www.gitpod.io/changelog/november-self-hosted-release). We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our [free community license](https://www.gitpod.io/community-license). However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n> Read [our blog on Gitpod Dedicated](/blog/introducing-gitpod-dedicated) to learn why we made the decision to discontinue self-hosted.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/resource-configuration","loc":{"lines":{"from":1,"to":16}}}}],["2755",{"pageContent":"Gitpod has three resource dependencies that are required to function correctly. For convenience, you can use the in-cluster dependencies, but you should use external resources for a high-performance application.\n\nThis page highlights some of the common gotchas found when working with cloud resources and how to overcome them.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/resource-configuration","loc":{"lines":{"from":18,"to":20}}}}],["2756",{"pageContent":"Container Registry\n\n### [Amazon Elastic Container Registry (ECR)](https://aws.amazon.com/ecr/)\n\nAmazon ECR does not fully implement the [Docker v2 API](https://docs.docker.com/registry/spec/api), namely it does not automatically create the remote image if it does not already exist when pushed. For that reason, ECR is not supported with Gitpod.\n\nWhen using AWS, you should select an in-cluster registry and use S3 as your in-cluster storage provider. This will use the in-cluster registry as a facade for an S3 bucket where all the images will be stored.\n\nIf using a region other than `us-east-1`, you will need to change the endpoint to be `s3.<region>.amazonaws.com`.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/resource-configuration","loc":{"lines":{"from":22,"to":30}}}}],["2757",{"pageContent":"[Google Container Registry (GCR)](https://cloud.google.com/container-registry)\n\n> This example uses the format `gcr.io`, which is the global hostnames. This can be swapped with any of the [regional hostnames](https://cloud.google.com/container-registry/docs/pushing-and-pulling) and it will work in the same way.\n\nGoogle Container Registry authentication requires specific configuration. The \"Container registry URL\" will be in a format similar to `gcr.io/<project-name>/gitpod`. In order for the authentication to work, you must also enter the \"Container registry server\". This will always be your GCR hostname, eg `gcr.io`.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/resource-configuration","loc":{"lines":{"from":32,"to":36}}}}],["2758",{"pageContent":"[Google Artifact Registry (GAR)](https://cloud.google.com/artifact-registry)\n\nAs with [GCR](#google-container-registry-gcr), Google Artifact Registry requires both the \"Container registry URL\" and \"Container registry server\" to be completed. The URL will be in the format `<region>-docker.pkg.dev/<project-name>/gitpod` and the server address will be `<region>-docker.pkg.dev`.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/resource-configuration","loc":{"lines":{"from":38,"to":40}}}}],["2759",{"pageContent":"---\nsection: self-hosted/latest\nsubsection: installation-guides\ntitle: TLS configuration for Gitpod Self-Hosted\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# TLS configuration for Gitpod Self-Hosted\n\n> ⚠️ **Self-hosted as a product is no longer supported**\n>\n> The last official update of this product is the [November 2022 self-hosted release](https://www.gitpod.io/changelog/november-self-hosted-release). We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our [free community license](https://www.gitpod.io/community-license). However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n> Read [our blog on Gitpod Dedicated](/blog/introducing-gitpod-dedicated) to learn why we made the decision to discontinue self-hosted.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/tls","loc":{"lines":{"from":1,"to":16}}}}],["2760",{"pageContent":"To run your own Gitpod instance, you need a TLS certificate for your Gitpod domain. There are three options to provide these TLS certificates.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/tls","loc":{"lines":{"from":18,"to":18}}}}],["2761",{"pageContent":"Option 1: Cert-Manager\n\nConfigure cert-manager to issue these certificates (usually with a DNS-01 challenge and services like [Let's encrypt](https://letsencrypt.org/)). See the [installation guide](../installing-gitpod#prerequisites)) for more information.\n\n![kots-tls-cert-manager](../../static/images/docs/self-hosted/kots-tls-cert-manager.png)\n\n<p align=\"center\"><em>TLS certificates configuration options during the installation process</em></p>","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/tls","loc":{"lines":{"from":20,"to":26}}}}],["2762",{"pageContent":"Option 2: Self-signed by Gitpod\n\n_We usually do not recommend this option for production usage._\n\nLet Gitpod generate self-signed certificates for your installation. This option can be used in case your load balancer does the TLS termination or for testing settings. For the latter case, you need to add the custom [CA](https://en.wikipedia.org/wiki/Certificate_authority) to your browser to let it accept the self-signed certificate. Use this command to export the CA:\n\n```\n$ kubectl get secrets -n <namespace> ca-issuer-ca -o jsonpath='{.data.ca\\.crt}' | base64 -d > ~/ca.crt\n```\n\n![kots-tls-self-signed](../../static/images/docs/self-hosted/kots-tls-self-signed.png)","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/tls","loc":{"lines":{"from":28,"to":38}}}}],["2763",{"pageContent":"Option 3: Bring your own certificate\n\n> ⚠️ **Limitation**\n>\n> Adding custom CA certificates is currently _not_ supported on **Google Kubernetes Engine (GKE)** because on GKE `containerd` does not support custom certificates.\n\nUpload your own TLS certificate, key, and (optionally) CA certificate. When your TLS certificate is signed by a publicly accepted TLS authority, you just need to upload your certificate and key. In case it is a self-signed certificate (e.g. signed by a corporate CA), you also need to upload your CA.\n\n![kots-tls-bring-own](../../static/images/docs/self-hosted/kots-tls-bring-own.png)","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/tls","loc":{"lines":{"from":40,"to":48}}}}],["2764",{"pageContent":"---\nsection: self-hosted/latest\ntitle: Amazon Elastic Kubernetes Service (EKS)\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# How to Create a Cluster on Amazon Elastic Kubernetes Service (EKS)\n\n> ⚠️ **Self-hosted as a product is no longer supported**\n>\n> The last official update of this product is the [November 2022 self-hosted release](https://www.gitpod.io/changelog/november-self-hosted-release). We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our [free community license](https://www.gitpod.io/community-license). However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n> Read [our blog on Gitpod Dedicated](/blog/introducing-gitpod-dedicated) to learn why we made the decision to discontinue self-hosted.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/cluster-set-up/on-amazon-eks","loc":{"lines":{"from":1,"to":15}}}}],["2765",{"pageContent":"> This guide has been deprecated. Please use the [Single Cluster Reference Architecture](../reference-architecture/single-cluster-ref-arch) instead.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/cluster-set-up/on-amazon-eks","loc":{"lines":{"from":17,"to":17}}}}],["2766",{"pageContent":"---\nsection: self-hosted/latest\nsubsection: installation-guides\ntitle: K3s Cluster for Gitpod Self-Hosted\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# How to Create a Cluster with K3s\n\n> ⚠️ **Self-hosted as a product is no longer supported**\n>\n> The last official update of this product is the [November 2022 self-hosted release](https://www.gitpod.io/changelog/november-self-hosted-release). We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our [free community license](https://www.gitpod.io/community-license). However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n> Read [our blog on Gitpod Dedicated](/blog/introducing-gitpod-dedicated) to learn why we made the decision to discontinue self-hosted.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/cluster-set-up/on-k3s","loc":{"lines":{"from":1,"to":16}}}}],["2767",{"pageContent":"In this guide, we show you how to set up a Kubernetes cluster with [K3s](https://k3s.io/) that is ready to install Gitpod. In this example we expect to have at least 2 nodes with Ubuntu 20.04 (a single node setup would work as well, see hint below):\n\n- `node0`: main node where the Gitpod service pods will be deployed to\n- `node1`: worker node where the Gitpod workspace pods will be deployed to\n- optional: one or more additional worker nodes `node2` … `nodeN`\n\nOn each node, we [install K3s](https://rancher.com/docs/k3s/latest/en/installation/). We configure K3s by setting the following environment variables on the nodes.\n\nK3s config for main node `node0`:\n\n```shell\nexport INSTALL_K3S_EXEC=\"server --disable traefik --flannel-backend=none --node-label gitpod.io/workload_meta=true --node-label gitpod.io/workload_ide=true\"\nexport K3S_CLUSTER_SECRET=\"<your random secret string that is the same on all nodes>\"","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/cluster-set-up/on-k3s","loc":{"lines":{"from":18,"to":30}}}}],["2768",{"pageContent":"K3s config for all other nodes:\n\n```shell\nexport INSTALL_K3S_EXEC=\"agent --node-label gitpod.io/workload_workspace_services=true --node-label gitpod.io/workload_workspace_regular=true --node-label gitpod.io/workload_workspace_headless=true\"\nexport K3S_CLUSTER_SECRET=\"<your random secret string that is the same on all nodes>\"\nexport K3S_URL=\"https://node0:6443\"\n```\n\n**Hint:** _In case you would like to set up a single node cluster (only the main node) add the `--node-label` arguments of the bottom \"other\" nodes config to the `INSTALL_K3S_EXEC` variable of the main node config._\n\nAfter setting the environment variables, install K3s on every node like this:\n\n```shell\n$ curl -sfL https://get.k3s.io | sh -","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/cluster-set-up/on-k3s","loc":{"lines":{"from":33,"to":46}}}}],["2769",{"pageContent":"Now, you have to install [Calico](https://www.tigera.io/project-calico/). Download the [Calico manifest](https://docs.projectcalico.org/manifests/calico-vxlan.yaml) and add the following line to the `plugins` section of the `cni_network_config`:\n\n```json\n\"container_settings\": { \"allow_ip_forwarding\": true }","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/cluster-set-up/on-k3s","loc":{"lines":{"from":49,"to":52}}}}],["2770",{"pageContent":"The section in the `calico-vxlan.yaml` file should look like this:\n\n```json\n[...]\n  cni_network_config: |-\n    {\n      \"name\": \"k8s-pod-network\",\n      \"cniVersion\": \"0.3.1\",\n      \"plugins\": [\n        {\n          \"type\": \"calico\",\n          \"log_level\": \"info\",\n          \"log_file_path\": \"/var/log/calico/cni/cni.log\",\n          \"datastore_type\": \"kubernetes\",\n          \"nodename\": \"__KUBERNETES_NODE_NAME__\",\n          \"mtu\": __CNI_MTU__,\n          \"ipam\": {\n              \"type\": \"calico-ipam\"\n          },\n          \"policy\": {\n              \"type\": \"k8s\"\n          },\n          \"kubernetes\": {\n              \"kubeconfig\": \"__KUBECONFIG_FILEPATH__\"\n          },\n          \"container_settings\": { \"allow_ip_forwarding\": true }\n        },\n[...]\n```\n\nCopy that file to `node0` in the following folder (create folder if missing):\n\n```\n/var/lib/rancher/k3s/server/manifests/","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/cluster-set-up/on-k3s","loc":{"lines":{"from":55,"to":88}}}}],["2771",{"pageContent":"Copy that file to `node0` in the following folder (create folder if missing):\n\n```\n/var/lib/rancher/k3s/server/manifests/\n```\n\nThat's it. Your K3s cluster is ready to install Gitpod. The next step is to install cert-manager. Just follow the instructions of the [installation guide](../installing-gitpod#prerequisites) to install !","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/cluster-set-up/on-k3s","loc":{"lines":{"from":88,"to":94}}}}],["2772",{"pageContent":"---\nsection: self-hosted/latest\ntitle: Google Kubernetes Engine (GKE)\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# How to Create a Cluster on Google Kubernetes Engine (GKE)\n\n> ⚠️ **Self-hosted as a product is no longer supported**\n>\n> The last official update of this product is the [November 2022 self-hosted release](https://www.gitpod.io/changelog/november-self-hosted-release). We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our [free community license](https://www.gitpod.io/community-license). However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n> Read [our blog on Gitpod Dedicated](/blog/introducing-gitpod-dedicated) to learn why we made the decision to discontinue self-hosted.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/cluster-set-up/on-gke","loc":{"lines":{"from":1,"to":15}}}}],["2773",{"pageContent":"> This guide has been deprecated. Please use the [Single Cluster Reference Architecture](../reference-architecture/single-cluster-ref-arch) instead.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/cluster-set-up/on-gke","loc":{"lines":{"from":17,"to":17}}}}],["2774",{"pageContent":"---\nsection: self-hosted/latest\ntitle: Microsoft Azure Kubernetes Service (AKS)\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# How to Create a Cluster on Microsoft Azure Kubernetes Service (AKS)\n\n> ⚠️ **Self-hosted as a product is no longer supported**\n>\n> The last official update of this product is the [November 2022 self-hosted release](https://www.gitpod.io/changelog/november-self-hosted-release). We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our [free community license](https://www.gitpod.io/community-license). However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n> Read [our blog on Gitpod Dedicated](/blog/introducing-gitpod-dedicated) to learn why we made the decision to discontinue self-hosted.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/cluster-set-up/on-microsoft-aks","loc":{"lines":{"from":1,"to":15}}}}],["2775",{"pageContent":"Instructions on how to create a Microsoft AKS environment that is ready to install Gitpod are located in the [gitpod-io/gitpod-microsoft-aks-guide](https://github.com/gitpod-io/gitpod-microsoft-aks-guide) repository on GitHub. The installation process takes around twenty minutes. In the end, the following resources are created:\n\n- An Microsoft AKS cluster running Kubernetes v1.21.\n- An Microsoft Azure load balancer.\n- An Microsoft Azure DNS zone.\n- An Microsoft Azure container registry.\n- MySQL will be provided by Helm under [#5508](https://github.com/gitpod-io/gitpod/issues/5508) solved.\n- Minio will be used until Microsoft [Azure storage gateway](https://github.com/gitpod-io/gitpod-azure-aks-guide/issues/1) is configured.\n- Installation of [calico](https://docs.projectcalico.org) as CNI and NetworkPolicy implementation\n- Installation of [cert-manager](https://cert-manager.io/) for self-signed SSL certificates","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/cluster-set-up/on-microsoft-aks","loc":{"lines":{"from":17,"to":26}}}}],["2776",{"pageContent":"Upon completion, this script will print the config for the resources created (including passwords) and what is the [next relevant step](./../installing-gitpod#install-gitpod) in the installation process. Note that you will be able to skip steps 2 and 3 in the getting started guide because the script can do these steps for you.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/cluster-set-up/on-microsoft-aks","loc":{"lines":{"from":28,"to":28}}}}],["2777",{"pageContent":"---\nsection: self-hosted/latest\ntitle: Configure the authentication used by your Gitpod Self-Hosted installation\n---\n\n<script context=\"module\">\n  export const prerender = true;\n  export const load = () => {\n    return {\n      status: 301,\n      redirect: \"/docs/configure/self-hosted/latest\"\n    }\n  };\n</script>","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/configuration/authentication","loc":{"lines":{"from":1,"to":14}}}}],["2778",{"pageContent":"---\nsection: self-hosted/latest\ntitle: Configure the database used by your Gitpod installation\n---\n\n<script context=\"module\">\n  export const prerender = true;\n  export const load = () => {\n    return {\n      status: 301,\n      redirect: \"/docs/configure/self-hosted/latest\"\n    }\n  };\n</script>","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/configuration/database","loc":{"lines":{"from":1,"to":14}}}}],["2779",{"pageContent":"---\nsection: self-hosted/latest\ntitle: Configure the Docker registry used by your Gitpod Self-Hosted installation\n---\n\n<script context=\"module\">\n  export const prerender = true;\n  export const load = () => {\n    return {\n      status: 301,\n      redirect: \"/docs/configure/self-hosted/latest\"\n    }\n  };\n</script>","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/configuration/docker-registry","loc":{"lines":{"from":1,"to":14}}}}],["2780",{"pageContent":"---\nsection: self-hosted/latest\ntitle: Configuring Gitpod Self-Hosted\n---\n\n<script context=\"module\">\n  export const prerender = true;\n  export const load = () => {\n    return {\n      status: 301,\n      redirect: \"/docs/configure/self-hosted/latest\"\n    }\n  };\n</script>","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/configuration","loc":{"lines":{"from":1,"to":14}}}}],["2781",{"pageContent":"---\nsection: self-hosted/latest\ntitle: Configure the Kubernetes nodes in your Gitpod Self-Hosted installation\n---\n\n<script context=\"module\">\n  export const prerender = true;\n  export const load = () => {\n    return {\n      status: 301,\n      redirect: \"/docs/configure/self-hosted/latest\"\n    }\n  };\n</script>","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/configuration/nodes","loc":{"lines":{"from":1,"to":14}}}}],["2782",{"pageContent":"---\nsection: self-hosted/latest\ntitle: Configure the ingress to your Gitpod installation\n---\n\n<script context=\"module\">\n  export const prerender = true;\n  export const load = () => {\n    return {\n      status: 301,\n      redirect: \"/docs/configure/self-hosted/latest\"\n    }\n  };\n</script>","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/configuration/ingress","loc":{"lines":{"from":1,"to":14}}}}],["2783",{"pageContent":"---\nsection: self-hosted/latest\ntitle: Configure the storage used by your Gitpod installation\n---\n\n<script context=\"module\">\n  export const prerender = true;\n  export const load = () => {\n    return {\n      status: 301,\n      redirect: \"/docs/configure/self-hosted/latest\"\n    }\n  };\n</script>","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/configuration/storage","loc":{"lines":{"from":1,"to":14}}}}],["2784",{"pageContent":"---\nsection: self-hosted/latest\ntitle: Configure the VSX registry used by your Gitpod Self-Hosted installation\n---\n\n<script context=\"module\">\n  export const prerender = true;\n  export const load = () => {\n    return {\n      status: 301,\n      redirect: \"/docs/configure/self-hosted/latest\"\n    }\n  };\n</script>","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/configuration/vsx-registry","loc":{"lines":{"from":1,"to":14}}}}],["2785",{"pageContent":"---\nsection: self-hosted/latest\ntitle: Configure the Gitpod Workspaces in your Gitpod Self-Hosted installation\n---\n\n<script context=\"module\">\n  export const prerender = true;\n  export const load = () => {\n    return {\n      status: 301,\n      redirect: \"/docs/configure/self-hosted/latest\"\n    }\n  };\n</script>","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/configuration/workspaces","loc":{"lines":{"from":1,"to":14}}}}],["2786",{"pageContent":"---\nsection: self-hosted/latest\ntitle: Installing Gitpod Self-Hosted\n---\n\n<script context=\"module\">\n  export const prerender = true;\n  export const load = () => {\n    return {\n      status: 301,\n      redirect: \"/docs/configure/self-hosted/latest\"\n    }\n  };\n</script>","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/installation","loc":{"lines":{"from":1,"to":14}}}}],["2787",{"pageContent":"---\nsection: self-hosted/latest\ntitle: Install Gitpod Self-Hosted on Amazon Elastic Kubernetes Service (EKS)\n---\n\n<script context=\"module\">\n  export const prerender = true;\n  export const load = () => {\n    return {\n      status: 301,\n      redirect: \"/docs/configure/self-hosted/latest/reference-architecture\"\n    }\n  };\n</script>","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/installation/on-amazon-eks","loc":{"lines":{"from":1,"to":14}}}}],["2788",{"pageContent":"---\nsection: self-hosted/latest\ntitle: Install Gitpod Self-Hosted on Google Kubernetes Engine (GKE)\n---\n\n<script context=\"module\">\n  export const prerender = true;\n  export const load = () => {\n    return {\n      status: 301,\n      redirect: \"/docs/configure/self-hosted/latest/reference-architecture\"\n    }\n  };\n</script>","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/installation/on-gke","loc":{"lines":{"from":1,"to":14}}}}],["2789",{"pageContent":"---\nsection: self-hosted/latest\ntitle: Install Gitpod Self-Hosted on Microsoft Azure Kubernetes Service (AKS)\n---\n\n<script context=\"module\">\n  export const prerender = true;\n  export const load = () => {\n    return {\n      status: 301,\n      redirect: \"/docs/configure/self-hosted/latest/cluster-set-up/on-microsoft-aks\"\n    }\n  };\n</script>","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/installation/on-microsoft-aks","loc":{"lines":{"from":1,"to":14}}}}],["2790",{"pageContent":"---\nsection: self-hosted/latest\nsubsection: installation-guides\ntitle: Self-Hosted Reference Architectures\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n<script lang=\"ts\">\n  import Pill from \"$lib/components/pill.svelte\";\n  </script>\n\n# Reference Architectures\n\n> ⚠️ **Self-hosted as a product is no longer supported**\n>\n> The last official update of this product is the [November 2022 self-hosted release](https://www.gitpod.io/changelog/november-self-hosted-release). We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our [free community license](https://www.gitpod.io/community-license). However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n> Read [our blog on Gitpod Dedicated](/blog/introducing-gitpod-dedicated) to learn why we made the decision to discontinue self-hosted.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture","loc":{"lines":{"from":1,"to":20}}}}],["2791",{"pageContent":"Below you will find reference architectures supported and recommended by Gitpod for different situations and all major cloud providers. They help you create the infrastructure needed to run Gitpod Self-Hosted and come in the form of a guide and terraform configuration. These are used to create the infrastructure for our nightly testing and fulfil the [requirements](../latest/requirements) Gitpod has on a cluster.\n\n> **Note:** You should see these reference architectures as a starting point for creating infrastructure that works with both Gitpod and your own infrastructure requirements and policies. However, the further you deviate from these recommended architectures, the higher the potential for Gitpod to not behave as expected.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture","loc":{"lines":{"from":22,"to":24}}}}],["2792",{"pageContent":"|                                                                                                                                                                            |                                                                                       |\n| -------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------- |\n| [**Proof-of-Value Reference Architecture**](./reference-architecture/proof-of-value)<Pill variant=\"orange\" text=\"alpha\" class=\"ml-1.5\"/>                                   | Aimed at creating a minimal set of infrastructure for evaluation and testing purposes |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture","loc":{"lines":{"from":26,"to":28}}}}],["2793",{"pageContent":"| [**Single-Cluster Reference Architecture for Production Purposes**](./reference-architecture/single-cluster-ref-arch) <Pill variant=\"orange\" text=\"alpha\" class=\"ml-1.5\"/> | Aimed at creating hardened infrastructure for a continuous operation of Gitpod        |\n| <p style=\"font-size: var(--p-small); font-weight: 500;\"> Multi-Cluster High-Availiability Reference Architecture <Pill variant=\"pink\" text=\"planned\" class=\"ml-1.5\"/></p>  |                                                                                       |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture","loc":{"lines":{"from":29,"to":30}}}}],["2794",{"pageContent":"---\nsection: self-hosted/latest\nsubsection: installation-guides\ntitle: \"Single-Cluster Reference Architecture\"\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n<script lang=\"ts\">\n\n  import Overview from \"./_chunks/overview.md\";\n  import Preparations from \"./_chunks/preparations.md\";\n  import Cluster from \"./_chunks/cluster.md\";\n  import Networking from \"./_chunks/networking.md\";\n  import Registry from \"./_chunks/registry.md\";\n  import Database from \"./_chunks/database.md\";\n  import Storage from \"./_chunks/storage.md\";\n  import Install from \"./_chunks/install.md\";\n  import BigPill from \"$lib/components/big-pill.svelte\";\n  import Tooltip from \"$lib/components/tooltip.svelte\";\n</script>\n\n# Single-Cluster Reference Architecture for Production Purposes","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/single-cluster-ref-arch","loc":{"lines":{"from":1,"to":25}}}}],["2795",{"pageContent":"# Single-Cluster Reference Architecture for Production Purposes\n\n> ⚠️ **Self-hosted as a product is no longer supported**\n>\n> The last official update of this product is the [November 2022 self-hosted release](https://www.gitpod.io/changelog/november-self-hosted-release). We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our [free community license](https://www.gitpod.io/community-license). However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n> Read [our blog on Gitpod Dedicated](/blog/introducing-gitpod-dedicated) to learn why we made the decision to discontinue self-hosted.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/single-cluster-ref-arch","loc":{"lines":{"from":25,"to":30}}}}],["2796",{"pageContent":"|                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        |                                                                                                                                                                                                                                                                                                                                                                                                                             |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/single-cluster-ref-arch","loc":{"lines":{"from":32,"to":32}}}}],["2797",{"pageContent":"| ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/single-cluster-ref-arch","loc":{"lines":{"from":33,"to":33}}}}],["2798",{"pageContent":"| Status:                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                | <BigPill text=\"alpha\" class=\"ml-1.5\" />                                                                                                                                                                                                                                                                                                                                                                                     |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/single-cluster-ref-arch","loc":{"lines":{"from":34,"to":34}}}}],["2799",{"pageContent":"| Intended for:                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          | Continous usage of Gitpod at a company-wide scale in a reliable way by leveraging popular cloud provider services such as S3 and RDS.                                                                                                                                                                                                                                                                                       |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/single-cluster-ref-arch","loc":{"lines":{"from":35,"to":35}}}}],["2800",{"pageContent":"| Limitations:                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           | - This is bound to a single cluster. Deploying in several regions currently requires setting up several Gitpod installations <br /> - Creates external dependencies for Gitpod componenents (object storage, registry, database) <br /> - This is not highly available and requires downtime to upgrade (high availability requires a governed workspace cluster, which is beyond the scope of this reference architecture) |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/single-cluster-ref-arch","loc":{"lines":{"from":36,"to":36}}}}],["2801",{"pageContent":"| Terraform: <Tooltip title=\"These terraform configurations enable you to create the architecture described in <br /> this document in an automated way. We use these scripts internally to test new <br />releases against this architecture. They should be seen as examples that you can <br /> use to create your own environment.\"/>                                                                                                                                                                | - [Example Terraform configuration for GCP](https://github.com/gitpod-io/gitpod/tree/main/install/infra/single-cluster/gcp) <br /> - [Example Terraform configuration for AWS](https://github.com/gitpod-io/gitpod/tree/main/install/infra/single-cluster/aws)                                                                                                                                                              |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/single-cluster-ref-arch","loc":{"lines":{"from":37,"to":37}}}}],["2802",{"pageContent":"| Cost Estimates: <Tooltip title=\"These cost estimates do not include egress. However, we typically see egress cost to be an <br />additional 15% on top of the estimates here.  These estimates are just examples, <br /> the exact cost will depend on your set-up and usage profile - your cost <em>will</em> deviate.  <br />With  the configuration in these estimates, you are able to run 36 concurrent basic <br />  workspaces - assuming the same density as currently used in Gitpod SaaS.\"/> | High-level cost estimates\\*: <br /> - [GCP](https://cloudpricingcalculator.appspot.com#!?id=53d776be-60fa-4fe9-a64b-ae4c80e74645) <br /> - [AWS](https://calculator.aws/#/estimate?id=6df1417288724042faf49eed70fb8ea0f6e80c13)                                                                                                                                                                                             |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/single-cluster-ref-arch","loc":{"lines":{"from":38,"to":38}}}}],["2803",{"pageContent":"This guide describes a single-cluster reference architecture for Gitpod aimed at production environments: continuous deployments of Gitpod used in anger by your engineers. It consists of a Kubernetes cluster, cert-manager, external MySQL database, external OCI image registry, and external object storage. It includes instructions on how to set up this reference architecture on the officially supported cloud providers.\n\nThis reference architecture can be used as a blueprint for your Gitpod installation: Start with this reference architecture and adapt it to your needs. The reference architecture as described in this guide is what Gitpod supports, and is used to test against every self-hosted Gitpod release.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/single-cluster-ref-arch","loc":{"lines":{"from":40,"to":42}}}}],["2804",{"pageContent":"To use Gitpod, you also need a Git source code management system (SCM) like GitLab, GitHub, or Bitbucket. You will find the supported SCMs in the [product compatibility matrix](/docs/references/compatibility?admin) your own SCM is beyond the scope of this guide. However, you can simply use the cloud versions of GitLab, GitHub, or Bitbucket as well as the possible existing installation in your corporate network.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/single-cluster-ref-arch","loc":{"lines":{"from":44,"to":44}}}}],["2805",{"pageContent":"Overview\n\n<Overview />\n\n## Cloud Provider Preparations\n\n<Preparations />\n\n## Kubernetes Cluster\n\n<Cluster />\n\n## Networking\n\n<Networking />\n\n## Object Storage\n\n<Storage />\n\n## OCI Image Registry\n\n<Registry />\n\n## Database\n\n<Database />\n\n## Install Gitpod\n\n<Install />","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/single-cluster-ref-arch","loc":{"lines":{"from":46,"to":76}}}}],["2806",{"pageContent":"---\nsection: self-hosted/latest\nsubsection: installation-guides\ntitle: \"Proof-of-Value Reference Architecture\"\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n<script lang=\"ts\">\n  import CloudPlatformToggle from \"$lib/components/docs/cloud-platform-toggle.svelte\";\n  import Preparations from \"./_chunks/preparations.md\";\n  import Networking from \"./_chunks/networking.md\";\n  import BigPill from \"$lib/components/big-pill.svelte\";\n</script>\n\n# Proof-of-Value Reference Architecture","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":1,"to":18}}}}],["2807",{"pageContent":"# Proof-of-Value Reference Architecture\n\n> ⚠️ **Self-hosted as a product is no longer supported**\n>\n> The last official update of this product is the [November 2022 self-hosted release](https://www.gitpod.io/changelog/november-self-hosted-release). We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our [free community license](https://www.gitpod.io/community-license). However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n> Read [our blog on Gitpod Dedicated](/blog/introducing-gitpod-dedicated) to learn why we made the decision to discontinue self-hosted.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":18,"to":23}}}}],["2808",{"pageContent":"|               |                                                                                                                                                                                                                                                                                                                  |\n| ------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Status:       | <BigPill text=\"alpha\" variant=\"pink\" class=\"ml-1.5\" />                                                                                                                                                                                                                                                           |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":25,"to":27}}}}],["2809",{"pageContent":"| Intended for: | Trying out Gitpod in a representative way but with only the minimum of infrastructure required                                                                                                                                                                                                                   |\n| Limitations:  | - Not intended for long-term, production usage <br/> - Higher risk of data loss due to in-cluster dependencies - if you lose your cluster, you may lose your data <br/> - Data is not carried over when moving to the [Single Cluster Reference Architecture](./single-cluster-ref-arch) for production purposes |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":28,"to":29}}}}],["2810",{"pageContent":"Overview\n\nThis reference architecture provides you with a setup where all components that are needed to operate Gitpod are deployed within the Kubernetes cluster. In contrast to a production-oriented setup, this means that the required database, object storage, well as a registry are deployed for you within the cluster. All cluster services and workspaces are deployed on a single autoscaling node group.\n\n> If you are looking for a scalable and reliable way to run Gitpod, please take a look at our [Single Cluster Reference Architecture](./single-cluster-ref-arch).\n\n## Cloud Provider Preparations\n\n<Preparations />","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":31,"to":39}}}}],["2811",{"pageContent":"Kubernetes Cluster\n\nThe heart of this reference architecture is a **Kubernetes cluster** where all components are deployed to. This cluster has a single node pool that needs to have all of the following labels:\n\n- `gitpod.io/workload_meta=true`\n- `gitpod.io/workload_ide=true`\n- `gitpod.io/workload_workspace_services=true`\n- `gitpod.io/workload_workspace_regular=true`\n- `gitpod.io/workload_workspace_headless=true`\n\nThe following table gives an overview of the node types for the different cloud providers that are used by this reference architecture.\n\n|                  | GCP               | AWS           |\n| ---------------- | ----------------- | ------------- |\n| Gitpod Node Pool | `n2d-standard-16` | `m6i.4xlarge` |\n\n<CloudPlatformToggle id=\"cloud-platform-toggle-cluster\">\n\n<div slot=\"gcp\">\n\nFirst, we [create a **service account**](https://cloud.google.com/iam/docs/creating-managing-service-accounts) for the cluster. The service account needs to have the following roles:","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":41,"to":61}}}}],["2812",{"pageContent":"<div slot=\"gcp\">\n\nFirst, we [create a **service account**](https://cloud.google.com/iam/docs/creating-managing-service-accounts) for the cluster. The service account needs to have the following roles:\n\n| Roles                         |\n| ----------------------------- |\n| roles/logging.logWriter       |\n| roles/monitoring.metricWriter |\n| roles/container.admin         |\n\nRun the following commands to create the service account:\n\n```bash\nGKE_SA=gitpod-gke\nGKE_SA_EMAIL=\"${GKE_SA}\"@\"${PROJECT_NAME}\".iam.gserviceaccount.com\ngcloud iam service-accounts create \"${GKE_SA}\" --display-name \"${GKE_SA}\"\ngcloud projects add-iam-policy-binding \"${PROJECT_NAME}\" --member serviceAccount:\"${GKE_SA_EMAIL}\" --role=\"roles/logging.logWriter\"\ngcloud projects add-iam-policy-binding \"${PROJECT_NAME}\" --member serviceAccount:\"${GKE_SA_EMAIL}\" --role=\"roles/monitoring.metricWriter\"\ngcloud projects add-iam-policy-binding \"${PROJECT_NAME}\" --member serviceAccount:\"${GKE_SA_EMAIL}\" --role=\"roles/container.admin\"","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":61,"to":79}}}}],["2813",{"pageContent":"After that, we [create a **Kubernetes cluster**](https://cloud.google.com/kubernetes-engine/docs/how-to/creating-a-regional-cluster).","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":82,"to":82}}}}],["2814",{"pageContent":"|                   |                                                                                                                                                                                                                        |\n| ----------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Image Type        | `UBUNTU_CONTAINERD`                                                                                                                                                                                                    |\n| Machine Type      | `n2d-standard-16`                                                                                                                                                                                                      |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":84,"to":87}}}}],["2815",{"pageContent":"| Cluster Version   | Choose latest from [regular channel](https://cloud.google.com/kubernetes-engine/docs/release-notes-regular)                                                                                                            |\n| Enable            | Autoscaling,<br/>Autorepair,<br/>IP Alias,<br/>Network Policy                                                                                                                                                          |\n| Disable           | Autoupgrade<br/>`metadata=disable-legacy-endpoints=true`                                                                                                                                                               |\n| Create Subnetwork | `gitpod-${CLUSTER_NAME}`                                                                                                                                                                                               |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":88,"to":91}}}}],["2816",{"pageContent":"| Number of nodes   | 1                                                                                                                                                                                                                      |\n| Min Nodes         | 1                                                                                                                                                                                                                      |\n| Max Nodes         | 50                                                                                                                                                                                                                     |\n| Max Pods per Node | 110                                                                                                                                                                                                                    |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":92,"to":95}}}}],["2817",{"pageContent":"| Addons            | HorizontalPodAutoscaling,<br/>NodeLocalDNS,<br/>NetworkPolicy                                                                                                                                                          |\n| Scopes            | `gke-default`,<br/>`https://www.googleapis.com/auth/ndev.clouddns.readwrite`                                                                                                                                           |\n| Region            | Choose your [region and zones](https://cloud.google.com/compute/docs/regions-zones)                                                                                                                                    |\n| Node Labels       | `gitpod.io/workload_meta=true`,<br/>`gitpod.io/workload_ide=true`,<br/>`gitpod.io/workload_workspace_services=true`,<br/>`gitpod.io/workload_workspace_regular=true`,<br/>`gitpod.io/workload_workspace_headless=true` |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":96,"to":99}}}}],["2818",{"pageContent":"```bash\nCLUSTER_NAME=gitpod\nREGION=us-central1-b\nGKE_VERSION=1.21.12","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":101,"to":104}}}}],["2819",{"pageContent":"gcloud container clusters \\\n    create \"${CLUSTER_NAME}\" \\\n    --disk-type=\"pd-ssd\" \\\n    --disk-size=\"100GB\" \\\n    --image-type=\"UBUNTU_CONTAINERD\" \\\n    --machine-type=\"n2d-standard-16\" \\\n    --cluster-version=\"${GKE_VERSION}\" \\\n    --zone=\"${ZONE}\" \\\n    --service-account \"${GKE_SA_EMAIL}\" \\\n    --num-nodes=1 \\\n    --no-enable-basic-auth \\\n    --enable-autoscaling \\\n    --enable-autorepair \\\n    --no-enable-autoupgrade \\\n    --enable-ip-alias \\\n    --enable-network-policy \\\n    --create-subnetwork name=\"gitpod-${CLUSTER_NAME}\" \\\n    --metadata=disable-legacy-endpoints=true \\\n    --scopes=\"gke-default,https://www.googleapis.com/auth/ndev.clouddns.readwrite\" \\\n    --node-labels=\"gitpod.io/workload_meta=true,gitpod.io/workload_ide=true,gitpod.io/workload_workspace_services=true,gitpod.io/workload_workspace_regular=true,gitpod.io/workload_workspace_headless=true\" \\\n    --min-nodes=1 \\\n    --max-nodes=50 \\\n    --addons=HorizontalPodAutoscaling,NodeLocalDNS,NetworkPolicy","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":106,"to":128}}}}],["2820",{"pageContent":"Now, you can **connect `kubectl`** to your newly created cluster.\n\n```bash\ngcloud container clusters get-credentials --zone=\"${ZONE}\" \"${CLUSTER_NAME}\"\n```\n\nAfter that, you need to create cluster role bindings to allow the current user to create new RBAC rules.\n\n```bash\nkubectl create clusterrolebinding cluster-admin-binding \\\n    --clusterrole=cluster-admin \\\n    --user=\"$(gcloud config get-value core/account)\"","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":131,"to":142}}}}],["2821",{"pageContent":"</div>\n\n<div slot=\"aws\">\n\nFor `eksctl`, configuring the cluster and the node groups cannot happen simultaneously. You need to deploy the cluster control plane first, do modifications to the network stack (Calico), and then provision the node groups. This ensures you have the maximum number of pods available (110 in most cases) to run Gitpod workspaces.\n\nThe example `eksctl` config file includes services accounts that might not be relevant to a particular deployment, but are included for reference.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":145,"to":151}}}}],["2822",{"pageContent":"The example `eksctl` config file includes services accounts that might not be relevant to a particular deployment, but are included for reference.\n\n- `cert-manager` provided for the required cert-manager tooling. If using DNS-01 challenges for Let's Encrypt with a Route53 zone, then enable the cert-manager `wellKnownPolicies` or ensure one exists with permissions to modify records in the zone\n- `aws-load-balancer-controller` enables ELB creation for LoadBalancer services and integration with AWS Application Load Balancers\n- `cluster-autoscaler` connects to the AWS autoscaler\n- `ebs-csi-controller-sa` enables provisioning of the EBS volumes for PVC storage\n- `external-dns` creates DNS records for external-facing Gitpod services\n\nProvided below is a complete `eksctl` configuration file that will deploy all the components required for an EKS installation to support Gitpod. All references to a `gitpod-cluster.yaml` file refer to this reference.\n\n**`gitpod-cluster.yaml`**","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":151,"to":161}}}}],["2823",{"pageContent":"**`gitpod-cluster.yaml`**\n\n```yaml\napiVersion: eksctl.io/v1alpha5\nkind: ClusterConfig\nmetadata:\n  name: gitpod-pov\n  region: eu-west-1\n  version: \"1.22\"\n  # Update tags on your other Gitpod AWS resources (such as securitygroup rules)\n  # to match these tags.\n  tags:\n    department: eng\n    team: selfhosted\n    owner: alt\n    project: gitpod-pov\n\niam:\n  withOIDC: true","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":161,"to":179}}}}],["2824",{"pageContent":"iam:\n  withOIDC: true\n\n  serviceAccounts:\n    - metadata:\n        name: aws-load-balancer-controller\n        namespace: kube-system\n      wellKnownPolicies:\n        awsLoadBalancerController: true\n    - metadata:\n        name: ebs-csi-controller-sa\n        namespace: kube-system\n      wellKnownPolicies:\n        ebsCSIController: true\n    - metadata:\n        name: cluster-autoscaler\n        namespace: kube-system\n      wellKnownPolicies:\n        autoScaler: true\n    - metadata:\n        name: cert-manager\n        namespace: cert-manager\n      wellKnownPolicies:\n        certManager: true\n    - metadata:\n        name: external-dns\n        namespace: external-dns\n      wellKnownPolicies:\n        externalDNS: true\n\n# Uncomment and update for your region if you wish to use fewer availability zones\n# availabilityZones:\n#   - eu-west-1a\n#   - eu-west-1b\n#   - eu-west-1c","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":179,"to":213}}}}],["2825",{"pageContent":"# Uncomment and update for your region if you wish to use fewer availability zones\n# availabilityZones:\n#   - eu-west-1a\n#   - eu-west-1b\n#   - eu-west-1c\n\n# By default we create a dedicated VPC for the cluster\n# You can use an existing VPC by supplying private and/or public subnets. Please check\n# https://eksctl.io/usage/vpc-networking/#use-existing-vpc-other-custom-configuration\nvpc:\n  autoAllocateIPv6: false\n  nat:\n    # For production environments use HighlyAvailable, for an initial deployment Single adequate\n    # HighlyAvailable will consume 3 Elastic IPs so ensure your region has capacity before using\n    # https://eksctl.io/usage/vpc-networking/#nat-gateway\n    gateway: Single","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":213,"to":228}}}}],["2826",{"pageContent":"# Cluster endpoints and public access\n  # Private access ensures that nodes can communicate internally in case of NAT failure\n  # For customizing for your environment review https://eksctl.io/usage/vpc-cluster-access/\n  clusterEndpoints:\n    privateAccess: true\n    publicAccess: true\n  publicAccessCIDRs: [\"0.0.0.0/0\"]\n\n# Logging settings\ncloudWatch:\n  clusterLogging:\n    enableTypes: [\"*\"]\n\n# Nodegroups / Compute settings\nmanagedNodeGroups:\n  - name: default\n    amiFamily: Ubuntu2004\n    spot: false\n    instanceTypes: [\"m6i.4xlarge\"]\n    desiredCapacity: 1\n    minSize: 1\n    maxSize: 50\n    maxPodsPerNode: 110\n    disableIMDSv1: false\n    volumeSize: 512\n    volumeType: gp3\n    volumeIOPS: 6000\n    volumeThroughput: 500\n    ebsOptimized: true\n    privateNetworking: true\n    propagateASGTags: true","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":230,"to":260}}}}],["2827",{"pageContent":"iam:\n      attachPolicyARNs:\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly\n        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy\n        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy\n        - arn:aws:iam::aws:policy/ElasticLoadBalancingFullAccess\n        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore\n\n    tags:\n      k8s.io/cluster-autoscaler/enabled: \"true\"\n      # Important - If you change the name of your EKS cluster from the\n      # default cluster name (\"gitpod-pov\"), update this tag to match\n      # your cluster (`k8s.io/cluster-autoscaler/<cluster-name>: \"owned\"`)\n      #\n      # For example: `k8s.io/cluster-autoscaler/gitpod-corp-pov: \"owned\"`\n      k8s.io/cluster-autoscaler/gitpod-pov: \"owned\"\n\n    labels:\n      gitpod.io/workload_meta: \"true\"\n      gitpod.io/workload_ide: \"true\"\n      gitpod.io/workload_workspace_regular: \"true\"\n      gitpod.io/workload_workspace_services: \"true\"\n      gitpod.io/workload_workspace_headless: \"true\"","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":262,"to":284}}}}],["2828",{"pageContent":"preBootstrapCommands:\n      - echo \"export USE_MAX_PODS=false\" >> /etc/profile.d/bootstrap.sh\n      - echo \"export CONTAINER_RUNTIME=containerd\" >> /etc/profile.d/bootstrap.sh\n      - sed -i '/^set -o errexit/a\\\\nsource /etc/profile.d/bootstrap.sh' /etc/eks/bootstrap.sh","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":286,"to":289}}}}],["2829",{"pageContent":"To ensure there are enough IPs and networking policy enforcement is in place, this proof of value reference architecture uses Calico for networking. To enable Calico in an EKS installation it must be done after the control plane has been provisioned and before the nodegroups have been created.\n\nFirst: Run `eksctl` with the `--without-nodegroup` flag to provision just the control plane defined in the `gitpod-cluster.yaml`:\n\n```bash\neksctl create cluster --without-nodegroup --config-file gitpod-cluster.yaml","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":292,"to":297}}}}],["2830",{"pageContent":"This should result in the following output:\n\n```\n2022-08-11 22:10:23 [ℹ]  eksctl version 0.107.0\n2022-08-11 22:10:23 [ℹ]  using region eu-west-1\n2022-08-11 22:10:23 [ℹ]  setting availability zones to [eu-west-1b eu-west-1a eu-west-1c]\n2022-08-11 22:10:23 [ℹ]  subnets for eu-west-1b - public:192.168.0.0/19 private:192.168.96.0/19\n2022-08-11 22:10:23 [ℹ]  subnets for eu-west-1a - public:192.168.32.0/19 private:192.168.128.0/19\n2022-08-11 22:10:23 [ℹ]  subnets for eu-west-1c - public:192.168.64.0/19 private:192.168.160.0/19\n2022-08-11 22:10:23 [ℹ]  using Kubernetes version 1.22\n[...]\n2022-08-11 22:27:06 [✔]  EKS cluster \"gitpod-pov\" in \"eu-west-1\" region is ready\n```\n\nAfter this command finishes, check that `eksctl` also created the kubeconfig properly by running the command `kubectl get pods -n kube-system`. If deployed correctly one should see the list of pods in a pending state.\n\n```bash\nkubectl get pods -n kube-system","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":300,"to":317}}}}],["2831",{"pageContent":"This should result in:\n\n```\nNAME                       READY   STATUS    RESTARTS   AGE\ncoredns-5947f47f5f-79vqv   0/1     Pending   0          22m\ncoredns-5947f47f5f-97f8m   0/1     Pending   0          22m\n```\n\n**Calico Installation**\n\nThis is following the instructions provided by [Tigera](https://projectcalico.docs.tigera.io/getting-started/kubernetes/managed-public-cloud/eks).\n\nTo install Calico, first remove the default AWS-provided networking component:\n\n```bash\nkubectl delete daemonset -n kube-system aws-node\n```\n\nInstall the Calico manifest:\n\n```bash\nkubectl apply -f https://projectcalico.docs.tigera.io/manifests/calico-vxlan.yaml\n```\n\nNow configure Calico for EKS-specific support with the following command:\n\n```bash\nkubectl -n kube-system set env daemonset/calico-node FELIX_AWSSRCDSTCHECK=Disable","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":320,"to":347}}}}],["2832",{"pageContent":"Now configure Calico for EKS-specific support with the following command:\n\n```bash\nkubectl -n kube-system set env daemonset/calico-node FELIX_AWSSRCDSTCHECK=Disable\n```\n\n**SSH Access to nodegroups**\n\n`eksctl` allows for [ssh keys](https://eksctl.io/usage/schema/#managedNodeGroups-ssh) to be added to your nodegroups for troubleshooting. By default, the `gitpod-cluster.yaml` does not configure this. AWS Systems Manager is enabled by default, allowing for connectivity [through multiple methods](https://docs.aws.amazon.com/systems-manager/latest/userguide/session-manager-working-with-sessions-start.html) to each instance in your nodegroup.\n\n**Create the gitpod nodegroup**\n\nOnce the Calico CNI has been provisioned the gitpod nodegroup can be created.\n\nCreate the Gitpod nodegroup:\n\n```bash\neksctl create nodegroup --include=default --config-file gitpod-cluster.yaml","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":347,"to":364}}}}],["2833",{"pageContent":"This should result in:\n\n```\n2022-08-11 22:52:10 [ℹ]  nodegroup \"default\" will use \"ami-0733d755ed2c97a4d\" [Ubuntu2004/1.22]\n2022-08-11 22:52:13 [ℹ]  combined include rules: default\n2022-08-11 22:52:13 [ℹ]  1 nodegroup (default) was included (based on the include/exclude rules)\n2022-08-11 22:52:13 [ℹ]  will create a CloudFormation stack for each of 1 managed nodegroups in cluster \"gitpod-pov\"\n[...]\n2022-08-11 22:56:53 [ℹ]  node \"ip-192-168-104-44.eu-west-1.compute.internal\" is ready\n2022-08-11 22:56:53 [✔]  created 1 managed nodegroup(s) in cluster \"gitpod-pov\"\n2022-08-11 22:56:57 [ℹ]  checking security group configuration for all nodegroups\n2022-08-11 22:56:57 [ℹ]  all nodegroups have up-to-date cloudformation templates","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":367,"to":378}}}}],["2834",{"pageContent":"You can verify that your installation was deployed properly with the custom `kubectl` command provided below which will let you review maxpods, kernel and containerd versions to ensure they are meeting [our minimum requirements](../../latest/cluster-set-up) as intended.\n\n```bash\nkubectl get nodes -o=custom-columns=\"NAME:.metadata.name,\\\nRUNTIME:.status.nodeInfo.containerRuntimeVersion,\\\nMAXPODS:.status.capacity.pods,\\\nKERNEL:.status.nodeInfo.kernelVersion,\\\nAMIFAMILY:.status.nodeInfo.osImage,\\\nK8S:.status.nodeInfo.kubeletVersion,\\\nInstance-ID:.spec.providerID\"","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":381,"to":390}}}}],["2835",{"pageContent":"**Enable cluster autoscaling**\n\nGitpod's resource usage will vary depending on the number of active workspaces and image prebuilds during the day. The use of a cluster autoscaler is recommended to provision and remove EKS nodes on demand.\n\n```bash\nCLUSTER_NAME=\"gitpod-pov\"\nAWS_REGION=\"eu-west-1\"","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":393,"to":399}}}}],["2836",{"pageContent":"```bash\nCLUSTER_NAME=\"gitpod-pov\"\nAWS_REGION=\"eu-west-1\"\n\nhelm repo add autoscaler https://kubernetes.github.io/autoscaler\nhelm repo update\nhelm upgrade \\\n    --atomic \\\n    --cleanup-on-fail \\\n    --install \\\n    --namespace kube-system \\\n    --reset-values \\\n    --wait \\\n    --set cloudProvider=aws \\\n    --set awsRegion=$AWS_REGION \\\n    --set autoDiscovery.clusterName=$CLUSTER_NAME \\\n    --set rbac.serviceAccount.create=false \\\n    --set rbac.serviceAccount.name=cluster-autoscaler \\\n    --set securityContext.fsGroup=65534 \\\n    --set extraArgs.skip-nodes-with-local-storage=false \\\n    --set extraArgs.skip-nodes-with-system-pods=false \\\n    --set extraArgs.expander=least-waste \\\n    --set extraArgs.balance-similar-node-groups=true \\\n    --set extraArgs.scale-down-utilization-threshold=0.2 \\\n    --set extraArgs.v=2 \\\n    autoscaler autoscaler/cluster-autoscaler","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":399,"to":424}}}}],["2837",{"pageContent":"**Deleting the cluster**\n\nWhen deleting this cluster following your proof of value evaluation, any additional resources added to the VPC will need to be deleted before deleting the cluster, otherwise, cloudformations will fail to delete the VPC and complete deleting the cluster. The alternative is to create a VPC managed separately and install EKS using the additions for working [with existing VPCs](https://eksctl.io/usage/vpc-networking/#use-existing-vpc-other-custom-configuration) in `eksctl`.\n\nFull removal of the installed components would look something like this (commands are grouped for brevity):\n\n```bash\neksctl delete cluster --name gitpod --force --disable-nodegroup-eviction --wait","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":427,"to":434}}}}],["2838",{"pageContent":"The following removal steps are optional; if you plan on creating another Gitpod installation then the S3 bucket,\n#### access account, key, and policy can be kept for later use.\n\n#### delete s3 resources\naws s3 rm s3://${S3_BUCKET_NAME} --recursive\naws s3 rb s3://${S3_BUCKET_NAME} --force\n\n#### delete iam resources\naws iam detach-user-policy --user-name gitpod-s3-access --policy-arn 'arn:aws:iam::12344:policy/gitpod_s3_access_policy'\n\n# delete access keys:\naws iam list-access-keys --user-name gitpod-s3-access\naws iam delete-access-key --user-name gitpod-s3-access --access-key-id AKI---------\naws iam delete-user --user-name gitpod-s3-access\n\n# ensure that nothing else is attached to this policy\naws iam list-entities-for-policy --policy-arn 'arn:aws:iam::12344:policy/gitpod_s3_access_policy'\naws iam delete-policy --policy-arn 'arn:aws:iam::12344:policy/gitpod_s3_access_policy'\n```\n\n</div>\n\n</CloudPlatformToggle>","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":436,"to":458}}}}],["2839",{"pageContent":"Networking\n\n<Networking />","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":460,"to":462}}}}],["2840",{"pageContent":"Install Gitpod\n\nCongratulations. You have set up your cluster. Now, you are ready to install Gitpod. Follow the instructions of the [installation guide](../installing-gitpod).\n\nIf you followed the steps to create your infrastructure of this guide, you need to use the following config settings for your Gitpod installation:\n\n| General settings |                    |\n| ---------------- | ------------------ |\n| Domain name      | value of `$DOMAIN` |\n\nKeep cert-manager selected for the TLS certificates options.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":464,"to":474}}}}],["2841",{"pageContent":"| TLS certificates            | &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |\n| --------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| Self-signed TLS certificate | no                                                                                                                                                                                                                       |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":476,"to":478}}}}],["2842",{"pageContent":"| cert-manager                | yes                                                                                                                                                                                                                      |\n| Issuer name                 | `gitpod-issuer`                                                                                                                                                                                                          |\n| Issuer type                 | Select “cluster issuer”                                                                                                                                                                                                  |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":479,"to":481}}}}],["2843",{"pageContent":"| Additional features                                                     | &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":483,"to":483}}}}],["2844",{"pageContent":"| ----------------------------------------------------------------------- ||","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":484,"to":484}}}}],["2845",{"pageContent":"| Allow login to your workspace via SSH (if you wish to use desktop IDEs) | ✅|","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":485,"to":485}}}}],["2846",{"pageContent":"---\nsection: self-hosted/latest\nsubsection: reference\ntitle: Self-Hosted Gitpod Releases and Versioning\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Self-Hosted Gitpod Releases and Versioning\n\n> ⚠️ **Self-hosted as a product is no longer supported**\n>\n> The last official update of this product is the [November 2022 self-hosted release](https://www.gitpod.io/changelog/november-self-hosted-release). We no longer sell commercial self-hosted licenses. If you want to self-host Gitpod, you can still request our [free community license](https://www.gitpod.io/community-license). However, we no longer offer support or updates for it. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n> Read [our blog on Gitpod Dedicated](/blog/introducing-gitpod-dedicated) to learn why we made the decision to discontinue self-hosted.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/releases","loc":{"lines":{"from":1,"to":16}}}}],["2847",{"pageContent":"Release Policy\n\nGitpod Self-Hosted is released once a month, usually at the end of each month. The versioning schema is: `YYYY.MM.V`. Each new version of self-hosted Gitpod includes all of the changes made to Gitpod up to the release date. This means that the self-hosted version of Gitpod is at most one month behind the SaaS version. Outside of the regular monthly releases, hot-fix releases are possible to add functionality or fix bugs. Hot fix releases increment the `V` in the aforementioned versioning schema.\n\n### Support Policy\n\nGitpod is committed to supporting the last 2 versions of self-hosted Gitpod with patches and security updates.\n\n### Roll out Policy\n\nNew versions are first rolled out to all users that are on the `community` license, i.e. are on the stable branch. Customers with a paid license receive the newest version one week later.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/releases","loc":{"lines":{"from":18,"to":28}}}}],["2848",{"pageContent":"Testing Policy\n\n<!-- ToDo: link to reference architecture once this is shipped -->\n\nFor each release, we validate that core Gitpod workflows function as expected via a series of automated and manual tests. These tests are performed on different Gitpod installations running on our [reference architectures](../latest/reference-architecture). This should help ensure that Gitpod works for you, assuming your architecture is close to the reference architecture.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/releases","loc":{"lines":{"from":30,"to":34}}}}],["2849",{"pageContent":"---\nlayout: false\n---\n\n<script lang=\"ts\">\n  import CloudPlatformToggle from \"$lib/components/docs/cloud-platform-toggle.svelte\";\n</script>\n\nThe heart of this reference architecture is a **Kubernetes cluster** where all Gitpod components are deployed to. This cluster consists of three node pools:\n\n1. **Services Node Pool**: The Gitpod “app” with all its services is deployed to these nodes. These services provide the users with the dashboard and manage the provisioning of workspaces.\n2. **Regular Workspaces Node Pool**: Gitpod deploys the actual workspaces (where the actual developer work is happening) to these nodes.\n3. **Headless Workspace Node Pool**: Gitpod deploys the imagebuild and prebuild workspaces (where build work generally demands more CPU and disk) to these needs.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":1,"to":13}}}}],["2850",{"pageContent":"Gitpod services, headless, and regular workspaces have vastly differing resource and isolation requirements. These workloads are separated onto different node pools to provide a better quality of service and security guarantees.\n\nYou need to assign the following labels to the node pools to enforce that the Gitpod components are scheduled to the proper node pools:","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":15,"to":17}}}}],["2851",{"pageContent":"You need to assign the following labels to the node pools to enforce that the Gitpod components are scheduled to the proper node pools:\n\n| Node Pool                    | Labels                                                                                                              |\n| ---------------------------- | ------------------------------------------------------------------------------------------------------------------- |\n| Services Node Pool           | `gitpod.io/workload_meta=true`,<br/>`gitpod.io/workload_ide=true`,<br/>`gitpod.io/workload_workspace_services=true` |\n| Regular Workspace Node Pool  | `gitpod.io/workload_workspace_regular=true`                                                                         |\n| Headless Workspace Node Pool | `gitpod.io/workload_workspace_headless=true`                                                                        |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":17,"to":23}}}}],["2852",{"pageContent":"The following table gives an overview of the node types for the different cloud providers that are used by this reference architecture.\n\n|                              | GCP               | AWS           | Azure             |\n| ---------------------------- | ----------------- | ------------- | ----------------- |\n| Services Node Pool           | `n2d-standard-4`  | `m6i.xlarge`  | `Standard_D4_v4`  |\n| Regular Workspace Node Pool  | `n2d-standard-16` | `m6i.4xlarge` | `Standard_D16_v4` |\n| Headless Workspace Node Pool | `n2d-standard-16` | `m6i.4xlarge` | `Standard_D16_v4` |\n\n<CloudPlatformToggle id=\"cloud-platform-toggle-cluster\">\n\n<div slot=\"gcp\">\n\nFirst, we [create a **service account**](https://cloud.google.com/iam/docs/creating-managing-service-accounts) for the cluster. The service account needs to have the following roles:","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":25,"to":37}}}}],["2853",{"pageContent":"<div slot=\"gcp\">\n\nFirst, we [create a **service account**](https://cloud.google.com/iam/docs/creating-managing-service-accounts) for the cluster. The service account needs to have the following roles:\n\n| Roles                         |\n| ----------------------------- |\n| roles/storage.admin           |\n| roles/logging.logWriter       |\n| roles/monitoring.metricWriter |\n| roles/container.admin         |\n\nRun the following commands to create the service account:","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":37,"to":48}}}}],["2854",{"pageContent":"Run the following commands to create the service account:\n\n```bash\nGKE_SA=gitpod-gke\nGKE_SA_EMAIL=\"${GKE_SA}\"@\"${PROJECT_NAME}\".iam.gserviceaccount.com\ngcloud iam service-accounts create \"${GKE_SA}\" --display-name \"${GKE_SA}\"\ngcloud projects add-iam-policy-binding \"${PROJECT_NAME}\" --member serviceAccount:\"${GKE_SA_EMAIL}\" --role=\"roles/storage.admin\"\ngcloud projects add-iam-policy-binding \"${PROJECT_NAME}\" --member serviceAccount:\"${GKE_SA_EMAIL}\" --role=\"roles/logging.logWriter\"\ngcloud projects add-iam-policy-binding \"${PROJECT_NAME}\" --member serviceAccount:\"${GKE_SA_EMAIL}\" --role=\"roles/monitoring.metricWriter\"\ngcloud projects add-iam-policy-binding \"${PROJECT_NAME}\" --member serviceAccount:\"${GKE_SA_EMAIL}\" --role=\"roles/container.admin\"","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":48,"to":57}}}}],["2855",{"pageContent":"After that, we [create a **Kubernetes cluster**](https://cloud.google.com/kubernetes-engine/docs/how-to/creating-a-regional-cluster).","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":60,"to":60}}}}],["2856",{"pageContent":"|                           |                                                                                                             |\n| ------------------------- | ----------------------------------------------------------------------------------------------------------- |\n| Image Type                | `UBUNTU_CONTAINERD`                                                                                         |\n| Machine Type              | `e2-standard-2`                                                                                             |\n| Cluster Version           | Choose latest from [regular channel](https://cloud.google.com/kubernetes-engine/docs/release-notes-regular) |\n| Enable                    | Autoscaling,<br/>Autorepair,<br/>IP Alias,<br/>Network Policy                                               |\n| Disable                   | Autoupgrade<br/>`metadata=disable-legacy-endpoints=true`                                                    |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":62,"to":68}}}}],["2857",{"pageContent":"| Disable                   | Autoupgrade<br/>`metadata=disable-legacy-endpoints=true`                                                    |\n| Create Subnetwork         | `gitpod-${CLUSTER_NAME}`                                                                                    |\n| Max Pods per Node         | 10                                                                                                          |\n| Default Max Pods per Node | 110                                                                                                         |\n| Min Nodes                 | 0                                                                                                           |\n| Max Nodes                 | 1                                                                                                           |\n| Addons                    | HorizontalPodAutoscaling,<br/>NodeLocalDNS,<br/>NetworkPolicy                                               |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":68,"to":74}}}}],["2858",{"pageContent":"| Addons                    | HorizontalPodAutoscaling,<br/>NodeLocalDNS,<br/>NetworkPolicy                                               |\n| Region                    | Choose your [region and zones](https://cloud.google.com/compute/docs/regions-zones)                         |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":74,"to":75}}}}],["2859",{"pageContent":"```bash\nCLUSTER_NAME=gitpod\nREGION=us-central1\nGKE_VERSION=1.22.12-gke.1200\n\ngcloud container clusters \\\n    create \"${CLUSTER_NAME}\" \\\n    --disk-type=\"pd-ssd\" --disk-size=\"50GB\" \\\n    --image-type=\"UBUNTU_CONTAINERD\" \\\n    --machine-type=\"e2-standard-2\" \\\n    --cluster-version=\"${GKE_VERSION}\" \\\n    --region=\"${REGION}\" \\\n    --service-account \"${GKE_SA_EMAIL}\" \\\n    --num-nodes=1 \\\n    --no-enable-basic-auth \\\n    --enable-autoscaling \\\n    --enable-autorepair \\\n    --no-enable-autoupgrade \\\n    --enable-ip-alias \\\n    --enable-network-policy \\\n    --create-subnetwork name=\"gitpod-${CLUSTER_NAME}\" \\\n    --metadata=disable-legacy-endpoints=true \\\n    --max-pods-per-node=110 \\\n    --default-max-pods-per-node=110 \\\n    --min-nodes=0 \\\n    --max-nodes=1 \\\n    --addons=HorizontalPodAutoscaling,NodeLocalDNS,NetworkPolicy","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":77,"to":103}}}}],["2860",{"pageContent":"Unfortunately, you cannot create a cluster without the default node pool. Since we need a custom node pool, you need to remove the default one.\n\n<!-- Can we re-use the default node pool instead? → https://github.com/gitpod-io/website/pull/2106#discussion_r893885815 -->\n\n```bash\ngcloud --quiet container node-pools delete default-pool \\\n    --cluster=\"${CLUSTER_NAME}\" --region=\"${REGION}\"","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":106,"to":112}}}}],["2861",{"pageContent":"Now, we are [creating a **node pool**](https://cloud.google.com/kubernetes-engine/docs/how-to/node-pools) **for the Gitpod services**.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":115,"to":115}}}}],["2862",{"pageContent":"|                   |                                                                                     |\n| ----------------- | ----------------------------------------------------------------------------------- |\n| Image Type        | `UBUNTU_CONTAINERD`                                                                 |\n| Machine Type      | `n2d-standard-4`                                                                    |\n| Enable            | Autoscaling<br/>Autorepair<br/>IP Alias<br/>Network Policy                          |\n| Disable           | Autoupgrade<br/>`metadata=disable-legacy-endpoints=true`                            |\n| Create Subnetwork | `gitpod-${CLUSTER_NAME}`                                                            |\n| Number of nodes   | 1                                                                                   |\n| Min Nodes         | 1                                                                                   |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":117,"to":125}}}}],["2863",{"pageContent":"| Min Nodes         | 1                                                                                   |\n| Max Nodes         | 50                                                                                  |\n| Max Pods per Node | 110                                                                                 |\n| Scopes            | `gke-default`,<br/>`https://www.googleapis.com/auth/ndev.clouddns.readwrite`        |\n| Region            | Choose your [region and zones](https://cloud.google.com/compute/docs/regions-zones) |\n| Node Labels       | `gitpod.io/workload_meta=true`,<br/>`gitpod.io/workload_ide=true`                   |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":125,"to":130}}}}],["2864",{"pageContent":"```bash\ngcloud container node-pools \\\n    create \"workload-services\" \\\n    --cluster=\"${CLUSTER_NAME}\" \\\n    --disk-type=\"pd-ssd\" \\\n    --disk-size=\"100GB\" \\\n    --image-type=\"UBUNTU_CONTAINERD\" \\\n    --machine-type=\"n2d-standard-4\" \\\n    --num-nodes=1 \\\n    --no-enable-autoupgrade \\\n    --enable-autorepair \\\n    --enable-autoscaling \\\n    --metadata disable-legacy-endpoints=true \\\n    --scopes=\"gke-default,https://www.googleapis.com/auth/ndev.clouddns.readwrite\" \\\n    --node-labels=\"gitpod.io/workload_meta=true,gitpod.io/workload_ide=true,gitpod.io/workload_workspace_services=true\" \\\n    --max-pods-per-node=110 \\\n    --min-nodes=1 \\\n    --max-nodes=4 \\\n    --region=\"${REGION}\"","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":132,"to":150}}}}],["2865",{"pageContent":"We are also creating a **node pool for the Gitpod regular workspaces**.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":153,"to":153}}}}],["2866",{"pageContent":"|                   |                                                                                     |\n| ----------------- | ----------------------------------------------------------------------------------- |\n| Image Type        | `UBUNTU_CONTAINERD`                                                                 |\n| Machine Type      | `n2d-standard-16`                                                                   |\n| Enable            | Autoscaling,<br/>Autorepair,<br/>IP Alias,<br/>Network Policy                       |\n| Disable           | Autoupgrade<br/>`metadata=disable-legacy-endpoints=true`                            |\n| Create Subnetwork | `gitpod-${CLUSTER_NAME}`                                                            |\n| Number of nodes   | 1                                                                                   |\n| Min Nodes         | 1                                                                                   |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":155,"to":163}}}}],["2867",{"pageContent":"| Min Nodes         | 1                                                                                   |\n| Max Nodes         | 50                                                                                  |\n| Max Pods per Node | 110                                                                                 |\n| Scopes            | `gke-default`,<br/>`https://www.googleapis.com/auth/ndev.clouddns.readwrite`        |\n| Region            | Choose your [region and zones](https://cloud.google.com/compute/docs/regions-zones) |\n| Node Labels       | `gitpod.io/workload_workspace_regular=true`                                         |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":163,"to":168}}}}],["2868",{"pageContent":"```bash\ngcloud container node-pools \\\n    create \"workload-regular-workspaces\" \\\n    --cluster=\"${CLUSTER_NAME}\" \\\n    --disk-type=\"pd-ssd\" \\\n    --disk-size=\"512GB\" \\\n    --image-type=\"UBUNTU_CONTAINERD\" \\\n    --machine-type=\"n2d-standard-16\" \\\n    --num-nodes=1 \\\n    --no-enable-autoupgrade \\\n    --enable-autorepair \\\n    --enable-autoscaling \\\n    --metadata disable-legacy-endpoints=true \\\n    --scopes=\"gke-default,https://www.googleapis.com/auth/ndev.clouddns.readwrite\" \\\n    --node-labels=\"gitpod.io/workload_workspace_regular=true\" \\\n    --max-pods-per-node=110 \\\n    --min-nodes=1 \\\n    --max-nodes=50 \\\n    --region=\"${REGION}\"","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":170,"to":188}}}}],["2869",{"pageContent":"We are also creating a **node pool for the Gitpod headless workspaces**.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":191,"to":191}}}}],["2870",{"pageContent":"|                   |                                                                                     |\n| ----------------- | ----------------------------------------------------------------------------------- |\n| Image Type        | `UBUNTU_CONTAINERD`                                                                 |\n| Machine Type      | `n2d-standard-16`                                                                   |\n| Enable            | Autoscaling,<br/>Autorepair,<br/>IP Alias,<br/>Network Policy                       |\n| Disable           | Autoupgrade<br/>`metadata=disable-legacy-endpoints=true`                            |\n| Create Subnetwork | `gitpod-${CLUSTER_NAME}`                                                            |\n| Number of nodes   | 1                                                                                   |\n| Min Nodes         | 1                                                                                   |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":191,"to":199}}}}],["2871",{"pageContent":"| Min Nodes         | 1                                                                                   |\n| Max Nodes         | 50                                                                                  |\n| Max Pods per Node | 110                                                                                 |\n| Scopes            | `gke-default`,<br/>`https://www.googleapis.com/auth/ndev.clouddns.readwrite`        |\n| Region            | Choose your [region and zones](https://cloud.google.com/compute/docs/regions-zones) |\n| Node Labels       | `gitpod.io/workload_workspace_headless=true`                                        |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":237,"to":242}}}}],["2872",{"pageContent":"```bash\ngcloud container node-pools \\\n    create \"workload-headless-workspaces\" \\\n    --cluster=\"${CLUSTER_NAME}\" \\\n    --disk-type=\"pd-ssd\" \\\n    --disk-size=\"512GB\" \\\n    --image-type=\"UBUNTU_CONTAINERD\" \\\n    --machine-type=\"n2d-standard-16\" \\\n    --num-nodes=1 \\\n    --no-enable-autoupgrade \\\n    --enable-autorepair \\\n    --enable-autoscaling \\\n    --metadata disable-legacy-endpoints=true \\\n    --scopes=\"gke-default,https://www.googleapis.com/auth/ndev.clouddns.readwrite\" \\\n    --node-labels=\"gitpod.io/workload_workspace_headless=true\" \\\n    --max-pods-per-node=110 \\\n    --min-nodes=1 \\\n    --max-nodes=50 \\\n    --region=\"${REGION}\"","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":244,"to":262}}}}],["2873",{"pageContent":"Now, you can **connect `kubectl`** to your newly created cluster.\n\n```bash\ngcloud container clusters get-credentials --region=\"${REGION}\" \"${CLUSTER_NAME}\"\n```\n\nAfter that, you need to create cluster role bindings to allow the current user to create new RBAC rules.\n\n```bash\nkubectl create clusterrolebinding cluster-admin-binding \\\n    --clusterrole=cluster-admin \\\n    --user=\"$(gcloud config get-value core/account)\"","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":265,"to":276}}}}],["2874",{"pageContent":"</div>\n<div slot=\"aws\">\n\n> **Note:** By default, when Gitpod is being installed using the instructions here, EKS will create a classic load balancer that you can point your DNS entries at. If you are unable to use a AWS Classic Load Balancer (e.g. because you use SSL certificates generated by AWS), please follow [the Setting up your EKS cluster with dual ALB + NLB load balancers guide](../advanced/eks-with-alb-and-nlb) _alongside_ this reference architecture guide.\n\nFor `eksctl`, configuring the cluster and the node groups cannot happen simultaneously. You need to deploy the cluster control plane first, do modifications to the network stack (Calico), and then provision the node groups. This ensures you have the maximum number of pods available (110 in most cases) to run Gitpod workspaces.\n\nThe example `eksctl` config file includes services accounts that might not be relevant to a particular deployment, but are included for reference.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":279,"to":286}}}}],["2875",{"pageContent":"The example `eksctl` config file includes services accounts that might not be relevant to a particular deployment, but are included for reference.\n\n- `cert-manager` provided for the required cert-manager tooling. If using DNS-01 challenges for Let's Encrypt with a Route53 zone, then enable the cert-manager `wellKnownPolicies` or ensure one exists with permissions to modify records in the zone\n- `aws-load-balancer-controller` enables ELB creation for LoadBalancer services and integration with AWS Application Load Balancers\n- `cluster-autoscaler` connects to the AWS autoscaler\n- `ebs-csi-controller-sa` enables provisioning of the EBS volumes for PVC storage\n\nProvided below is a complete `eksctl` configuration file that will deploy all the components required for an EKS installation to support Gitpod. All references to a `gitpod-cluster.yaml` file refer to this reference.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":286,"to":293}}}}],["2876",{"pageContent":"`eksctl` will be configuring the VPC and networking along with creating the EKS cluster itself, if you need to use pre-existing networking provisioned by another team or department, refer to the [custom VPC documentation](https://eksctl.io/usage/vpc-networking/#use-existing-vpc-other-custom-configuration).\n\n<details>\n  <summary  class=\"text-p-medium\">Note on AMI Usage</summary>\n\nIn this reference example, the Ubuntu2004 AMI family is used instead of listing a specific AMI ID. This simplifies portability and allows for the use of the built-in bootstrap command instead of having to create a custom one. If you want to do more customization of your bootstrap command or use a static AMI, first, replace `amiFamily: Ubuntu2004` with `ami: ami-customid` where `ami-customid` is from Ubuntu's EKS AMI list or the output from the below command. You will then replace `preBootstrapCommands` with your bootstrap script under a new section labeled `overrideBootstrapCommand`.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":295,"to":300}}}}],["2877",{"pageContent":"```bash\naws ec2 describe-images --owners 099720109477 \\\n    --filters 'Name=name,Values=ubuntu-eks/k8s_1.22/images/*' \\\n    --query 'sort_by(Images,&CreationDate)[-1].ImageId' \\\n    --executable-users all \\\n    --output text --region us-west-2","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":302,"to":307}}}}],["2878",{"pageContent":"Refer to `eksctl`'s documentation on [AMI Family](https://eksctl.io/usage/custom-ami-support/) for more information on its behavior.\n\n</details>\n\n<br/>\n\n**`gitpod-cluster.yaml`**\n\n```yaml\napiVersion: eksctl.io/v1alpha5\nkind: ClusterConfig\nmetadata:\n  name: gitpod\n  region: eu-west-1\n  version: \"1.22\"\n  # update tags to ensure all generated resources have atleast these tags applied\n  tags:\n    department: demo\n    project: gitpod\n\niam:\n  withOIDC: true","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":310,"to":331}}}}],["2879",{"pageContent":"iam:\n  withOIDC: true\n\n  serviceAccounts:\n    - metadata:\n        name: aws-load-balancer-controller\n        namespace: kube-system\n      wellKnownPolicies:\n        awsLoadBalancerController: true\n    - metadata:\n        name: ebs-csi-controller-sa\n        namespace: kube-system\n      wellKnownPolicies:\n        ebsCSIController: true\n    - metadata:\n        name: cluster-autoscaler\n        namespace: kube-system\n      wellKnownPolicies:\n        autoScaler: true\n    - metadata:\n        name: cert-manager\n        namespace: cert-manager\n      wellKnownPolicies:\n        certManager: true\n    - metadata:\n        name: external-dns\n        namespace: external-dns\n      wellKnownPolicies:\n        externalDNS: true\n\n# Uncomment and update for your region if you wish to use fewer availability zones\n# availabilityZones:\n#   - eu-west-1a\n#   - eu-west-1b\n#   - eu-west-1c","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":331,"to":365}}}}],["2880",{"pageContent":"# Uncomment and update for your region if you wish to use fewer availability zones\n# availabilityZones:\n#   - eu-west-1a\n#   - eu-west-1b\n#   - eu-west-1c\n\n# By default we create a dedicated VPC for the cluster\n# You can use an existing VPC by supplying private and/or public subnets. Please check\n# https://eksctl.io/usage/vpc-networking/#use-existing-vpc-other-custom-configuration\nvpc:\n  autoAllocateIPv6: false\n  nat:\n    # For production environments use HighlyAvailable, for an initial deployment Single adequate\n    # HighlyAvailable will consume 3 Elastic IPs so ensure your region has capacity before using\n    # https://eksctl.io/usage/vpc-networking/#nat-gateway\n    gateway: Single","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":365,"to":380}}}}],["2881",{"pageContent":"# Cluster endpoints and public access\n  # Private access ensures that nodes can communicate internally in case of NAT failure\n  # For customizing for your environment review https://eksctl.io/usage/vpc-cluster-access/\n  clusterEndpoints:\n    privateAccess: true\n    publicAccess: true\n  publicAccessCIDRs: [\"0.0.0.0/0\"]\n\n# Logging settings\ncloudWatch:\n  clusterLogging:\n    enableTypes: [\"*\"]\n\n# Nodegroups / Compute settings\nmanagedNodeGroups:\n  - name: services\n    amiFamily: Ubuntu2004\n    spot: false\n    instanceTypes: [\"m6i.xlarge\"]\n    desiredCapacity: 2\n    minSize: 1\n    maxSize: 4\n    maxPodsPerNode: 110\n    disableIMDSv1: false\n    volumeSize: 300\n    volumeType: gp3\n    volumeIOPS: 6000\n    volumeThroughput: 500\n    ebsOptimized: true\n    privateNetworking: true\n    propagateASGTags: true","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":382,"to":412}}}}],["2882",{"pageContent":"iam:\n      attachPolicyARNs:\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly\n        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy\n        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy\n        - arn:aws:iam::aws:policy/ElasticLoadBalancingFullAccess\n        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore\n\n    tags:\n      k8s.io/cluster-autoscaler/enabled: \"true\"\n      # Important - If you change the name of your EKS cluster from the\n      # default cluster name (\"gitpod\"), update this tag to match\n      # your cluster (`k8s.io/cluster-autoscaler/<cluster-name>: \"owned\"`)\n      #\n      # For example: `k8s.io/cluster-autoscaler/gitpod-corp: \"owned\"`\n      k8s.io/cluster-autoscaler/gitpod: \"owned\"\n\n    labels:\n      gitpod.io/workload_meta: \"true\"\n      gitpod.io/workload_ide: \"true\"\n      gitpod.io/workload_workspace_services: \"true\"","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":414,"to":434}}}}],["2883",{"pageContent":"labels:\n      gitpod.io/workload_meta: \"true\"\n      gitpod.io/workload_ide: \"true\"\n      gitpod.io/workload_workspace_services: \"true\"\n\n    preBootstrapCommands:\n      - echo \"export USE_MAX_PODS=false\" >> /etc/profile.d/bootstrap.sh\n      - echo \"export CONTAINER_RUNTIME=containerd\" >> /etc/profile.d/bootstrap.sh\n      - sed -i '/^set -o errexit/a\\\\nsource /etc/profile.d/bootstrap.sh' /etc/eks/bootstrap.sh\n\n  - name: regular-workspaces\n    amiFamily: Ubuntu2004\n    spot: false\n    instanceTypes: [\"m6i.4xlarge\"]\n    desiredCapacity: 2\n    minSize: 1\n    maxSize: 50\n    maxPodsPerNode: 110\n    disableIMDSv1: false\n    volumeSize: 512\n    volumeType: gp3\n    volumeIOPS: 6000\n    volumeThroughput: 500\n    ebsOptimized: true\n    privateNetworking: true\n    propagateASGTags: true","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":434,"to":459}}}}],["2884",{"pageContent":"iam:\n      attachPolicyARNs:\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly\n        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy\n        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy\n        - arn:aws:iam::aws:policy/ElasticLoadBalancingFullAccess\n        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore\n\n    tags:\n      k8s.io/cluster-autoscaler/enabled: \"true\"\n      # Important - If you change the name of your EKS cluster from the\n      # default cluster name (\"gitpod\"), update the tag below to match\n      # your cluster (`k8s.io/cluster-autoscaler/<cluster-name>: \"owned\"`)\n      #\n      # For example: `k8s.io/cluster-autoscaler/gitpod-corp: \"owned\"`\n      k8s.io/cluster-autoscaler/gitpod: \"owned\"\n\n    labels:\n      gitpod.io/workload_workspace_regular: \"true\"","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":461,"to":479}}}}],["2885",{"pageContent":"labels:\n      gitpod.io/workload_workspace_regular: \"true\"\n\n    preBootstrapCommands:\n      - echo \"export USE_MAX_PODS=false\" >> /etc/profile.d/bootstrap.sh\n      - echo \"export CONTAINER_RUNTIME=containerd\" >> /etc/profile.d/bootstrap.sh\n      - sed -i '/^set -o errexit/a\\\\nsource /etc/profile.d/bootstrap.sh' /etc/eks/bootstrap.sh\n  - name: headless-workspaces\n    amiFamily: Ubuntu2004\n    spot: false\n    instanceTypes: [\"m6i.4xlarge\"]\n    desiredCapacity: 2\n    minSize: 1\n    maxSize: 50\n    maxPodsPerNode: 110\n    disableIMDSv1: false\n    volumeSize: 512\n    volumeType: gp3\n    volumeIOPS: 6000\n    volumeThroughput: 500\n    ebsOptimized: true\n    privateNetworking: true\n    propagateASGTags: true","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":479,"to":501}}}}],["2886",{"pageContent":"iam:\n      attachPolicyARNs:\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly\n        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy\n        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy\n        - arn:aws:iam::aws:policy/ElasticLoadBalancingFullAccess\n        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore\n\n    tags:\n      k8s.io/cluster-autoscaler/enabled: \"true\"\n      # Important - If you change the name of your EKS cluster from the\n      # default cluster name (\"gitpod\"), update the tag below to match\n      # your cluster (`k8s.io/cluster-autoscaler/<cluster-name>: \"owned\"`)\n      #\n      # For example: `k8s.io/cluster-autoscaler/gitpod-corp: \"owned\"`\n      k8s.io/cluster-autoscaler/gitpod: \"owned\"\n\n    labels:\n      gitpod.io/workload_workspace_headless: \"true\"","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":503,"to":521}}}}],["2887",{"pageContent":"labels:\n      gitpod.io/workload_workspace_headless: \"true\"\n\n    preBootstrapCommands:\n      - echo \"export USE_MAX_PODS=false\" >> /etc/profile.d/bootstrap.sh\n      - echo \"export CONTAINER_RUNTIME=containerd\" >> /etc/profile.d/bootstrap.sh\n      - sed -i '/^set -o errexit/a\\\\nsource /etc/profile.d/bootstrap.sh' /etc/eks/bootstrap.sh","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":521,"to":527}}}}],["2888",{"pageContent":"To ensure there are enough IPs and networking policy enforcement is in place, this reference architecture uses Calico for networking. To enable Calico in an EKS installation it must be done after the control plane has been provisioned and before the nodegroups have been created.\n\nFirst: Run `eksctl` with the `--without-nodegroup` flag to provision just the control plane defined in the `gitpod-cluster.yaml`:\n\n```bash\neksctl create cluster --without-nodegroup --config-file gitpod-cluster.yaml","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":530,"to":535}}}}],["2889",{"pageContent":"This should result in the following output:\n\n```bash\n2022-06-24 09:54:59 [ℹ]  eksctl version 0.102.0-dev+3229f126.2022-06-17T12:44:20Z\n2022-06-24 09:54:59 [ℹ]  using region eu-west-1\n2022-06-24 09:54:59 [ℹ]  setting availability zones to [eu-west-1c eu-west-1a eu-west-1b]\n2022-06-24 09:54:59 [ℹ]  subnets for eu-west-1c - public:192.168.0.0/19 private:192.168.96.0/19\n2022-06-24 09:54:59 [ℹ]  subnets for eu-west-1a - public:192.168.32.0/19 private:192.168.128.0/19\n2022-06-24 09:54:59 [ℹ]  subnets for eu-west-1b - public:192.168.64.0/19 private:192.168.160.0/19\n2022-06-24 09:54:59 [ℹ]  using Kubernetes version 1.22\n[...]\n2022-06-24 10:11:30 [✔]  EKS cluster \"gitpod\" in \"eu-west-1\" region is ready\n```\n\nAfter this command finishes, check that `eksctl` also created the kubeconfig properly by running the command `kubectl get pods -n kube-system`. If deployed correctly one should see the list of pods in a pending state.\n\n```bash\nkubectl get pods -n kube-system","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":538,"to":555}}}}],["2890",{"pageContent":"This should result in:\n\n```bash\nNAME                       READY   STATUS    RESTARTS   AGE\ncoredns-5947f47f5f-69lvv   0/1     Pending   0          26m\ncoredns-5947f47f5f-srm5t   0/1     Pending   0          26m\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":558,"to":564}}}}],["2891",{"pageContent":"Calico Installation\n\nThis is following the instructions provided by [Tigera](https://projectcalico.docs.tigera.io/getting-started/kubernetes/managed-public-cloud/eks).\n\nTo install Calico, first remove the default AWS-provided networking component:\n\n```bash\nkubectl delete daemonset -n kube-system aws-node\n```\n\nInstall the Calico manifest:\n\n```bash\nkubectl apply -f https://projectcalico.docs.tigera.io/manifests/calico-vxlan.yaml\n```\n\nNow configure Calico for EKS-specific support with the following command:\n\n```bash\nkubectl -n kube-system set env daemonset/calico-node FELIX_AWSSRCDSTCHECK=Disable\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":566,"to":586}}}}],["2892",{"pageContent":"Additional Network configuration\n\nTo use RDS in the VPC you will need security groups created and associated with the Services nodegroup before it is launched. RDS does not have to be deployed yet but an additional security group for the Services nodegroup needs to be created and added to your `gitpod-cluster.yaml` before continuing.\n\nGet the ID of the cluster `eksctl` just created. If you kept the tag `project=gitpod` in the `gitpod-cluster.yaml` file, retrieve the id and cidr block with:\n\n```bash\naws ec2 describe-vpcs --filters \"Name=tag:project,Values=gitpod\" --query 'Vpcs[*].[VpcId, CidrBlock]'\n```\n\nThis should result in:\n\n```bash\n[\n    [\n        \"<VPC ID similar to: vpc-09a109f23dad0a298>\",\n        \"192.168.0.0/16\"\n    ]\n]","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":588,"to":606}}}}],["2893",{"pageContent":"This should result in:\n\n```bash\n[\n    [\n        \"<VPC ID similar to: vpc-09a109f23dad0a298>\",\n        \"192.168.0.0/16\"\n    ]\n]\n```\n\nCreate the new security group (we do not need to have rules added to it yet) using the vpc-id from above, note how tags are auto-populated to the security group as well:\n\n```bash\naws ec2 create-security-group --description 'Gitpod Services Nodegroup' --group-name 'gitpod-services' \\\n--vpc-id <!add VPC ID from above here!> --tag-specifications 'ResourceType=security-group,Tags=[{Key=Name,Value=gitpod-services-sg},{Key=project,Value=gitpod},{Key=department,Value=demo}]'\n```\n\nThis should return something similar to:\n\n```bash\n{\n    \"GroupId\": \"<GroupID, similar to: sg-04b9a5f403307efe5>\",\n    \"Tags\": [\n        {\n            \"Key\": \"project\",\n            \"Value\": \"gitpod\"\n        },\n        {\n            \"Key\": \"department\",\n            \"Value\": \"demo\"\n        }\n    ]\n}","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":606,"to":639}}}}],["2894",{"pageContent":"Update your `gitpod-cluster.yaml` to add the `GroupId` from the previous command to the `securityGroups.attachIDs` list in the `services` `managedNodeGroups`:\n\n```yaml\nsecurityGroups:\n  attachIDs: [\"<Add your GroupId here, similar to: sg-04b9a5f403307efe5\"]\n```\n\nStore the `GroupID` for easier reuse when creating the RDS instance later in this guide:\n\n```bash\nexport SERVICES_SECURITYGROUP_ID=\"<add GroupID from above here, similar to: sg-04b9a5f403307efe5>\"\n```\n\nIf you destroy this cluster and recreate it, you will need to redo the above step as the old security group would have been deleted along with the VPC.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":642,"to":655}}}}],["2895",{"pageContent":"SSH Access to nodegroups\n\n`eksctl` allows for [ssh keys](https://eksctl.io/usage/schema/#managedNodeGroups-ssh) to be added to your nodegroups for troubleshooting. By default, the `gitpod-cluster.yaml` does not configure this. AWS Systems Manager is enabled by default, allowing for connectivity [through multiple methods](https://docs.aws.amazon.com/systems-manager/latest/userguide/session-manager-working-with-sessions-start.html) to each instance in your nodegroup.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":657,"to":659}}}}],["2896",{"pageContent":"Create nodegroups\n\nTo ensure that if there are problems deploying the services nodegroup (you provided an incorrect security group ID for example) it can be deleted easily and not require having to delete a partially deployed workspaces nodegroup, create it before the workspaces nodegroup.\n\nCreate the services nodegroups with `eksctl create nodegroup --include=services --config-file gitpod-cluster.yaml`:\n\n```bash\neksctl create nodegroup --include=services --config-file gitpod-cluster.yaml","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":661,"to":668}}}}],["2897",{"pageContent":"This should result in:\n\n```bash\n2022-06-24 13:42:01 [ℹ]  nodegroup \"services\" will use \"ami-0793b4124359a6ad7\" [Ubuntu2004/1.22]\n2022-06-24 13:42:01 [ℹ]  nodegroup \"regular-workspaces\" will use \"ami-0793b4124359a6ad7\" [Ubuntu2004/1.22]\n2022-06-24 13:42:01 [ℹ]  nodegroup \"headless-workspaces\" will use \"ami-0793b4124359a6ad7\" [Ubuntu2004/1.22]\n2022-06-24 13:42:03 [ℹ]  combined include rules: services\n2022-06-24 13:42:03 [ℹ]  1 nodegroup (services) was included (based on the include/exclude rules)\n2022-06-24 13:42:03 [ℹ]  will create a CloudFormation stack for each of 1 managed nodegroups in cluster \"gitpod\"\n[...]\n2022-06-24 13:46:22 [✔]  created 1 managed nodegroup(s) in cluster \"gitpod\"\n2022-06-24 13:46:24 [ℹ]  checking security group configuration for all nodegroups\n2022-06-24 13:46:24 [ℹ]  all nodegroups have up-to-date cloudformation templates","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":671,"to":683}}}}],["2898",{"pageContent":"Create the workspaces nodegroups second if the services are deployed correctly.\n\n```bash\neksctl create nodegroup --include=regular-workspaces,headless-workspaces --config-file gitpod-cluster.yaml","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":686,"to":689}}}}],["2899",{"pageContent":"```bash\n2022-06-24 13:55:08 [ℹ]  nodegroup \"services\" will use \"ami-0793b4124359a6ad7\" [Ubuntu2004/1.22]\n2022-06-24 13:55:08 [ℹ]  nodegroup \"regular-workspaces\" will use \"ami-0793b4124359a6ad7\" [Ubuntu2004/1.22]\n2022-06-24 13:55:08 [ℹ]  nodegroup \"headless-workspaces\" will use \"ami-0793b4124359a6ad7\" [Ubuntu2004/1.22]\n2022-06-24 13:55:13 [ℹ]  1 existing nodegroup(s) (services) will be excluded\n2022-06-24 13:55:13 [ℹ]  combined include rules: regular-workspaces,headless-workspaces\n2022-06-24 13:55:13 [ℹ]  2 nodegroups (headless-workspaces, regular-workspaces) were included (based on the include/exclude rules)\n2022-06-24 13:55:13 [ℹ]  will create a CloudFormation stack for each of 2 managed nodegroups in cluster \"gitpod\"\n[...]\n2022-06-24 13:59:10 [✔]  created 2 managed nodegroup(s) in cluster \"gitpod\"\n2022-06-24 13:59:13 [ℹ]  checking security group configuration for all nodegroups\n2022-06-24 13:59:13 [ℹ]  all nodegroups have up-to-date cloudformation templates","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":692,"to":703}}}}],["2900",{"pageContent":"You can verify that your installation was deployed properly with the custom `kubectl` command provided below which will let you review maxpods, kernel and containerd versions to ensure they are meeting [our minimum requirements](../../latest/requirements) as intended.\n\n```bash\nkubectl get nodes -o=custom-columns=\"NAME:.metadata.name,\\\nNODEGROUP:.metadata.labels.eks\\.amazonaws\\.com/nodegroup,\\\nRUNTIME:.status.nodeInfo.containerRuntimeVersion,\\\nMAXPODS:.status.capacity.pods,\\\nKERNEL:.status.nodeInfo.kernelVersion,\\\nAMIFAMILY:.status.nodeInfo.osImage,\\\nK8S:.status.nodeInfo.kubeletVersion,\\\nInstance-ID:.spec.providerID\"\n```\n\nBecause of how EKS launches instances, coredns may end up running on a single node, which is against best practices. Before continuing to the next steps, restart coredns to ensure it is running on two nodes.\n\n```bash\nkubectl rollout restart deployment.apps/coredns -n kube-system\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":706,"to":723}}}}],["2901",{"pageContent":"Enable cluster autoscaling\n\nGitpod's resource usage will vary depending on the number of active workspaces and image prebuilds during the day. The use of a cluster autoscaler is recommended to scale EKS nodes on demand and thus minimize the cost you pay.\n\n```bash\nCLUSTER_NAME=\"gitpod\"\nAWS_REGION=\"eu-west-1\"","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":725,"to":731}}}}],["2902",{"pageContent":"```bash\nCLUSTER_NAME=\"gitpod\"\nAWS_REGION=\"eu-west-1\"\n\nhelm repo add autoscaler https://kubernetes.github.io/autoscaler\nhelm repo update\nhelm upgrade \\\n    --atomic \\\n    --cleanup-on-fail \\\n    --install \\\n    --namespace kube-system \\\n    --reset-values \\\n    --wait \\\n    --set cloudProvider=aws \\\n    --set awsRegion=$AWS_REGION \\\n    --set autoDiscovery.clusterName=$CLUSTER_NAME \\\n    --set rbac.serviceAccount.create=false \\\n    --set rbac.serviceAccount.name=cluster-autoscaler \\\n    --set securityContext.fsGroup=65534 \\\n    --set extraArgs.skip-nodes-with-local-storage=false \\\n    --set extraArgs.skip-nodes-with-system-pods=false \\\n    --set extraArgs.expander=least-waste \\\n    --set extraArgs.balance-similar-node-groups=true \\\n    --set extraArgs.scale-down-utilization-threshold=0.2 \\\n    --set extraArgs.v=2 \\\n    autoscaler autoscaler/cluster-autoscaler\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":731,"to":757}}}}],["2903",{"pageContent":"Deleting the cluster\n\nIn the future to delete this cluster any additional resources added to the VPC will need to be deleted before deleting the cluster, otherwise, cloudformations will fail to delete the VPC and complete deleting the cluster. The alternative is to create a VPC managed separately and install EKS using the additions for working [with existing VPCs](https://eksctl.io/usage/vpc-networking/#use-existing-vpc-other-custom-configuration) in `eksctl`.\n\nThe order resources to delete if created:\n\n- RDS First\n- RDS security group\n- Services Nodegroup\n- Services security group\n- eksctl delete cluster\n\nFull removal of these installed components would look something like this (commands are grouped for brevity):\n\n```bash","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":759,"to":773}}}}],["2904",{"pageContent":"delete RDS resources\naws rds delete-db-instance --db-instance-identifier gitpod-instance --skip-final-snapshot --delete-automated-backups\naws ec2 delete-security-group --group-id sg-0e538ccac25bb1387\naws rds delete-db-subnet-group --db-subnet-group-name gitpod-rds\n\n#### delete the services node group\neksctl delete nodegroup --name services --cluster gitpod --disable-eviction --parallel 4 --max-grace-period 0s --wait\n\n#### delete the security group added for rds\naws ec2 delete-security-group --group-id sg-04b9a5f403307efe5\neksctl delete cluster --name gitpod --force --disable-nodegroup-eviction --wait\n\n#### The following removal steps are optional; if you plan on creating another Gitpod installation then the S3 bucket,\n#### access account, key, and policy can be kept for later use.\n\n#### delete s3 resources\naws s3 rm s3://${S3_BUCKET_NAME} --recursive\naws s3 rb s3://${S3_BUCKET_NAME} --force","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":774,"to":791}}}}],["2905",{"pageContent":"delete iam resources\naws iam detach-user-policy --user-name gitpod-s3-access --policy-arn 'arn:aws:iam::12344:policy/gitpod_s3_access_policy'\n\n# delete access keys:\naws iam list-access-keys --user-name gitpod-s3-access\naws iam delete-access-key --user-name gitpod-s3-access --access-key-id AKI---------\naws iam delete-user --user-name gitpod-s3-access\n\n# ensure that nothing else is attached to this policy\naws iam list-entities-for-policy --policy-arn 'arn:aws:iam::12344:policy/gitpod_s3_access_policy'\naws iam delete-policy --policy-arn 'arn:aws:iam::12344:policy/gitpod_s3_access_policy'","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":793,"to":803}}}}],["2906",{"pageContent":"</div>\n\n<div slot=\"azure\">\n\nThis section will create a Kubernetes cluster based on the latest supported version of AKS, create node pools for Gitpod services, regular workspaces, and headless workspaces, and will fetch cluster credentials.\n\nFirst, determine the latest version of AKS suitable for Gitpod.\n\n> Gitpod supports Kubernetes 1.21 or later, but using the latest supported version of AKS is recommended.\n\n```bash\nAKS_VERSION=$(az aks get-versions \\\n    --location $LOCATION \\\n    --query \"orchestrators[?contains(orchestratorVersion, '1.24.')].orchestratorVersion | [-1]\" -o tsv)","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":806,"to":819}}}}],["2907",{"pageContent":"Create the AKS cluster and a default node pool. Gitpod services and other supporting components will run on this node pool.\n\n```bash\naz aks create \\\n    --name \"${CLUSTER_NAME}\" \\\n    --nodepool-name \"services\" \\\n    --location \"${LOCATION}\" \\\n    --resource-group \"${RESOURCE_GROUP}\" \\\n    --kubernetes-version \"${AKS_VERSION}\" \\\n    --network-plugin kubenet \\\n    --network-policy calico \\\n    --enable-cluster-autoscaler \\\n    --enable-managed-identity \\\n    --min-count \"1\" \\\n    --max-count \"4\" \\\n    --max-pods \"110\" \\\n    --node-osdisk-size \"100\" \\\n    --node-vm-size \"Standard_D4_v4\" \\\n    --nodepool-labels \\\n        gitpod.io/workload_meta=true \\\n        gitpod.io/workload_ide=true \\\n        gitpod.io/workload_workspace_services=true \\\n    --no-ssh-key \\\n    --vm-set-type \"VirtualMachineScaleSets\"","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":822,"to":845}}}}],["2908",{"pageContent":"Create a node pool for regular workspaces.\n\n```bash\naz aks nodepool add \\\n    --name \"regularws\" \\\n    --cluster-name \"${CLUSTER_NAME}\" \\\n    --resource-group \"${RESOURCE_GROUP}\" \\\n    --kubernetes-version \"${AKS_VERSION}\" \\\n    --labels gitpod.io/workload_workspace_regular=true \\\n    --enable-cluster-autoscaler \\\n    --min-count \"1\" \\\n    --max-count \"50\" \\\n    --max-pods \"110\" \\\n    --node-osdisk-size \"512\" \\\n    --node-vm-size \"Standard_D16_v4\"\n```\n\nCreate a node pool for headless workspaces.\n\n```bash\naz aks nodepool add \\\n    --name \"headlessws\" \\\n    --cluster-name \"${CLUSTER_NAME}\" \\\n    --resource-group \"${RESOURCE_GROUP}\" \\\n    --kubernetes-version \"${AKS_VERSION}\" \\\n    --labels gitpod.io/workload_workspace_headless=true \\\n    --enable-cluster-autoscaler \\\n    --node-count \"1\" \\\n    --min-count \"1\" \\\n    --max-count \"50\" \\\n    --max-pods \"110\" \\\n    --node-osdisk-size \"512\" \\\n    --node-vm-size \"Standard_D16_v4\"","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":848,"to":880}}}}],["2909",{"pageContent":"After the cluster and node pools have been created, fetch the AKS credentials. These credentials will be used to install external-dns, cert-manager, and install Gitpod itself.\n\n```bash\naz aks get-credentials \\\n    --name \"${CLUSTER_NAME}\" \\\n    --resource-group \"${RESOURCE_GROUP}\" \\\n    --overwrite-existing\n```\n\n</div>\n\n</CloudPlatformToggle>","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":883,"to":894}}}}],["2910",{"pageContent":"---\nlayout: false\n---\n\n<script lang=\"ts\">\n  import CloudPlatformToggle from \"$lib/components/docs/cloud-platform-toggle.svelte\";\n</script>\n\nGitpod uses a **relational database management system** to store structural data. Gitpod supports MySQL. The database is a central component in Gitpod where all metadata about users and workspaces as well as settings of the Gitpod instance (such as auth providers) are stored. That makes the database a critical component. In case of a database outage, you will not be able to log in, use the Gitpod dashboard, or start workspaces.\n\nIn this reference architecture, we use managed MYSQL databases provided by cloud providers.\n\n> Gitpod requires your database instance to have a database named `gitpod` in it.\n\n<CloudPlatformToggle id=\"cloud-platform-toggle-database\">\n<div slot=\"gcp\">\n\nAs a relational database, we create a [Google Cloud SQL instance](https://cloud.google.com/sql) with MySQL 5.7. Use the following commands to create the database instance:","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/database","loc":{"lines":{"from":1,"to":18}}}}],["2911",{"pageContent":"As a relational database, we create a [Google Cloud SQL instance](https://cloud.google.com/sql) with MySQL 5.7. Use the following commands to create the database instance:\n\n```bash\nMYSQL_INSTANCE_NAME=gitpod-mysql\ngcloud sql instances create \"${MYSQL_INSTANCE_NAME}\" \\\n    --database-version=MYSQL_5_7 \\\n    --storage-size=20 \\\n    --storage-auto-increase \\\n    --tier=db-n1-standard-2 \\\n    --region=\"${REGION}\" \\\n    --replica-type=FAILOVER \\\n    --enable-bin-log\n\ngcloud sql instances patch \"${MYSQL_INSTANCE_NAME}\" --database-flags \\\n            explicit_defaults_for_timestamp=off","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/database","loc":{"lines":{"from":18,"to":32}}}}],["2912",{"pageContent":"After that, we create the database named `gitpod` as well as a dedicated Gitpod database user with a random password.\n\n```bash\ngcloud sql databases create gitpod --instance=\"${MYSQL_INSTANCE_NAME}\"\n\nMYSQL_GITPOD_USERNAME=gitpod\nMYSQL_GITPOD_PASSWORD=$(openssl rand -base64 20)\ngcloud sql users create \"${MYSQL_GITPOD_USERNAME}\" \\\n    --instance=\"${MYSQL_INSTANCE_NAME}\" \\\n    --password=\"${MYSQL_GITPOD_PASSWORD}\"\n```\n\nFinally, you need to create a service account that has the `roles/cloudsql.client` role:\n\n```bash\nMYSQL_SA=gitpod-mysql\nMYSQL_SA_EMAIL=\"${MYSQL_SA}\"@\"${PROJECT_NAME}\".iam.gserviceaccount.com\ngcloud iam service-accounts create \"${MYSQL_SA}\" --display-name \"${MYSQL_SA}\"\ngcloud projects add-iam-policy-binding \"${PROJECT_NAME}\" \\\n    --member serviceAccount:\"${MYSQL_SA_EMAIL}\" --role=\"roles/cloudsql.client\"","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/database","loc":{"lines":{"from":35,"to":54}}}}],["2913",{"pageContent":"Save the service account key to the file `./mysql-credentials.json`:\n\n```bash\ngcloud iam service-accounts keys create --iam-account \"${MYSQL_SA_EMAIL}\" \\\n    ./mysql-credentials.json\n```\n\n</div>\n<div slot=\"aws\">\n\nWe will create an RDS MySQL `db.m5g.large` instance running MySQL 5.7. Before deploying an RDS instance, additional configuration has to be done to the VPC created by the `eksctl` command:","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/database","loc":{"lines":{"from":57,"to":67}}}}],["2914",{"pageContent":"Create an RDS security group\n\nFirst, find the subnet IDs for the public subnets in your environment. For deploying RDS in private subnets replace true with false in the below command:\n\n```bash\naws ec2 describe-subnets \\\n    --filters \"Name=tag:project,Values=gitpod\" \\\n    --query 'Subnets[?MapPublicIpOnLaunch==`true`] | [*].[SubnetId, AvailabilityZone, CidrBlock, MapPublicIpOnLaunch]'\n```\n\nThis should give you an output similar to the following:\n\n```bash\n[\n    [\n        \"<SubnetID, similar to: subnet-0686443f3f2782453>\",\n        \"eu-west-1a\",\n        \"192.168.64.0/19\",\n        true\n    ],\n    [\n        \"<SubnetID, similar to: subnet-010ea25d0e398f6df>\",\n        \"eu-west-1c\",\n        \"192.168.0.0/19\",\n        true\n    ],\n    [\n        \"<SubnetID, similar to: subnet-0f0370a5697d85df2>\",\n        \"eu-west-1b\",\n        \"192.168.32.0/19\",\n        true\n    ]\n]","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/database","loc":{"lines":{"from":69,"to":101}}}}],["2915",{"pageContent":"Using the three subnet IDs, create an RDS subnet group, with the name `gitpod-rds`:\n\n```bash\naws rds create-db-subnet-group \\\n    --db-subnet-group-name gitpod-rds \\\n    --db-subnet-group-description \"Subnet for the Gitpod RDS deployment in VPC\" \\\n    --subnet-ids '[ \"<SubnetID 1 from above, similar to: subnet-0686443f3f2782453>\", \"SubnetID 2 from above, similar to: subnet-010ea25d0e398f6df>\", \"SubnetID 3 from above, similar to: subnet-0f0370a5697d85df2>\" ]' \\\n    --tags Key=project,Value=gitpod\n```\n\nNow you will need to create a security group for the RDS instance, running a similar command as before. Note you can get your vpc-id via:\n\n```bash\naws ec2 describe-vpcs --filters \"Name=tag:project,Values=gitpod\" --query 'Vpcs[*].[VpcId, CidrBlock]'","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/database","loc":{"lines":{"from":104,"to":117}}}}],["2916",{"pageContent":"Create the security group for the RDS instance:\n\n```bash\naws ec2 create-security-group --description 'Gitpod RDS' --group-name 'gitpod-rds' \\\n    --vpc-id <your VPC ID, similar to: vpc-09a109f23dad0a298> \\\n    --tag-specifications 'ResourceType=security-group,Tags=[{Key=Name,Value=gitpod-rds-sg},{Key=project,Value=gitpod},{Key=department,Value=demo}]'\n```\n\nThis should return an output that is similar to:\n\n```bash\n{\n    \"GroupId\": \"<GroupID similar to: sg-0e538ccac25bb1387>\",\n    \"Tags\": [\n        {\n            \"Key\": \"project\",\n            \"Value\": \"gitpod\"\n        },\n        {\n            \"Key\": \"department\",\n            \"Value\": \"demo\"\n        }\n    ]\n}","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/database","loc":{"lines":{"from":120,"to":143}}}}],["2917",{"pageContent":"You can now update the ingress policy for the RDS group to allow for incoming connections from the Services nodegroup on port 3306, the MySQL port. This uses the services security group ID stored in an environment variable in the cluster section above:\n\n```bash\naws ec2 authorize-security-group-ingress \\\n    --group-id <RDS securitygroup ID from above> \\\n    --protocol tcp --port 3306 \\\n    --source-group ${SERVICES_SECURITYGROUP_ID}\\\n    --tag-specifications 'ResourceType=security-group-rule,Tags=[{Key=Name,Value=rds-access},{Key=project,Value=gitpod},{Key=department,Value=demo}]'\n```\n\nNow you can create a password to use for MySQL. This will be required for the creation of the RDS instance and later for use by the Gitpod installer:\n\n```bash\nexport MYSQL_GITPOD_PW=$(openssl rand -hex 18)\necho $MYSQL_GITPOD_PW","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/database","loc":{"lines":{"from":146,"to":160}}}}],["2918",{"pageContent":"Now you can create the [Multi-AZ RDS instance](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.MultiAZSingleStandby.html) using the MySQL password, the security group, and RDS subnet you created in the previous steps:\n\n```bash\naws rds create-db-instance \\\n    --db-name gitpod \\\n    --db-instance-identifier gitpod-instance \\\n    --db-instance-class db.m5.large \\\n    --db-subnet-group-name gitpod-rds \\\n    --vpc-security-group-ids sg-0e538ccac25bb1387 \\\n    --multi-az \\\n    --engine mysql \\\n    --allocated-storage 20 \\\n    --max-allocated-storage 120 \\\n    --master-username gitpod \\\n    --master-user-password $MYSQL_GITPOD_PW \\\n    --engine-version 5.7 \\\n    --tags Key=project,Value=gitpod Key=Name,Value=Gitpod-MySQLDB,Key=department,Value=demo","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/database","loc":{"lines":{"from":163,"to":179}}}}],["2919",{"pageContent":"This should return an output similar to the following:\n\n```bash\n{\n    \"DBInstance\": {\n        \"DBInstanceIdentifier\": \"gitpod-instance\",\n        \"DBInstanceClass\": \"db.m5.large\",\n        \"Engine\": \"mysql\",\n        \"DBInstanceStatus\": \"creating\",\n        \"MasterUsername\": \"gitpod\",\n        \"DBName\": \"gitpod\",\n        \"AllocatedStorage\": 20,\n        \"PreferredBackupWindow\": \"22:11-22:41\",\n        \"BackupRetentionPeriod\": 1,\n        \"DBSecurityGroups\": [],\n        \"VpcSecurityGroups\": [\n[...]\n```\n\nTo check whether instance creation has compeleted, and to retrieve the URL to use, run this command:\n\n```bash\naws rds describe-db-instances \\\n    --db-instance-identifier gitpod-instance \\\n    --query 'DBInstances[0].[DBInstanceStatus,Endpoint.Address]'\n```\n\nReturning:\n\n```bash\n[\n    \"modifying\",\n    \"<instance endpoint, similar to: gitpod-instance.coynfywwqpjg.eu-west-1.rds.amazonaws.com>\"\n]","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/database","loc":{"lines":{"from":182,"to":215}}}}],["2920",{"pageContent":"Returning:\n\n```bash\n[\n    \"modifying\",\n    \"<instance endpoint, similar to: gitpod-instance.coynfywwqpjg.eu-west-1.rds.amazonaws.com>\"\n]\n```\n\nStore the MySQL instance endpoint for later use in the Gitpod installer:\n\n```bash\nexport MYSQL_RDS_ENDPOINT=\"$(aws rds describe-db-instances --db-instance-identifier gitpod-instance --query 'DBInstances[0].Endpoint.Address' --output text)\"","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/database","loc":{"lines":{"from":215,"to":227}}}}],["2921",{"pageContent":"</div>\n\n<div slot=\"azure\">\n\nThis section will create an Azure MySQL server instance and database for Gitpod. This external database is required to run a Gitpod cluster for production purposes. Using a dedicated MySQL instance for Gitpod is recommended but a pre-existing MySQL instance may be used if it can host databases named `gitpod` and `gitpod-sessions`.\n\nFirst, set a MySQL server name. Azure MySQL server names must be universally unique; we recommend using a random value to avoid conflicts. Note this value for later use.\n\n```bash\nexport MYSQL_INSTANCE_NAME=\"gitpod$(openssl rand -hex 4)\"\necho \"$MYSQL_INSTANCE_NAME\"\n```\n\nSet the gitpod MySQL username and password. The username of `gitpod` is recommended but is not required.\n\n```bash\nexport MYSQL_GITPOD_USERNAME=\"gitpod\"\nexport MYSQL_GITPOD_PASSWORD=$(openssl rand -base64 20)\necho \"$MYSQL_GITPOD_PASSWORD\"","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/database","loc":{"lines":{"from":230,"to":248}}}}],["2922",{"pageContent":"With the generated instance name and password, create the Azure MySQL server.\n\n```bash\n az mysql server create \\\n    --name \"${MYSQL_INSTANCE_NAME}\" \\\n    --resource-group \"${RESOURCE_GROUP}\" \\\n    --location \"${LOCATION}\" \\\n    --admin-user \"${MYSQL_USERNAME}\" \\\n    --admin-password \"${MYSQL_GITPOD_PASSWORD}\" \\\n    --auto-grow Enabled \\\n    --public Enabled \\\n    --sku-name GP_Gen5_2 \\\n    --ssl-enforcement Disabled \\\n    --storage-size 20480 \\\n    --version \"5.7\"\n```\n\nAfter creating the MySQL server create a database called `gitpod`. When Gitpod is installed it will create an additional database called `gitpod-sessions`.\n\n```bash\naz mysql db create \\\n  --name gitpod \\\n  --resource-group \"${RESOURCE_GROUP}\" \\\n  --server-name \"${MYSQL_INSTANCE_NAME}\"","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/database","loc":{"lines":{"from":251,"to":274}}}}],["2923",{"pageContent":"Create a MySQL firewall rule allowing access from your AKS cluster to the MySQL database.\n\n> 💡 MySQL firewall rules with a start IP address of `0.0.0.0` and an end IP address of `0.0.0.0` restrict access to Azure resources. This is necessary to allow your Kubernetes cluster to connect to the database.\n> See the [Azure MySQL firewall API documentation](https://docs.microsoft.com/en-us/azure/mysql/single-server/concepts-firewall-rules#connecting-from-azure) for more information.\n\n```bash\naz mysql server firewall-rule create \\\n --name \"Azure_Resources\" \\\n --server-name \"${MYSQL_INSTANCE_NAME}\" \\\n --resource-group \"${RESOURCE_GROUP}\" \\\n --start-ip-address \"0.0.0.0\" \\\n --end-ip-address \"0.0.0.0\"\n```\n\n</div>\n\n</CloudPlatformToggle>","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/database","loc":{"lines":{"from":277,"to":293}}}}],["2924",{"pageContent":"---\nlayout: false\n---\n\n<script lang=\"ts\">\n  import CloudPlatformToggle from \"$lib/components/docs/cloud-platform-toggle.svelte\";\n</script>\n\nCongratulations. You have set up your cluster. Now, you are ready to install Gitpod. Follow the instructions in the [installation guide](../installing-gitpod#install-gitpod).\n\n<CloudPlatformToggle id=\"cloud-platform-toggle-install\">\n<div slot=\"gcp\">\n\nIf you followed the steps to create your infrastructure on GCP of this guide, you need to use the following config settings for your Gitpod installation:\n\n| General settings |                         |\n| ---------------- | ----------------------- |\n| Domain name      | value of `$DOMAIN_NAME` |\n\nUn-select the in-cluster container registry checkbox.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/install","loc":{"lines":{"from":1,"to":20}}}}],["2925",{"pageContent":"| Container registry          |                                                                                                          |\n| --------------------------- | -------------------------------------------------------------------------------------------------------- |\n| In-cluster                  | no                                                                                                       |\n| Container registry URL      | `gcr.io/${PROJECT_NAME}/gitpod`<br/>(replace `${PROJECT_NAME}` with your GCP project name)               |\n| Container registry server   | `gcr.io`                                                                                                 |\n| Container registry username | `_json_key`                                                                                              |\n| Container registry password | Content of file `./gs-credentials.json`<br/>Remove linebreaks, e.g. with `jq -c . ./gs-credentials.json` |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/install","loc":{"lines":{"from":22,"to":28}}}}],["2926",{"pageContent":"Un-select the in-cluster MySQL checkbox.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/install","loc":{"lines":{"from":30,"to":30}}}}],["2927",{"pageContent":"| Database                 |                                                                                              |\n| ------------------------ | -------------------------------------------------------------------------------------------- |\n| In-cluster               | no                                                                                           |\n| Google Cloud SQL Proxy   | yes                                                                                          |\n| CloudSQL connection name | `${PROJECT_NAME}:${REGION}:${MYSQL_INSTANCE_NAME}`<br/>Replace variables with actual values! |\n| Username                 | value of `${MYSQL_GITPOD_USERNAME}`                                                          |\n| Password                 | value of `${MYSQL_GITPOD_PASSWORD}`                                                          |\n| GCP service account key  | Upload file `./mysql-credentials.json`                                                       |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/install","loc":{"lines":{"from":32,"to":39}}}}],["2928",{"pageContent":"Select `GCP` as object storage provider.\n\n| Object storage      |                                     |\n| ------------------- | ----------------------------------- |\n| Storage provider    | GCP                                 |\n| Storage region      | value of `${REGION}`                |\n| Project ID          | value of `${PROJECT_NAME}`          |\n| Service account key | Upload file `./gs-credentials.json` |\n\nKeep cert-manager selected for the TLS certificates options.\n\n| TLS certificates            |                         |\n| --------------------------- | ----------------------- |\n| Self-signed TLS certificate | no                      |\n| cert-manager                | yes                     |\n| Issuer name                 | `gitpod-issuer`         |\n| Issuer type                 | Select “cluster issuer” |\n\n</div>\n\n<div slot=\"aws\">","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/install","loc":{"lines":{"from":41,"to":61}}}}],["2929",{"pageContent":"</div>\n\n<div slot=\"aws\">\n\nIf you followed the steps to create your infrastructure on the AWS portion of this guide, you need to use the following config settings for your Gitpod installation:\n\n| General Settings |                         |\n| ---------------- | ----------------------- |\n| Domain name      | value of `$DOMAIN_NAME` |\n\nSelect the in-cluster registry checkbox, and select the **S3** storage provider.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/install","loc":{"lines":{"from":61,"to":71}}}}],["2930",{"pageContent":"Select the in-cluster registry checkbox, and select the **S3** storage provider.\n\n| Container registry |                                                                                                      |\n| ------------------ | ---------------------------------------------------------------------------------------------------- |\n| Storage region     | The S3 bucket region (such as `eu-west-1`)                                                           |\n| Storage endpoint   | `s3.${S3_BUCKET_REGION}.amazonaws.com`<br/>(Replace `${S3_BUCKET_REGION}` with the s3 bucket region) |\n| S3 bucket name     | value of `${S3_BUCKET_NAME}`                                                                         |\n| S3 access key      | value of `AccessKeyId`                                                                               |\n| S3 secret key      | value of `SecretAccessKey`                                                                           |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/install","loc":{"lines":{"from":71,"to":79}}}}],["2931",{"pageContent":"Unselect the **Use MySQL in-cluster** checkbox and also make sure that the **Use Google Cloud SQL Proxy** checkbox is not selected.\n\n| Database |                                  |\n| -------- | -------------------------------- |\n| Hostname | value of `${MYSQL_RDS_ENDPOINT}` |\n| Username | `gitpod`                         |\n| Password | value of `${MYSQL_GITPOD_PW}`    |\n\nSelect **S3** as the object storage provider.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/install","loc":{"lines":{"from":81,"to":89}}}}],["2932",{"pageContent":"Select **S3** as the object storage provider.\n\n| Object storage   |                                                                                                      |\n| ---------------- | ---------------------------------------------------------------------------------------------------- |\n| Storage region   | The S3 bucket region (such as `eu-west-1`)                                                           |\n| Storage endpoint | `s3.${S3_BUCKET_REGION}.amazonaws.com`<br/>(Replace `${S3_BUCKET_REGION}` with the s3 bucket region) |\n| S3 bucket name   | value of `${S3_BUCKET_NAME}`                                                                         |\n| S3 access key    | value of `AccessKeyId`                                                                               |\n| S3 secret key    | value of `SecretAccessKey`                                                                           |\n\nKeep cert-manager selected for the TLS certificates options.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/install","loc":{"lines":{"from":89,"to":99}}}}],["2933",{"pageContent":"Keep cert-manager selected for the TLS certificates options.\n\n| TLS certificates            |                         |\n| --------------------------- | ----------------------- |\n| Self-signed TLS certificate | no                      |\n| cert-manager                | yes                     |\n| Issuer name                 | `gitpod-issuer`         |\n| Issuer type                 | Select “cluster issuer” |\n\n</div>\n\n<div slot=\"azure\">\n\nIf you followed the steps to create your infrastructure on the Azure portion of this guide, use the following config settings for your Gitpod installation:\n\n| General Settings |                         |\n| ---------------- | ----------------------- |\n| Domain name      | value of `$DOMAIN_NAME` |\n\nUn-select the in-cluster container registry checkbox.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/install","loc":{"lines":{"from":99,"to":118}}}}],["2934",{"pageContent":"| General Settings |                         |\n| ---------------- | ----------------------- |\n| Domain name      | value of `$DOMAIN_NAME` |\n\nUn-select the in-cluster container registry checkbox.\n\n| Container registry          |                                       |\n| --------------------------- | ------------------------------------- |\n| In-cluster                  | no                                    |\n| Container registry URL      | Value of `${AZURE_REGISTRY_URL}`      |\n| Container registry server   | Leave empty                           |\n| Container registry username | Value of `${AZURE_REGISTRY_USERNAME}` |\n| Container registry password | Value of `${AZURE_REGISTRY_PASSWORD}` |\n\nUn-select the in-cluster MySQL checkbox.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/install","loc":{"lines":{"from":118,"to":132}}}}],["2935",{"pageContent":"| Database                 |                                                                                                                        |\n| ------------------------ | ---------------------------------------------------------------------------------------------------------------------- |\n| In-cluster               | no                                                                                                                     |\n| Google Cloud SQL Proxy   | unchecked                                                                                                              |\n| Host                     | `${MYSQL_INSTANCE_NAME}.mysql.database.azure.com` <br/>(Replace `${MYSQL_INSTANCE_NAME}` with the Azure database name) |\n| Username                 | Value of `${MYSQL_GITPOD_USERNAME}@${MYSQL_INSTANCE_NAME}`                                                             |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/install","loc":{"lines":{"from":134,"to":139}}}}],["2936",{"pageContent":"| Username                 | Value of `${MYSQL_GITPOD_USERNAME}@${MYSQL_INSTANCE_NAME}`                                                             |\n| Password                 | value of `${MYSQL_GITPOD_PASSWORD}`                                                                                    |\n| Password                 | Use default value (`3306`)                                                                                             |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/install","loc":{"lines":{"from":139,"to":141}}}}],["2937",{"pageContent":"Select **Azure** as the object storage provider.\n\n| Object storage   |                                                                                                      |\n| ---------------- | ---------------------------------------------------------------------------------------------------- |\n| Storage region   | value of `${LOCATION}`                                                                               |\n| Account name     | value of `${STORAGE_ACCOUNT_NAME}`                                                                   |\n| Access key       | value of `${STORAGE_ACCOUNT_KEY}`                                                                    |\n\nKeep cert-manager selected for the TLS certificates options.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/install","loc":{"lines":{"from":143,"to":151}}}}],["2938",{"pageContent":"Keep cert-manager selected for the TLS certificates options.\n\n| TLS certificates            |                         |\n| --------------------------- | ----------------------- |\n| Self-signed TLS certificate | no                      |\n| cert-manager                | yes                     |\n| Issuer name                 | `gitpod-issuer`         |\n| Issuer type                 | Select “cluster issuer” |\n\n\n</div>\n\n</CloudPlatformToggle>","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/install","loc":{"lines":{"from":151,"to":163}}}}],["2939",{"pageContent":"---\nlayout: false\n---\n\n![Reference Architecture Overview](../../../static/images/docs/self-hosted/reference-architecture/ReferenceArchitecture.png)\n\nThe diagram above gives an overview of the reference architecture. Starting from the user’s workstation, access is provided using a layer 4 (L4) load balancer. An internal proxy distributes this traffic within Gitpod.\n\nThe cluster-external components are accessed by a specific set of components as shown in the diagram. The external components are:\n\n- **MySQL database**\n- **Source Control Management (SCM)**, e.g. GitLab, GitHub, GitHub Enterprise, BitBucket, or BitBucket Server\n- **Object Storage**, e.g. Google Cloud Storage or Amazon S3\n- **OCI Image Registry**, e.g. Google Artifact Registry.<br/>\n  _Note: This registry is used by Gitpod to cache images, and store images it builds on behalf of users. This is **not** the registry that contains the images of Gitpod’s services._","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/overview","loc":{"lines":{"from":1,"to":15}}}}],["2940",{"pageContent":"In addition, the diagram indicates the different node pools within the cluster. Notice that we separate any user workloads from Gitpod’s services (except for `ws-daemon`). In this reference architecture, we create two node pools: the services node pool (upper half in the diagram) and the workspaces node pool (lower half in the diagram).","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/overview","loc":{"lines":{"from":17,"to":17}}}}],["2941",{"pageContent":"---\nlayout: false\n---\n\n<script lang=\"ts\">\n  import CloudPlatformToggle from \"$lib/components/docs/cloud-platform-toggle.svelte\";\n</script>\n\nFor each Gitpod installation, you need a **domain**. In this guide, we use `gitpod.example.com` as a placeholder for your domain. Gitpod also uses different subdomains for some components as well as dynamically for the running workspaces. That's why you need to configure your DNS server and your TLS certificates for your Gitpod domain with the following wildcards:\n\n```\ngitpod.example.com\n*.gitpod.example.com\n*.ws.gitpod.example.com\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/networking","loc":{"lines":{"from":1,"to":15}}}}],["2942",{"pageContent":"Cluster ports\n\nThe entry point for all traffic is the `proxy` component which has a service of type `LoadBalancer` that allows inbound traffic on ports 80 (HTTP) and 443 (HTTPS) as well as port 22 (SSH access to the workspaces).\n\nSSH access is required to work with desktop IDEs, such as [VS Code Desktop](/docs/references/ides-and-editors/vscode) and JetBrains via [JetBrains Gateway](/docs/integrations/jetbrains-gateway). To enable SSH, your **load balancer** needs to be capable of working with [L4 protocols](https://en.wikipedia.org/wiki/OSI_model#Layer_4:_Transport_layer).\n\n<CloudPlatformToggle id=\"cloud-platform-toggle-networking\">\n<div slot=\"gcp\">\n\nIn this guide, we use [load balancing through a standalone network endpoint group (NEG)](https://cloud.google.com/kubernetes-engine/docs/how-to/standalone-neg). For this, the Gitpod proxy service will get the following annotation by default:\n\n```bash\ncloud.google.com/neg: '{\"exposed_ports\": {\"80\":{},\"443\": {}}}'","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/networking","loc":{"lines":{"from":17,"to":29}}}}],["2943",{"pageContent":"For Gitpod, we support Calico as CNI only. You need to make sure that you DO NOT use [GKE Dataplan V2](https://cloud.google.com/kubernetes-engine/docs/concepts/dataplane-v2). That means, do not add the `--enable-dataplane-v2` flag during the cluster creation.\n\n</div>\n<div slot=\"aws\">\n\nIt is suggested to create a dedicated VPC (and EKS instance) for Gitpod. `eksctl` can do this for you, but if VPCs have to be configured separately, follow `eksctl`’s [suggestions](https://eksctl.io/usage/vpc-configuration/).\n\n> **Note**: You can also customize `eksctl`’s [vpc](https://eksctl.io/usage/vpc-subnet-settings/#custom-subnet-topology) creation to suit your existing configurations.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/networking","loc":{"lines":{"from":32,"to":39}}}}],["2944",{"pageContent":"> **Note**: You can also customize `eksctl`’s [vpc](https://eksctl.io/usage/vpc-subnet-settings/#custom-subnet-topology) creation to suit your existing configurations.\n\nThe VPC needs public and private subnets. All managed node groups and Gitpod services should run in the private subnet. Inbound access to the services should be through ALB/ELB services auto-provisioned by AWS based on the configuration used (standard LoadBalancer roles or creation of an Ingress). If running a jump host or VPN endpoint, it should be deployed in the public subnet.\n\n> By default, when Gitpod is being installed, EKS will create a classic load balancer that you can point your DNS entries at. If you are unable to use a AWS Classic Load Balancer (e.g. because you use SSL certificates generated by AWS), please follow [the Setting up your EKS cluster with dual ALB + NLB load balancers guide](../advanced/eks-with-alb-and-nlb) _alongside_ this reference architecture guide.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/networking","loc":{"lines":{"from":39,"to":43}}}}],["2945",{"pageContent":"If installing Calico, follow their [installation steps](https://projectcalico.docs.tigera.io/getting-started/kubernetes/managed-public-cloud/eks) and ensure you modify the `hostNetwork: True` option on the cert-manager installation options later.\n\n</div>\n<div slot=\"azure\">\n\nAzure automatically provisions [Azure public load balancers](https://docs.microsoft.com/en-us/azure/aks/load-balancer-standard) that load balance public Gitpod services and provide public Internet connectivity for Gitpod's workloads. No additional configuration is required.\n\n</div>\n\n</CloudPlatformToggle>","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/networking","loc":{"lines":{"from":45,"to":54}}}}],["2946",{"pageContent":"External DNS\n\nYou also need to configure your **DNS server**. If you have your own DNS server for your domain, make sure the domain with all wildcards points to your load balancer.\n\nCreating a dedicated DNS zone is recommended when using cert-manager or external-dns but is not required. A pre-existing DNS zone may be used as long as the **cert-manager** and/or **external-dns** services are authorized to manage DNS records within that zone. If you are providing your own TLS certificates and will manually create A records pointing to Gitpod's public load balancer IP addresses then creating a zone is unnecessary.\n\n<CloudPlatformToggle id=\"cloud-platform-toggle-dns\">\n<div slot=\"gcp\">\n\nIn this reference architecture, we use [Google Cloud DNS](https://cloud.google.com/dns) for domain name resolution. To automatically configure Cloud DNS, we use [External DNS for Kubernetes](https://github.com/kubernetes-sigs/external-dns).","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/networking","loc":{"lines":{"from":56,"to":65}}}}],["2947",{"pageContent":"First, we need a **service account** with role `roles/dns.admin`. This service account is needed by cert-manager to alter the DNS settings for the DNS-01 resolution.\n\n```bash\nDNS_SA=gitpod-dns01-solver\nDNS_SA_EMAIL=\"${DNS_SA}\"@\"${PROJECT_NAME}\".iam.gserviceaccount.com\ngcloud iam service-accounts create \"${DNS_SA}\" --display-name \"${DNS_SA}\"\ngcloud projects add-iam-policy-binding \"${PROJECT_NAME}\" \\\n    --member serviceAccount:\"${DNS_SA_EMAIL}\" --role=\"roles/dns.admin\"","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/networking","loc":{"lines":{"from":67,"to":74}}}}],["2948",{"pageContent":"Save the service account key to the file `./dns-credentials.json`:\n\n```bash\ngcloud iam service-accounts keys create --iam-account \"${DNS_SA_EMAIL}\" \\\n    ./dns-credentials.json\n```\n\nAfter that, we create a [managed zone](https://cloud.google.com/dns/docs/zones).\n\n```bash\nDOMAIN=gitpod.example.com\ngcloud dns managed-zones create \"${CLUSTER_NAME}\" \\\n    --dns-name \"${DOMAIN}.\" \\\n    --description \"Automatically managed zone by kubernetes.io/external-dns\"","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/networking","loc":{"lines":{"from":77,"to":90}}}}],["2949",{"pageContent":"Now we are ready to install External DNS. Please refer to the [External DNS GKE docs](https://github.com/kubernetes-sigs/external-dns/blob/master/docs/tutorials/gke.md).\n\n<details>\n  <summary  class=\"text-p-medium\">Example on how to install External DNS with helm</summary>\n\n```bash\nhelm repo add bitnami https://charts.bitnami.com/bitnami\nhelm repo update\nhelm upgrade \\\n    --atomic \\\n    --cleanup-on-fail \\\n    --create-namespace \\\n    --install \\\n    --namespace external-dns \\\n    --reset-values \\\n    --set provider=google \\\n    --set google.project=\"${PROJECT_NAME}\" \\\n    --set logFormat=json \\\n    --set google.serviceAccountSecretKey=dns-credentials.json \\\n    --wait \\\n    external-dns \\\n    bitnami/external-dns","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/networking","loc":{"lines":{"from":93,"to":114}}}}],["2950",{"pageContent":"</details>\n\nDepending on what your DNS setup for your domain looks like, you most probably want to configure the nameservers for your domain. Run the following command to get a list of nameservers used by your Cloud DNS setup:\n\n```bash\ngcloud dns managed-zones describe ${CLUSTER_NAME} --format json | jq '.nameServers'\n```\n\n</div>\n<div slot=\"aws\">\n\nIf a Route53 zone has not yet been created, you can do so with the following command (replace `gitpod.example.com.` with the intended zone):\n\n```bash\nDOMAIN_NAME=\"gitpod.example.com\"\nexport ROUTE53_CALLER=$(cat /proc/sys/kernel/random/uuid)\naws route53 create-hosted-zone \\\n    --name \"${DOMAIN_NAME}.\" \\\n    --caller-reference $ROUTE53_CALLER \\\n    --hosted-zone-config Comment=\"gitpod-zone\"\n```\n\nOnce the domain has been provisioned, you can get the details with the following command and record the `Id` for later usage:\n\n```bash\naws route53 list-hosted-zones --query \"HostedZones[?Name==\\`$DOMAIN_NAME.\\`]\"","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/networking","loc":{"lines":{"from":117,"to":142}}}}],["2951",{"pageContent":"Which should return something like:\n\n```bash\n[\n    {\n        \"Id\": \"/hostedzone/Z1230498123094\",\n        \"Name\": \"gitpod.example.com.\",\n        \"CallerReference\": \"c43f5dfd-87d9-45fc-bb1f-33bf35d8244b\",\n        \"Config\": {\n            \"Comment\": \"\",\n            \"PrivateZone\": false\n        },\n        \"ResourceRecordSetCount\": 10\n    }\n]\n```\n\nStore this hosted zone in a variable for later use by external-dns and cert-manager:\n\n```bash\nHOSTED_ZONE_ID=\"$(aws route53 list-hosted-zones-by-name \\\n    --dns-name \"$DOMAIN_NAME.\" \\\n    --query \"HostedZones[0].Id\" \\\n    --output json \\\n    --out text)\"","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/networking","loc":{"lines":{"from":145,"to":169}}}}],["2952",{"pageContent":"Then install external-dns so that DNS records will be automatically created for Gitpod services. This can be ignored if you are managing DNS records yourself.\n\n<!--\nexternal-dns helm chart notes:\n\n- `eksctl` is responsible for creating the external-dns Kubernetes service account and attaching\n  an AWS IAM role to to the external-dns service account. The helm chart assumes that the service\n  account has been pre-created (`--set serviceAccount.create=false`)\n- For security purposes external-dns runs with a [UID of 65534](https://github.com/kubernetes-sigs/external-dns/blob/v0.12.2/Dockerfile#L35-L37)\n- EKS IAM roles for service accounts expose AWS token files into the container; as external-dns\n  is running as a non-root user the `fsGroup` setting must be set to change the ownership of the\n  AWS token file to match the UID of the external-dns process.\n\nSee also: https://aws.amazon.com/premiumsupport/knowledge-center/eks-set-up-externaldns/\n-->","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/networking","loc":{"lines":{"from":172,"to":186}}}}],["2953",{"pageContent":"See also: https://aws.amazon.com/premiumsupport/knowledge-center/eks-set-up-externaldns/\n-->\n\n```bash\nhelm repo add bitnami https://charts.bitnami.com/bitnami\nhelm repo update\nhelm upgrade \\\n    --atomic \\\n    --cleanup-on-fail \\\n    --create-namespace \\\n    --install \\\n    --namespace external-dns \\\n    --reset-values \\\n    --wait \\\n    --set provider=aws \\\n    --set aws.zoneType=public \\\n    --set txtOwnerId=\"$HOSTED_ZONE_ID\" \\\n    --set \"domainFilters[0]=$DOMAIN_NAME\" \\\n    --set serviceAccount.create=false \\\n    --set serviceAccount.name=external-dns \\\n    --set podSecurityContext.fsGroup=65534 \\\n    external-dns \\\n    bitnami/external-dns","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/networking","loc":{"lines":{"from":186,"to":208}}}}],["2954",{"pageContent":"With Route53 created, you can now proceed to install cert-manager. Cert-manager is needed for Gitpod's internal networking even if you are managing DNS yourself.\n\n</div>\n\n<div slot=\"azure\">\n\nThis section will create an Azure managed zone, grant the AKS cluster permission to manage records in that zone, and install external-dns.\n\nBegin by creating a new Azure managed zone. For example, if you plan on hosting Gitpod at `gitpod.svcs.example.com` then create a managed zone called `svcs.example.com`.\n\n```bash\nDOMAIN_NAME=\"svcs.example.com\"\naz network dns zone create --name $DOMAIN_NAME --resource-group $RESOURCE_GROUP","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/networking","loc":{"lines":{"from":211,"to":223}}}}],["2955",{"pageContent":"Authorize the AKS cluster to control DNS records in the zone:\n\n```bash\nZONE_ID=$(az network dns zone show --name \"${DOMAIN_NAME}\" --resource-group \"${RESOURCE_GROUP}\" --query \"id\" -o tsv)\nKUBELET_OBJECT_ID=$(az aks show --name \"${CLUSTER_NAME}\" --resource-group \"${RESOURCE_GROUP}\" --query \"identityProfile.kubeletidentity.objectId\" -o tsv)\n\naz role assignment create \\\n    --assignee \"${KUBELET_OBJECT_ID}\" \\\n    --role \"DNS Zone Contributor\" \\\n    --scope \"${ZONE_ID}\"","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/networking","loc":{"lines":{"from":226,"to":235}}}}],["2956",{"pageContent":"> This role assignment uses [AKS Kubelet Identity](https://cert-manager.io/docs/configuration/acme/dns01/azuredns/#managed-identity-using-aks-kubelet-identity)\n> to authorizes the entire AKS cluster to manage DNS records in the given zone, including cert-manager and external-dns.\n\nLook up the AKS kubelet client identity; external-dns will use this identity when authenticating to the Azure API.\n\n```bash\nKUBELET_CLIENT_ID=$(az aks show --name \"${CLUSTER_NAME}\" --resource-group \"${RESOURCE_GROUP}\" --query \"identityProfile.kubeletidentity.clientId\" -o tsv)","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/networking","loc":{"lines":{"from":238,"to":244}}}}],["2957",{"pageContent":"Then install the external-dns Helm chart:\n\n```bash\nhelm repo add bitnami https://charts.bitnami.com/bitnami\nhelm repo update\nhelm upgrade \\\n    --install \\\n    --atomic \\\n    --wait \\\n    --cleanup-on-fail \\\n    --create-namespace \\\n    --namespace external-dns \\\n    --reset-values \\\n    --set provider=azure \\\n    --set azure.resourceGroup=\"${RESOURCE_GROUP}\" \\\n    --set azure.subscriptionId=\"${AZURE_SUBSCRIPTION_ID}\" \\\n    --set azure.tenantId=\"${AZURE_TENANT_ID}\" \\\n    --set azure.useManagedIdentityExtension=true \\\n    --set azure.userAssignedIdentityID=\"${KUBELET_CLIENT_ID}\" \\\n    --set logFormat=json \\\n    external-dns \\\n    bitnami/external-dns\n```\n\n</div>\n\n</CloudPlatformToggle>","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/networking","loc":{"lines":{"from":247,"to":273}}}}],["2958",{"pageContent":"cert-manager\n\nGitpod uses TLS secure external traffic bound for Gitpod as well as identifying, authorizing, and securing internal traffic between Gitpod's internal components. While you can provide your own TLS certificate for securing external connections to Gitpod, cert-manager is required to generate internal TLS certificates.\n\nRefer to the [cert-manager DNS01 docs](https://cert-manager.io/docs/configuration/acme/dns01/) for more information.\n\n<CloudPlatformToggle>\n<div slot=\"gcp\">\n\nExample on how to install cert-manager on GCP:\n\n```bash\nhelm repo add jetstack https://charts.jetstack.io\nhelm repo update\nhelm upgrade \\\n    --atomic \\\n    --cleanup-on-fail \\\n    --create-namespace \\\n    --install \\\n    --namespace cert-manager \\\n    --reset-values \\\n    --set installCRDs=true \\\n    --set 'extraArgs={--dns01-recursive-nameservers-only=true,--dns01-recursive-nameservers=8.8.8.8:53\\,1.1.1.1:53}' \\\n    --wait \\\n    cert-manager \\\n    jetstack/cert-manager","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/networking","loc":{"lines":{"from":275,"to":300}}}}],["2959",{"pageContent":"</div>\n<div slot=\"aws\">\n\nDue to the networking behavior and service accounts in EKS, cert-manager needs a different installation procedure. First, install cert-manager with the following command:\n\n```bash\nhelm repo add jetstack https://charts.jetstack.io\nhelm repo update\nhelm upgrade \\\n    --atomic \\\n    --cleanup-on-fail \\\n    --create-namespace \\\n    --install \\\n    --namespace cert-manager \\\n    --reset-values \\\n    --set installCRDs=true \\\n    --set 'extraArgs={--dns01-recursive-nameservers-only=true,--dns01-recursive-nameservers=8.8.8.8:53\\,1.1.1.1:53}' \\\n    --set webhook.hostNetwork=true \\\n    --set webhook.securePort=10260 \\\n    --set serviceAccount.create=false \\\n    --set serviceAccount.name=cert-manager \\\n    --wait \\\n    cert-manager \\\n    jetstack/cert-manager","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/networking","loc":{"lines":{"from":303,"to":326}}}}],["2960",{"pageContent":"Once the installation has completed, you will need to update the cert-manager security context setting for the service account provisioned for cert-manager by `eksctl`:\n\n```bash\nkubectl patch deployment cert-manager -n cert-manager -p \\\n  '{\"spec\":{\"template\":{\"spec\":{\"securityContext\":{\"fsGroup\":1001,\"runAsNonRoot\": true}}}}}'\n\n```\n\n</div>\n\n<div slot=\"azure\">\n\nInstall cert-manager with the following command:\n\n```bash\nhelm repo add jetstack https://charts.jetstack.io\nhelm repo update\nhelm upgrade \\\n    --install \\\n    --atomic \\\n    --wait \\\n    --cleanup-on-fail \\\n    --create-namespace \\\n    --namespace='cert-manager' \\\n    --reset-values \\\n    --set installCRDs=true \\\n    --set 'extraArgs={--dns01-recursive-nameservers-only=true,--dns01-recursive-nameservers=8.8.8.8:53\\,1.1.1.1:53}' \\\n    cert-manager \\\n    jetstack/cert-manager\n```\n\n</div>\n</CloudPlatformToggle>","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/networking","loc":{"lines":{"from":329,"to":361}}}}],["2961",{"pageContent":"TLS certificate\n\nIn this reference architecture, we use cert-manager to also create **TLS certificates for the Gitpod domain**. Since we need wildcard certificates for the subdomains, you must use the [DNS-01 challenge](https://letsencrypt.org/docs/challenge-types/#dns-01-challenge).\n\nUsing a certificate issued by Let's Encrypt is recommended as it minimizes overhead involving TLS certificates and managing CA certificate trust, but is not required. If you already have TLS certificates for your Gitpod installation with suitable DNS names you can skip this step and use your own certificates during the installation.\n\n<CloudPlatformToggle id=\"cloud-platform-toggle-cert-manager-tls\">\n<div slot=\"gcp\">\n\nNow, we are configuring [Google Cloud DNS for the DNS-01 challenge](https://cert-manager.io/docs/configuration/acme/dns01/google/). For this, we need to create a secret that contains the key for the DNS service account:","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/networking","loc":{"lines":{"from":363,"to":372}}}}],["2962",{"pageContent":"```bash\nCLOUD_DNS_SECRET=clouddns-dns01-solver\nkubectl create secret generic \"${CLOUD_DNS_SECRET}\" \\\n    --namespace=cert-manager \\\n    --from-file=key.json=\"./dns-credentials.json\"","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/networking","loc":{"lines":{"from":374,"to":378}}}}],["2963",{"pageContent":"After that, we are telling cert-manager which service account it should use:\n\n```bash\nkubectl annotate serviceaccount --namespace=cert-manager cert-manager \\\n    --overwrite \"iam.gke.io/gcp-service-account=${DNS_SA_EMAIL}\"\n```\n\nThe next step is to create an issuer. In this guide, we create a cluster issuer. Create a file `issuer.yaml` like this:\n\n```yaml\n# Replace $LETSENCRYPT_EMAIL with your email and $PROJECT_NAME with your GCP project name\napiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: gitpod-issuer\nspec:\n  acme:\n    email: $LETSENCRYPT_EMAIL\n    server: https://acme-v02.api.letsencrypt.org/directory\n    privateKeySecretRef:\n      name: issuer-account-key\n    solvers:\n      - dns01:\n          cloudDNS:\n            project: $PROJECT_NAME\n```\n\n… and run:\n\n```bash\nkubectl apply -f issuer.yaml","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/networking","loc":{"lines":{"from":381,"to":411}}}}],["2964",{"pageContent":"… and run:\n\n```bash\nkubectl apply -f issuer.yaml\n```\n\n</div>\n<div slot=\"aws\">\n\nIf using `eksctl` and the cert-manager service account along with well-known policies AND you have your intended zone hosted in Route53, then follow the [cert-manager](https://cert-manager.io/docs/configuration/acme/dns01/route53/) configuration steps. An example cluster issuer using the hosted zone and cert-manager service account created by `eksctl` is below:\n\n```yaml\n# Replace $LETSENCRYPT_EMAIL with your email and $DOMAIN_NAME with your gitpod domain name (eg.`gitpod.$DOMAIN_NAME`)\napiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: gitpod-issuer\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n    email: $LETSENCRYPT_EMAIL\n    privateKeySecretRef:\n      name: letsencrypt\n    solvers:\n      - selector:\n          dnsZones:\n            - $DOMAIN_NAME\n        dns01:\n          route53:\n            region: us-east-1","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/networking","loc":{"lines":{"from":411,"to":440}}}}],["2965",{"pageContent":"> ⚠️ In contrast to most AWS services, Route53 does _not_ support regional endpoints. When creating your ClusterIssuer\n> be careful to use the `us-east-1` region for all regions other than the Beijing and Ningxia Regions, and `cn-northwest-1`\n> region for the Beijing and Ningxia regions.\n>\n> See the [AWS Route53 endpoints and quotas documentation](https://docs.aws.amazon.com/general/latest/gr/r53.html) for more information.\n\n</div>\n\n<div slot=\"azure\">\n\nThis section will create a cert-manager ClusterIssuer that will generate publicly trusted certificates using Let's Encrypt.\n\nFirst, determine your Azure subscription ID. You can typically determine your subscription ID from your Azure CLI credentials.\n\n```bash\nAZURE_SUBSCRIPTION_ID=\"$(az account subscription list --query '[0].subscriptionId' --output tsv)\"","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/networking","loc":{"lines":{"from":443,"to":458}}}}],["2966",{"pageContent":"Then create a file named `issuer.yaml` containing the following content, expanding the `$AZURE_SUBSCRIPTION_ID`, `$RESOURCE_GROUP`, and `$DOMAIN_NAME` variables:\n\n```yaml\napiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: gitpod-issuer\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n    privateKeySecretRef:\n      name: issuer-account-key\n    solvers:\n      - dns01:\n          azureDNS:\n            subscriptionID: $AZURE_SUBSCRIPTION_ID\n            resourceGroupName: $RESOURCE_GROUP\n            hostedZoneName: $DOMAIN_NAME\n```\n\nThen apply the ClusterIssuer resource:\n\n```bash\nkubectl apply -f issuer.yaml","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/networking","loc":{"lines":{"from":461,"to":484}}}}],["2967",{"pageContent":"Then apply the ClusterIssuer resource:\n\n```bash\nkubectl apply -f issuer.yaml\n```\n\n> This example ClusterIssuer depends on [Azure Managed Identity](https://docs.microsoft.com/en-us/azure/active-directory/managed-identities-azure-resources/overview) to authorize requests from cert-manager to the AzureDNS API.\n> Refer to the [cert-manager AzureDNS DNS01](https://cert-manager.io/docs/configuration/acme/dns01/azuredns/) documentation for more information on cert-manager API authorization.\n\n</CloudPlatformToggle>","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/networking","loc":{"lines":{"from":484,"to":493}}}}],["2968",{"pageContent":"---\nlayout: false\n---\n\n<script lang=\"ts\">\n  import CloudPlatformToggle from \"$lib/components/docs/cloud-platform-toggle.svelte\";\n</script>\n\nYou need to prepare your workstation and your cloud provider (e.g. creating a project and preparing service accounts) to be able to replicate this reference architecture.\n\nIndependent of the cloud provider you are using, you need to have `kubectl` installed on your workstation and configured to access your cluster after creation.\n\n<CloudPlatformToggle id=\"cloud-platform-toggle-preparations\">\n\n<div slot=\"gcp\">","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/preparations","loc":{"lines":{"from":1,"to":15}}}}],["2969",{"pageContent":"<CloudPlatformToggle id=\"cloud-platform-toggle-preparations\">\n\n<div slot=\"gcp\">\n\nIn order to deploy Gitpod on the [Google Kubernetes Engine (GKE)](https://cloud.google.com/kubernetes-engine) of the [Google Cloud Platform (GCP)](https://cloud.google.com/docs), you need to create and configure a project for your installation. In this guide, we give you examples of how to create the needed resources by using the command line tool `gcloud`. To follow these examples make sure you have [installed the `gcloud` CLI](https://cloud.google.com/sdk/docs/install) and [logged in to your Google Cloud account](https://cloud.google.com/sdk/gcloud/reference/auth/login). You can also use the [GCP Console](https://console.cloud.google.com/) or the API instead. In that case, please refer to the linked Google docs.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/preparations","loc":{"lines":{"from":15,"to":19}}}}],["2970",{"pageContent":"First, [create a GCP project](https://cloud.google.com/resource-manager/docs/creating-managing-projects) and [enable billing](https://cloud.google.com/billing/docs/concepts) (you have to enable billing to enable GKE). You can freely choose a name for your project (hereinafter referred to as environment variable `PROJECT_NAME`). You also need the billing account ID (referred to as `BILLING_ACCOUNT`). To see available lDs, run [`gcloud alpha billing accounts list`](https://cloud.google.com/sdk/gcloud/reference/alpha/billing/accounts/list).\n\n```bash\nPROJECT_NAME=gitpod\ngcloud projects create \"${PROJECT_NAME}\" --set-as-default\n\nBILLING_ACCOUNT=0X0X0X-0X0X0X-0X0X0X\ngcloud alpha billing projects link \"${PROJECT_NAME}\" \\\n    --billing-account \"${BILLING_ACCOUNT}\"","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/preparations","loc":{"lines":{"from":21,"to":29}}}}],["2971",{"pageContent":"You can verify that the proper project has been set as default with this command:\n\n```bash\ngcloud config get-value project","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/preparations","loc":{"lines":{"from":32,"to":35}}}}],["2972",{"pageContent":"After you created your project, you need to enable the following services in this project:","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/preparations","loc":{"lines":{"from":38,"to":38}}}}],["2973",{"pageContent":"| Services                         |                                                                                              |                                                                                              |\n| -------------------------------- | -------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------- |\n| cloudbilling.googleapis.com      | [Google Billing API](https://cloud.google.com/billing/docs/reference/rest)                   | Billing is required to set up a GKE cluster.                                                 |\n| containerregistry.googleapis.com | [Docker container images registry](https://cloud.google.com/container-registry)              | Enable this service such that Gitpod can push workspace images to that repository.           |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/preparations","loc":{"lines":{"from":40,"to":43}}}}],["2974",{"pageContent":"| iam.googleapis.com               | [Identity and Access Management (IAM) API](https://cloud.google.com/iam/docs/reference/rest) | To create and use service accounts for the setup.                                            |\n| compute.googleapis.com           | [Google Compute Engine API](https://cloud.google.com/compute/docs/reference/rest/v1)         | The Google Compute Engine empowers to run virtual machines (VMs) for the Kubernetes cluster. |\n| container.googleapis.com         | [Kubernetes Engine API](https://cloud.google.com/kubernetes-engine/docs/reference/rest)      | The Kubernetes engine is where we will deploy Gitpod to.                                     |\n| dns.googleapis.com               | [Cloud DNS](https://cloud.google.com/dns/docs/reference/v1)                                  | Cloud DNS is used in this reference architecture so set up the domain name resolution.       |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/preparations","loc":{"lines":{"from":44,"to":47}}}}],["2975",{"pageContent":"| sqladmin.googleapis.com          | [Cloud SQL Admin API](https://cloud.google.com/sql/docs/mysql/admin-api)                     | Cloud SQL for MySQL is used as database service in this reference architecture.              |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/preparations","loc":{"lines":{"from":48,"to":48}}}}],["2976",{"pageContent":"Run these commands to enable the services:\n\n```bash\ngcloud services enable cloudbilling.googleapis.com\ngcloud services enable containerregistry.googleapis.com\ngcloud services enable iam.googleapis.com\ngcloud services enable compute.googleapis.com\ngcloud services enable container.googleapis.com\ngcloud services enable dns.googleapis.com\ngcloud services enable sqladmin.googleapis.com","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/preparations","loc":{"lines":{"from":50,"to":59}}}}],["2977",{"pageContent":"Now, you are prepared to create your Kubernetes cluster.\n\n</div>\n\n<div slot=\"aws\">\n\nTo deploy Gitpod on [Amazon Elastic Kubernetes Service (Amazon EKS)](https://docs.aws.amazon.com/eks/latest/userguide/what-is-eks.html), you must have an Amazon account that has permissions to deploy EKS and the underlying component services, which can include:\n\n- VPCs\n- Subnets\n- Internet Gateways\n- EC2 Instances\n- Autoscaling Groups\n- Elastic Load Balancers\n\nSpecifically for Gitpod's use, you will also need permissions to create these additional components:\n\n- Route53 DNS Zone for the intended Gitpod domain name (for use with Let's Encrypt certificate generation)\n- RDS Instance running MySQL 5.7 for Gitpod's database\n- S3 Bucket: Hosting Gitpod's workspace images and object storage\n- AWS IAM Service account: To enable access to the S3 bucket\n\nThis guide uses the following tools:","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/preparations","loc":{"lines":{"from":62,"to":84}}}}],["2978",{"pageContent":"This guide uses the following tools:\n\n- [AWS CLI](https://aws.amazon.com/cli/) for creating none EKS specific services\n- [EKS CLI `eksctl`](https://eksctl.io/) for creating the EKS cluster and nodegroups themselves\n\nAmazon has a brief run-through on how to [deploy a basic cluster](https://docs.aws.amazon.com/eks/latest/userguide/getting-started-eksctl.html) using the `eksctl` tooling if you'd like to familiarize yourself before deploying the Gitpod reference architecture.\n\nMake sure you are logged in and are connected to the proper AWS account. Ensure AWS is configured and working with the command `aws sts get-caller-identity`. For later steps you will need to ensure that `kubectl` is [properly configured to authenticate to the newly provisioned EKS environment](https://docs.aws.amazon.com/eks/latest/userguide/create-kubeconfig.html).\n\n**AWS Region Setting**","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/preparations","loc":{"lines":{"from":84,"to":93}}}}],["2979",{"pageContent":"**AWS Region Setting**\n\nAll commands that follow assume you have set an environment variable of `AWS_REGION` to your appropriate region or have it configured in your profile already and so will not include `--region` or `--profile` when running the `aws` command. Refer to the [AWS CLI documentation](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-envvars.html) for more information.\n\n</div>\n\n<div slot=\"azure\">\n\nTo deploy Gitpod on [Azure Kubernetes Service](https://docs.microsoft.com/en-us/azure/aks/intro-kubernetes), you must have an Azure subscription and account with permission deploy AKS clusters and associated component services, including the following:\n\n- AKS Clusters\n- Virtual networks\n- MySQL Databases\n- Storage accounts\n- Azure Container Registries\n- Load balancers\n- Azure DNS managed domains (and rights to assign roles on managed zones)\n- Rights to make role assignments in Azure Active Directory","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/preparations","loc":{"lines":{"from":93,"to":110}}}}],["2980",{"pageContent":"This guide uses the Azure CLI to create resources for your Gitpod installation and requires active Azure credentials. Credentials can be fetched by one of the following options:\n\n- [Sign in interactively](https://learn.microsoft.com/en-us/cli/azure/authenticate-azure-cli#sign-in-interactively)\n- [Sign in with a Service Principal](https://learn.microsoft.com/en-us/cli/azure/authenticate-azure-cli#sign-in-with-a-service-principal) (recommended for production installations)\n\n**Tools**\n\nThis guide uses the following tools:\n\n- [Azure CLI](https://docs.microsoft.com/en-us/cli/azure/get-started-with-azure-cli)\n\nIf `kubectl` is not present the Azure CLI can be used to install `kubectl`:\n\n```bash\nsudo az aks install-cli","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/preparations","loc":{"lines":{"from":112,"to":126}}}}],["2981",{"pageContent":"**Location and Resource Group**\n\nAzure uses _resource groups_ to logically group related resources. This guide uses a dedicated resource group for the Gitpod AKS cluster and all component resources. Creating a new resource group for Gitpod resources is recommended but a pre-existing resource group may be used if necessary.\n\nSet environment variables indicating the resource group and location where Gitpod resources will be created:\n\n```bash\nexport RESOURCE_GROUP=\"gitpod\"\nexport LOCATION=\"centralus\"\n```\n\nThen create a new resource group:\n\n```bash\naz group create --location $LOCATION --name \"$RESOURCE_GROUP\"\n```\n\n</div>\n\n</CloudPlatformToggle>","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/preparations","loc":{"lines":{"from":129,"to":148}}}}],["2982",{"pageContent":"---\nlayout: false\n---\n\n<script lang=\"ts\">\n  import CloudPlatformToggle from \"$lib/components/docs/cloud-platform-toggle.svelte\";\n</script>\n\nGitpod uses **object storage** to store blob data. This includes workspace backups that are created when a workspace stops and are used to restore state upon restart. Different user settings like IDE preferences are also stored this way.\n\nThis reference architecture uses managed object storage commonly offered by all cloud providers.\n\n<CloudPlatformToggle id=\"cloud-platform-toggle-object-storage\">\n<div slot=\"gcp\">\n\nFor each Gitpod user, their own bucket will be created at runtime. For this reason, Gitpod needs proper rights to create buckets in the object storage. Create a service account that has the following roles:\n\n| Roles                     |\n| ------------------------- |\n| roles/storage.admin       |\n| roles/storage.objectAdmin |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/storage","loc":{"lines":{"from":1,"to":21}}}}],["2983",{"pageContent":"| Roles                     |\n| ------------------------- |\n| roles/storage.admin       |\n| roles/storage.objectAdmin |\n\n```bash\nOBJECT_STORAGE_SA=gitpod-storage\nOBJECT_STORAGE_SA_EMAIL=\"${OBJECT_STORAGE_SA}\"@\"${PROJECT_NAME}\".iam.gserviceaccount.com\ngcloud iam service-accounts create \"${OBJECT_STORAGE_SA}\" --display-name \"${OBJECT_STORAGE_SA}\"\ngcloud projects add-iam-policy-binding \"${PROJECT_NAME}\" \\\n    --member serviceAccount:\"${OBJECT_STORAGE_SA_EMAIL}\" --role=\"roles/storage.admin\"\ngcloud projects add-iam-policy-binding \"${PROJECT_NAME}\" \\\n    --member serviceAccount:\"${OBJECT_STORAGE_SA_EMAIL}\" --role=\"roles/storage.objectAdmin\"","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/storage","loc":{"lines":{"from":21,"to":33}}}}],["2984",{"pageContent":"Save the service account key to the file `./gs-credentials.json`:\n\n```bash\ngcloud iam service-accounts keys create --iam-account \"${OBJECT_STORAGE_SA_EMAIL}\" \\\n    ./gs-credentials.json\n```\n\n</div>\n<div slot=\"aws\">\n\nBelow, we create one S3 bucket and one IAM User service account to access it. These credentials and the bucket are used for both object storage and storing the workspace images via a Registry frontend deployed in Gitpod (and when Gitpod is installed). The bucket has to have a globally unique name.\n\n```bash\nexport S3_BUCKET_NAME=\"suitably-tired-puma-registry\"\necho ${S3_BUCKET_NAME}\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/storage","loc":{"lines":{"from":36,"to":51}}}}],["2985",{"pageContent":"Create the S3 Bucket and ensure it is private\n\nCreate an S3 bucket using the following command:\n\n```bash\naws s3api create-bucket \\\n    --bucket ${S3_BUCKET_NAME} \\\n    --region eu-west-1 --create-bucket-configuration LocationConstraint=eu-west-1 \\\n    --object-ownership BucketOwnerEnforced\naws s3api put-public-access-block \\\n    --bucket ${S3_BUCKET_NAME} \\\n    --public-access-block-configuration \"BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true\"\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/storage","loc":{"lines":{"from":53,"to":65}}}}],["2986",{"pageContent":"Create an IAM user for credentials with access just to this bucket\n\n```bash\naws iam create-user \\\n  --user-name gitpod-s3-access \\\n  --tags Key=project,Value=gitpod\n```\n\nSave the following file as `S3_policy.json`, replacing `${S3_BUCKET_NAME}` with the S3 bucket you created:\n\n```json\n{\n  \"Statement\": [\n    {\n      \"Action\": [\n        \"s3:ListBucketMultipartUploads\",\n        \"s3:ListBucket\",\n        \"s3:GetBucketLocation\"\n      ],\n      \"Effect\": \"Allow\",\n      \"Resource\": [\"arn:aws:s3:::${S3_BUCKET_NAME}>\"],\n      \"Sid\": \"\"\n    },\n    {\n      \"Action\": [\n        \"s3:PutObject\",\n        \"s3:ListMultipartUploadParts\",\n        \"s3:GetObject\",\n        \"s3:DeleteObject\",\n        \"s3:AbortMultipartUpload\"\n      ],\n      \"Effect\": \"Allow\",\n      \"Resource\": [\"arn:aws:s3:::${S3_BUCKET_NAME}/*\"],\n      \"Sid\": \"\"\n    }\n  ],\n  \"Version\": \"2012-10-17\"\n}","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/storage","loc":{"lines":{"from":67,"to":104}}}}],["2987",{"pageContent":"Create the policy, taking note of the ARN in the output:\n\n```bash\naws iam create-policy \\\n    --policy-name gitpod_s3_access_policy \\\n    --policy-document <file://S3_policy.json> \\\n    --tags Key=project,Value=gitpod\n```\n\nThis should result in the following output:\n\n```bash\n{\n    \"Policy\": {\n        \"PolicyName\": \"gitpod_s3_access_policy\",\n        \"PolicyId\": \"ANPA2B3JAS5KQGN6MQRMW\",\n        \"Arn\": \"arn:aws:iam::691173103445:policy/gitpod_s3_access_policy\",\n        \"Path\": \"/\",\n        \"DefaultVersionId\": \"v1\",\n        \"AttachmentCount\": 0,\n        \"PermissionsBoundaryUsageCount\": 0,\n        \"IsAttachable\": true,\n        \"CreateDate\": \"2022-06-24T14:31:30+00:00\",\n        \"UpdateDate\": \"2022-06-24T14:31:30+00:00\",\n        \"Tags\": [\n            {\n                \"Key\": \"project\",\n                \"Value\": \"gitpod\"\n            }\n        ]\n    }\n}","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/storage","loc":{"lines":{"from":107,"to":138}}}}],["2988",{"pageContent":"Attach the policy to the IAM user you just created:\n\n```bash\naws iam attach-user-policy \\\n    --user-name gitpod-s3-access \\\n    --policy-arn '<arn from above, similar to: arn:aws:iam::691173103445:policy/gitpod_s3_access_policy>'\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/storage","loc":{"lines":{"from":141,"to":147}}}}],["2989",{"pageContent":"Create and store a user access token\n\nCreate an access key with the following command, and securely record the resulting `AccessKeyId` and `SecretAccessKey` fields:\n\n```bash\naws iam create-access-key --user-name gitpod-s3-access\n```\n\nThis should result in an output similar to the following:\n\n```bash\n{\n    \"AccessKey\": {\n        \"UserName\": \"gitpod-s3-access\",\n        \"AccessKeyId\": \"<accessKeyId>\",\n        \"Status\": \"Active\",\n        \"SecretAccessKey\": \"<SecretAccessKey>\",\n        \"CreateDate\": \"2022-06-24T14:37:40+00:00\"\n    }\n}","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/storage","loc":{"lines":{"from":149,"to":168}}}}],["2990",{"pageContent":"To test that these credentials provide write access to the S3 bucket, open a new shell session and configure it to use the `AccessKeyId` and `SecretAccessKey` you've just retrieved, and attempt to upload a file and then delete it:\n\n```sh\nexport AWS_ACCESS_KEY_ID=<accessKeyId>\nexport AWS_SECRET_ACCESS_KEY=<SecretAccessKey>\naws s3 ls s3://${S3_BUCKET_NAME}\necho \"hello world\" > gitpod_test.txt\naws s3 cp gitpod_test.txt s3://${S3_BUCKET_NAME}\n# => upload: ./gitpod_test.txt to s3://$S3_BUCKET_NAME/gitpod_test.txt\naws s3 ls s3://${S3_BUCKET_NAME}\n# => 2022-06-24 15:50:20         12 gitpod_test.txt\naws s3 rm s3://${S3_BUCKET_NAME}/gitpod_test.txt\n# => delete: s3://$S3_BUCKET_NAME/gitpod_test.txt\naws s3 ls s3://${S3_BUCKET_NAME}\n# => *nothing returns if empty*\n```\n\nTo avoid impacting any further calls to AWS, unset the environment variables created:\n\n```bash\nunset AWS_ACCESS_KEY_ID\nunset AWS_SECRET_ACCESS_KEY","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/storage","loc":{"lines":{"from":171,"to":192}}}}],["2991",{"pageContent":"To avoid impacting any further calls to AWS, unset the environment variables created:\n\n```bash\nunset AWS_ACCESS_KEY_ID\nunset AWS_SECRET_ACCESS_KEY\n```\n\n</div>\n\n<div slot=\"azure\">\n\nThis section will create an Azure storage account for Gitpod object storage and backups.\n\nGenerate a name for the Azure storage account. The Azure storage account name must be globally unique; using a random suffix is recommended but any unique value can be used.\n\n```bash\nexport STORAGE_ACCOUNT_NAME=\"gitpod$(openssl rand -hex 4)\"\necho \"$STORAGE_ACCOUNT_NAME\"\n```\n\nNote the value of `$STORAGE_ACCOUNT_NAME` for later use.\n\nCreate the storage account:\n\n```bash\naz storage account create \\\n  --access-tier Hot \\\n  --kind StorageV2 \\\n  --location \"${LOCATION}\" \\\n  --name \"${STORAGE_ACCOUNT_NAME}\" \\\n  --resource-group \"${RESOURCE_GROUP}\" \\\n  --sku Standard_LRS","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/storage","loc":{"lines":{"from":192,"to":223}}}}],["2992",{"pageContent":"After creating the storage account, grant access to Gitpod cluster to that storage account.\n\n```bash\nKUBELET_PRINCIPAL_ID=$(az aks show --name \"${CLUSTER_NAME}\" --resource-group \"${RESOURCE_GROUP}\" --query \"identityProfile.kubeletidentity.objectId\" -o tsv)\n\nSTORAGE_ACCOUNT_ID=$(az storage account show \\\n  --name \"${STORAGE_ACCOUNT_NAME}\" \\\n  --output tsv \\\n  --query id \\\n  --resource-group \"${RESOURCE_GROUP}\")\n\naz role assignment create \\\n    --assignee \"${KUBELET_PRINCIPAL_ID}\" \\\n    --role \"Storage Blob Data Contributor\" \\\n    --scope \"${STORAGE_ACCOUNT_ID}\"\n```\n\nNote the storage account key for later use.\n\n```bash\nSTORAGE_ACCOUNT_KEY=$(az storage account keys list \\\n    --account-name \"${STORAGE_ACCOUNT_NAME}\" \\\n    --resource-group \"${RESOURCE_GROUP}\" \\\n    --query '[?keyName==`key1`].value' \\\n    --output tsv\n)\n```\n\n</div>\n\n</CloudPlatformToggle>","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/storage","loc":{"lines":{"from":226,"to":256}}}}],["2993",{"pageContent":"---\nlayout: false\n---\n\n<script lang=\"ts\">\n  import CloudPlatformToggle from \"$lib/components/docs/cloud-platform-toggle.svelte\";\n</script>\n\nKubernetes clusters pull their components from an **image registry**. In Gitpod, image registries are used for three different purposes:\n\n1. Pulling the actual Gitpod software (components like `server`, `image-builder`, etc.).\n2. Pulling base images for workspaces. This is either a default [workspace-full](https://hub.docker.com/r/gitpod/workspace-full) image or the image that is configured in the `.gitpod.yml` resp. `.gitpod.Dockerfile` in the repo.\n3. Pushing individual workspace images that are built for workspaces during image start. That are for example custom images that are defined in a `.gitpod.Dockerfile` in the repo. These images are pulled by Kubernetes after image building to provision the workspace. This is the only case where Gitpod needs write access to push images.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/registry","loc":{"lines":{"from":1,"to":13}}}}],["2994",{"pageContent":"We use a different registry for each of the three items in this reference architecture. The Gitpod images (1) are pulled from a public Google Container Registry we provide. The workspace base image (2) is pulled from Docker Hub (or from the location that is set in the Dockerfile of the corresponding repo). For the individual workspace images (3), we create an image registry that is provided by the used cloud provider. You could also configure Gitpod to use the same registry for all cases. That is particularly useful for [air-gap installations](../advanced/air-gap) where you have access to an internal image registry only.\n\n<CloudPlatformToggle id=\"cloud-platform-toggle-registry\">\n<div slot=\"gcp\">","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/registry","loc":{"lines":{"from":15,"to":18}}}}],["2995",{"pageContent":"<CloudPlatformToggle id=\"cloud-platform-toggle-registry\">\n<div slot=\"gcp\">\n\nBy enabling the service `containerregistry.googleapis.com` (see above), your project provides you with an OCI Image Registry. As credentials, we need the [object storage](#object-storage) service account key that we will create below. Therefore, there is no further action needed to use the registry in Gitpod.\n\n</div>\n<div slot=\"aws\">\n\nECR is currently not supported, so configuring the registry will require using an S3 bucket. You can reuse the same S3 bucket used for object storage or a separate one. The steps would be identical in creation, just use different names for both the bucket and the IAM user account.\n\n> Please refer to the [Object Storage](./single-cluster-ref-arch#object-storage) section for instructions on how to create an S3 bucket. You can re-use the bucket created there as your registry storage backe-end.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/registry","loc":{"lines":{"from":18,"to":28}}}}],["2996",{"pageContent":"To configure Gitpod to use the bucket created, ensure you select `In-cluster Registry`, and `S3 storage` in the installation UI. Then input the values of the bucket you've created. When setting the endpoint, please include the region such that `s3.amazonaws.com` becomes `s3.eu-west-1.amazonaws.com`.\n\n</div>\n\n<div slot=\"azure\">\n\nThis section will create an Amazon Container Registry for workspace images.\n\nFirst, generate a name for the ACR instance. ACR instance names must be unique; using a random suffix is recommended but any unique registry name is sufficient.\n\n```bash\nREGISTRY_NAME=\"gitpod$(openssl rand -hex 4)\"","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/registry","loc":{"lines":{"from":30,"to":41}}}}],["2997",{"pageContent":"Note the value of `$REGISTRY_NAME` for later use.\n\nCreate the container registry:\n\n```bash\naz acr create \\\n  --admin-enabled true \\\n  --location \"${LOCATION}\" \\\n  --name \"${REGISTRY_NAME}\" \\\n  --resource-group \"${RESOURCE_GROUP}\" \\\n  --sku Premium\n```\n\nThe registry server, username, and password will be needed when Gitpod is installed; note these values for later.\n\n```bash\nAZURE_REGISTRY_URL=$(az acr show \\\n    --name \"${REGISTRY_NAME}\" \\\n    --output tsv \\\n    --query loginServer \\\n    --resource-group \"${RESOURCE_GROUP}\")\n\nAZURE_REGISTRY_USERNAME=$(az acr credential show \\\n    --name \"${REGISTRY_NAME}\" \\\n    --output tsv \\\n    --query username \\\n    --resource-group \"${RESOURCE_GROUP}\")\n\nAZURE_REGISTRY_PASSWORD=$(az acr credential show \\\n    --name \"${REGISTRY_NAME}\" \\\n    --output tsv \\\n    --query \"passwords[0].value\" \\\n    --resource-group \"${RESOURCE_GROUP}\")\n```\n\n</div>\n\n</CloudPlatformToggle>","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/registry","loc":{"lines":{"from":44,"to":81}}}}]]