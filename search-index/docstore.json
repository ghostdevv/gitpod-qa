[["0",{"pageContent":"---\nauthor: brandonroberts\ndate: Thursday, 9 Mar 2022 11:00:00 UTC\ntitle: Appwrite and Gitpod\nexcerpt: Develop your Appwrite application on Gitpod without the need to install Docker on your local computer.\nteaserImage: teaser.jpg\nimage: image.jpg\n---\n\nWorking with Docker gives developers the ability to develop and deploy applications of all types locally without adding dependencies and binaries to their local development environment. Using Docker is used throughout the development lifecycle for fast, easy, and portable application development.","metadata":{"source":"https://www.gitpod.io/guides/appwrite-and-gitpod","loc":{"lines":{"from":1,"to":10}}}}],["1",{"pageContent":"Appwrite uses Docker to make spinning up multiple services as quickly as possible in a self-hosted environment, but we’re always looking at ways to give developers who are less familiar with Docker ways to try Appwrite. This is where Gitpod comes in. Gitpod is one way to combine the power of Docker and Appwrite together to get started quickly. This post shows you how to use Appwrite and Gitpod together to spin up a REST API with database access, authentication, storage, and more without installing anything on your local computer.\n\nGitpod is a platform that helps you spin up fresh, automated developer environments for each task, in the cloud, in seconds. The vision of Gitpod is to remove all friction from the developer experience & bring back joy and speed to developers' workflows.","metadata":{"source":"https://www.gitpod.io/guides/appwrite-and-gitpod","loc":{"lines":{"from":12,"to":14}}}}],["2",{"pageContent":"The goal of Appwrite is to make getting started and scaling with application development as quickly as possible. Traditionally, you would need to install Docker on your local machine to run Appwrite. Now with Appwrite and Gitpod, you can spin up Appwrite instances for multiple projects with a couple of steps!\n\nWe’ve set up a template repo with Gitpod and Appwrite together. You can start a new developer environment with this button:\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/appwrite/integration-for-gitpod)\n\nYou can also check out our demo application built with Gitpod, Appwrite, and Svelte: https://github.com/appwrite/demo-todo-with-svelte\n\nJust click the “Open in Gitpod” button, log in to GitHub and you’ll be up and running! You can also fork the repo and customize it even further! 👏","metadata":{"source":"https://www.gitpod.io/guides/appwrite-and-gitpod","loc":{"lines":{"from":16,"to":24}}}}],["3",{"pageContent":"Just click the “Open in Gitpod” button, log in to GitHub and you’ll be up and running! You can also fork the repo and customize it even further! 👏\n\nWe look forward to integrating more with Gitpod in the future! Check out the Gitpod homepage for more information and new development environment templates. Follow @appwrite and @gitpod on Twitter for more updates!\n\nLearn More\n\n-   🚀 [Getting started Tutorial](https://appwrite.io/docs/getting-started-for-server)\n-   🚀 [Appwrite GitHub](https://github.com/appwrite/appwrite)\n-   📜 [Appwrite Docs](https://appwrite.io/docs)\n-   💬 [Discord Community](https://discord.gg/appwrite)","metadata":{"source":"https://www.gitpod.io/guides/appwrite-and-gitpod","loc":{"lines":{"from":24,"to":33}}}}],["4",{"pageContent":"---\nauthor: jacobparis\ndate: Wednesday, 8 June 2022 11:00:00 UTC\ntitle: Automate .env files with Gitpod environment variables\nexcerpt: Gitpod's environment variables can be used to securely persist small files between workspaces without committing them to source control. Use this feature to automate the storage and retrieval of a .env file when workspaces are created.\nteaserImage: header.png\nimage: teaser.png\n---\n\nWorking with ephemeral developer environments has many advantages. When every new workspace starts from a clean slate, you never have to worry about uncommitted changes causing problems.\n\nBut sometimes you want uncommitted changes. Some things (configuration, secrets, etc) just shouldn't enter source control.\n\nIn a long-lived development environment, you can leave a `.env` file on the file system and it will survive the length of your project. When you integrate with a new service, you add their API keys to the file and be done with it.","metadata":{"source":"https://www.gitpod.io/guides/automate-env-files-with-gitpod-environment-variables","loc":{"lines":{"from":1,"to":14}}}}],["5",{"pageContent":"With Gitpod, creating a `.env` file works wonderfully for precisely one workspace. You can close and reopen that workspace as many times as you want and your `.env` file will still be there, but those who embrace ephemeral development wholeheartedly and want a new workspace for each task will quickly notice they need to set everything up again.\n\nSo how do you persist a file between workspaces without committing it to source control? You store it securely in a database.\n\nThe most convenient database to use is Gitpod's workspace environment variable storage. You can encode your `.env` file as a base64 string, and use the `gp` tool to store it in a Gitpod environment variable. You can then automate restoring from the environment variable to keep the .env persisted between workspaces.\n\nThe Gitpod CLI is built-in: simply run `gp env DOTENV=value` and you will be able to read `$DOTENV` in every workspace. If you're ready to start persisting files, follow the instructions below.","metadata":{"source":"https://www.gitpod.io/guides/automate-env-files-with-gitpod-environment-variables","loc":{"lines":{"from":16,"to":22}}}}],["6",{"pageContent":"The Gitpod CLI is built-in: simply run `gp env DOTENV=value` and you will be able to read `$DOTENV` in every workspace. If you're ready to start persisting files, follow the instructions below.\n\n> Note: The [maximum length of an environment variable value is 32k](https://github.com/gitpod-io/gitpod/blob/main/components/gitpod-protocol/src/protocol.ts#L239-L259), so if you have exceptionally large files to persist, consider an alternative solution, like [an enterprise secrets manager](https://www.jacobparis.com/blog/gitpod-env-1pass).","metadata":{"source":"https://www.gitpod.io/guides/automate-env-files-with-gitpod-environment-variables","loc":{"lines":{"from":22,"to":24}}}}],["7",{"pageContent":"## Saving the .env file after changes\n\nBase64 outputs text with a standard character set and no whitespace, so it's a good place to start. It does add line breaks though, which the `tr` text replacement utility can delete.\n\n```sh\n$ base64 .env\n\nOVRMQVNfVVJEEE1vbmdvZGIrc3sJ2Oi8vbXJnZGV2OlRMfaSnl0T1dFUVNpefFKVmZ\ndnVapdGkubW9uZ29hYi5uZXDvQdWRtaXQxdX2Rldj9ydZCDeVdyaQRlcz10cnVlJnc\nCk5FWFRfUFVCTElDX0dPT0dMvRV9QTEEGNfQVBJPUFJemFTeddfgURVREdaSll2WmV\n\n# Remove line breaks\n$ base64 .env | tr -d '\\\\n'\n\nOVRMQVNfVVJEEE1vbmdvZGIrc3sJ2Oi8vbXJnZGV2OlRMfaSnl0T1dFUVNpefFKVmZdnVapdGkubW9uZ29hYi5uZXDvQdWRtaXQxdX2Rldj9ydZCDeVdyaQRlcz10cnVlJncCk5FWFRfUFVCTElDX0dPT0dMvRV9QTEEGNfQVBJPUFJemFTeddfgURVREdaSll2WmV\n```\n\nGitpod's `gp` command line interface provides a quick way to get and set environment variables for the workspace.\n\nEvery time you make changes to the `.env` file, run this script to persist it across your Gitpod workspaces.\n\n```sh\n$ gp env -e DOTENV=\"$(base64 .env | tr -d '\\\\n')\"","metadata":{"source":"https://www.gitpod.io/guides/automate-env-files-with-gitpod-environment-variables","loc":{"lines":{"from":26,"to":48}}}}],["8",{"pageContent":"```\n\nSee how this script works at [ExplainShell](https://explainshell.com/explain?cmd=base64+.env+%7C+tr+-d+%27%5C%5Cn%27)","metadata":{"source":"https://www.gitpod.io/guides/automate-env-files-with-gitpod-environment-variables","loc":{"lines":{"from":49,"to":51}}}}],["9",{"pageContent":"## Restoring your .env in new workspaces\n\nGitpod will create a terminal for each command in each task in the `.gitpod.yml` file, and those shells will have access to the environment variables set for your Gitpod account.\n\n> Note: this only applies to command scripts. The init and before scripts by default do not load [user-specific environment variables](https://www.gitpod.io/docs/configure/projects/prebuilds#user-specific-environment-variables-in-prebuilds) for security reasons.\n\nDecoding the `$DOTENV` variable and writing to a file is all that's required to restore it and have a populated `.env` waiting for you by the time your new workspace has loaded.\n\n```sh\necho \"${DOTENV}\" | base64 -d > .env\n```","metadata":{"source":"https://www.gitpod.io/guides/automate-env-files-with-gitpod-environment-variables","loc":{"lines":{"from":53,"to":63}}}}],["10",{"pageContent":"## Improving the developer experience\n\nThe real power of Gitpod is in fully automating your developer environment, so while you can manually store and retrieve your `.env` file, you can achieve an even better developer experience by using Gitpod's Start Tasks to run the scripts for common user flows automatically.\n\nWhen a new developer is onboarding to your repository, they won't have a `$DOTENV` saved from a previous workspace. You can commit a `.env.example` file into the codebase that provides reasonable defaults for new developers. As part of the startup task, copy that example file into a real `.env` file to save the developer from having to do it manually.\n\nAnother concern is that if a developer makes local changes to their `.env` but hasn't persisted it yet, a workspace restart (like after a timeout) shouldn't erase their changes. If there is already a `.env` file when a workspace starts, don't try to override it at all.","metadata":{"source":"https://www.gitpod.io/guides/automate-env-files-with-gitpod-environment-variables","loc":{"lines":{"from":65,"to":71}}}}],["11",{"pageContent":"You can copy the following Gitpod Task directly into your `.gitpod.yml`. For more information, check out the [documentation for Start Tasks](https://www.gitpod.io/docs/configure/workspaces/tasks) on Gitpod","metadata":{"source":"https://www.gitpod.io/guides/automate-env-files-with-gitpod-environment-variables","loc":{"lines":{"from":73,"to":73}}}}],["12",{"pageContent":"```yml\ntasks:\n    - name: Restore .env file\n      command: |\n          if [ -f .env ]; then\n            # If this workspace already has a .env, don't override it\n            # Local changes survive a workspace being opened and closed\n            # but they will not persist between separate workspaces for the same repo\n            echo \"Found .env in workspace\"\n          else\n            if [ -z \"${DOTENV}\" ]; then\n              # There is no $DOTENV from a previous workspace\n              # Default to the example .env\n              echo \"Setting example .env\"\n              cp .env.example .env\n            else\n              # After making changes to .env, run this line to persist it to $DOTENV\n              #   gp env DOTENV=\"$(base64 .env | tr -d '\\n')\"\n              #\n              # Environment variables set this way are shared between all your workspaces for this repo\n              # The lines below will read $DOTENV and print a .env file","metadata":{"source":"https://www.gitpod.io/guides/automate-env-files-with-gitpod-environment-variables","loc":{"lines":{"from":75,"to":95}}}}],["13",{"pageContent":"#\n              # Environment variables set this way are shared between all your workspaces for this repo\n              # The lines below will read $DOTENV and print a .env file\n              echo \"Restoring .env from Gitpod\"\n              echo \"${DOTENV}\" | base64 -d > .env\n            fi\n          fi\n```","metadata":{"source":"https://www.gitpod.io/guides/automate-env-files-with-gitpod-environment-variables","loc":{"lines":{"from":95,"to":102}}}}],["14",{"pageContent":"---\nauthor: jacobparis, nancy-chauhan\ndate: Friday, 6 May 2022 11:00:00 UTC\ntitle: Connect Multiple Repositories on Gitpod using Tailscale\nexcerpt: Tailscale’s secure mesh technology based on WireGuard can connect machines securely across the internet, frictionlessly. ✨ This article will show how easy it is to connect Gitpod workspaces over a secure tunnel provided by Tailscale.\nteaserImage: header.jpg\nimage: teaser.jpg\n---\n\nSo, you are working on multiple services that need to talk to each other. Each part of your application lives in a different repository, or you might be collaborating on an integration project involving more than one product from different teams. With Gitpod, you set up secure and isolated cloud workspaces for your git repositories.\n\nBut how do we make workspaces talk to each other securely?","metadata":{"source":"https://www.gitpod.io/guides/connect-multiple-repositories-using-tailscale","loc":{"lines":{"from":1,"to":12}}}}],["15",{"pageContent":"But how do we make workspaces talk to each other securely?\n\n[We have teamed up with our friends](https://www.gitpod.io/blog/tailscale) at [Tailscale](https://tailscale.com/) to bring an easy way to solve this problem using their simple zero-config VPN, which comes pre-installed in Gitpod workspaces.\nTailscale's secure mesh technology based on WireGuard can connect machines securely across the internet, such as your Gitpod workspaces or a cloud or on-prem resource, like a database, frictionlessly. ✨\n\nThis guide will show how easy it is to connect Gitpod workspaces over a secure tunnel provided by Tailscale. Let's get started 🚀","metadata":{"source":"https://www.gitpod.io/guides/connect-multiple-repositories-using-tailscale","loc":{"lines":{"from":12,"to":17}}}}],["16",{"pageContent":"## A case for working with multiple repositories at a time\n\nA typical architecture these days is server-side rendering (SSR). You generate the view by calling backend services on the frontend server instead of calling your API from client devices. If you develop on your local machine, two repositories will be open in two IDE windows. Every service can communicate with each other as they are all running on the same machine.\n\n<figure class=\"flex flex-col items-center text-center\">\n  <img src=\"/images/guides/connect-multiple-repositories-using-tailscale/locahost-ssr.png\" alt=\"Multiple services can communincate with each-other when running on the same machine\" width=\"500\" />\n  <figcaption>Local setup</figcaption>\n</figure>\n\nIn Gitpod, each workspace runs in a secure sandbox. You can expose ports so that only your browser can access them. However, the workspaces cannot communicate with one another.","metadata":{"source":"https://www.gitpod.io/guides/connect-multiple-repositories-using-tailscale","loc":{"lines":{"from":19,"to":28}}}}],["17",{"pageContent":"In Gitpod, each workspace runs in a secure sandbox. You can expose ports so that only your browser can access them. However, the workspaces cannot communicate with one another.\n\n<figure class=\"flex flex-col items-center text-center\">\n  <img src=\"/images/guides/connect-multiple-repositories-using-tailscale/gitpod-workspace-without-tailscale.png\" alt=\"In Gitpod each workspace runs in a secure sandbox, workspaces cannont communicate with one another\" width=\"500\" />\n  <figcaption class=\"w-full\">Gitpod workspaces are secure and isolated</figcaption>\n</figure>\n\nAs long as only the browser interacts with the API, this will work with Gitpod without any changes. If you develop single-page applications and static sites where every network request is a client-side fetch, you don't need Tailscale.","metadata":{"source":"https://www.gitpod.io/guides/connect-multiple-repositories-using-tailscale","loc":{"lines":{"from":28,"to":35}}}}],["18",{"pageContent":"But if your application has a server-side that needs to fetch data from another workspace, it becomes a networking problem. The application server requires a secure network tunnel between them to send a request outside of its workspace and into the API workspace.\n\n**This is what Tailscale is made for ✨**\n\n<figure class=\"flex flex-col items-center text-center\">\n  <img src=\"/images/guides/connect-multiple-repositories-using-tailscale/gitpod-workspaces-with-tailscale.png\" alt=\"Connect multiple workspaces on Gitpod using Tailscale\" width=\"600\" />\n  <figcaption class=\"w-full\">Establish secure tunnel using Tailscale</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/guides/connect-multiple-repositories-using-tailscale","loc":{"lines":{"from":37,"to":44}}}}],["19",{"pageContent":"## Connecting multiple workspaces together with Tailscale\n\nWe can run Tailscale in each of our Gitpod workspaces, which will make them part of your \"tailnet\", a secure VPN consisting of your machines that can access each other. Traffic over your \"tailnet\" is fully end-to-end encrypted, with each workspace having its private key, so anyone, not even Tailscale, is capable of reading the traffic.\n\nIn Gitpod, each workspace can log into Tailscale and receive a list of secure IP addresses of other workspaces connected to your \"tailnet\". It is only possible to connect to these IPs from machines running Tailscale, which can be your workspaces or your local machines.","metadata":{"source":"https://www.gitpod.io/guides/connect-multiple-repositories-using-tailscale","loc":{"lines":{"from":46,"to":50}}}}],["20",{"pageContent":"Tailscale comes pre-installed with `gitpod/workspace-full`, Gitpod's base image for workspaces. So if you are using the default image or a custom docker image based on `workspace-full`, you are ready to go 🚀; else, you will need to add [instructions to install Tailscale](https://tailscale.com/download/linux) into your workspace.","metadata":{"source":"https://www.gitpod.io/guides/connect-multiple-repositories-using-tailscale","loc":{"lines":{"from":52,"to":52}}}}],["21",{"pageContent":"## 1. Add Tailscale to your `.gitpod.yml` tasks\n\n_Scroll to the bottom of this page for an example `.gitpod.yml` file, or follow these steps to set it up for yourself._\n\nThe “Connect to Tailscale” task will prompt you to log in. We only need to do this once. Next time, we fetch the token from Gitpod’s environment variables to skip the login.\n\nThe “Restore Tailscale daemon” task launches Tailscale and puts it in the background. It connects the workspace to your “tailnet” using your previously saved Tailscale token.","metadata":{"source":"https://www.gitpod.io/guides/connect-multiple-repositories-using-tailscale","loc":{"lines":{"from":54,"to":60}}}}],["22",{"pageContent":"```yml\ntasks:\n    - name: Restore Tailscale daemon\n      command: |\n          if [ -n \"${TS_STATE_TAILSCALE_EXAMPLE}\" ]; then\n            # restore the tailscale state from gitpod user's env vars\n            sudo mkdir -p /var/lib/tailscale\n            echo \"${TS_STATE_TAILSCALE_EXAMPLE}\" | sudo tee /var/lib/tailscale/tailscaled.state > /dev/null\n          fi\n          sudo tailscaled\n    - name: Connect to Tailscale\n      command: |\n          if [ -n \"${TS_STATE_TAILSCALE_EXAMPLE}\" ]; then\n            sudo -E tailscale up\n          else\n            sudo -E tailscale up --hostname \"gitpod-${GITPOD_GIT_USER_NAME// /-}-$(echo ${GITPOD_WORKSPACE_CONTEXT} | jq -r .repository.name)\"\n            # store the tailscale state into gitpod user\n            gp env TS_STATE_TAILSCALE_EXAMPLE=\"$(sudo cat /var/lib/tailscale/tailscaled.state)\"\n          fi\n          exit\n```","metadata":{"source":"https://www.gitpod.io/guides/connect-multiple-repositories-using-tailscale","loc":{"lines":{"from":62,"to":82}}}}],["23",{"pageContent":"## 2. Open a workspace for each repository\n\nCommit the `.gitpod.yml` to your repository.\n\nNext time when you launch your workspace, your Gitpod terminal will give you a login link with a unique token. Once you’ve logged in, it will connect your workspace to your Tailscale account.\n\nTailscale allows you to log in via GitHub, Google, Microsoft, or email. As long as you are logged in to the same organization in each of your repositories, your Gitpod workspaces will be able to send requests to each other.","metadata":{"source":"https://www.gitpod.io/guides/connect-multiple-repositories-using-tailscale","loc":{"lines":{"from":84,"to":90}}}}],["24",{"pageContent":"## 3. View your connected workspaces\n\nRun `tailscale status` to see the private IP addresses for your other workspaces. These are only accessible to other Tailscale nodes. Your workspaces can communicate with each other, but neither your browser nor anyone else will be able to access them.\n\n```\n$ tailscale status\n100.11.166.123  main-backend-service username@  linux   -\n100.11.201.28   main-application username@  linux   -\n```\n\nGitpod is all about giving you a great developer experience. So if you have to look up IP addresses every time you make a workspace, it isn’t great.\n\nWe can use a `.gitpod.yml` task to search Tailscale and create environment variables for each connected service.\n\nLet’s say `backend-service` is the name of the repository you want to connect. You can find its IP address by running the following command:\n\n```\n$ tailscale status | grep backend-service | cut -d \" \" -f 1\n100.11.166.123","metadata":{"source":"https://www.gitpod.io/guides/connect-multiple-repositories-using-tailscale","loc":{"lines":{"from":92,"to":110}}}}],["25",{"pageContent":"```\n\nYou can set the result as an environment variable so that your application can use it later.\n\nIn this example, this task looks for `backend-service` and sets an environment variable named `API_URL` pointing to it before launching the application.\n\n```yml\n- name: Start application\n  init: npm install\n  command: |\n      REPO_NAME=backend-service\n      API_IP=$(tailscale status | grep $REPO_NAME | cut -d \" \" -f 1)\n      if [ \"${API_IP}\" ]; then\n        echo \"🐳 Connected to $REPO_NAME through Tailscale\"\n        API_URL=\"http://$API_IP:5000/api\" npm run dev\n      else\n        echo \"🐳 Failed to connect to $REPO_NAME. Make sure a $REPO_NAME workspace is active and logged into Tailscale.\"\n        npm run dev\n      fi\n  env:\n      PORT: 3000\n      NODE_ENV: development","metadata":{"source":"https://www.gitpod.io/guides/connect-multiple-repositories-using-tailscale","loc":{"lines":{"from":111,"to":132}}}}],["26",{"pageContent":"```\n\nTo try this out, add this task to the tasks list in your `.gitpod.yml` file, commit it, and try it out with a new workspace. Your workspaces should be able to send requests to each other through their secure Tailscale IP addresses. Now you are fully set up for multi-repo development on Gitpod. ✨","metadata":{"source":"https://www.gitpod.io/guides/connect-multiple-repositories-using-tailscale","loc":{"lines":{"from":133,"to":135}}}}],["27",{"pageContent":"## Sample `.gitpod.yml`","metadata":{"source":"https://www.gitpod.io/guides/connect-multiple-repositories-using-tailscale","loc":{"lines":{"from":137,"to":137}}}}],["28",{"pageContent":"```yml\nimage: gitpod:workspace/full\nports:\n    - port: 3000\n      onOpen: ignore\ntasks:\n    - name: Restore Tailscale daemon\n      command: |\n          if [ -n \"${TS_STATE_TAILSCALE_EXAMPLE}\" ]; then\n            # restore the tailscale state from gitpod user's env vars\n            sudo mkdir -p /var/lib/tailscale\n            echo \"${TS_STATE_TAILSCALE_EXAMPLE}\" | sudo tee /var/lib/tailscale/tailscaled.state > /dev/null\n          fi\n          sudo tailscaled\n    - name: Start application\n      init: |\n          eval $(gp env -e)\n          npm install\n      command: |\n          REPO_NAME=backend-service\n          API_IP=$(tailscale status | grep $REPO_NAME | cut -d \" \" -f 1)\n          if [ \"${API_IP}\" ]; then\n            echo \"🐳 Connected to $REPO_NAME through Tailscale\"\n            API_URL=\"http://$API_IP:5000/api\" npm run dev\n          else\n            echo \"🐳 Failed to connect to $REPO_NAME. Make sure a $REPO_NAME workspace is active and logged into Tailscale.\"","metadata":{"source":"https://www.gitpod.io/guides/connect-multiple-repositories-using-tailscale","loc":{"lines":{"from":139,"to":164}}}}],["29",{"pageContent":"npm run dev\n          fi\n      env:\n          PORT: 3000\n          NODE_ENV: development\n    - name: Connect to Tailscale\n      command: |\n          if [ -n \"${TS_STATE_TAILSCALE_EXAMPLE}\" ]; then\n            sudo -E tailscale up\n          else\n            sudo -E tailscale up --hostname \"gitpod-${GITPOD_GIT_USER_NAME// /-}-$(echo ${GITPOD_WORKSPACE_CONTEXT} | jq -r .repository.name)\"\n            # store the tailscale state into gitpod user\n            gp env TS_STATE_TAILSCALE_EXAMPLE=\"$(sudo cat /var/lib/tailscale/tailscaled.state)\"\n          fi\n          exit\n```","metadata":{"source":"https://www.gitpod.io/guides/connect-multiple-repositories-using-tailscale","loc":{"lines":{"from":166,"to":181}}}}],["30",{"pageContent":"---\nauthor: maciejwalkowiak\ndate: Wednesday, 09 Nov 2022 02:00:00 UTC\nexcerpt: Gitpod workspace image (the image on which your environment runs) comes with preinstalled Java development tools like SDKMan,and Gradle. There are at least two ways how you can to configure Java version for each new Gitpod workspace.\nteaserImage: teaser.webp\nimage: header.webp\ntitle: How to use a custom Java distribution on Gitpod\n---\n\nThe default Gitpod [`workspace-full`](https://www.gitpod.io/docs/configure/workspaces/workspace-image) image comes with preinstalled Java development tools like [SDKMan](https://sdkman.io/), [Maven](https://maven.apache.org/) and [Gradle](https://gradle.org/).\n\nWhen you execute `java --version` in the terminal, you'll find out that the current Java version is Java 11 (at the time of writing this blog post).\n\nSince [SDKMan](https://sdkman.io/) is installed, you can easily switch to a different Java version with:\n\n```bash\nsdk install java 17.0.4.1-tem","metadata":{"source":"https://www.gitpod.io/guides/custom-java-distribution-on-gitpod","loc":{"lines":{"from":1,"to":17}}}}],["31",{"pageContent":"```\n\nBut this change will be reflected only in your current workspace. If someone else opens the Gitpod workspace for the same Gitpod repository or if you recreate the workspace, Java will be back to 11, and the version you installed with SDKMan will be gone.\n\nThere are at least two ways to configure the Java version for each new Gitpod workspace.","metadata":{"source":"https://www.gitpod.io/guides/custom-java-distribution-on-gitpod","loc":{"lines":{"from":18,"to":22}}}}],["32",{"pageContent":"## Set Java version with `.gitpod.yml`\n\nGitpod workspaces can be configured with [`.gitpod.yml`](https://www.gitpod.io/docs/configure/workspaces). We can specify [startup task(s)](https://www.gitpod.io/docs/configure/workspaces/tasks) that will execute shell commands for us:\n\n```yml\ntasks:\n    - before: sdk install java 17.0.4.1-tem\n```\n\nThis is almost good. The problem is that `sdk install` prompts the user to set the installed version as a default. There's no flag to run the command in non-interactive mode, but there is a [hacky workaround](https://github.com/sdkman/sdkman-cli/issues/101#issuecomment-155938383):\n\n```yml\ntasks:\n    - before: sdk install java 17.0.4.1-tem < /dev/null\n```\n\nThe drawback is that this command takes some time to run and is executed every time the workspace is created.\n\nInstead, we can create a custom workspace image that will be built only once.","metadata":{"source":"https://www.gitpod.io/guides/custom-java-distribution-on-gitpod","loc":{"lines":{"from":24,"to":42}}}}],["33",{"pageContent":"## Set Java version with workspace image\n\nGitpod gives an option to use a [custom Docker image](https://www.gitpod.io/docs/configure/workspaces/workspace-image) on which the workspace runs. Let's create one that uses `Java 17` by default:\n\nRemove the `before` task from `.gitpod.yml` and instead set the `image.file` property to `.gitpod.Dockerfile.`\n\n```yml\nimage:\n    file: .gitpod.Dockerfile\n```\n\nNext, create a file `.gitpod.Dockerfile`. If you are happy with the default Gitpod workspace image, you can use it as a base.\n\n```dockerfile\nFROM gitpod/workspace-full:2022-10-25-06-57-58\n\nSHELL [\"/bin/bash\", \"-c\"]\nRUN source \"/home/gitpod/.sdkman/bin/sdkman-init.sh\"  \\\n    && sdk install java 17.0.4.1-tem < /dev/null","metadata":{"source":"https://www.gitpod.io/guides/custom-java-distribution-on-gitpod","loc":{"lines":{"from":44,"to":62}}}}],["34",{"pageContent":"```\n\nLet's break it down:\n\n1. It is recommended to use a specific Docker image tag for a base image. Go to https://hub.docker.com/r/gitpod/workspace-full and look for the latest tag, then use it in FROM command in the Dockerfile.\n2. Change shell to bash, source SDKMan init so that `sdk` command becomes available, and run `sdk install` like we previously did in the `.gitpod.yml`:\n\nThen, when you create a new repository with these files, only on the first run, Gitpod builds an image:\n\n![build-image](/images/guides/custom-java-distribution-on-gitpod/build-image.png)\n\n.. and once the workspace is ready:\n\n```bash\njava --version\n```\n\n**Example output**:\n\n```bash\nPicked up JAVA_TOOL_OPTIONS:  -Xmx3489m\nopenjdk 17.0.4.1 2022-08-12\nOpenJDK Runtime Environment Temurin-17.0.4.1+1 (build 17.0.4.1+1)\nOpenJDK 64-Bit Server VM Temurin-17.0.4.1+1 (build 17.0.4.1+1, mixed mode, sharing)","metadata":{"source":"https://www.gitpod.io/guides/custom-java-distribution-on-gitpod","loc":{"lines":{"from":63,"to":86}}}}],["35",{"pageContent":"```\n\n# Use a JDK that is unavailable in SDKman\n\nWhat if the JDK we want to use is not available in SDKMan? Since we are using a Dockerfile, we can write shell scripts.\n\nAs an example, let's use [JetBrains distribution of the OpenJDK](https://github.com/JetBrains/JetBrainsRuntime).\nUse the following `.gitpod.Dockerfile` contents:\n\n```dockerfile\nFROM gitpod/workspace-full:2022-10-25-06-57-58\nSHELL [\"/bin/bash\", \"-c\"]\nRUN wget https://cache-redirector.jetbrains.com/intellij-jbr/jbr-17.0.4.1-linux-x64-b653.1.tar.gz\nRUN sudo tar zxf jbr-17.0.4.1-linux-x64-b653.1.tar.gz --directory /opt/\nRUN echo 'export JAVA_HOME=/opt/jbr-17.0.4.1-linux-x64-b653.1/' >> /home/gitpod/.bashrc \\\n    && echo 'export PATH=/opt/jbr-17.0.4.1-linux-x64-b653.1/bin:$PATH' >> /home/gitpod/.bashrc","metadata":{"source":"https://www.gitpod.io/guides/custom-java-distribution-on-gitpod","loc":{"lines":{"from":87,"to":102}}}}],["36",{"pageContent":"```\n\nLet's break it down:\n\n1. Download JetBrains Runtime release from https://github.com/JetBrains/JetBrainsRuntime/releases/\n2. Unpack it and move to `/opt/`\n\nNow, two important points:\n\n3. `export JAVA_HOME` is effectively overwriting the one set by SDKMan\n4. Add JDK bin directory to `$PATH`. It is important to put it before what's already been there so that the new JDK bin is before the SDKMan path.\n\nFinally, use `.gitpod.Dockerfile` from your `.gitpod.yml`:\n\n```yml\nimage:\n    file: .gitpod.Dockerfile\n```\n\nAnd follow [see it in action!](https://www.gitpod.io/docs/configure/workspaces#see-it-in-action)\n\nOnce you recreate the workspace, and the new image is built:\n\n```bash\njava --version\n```\n\n**Example output**:\n\n```bash\nPicked up JAVA_TOOL_OPTIONS:  -Xmx3489m\nopenjdk 17.0.4.1 2022-08-12\nOpenJDK Runtime Environment JBR-17.0.4.1+1-653.1-nomod (build 17.0.4.1+1-b653.1)\nOpenJDK 64-Bit Server VM JBR-17.0.4.1+1-653.1-nomod (build 17.0.4.1+1-b653.1, mixed mode)\n```\n\nThat's all folks!","metadata":{"source":"https://www.gitpod.io/guides/custom-java-distribution-on-gitpod","loc":{"lines":{"from":103,"to":139}}}}],["37",{"pageContent":"---\nauthor: ejoreo\ndate: Wednesday, 12 July 2023 02:00:00 UTC\nexcerpt: A guide to getting started with dbt and Gitpod. Inclusive of examples using dbt + BigQuery and dbt + Snowflake.\nteaserImage: teaser.webp\nimage: header.webp\ntitle: How to get started with dbt and Gitpod\n---\n\ndbt helps data teams by enabling faster data transformation, providing organized and transparent workflows, and ensuring reliable data sets. The incorporation of tools like dbt in the face of larger and more complex datasets is forcing organizations to labor against many of the same development challenges traditionally faced by software engineers.\n\nOne of these challenges is managing the analytics engineers' development environments across different use cases, workload configurations, versions, and so on. By using a cloud development environment like Gitpod for your dbt projects, you can ensure your data and analytics engineers are always working in a secure and reproducible context.","metadata":{"source":"https://www.gitpod.io/guides/get-started-with-dbt-and-gitpod","loc":{"lines":{"from":1,"to":12}}}}],["38",{"pageContent":"With this guide you will learn how to:\n\n-   Create a Gitpod cloud development environment\n-   Configure, establish, and test connections between Gitpod, dbt, and your data warehouse\n-   Customize your workspace IDE","metadata":{"source":"https://www.gitpod.io/guides/get-started-with-dbt-and-gitpod","loc":{"lines":{"from":14,"to":18}}}}],["39",{"pageContent":"### Requirements\n\nTo follow along, you will need:\n\n-   A [Gitpod account](https://gitpod.io/login)\n-   A [dbt account](https://www.getdbt.com/signup/) if using dbt Cloud\n-   Your data warehouse access credentials\n\nThis guide will use the [dbt + BigQuery](https://github.com/gitpod-samples/template-dbt-bigquery) and [dbt + Snowflake](https://github.com/gitpod-samples/template-dbt-snowflake) templates as examples, but any cloud setup that is supported by dbt core in a local dev environment can also be run in a Gitpod workspace.","metadata":{"source":"https://www.gitpod.io/guides/get-started-with-dbt-and-gitpod","loc":{"lines":{"from":20,"to":28}}}}],["40",{"pageContent":"## Turn your dbt project into a Gitpod workspace\n\nThe fastest way to open up your dbt project in a Gitpod workspace is to prefix the GitHub/GitLab/Bitbucket url in the browser with “gitpod.io/#”.\n\nYou will be prompted to confirm the Context URL (your Git repo), IDE of choice, and [the workspace class](https://www.gitpod.io/docs/configure/workspaces/workspace-classes). We recommend selecting VS Code (browser or desktop) for dbt projects because of the capabilities of the [vscode-dbt-power-user extension](https://github.com/innoverio/vscode-dbt-power-user). As far as provisioning, Gitpod processes heavy workloads in the cloud warehouse, so the Standard workspace is sufficient for most use cases.","metadata":{"source":"https://www.gitpod.io/guides/get-started-with-dbt-and-gitpod","loc":{"lines":{"from":30,"to":34}}}}],["41",{"pageContent":"## Automate and standardize your dbt development environments\n\nThe first step is to add a `.gitpod.yml` file to the root of the repository. This file describes workspace configurations, including:\n\n-   The installation of languages and dependencies\n-   The configuration of the terminal(s) and opened ports\n-   The installation of extensions in the IDE\n\nA `.gitpod.yml` file can be added manually, or a boilerplate version can be generated by running `gp init`.\n\nGitpod uses Docker images as the foundation for instances of development environments, or what we refer to as workspaces. The default workspace image for Gitpod contains support for multiple languages, such as Go, Java, Python, and JavaScript, but you can also use [slimmer images](https://hub.docker.com/u/gitpod/) or [specify your own](https://www.gitpod.io/docs/configure/workspaces/workspace-image#configuring-a-workspace-image).","metadata":{"source":"https://www.gitpod.io/guides/get-started-with-dbt-and-gitpod","loc":{"lines":{"from":36,"to":46}}}}],["42",{"pageContent":"While the specifics will change depending on the data platform, the `.gitpod.Dockerfile` file is where you will pull your Gitpod workspace image, set the path of your dbt profiles directory, and install your requirements.\n\nLike the `.gitpod.yml` file, `.gitpod.Dockerfile` needs to be added to the root of the repository. Here is an example `.gitpod.Dockerfile`, consistent across both the dbt + BigQuery and dbt +Snowflake templates:\n\n```\n# Use Gitpod's latest Python image.\nFROM gitpod/workspace-python:latest\n\n# Set the path of dbt's profiles file.\nENV DBT_PROFILES_DIR=./profiles/\n\n# Copy requirements file from host into Container.\nCOPY requirements.txt /tmp\n\n# Install the requirements.\nRUN cd /tmp && pip install -r requirements.txt","metadata":{"source":"https://www.gitpod.io/guides/get-started-with-dbt-and-gitpod","loc":{"lines":{"from":48,"to":63}}}}],["43",{"pageContent":"```\n\nAfter using the standard Python image, setting up environment variables, setting the dbt profile path, and installing the requirements, dbt is now ready to be set up. For these examples, the only requirement is installing the matching[dbt adapter](https://docs.getdbt.com/docs/supported-data-platforms) for your warehouse.\n\nIn the following `.gitpod.yml` examples, the `.gitpod.Dockerfile` configured above will be called first, installing languages and dependencies.\n\nEach object in the `tasks` section creates a new terminal in the development environment. In our examples, a terminal named `connect` executes three commands to complete and test the dbt configuration:\n\n```yml title=\".gitpod.yml\"\n# BigQuery\nimage:\n    file: .gitpod.Dockerfile\n\nports:\n    - port: 8080\n      onOpen: open-preview","metadata":{"source":"https://www.gitpod.io/guides/get-started-with-dbt-and-gitpod","loc":{"lines":{"from":64,"to":79}}}}],["44",{"pageContent":"```yml title=\".gitpod.yml\"\n# BigQuery\nimage:\n    file: .gitpod.Dockerfile\n\nports:\n    - port: 8080\n      onOpen: open-preview\n\ntasks:\n    - name: connect\n      command: |\n          echo $DBT_SERVICE_ACCOUNT > $GITPOD_REPO_ROOT/profiles/service_account.json\n          dbt debug\n          dbt deps\n      openMode: split-left\n    - name: generate docs\n      command: |\n          dbt docs generate\n          dbt docs serve --no-browser --port 8080\n      openMode: split-right","metadata":{"source":"https://www.gitpod.io/guides/get-started-with-dbt-and-gitpod","loc":{"lines":{"from":79,"to":99}}}}],["45",{"pageContent":"```\n\n```yml title=\".gitpod.yml\"\n# Snowflake\nimage:\n    file: .gitpod.Dockerfile\n\nports:\n    - port: 8080\n      onOpen: open-preview\n\ntasks:\n    - name: connect\n      # The private SSH key is stored in a single line as DBT_SNOWFLAKE_PRIVATE_KEY.\n      # Unfortunately, Snowflake will only accept the key if it is multi-line.\n      # The sed command transforms the key\n      # and then stores it as a file, which can be processed by Snowflake.\n      command: |\n          echo \"${DBT_SNOWFLAKE_PRIVATE_KEY}\" | sed -e \"s/-----BEGIN PRIVATE KEY-----/&\\n/\" -e \"s/-----END PRIVATE KEY-----/\\n&/\" -e \"s/\\S\\{64\\}/&\\n/g\" > $GITPOD_REPO_ROOT/profiles/private_key.p8\n          dbt debug\n          dbt deps\n      openMode: split-left\n    - name: generate docs\n      command: |\n          dbt docs generate\n          dbt docs serve --no-browser --port 8080\n      openMode: split-right","metadata":{"source":"https://www.gitpod.io/guides/get-started-with-dbt-and-gitpod","loc":{"lines":{"from":100,"to":126}}}}],["46",{"pageContent":"```\n\nFollowing the reference to the custom Docker image, your dbt credentials need to be passed into Gitpod so that the workspace can connect to your data platform. The most convenient way of making auth credentials accessible inside of the workspace is using Gitpod’s [user-specific environment variables](https://www.gitpod.io/docs/configure/projects/environment-variables#user-specific-environment-variables).\n\nThe `dbt debug` command tests the connection with the database. When executing this, dbt searches for the credentials to connect with the database in the [`profiles.yml` file](https://docs.getdbt.com/docs/core/connect-data-platform/connection-profiles), shown here:","metadata":{"source":"https://www.gitpod.io/guides/get-started-with-dbt-and-gitpod","loc":{"lines":{"from":127,"to":131}}}}],["47",{"pageContent":"```yml title=\".gitpod.yml\"\n# BigQuery\ndefault:\n    target: dev\n    outputs:\n        dev:\n            type: bigquery\n            method: service-account\n            project: \"{{ env_var('DBT_PROJECT') }}\"\n            dataset: \"{{ env_var('DBT_DEV_DATASET') }}\"\n            threads: 4\n            keyfile: \"{{ env_var('GITPOD_REPO_ROOT') }}/profiles/service_account.json\"\n            location: \"{{ env_var('DBT_LOCATION') }}\"","metadata":{"source":"https://www.gitpod.io/guides/get-started-with-dbt-and-gitpod","loc":{"lines":{"from":133,"to":145}}}}],["48",{"pageContent":"```\n\n```yml title=\".gitpod.yml\"\n# Snowflake\ndefault:\n    target: dev\n    outputs:\n        dev:\n            type: snowflake\n            account: \"{{ env_var('DBT_SNOWFLAKE_ACCOUNT') }}\"\n            user: \"{{ env_var('DBT_SNOWFLAKE_USER') }}\"\n            private_key_path: \"{{ env_var('GITPOD_REPO_ROOT') }}/profiles/private_key.p8\"\n\n            database: \"{{ env_var('DBT_SNOWFLAKE_DB') }}\"\n            warehouse: \"{{ env_var('DBT_SNOWFLAKE_WH') }}\"\n            schema: \"{{ env_var('DBT_SNOWFLAKE_SCHEMA') }}\"\n```\n\nThis file contains references to environment variables that have to be set by the user. **This is the only step users of the repository have to do manually in order to launch a functional dbt dev environment** once the configuration has been added to the repository, and only needs to be done once.\n\nAfter the connection has been tested successfully, the workspace is ready to be used.","metadata":{"source":"https://www.gitpod.io/guides/get-started-with-dbt-and-gitpod","loc":{"lines":{"from":146,"to":166}}}}],["49",{"pageContent":"## Customize VS Code and Git for dbt + Gitpod\n\nThe `.gitpod.yml` file also allows you to describe IDE extensions and configurations.\n\nWe recommend using VS Code for dbt projects in Gitpod workspaces. While VS Code is not ideal for these environments out-of-the-box, there are several extensions that offer a greatly improved development experience, namely the vscode-dbt-power-user extension. Some of this extension’s best feature are:\n\n-   Autocompletion of dbt models\n-   The ability to preview model results in VS Code\n-   The ability to display model lineage\n-   Integration of ability to run and test dbt models into VS Code's UI\n\nFor syntax highlighting, we recommend [jinjahtml](https://github.com/samuelcolvin/jinjahtml-vscode).","metadata":{"source":"https://www.gitpod.io/guides/get-started-with-dbt-and-gitpod","loc":{"lines":{"from":168,"to":179}}}}],["50",{"pageContent":"For syntax highlighting, we recommend [jinjahtml](https://github.com/samuelcolvin/jinjahtml-vscode).\n\nBeyond your IDE, the `.gitpod.yml` file also gives you the opportunity to configure [prebuilds](https://www.gitpod.io/docs/configure/projects/prebuilds) for GitHub repositories. Prebuilds can install dependencies and run builds before a workspace opens, especially helpful for code bases that are large or can't be compiled directly. Check [the documentation](https://www.gitpod.io/docs/references/gitpod-yml#gitconfig) for a more detailed look at these options.\n\nFor a basic set of recommended extensions and Github prebuild configurations, you can add the following to your `.gitpod.yml` file:","metadata":{"source":"https://www.gitpod.io/guides/get-started-with-dbt-and-gitpod","loc":{"lines":{"from":179,"to":183}}}}],["51",{"pageContent":"For a basic set of recommended extensions and Github prebuild configurations, you can add the following to your `.gitpod.yml` file:\n\n```yml title=\".gitpod.yml\"\n# Same for both BigQuery and Snowflake projects\nvscode:\n    extensions:\n        - ms-python.python\n        - mechatroner.rainbow-csv\n        - innoverio.vscode-dbt-power-user\n        - ms-toolsai.jupyter\n        - ms-toolsai.jupyter-keymap\n        - ms-toolsai.jupyter-renderers\n        - ms-toolsai.vscode-jupyter-cell-tags\n        - ms-toolsai.vscode-jupyter-slideshow\n        - samuelcolvin.jinjahtml\n\ngithub:\n    prebuilds:\n        master: true\n        branches: true\n        pullRequests: true\n        pullRequestsFromForks: false\n        addCheck: true\n        addComment: false\n        addBadge: false","metadata":{"source":"https://www.gitpod.io/guides/get-started-with-dbt-and-gitpod","loc":{"lines":{"from":183,"to":207}}}}],["52",{"pageContent":"```\n\nYou can preview your configs by running `gp validate`. For any workspace configuration options to persist, you must commit the `.gitpod.yml` and `.gitpod.Dockerfile` to the root of the repository and start a new workspace (a workspace restart is not sufficient). Once committed, configs become available to other users launching the workspace.\n\n[Try Gitpod today](https://gitpod.io/login).","metadata":{"source":"https://www.gitpod.io/guides/get-started-with-dbt-and-gitpod","loc":{"lines":{"from":208,"to":212}}}}],["53",{"pageContent":"---\nauthor: axonasif, pawlean, nancy-chauhan\ndate: Wednesday, 30 Jun 2022 02:00:00 UTC\nexcerpt: A detailed guide for setting up your Android phone for optimal development experience with Gitpod\nteaserImage: teaser.png\nimage: thumbnail.png\ntitle: Getting started with Gitpod in Android\n---\n\nYes! You can learn to code and build software with Gitpod on Android! Gitpod is a complete dev environment running in the cloud, which turns any android phone into a powerful dev machine. I have been developing software on my phone using Gitpod for a long time! It is powerful, and I believe with Gitpod, anyone can learn to code and build software without any hurdles.","metadata":{"source":"https://www.gitpod.io/guides/getting-started-with-gitpod-in-android","loc":{"lines":{"from":1,"to":10}}}}],["54",{"pageContent":"Gitpod changed my life and enabled me to continue my journey into software development. I have talked more about it [here](../blog/software-development-from-my-android-phone-at-datacenter-speeds). In this guide, I have discussed how Gitpod is fully usable from an Android phone. I will be sharing how I set up Gitpod on my Android phone. If you're curious, follow along 🚀\n\n# Browser\n\nTo get started, all you need is a browser. I use the [Kiwi](https://kiwibrowser.com/) browser on Android. It brings you almost a full-blown desktop-like chromium experience but on mobile! That means you get chrome-devtools, extensions support, keyboard shortcuts and many more.","metadata":{"source":"https://www.gitpod.io/guides/getting-started-with-gitpod-in-android","loc":{"lines":{"from":12,"to":16}}}}],["55",{"pageContent":"##### Important notes about using Gitpod on Kiwi:\n\n-   There is a chromium [bug](https://bugs.chromium.org/p/chromium/issues/detail?id=1202651) with mouse cursor hover. If you face this bug, you must toggle off your installed accessibility services while using Kiwi.\n-   I recommend toggling off “**Prefer native applications**” on Kiwi from its **Settings > Accessibility**.\n<figure>\n<video preload=\"metadata\" controls muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Toggle off auto native app opening\" src=\"/images/guides/getting-started-with-gitpod-in-android/kiwi_settings.mp4\" type=\"video/webm\"></video>\n</figure>\n\n![conversation 1](/images/guides/getting-started-with-gitpod-in-android/convo.svg 'kumquat asks')","metadata":{"source":"https://www.gitpod.io/guides/getting-started-with-gitpod-in-android","loc":{"lines":{"from":18,"to":26}}}}],["56",{"pageContent":"![conversation 1](/images/guides/getting-started-with-gitpod-in-android/convo.svg 'kumquat asks')\n\n-   Some shortcuts like **Windows/Meta + Key**, **Control + Space** and etc. will not work on Gitpod as Android captures them for its internal shortcuts. Unfortunately, you can not disable or remap them easily. To workaround, you will have to remap some of your conflicting IDE shortcuts from the [VS Code Browser](https://www.gitpod.io/docs/references/ides-and-editors/vscode-browser) settings.","metadata":{"source":"https://www.gitpod.io/guides/getting-started-with-gitpod-in-android","loc":{"lines":{"from":26,"to":28}}}}],["57",{"pageContent":"##### Kiwi tips:\n\n-   Try pressing “**Windows/Meta key**” + “**/**” on the Kiwi browser to see all browser and Android-system shortcuts.\n-   My favourite shortcuts are Alt + Tab for quick application switching and Ctrl + T for quickly creating a new Kiwi tab.\n-   Install the [Gitpod extension](https://chrome.google.com/webstore/detail/gitpod-always-ready-to-co/dodmmooeoklaejobgleioelladacbeki) on Kiwi to make your life easier.\n-   I also use the [Vimium](https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=en) extension on Kiwi for swiftly navigating through websites without using my mouse.\n\n# Hardware keyboard and mouse\n\nNext, you need a way to control your phone as you would with a PC. There are two easy things you can do:\n\n-   You can get a Bluetooth keyboard and mouse combo (this is the most convenient choice)\n-   Or you can get a USB hub for your Android device and use a wired keyboard and mouse (this is the most responsive)","metadata":{"source":"https://www.gitpod.io/guides/getting-started-with-gitpod-in-android","loc":{"lines":{"from":30,"to":42}}}}],["58",{"pageContent":"I've gone through both routes and ended up sticking with Bluetooth devices for convenience!\n\n# Display\n\nAs phone displays are so small, it can get tricky coding from such a small screen. There's no easy solution for this problem if you've got some entry-level or mid-range Android phone like me. Nowadays, even entry-level Android devices are powerful enough to serve you well and run a complete Linux GUI environment with virtually no lag unless you're a hardcore mobile gamer.\n\n**Note:** If you got a tablet or a high-end Android phone with USB-C 3.0, you probably don't need to care about the particular issue I will discuss in detail. You can skip it!\n\nCheap phones won't likely come with USB-C 3.0, so you won't be able to get direct VIDEO output from your phone to an external monitor/TV. Some third-party products utilize ADB, and a mini-CPU on the HDMI end to stream your Android display over a cable.","metadata":{"source":"https://www.gitpod.io/guides/getting-started-with-gitpod-in-android","loc":{"lines":{"from":44,"to":52}}}}],["59",{"pageContent":"![external monitor](/images/guides/getting-started-with-gitpod-in-android/external_monitor.jpg 'external monitor setup with android')\n\nIn my case, I use a Chinese HDMI adapter for my microUSB phone to connect with this external screen. You can take \"[Renkchip](https://www.amazon.com/dp/B08DLJCV55/)\" for reference if you want one too. But, you have to consider a few things first:\n\n-   If you're planning to buy it to connect with a TV, ensure that its input lag isn't more than 15ms. Otherwise, your experience will be terrible combined with the adapter input lag. You can use the [incredible Rtings.com TV input lag list](https://www.rtings.com/tv/tests/inputs/input-lag) for reference.\n-   Avoid unbranded adapters if you buy online since most of those use a weak CPU for processing the VIDEO data on the HDMI end.\n    ![conversation 2](/images/guides/getting-started-with-gitpod-in-android/convo2.svg 'kumquat asks')","metadata":{"source":"https://www.gitpod.io/guides/getting-started-with-gitpod-in-android","loc":{"lines":{"from":54,"to":60}}}}],["60",{"pageContent":"We can also utilize some software-based things; these can be helpful whether you're using an external screen or not. For instance:\n\n-   Press the F11 key on a Gitpod workspace to make VS CODE full screen on the Kiwi browser.\n\n-   Increase the **Smallest/Minimal Weight** on your phone's [**Developer options**](https://developer.android.com/studio/debug/dev-options#enable). It can be also referred as [DPI](https://en.wikipedia.org/wiki/Dots_per_inch). It will make things take less space on your tiny screen when the value is increased. **Please remember that it can brick some devices when increased too much, so don't go too far.**\n<figure>\n<video preload=\"metadata\" controls muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"modify DPI without root\" src=\"/images/guides/getting-started-with-gitpod-in-android/modify_dpi.mp4\" type=\"video/webm\"></video>\n</figure>\n\n# Extra Tips & tricks","metadata":{"source":"https://www.gitpod.io/guides/getting-started-with-gitpod-in-android","loc":{"lines":{"from":62,"to":71}}}}],["61",{"pageContent":"# Extra Tips & tricks\n\n-   You can use an app called [Rotation Control](https://play.google.com/store/apps/details?id=org.crape.rotationcontrol) to force landscape/auto-rotate mode for every app on Android (including your Home launcher!)\n-   I'm using a $2 phone stand, it's called \"Retractable L7 Phone Stand\", sharing the name for reference in case you want to find something similar in your local market or online. Or you can put your phone against a book as well 😆\n\nCongratulations 🎉. Now you have set up the browser and display and connected the hardware keyboard and mouse with your Android phone. You can now code, build and learn seamlessly using Gitpod ⚡️. To get started, you can refer to the [following documentation](https://www.gitpod.io/docs/introduction/getting-started).","metadata":{"source":"https://www.gitpod.io/guides/getting-started-with-gitpod-in-android","loc":{"lines":{"from":71,"to":76}}}}],["62",{"pageContent":"If you have more questions, drop by our community Discord server. We have the [#mobile-and-tablets](https://discord.com/channels/816244985187008514/890901203624534026) channel where fellow mobile-dev enthusiasts hang out!","metadata":{"source":"https://www.gitpod.io/guides/getting-started-with-gitpod-in-android","loc":{"lines":{"from":78,"to":78}}}}],["63",{"pageContent":"---\nauthor: jankeromnes\ndate: Thu Jun 6 2019 09:00:00 GMT+0000 (UTC)\nexcerpt: I recently stumbled upon a new project on GitHub that piqued my interest. It proposed a new type of database that I was dying to try out. So\nsubtitle: How to fully automate your dev environments on GitHub\nteaserImage: teaser.jpg\nimage: thumbnail.jpg\ntitle: Gitpodifying — The Ultimate Guide\n---\n\nI recently stumbled upon a new project on GitHub that piqued my interest. It proposed a new type of database that I was dying to try out. So I cloned their repository, and looked at their README for a way to build their code.","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":1,"to":11}}}}],["64",{"pageContent":"After activating a Python 3.7 virtual env and running `pip install -v -e .` as suggested, I was soon faced with a rather cryptic build output. Investigating a bit revealed that some build command was failing due to a missing package: `zlib1g-dev`. I figured out the right incantation to install it on my machine, then tried again. Next it was `libreadline6-dev` that was missing. After a few similar iterations, I guessed that the project probably needed all [PostgreSQL build dependencies](https://www.manniwood.com/postgresql_93_compile_install_howto/index.html), so I went ahead and installed all that. Yet somehow the project still wouldn't build, showing yet another error, but by then I was out of free time and had to call it a day. Sadly, I hadn't been able to run this project even once.","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":13,"to":13}}}}],["65",{"pageContent":"If you're a developer, this scenario probably sounds familiar. In fact, that repository's setup instructions were already pretty helpful, but still we frequently face these kinds of setup problems — you probably have similar stories of your own. In the software industry, we collectively lose too much time and energy setting up many projects, on countless systems, often in half-broken ways.\n\nWhat if there was a better way to do this? Maybe one day we can all just forget about troubleshooting build dependencies, and simply focus on the projects' code itself? I have good news: Developer environments can be automated, in the form of scripts and Dockerfiles in your repository, in a way that allows anyone interested in your project to get a ready-to-code environment for free in seconds, without having to worry about dependencies ever again. How does it work? I'm glad you asked!\n\n<br>\n\n<div class=\"overflow-x-auto\">","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":15,"to":21}}}}],["66",{"pageContent":"| <div style=\"width:120px\">&nbsp;</div>     | The idea in brief                                                                                                                                                                                                                                        |\n| ----------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| &nbsp;&nbsp;<strong>The problem</strong>  | Figuring out which dependencies, tools, and language versions to install to properly configure a dev environment takes a lot of time and energy, and has to be repeated from scratch every time you use a different computer, and for every new project. |","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":23,"to":25}}}}],["67",{"pageContent":"| &nbsp;&nbsp;<strong>The cause</strong>    | Most setup instructions are written in a format that is not executable or reproducible, like plain text in Markdown files.                                                                                                                               |\n| &nbsp;&nbsp;<strong>The solution</strong> | To solve this problem for every developer of your project, setup instructions should be written in a format that is executable, like scripts and Dockerfiles, and ideally versioned and shipped with your code. Gitpod was invented to make this easy.   |","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":26,"to":27}}}}],["68",{"pageContent":"</div>","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":27,"to":27}}}}],["69",{"pageContent":"## Introducing Gitpod\n\nSo you're ready to fully automate your GitHub project's development setup? That's great! I'm here to help you achieve this. 👍\n\nIn this guide, I will be using Gitpod, a free developer service that makes it easy for maintainers to automate any non-executable setup instructions as code. If you follow it, you will end up with a button that launches pre-configured containers for your project, thus allowing everyone to check out your repository and run your code in a single click.\n\nThe first thing you'll probably want to do is try opening your repository in Gitpod. You can do this by navigating to your GitHub project root, and then typing `gitpod.io/#` before the URL. It should look a bit like this:\n\n```bash\ngitpod.io/#https://github.com/gitpod-io/website","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":35,"to":44}}}}],["70",{"pageContent":"```\n\n<br>\n\nWhen you see the IDE and Terminal, just try building and running your project as usual. Maybe it will just work out of the box, but maybe you'll notice that something is missing or broken, and you can iterate on your Gitpod setup to fix it (see table of contents below).\n\nOnce you're happy with your automated setup, a cool way to guide your contributors toward it is to add a Gitpod badge to your README. Here is a Markdown snippet you can use (just replace the `...` with your repo):\n\n```markdown\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/...)\n```\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-io/website)\n\nHappy with your onboarding experience? Great! You're all set. 🎉\n\nDo you wish Gitpod would do more for your project? Then please read on. 👇","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":45,"to":61}}}}],["71",{"pageContent":"## Table of contents\n\n-   [Introducing Gitpod](#introducing-gitpod)\n-   [Table of contents](#table-of-contents)\n-   [Running init scripts](#running-init-scripts)\n-   [Accelerating startup with prebuilt workspaces](#accelerating-startup-with-prebuilt-workspaces)\n-   [Installing missing packages](#installing-missing-packages)\n-   [Installing databases](#installing-databases)\n    -   [PostgreSQL](#postgresql)\n    -   [MySQL](#mysql)\n    -   [Redis](#redis)\n    -   [MongoDB](#mongodb)\n-   [Getting a Virtual Desktop](#getting-a-virtual-desktop)\n-   [Opening previews](#opening-previews)\n-   [Solving common preview problems](#solving-common-preview-problems)\n    -   [Invalid Host Header](#invalid-host-header)\n    -   [CSP errors](#csp-errors)\n    -   [Unreachable localhost URLs](#unreachable-localhost-urls)\n    -   [No usable sandbox](#no-usable-sandbox)\n-   [Setting env variables](#setting-env-variables)","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":63,"to":82}}}}],["72",{"pageContent":"## Running init scripts\n\nAdding a `.gitpod.yml` file at the root of your repository allows customizing Gitpod for your project. A useful thing it can do is running scripts on start-up (or sometimes even before start-up: the [Gitpod app](https://github.com/apps/gitpod-io) can watch your repo and start pre-building the `init` step for every commit, see the next section for more info):\n\n```yml\ntasks:\n    - init: npm install\n      command: npm start\n```\n\n(Please note the single `-` symbol: `init` and `command` should run in the same Terminal, one after each other.)\n\nTo open multiple Terminals on startup, just add more `-` entries under `tasks`:\n\n```yml\ntasks:\n    - init: npm install\n      command: npm run server\n    - command: npm run client","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":84,"to":102}}}}],["73",{"pageContent":"```\n\n<br>\n\nBut this example probably won't work, because `npm run client` likely also needs dependencies from `npm install`, so you might get an error like this in your second Terminal:\n\n> `Error: Cannot find module 'lib'`\n\nIn order to make a Terminal wait for another Terminal to finish some task (e.g. installing dependencies), you can use the `gp sync-done` and `gp sync-await` commands like so:\n\n```yml\ntasks:\n    - init: |\n          npm install\n          gp sync-done installation\n      command: npm run server\n    - init: gp sync-await installation\n      command: npm run client\n```\n\nTo learn more about configuring Terminals, please visit [the docs](/docs/configure/workspaces/tasks).","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":103,"to":123}}}}],["74",{"pageContent":"## Accelerating startup with prebuilt workspaces\n\nWith medium-to-large GitHub projects, your `init` step might take a long time to complete, especially if you need to compile code. To avoid that you and your contributors wait forever, you can make Gitpod auto-build your repository on every push, and start building workspaces even before Gitpod is opened. This will shave up to several minutes off your workspace loading times, and make your developers very happy.\n\nTo enable prebuilt workspaces, simply install the [Gitpod app](https://github.com/apps/gitpod-io) for your GitHub repository, and Gitpod will start auto-building all your branches and Pull Requests continuously in the background.\n\nOptionally, you can then customize the app's behavior for your project by editing your `.gitpod.yml` like so:","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":125,"to":131}}}}],["75",{"pageContent":"Optionally, you can then customize the app's behavior for your project by editing your `.gitpod.yml` like so:\n\n```yml\ngithub:\n    prebuilds:\n        # enable for the master/default branch (defaults to true)\n        master: true\n        # enable for all branches in this repo (defaults to false)\n        branches: false\n        # enable for pull requests coming from this repo (defaults to true)\n        pullRequests: true\n        # add a check to pull requests (defaults to true)\n        addCheck: true\n        # add a \"Review in Gitpod\" button as a comment to pull requests (defaults to false)\n        addComment: false","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":131,"to":145}}}}],["76",{"pageContent":"```\n\nTo see all configuration options for the Gitpod app, please visit [the docs](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":146,"to":148}}}}],["77",{"pageContent":"## Installing missing packages\n\nThe default Docker image for all Gitpod workspaces ([gitpod/workspace-full](https://github.com/gitpod-io/workspace-images/blob/d43c719bb2ff7b6849c0456fe21e3ca06c20168f/dazzle.yaml#L18-L32)) already comes with many common developer tools. But sometimes you may see an error like this one:\n\n> `bash: tool: command not found`\n\nAnd if you try to install it locally using `sudo`, you might see an error like this:\n\n> `sudo: effective uid is not 0`\n\n<br>\n\nThe solution is to write a small Dockerfile for your project. If a particular `tool` is missing in your Gitpod workspace, simply add this at the top of your `.gitpod.yml`:\n\n```yml\nimage:\n    file: .gitpod.dockerfile\n```\n\n<br>\n\nThen add a new file called `.gitpod.dockerfile` at the root of your repository, containing:\n\n```dockerfile\nFROM gitpod/workspace-full\n\nRUN sudo apt-get update \\\n && sudo apt-get install -y \\\n    tool \\\n && sudo rm -rf /var/lib/apt/lists/*","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":150,"to":179}}}}],["78",{"pageContent":"```\n\n<br>\n\nFrom now on, every new Gitpod workspace that will be opened for your repository will come with `tool` pre-installed. Cool right?","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":180,"to":184}}}}],["79",{"pageContent":"## Installing databases\n\nMany projects need a database to work properly. Here is how to install the most common databases in Gitpod — take your pick! (If yours is missing please [let us know](https://twitter.com/gitpod), we'd love to help you.)","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":186,"to":188}}}}],["80",{"pageContent":"### PostgreSQL\n\nTo get PostgreSQL for your project, you can use our dedicated [PostgreSQL image](https://github.com/gitpod-io/workspace-images/blob/main/chunks/tool-postgresql).\n\nSimply put the following line to your `.gitpod.yml` file:\n\n```yml\nimage: gitpod/workspace-postgres\n```\n\n<br>\n\nThis will give you an auto-starting PostgreSQL server (it should auto-start every time you open a new Terminal), plus a few utility scripts that you can run in a Terminal or in a [`.gitpod.yml`](#running-init-scripts) command:\n\n-   `pg_start`: start the PostgreSQL service\n-   `pg_stop`: stop the PostgreSQL service\n-   `pg_ctl status`: check if the PostgreSQL service is running\n\nOnce the PostgreSQL server is running, you can use the `psql` CLI as usual:\n\n```bash\n$ psql -h localhost -d postgres\npsql (10.8 (Ubuntu 10.8-0ubuntu0.18.10.1))\nType \"help\" for help.\n\npostgres=#\n```","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":190,"to":216}}}}],["81",{"pageContent":"### MySQL\n\nIf your project needs MySQL to work, we also have a dedicated [MySQL image](https://github.com/gitpod-io/workspace-images/blob/d43c719bb2ff7b6849c0456fe21e3ca06c20168f/chunks/tool-mysql/Dockerfile#L2). Simply base your `.gitpod.dockerfile` on:\n\n```dockerfile\nFROM gitpod/workspace-mysql\n```\n\n<br>\n\nThen you'll get an auto-starting MySQL server, and you can use the `mysql` CLI like so:\n\n```bash\nmysql -e \"show databases;\"\n```\n\n### Redis\n\nTo install Redis for your project, simply add these instructions to your `.gitpod.dockerfile`:\n\n```dockerfile\nFROM gitpod/workspace-full\n\n# Install Redis.\nRUN sudo apt-get update \\\n && sudo apt-get install -y \\\n  redis-server \\\n && sudo rm -rf /var/lib/apt/lists/*\n```\n\n<br>\n\nThen, you'll be able to start the Redis server by running this in a Terminal or in a `.gitpod.yml` command:\n\n```bash\nredis-server\n```","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":218,"to":254}}}}],["82",{"pageContent":"### MongoDB\n\nTo get MongoDB for your project, you can use our dedicated [MongoDB image](https://github.com/gitpod-io/workspace-images/blob/d43c719bb2ff7b6849c0456fe21e3ca06c20168f/chunks/tool-mongodb/Dockerfile#L2) built on top of `gitpod/workspace-base`.\n\nSimply base your `.gitpod.dockerfile` on:\n\n```dockerfile\nFROM gitpod/workspace-mongodb\n```\n\n<br>\n\nThen start the MongoDB server by running this in a Terminal or in a `.gitpod.yml` command:\n\n```bash\nmkdir -p /workspace/data && mongod --dbpath /workspace/data\n```\n\nNote: Storing MongoDB's data inside `/workspace` ensures that it will get backed up and restored properly when you stop and restart a workspace, or share a snapshot.","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":256,"to":274}}}}],["83",{"pageContent":"## Getting a Virtual Desktop\n\nIf your application needs to run a graphical UI, you might see an error like this:\n\n> `Gtk: cannot open display: :0`\n\n<br>\n\nThat's because by default, Gitpod workspaces don't have a graphical environment at all. Luckily, we have a dedicated [noVNC image](https://github.com/gitpod-io/workspace-images/blob/d43c719bb2ff7b6849c0456fe21e3ca06c20168f/chunks/tool-vnc/Dockerfile#L2) built on top of `gitpod/workspace-full` that comes with a Virtual Desktop.\n\nSimply base your `.gitpod.dockerfile` on:\n\n```dockerfile\nFROM gitpod/workspace-full-vnc","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":276,"to":289}}}}],["84",{"pageContent":"```\n\n<br>\n\nThis will give you a virtual X server and a Remote Desktop client running on port `6080`:\n\n![Virtual X server and Remote Desktop client running on port 6080](/images/guides/gitpodify/virtual-x-sever-running-on-a-remote-desktop-client.png)\n\nThis can be useful for example to run Electron apps graphically. For that, you'll just need a few extra dependencies in your `.gitpod.dockerfile`:\n\n```dockerfile\nFROM gitpod/workspace-full-vnc\n\n# Install Electron dependencies.\nRUN sudo apt-get update \\\n && sudo apt-get install -y \\\n  libasound2-dev \\\n  libgtk-3-dev \\\n  libnss3-dev \\\n && sudo rm -rf /var/lib/apt/lists/*","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":290,"to":309}}}}],["85",{"pageContent":"```\n\n<br>\n\nTo learn more, please see our dedicated post on [Developing native UI applications in Gitpod](/blog/native-ui-with-vnc).\n\nOr check out this fun [Windows 95 in Electron](https://github.com/felixrieseberg/windows95) example (see the <a href=\"https://github.com/felixrieseberg/windows95/blob/master/docs/docker-kubernetes-gitpod.md\" target=\"_blank\">Gitpod demo</a>, [.gitpod.yml](https://github.com/gitpod-io/definitely-gp/blob/master/windows95/.gitpod.yml), and [Dockerfile](https://github.com/gitpod-io/definitely-gp/blob/master/windows95/Dockerfile)).","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":310,"to":316}}}}],["86",{"pageContent":"## Opening previews\n\nGitpod will automatically detect when processes like web servers start listening on a port, and display a notification that allows you to open a web preview:\n\n![Port notification](/images/guides/gitpodify/port-notification.png)\n\nIf you want to suppress these notifications, or pre-configure a specific behavior, you can do this in your `.gitpod.yml` file:\n\n```yml\nports:\n    - port: 8080\n      onOpen: open-preview\n    - port: 9000-9999\n      onOpen: ignore\n```\n\n<br>\n\nAnother way to open web previews is to run `gp preview <url>` in a Terminal or in your [`.gitpod.yml`](#running-init-scripts) commands. This can be used in combination with `gp url <port>` to open a web preview for a given port, like so:\n\n```yml\ntasks:\n    - command: python3 -m http.server 8080\n    - command: gp preview $(gp url 8080)","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":318,"to":341}}}}],["87",{"pageContent":"```\n\n<br>\n\nHowever, if the preview opens too soon, you might see an error like this:\n\n> Port 8080 didn't respond\n\nIf you'd like a task to run only when a given port becomes active, you can use `gp ports await <port>` like so:\n\n```yml\ntasks:\n    - init: npm install\n      command: npm run server 3000\n    - command: gp ports await 3000 && gp preview $(gp url 3000)\n```\n\n<br>\n\nIf the `Port X didn't respond` error persists, please double-check in the Terminal output that your server is actually running on that port, then refresh the Preview pane. (Or, if it's a Browser tab, please close it and re-open it from the IDE's \"Open Ports\" view — refresh isn't currently supported for Browser preview tabs).","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":342,"to":361}}}}],["88",{"pageContent":"## Solving common preview problems\n\nSometimes web servers like to negotiate a little before accepting to serve your precious content. Here is how to troubleshoot the most common issues.","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":363,"to":365}}}}],["89",{"pageContent":"### Invalid Host Header\n\nSince we're running in a cloud workspace, URLs like `localhost:3000` should be converted to something like `3000-abc-123.ws-eu0.gitpod.io`. You can get the exact preview URL for a port by running `gp url <port>`, or by checking the \"Open Ports\" IDE view.\n\nThis custom hostname may annoy servers like [webpack-dev-server](https://github.com/webpack/webpack-dev-server), because they usually only accept requests on `localhost`. So you might see an error like this one:\n\n> Invalid Host Header\n\n<br>\n\nTo make your server accept non-`localhost` requests, you can use the following CLI parameters (e.g. with `webpack-dev-server` or `ng serve`):\n\n> `--host 0.0.0.0 --disable-host-check`\n\n<br>\n\nOr you can edit your `webpack.config.js`, or `vue.config.js`, like so:\n\n```js\ndevServer: {\n  host: '0.0.0.0',\n  disableHostCheck: true,\n},","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":367,"to":389}}}}],["90",{"pageContent":"```\n\n<br>\n\nAlternatively, if you don't want to use `disableHostCheck`, you can also add `'.gitpod.io'` to your `allowedHosts`, like so:\n\n```js\ndevServer: {\n  host: '0.0.0.0',\n  allowedHosts: ['localhost', '.gitpod.io'],\n},\n```\n\n<br>\n\nSee all `webpack-dev-server` configuration options [here](https://webpack.js.org/configuration/dev-server/).\n\nIf you don't have direct access to the dev server configuration, e.g. when using frameworks like [Create React App](https://github.com/facebook/create-react-app), you might want to look in the framework's docs for a similar option, like CRA's environment variable `DANGEROUSLY_DISABLE_HOST_CHECK`:\n\n```yml\ntasks:\n    - before: export DANGEROUSLY_DISABLE_HOST_CHECK=true\n      init: yarn install\n      command: yarn start\n```","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":390,"to":414}}}}],["91",{"pageContent":"### CSP errors\n\nIf the Preview pane still refuses to display your web app, please open the Browser Console (e.g. by typing `F12` or by exploring your Browser menus). In there, you might see errors mentioning things like:\n\n> `X-Frame-Options`\n\nOr:\n\n> `CSP frame-src`\n\nThese mean that your web app refuses to be opened inside an `<iframe>`, for security reasons (that's what the Preview pane uses to display web apps). In that case, please open previews in an external Browser tab instead, e.g. by going to the \"Open Ports\" IDE view and clicking the `Open Browser` button.","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":416,"to":426}}}}],["92",{"pageContent":"### Unreachable localhost URLs\n\nIf your web app starts to show up in a preview, but it doesn't work well, the Browser Console might reveal failing requests to `localhost` URLs like:\n\n```bash\nhttp://localhost:9000/api/v1/","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":428,"to":433}}}}],["93",{"pageContent":"```\n\nThis happens for example with some Angular apps, that like to run a web client on a port like `3000`, and an API backend on a different port like `9000`.\n\nIf that's your case, you can try two things:\n\n1. Replace all references to `localhost:9000` in your web client with the result of the `gp port 9000` command (should be something like `9000-abc-123.ws-eu0.gitpod.io`)\n2. Configure your port `3000` server to proxy certain requests (e.g. starting with `/api`) to `localhost:9000` on the server-side\n\nYou can sometimes do 1. with a simple configuration change, and here is how you can achieve 2. in an Angular app using the [Angular CLI](https://cli.angular.io/):\n\nCreate a new file called `proxy.config.json`, that includes a proxy route like:\n\n```json\n{\n\t\"/api\": {\n\t\t\"target\": \"http://localhost:9000\",\n\t\t\"secure\": false\n\t}\n}","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":434,"to":453}}}}],["94",{"pageContent":"```\n\nAnd then point `ng serve` to that file using the `--proxy-config` parameter:\n\n```bash\nng serve --proxy-config proxy.config.json --host 0.0.0.0 --disable-host-check --port 3000\n```\n\n<br>\n\nFor a complete example using PostgreSQL, Angular CLI, disableHostCheck, and a backend proxy, please check out the [PeerTube](https://joinpeertube.org/) project ([.gitpod.yml](https://github.com/Chocobozzz/PeerTube/blob/develop/.gitpod.yml), [Dockerfile](https://github.com/Chocobozzz/PeerTube/blob/develop/support/docker/gitpod/Dockerfile), [proxy.config.json](https://github.com/Chocobozzz/PeerTube/blob/develop/client/proxy.config.json), [ng serve command](https://github.com/Chocobozzz/PeerTube/blob/master/scripts/watch/client.sh)).","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":454,"to":464}}}}],["95",{"pageContent":"### No usable sandbox\n\nOk this is not really a preview problem, but I thought I'd mention it here anyway since we're already troubleshooting.\n\nMore and more projects are using headless Chrome as a dependency (e.g. via [Puppeteer](https://github.com/GoogleChrome/puppeteer)), and when running it in Gitpod, you might see an error that looks like:\n\n> Error: Failed to launch chrome!<br>\n> No usable sandbox!\n\n<br>\n\nIn this case, you'll want to use Chrome's `--no-sandbox` and/or `--disable-setuid-sandbox` flags. With Puppeteer, it may look like this:\n\n```js\nconst browser = await puppeteer.launch({\n\targs: ['--no-sandbox', '--disable-setuid-sandbox'],\n});\n```","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":466,"to":483}}}}],["96",{"pageContent":"## Setting env variables\n\nSometimes, your project needs some extra information that is either a secret, or it's different for each developer. A good example is tokens or credentials that are used to interact with external APIs or services. A good way to give these values to your project setup is via environment variables.\n\nTo ensure that a required env variable called `TOKEN` is defined, you can do something like this in your `.gitpod.yml`:\n\n```yml\ntasks:\n    - command: >\n          while [ -z \"$TOKEN\" ] ; do\n            printf \"\\n❗ The TOKEN environment variable is required. Please enter its value.\\n\" &&\n            read -s -p \"TOKEN: \" TOKEN ;\n          done ; gp env TOKEN=$TOKEN && printf \"\\nThanks\\n\"\n          # Now you can use $TOKEN","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":485,"to":498}}}}],["97",{"pageContent":"```\n\n<br>\n\nThis will check the value of `$TOKEN`, and if it's empty, it will ask the user to manually type its value into the Terminal, and then save that value for future workspaces with `gp env`.\n\nIf you need to have these values inside a file, you can add something like this to your `.gitpod.yml` commands:\n\n```yml\ntasks:\n    - command: echo \"$SSH_PRIVATE_KEY\" > ~/.ssh/id_rsa\n```\n\n<br>\n\nAnother (unsafe) way to pass an env variable to a single workspace is to add it in the Gitpod context URL, like so:\n\n```bash\nhttps://gitpod.io/#TOKEN=value/https://github.com/gitpod-io/website","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":499,"to":517}}}}],["98",{"pageContent":"```\n\n(But please don't use this for security-sensitive data like passwords and private keys, because URLs can easily be intercepted. Also, note that values should be URL-encoded.)\n\nFinally, users can also manage env variables for all their workspaces by visiting [gitpod.io/environment-variables](https://gitpod.io/environment-variables). You can learn more about managing Gitpod env variables in [the docs](/docs/configure/projects/environment-variables).\n\nFor a complete example of a project that requires env variables (saved in `.yml` config files), please see the [dev.to](https://dev.to/) project's [.gitpod.yml](https://github.com/thepracticaldev/dev.to/blob/master/.gitpod.yml).\n\n<br>\n\nPhew... that's about it! I hope you enjoyed reading through this guide and that it helped you in some way. If you still have questions or suggestions, please [let us know](https://twitter.com/jankeromnes). I'd love to help you and make this guide more useful.","metadata":{"source":"https://www.gitpod.io/guides/gitpodify","loc":{"lines":{"from":518,"to":528}}}}],["99",{"pageContent":"---\nauthor: nancy-chauhan, Siddhant-K-code, axonasif, loujaybee\ndate: Friday, 19 August 2022 02:00:00 UTC\nexcerpt: This guide will focus on topics and concepts that can help you set up an ephemeral dev environment on Gitpod\nteaserImage: header.jpg\nimage: teaser.jpg\ntitle: Build Projects in a Gitpod Ephemeral Dev Environment — The Ultimate Guide\n---\n\nGitpod is a remote development platform. Gitpod workspaces are ephemeral and only live for as long as you work on a task. While ephemeral workspaces are a very powerful feature, they're also likely new to you, which is why you're here. In this guide, we'll walk you through what ephemerality means for a development environment in the cloud and how Gitpod enables you to work in this totally new way of working. Welcome to the future!","metadata":{"source":"https://www.gitpod.io/guides/guide-ephemeral-dev-environment-on-gitpod","loc":{"lines":{"from":1,"to":10}}}}],["100",{"pageContent":"First up, what is ephemerality? Rather than having a single static environment (like your local machine), Gitpod users are encouraged to codify their dev environment as code (more on how to do this later!). With your project codified, you'll be able to spin up a new workspace, start coding and throw away the workspace when you're done.\n\nLet me give you a few examples where ephemerality shines :\n\n1. **Always start from a clean slate** - If you break something in your environment, rather than waste time trying to figure out exactly which environment variable or configuration you accidentally updated, throw away the workspace and start a new working workspace.\n2. **Work on many workspaces at once** - Let's say you're working on a feature while simultaneously supporting reviewing a colleague's code. Rather than having to update your local environment to swap between, you can create a new parallel workspace and code in two (or more!) workspaces simultaneously.","metadata":{"source":"https://www.gitpod.io/guides/guide-ephemeral-dev-environment-on-gitpod","loc":{"lines":{"from":12,"to":17}}}}],["101",{"pageContent":"Gitpod ensures when you open a new workspace, all the correct tools & packages are in place, any servers or processes are running, and more. We will also dig into neat features of Gitpod, such as 'Prebuilds', which install dependencies ahead of time so that when you open a new workspace, you don't have to wait for anything to install.\n\nThis guide will focus on topics and concepts that can help you set up an ephemeral dev environment on Gitpod:\n\n1. [Configuring your dev environment with code](#configuring-your-dev-environment-with-code)\n2. [Faster startup by enabling prebuilds](#faster-startup-by-enabling-prebuilds)\n3. [Persisting environment variables and files](#persisting-environment-variables-and-files)\n\nSound good? Let's dive in and learn how to configure your development environment with Gitpod.\n\n# Configuring your dev environment with code","metadata":{"source":"https://www.gitpod.io/guides/guide-ephemeral-dev-environment-on-gitpod","loc":{"lines":{"from":19,"to":29}}}}],["102",{"pageContent":"Sound good? Let's dive in and learn how to configure your development environment with Gitpod.\n\n# Configuring your dev environment with code\n\nTo start any project, you typically need to install the dependencies and tools required to run the project. This setup process can become tedious and error-prone if you repeatedly set up your dev environment. If you're working on ephemeral environments, you want to be able to throw away an environment and start a new one, so you don't want to have a single barrier to simply creating a new workspace.","metadata":{"source":"https://www.gitpod.io/guides/guide-ephemeral-dev-environment-on-gitpod","loc":{"lines":{"from":29,"to":33}}}}],["103",{"pageContent":"In Gitpod, you can configure your dev environment as code with `.gitpod.yml` and an optional `.gitpod.Dockerfile` file. Gitpod can be configured to install all the tools and dependencies you need to start your project. Since both these configuration files are committed to version control, you get all of the benefits of source control, such as viewing the history and authors of files. With this configuration, your dev environment remains consistent throughout the organization.","metadata":{"source":"https://www.gitpod.io/guides/guide-ephemeral-dev-environment-on-gitpod","loc":{"lines":{"from":35,"to":35}}}}],["104",{"pageContent":"## Configuring your project with a `.gitpod.yml`\n\nThe `.gitpod.yml` file prepares your dev environment by automating setup like dependency installation and specifying which application ports to open on workspace start. Every time you open your project or a repository in a new workspace, all the configured tasks are executed. The `.gitpod.yml` file lives at the root of your project. For example:\n\n```yml\n# Commands to start on workspace startup\ntasks:\n    - init: yarn install\n      command: yarn build\n# Ports to expose on workspace startup\nports:\n    - port: 8000\n      onOpen: open-preview\n```\n\nYou can read more about `.gitpod.yml` in [docs: config gitpod file](https://www.gitpod.io/docs/references/gitpod-yml)","metadata":{"source":"https://www.gitpod.io/guides/guide-ephemeral-dev-environment-on-gitpod","loc":{"lines":{"from":37,"to":52}}}}],["105",{"pageContent":"### Setting up your first `.gitpod.yml` ⚡️\n\n`youtube: E95oV_iqUtI `\n\n1. Open your repo in a new Gitpod workspace. The simplest way is by appending the entire repo URL (including the protocol) to `gitpod.io/#`, e.g. `gitpod.io/#https://github.com/gitpod-io/gitpod`\n2. Create a `.gitpod.yml` in the root directory of your project, e.g. `touch .gitpod.yml`\n    > Tip: Instead of manually creating the `gitpod.yml`, type `gp init` in the terminal of your Gitpod workspace. (`gp` is a CLI for Gitpod included in all Gitpod workspaces)\n3. For Gitpod to detect configuration changes, push and commit your `gitpod.yml`.\n4. Now open your project in a new workspace by prefixing your repo URL with `gitpod.io/#{your-repository-url}` or using the Gitpod extension.","metadata":{"source":"https://www.gitpod.io/guides/guide-ephemeral-dev-environment-on-gitpod","loc":{"lines":{"from":54,"to":62}}}}],["106",{"pageContent":"You can read more about `.gitpod.yml` in the [configure](https://www.gitpod.io/docs/references/gitpod-yml) documentation. For information about the `.gitpod.yml` file properties, see the [`.gitpod.yml` reference documentation](https://www.gitpod.io/docs/references/gitpod-yml).","metadata":{"source":"https://www.gitpod.io/guides/guide-ephemeral-dev-environment-on-gitpod","loc":{"lines":{"from":64,"to":64}}}}],["107",{"pageContent":"## Configure your developer environment based on a Dockerfile\n\nIn addition to supplying commands via the `.gitpod.yml`, you can also configure a Dockerfile. Using Docker can be helpful if you already have a Dockerfile for your application, are familiar with the format, or want to leverage the many benefits of the Dockerfile format, such as improved caching and performance. Gitpod workspaces, by default, start with an image called `workspace-full` (more on this soon), or you can configure a custom Dockerfile.","metadata":{"source":"https://www.gitpod.io/guides/guide-ephemeral-dev-environment-on-gitpod","loc":{"lines":{"from":66,"to":68}}}}],["108",{"pageContent":"### Gitpod default Docker image\n\nBy default, Gitpod uses `workspace-full` for Gitpod workspaces. `workspace-full` comes pre-installed with Docker, Nix, Go, Java, Node.js, C/C++, Python, Ruby, Rust, and PHP, as well as tools such as Homebrew, Tailscale, Nginx, and several more.\n\nGitpod [provides some premade and optimized workspace images](https://github.com/gitpod-io/workspace-images) for various programming languages and tools. You can select an image by adding it to your `.gitpod.yml` file.\n\nFor example, if you want to use Java 17, specify the following in your `.gitpod.yml` file.\n\n```yml\nimage: gitpod/workspace-java-17\n```\n\n> Note: To avoid unexpected breaking changes, we suggest that you explicitly pin your workspace image. For Gitpod images, we recommend using a time-stamped image tag for maximum reproducibility. For example, `image: gitpod/workspace-full:2022-08-17-18-37-55` (taken from the tags panel on this [dockerhub page](https://hub.docker.com/r/gitpod/workspace-full))","metadata":{"source":"https://www.gitpod.io/guides/guide-ephemeral-dev-environment-on-gitpod","loc":{"lines":{"from":70,"to":82}}}}],["109",{"pageContent":"### Bring your own Dockerfile\n\nSuppose one of the premade workspace images doesn't fit your needs, or you want to extend an image with additional configuration, such as a specific service or programming language. In that case, you can [bring your own (Docker) image to Gitpod](https://www.gitpod.io/blog/docker-in-gitpod).\n\n1. You can configure a custom Dockerfile by adding a reference to the Dockerfile location to use in your `.gitpod.yml`. We recommend the `.gitpod.Dockerfile` naming convention.\n\n```yml\nimage:\n    file: .gitpod.Dockerfile","metadata":{"source":"https://www.gitpod.io/guides/guide-ephemeral-dev-environment-on-gitpod","loc":{"lines":{"from":84,"to":92}}}}],["110",{"pageContent":"```\n\n2. Next, create a `.gitpod.Dockerfile` file at the root of your project.\n3. You can start using the lightweight base image [gitpod/workspace-base](https://github.com/gitpod-io/workspace-images) for your custom Docker image. The `workspace-base` image has some default tooling, whereas `gitpod/workspace-full` already has a lot of pre-installed installed tools.\n4. Start adding the commands you need for your dev environment.\n\nRead more about how to [configure a custom Dockerfile](https://www.gitpod.io/docs/configure/workspaces/workspace-image#configure-a-custom-dockerfile).\n\n# Faster startup by enabling prebuilds","metadata":{"source":"https://www.gitpod.io/guides/guide-ephemeral-dev-environment-on-gitpod","loc":{"lines":{"from":93,"to":101}}}}],["111",{"pageContent":"Read more about how to [configure a custom Dockerfile](https://www.gitpod.io/docs/configure/workspaces/workspace-image#configure-a-custom-dockerfile).\n\n# Faster startup by enabling prebuilds\n\nWhen working on your local machine, you typically have a single environment to configure and work on simultaneously. You manually install dependencies and system configurations when switching branches or projects. With Gitpod, you can have many concurrent workspaces. Rather than doing tasks like dependency installation when you swap the branch, you can start a new workspace based on your latest development environment image.","metadata":{"source":"https://www.gitpod.io/guides/guide-ephemeral-dev-environment-on-gitpod","loc":{"lines":{"from":101,"to":105}}}}],["112",{"pageContent":"Every time you create a new ephemeral workspace, a lot of time can be saved by using a Prebuild. Prebuilds allow you to configure asynchronous builds of your workspace image when it's updated or changed. This is a very similar approach to how Continuous Integration tools work. When collaborating with peers and working on the same branch, configuring a Prebuild can be helpful as Gitpod triggers it whenever there is a commit to the repository.\n\nFor example, the `.gitpod.yml` saves 41 minutes of installation and building time for the [Node.js](https://github.com/nodejs/node) repo that would otherwise have to be run on your machine. In Gitpod, the workspace image is prebuilt, so all you have to do is start a new workspace.","metadata":{"source":"https://www.gitpod.io/guides/guide-ephemeral-dev-environment-on-gitpod","loc":{"lines":{"from":107,"to":109}}}}],["113",{"pageContent":"<figure class=\"flex flex-col items-center text-center\">\n  <img src=\"/images/guides/guide-ephemeral-dev-environment-on-gitpod/tweet-image.png\" alt=\"This is tweet about of Node.js project. With Gitpod Prebuilds it got even faster\" width=\"400\" />\n   <figcaption class=\"w-full\">This is <a href=\"https://twitter.com/Siddhant_K_code/status/1548143768301318144\">tweet</a> about Node.js project. With <a href=\"https://www.gitpod.io/docs/configure/projects/prebuilds\">Gitpod Prebuilds</a> it got even faster.</figcaption>\n</figure>\n\n<figure class=\"flex flex-col items-center text-center\">\n  <img src=\"/images/guides/guide-ephemeral-dev-environment-on-gitpod/gitpod-prebuilds.png\" alt=\"Average of Time we save through prebuilds with our own Gitpod project\"/>\n   <figcaption class=\"w-full\">Average of Time we save through prebuilds with our Gitpod project.</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/guides/guide-ephemeral-dev-environment-on-gitpod","loc":{"lines":{"from":111,"to":119}}}}],["114",{"pageContent":"### How to get started with Prebuilds\n\nPrebuilds work for GitHub, Gitlab and Bitbucket repositories (see our [Prebuilds documentation](https://www.gitpod.io/docs/configure/projects/prebuilds#configuring-prebuilds-manually) for more). To give you a real example, though, let's take a look at how you can enable Prebuilds for GitHub:\n\n1. To enable Gitpod Prebuilds for a repository, you must install the [Gitpod GitHub App](https://github.com/apps/gitpod-io) for your repository.\n2. Click 'Configure' and choose the repository where you wish to install the Gitpod App.\n3. The GitHub app will create the prebuild for every merged commit (on the particular branch), or you can configure it for every PR, and Gitpod will store the prebuilt image. With Prebuilds, whenever a new workspace is created, Gitpod will load the previously built image.","metadata":{"source":"https://www.gitpod.io/guides/guide-ephemeral-dev-environment-on-gitpod","loc":{"lines":{"from":121,"to":127}}}}],["115",{"pageContent":"By default, Gitpod prepares prebuilt workspaces for all changes on the default branch and pull/merge requests from the same repository. Here is an example where [Dropwizard](https://github.com/dropwizard/dropwizard/blob/HEAD/.gitpod.yml) has enabled the Prebuilds. The GitHub prebuilds section in the `.gitpod.yml` file configures the specific conditions when prebuilds should be run.\n\n```yml\nGitHub:\n    prebuilds:\n        # enable for the default branch\n        master: true\n        # enable for all branches in this repo\n        branches: true\n        # enable for pull requests coming from this repo\n        pullRequests: true\n        # enable for pull requests coming from forks\n        pullRequestsFromForks: true\n        # add a check to pull requests\n        addCheck: true\n        # add a \"Review in Gitpod\" button as a comment to pull requests\n        addComment: false\n        # add a \"Review in Gitpod\" button to the pull request's description\n        addBadge: false","metadata":{"source":"https://www.gitpod.io/guides/guide-ephemeral-dev-environment-on-gitpod","loc":{"lines":{"from":129,"to":147}}}}],["116",{"pageContent":"```\n\n> **Important:** Prebuilds only save the workspace directory. Any file changes made outside of `/workspace` file hierarchy from `init` tasks will be lost on workspace start when prebuilds are enabled.\n\nYou can read more about prebuilds in the [following doc](https://www.gitpod.io/docs/configure/projects/prebuilds).\n\n# Persisting environment variables and files\n\nEvery time you start a project, you require API keys, secrets like database passwords or sensitive information that can't be committed to the version control system. These are usually added as environment variables that are used to configure a value in your code. When working with an ephemeral workspace, you will have to set up everything again for each new task. We will discuss a few ways with which we can persist these environment variables across Gitpod workspaces.","metadata":{"source":"https://www.gitpod.io/guides/guide-ephemeral-dev-environment-on-gitpod","loc":{"lines":{"from":148,"to":156}}}}],["117",{"pageContent":"## Configure environment variables in Gitpod\n\nYou can configure persistent environment variables in your Gitpod [Account settings](https://gitpod.io/variables).\n\n<figure class=\"flex flex-col items-center text-center\">\n  <img src=\"/images/guides/guide-ephemeral-dev-environment-on-gitpod/env-vars.png\" alt=\"Configure the persistent environment variables in your Gitpod account settings.\" />\n</figure>\n\nThe scope of each variable determines in what workspaces it will be available. Scope patterns follow the `owner/repository` pattern:\n\nYou can use a wildcard (denoted with a `*`) to match either the `owner` or `repo`, for example:","metadata":{"source":"https://www.gitpod.io/guides/guide-ephemeral-dev-environment-on-gitpod","loc":{"lines":{"from":158,"to":168}}}}],["118",{"pageContent":"You can use a wildcard (denoted with a `*`) to match either the `owner` or `repo`, for example:\n\n-   **Single organizations** - Setting `dropwizard/*` would make an environment variable available in all repositories owned by the organization dropwizard.\n-   **Single repository** - `*/dropwizard` would make an environment variable available on all repositories called `dropwizard`; this is especially useful for forks.\n-   **All organizations or repositories** - Using `*/*` would make an environment variable available in every repository for any organization for that given user.\n\n<figure class=\"flex flex-col items-center text-center\">\n  <img src=\"/images/guides/guide-ephemeral-dev-environment-on-gitpod/scope.png\" alt=\"Scope of each variable determines in what workspaces it will be available\" width=\"500\" />\n</figure>\n\nYou can read more about environment variables in [Environment Variables on Gitpod](https://www.gitpod.io/docs/configure/projects/environment-variables).","metadata":{"source":"https://www.gitpod.io/guides/guide-ephemeral-dev-environment-on-gitpod","loc":{"lines":{"from":168,"to":178}}}}],["119",{"pageContent":"### Persisting files between workspace restarts\n\n> For those of you who are looking to persist personal configurations with non-sensitive data, such as bash or zsh configs, you can use [dotfiles](https://www.gitpod.io/docs/configure/user-settings/dotfiles). For sensitive information, an option (outside of introducing your secret store, such as [vault](https://www.vaultproject.io/)) is to leverage: [environment variables](https://www.gitpod.io/docs/configure/projects/environment-variables) and consider encoding, e.g. with base64. See blog posts[[1]](https://www.gitpod.io/blog/personalize-your-gitpod-workspace-environment) [[2]](https://www.gitpod.io/guides/automate-env-files-with-gitpod-environment-variables) .\n\nThere would be some use cases where we would want to persist some files between workspace starts. For example, `.bash_history` refers to previously used history commands.","metadata":{"source":"https://www.gitpod.io/guides/guide-ephemeral-dev-environment-on-gitpod","loc":{"lines":{"from":180,"to":184}}}}],["120",{"pageContent":"There would be some use cases where we would want to persist some files between workspace starts. For example, `.bash_history` refers to previously used history commands.\n\nHere we would like to persist the `.bash_history` file under the `$HOME` directory. For this, we will create a folder `.persist` inside the `/workspace` folder.\n\nInside your workspace, Open the terminal & run the following steps:\n\n-   Step 1: `mkdir -p /workspace/.persist`\n-   Step 2: `cp $HOME/.bash_history /workspace/.persist`\n-   Step 3: Add the following task inside `.gitpod.yml`:\n\n```yml\ntasks:\n    - name: Restore persist\n      before: |\n          cp /workspace/.persist/.bash_history $HOME;\n          # Copy more files as necessary below\n          exit;","metadata":{"source":"https://www.gitpod.io/guides/guide-ephemeral-dev-environment-on-gitpod","loc":{"lines":{"from":184,"to":200}}}}],["121",{"pageContent":"```\n\n-   Step 4: [See it in action](https://www.gitpod.io/docs/config-gitpod-file#see-it-in-action)\n\n> **Note**: This is just a temporary solution. The issue for this is still open [Issue URL](https://github.com/gitpod-io/gitpod/issues/8716)\n\n# Recommended Reading\n\n-   [Docs: Config Dotfiles](https://www.gitpod.io/docs/configure/user-settings/dotfiles)\n-   [GitHub Repository: Bring your own Dotfiles to Gitpod | dotfiles on Gitpod](https://github.com/gitpod-io/demo-dotfiles-with-gitpod)\n-   [GitHub Repository: AWS Single Sign-On (SSO) and Amazon Elastic Container Registry (ECR) with Gitpod](https://github.com/gitpod-io/demo-aws-with-gitpod)\n-   [Guide: Gitpodifying — The Ultimate Guide](https://www.gitpod.io/guides/gitpodify)\n-   [Blog: Personalize your Gitpod Workspace Environments](https://www.gitpod.io/blog/personalize-your-gitpod-workspace-environment)","metadata":{"source":"https://www.gitpod.io/guides/guide-ephemeral-dev-environment-on-gitpod","loc":{"lines":{"from":201,"to":213}}}}],["122",{"pageContent":"---\n\n# Ready to code 🚀\n\nYay! You are now ready to get started with an ephemeral Dev Environment on Gitpod.\n\nIf you have questions about configuring your project, drop by our community [Discord server](https://gitpod.io/chat). We would love to hear your feedback in the [Gitpod Community](https://www.gitpod.io/community).","metadata":{"source":"https://www.gitpod.io/guides/guide-ephemeral-dev-environment-on-gitpod","loc":{"lines":{"from":215,"to":221}}}}],["123",{"pageContent":"---\nauthor: loujaybee\ndate: Thu July 6 2023 09:00:00 GMT+0000 (UTC)\nexcerpt: A guide for setting up Atuin, a tool to supercharge your terminal history, and sync history across all your Gitpod workspaces. Download the Atuin CLI, register, update your Dotfiles and you're set!\nsubtitle: A guide for setting up Atuin, a tool to supercharge your terminal history, and sync history across all your Gitpod workspaces. Download the Atuin CLI, register, update your Dotfiles and you're set!\nteaserImage: header.webp\nimage: teaser.webp\ntitle: 🔋 Supercharged persistent terminal history — With Gitpod + Atuin\n---\n\nA lot of your life improves as a developer when you use a [Cloud Development Environments](/cde) like Gitpod. No more wasted days with a broken environment, you can jump between projects without touching your local changes, and so on. To get to this nirvana with a CDE, you simply need to configure a few things—a small investment that pays back time every day !","metadata":{"source":"https://www.gitpod.io/guides/persisted-terminal-history-atuin","loc":{"lines":{"from":1,"to":11}}}}],["124",{"pageContent":"One of those configurations is: persisted terminal history between workspaces. Because each workspace in Gitpod is brand new—so is your terminal history. Not being able to press the up arrow key and pull back all your previous commands can feel like a part of you is missing. In todays post, I'll run you through how you can set up terminal history using a CLI tool called [Atuin](https://atuin.sh/).","metadata":{"source":"https://www.gitpod.io/guides/persisted-terminal-history-atuin","loc":{"lines":{"from":13,"to":13}}}}],["125",{"pageContent":"## What is Atuin?\n\n![Atuin](/images/guides/persisted-terminal-history-atuin/atuin.png)\n\nAtuin replaces your existing shell history with a SQLite database, and records additional context for your commands. Atuin provides optional and fully encrypted synchronisation of your history between machines, via an Atuin server (which [can also be self-hosted](https://atuin.sh/docs/self-hosting/)). The following steps are adapted from the Atuin [Getting Started](https://atuin.sh/docs/guide/) guide, so do check their documentation for more information.","metadata":{"source":"https://www.gitpod.io/guides/persisted-terminal-history-atuin","loc":{"lines":{"from":15,"to":19}}}}],["126",{"pageContent":"## Getting Started\n\n### Step 1: Install the `atuin` CLI and register an account\n\nFirst, you need to register an account with Atuin. Since registering your account is a one-time step, using a temporary workspace is fine. You can use [gitpod.new](https://gitpod.new/) to create a blank workspace in Gitpod and run the following commands. Make sure to replace `<USERNAME>` and `<EMAIL>` with your own information.\n\n```sh\nbash <(curl https://raw.githubusercontent.com/ellie/atuin/main/install.sh)\natuin register -u <USERNAME> -e <EMAIL>\n```\n\n> Don't want to use `curl`? [Install with cargo, brew](https://atuin.sh/docs/advanced-install) and more.\n\nYou'll be prompted to create an Atuin account and for a password. You'll want to keep your password safe for the next step ! Once you're registered we will need to ensure that all your subsequently opened workspaces are configured to use Atuin by default.","metadata":{"source":"https://www.gitpod.io/guides/persisted-terminal-history-atuin","loc":{"lines":{"from":21,"to":34}}}}],["127",{"pageContent":"### Step 2: Persist your Atuin key + password\n\nAfter registration, Atuin generates an encryption key that is unique to you, and stores the key locally. The key is needed for logging in to other machines (that's workspaces when using Gitpod), and can be accessed by running the command:\n\n```sh\natuin key","metadata":{"source":"https://www.gitpod.io/guides/persisted-terminal-history-atuin","loc":{"lines":{"from":36,"to":41}}}}],["128",{"pageContent":"```\n\nTo ensure that Atuin works across all your workspaces you'll need to store both your key (to encrypt your history files) and your Atuin password to log in so they're accessible on each workspace start.\n\nWhilst _you could_ use an [Environment Variable](/docs/configure/projects/environment-variables#environment-variables) to store your password and key, we suggest you store sensitive information in a password or secrets manager (see [how Gitpod works with Doppler](/blog/securely-manage-development-secrets-with-doppler-and-gitpod))\n\n> **Tip:** You can connect your Gitpod workspaces to a 3rd party like Vault, or a cloud secret store like AWS Secrets Manager using [OIDC](/docs/configure/workspaces/oidc), avoiding the need to use environment variables for sensitive data like passwords and encryption keys.","metadata":{"source":"https://www.gitpod.io/guides/persisted-terminal-history-atuin","loc":{"lines":{"from":42,"to":48}}}}],["129",{"pageContent":"### Step 3: Update your dotfiles for the install\n\nFinally, you'll need to ensure Atuin is installed in all workspaces, and to do this, we'll use Gitpod's support for [Dotfiles](/docs/configure/user-settings/dotfiles). Dotfiles are scripts that run in all of your workspaces so that you can personalise their configuration, and are setup by linking a Dotfiles repo in your user settings.\n\nThe following is an example `install.sh` you can use:\n\n```bash\n#!/usr/bin/env bash\nbash <(curl https://raw.githubusercontent.com/ellie/atuin/main/install.sh)\natuin login -u \"$ATUIN_USERNAME\" -p \"$ATUIN_PASSWORD\" --key \"$ATUIN_KEY\"\natuin sync\n```\n\nCheck out [gitpod-samples/dotfiles_atuin](https://github.com/gitpod-samples/dotfiles_atuin) for a reference dotfiles repo you can use.","metadata":{"source":"https://www.gitpod.io/guides/persisted-terminal-history-atuin","loc":{"lines":{"from":50,"to":63}}}}],["130",{"pageContent":"### Step 4 (optional): Update your sync frequency configuration\n\nThe [default Atuin sync is set to 1 hour](https://atuin.sh/docs/config/#sync_frequency). As Gitpod workspaces are ephemeral, your workspace could [timeout](https://www.gitpod.io/docs/configure/workspaces/workspace-lifecycle#workspace-timeouts) before the sync. You can configure Atuin to [sync more frequently](https://atuin.sh/docs/config/#sync_frequency) in that case. To create an Atuin configuration file, and add the sync preference, add the following to your Dotfile script:\n\n```sh\ntouch ~/.config/atuin/config.toml\necho \"sync_frequency = \\\"5m\\\"\" >> ~/.config/atuin/config.toml\n```","metadata":{"source":"https://www.gitpod.io/guides/persisted-terminal-history-atuin","loc":{"lines":{"from":65,"to":72}}}}],["131",{"pageContent":"### 🔋 Supercharged terminal history!\n\nAnd, that's it. Now Atuin will be enabled in every new workspace, simply press the `up` key, `CTRL R` or use `atuin` on the command line to use your new, supercharged history that is available across all of your Gitpod workspaces (and anywhere else you need). Atuin has lots of options for: [changing the syncing frequency](https://atuin.sh/docs/config/#sync_frequency), [deleting history](https://atuin.sh/docs/commands/search), [configuring fish, zsh](https://atuin.sh/docs/key-binding) and more.\n\nIf you want to share your experiences using Gitpod with Atuin, or discuss terminal history in Gitpod generally, check out the GitHub Issue [#9019](https://github.com/gitpod-io/gitpod/issues/9019) to leave us your thoughts and ideas.","metadata":{"source":"https://www.gitpod.io/guides/persisted-terminal-history-atuin","loc":{"lines":{"from":74,"to":78}}}}],["132",{"pageContent":"---\nauthor: nancy-chauhan, helenjoscott\ndate: Thursday, 28 April 2022 11:00:00 UTC\ntitle: Set up a Spring Boot Remote Development Environment With JetBrains Gateway and Gitpod\nexcerpt: Setting up your first Spring project using JetBrains Gateway and Gitpod.\nsubtitle: Setting up your first Spring project using JetBrains Gateway and Gitpod.\nteaserImage: header.jpg\nimage: teaser.jpg\n---\n\n**Announcement 🚀** : Today, Gitpod and Jetbrains join forces to solve the _'works on my machine'_ problem. Bringing JetBrains' deep product integration with Gitpod's remote workspaces to developers around the world.<br><br>\nThis gives developers the best of both worlds -\n\n-   Reproducible developer environments provisioned by Gitpod\n-   Favorite desktop IDE from Jetbrains - IntelliJ IDEA, PyCharm, GoLand, and PhpStorm\n    <br>\n\nYou can read the full announcement on our blog [here](https://www.gitpod.io/blog/gitpod-jetbrains).\n\n<hr/>","metadata":{"source":"https://www.gitpod.io/guides/set-up-spring-boot-application-remotely-with-gitpod-and-jetbrains-gateway","loc":{"lines":{"from":1,"to":20}}}}],["133",{"pageContent":"You can read the full announcement on our blog [here](https://www.gitpod.io/blog/gitpod-jetbrains).\n\n<hr/>\n\n[JetBrains](https://www.jetbrains.com/) IDEs are one of the highly favored IDEs amongst developers. They provide excellent debugging and refactoring experience and built-in integrations with many tools such as docker, databases, web servers, etc. Through JetBrains Gateway, Gitpod delivers the choice of using JetBrains IDEs as a development environment for Gitpod workspaces. It will provide a familiar developer experience to long time users of JetBrains IDEs with the flexibility of cloud workspaces provided by Gitpod 🍊\n\nThis guide will teach you to set up a Spring project using JetBrains Gateway and Gitpod. Let's get started 🚀\n\n# Setting up your first Spring project using JetBrains Gateway and Gitpod","metadata":{"source":"https://www.gitpod.io/guides/set-up-spring-boot-application-remotely-with-gitpod-and-jetbrains-gateway","loc":{"lines":{"from":20,"to":28}}}}],["134",{"pageContent":"## 1. Setup\n\nGitpod JetBrains IDE integration is powered with JetBrains Gateway, a compact desktop app to connect to remote workspaces without installing an IDE.\n\n1.  **Install [JetBrains Gateway](https://www.jetbrains.com/help/idea/remote-development-a.html#gateway)**\n\n2.  **Install Gitpod Plugin in JetBrains Gateway :**\n    <br>\n    Gitpod provides a plugin that you can install in JetBrains Gateway to connect to and manage Gitpod workspaces.\n\n    -   Open JetBrains Gateway `Preferences` from macOS application menu or `Settings` from `File` menu in Linux/Windows.","metadata":{"source":"https://www.gitpod.io/guides/set-up-spring-boot-application-remotely-with-gitpod-and-jetbrains-gateway","loc":{"lines":{"from":30,"to":40}}}}],["135",{"pageContent":"-   Open JetBrains Gateway `Preferences` from macOS application menu or `Settings` from `File` menu in Linux/Windows.\n\n    -   Navigate to `Plugins` and search for Gitpod in the Marketplace to find and install the **Gitpod Gateway** plugin.\n          <figure>\n          <img src=\"https://user-images.githubusercontent.com/37153406/165688357-d9e223d6-a08f-4cbc-8440-5f7d1d4f812a.png\" alt=\"Installing Gitpod plugin in JetBrains Gateway\">\n          <figcaption style=\"text-align:center\">Installing Gitpod Gateway plugin in JetBrains Gateway</figcaption>\n          </figure>\n\n3.  **Update your preferences on the Gitpod dashboard :**\n    <br>","metadata":{"source":"https://www.gitpod.io/guides/set-up-spring-boot-application-remotely-with-gitpod-and-jetbrains-gateway","loc":{"lines":{"from":40,"to":49}}}}],["136",{"pageContent":"3.  **Update your preferences on the Gitpod dashboard :**\n    <br>\n\n    Select IntelliJ IDEA on the [Gitpod preferences](https://gitpod.io/preferences) page. It will set IntelliJ IDEA as your default desktop IDE for future workspaces. This will launch an IDE window connected to your Gitpod workspace. You can also choose to use other JetBrains IDEs such as GoLand, PyCharm or PhpStorm.\n    <figure>\n    <img src=\"https://user-images.githubusercontent.com/37153406/165688354-d4cc2eba-f7f6-4f2a-b54b-c545889a8131.png\" alt=\"Gitpod Preferences\">\n    <figcaption style=\"text-align:center\">Gitpod Preferences</figcaption>\n    </figure>\n\n4.  **Connect to your workspace from JetBrains Gateway :**\n    <br>","metadata":{"source":"https://www.gitpod.io/guides/set-up-spring-boot-application-remotely-with-gitpod-and-jetbrains-gateway","loc":{"lines":{"from":49,"to":59}}}}],["137",{"pageContent":"4.  **Connect to your workspace from JetBrains Gateway :**\n    <br>\n\n    Open JetBrains Gateway on your machine, and click `Connect to Gitpod` under the Gitpod section, connect to your workspace or create a new one from an existing repository.\n    <figure>\n    <img src=\"https://user-images.githubusercontent.com/37153406/165688355-7704fadb-c030-4a76-a387-510b91aaf87a.png\" alt=\"Connect to Gitpod\">\n    <figcaption style=\"text-align:center\">Connect to Gitpod</figcaption>\n    </figure>\n\n        <figure>\n            <img src=\"https://user-images.githubusercontent.com/37153406/165688360-78cb72a1-d867-4298-b767-8d28d81de1be.png\" alt=\"Create a new workspace\">\n            <figcaption style=\"text-align:center\">Create a new workspace</figcaption>\n        </figure>\n\nIf you want to read about the whole process in detail, you can refer to our online [documentation](https://www.gitpod.io/docs/references/ides-and-editors/intellij) 📖.","metadata":{"source":"https://www.gitpod.io/guides/set-up-spring-boot-application-remotely-with-gitpod-and-jetbrains-gateway","loc":{"lines":{"from":59,"to":73}}}}],["138",{"pageContent":"## 2. How to create a new Spring Boot project\n\nYou can create a new Gitpod workspace using JetBrains Gateway with our [Spring Boot template](https://github.com/gitpod-io/template-java-spring-boot-gradle). This template uses Java 11 and Gradle and is configured for creating Gitpod workspaces.\n\n1.  Launch JetBrains Gateway and navigate to the Gitpod tab.\n2.  Enter [`https://github.com/gitpod-io/template-java-spring-boot-gradle`](https://github.com/gitpod-io/template-java-spring-boot-gradle) as the repository URL and click on `New Workspace` to start a new Gitpod workspace.\n    <figure>\n        <img src=\"https://user-images.githubusercontent.com/37153406/165688318-b07d656c-a7aa-424d-8b77-7cd9807a6c0e.png\" alt=\"Create Spring Boot project from our template\">\n        <figcaption style=\"text-align:center\">Create Spring Boot project from our template</figcaption>\n    </figure>","metadata":{"source":"https://www.gitpod.io/guides/set-up-spring-boot-application-remotely-with-gitpod-and-jetbrains-gateway","loc":{"lines":{"from":75,"to":84}}}}],["139",{"pageContent":"## 3. Run your project\n\n1. Wait for the IDE to import the project and install the dependencies.\n2. Run your project by clicking on the `Run` button. IntelliJ IDEA starts your Spring application in the ‘Run window’.\n <figure>\n     <img src=\"https://user-images.githubusercontent.com/37153406/165688347-390cf9a7-11a5-4d4f-8506-e1962c0ec699.png\" alt=\"Run app inside IntelliJ IDE\">\n     <figcaption style=\"text-align:center\">Run app inside IntelliJ IDE</figcaption>\n </figure>\n\n3. Once the Spring application starts, IntelliJ IDEA will prompt you for the availability of port 8080. Click on the port and select `Forward and open in browser` to launch the application in your web browser.\n <figure>\n     <img src=\"https://user-images.githubusercontent.com/37153406/165688350-fcc27164-8e8f-41a0-9fdc-7304f6e040c7.png\" alt=\"Launch your app\">\n     <figcaption style=\"text-align:center\">Launch your app 🚀</figcaption>\n </figure>","metadata":{"source":"https://www.gitpod.io/guides/set-up-spring-boot-application-remotely-with-gitpod-and-jetbrains-gateway","loc":{"lines":{"from":86,"to":99}}}}],["140",{"pageContent":"4. You can use the IntelliJ IDEA integrated terminal to run shell commands on your Gitpod workspace as well.\n\nCongratulations 🎉😄 <br>You have successfully set up your first Spring Boot project using Gitpod and JetBrains Gateway! <br>Further, if you want to learn more about running your existing codebase using Gitpod and JetBrains Gateway, you can follow the next section.\n\n# Setting up your existing codebase using JetBrains Gateway and Gitpod","metadata":{"source":"https://www.gitpod.io/guides/set-up-spring-boot-application-remotely-with-gitpod-and-jetbrains-gateway","loc":{"lines":{"from":101,"to":105}}}}],["141",{"pageContent":"# Setting up your existing codebase using JetBrains Gateway and Gitpod\n\nYou can open an existing codebase using Gitpod and JetBrains Gateway. To get started with Gitpod, add a [`.gitpod.yml`](https://github.com/gitpod-io/template-java-spring-boot-gradle/blob/main/.gitpod.yml) file in the root directory of your existing codebase.\nThe `.gitpod.yml` file at the root of your project is where you tell Gitpod how to prepare & build your project, start development servers and configure continuous [prebuilds](https://www.gitpod.io/docs/configure/projects/prebuilds) for GitHub.\nHence, improving the developer experience on Gitpod ✨","metadata":{"source":"https://www.gitpod.io/guides/set-up-spring-boot-application-remotely-with-gitpod-and-jetbrains-gateway","loc":{"lines":{"from":105,"to":109}}}}],["142",{"pageContent":"## Customizing `.gitpod.yml`\n\nHere is the `.gitpod.yml`, used in our template. It runs Gradle build when you open the workspace.\n\n```yml\ntasks:\n    - init: ./gradlew build","metadata":{"source":"https://www.gitpod.io/guides/set-up-spring-boot-application-remotely-with-gitpod-and-jetbrains-gateway","loc":{"lines":{"from":111,"to":117}}}}],["143",{"pageContent":"```\n\nYou can change the command to build your application or add more commands to run when your workspace starts. You can also add plugins to install in your IDEA instance automatically.\n\nTo learn more about customizing `.gitpod.yml` according to your requirements, refer to our [documentation](https://www.gitpod.io/docs/references/gitpod-yml).\n\n# Working on Gitpod workspace using JetBrains Gateway\n\nUsing Gitpod on JetBrains Gateway feels like working on a project on a locally installed copy of IntelliJ IDEA. You can use the same shortcuts, powerful debugging tools, refactoring and plugins as you do on your local IDE without needing to set up your entire project on your machine.\n\nThis integration provides you with the best experience of using the cloud development environment of Gitpod and the comfort and familiarity of your JetBrains IDE. ✨","metadata":{"source":"https://www.gitpod.io/guides/set-up-spring-boot-application-remotely-with-gitpod-and-jetbrains-gateway","loc":{"lines":{"from":118,"to":128}}}}],["144",{"pageContent":"---\nauthor: nancy-chauhan, Siddhant-K-code\ndate: Thursday, 1 September 2022 02:00:00 UTC\nexcerpt: This guide, will show you how you can set up AWS SSO & AWS ECR on Gitpod ephemeral workspace\nteaserImage: header.jpg\nimage: teaser.jpg\ntitle: Integrate AWS Single Sign-On (SSO) and Amazon Elastic Container Registry (ECR) with Gitpod\n---\n\nA common use case in organizations for developers, when working on Gitpod ephemeral environment, is the need to access various AWS services. For instance, sometimes developers need to pull or push images from or to [AWS ECR](https://aws.amazon.com/ecr/). These images can be private, so some authentication is required, usually [AWS SSO](https://docs.aws.amazon.com/singlesignon/latest/userguide/getting-started.html). AWS SSO is a cloud SSO service that makes it easy to centrally manage SSO access to multiple AWS accounts and enterprise applications.","metadata":{"source":"https://www.gitpod.io/guides/integrate-aws-cli-ecr","loc":{"lines":{"from":1,"to":10}}}}],["145",{"pageContent":"In this guide, we will show you how you can set up AWS SSO & AWS ECR on Gitpod ephemeral workspace. In 3 simple steps, we will:\n\n1. Install `aws-cli`\n2. Setup `aws-sso`\n3. Access `aws ecr`\n\nAll these steps would be automated. So you will always get a ready-to-use workspace with AWS CLI configured, including all the required secrets. This lets you work on many ephemeral workspaces at once frictionlessly as you will not have to install or configure the settings multiple times ✨\n\n> **tl;dr;** You need to configure AWS secrets, add [this configuration shell script](https://github.com/gitpod-io/demo-aws-with-gitpod/blob/main/configure_aws_with_gitpod.sh) in your project & [this task](https://github.com/gitpod-io/demo-aws-with-gitpod/blob/main/.gitpod.yml#L15-L17) in your `.gitpod.yml` for ready-to-code Gitpod Workspace 🚀\n\n# Overview","metadata":{"source":"https://www.gitpod.io/guides/integrate-aws-cli-ecr","loc":{"lines":{"from":12,"to":22}}}}],["146",{"pageContent":"# Overview\n\nWe will provide you with a setup that will provision AWS CLI and enable SSO when you open a new ephemeral Gitpod workspace. The flow diagram below describes how we have done it in our [demo-aws-with-gitpod](https://github.com/gitpod-io/demo-aws-with-gitpod) template repo in 3 steps:\n\n<figure class=\"flex flex-col items-center text-center\">\n  <img src=\"/images/guides/integrate-aws-cli-ecr/flow-diagram.png\" alt=\"Flow Diagram of Integration of AWS CLI & Gitpod\" width=\"700\"/>\n  <figcaption>Flow Diagram of Integration of AWS CLI & Gitpod</figcaption>\n</figure>\n\n1. **Command Task execution**\n\nAs you open a new gitpod workspace, it gets configured through `.gitpod.yml file`, located at the root of your project. This initiates the [config script](https://github.com/gitpod-io/demo-aws-with-gitpod/blob/main/configure_aws_with_gitpod.sh).\n\n2. **Installation**\n\nThe config script automates the whole process of installing CLI and ECR helper whenever you open a new Gitpod workspace.","metadata":{"source":"https://www.gitpod.io/guides/integrate-aws-cli-ecr","loc":{"lines":{"from":22,"to":37}}}}],["147",{"pageContent":"2. **Installation**\n\nThe config script automates the whole process of installing CLI and ECR helper whenever you open a new Gitpod workspace.\n\n3. **Configuration**\n\nWe will use some public configuration options from the SSO like AWS_SSO_REGION, AWS_SSO_URL etc. and add those as environment variables at [Gitpod settings](https://gitpod.io/variables). It lets you configure the persistent env variables into your workspace and use them in your code.\n\nLet's understand the Installation, Configuration and Usage steps in detail.\n\n# 💻 Installation\n\nWe will discuss various installation steps and show you a snippet of the configuration script. You can find these lines of code here in the [config script](https://github.com/gitpod-io/demo-aws-with-gitpod/blob/e61392ed478bd6cfea94fcb29e6318d6a52efb2e/configure_aws_with_gitpod.sh).","metadata":{"source":"https://www.gitpod.io/guides/integrate-aws-cli-ecr","loc":{"lines":{"from":37,"to":49}}}}],["148",{"pageContent":"## Install AWS CLI on Gitpod\n\nTo Install [AWS CLI](https://aws.amazon.com/cli/) on Gitpod, you need to run a certain set of commands given in [AWS CLI docs](https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html). To automate it, we wrote it as a shell script so that you don't need to run those commands every time.\n\n```sh\ncurl -fSsl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o \"awscliv2.zip\"\nunzip -qq awscliv2.zip\nsudo ./aws/install --update\nrm awscliv2.zip\n```\n\nIn the above script, we download the AWS CLI zip, unzip it & execute that to install AWS CLI, following which we remove the zip. To automatically get credentials for Amazon ECR, we would need to install ECR-Credential Helper.","metadata":{"source":"https://www.gitpod.io/guides/integrate-aws-cli-ecr","loc":{"lines":{"from":51,"to":62}}}}],["149",{"pageContent":"## Install ECR-Credential Helper on Gitpod\n\nThe following script installs the ECR-Credential Helper:","metadata":{"source":"https://www.gitpod.io/guides/integrate-aws-cli-ecr","loc":{"lines":{"from":64,"to":66}}}}],["150",{"pageContent":"The following script installs the ECR-Credential Helper:\n\n```sh\nif [ ! -f /usr/local/bin/docker-credential-ecr-login ]; then\n    echo \"Installing ecr-login helper\"\n    OLD_DIR=\"$PWD\"\n    TMP_DIR=\"$(mktemp -d)\"\n    cd \"${TMP_DIR}\" || exit 1\n    ECR_LATEST=$(curl -s https://api.github.com/repos/awslabs/amazon-ecr-credential-helper/releases/latest | jq -r \".tag_name\")\n    curl -o docker-credential-ecr-login -fSsL \"https://amazon-ecr-credential-helper-releases.s3.us-east-2.amazonaws.com/${ECR_LATEST##*v}/linux-amd64/docker-credential-ecr-login\"\n    curl -o docker-credential-ecr-login.sha256 -fSsL \"https://amazon-ecr-credential-helper-releases.s3.us-east-2.amazonaws.com/${ECR_LATEST##*v}/linux-amd64/docker-credential-ecr-login.sha256\"\n    sha256sum -c docker-credential-ecr-login.sha256\n    sudo mv docker-credential-ecr-login /usr/local/bin/docker-credential-ecr-login\n    sudo chmod +x /usr/local/bin/docker-credential-ecr-login\n    cd \"${OLD_DIR}\" || exit 1\n    rm -rf \"${TMP_DIR}\"\nfi\n```","metadata":{"source":"https://www.gitpod.io/guides/integrate-aws-cli-ecr","loc":{"lines":{"from":66,"to":83}}}}],["151",{"pageContent":"## (Optional) Install AWS Session Manager Plugin\n\nThis is an optional step, but you should first install the Session Manager plugin on your local machine. This facilitates the AWS CLI to start and end sessions that connect you to your managed nodes.\n\n```sh\nif ! command -v session-manager-plugin; then\n    echo \"Installing AWS session manager plugin\"\n\n      TMP_DIR=\"$(mktemp -d)\"\n      cd \"$TMP_DIR\" || exit 1\n\n      curl \"https://s3.amazonaws.com/session-manager-downloads/plugin/latest/ubuntu_64bit/session-manager-plugin.deb\" -o \"session-manager-plugin.deb\"\n      sudo dpkg -i \"session-manager-plugin.deb\"\n\n      cd \"$OLD_DIR\"\n      rm -rf \"$TMP_DIR\"\nfi\n```\n\n# 🧪 Configuration","metadata":{"source":"https://www.gitpod.io/guides/integrate-aws-cli-ecr","loc":{"lines":{"from":85,"to":104}}}}],["152",{"pageContent":"## Configure AWS Environment Variables in Gitpod\n\nAWS CLI requires some environment variables to be configured for executing AWS CLI commands. To avoid configuring this every time you spawn a new gitpod ephemeral environment, you can add it with the following Key-Value Map in [Gitpod Environment Variables settings](https://gitpod.io/variables):\n\n`AWS_SSO_URL`\n`AWS_SSO_REGION`\n`AWS_ACCOUNT_ID`\n`AWS_ROLE_NAME`\n`AWS_REGION`\n\nYou can read more about Configuring the Environment Variables in our [documentation](https://www.gitpod.io/docs/configure/projects/environment-variables#using-the-account-settings)","metadata":{"source":"https://www.gitpod.io/guides/integrate-aws-cli-ecr","loc":{"lines":{"from":106,"to":116}}}}],["153",{"pageContent":"## Configure AWS environment variable on Gitpod Workspace\n\nTo use configured env variables with aws cli, we need to set the variables in `home/gitpod/.aws/config` :\n\n```sh\n[[ -d /home/gitpod/.aws ]] || mkdir /home/gitpod/.aws\ncat <<- AWSFILE > /home/gitpod/.aws/config\n[default]\nsso_start_url = ${AWS_SSO_URL}\nsso_region = ${AWS_SSO_REGION}\nsso_account_id = ${AWS_ACCOUNT_ID}\nsso_role_name = ${AWS_ROLE_NAME}\nregion = ${AWS_REGION}\nAWSFILE\n```","metadata":{"source":"https://www.gitpod.io/guides/integrate-aws-cli-ecr","loc":{"lines":{"from":118,"to":132}}}}],["154",{"pageContent":"## Configure Docker config to use ECR-Login\n\nTo use the ECR-Credential helper, we need to update the docker configs :\n\n```sh\n# if we don't have a .docker/config.json, create:\n\nif [ ! -d /home/gitpod/.docker ]; then\n    mkdir -p /home/gitpod/.docker && echo '{}' > /home/gitpod/.docker/config.json\nelif [ ! -f /home/gitpod/.docker/config.json ]; then\n    echo '{}' > /home/gitpod/.docker/config.json\nfi\n```\n\n# 🚀 Usage\n\nNow we have the whole [AWS Configuration shell script](https://github.com/gitpod-io/demo-aws-with-gitpod/blob/HEAD/configure_aws_with_gitpod.sh) ready. To execute this script at the start of your workspace, you need to add a [command task](https://www.gitpod.io/docs/configure/workspaces/tasks#:~:text=compiling%20source%20code.-,command,-%3A%20Use%20this%20to) in your [`.gitpod.yml`](https://www.gitpod.io/docs/references/gitpod-yml/#gitpodyml) file.\n\n```yml\ntasks:\n    - name: Initialize & Configure AWS\n      command: bash $GITPOD_REPO_ROOT/configure_aws_with_gitpod.sh","metadata":{"source":"https://www.gitpod.io/guides/integrate-aws-cli-ecr","loc":{"lines":{"from":134,"to":155}}}}],["155",{"pageContent":"```\n\nIn [demo-aws-with-gitpod](https://github.com/gitpod-io/demo-aws-with-gitpod) template repo, `configure_aws_with_gitpod.sh` is in the root directory of the repository. You can replace it with your own script’s path in `command` task.\n\nYou can find the example [`.gitpod.yml`](https://github.com/gitpod-io/demo-aws-with-gitpod/blob/main/.gitpod.yml) file here for your reference.\n\n> **Bonus Tip** ✨: You can save more time in starting your workspace by using Gitpod Prebuilds. It will prebuild your workspace & directly load that previously built container image to boot it up even faster.\n\nCongratulations 🎉 Now, you are ready to use AWS CLI to access AWS ECR through SSO, to use private registries/images. You can also watch the following video, which thoroughly walks you through the whole process:\n\n`youtube: JR3fhDYEwFg`","metadata":{"source":"https://www.gitpod.io/guides/integrate-aws-cli-ecr","loc":{"lines":{"from":156,"to":166}}}}],["156",{"pageContent":"## 📖 Recommended Reading\n\n### Gitpod\n\n-   [Build Projects in a Gitpod Ephemeral Dev Environment — The Ultimate Guide](https://www.gitpod.io/guides/guide-ephemeral-dev-environment-on-gitpod)\n-   [One workspace per task](https://www.gitpod.io/docs/introduction/learn-gitpod/one-workspace-per-task)\n-   [Environment variables](https://www.gitpod.io/docs/configure/projects/environment-variables#using-the-account-settings)\n-   [Custom Docker Image](https://www.gitpod.io/docs/configure/workspaces/workspace-image)\n-   [Config `.gitpod.yml`](https://www.gitpod.io/docs/references/gitpod-yml)","metadata":{"source":"https://www.gitpod.io/guides/integrate-aws-cli-ecr","loc":{"lines":{"from":168,"to":176}}}}],["157",{"pageContent":"### AWS\n\n-   [Automatically gets credentials for Amazon ECR on docker push/docker pull](https://github.com/awslabs/amazon-ecr-credential-helper)\n-   [AWS CLI Command Reference // login](https://awscli.amazonaws.com/v2/documentation/api/latest/reference/sso/login.html)\n-   [Using Amazon ECR with the AWS CLI](https://docs.aws.amazon.com/AmazonECR/latest/userguide/getting-started-cli.html)\n-   [AWS Systems Manager Session Manager](https://docs.aws.amazon.com/systems-manager/latest/userguide/session-manager.html)\n\n### Docker\n\n-   [Docker command line configuration files](https://docs.docker.com/engine/reference/commandline/cli/#configuration-files)","metadata":{"source":"https://www.gitpod.io/guides/integrate-aws-cli-ecr","loc":{"lines":{"from":178,"to":187}}}}],["158",{"pageContent":"---\nsection:\ntitle: Configure Gitpod\ndescription: Learn how to configure Gitpod workspaces and projects to customize your development environment.\n---\n\n# Configure Gitpod\n\n> **Looking for a comprehensive guide on how to configure Gitpod workspaces?** <br/> <br/> See [Configuring Gitpod](/docs/configure/workspaces).\n\n## Workspaces\n\n[Workspaces](/docs/configure/workspaces) are the developer environments where you code in Gitpod.\n\nWorkspaces can be created on their own, or as part of a [Project](/docs/configure/projects).\n\n-   [Workspace Image](/docs/configure/workspaces/workspace-image)\n-   [Tasks](/docs/configure/workspaces/tasks)\n-   [Ports](/docs/configure/workspaces/ports)\n-   [Collaboration](/docs/configure/workspaces/collaboration)\n-   [Multi-repo](/docs/configure/workspaces/multi-repo)\n-   [Workspace Classes](/docs/configure/workspaces/workspace-classes)","metadata":{"source":"https://www.gitpod.io/docs/configure","loc":{"lines":{"from":1,"to":22}}}}],["159",{"pageContent":"## User Settings\n\n[User settings](/docs/configure/user-settings) allow you to customize your own personal Gitpod experience.\n\n-   [Browser Extension](/docs/configure/user-settings/browser-extension)\n-   [Browser Settings](/docs/configure/user-settings/browser-settings)\n-   [Browser Bookmarklet](/docs/configure/user-settings/browser-bookmarklet)\n-   [Dotfiles](/docs/configure/user-settings/dotfiles)\n-   [SSH](/docs/configure/user-settings/ssh)\n-   [Access Tokens](/docs/configure/user-settings/access-tokens)","metadata":{"source":"https://www.gitpod.io/docs/configure","loc":{"lines":{"from":24,"to":33}}}}],["160",{"pageContent":"## Projects\n\n[Projects](/docs/configure/projects) are the connection between Gitpod and one or more git repositories and allow you to manage [Prebuilds](/docs/configure/projects/prebuilds). Like Workspaces, Projects are always associated with an [Organization](/docs/configure/orgs).\n\n-   [Prebuilds](/docs/configure/projects/prebuilds)\n-   [Incremental Prebuilds](/docs/configure/projects/incremental-prebuilds)\n-   [Last Successful Prebuild](/docs/configure/projects/last-successful-prebuild)\n-   [Environment Variables](/docs/configure/projects/environment-variables)\n\n## Organizations\n\n[Organizations](/docs/configure/orgs) in Gitpod allow you to share projects and their settings amongst many organization individuals.","metadata":{"source":"https://www.gitpod.io/docs/configure","loc":{"lines":{"from":35,"to":46}}}}],["161",{"pageContent":"## Organizations\n\n[Organizations](/docs/configure/orgs) in Gitpod allow you to share projects and their settings amongst many organization individuals.\n\n## Authentication\n\n-   [GitLab](/docs/configure/authentication/gitlab)\n-   [GitHub](/docs/configure/authentication/github)\n-   [BitBucket](/docs/configure/authentication/bitbucket)\n-   [GitHub Enterprise](/docs/configure/authentication/github-enterprise)\n-   [Bitbucket Server](/docs/configure/authentication/bitbucket-server)","metadata":{"source":"https://www.gitpod.io/docs/configure","loc":{"lines":{"from":46,"to":56}}}}],["162",{"pageContent":"## FAQs\n\n### No internet access over HTTPS (port 443) on Docker containers with custom network\n\nWhen creating a new Docker network and starting a fresh container, you might encounter issues with HTTPS requests not receiving a response. HTTP requests, however, work as expected.\n\nThis issue is likely caused by a wrong MTU (Maximum Transmission Unit) setting. To fix the problem, create a new network and specify the MTU value as 1440:\n\n```bash\ndocker network create mynetwork --opt \"com.docker.network.driver.mtu=1440\"\n```\n\nFor more discussions related to MTU value causing problems, refer to the [Gitpod Discord](https://discord.com/channels/816244985187008514/1077511515525091329).","metadata":{"source":"https://www.gitpod.io/docs/configure","loc":{"lines":{"from":58,"to":70}}}}],["163",{"pageContent":"---\nsection:\ntitle: Gitpod Dedicated docs\n---\n\n# Gitpod Dedicated docs\n\nGitpod provides on-demand, secure cloud development environments or [CDEs](/cde). These environments include everything a developer needs, including tools, code, and dependencies, _and_ can seamlessly be shared and cloned across the team.\n\nThere are two ways to consume the product: Via Gitpod Cloud, available via [gitpod.io](https://gitpod.io) and via Gitpod Dedicated that is cloud development environment that is hosted by you and managed by Gitpod. **This documentation walks through Gitpod Dedicated.**\n\nIn both deployments models, a control plane keeps the installation up-to-date. The system polls for updates every minute. Once a new one is available, it pulls the package down. The system is built so that no downtime is needed for updates, and workspaces are never affected.","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated","loc":{"lines":{"from":1,"to":12}}}}],["164",{"pageContent":"## Table of Contents\n\n<details>\n\n<summary class=\"font-bold text-h6 text-important\">Guides</summary>","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated","loc":{"lines":{"from":14,"to":18}}}}],["165",{"pageContent":"-   [Getting Started](/docs/gitpod-dedicated/guides/getting-started)\n-   [(Not) modifying your AWS Account](/docs/gitpod-dedicated/guides/not-modify-your-aws-account)\n-   [Updating the Gitpod Dedicated Infrastructure](/docs/gitpod-dedicated/guides/updating-gitpod-dedicated-infrastructure)\n-   [Getting Access to the Instance for Debugging](/docs/gitpod-dedicated/guides/getting-access-to-the-instance-for-debugging)\n-   [Using Custom Domains](/docs/gitpod-dedicated/guides/using-custom-domains)\n-   [Using a Custom or Private CA](/docs/gitpod-dedicated/guides/using-custom-or-private-ca)\n-   [Using Private VPC Resolvers](/docs/gitpod-dedicated/guides/using-private-vpc-resolvers)\n<!-- -   [Using Private ECR Repositories for Workspace Images](/docs/gitpod-dedicated/guides/use-private-ecr-repos-for-workspace-images) -->\n-   [Accessing data exported from your instance](/docs/gitpod-dedicated/guides/accessing-data-exported-from-your-instance)","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated","loc":{"lines":{"from":20,"to":28}}}}],["166",{"pageContent":"-   [Accessing data exported from your instance](/docs/gitpod-dedicated/guides/accessing-data-exported-from-your-instance)\n-   [Reserving AWS Instances to Save Cost](/docs/gitpod-dedicated/guides/reserving-aws-instances-to-save-cost)\n-   [Deleting your Gitpod installation](/docs/gitpod-dedicated/guides/deleting-your-gitpod-installation)","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated","loc":{"lines":{"from":28,"to":30}}}}],["167",{"pageContent":"</details>\n\n<details class=\"mt-micro\">\n\n<summary class=\"font-bold text-h6 text-important\">Background</summary>\n\n-   [Data and Observability](/docs/gitpod-dedicated/background/data-observability)\n-   [Deployment and Updates](/docs/gitpod-dedicated/background/deployment-updates)\n\n</details>\n\n<details class=\"mt-micro\">\n\n<summary class=\"font-bold text-h6 text-important\">Reference</summary>\n\n-   [AWS IAM permission requirements](/docs/gitpod-dedicated/reference/aws-iam-permission-requirements)\n-   [Architecture](/docs/gitpod-dedicated/reference/architecture)\n-   [Networking and Data Flow](/docs/gitpod-dedicated/reference/networking-data-flows)\n-   [Infrastructure Cost](/docs/gitpod-dedicated/reference/infrastructure-cost)\n-   [Infrastrcture Update Changelog](/docs/gitpod-dedicated/reference/infrastructure-update-changelog)\n\n</details>","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated","loc":{"lines":{"from":32,"to":53}}}}],["168",{"pageContent":"## Gitpod Cloud vs. Gitpod Dedicated\n\nGitpod Cloud is a multi-tenanted solution that provides isolation and security by operating developer workspaces in their own set of Linux namespaces, such that they cannot interfere with others. The details of this setup have been shared publicly. Gitpod Cloud is best for teams who are ready to get started right away and prefer no installation.\n\n![Gitpod Cloud Overview](/images/docs/gitpod-dedicated/gitpod-cloud-overview.webp)\n\nGitpod Dedicated is a single-tenant solution also maintained and operated by Gitpod. The entire application is deployed within a customer's cloud account, acting like an outpost of Gitpod within their cloud organization, very similar to the way a self-hosted solution would behave. The Gitpod Dedicated Control Plane is only responsible for monitoring the status of the instance and managing updates:\n\n![Gitpod Dedicated Overview](/images/docs/gitpod-dedicated/gitpod-dedicated-overview.webp)","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated","loc":{"lines":{"from":55,"to":63}}}}],["169",{"pageContent":"![Gitpod Dedicated Overview](/images/docs/gitpod-dedicated/gitpod-dedicated-overview.webp)\n\nRunning Gitpod Dedicated within the customer’s infrastructure ensures that Gitpod does not have direct access to source code, running workspaces or other confidential resources. This satisfies many regulatory and compliance-related policies around data residency and access.\n\nGitpod Dedicated is best for organizations who have more stringent security requirements.","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated","loc":{"lines":{"from":63,"to":67}}}}],["170",{"pageContent":"|                   |                                                Gitpod Cloud                                                 |                                                        Gitpod Dedicated                                                         |\n| :---------------: | :---------------------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------------------: |\n|    Deployment     |          No customer input required - [sign up](https://gitpod.io/workspaces/) and start for free           | Hosted within customer’s cloud account, requires setting up a new AWS account and executing a CloudFormation template within it |","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated","loc":{"lines":{"from":69,"to":71}}}}],["171",{"pageContent":"|    Management     |                                       Deployed and operated by Gitpod                                       |                                                 Deployed and operated by Gitpod                                                 |\n|  Data Isolation   | Data (e.g. workspace backups) is isolated at the application layer, and is stored in Gitpod’s cloud account | Data (e.g. workspace backups) is isolated at the infrastructure level and stays within the cusomter’s network and cloud account |\n| Compute Isolation |                                            Shared infrastructure                                            |                                  Dedicated infrastructure running in the customer AWS account                                   |","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated","loc":{"lines":{"from":72,"to":74}}}}],["172",{"pageContent":"|   Observability   |                                   Health info and metrics sent to Gitpod                                    |                                             Health info and metrics sent to Gitpod                                              |\n|      Region       |                                                Fixed regions                                                |                   Choose an [AWS region](https://aws.amazon.com/about-aws/global-infrastructure/regions_az/)                    |\n|       Cost        |                                    Cheaper due to shared infrastructure                                     |   More expensive due to single-tenant infrastructure - but existing cloud discounts/credits can be used to cover compute cost   |","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated","loc":{"lines":{"from":75,"to":77}}}}],["173",{"pageContent":"## Overview of Setup Process\n\nGitpod Dedicated is deployed into the customer AWS account using a CloudFormation template. The actual deployment process itself takes around 30 minutes. To begin, create a new AWS account within the customer’s AWS organization. Then, execute a CloudFormation template that creates the necessary infrastructure. After that, the instance will register itself with the Dedicated Control plane and installs the latest version of Gitpod.\n\nGitpod Dedicated is deployed into the customer AWS account using a CloudFormation template. To begin, create a new AWS account within the customer’s AWS organization. Then, execute a CloudFormation template that creates the necessary infrastructure. After that, the instance will register itself with the Dedicated Control plane and installs the latest version of Gitpod.\n\n![Gitpod Dedicated Architecture](/images/docs/gitpod-dedicated/gitpod-dedicated-architecture.webp)","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated","loc":{"lines":{"from":79,"to":85}}}}],["174",{"pageContent":"![Gitpod Dedicated Architecture](/images/docs/gitpod-dedicated/gitpod-dedicated-architecture.webp)\n\nOnce deployed, the instance is able to connect to a source control management system (SCM) and other development resources on a corporate network *privately (*using a Transit Gateway attachment).\n\nTo start the first Gitpod workspace, navigate to the instance and configure an integration to an SCM system. Gitpod will then manage and operate the instance. For more information on how updates are handled, please see the [Deployment and Updates](/docs/gitpod-dedicated/background/deployment-updates) section.","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated","loc":{"lines":{"from":85,"to":89}}}}],["175",{"pageContent":"## Getting started\n\nTo begin, follow the [Getting Started](/docs/gitpod-dedicated/guides/getting-started) guide.\n\n## More Information\n\nFor more information on [Deployment and Updates](/docs/gitpod-dedicated/background/deployment-updates) and [AWS IAM permission requirements](/docs/gitpod-dedicated/reference/aws-iam-permission-requirements) please see the Background and Reference sections.","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated","loc":{"lines":{"from":91,"to":97}}}}],["176",{"pageContent":"---\nsection:\ntitle: Help\n---\n\n# Help\n\n-   [Building Gitpod](/docs/help/public-roadmap/release-cycle)\n-   [Troubleshooting](/docs/help/troubleshooting)","metadata":{"source":"https://www.gitpod.io/docs/help","loc":{"lines":{"from":1,"to":9}}}}],["177",{"pageContent":"---\nsection:\ntitle: Troubleshooting\ndescription: FAQs, Common issues and how to fix them when using Gitpod.\n---\n\n<script>\n  import Keybind from \"$lib/components/keybind.svelte\";\n</script>\n\n# Troubleshooting\n\nIf you cannot find your issue here or in the documentation, please contact Gitpod via our [Support page](/support).","metadata":{"source":"https://www.gitpod.io/docs/help/troubleshooting","loc":{"lines":{"from":1,"to":13}}}}],["178",{"pageContent":"## Gitpod logs in VS Code Browser and Desktop\n\nThese logs contain information about the workspace, the session, and the Visual Studio Code environment. They are useful for diagnosing connection issues and other unexpected behavior.\n\n-   Open the Visual Studio Code Command Palette (<Keybind>CtrlCmd + Shift + P</Keybind>) and type **Export logs**, select **Gitpod: Export all logs** from the list to download a zip file containing all of the logs.\n\n**Important:** The content of these logs should **NOT** be shared publicly as they could contain sensitive information about your workspace. Instead, send them to `troubleshooting@gitpod.io` along with a link to a corresponding GitHub issue if needed.","metadata":{"source":"https://www.gitpod.io/docs/help/troubleshooting","loc":{"lines":{"from":15,"to":21}}}}],["179",{"pageContent":"## Gitpod logs in JetBrains Gateway\n\nThese logs contain information about the workspace, the session, and the JetBrains Gateway. They are useful for diagnosing issues when connecting to a workspace, issues from Gateway Plugins and issues preventing the JetBrains Client to open.\n\n-   Open the **Help** menu and select **Collect Logs and Diagnostic Data** option. After a few seconds, the file manager window will show up, revealing the location where the zip file containing all the logs has been saved.\n\n**Important:** The content of these logs should **NOT** be shared publicly as they could contain sensitive information about your workspace. Instead, send them to `troubleshooting@gitpod.io` along with a link to a corresponding GitHub issue if needed.","metadata":{"source":"https://www.gitpod.io/docs/help/troubleshooting","loc":{"lines":{"from":23,"to":29}}}}],["180",{"pageContent":"**Note:** Ensure you are using the latest version of [JetBrains Gateway](https://www.jetbrains.com/help/idea/remote-development-a.html#gateway) and [Gitpod JetBrains Gateway plugin](https://plugins.jetbrains.com/plugin/18438-gitpod-gateway), as issues from older versions might have already been fixed.","metadata":{"source":"https://www.gitpod.io/docs/help/troubleshooting","loc":{"lines":{"from":31,"to":31}}}}],["181",{"pageContent":"## Gitpod logs in JetBrains Client\n\nThese logs contain information about the workspace, the session, and the JetBrains IDE. They are useful for diagnosing connection issues, issues from IDE Plugins, and any unexpected behavior from the client and the server.\n\n-   Open the **Help** menu and select **Collect Host and Client logs** option. After a few seconds, the file manager window will show up, revealing the location where the zip file containing all the logs has been saved.\n\n**Important:** The content of these logs should **NOT** be shared publicly as they could contain sensitive information about your workspace. Instead, send them to `troubleshooting@gitpod.io` along with a link to a corresponding GitHub issue if needed.","metadata":{"source":"https://www.gitpod.io/docs/help/troubleshooting","loc":{"lines":{"from":33,"to":39}}}}],["182",{"pageContent":"**Note:** Ensure you are using the latest version of both [JetBrains Gateway](https://www.jetbrains.com/help/idea/remote-development-a.html#gateway) and [Gitpod JetBrains Gateway plugin](https://plugins.jetbrains.com/plugin/18438-gitpod-gateway), as issues from older versions might have already been fixed.","metadata":{"source":"https://www.gitpod.io/docs/help/troubleshooting","loc":{"lines":{"from":41,"to":41}}}}],["183",{"pageContent":"## Why doesn't the \"ClearURLs\" browser extension work with Gitpod?\n\nThe ClearURLs browser extension for [Google Chrome](https://chrome.google.com/webstore/detail/clearurls/lckanjgmijmafbedllaakclkaicjfmnk?hl=en) and [Mozilla Firefox](https://addons.mozilla.org/en-US/firefox/addon/clearurls/) inhibits Gitpod workspaces from initialising and the problem manifests with the following symptoms:\n\n-   The dark theme doesn't load\n-   The bottom left Gitpod button is missing\n-   The VS Code Marketplace does not load\n-   Settings Sync does not work\n\nThis issue can be resolved by disabling \"ETag filtering\" in ClearURLs’ settings. An [issue has been created](https://gitlab.com/KevinRoebert/ClearUrls/-/issues/977) that requests to whitelist Gitpod by default and we would appreciate your upvotes on the issue.","metadata":{"source":"https://www.gitpod.io/docs/help/troubleshooting","loc":{"lines":{"from":43,"to":52}}}}],["184",{"pageContent":"## What should I do if JetBrains Gateway and Gitpod aren't working?\n\n1. Ensure you are using the latest version of [JetBrains Gateway](https://www.jetbrains.com/help/idea/remote-development-a.html#gateway)\n2. Ensure you are using the latest version of the [Gitpod JetBrains Gateway plugin](https://plugins.jetbrains.com/plugin/18438-gitpod-gateway)","metadata":{"source":"https://www.gitpod.io/docs/help/troubleshooting","loc":{"lines":{"from":54,"to":57}}}}],["185",{"pageContent":"## What can I do if I have unsynced data inside a workspace but it's not starting?\n\nWhile this is a very critical issue, our workspace-team would eventually look into why it's happening but on the other hand you might not be able to wait while things get fixed. As an user you can try and get your workspace data yourself:\n\n1. Go to the [Gitpod Dashboard](https://gitpod.io/workspaces)\n2. Find your workspace from the list\n3. Download your workspace like so:\n   ![Download a workspace](/images/docs/troubleshooting/download_a_workspace.png)\n4. You can now either try opening a new workspace or use your local machine for a while.\n5. The downloaded workspace is a `tar` file which can be extracted with `tar -xf <your-workspace-filename-here>` command on a new Gitpod workspace or in your Linux/MacOS machine. You can use `7-zip` to extract if you're on windows and don't have `tar`.","metadata":{"source":"https://www.gitpod.io/docs/help/troubleshooting","loc":{"lines":{"from":59,"to":68}}}}],["186",{"pageContent":"---\nsection: integrations\ntitle: Amazon Web Services (AWS)\n---\n\n# Amazon Web Services (AWS)\n\nGitpod is a flexible tool that works with many cloud providers, including AWS. The following page describes ways that you can integrate Gitpod and AWS.","metadata":{"source":"https://www.gitpod.io/docs/integrations/aws","loc":{"lines":{"from":1,"to":8}}}}],["187",{"pageContent":"## OIDC Integration with AWS\n\nGitpod can connect workspaces to AWS using Gitpod support for [OpenID Connect](/docs/configure/workspaces/oidc), allowing workspaces to retrieve AWS access credentials in their workspace without needing to use static credentials, or environment variables.","metadata":{"source":"https://www.gitpod.io/docs/integrations/aws","loc":{"lines":{"from":10,"to":12}}}}],["188",{"pageContent":"### Step 1: Create an \"AWS Identity Provider\" resource\n\nTo connect Gitpod to AWS you need to create an \"IAM identity provider\" to establish a trust relationship between your AWS account and Gitpod.\n\nAWS Identity Providers allow you to manage user identities outside of AWS, instead of creating IAM users in your AWS account and giving these external identities (e.g. Gitpod workspaces) permissions to use AWS resources in your account.\n\nConfigure the URL of the identity provider to: `https://api.<gitpod-installation>/idp`\n\nFor example: `https://api.gitpod.io/idp`.\n\nThe client ID / Audience should be set to: `sts.amazonaws.com`\n\n**Read more:**\n\n-   [[AWS docs] Creating IAM identity providers](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_create.html)\n-   [[AWS docs] Creating OpenID Connect (OIDC) identity providers](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_create_oidc.html)","metadata":{"source":"https://www.gitpod.io/docs/integrations/aws","loc":{"lines":{"from":14,"to":29}}}}],["189",{"pageContent":"### Step 2: Create an AWS role with a trust policy\n\nNow that your AWS account is setup to trust Gitpod, you need to create an AWS IAM role that can be assumed by the Gitpod workspace. Here, you can also restrict who has access to the assumed role based on claims in your Gitpod workspace JWT token.\n\n> 💡 **Important**: We strongly recommend you adhere to the principle of least privilege, and ensure that only relevant workspaces and users can assume your AWS role.\n\n<figure>\n\n```json\n{\n\t\"iss\": \"https://api.dev-internal.gitpod.cloud/idp\",\n\t\"aud\": [\"sts.amazonaws.com\"],\n\t\"azp\": \"sts.amazonaws.com\",\n\t\"c_hash\": \"zSrbWN_X9Wx52-wxjgdX5w\",\n\t\"exp\": 1682344961,\n\t\"iat\": 1682341361,\n\t\"auth_time\": 1682341361,\n\t\"sub\": \"https://github.com/gitpod-io/gitpod\",\n\t\"name\": \"kumquat\"\n}","metadata":{"source":"https://www.gitpod.io/docs/integrations/aws","loc":{"lines":{"from":31,"to":50}}}}],["190",{"pageContent":"```\n\n  <figcaption>\n    Example claims in the OIDC JWT.\n  </figcaption>\n</figure>\n\nTo adjust the IAM role trust policy to restrict which workspaces can assume the role. You can define conditions keys using the name of the OIDC provider (created in step 1, e.g. `gitpod.io`) followed by the claim (`:aud`, `:azp`, `:amr`, `sub`).\n\n```json\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Principal\": {\n                \"Federated\": \"arn:aws:iam::981341800645:oidc-provider/api.gitpod.io/idp\"\n            },\n            \"Action\": \"sts:AssumeRoleWithWebIdentity\",\n            \"Condition\": {\n                \"StringEquals\": {\n                    \"api.gitpod.io/idp:aud\": \"sts.amazonaws.com\"\n                    \"api.gitpod.io/idp:sub\": \"https://github.com/gitpod-io/my-application\"\n                }\n            }\n        }\n    ]\n}","metadata":{"source":"https://www.gitpod.io/docs/integrations/aws","loc":{"lines":{"from":51,"to":78}}}}],["191",{"pageContent":"```\n\n<figure>\n<figcaption>\n    Example IAM assume role trust policy to grant access only to the repo \"gitpod-io/my-application\"\n  </figcaption>\n</figure>\n\n```json\n{\n\t\"Version\": \"2012-10-17\",\n\t\"Statement\": [\n\t\t{\n\t\t\t\"Effect\": \"Allow\",\n\t\t\t\"Principal\": {\n\t\t\t\t\"Federated\": \"arn:aws:iam::981241700645:oidc-provider/api.gitpod.io/idp\"\n\t\t\t},\n\t\t\t\"Action\": \"sts:AssumeRoleWithWebIdentity\",\n\t\t\t\"Condition\": {\n\t\t\t\t\"StringEquals\": {\n\t\t\t\t\t\"api.gitpod.io/idp:aud\": \"sts.amazonaws.com\"\n\t\t\t\t},\n\t\t\t\t\"StringLike\": {\n\t\t\t\t\t\"api.gitpod.io/idp:sub\": \"https://github.com/gitpod-io/*\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t]\n}","metadata":{"source":"https://www.gitpod.io/docs/integrations/aws","loc":{"lines":{"from":79,"to":107}}}}],["192",{"pageContent":"```\n\n<figure>\n<figcaption>\n    Example IAM assume role trust policy to grant access to any repo in the \"gitpod-io\" organization.\n  </figcaption>\n</figure>\n\n**Read more:**\n\n-   [[AWS docs] IAM and AWS STS condition context keys](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_iam-condition-keys.html)\n-   [[AWS docs] IAM String condition operators](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_condition_operators.html#Conditions_String)","metadata":{"source":"https://www.gitpod.io/docs/integrations/aws","loc":{"lines":{"from":108,"to":119}}}}],["193",{"pageContent":"### Step 3: Assume the AWS role to retrieve the AWS credentials\n\n> 💡 **Important**: The following assumes that your workspace has the AWS CLI installed so that it can call `aws sts assume-role-with-web-identity`.\n\nYou can either call the AWS CLI `assume-role` command manually, or use the helper command within the `gp` CLI, `gp idp aws login` which will automatically update your AWS CLI credentials file.\nThe following code will login to AWS using OIDC and then fetch a secret dynamically from AWS Secrets Manager for use in your application.\n\n<figure>\n\n```yaml\ntasks:\n    - command: |\n          gp idp login aws --role-arn <your-iam-role-arn>\n          aws secretsmanager get-secret-value --secret-id database_connection_string --region us-east-1 | jq .SecretString","metadata":{"source":"https://www.gitpod.io/docs/integrations/aws","loc":{"lines":{"from":121,"to":134}}}}],["194",{"pageContent":"```\n\n  <figcaption>\n    An example <code>.gitpod.yml</code> that assumes an AWS web identity role.\n  </figcaption>\n</figure>\n\nRead more:\n\n-   [[AWS docs] `assume-role-with-web-identity`](https://docs.aws.amazon.com/cli/latest/reference/sts/assume-role-with-web-identity.html)","metadata":{"source":"https://www.gitpod.io/docs/integrations/aws","loc":{"lines":{"from":135,"to":144}}}}],["195",{"pageContent":"### Troubleshooting\n\nUse `gp idp token --audience=\"sts.amazonaws.com\"` to print your workspace JWT token. Ensure that any claims against the `sub` match the trust policy in AWS.","metadata":{"source":"https://www.gitpod.io/docs/integrations/aws","loc":{"lines":{"from":146,"to":148}}}}],["196",{"pageContent":"---\nsection: integrations\ntitle: Integrations\ndescription: Gitpod integrates with many tools and services to make your development workflow more efficient.\n---\n\n# Integrations\n\n-   [Amazon Web Services](/docs/integrations/aws)\n-   [JetBrains Gateway](/docs/integrations/jetbrains-gateway)\n-   [Tailscale](/docs/integrations/tailscale)","metadata":{"source":"https://www.gitpod.io/docs/integrations","loc":{"lines":{"from":1,"to":11}}}}],["197",{"pageContent":"---\nsection: integrations\ntitle: Tailscale\ndescription: Learn about Tailscale integration with Gitpod.\n---\n\n# Tailscale\n\nWith Tailscale you can automatically and securely connect your Gitpod workspace to other development resources, whether in the cloud or on prem, such as a production database behind your company’s firewall. You can also spin up several Gitpod workspaces that can talk to each other.\n\n[Tailscale](https://tailscale.com/) is built on top of the point-to-point open-source [WireGuard](https://www.wireguard.com/) protocol which powers an encrypted mesh network or `tailnet`. At Gitpod we are big fans of their product and recently announced an [official partnership](/blog/tailscale) with them.","metadata":{"source":"https://www.gitpod.io/docs/integrations/tailscale","loc":{"lines":{"from":1,"to":11}}}}],["198",{"pageContent":"## Integration\n\n> **Note:** Using [Tailscale ssh](https://tailscale.com/kb/1193/tailscale-ssh/) _to_ a workspace is not supported right now and _from_ requires Tailscale 1.32 or later. If your workspace image was created before 1.32 was available you can [force](/docs/configure/workspaces/workspace-image#manually-rebuild-a-workspace-image) a rebuild without having to update your `.gitpod.Dockerfile`.\n\nIf you’re already using Tailscale, the following steps need to be done (see https://github.com/gitpod-io/demo-tailscale-with-gitpod for a working example):\n\n1. Install `tailscale` through a custom `.gitpod.Dockerfile` by adding the following layer to it.","metadata":{"source":"https://www.gitpod.io/docs/integrations/tailscale","loc":{"lines":{"from":13,"to":19}}}}],["199",{"pageContent":"1. Install `tailscale` through a custom `.gitpod.Dockerfile` by adding the following layer to it.\n\n```Dockerfile\nRUN curl -fsSL https://pkgs.tailscale.com/stable/ubuntu/focal.gpg | sudo apt-key add - \\\n     && curl -fsSL https://pkgs.tailscale.com/stable/ubuntu/focal.list | sudo tee /etc/apt/sources.list.d/tailscale.list \\\n     && sudo apt-get update -q \\\n     && sudo apt-get install -yq tailscale jq \\\n     && sudo update-alternatives --set ip6tables /usr/sbin/ip6tables-nft","metadata":{"source":"https://www.gitpod.io/docs/integrations/tailscale","loc":{"lines":{"from":19,"to":26}}}}],["200",{"pageContent":"```\n\n2. Start `tailscale` on workspace start and maintain the machine state across workspaces by adding the following tasks to your `.gitpod.yml`.\n\n```yml\ntasks:\n    - name: tailscaled\n      command: |\n          if [ -n \"${TAILSCALE_STATE_MYPROJECT}\" ]; then\n            # restore the tailscale state from gitpod user's env vars\n            sudo mkdir -p /var/lib/tailscale\n            echo \"${TAILSCALE_STATE_MYPROJECT}\" | sudo tee /var/lib/tailscale/tailscaled.state > /dev/null\n          fi\n          sudo tailscaled\n    - name: tailscale\n      command: |\n          if [ -n \"${TAILSCALE_STATE_MYPROJECT}\" ]; then\n            sudo -E tailscale up\n          else\n            sudo -E tailscale up --hostname \"gitpod-${GITPOD_GIT_USER_NAME// /-}-$(echo ${GITPOD_WORKSPACE_CONTEXT} | jq -r .repository.name)\"\n            # store the tailscale state into gitpod user\n            gp env TAILSCALE_STATE_MYPROJECT=\"$(sudo cat /var/lib/tailscale/tailscaled.state)\"\n          fi","metadata":{"source":"https://www.gitpod.io/docs/integrations/tailscale","loc":{"lines":{"from":27,"to":49}}}}],["201",{"pageContent":"```\n\nThis configuration will register a Tailscale node based on the following name scheme: `gitpod-{user-name}-{repo-name}`. On first workspace start you will get asked to login through the terminal. When this was successful a Tailscale machine state will be stored in your Gitpod's account. On subsequent starts of workspaces on this project this machine state will be restored.\n\nIF you enable [Tailscale's Magic DNS](https://tailscale.com/kb/1081/magicdns/) you get a stable domain for your project's services that you can reach from any other Tailscale node (e.g. another workspace or your local machine).\n\n> **Warning:** Be aware that starting and connecting multiple workspaces for the same project in parallel results in unreliable network connections.","metadata":{"source":"https://www.gitpod.io/docs/integrations/tailscale","loc":{"lines":{"from":50,"to":56}}}}],["202",{"pageContent":"---\nsection: integrations\ntitle: JetBrains Gateway\ndescription: Learn about JetBrains Gateway integration with Gitpod.\n---\n\n# JetBrains Gateway\n\n> {title} is currently in [Beta](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/6576).\n\n[JetBrains Gateway](https://www.jetbrains.com/remote-development/gateway/) is your single entry point to all remote development environments when using JetBrains IDE's. JetBrains Gateway is a compact desktop app that allows you to work remotely with a JetBrains IDE without downloading the full IDE. Gitpod works with JetBrains Gateway via a custom Gitpod [JetBrains Gateway plugin](https://plugins.jetbrains.com/plugin/18438-gitpod-gateway).\n\nUsing JetBrains Gateway on Desktop with Gitpod, allows you to:\n\n1. Create a new Gitpod workspace\n2. View and open your 20 latest Gitpod workspaces\n\nAll without leaving needing to leave your desktop.","metadata":{"source":"https://www.gitpod.io/docs/integrations/jetbrains-gateway","loc":{"lines":{"from":1,"to":18}}}}],["203",{"pageContent":"## JetBrains IDE support\n\nJetBrains Gateway is the underlying technology which enables the Gitpod integration. Support for JetBrains IDEs will be rolled out incrementally. The [JetBrains Gateway plugin](https://plugins.jetbrains.com/plugin/18438-gitpod-gateway) is a standalone feature, so its release cycle is independent individual JetBrains IDE support.\n\n-   [IntelliJ](/docs/references/ides-and-editors/intellij)\n-   [GoLand](/docs/references/ides-and-editors/goland)\n-   [PhpStorm](/docs/references/ides-and-editors/phpstorm)\n-   [PyCharm](/docs/references/ides-and-editors/pycharm)\n-   [RubyMine](/docs/references/ides-and-editors/rubymine)\n-   [WebStorm](/docs/references/ides-and-editors/webstorm)\n-   [Rider](/docs/references/ides-and-editors/rider)\n-   [CLion](/docs/references/ides-and-editors/clion)","metadata":{"source":"https://www.gitpod.io/docs/integrations/jetbrains-gateway","loc":{"lines":{"from":20,"to":31}}}}],["204",{"pageContent":"## Getting started\n\n`youtube: OagRlSptc2g`","metadata":{"source":"https://www.gitpod.io/docs/integrations/jetbrains-gateway","loc":{"lines":{"from":33,"to":35}}}}],["205",{"pageContent":"1. **Install [JetBrains Gateway](https://www.jetbrains.com/help/idea/remote-development-a.html#gateway)** - With the [JetBrains Gateway and Gitpod](/docs/integrations/jetbrains-gateway) plugin you can create and manage your latest 20 Gitpod workspaces.\n2. **Install the Gitpod plugin** - Open JetBrains Gateway and you'll see the Gitpod logo on the main page. Click \"install\" to install the [Gitpod plugin](https://plugins.jetbrains.com/plugin/18438-gitpod-gateway) for JetBrains Gateway.\n3. **Update your Gitpod preferences** - Select your preferred JetBrains IDE on the [Gitpod preferences page](https://gitpod.io/preferences) which will set your default IDE for future workspace starts.","metadata":{"source":"https://www.gitpod.io/docs/integrations/jetbrains-gateway","loc":{"lines":{"from":37,"to":39}}}}],["206",{"pageContent":"4. **Start (or restart) your workspace** - Either start a workspace directly from within the [JetBrains Gateway](/docs/integrations/jetbrains-gateway) via the Gitpod plugin **OR** open a new workspace directly in Gitpod where on workspace start you will be prompted to open your preferred JetBrains IDE for that workspace.","metadata":{"source":"https://www.gitpod.io/docs/integrations/jetbrains-gateway","loc":{"lines":{"from":40,"to":40}}}}],["207",{"pageContent":"### How does JetBrains and Gitpod work?\n\nOn Gitpod workspace start, a JetBrains IDE is loaded into your workspace according to your preferences. When you start a workspace the JetBrains Gateway application downloads a thin client which then connects to your Gitpod workspace.\n\nSince [JetBrains Gateway](https://www.jetbrains.com/remote-development/gateway/) downloads the thin client for you, **you do not need to download, open or modify your JetBrains IDE directly**. JetBrains licensing still applies, but is applied to the connecting thin client, not the backend running in your Gitpod workspace.","metadata":{"source":"https://www.gitpod.io/docs/integrations/jetbrains-gateway","loc":{"lines":{"from":42,"to":46}}}}],["208",{"pageContent":"### Setting a JetBrains IDE as a preference\n\nTo start a workspace using JetBrains from your browser, you need to first set your preferred JetBrains IDE as your user preference.\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Updating Gitpod IDE preferences to {title}\" src=\"/images/editors/select-jetbrains-ide.webm\" type=\"video/webm\"></video>\n    <figcaption>Updating Gitpod IDE preferences to a JetBrains IDE</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/integrations/jetbrains-gateway","loc":{"lines":{"from":48,"to":55}}}}],["209",{"pageContent":"### Opening a JetBrains IDE from Gitpod\n\nWhen starting a new workspace from Gitpod in the browser (with a JetBrains IDE set as your preference) you will see a prompt to open JetBrains Gateway. Clicking the prompt will immediately launch JetBrains Gateway and begin downloading the IDE thin client. The downloaded thin client will exactly match the IDE running in your Gitpod workspace.\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Opening a JetBrains IDE from Gitpod\" src=\"/images/editors/opening-the-thin-jetbrains-client.webm\" type=\"video/webm\"></video>\n    <figcaption>Opening JetBrains Gateway from Gitpod</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/integrations/jetbrains-gateway","loc":{"lines":{"from":57,"to":64}}}}],["210",{"pageContent":"### Updating the Gitpod plugin in JetBrains Gateway\n\nSince Gitpod and JetBrains works via JetBrains Gateway, you do not need to download a JetBrains IDE. Also, **you do not need to alter your plugin settings in your JetBrains IDE**. All setup and configuration for Gitpod and JetBrains is completed within JetBrains Gateway.\n\n<figure>\n<video playsinline autoplay no-controls loop muted  class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Updating the Gitpod plugin in JetBrains Gateway\" src=\"/images/editors/update-jetbrains-gateway-settings.webm\" type=\"video/webm\"></video>\n    <figcaption>Updating the Gitpod plugin in JetBrains Gateway</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/integrations/jetbrains-gateway","loc":{"lines":{"from":66,"to":73}}}}],["211",{"pageContent":"### Opening a JetBrains IDE from JetBrains Gateway\n\nYou can also start, and connect to Gitpod workspaces directly from JetBrains Gateway. Click Gitpod in the left-hand side of JetBrains Gateway, and paste a source control context URL directly to start a new workspace, or click connect on a running or stopped workspace.\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Opening a JetBrains IDE from Gateway\" src=\"/images/editors/open-from-jetbrains-gateway.webm\" type=\"video/webm\"></video>\n    <figcaption>Opening a JetBrains IDE from Gateway</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/integrations/jetbrains-gateway","loc":{"lines":{"from":75,"to":82}}}}],["212",{"pageContent":"## Configuring the JetBrains Gateway Host\n\nBy default the JetBrains Gateway Gitpod plugin points to `gitpod.io` as the default host for listing, opening and managing Gitpod workspaces.\n\nIf you're using Gitpod [Self-Hosted](/docs/configure/self-hosted/latest), to update the host:\n\n1. Open JetBrains Gateway\n2. Navigate to \"preferences\" (OSX) or \"settings\" (Windows/Linux)\n3. Search for \"Gitpod\" (or find it under \"tools\")\n4. Modify the `Gitpod Host` field\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Setting the Gitpod host in the JetBrains Gateway plugin\" src=\"/images/jetbrains-gateway/jetbrains-gateway-host.png\">\n    <figcaption>Setting the Gitpod host in the JetBrains Gateway plugin (OSX)</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/integrations/jetbrains-gateway","loc":{"lines":{"from":84,"to":98}}}}],["213",{"pageContent":"## Configuring JetBrains Gateway Networking\n\nThe following diagram details how the JetBrains Gateway client connects and communicates with Gitpod workspaces, for situations such as configuring corporate networking requirements.\n\n1. **JetBrains.com** - The JetBrains IDE thin client images are downloaded dynamically from JetBrains Gateway to match the exact IDE that is running in Gitpod. Access to jetbrains.com must be granted for an air-gapped Gitpod installation with JetBrains Gateway configuration to work.\n2. **JetBrains Gateway** - The JetBrains Gateway client is the component which fetches information about Gitpod workspaces, pulled from the Gitpod API via HTTPS.\n3. **JetBrains Thin Client** - The thin client connects to the Gitpod workspace via SSH, routed via the workspace proxy (\"ws-proxy\"). The SSH server (SSH Gateway) runs in the workspace proxy, not in the workspace directly.","metadata":{"source":"https://www.gitpod.io/docs/integrations/jetbrains-gateway","loc":{"lines":{"from":100,"to":106}}}}],["214",{"pageContent":"![JetBrains networking setup](/images/editors/jetbrains-architecture-dark-theme.png)\n![JetBrains networking setup](/images/editors/jetbrains-architecture-light-theme.png)","metadata":{"source":"https://www.gitpod.io/docs/integrations/jetbrains-gateway","loc":{"lines":{"from":108,"to":109}}}}],["215",{"pageContent":"## Troubleshooting\n\n-   [What should I do if JetBrains Gateway and Gitpod aren’t working?](/docs/help/troubleshooting#what-should-i-do-if-jetbrains-gateway-and-gitpod-arent-working)\n-   [Gitpod logs in JetBrains Gateway](/docs/help/troubleshooting#gitpod-logs-in-jetbrains-gateway)\n-   [Gitpod logs in JetBrains Client](/docs/help/troubleshooting#gitpod-logs-in-jetbrains-client)","metadata":{"source":"https://www.gitpod.io/docs/integrations/jetbrains-gateway","loc":{"lines":{"from":111,"to":115}}}}],["216",{"pageContent":"---\nsection:\ntitle: Introduction\n---\n\n<script lang=\"ts\">\n  import GetStarted from \"$lib/components/docs/landing-page/get-started.svelte\";\n  import Timeline from \"$lib/components/docs/landing-page/timeline/timeline.svelte\";\n  import OpenGraph from \"$lib/components/open-graph.svelte\";\n</script>\n\n<OpenGraph\ndata={{\n    description:\n      \"Explore our docs to learn how to set up and configure your cloud developer environment. Quickstart. Getting started. Configure. Develop. IDEs. Editors. Integrations. Self-Hosted. Supply Chain Security.\",\n    title: \"Gitpod Documentation - Educate, Configure, Develop\",\n    keywords: \"documentation, how to, education, learn\",\n  }}\n/>\n\n<GetStarted />\n\n## Latest updates\n\n<Timeline />\n\nTo see all updates view our [changelog](/changelog)","metadata":{"source":"https://www.gitpod.io/docs/introduction","loc":{"lines":{"from":1,"to":27}}}}],["217",{"pageContent":"---\nsection: compatibility\ntitle: Compatibility\n---\n\n<script lang=\"ts\">\n    import CompatibilityMatrix from '$lib/components/docs/compatibility-matrix.svelte';\n\n</script>\n\n# Compatibility\n\n> ⚠️ **Gitpod Self-hosted is [no longer supported](/blog/introducing-gitpod-dedicated)**\n>\n> The last update of Gitpod Self-hosted product was [November 2022](/changelog/november-self-hosted-release). Users can still request our [free community license](/community-license) however there will be no support or updates to the product. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n\nThis page shows you what components and services Gitpod is and is not compatible with. It is aimed at both individual developers that use Gitpod as well as admins that install and maintain a [Gitpod Self-Hosted](/docs/configure/self-hosted/latest) instance. You can filter the table to show only what is relevant to you.","metadata":{"source":"https://www.gitpod.io/docs/references/compatibility","loc":{"lines":{"from":1,"to":17}}}}],["218",{"pageContent":"> **Note:** It is required to have at least one of each category. SaaS users can ignore the self-hosted specific categories (see filter)\n\n<CompatibilityMatrix />","metadata":{"source":"https://www.gitpod.io/docs/references/compatibility","loc":{"lines":{"from":19,"to":21}}}}],["219",{"pageContent":"---\nsection: gp-cli\ntitle: Gitpod CLI\ndescription: Learn about the Gitpod CLI, a CLI tool used inside Gitpod workspaces. Also, learn about how you can use it to manage your workspaces and smooth your developer experience.\n---\n\n# Gitpod CLI\n\nGitpod workspaces include a command-line-utility (`gp`) that comes installed in all workspaces and prebuilds.\n\n> **Note:** The `gp` CLI is intended only to work inside a Gitpod workspace, and is not intended to be installed on your a local, or other machine.\n\n```text\nCommand line interface for Gitpod\n\nUsage:\n  gp [command]","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-cli","loc":{"lines":{"from":1,"to":17}}}}],["220",{"pageContent":"Available Commands:\n  docs                Open Gitpod Documentation in default browser\n  env                 Controls workspace environment variables.\n  help                Help about any command\n  info                Display workspace info, such as its ID, class, etc.\n  init                Create a Gitpod configuration for this project.\n  open                Opens a file in Gitpod\n  ports               Interact with workspace ports.\n  preview             Opens a URL in the IDE's preview\n  snapshot            Take a snapshot of the current workspace\n  ssh                 Show the SSH connection command for the current workspace\n  stop                Stop current workspace\n  sync-await          Awaits an event triggered using gp sync-done\n  sync-done           Notifies the corresponding gp sync-await calls that this event has happened\n  tasks               Interact with workspace tasks\n  timeout             Interact with workspace timeout configuration","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-cli","loc":{"lines":{"from":19,"to":34}}}}],["221",{"pageContent":"tasks               Interact with workspace tasks\n  timeout             Interact with workspace timeout configuration\n  top                 Display usage of workspace resources (CPU and memory)\n  url                 Prints the URL of this workspace\n  validate            [experimental] Validates the workspace (useful to debug a workspace configuration)\n  version             Prints the version of the CLI","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-cli","loc":{"lines":{"from":34,"to":39}}}}],["222",{"pageContent":"Flags:\n  -h, --help   help for gp\n\nUse \"gp [command] --help\" for more information about a command.\n```","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-cli","loc":{"lines":{"from":41,"to":45}}}}],["223",{"pageContent":"## init\n\nGitpod workspaces can be configured - see [Configuring Workspaces](/docs/configure) for more details. `gp init` generates a default `.gitpod.yml` file. You can customize it to match your requirements.\n\nAlternatively, `gp init -i` is an interactive guide which helps create the `.gitpod.yml` configuration file based on a few questions you answer.\n\nExample to start a interactive guide of `.gitpod.yml` configuration file:\n\n```sh\ngp init -i\n```\n\n## validate\n\n> The `gp validate` command is currently in [Beta](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/7671).\n\nStarts a workspace within in your currently opened workspace to quickly apply and review your configuration changes. Allows you to troubleshoot your `.gitpod.yml`, workspace image, ports, tasks and more. See [configure workspaces](/docs/configure/workspaces) for more on validating a workspace configuration.\n\n```sh\ngp validate\n```","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-cli","loc":{"lines":{"from":47,"to":67}}}}],["224",{"pageContent":"## open\n\nModern editors/IDE's support command line tooling to open a file (e.g. VS Code `code foo.txt`). In Gitpod, this can be done using `gp open <filename>`.\nWe also added common aliases for `gp open`: `code` and `open`.\n\nExample to open the `README.md` file in the current directory:\n\n```sh\ngp open README.md\n```\n\n## preview\n\n`gp preview` opens a URL. The default is to show the URL in a preview pane within the editor or IDE directly. Alternatively, you can show the preview a new tab with the `--external` flag.\n\nMake sure you provide a valid URL, i.e. including the protocol. For example, http://localhost:8080.\n\nYou can also use `gp preview <url> --external` to open the URL in a new browser tab.\n\nExample opening a gitpod workspace port 3000 as a tab using `gp url` and `gp preview`:\n\n```sh\ngp preview $(gp url 3000) --external\n```","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-cli","loc":{"lines":{"from":69,"to":92}}}}],["225",{"pageContent":"## url\n\nGitpod workspaces can expose services to the internet. `gp url` provides the URL which points to a service served from a Gitpod workspace. For example `gp url 8080` prints the URL which points to the service listening on port 8080 in this current workspace.\n\nYou can combine the `preview` and the `url` command to open a certain path instead of the default URL.\n\nFor instance:\n\n```sh\ngp preview $(gp url 3000)/my/path/index.html\n```\n\nIf you put this into the `.gitpod.yml` to open the a certain page on startup, make sure you [ignore the default action](/docs/configure/workspaces/ports) when the port opens.","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-cli","loc":{"lines":{"from":94,"to":106}}}}],["226",{"pageContent":"## env\n\nWith `gp env API_ENDPOINT=https://api.example.com` you can set an `API_ENDPOINT` environment variable that is accessible for this project, even if you stop the workspace and start a new one.\n\nTo delete or unset an environment variable, you use `gp env -u API_ENDPOINT`.\n\nPlease refer to the help output provided by `gp env --help` for more use cases of the `gp env` command.\n\nFor instance, you can use following to get your all Gitpod environment variables:\n\n```sh\ngp env\n```\n\n## sync-await\n\nIn situations where you work with multiple terminals and one depends on a task in another terminal to complete, `gp sync-await <name>` waits until you call `gp sync-done <name>` in another terminal.\n\nSee [Start Tasks](/docs/configure/workspaces/tasks#wait-for-commands-to-complete) for a real-world example.","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-cli","loc":{"lines":{"from":108,"to":126}}}}],["227",{"pageContent":"## sync-done\n\nTo notify a `gp sync-await <name>` call (see previous chapter), you can call `gp sync-done <name>`.\n\nA common use case is the following where we have three terminals:\n\n-   Terminal 1: A build process takes several minutes to complete. At the end, you call `gp sync-done build`.\n-   Terminal 2: You use `gp sync-await build && npm run start-database` to wait for the build to complete before you start a database\n-   Terminal 3: You use `gp sync-await build && npm run dev` to wait for the build to complete before you start the dev server.\n\nSee [Start Tasks](/docs/configure/workspaces/tasks#wait-for-commands-to-complete) for a real-world example.\n\n## snapshot\n\nFor sharing a complete clone of a workspace with others, `gp snapshot` is basically the CLI method for getting a snapshot URL. To learn more about snapshots, see [Collaboration & Sharing of Workspaces](/docs/configure/workspaces/collaboration#sharing-snapshots)\n\n```sh\ngp snapshot\n```","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-cli","loc":{"lines":{"from":128,"to":146}}}}],["228",{"pageContent":"## ssh\n\n`gp ssh` outputs a command you can copy/paste to another terminal to connect to your workspace via SSH. The command requires that you have [uploaded a public key to Gitpod](https://www.gitpod.io/docs/configure/user-settings/ssh#upload-an-ssh-key-to-gitpod).\n\n## stop\n\n`gp stop` is the CLI method of stopping a workspace.\n\nExample to stop the current gitpod workspace using gitpod CLI:\n\n```sh\ngp stop\n```","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-cli","loc":{"lines":{"from":148,"to":160}}}}],["229",{"pageContent":"## tasks\n\nProgrammatically view and interact with workspace tasks as defined in the project's [.gitpod.yml](/docs/references/gitpod-yml). Useful when using the command line, such as ssh'ing into a workspace or after accidentally losing view of a terminal and it's output.\n\n### list\n\nReturns a table-formatted list of tasks, their name, state and the ID of the terminal in which the task is executed.\n\n> **Tip**: You can see the task you are currently attached to highlighted in green.\n\n```sh\ngp tasks list\n```\n\nUse `gp tasks list --no-color` to disable colors for the output. It also respects the [`NO_COLOR`](https://no-color.org/) & `GP_NO_COLOR` environment variable.","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-cli","loc":{"lines":{"from":162,"to":176}}}}],["230",{"pageContent":"### attach\n\nCreates a connection from a user terminal to a given workspace's task terminal. The session is interactive. Once attached, both stdin and stdout are streamed between the user and the remote terminal. Allowing the user to run commands directly in the task terminal.\n\nRun without arguments to get a selection prompt. When only one task is running, attach will skip the prompt and automatically connect.\n\n```sh\ngp tasks attach\n```\n\nAlternatively, specify the `Terminal ID` that you can see with `gp tasks list`:\n\n```sh\ngp tasks attach <id>\n```","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-cli","loc":{"lines":{"from":178,"to":192}}}}],["231",{"pageContent":"### stop\n\nInterrupts one or more running tasks and automatically closes their terminals. Useful when you don't need a certain task anymore, when authoring the [.gitpod.yml](/docs/references/gitpod-yml) file or when you start a workspace for projects with several tasks but you don't need them and want to save time and resources.\n\nRun without arguments to get a selection prompt. Only running tasks will be offered as a choice.\n\n```sh\ngp tasks stop\n```\n\nSpecify the `Terminal ID` that you can see with `gp tasks list`.\n\n```sh\ngp tasks stop <id>\n```\n\nRun with the `--all` flag to stop all running tasks.\n\n```sh\ngp tasks stop --all\n```","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-cli","loc":{"lines":{"from":194,"to":214}}}}],["232",{"pageContent":"## timeout\n\nInteract with workspace timeout configuration. You can learn more in [Life of a Workspace](/docs/configure/workspaces/workspace-lifecycle).\n\n```sh\ngp timeout show\n```\n\n> **Note:** You can only have one workspace with extended timeout at a time.\n\nThe default timeout, and the ability to extend a workspace timeout depends on your [billing configuration](/docs/configure/billing).\n\n### set\n\nSets the current workspace's timeout to the given value. The value must be a positive integer followed by a unit of time. The unit of time can be one of `m`, `h` for minutes and hours, respectively. The maximum workspace timeout is 24 hours.\n\n<!--\nTechnically, Following ones are also valid:\n\n* `gp timeout set 300m`\n* `gp timeout set 24h`\n\n=> But Let's use minutes for public interaction as it's the most common use case.\n\n-->\n\n```sh\ngp timeout set 300m\n```\n\n### show\n\nShows the current workspace's timeout.\n\n```sh\ngp timeout show\n```","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-cli","loc":{"lines":{"from":216,"to":252}}}}],["233",{"pageContent":"### show\n\nShows the current workspace's timeout.\n\n```sh\ngp timeout show\n```\n\n### extend\n\nExtends the current workspace timeout from the default, or currently set value to 180 minutes.\n\n```sh\ngp timeout extend\n```","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-cli","loc":{"lines":{"from":252,"to":266}}}}],["234",{"pageContent":"## info\n\nDisplays information about the current [workspace](/docs/configure/workspaces) (such as the workspace ID and URL) and also the [workspace class](/docs/configure/workspaces/workspace-classes).\n\n```sh\ngp info\n```\n\nUse `gp info --json` to get the output in JSON format for programmatic use in (e.g. in shell scripts).","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-cli","loc":{"lines":{"from":268,"to":276}}}}],["235",{"pageContent":"## ports\n\nProvides a way to manage a workspace's ports. Applies to both: ports defined in [.gitpod.yml](/docs/references/gitpod-yml) and ports that are undeclared but are opened during the lifetime of the workspace.\n\n### list\n\nOutputs a table-formatted list of ports along with their status, URL, name and description.\n\n```sh\ngp ports list\n```\n\nUse `gp ports list --no-color` to disable colors for the output. It also respects the [`NO_COLOR`](https://no-color.org/) & `GP_NO_COLOR` environment variable.","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-cli","loc":{"lines":{"from":278,"to":290}}}}],["236",{"pageContent":"### expose\n\nIn Gitpod, services/servers running on a port need to be _exposed_ before they become accessible from the internet. This process only works with services listening on `0.0.0.0` and not just `localhost`.\nSometimes it is not possible to make a server listen on `0.0.0.0`, e.g. because it is not your code and there are simply no means of configuration.\n\nIn that case, `gp ports expose <port>` can be used to forward all traffic form a socket listing on all network interfaces to your process listening on localhost only.\n\n```sh\ngp ports expose <port>\n```\n\n### await\n\nWhen writing tasks to be executed on workspace start, one sometimes wants to wait for an http service to be available. `gp ports await` does that.\n\nHere's an example that will open a certain path once a service is a available:\n\n```sh\ngp ports await 3000 && gp preview $(gp url 3000)/my/path/index.html\n```","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-cli","loc":{"lines":{"from":292,"to":311}}}}],["237",{"pageContent":"### visibility\n\nYou can change a port's visibility to make it only available for **users with workspace access** (`private`) or **everyone who knows the port's URL** (`public`). A port's default visibility is always `private`, unless configured differently from within [`.gitpod.yml`](/docs/references/gitpod-yml#portsnvisibility).\n\nHere's an example which will make port `3000` public:\n\n```sh\ngp ports visibility 3000:public\n```\n\nHere's an example which will make port `3000` private:\n\n```sh\ngp ports visibility 3000:private\n```\n\n### protocol\n\nBy default ports running in the workspace are assumed to be HTTP. You can dynamically configure (without a workspace restart) a port to use HTTPS with the `gp ports protocol` command.\n\nFor example, to convert port `3000` to `https`:\n\n```sh\ngp ports protocol 3000:https\n```\n\nFor example, to convert port `3000` to `http`:\n\n```sh\ngp ports protocol 3000:http\n```","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-cli","loc":{"lines":{"from":313,"to":343}}}}],["238",{"pageContent":"## top\n\nDisplays the current workspace's class info along with the used and available CPU and memory.\n\n```sh\ngp top\n```\n\n-   Use `gp top --json` to get the output in JSON format for programmatic use in (e.g. in shell scripts).\n\n-   Use `gp top --no-color` to disable colors for the output. It also respects the [`NO_COLOR`](https://no-color.org/) & `GP_NO_COLOR` environment variable.\n\n## docs\n\nOpens the Gitpod documentation in a new browser tab.\n\n```sh\ngp docs\n```","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-cli","loc":{"lines":{"from":345,"to":363}}}}],["239",{"pageContent":"---\nsection: gitpod-public-api\ntitle: Gitpod public API\ndescription: Learn about Gitpod API and how to use it. The Gitpod public API grants direct access to Gitpod data for integration into 3rd party applications. It is in Alpha release right now.\n---\n\n<script lang=\"ts\">\n  import APIExample from \"$lib/components/docs/api-example.svelte\";\n</script>\n\n# Gitpod public API\n\n> Access Tokens are currently in [Alpha](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/10798).\n\nThe Gitpod Public API grants direct access to Gitpod data for use cases such as integration into other 3rd party applications.","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":1,"to":15}}}}],["240",{"pageContent":"## Authentication\n\nTo authenticate requests, the Gitpod API utilises [Access Token](/docs/configure/user-settings/access-tokens). In the [Gitpod Settings](https://gitpod.io/tokens), you can view and manage your PAT Tokens (_Private Beta_).\n\nKeep in mind that your access tokens have a lot of power, so protect them carefully! Avoid disclosing your private Access Tokens in areas that are open to the public, such as GitHub, client-side code, and so forth.\n\nTo Authenticate you will need to pass an Access Token as an Authorization request header bearer token in the format `Bearer <YOUR_ACCESS_TOKEN>`.\n\nExample cURL command:\n\n```bash title=\"cURL\"\ncurl 'https://api.gitpod.io/gitpod.experimental.v1.TeamsService/ListTeams' \\\n  -H 'content-type: application/json' \\\n  -H 'Authorization: Bearer <YOUR_ACCESS_TOKEN>' \\\n  --data '{}'\n```\n\n## API Reference","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":17,"to":34}}}}],["241",{"pageContent":"## Resource: Workspaces","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":36,"to":36}}}}],["242",{"pageContent":"### List all workspaces\n\nLists all the workspaces belongs to the authenticated user. Currently, it returns only the first page of the results.\n\n<APIExample >\n\n<div slot=\"curlExample\">\n\n```bash title=\"cURL\"\ncurl 'https://api.gitpod.io/gitpod.experimental.v1.WorkspacesService/ListWorkspaces' \\\n  -H 'content-type: application/json' \\\n  -H 'Authorization: Bearer <YOUR_ACCESS_TOKEN>' \\\n  --data '{}'\n```\n\n</div>\n\n<div slot=\"goExample\">\n\n```go\nfunc ExampleListWorkspaces() {\n\ttoken := \"<YOUR_ACCESS_TOKEN>\"\n\n\tgitpod, err := client.New(client.WithCredentials(token))\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Failed to construct gitpod client %v\", err)\n\t\treturn\n\t}\n\n\tresponse, err := gitpod.Workspaces.ListWorkspaces(context.Background(), connect.NewRequest(&v1.ListWorkspacesRequest{}))\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Failed to list workspaces %v\", err)\n\t\treturn\n\t}\n\n\tfmt.Fprintf(os.Stdout, \"Retrieved workspaces %v\", response.Msg.GetResult())\n}","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":38,"to":74}}}}],["243",{"pageContent":"```\n\n</div>\n\n<div slot=\"responseExample\">\n\n```json\n{\n\t\"result\": [\n\t\t{\n\t\t\t\"workspaceId\": \"<WORKSPACE_ID>\",\n\t\t\t\"ownerId\": \"<USER_ID>\",\n\t\t\t\"context\": {\n\t\t\t\t\"contextUrl\": \"https://github.com/gitpod-io/empty\",\n\t\t\t\t\"git\": {\n\t\t\t\t\t\"normalizedContextUrl\": \"https://github.com/gitpod-io/empty\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"description\": \"gitpod-io/empty \",\n\t\t\t\"status\": {\n\t\t\t\t\"instance\": {\n\t\t\t\t\t\"instanceId\": \"<INSTANCE_ID>\",\n\t\t\t\t\t\"workspaceId\": \"<WORKSPACE_ID>\",\n\t\t\t\t\t\"createdAt\": \"2022-12-19T08:36:47.254Z\",\n\t\t\t\t\t\"status\": {\n\t\t\t\t\t\t\"statusVersion\": \"<STATUS_VERSION>\",\n\t\t\t\t\t\t\"phase\": \"PHASE_STOPPED\",\n\t\t\t\t\t\t\"conditions\": {},\n\t\t\t\t\t\t\"url\": \"https://<WORKSPACE_ID>.ws-us79.gitpod.io\",\n\t\t\t\t\t\t\"admission\": \"ADMISSION_LEVEL_OWNER_ONLY\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t]\n}","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":75,"to":110}}}}],["244",{"pageContent":"```\n\n</div>\n\n</APIExample>\n\n<br>\n\n**Request Parameters**:\n\n|         Parameter          |                Description                | Type  | Required |\n| :------------------------: | :---------------------------------------: | :---: | :------: |\n| `pageSize` (_Coming Soon_) | It is maximum number of results we expect | Int32 |  false   |\n\n<br>\n\n**Response Parameters**:","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":111,"to":127}}}}],["245",{"pageContent":"|    Parameter    |                                                       Description                                                        |  Type  |\n| :-------------: | :----------------------------------------------------------------------------------------------------------------------: | :----: |\n| `nextPageToken` |                                                     Next Page Token                                                      | string |\n|  `workspaceId`  |                                                       Workspace Id                                                       | string |\n|    `ownerId`    |                                                         User Id                                                          | string |\n|   `projectId`   |                                                        Project Id                                                        | string |","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":129,"to":134}}}}],["246",{"pageContent":"|   `projectId`   |                                                        Project Id                                                        | string |\n|    `context`    |                                 `contextUrl` with details of git or prebuild or snapshot                                 | string |\n|    `status`     | will return Instance Id if currently assigned Instance Id to this workspace. Empty when there is no Instance Id assigned | string |","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":134,"to":136}}}}],["247",{"pageContent":"### Get a workspace\n\nReturns a single workspace.\n\n<APIExample >\n\n<div slot=\"curlExample\">\n\n```bash title=\"cURL\"\ncurl 'https://api.gitpod.io/gitpod.experimental.v1.WorkspacesService/GetWorkspace' \\\n  -H 'content-type: application/json' \\\n  -H 'Authorization: Bearer <YOUR_ACCESS_TOKEN>' \\\n  --data '{\"workspaceId\":\"<WORKSPACE_ID>\"}'\n```\n\n</div>\n\n<div slot=\"goExample\">\n\n```go\nfunc ExampleGetWorkspace() {\n\ttoken := \"<YOUR_ACCESS_TOKEN>\"\n\n\tgitpod, err := client.New(client.WithCredentials(token))\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Failed to construct gitpod client %v\", err)\n\t\treturn\n\t}\n\n\tresponse, err := gitpod.Workspaces.GetWorkspace(context.Background(), connect.NewRequest(&v1.GetWorkspaceRequest{\n\t\tWorkspaceId: \"<WORKSPACE_ID>\",\n\t}))\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Failed to get workspace %v\", err)\n\t\treturn\n\t}\n\n\tfmt.Fprintf(os.Stdout, \"Retrieved workspace %v\", response.Msg.GetResult())\n}","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":138,"to":176}}}}],["248",{"pageContent":"```\n\n</div>\n\n<div slot=\"responseExample\">\n\n```json\n{\n\t\"result\": {\n\t\t\"workspaceId\": \"<WORKSPACE_ID>\",\n\t\t\"ownerId\": \"<USER_ID>\",\n\t\t\"context\": {\n\t\t\t\"contextUrl\": \"https://github.com/gitpod-io/empty\",\n\t\t\t\"git\": {\n\t\t\t\t\"normalizedContextUrl\": \"https://github.com/gitpod-io/empty\"\n\t\t\t}\n\t\t},\n\t\t\"description\": \"gitpod-io/empty \",\n\t\t\"status\": {\n\t\t\t\"instance\": {\n\t\t\t\t\"instanceId\": \"<INSTANCE_ID>\",\n\t\t\t\t\"workspaceId\": \"<WORKSPACE_ID>\",\n\t\t\t\t\"createdAt\": \"2022-12-22T07:43:16.152Z\",\n\t\t\t\t\"status\": {\n\t\t\t\t\t\"statusVersion\": \"<STATUS_VERSION>\",\n\t\t\t\t\t\"phase\": \"PHASE_RUNNING\",\n\t\t\t\t\t\"conditions\": {\n\t\t\t\t\t\t\"firstUserActivity\": \"2022-12-22T07:43:21.732Z\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"https://<WORKSPACE_ID>.ws-us80.gitpod.io\",\n\t\t\t\t\t\"admission\": \"ADMISSION_LEVEL_OWNER_ONLY\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":177,"to":212}}}}],["249",{"pageContent":"```\n\n</div>\n\n</APIExample>\n\n<br>\n\n**Request Parameters**:\n\n|   Parameter   | Description  |  Type  | Required |\n| :-----------: | :----------: | :----: | :------: |\n| `workspaceId` | Workspace Id | string |   true   |\n\n<br>\n\n**Response Parameters**:","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":213,"to":229}}}}],["250",{"pageContent":"|   Parameter   |                                                       Description                                                        |  Type  |\n| :-----------: | :----------------------------------------------------------------------------------------------------------------------: | :----: |\n| `workspaceId` |                                                       Workspace Id                                                       | string |\n|   `ownerId`   |                                                         User Id                                                          | string |\n|  `projectId`  |                                                        Project Id                                                        | string |\n|   `context`   |                                 `contextUrl` with details of git or prebuild or snapshot                                 | string |","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":231,"to":236}}}}],["251",{"pageContent":"|   `context`   |                                 `contextUrl` with details of git or prebuild or snapshot                                 | string |\n|   `status`    | will return Instance Id if currently assigned Instance Id to this workspace. Empty when there is no Instance Id assigned | string |","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":236,"to":237}}}}],["252",{"pageContent":"<!-- ### Get owner token\n\nIt returns the owner token of a workspace.\n\n**Usage**: `GetOwnerToken()`\n\n**Request Parameters**:\n\n|   Parameter   | Description  |  Type  | Required |\n| :-----------: | :----------: | :----: | :------: |\n| `workspaceId` | Workspace Id | string |   true   |\n\n<br>\n\n**Response Parameters**:\n\n| Parameter | Description |  Type  |\n| :-------: | :---------: | :----: |\n|  `token`  | Owner Token | string | -->","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":239,"to":257}}}}],["253",{"pageContent":"### Create Workspace (_Coming Soon_)\n\nCreates a new workspace from any context URL (Repository, Issues, Pull Requests, Files, etc.)\n\n### Start workspace (_Coming Soon_)\n\nStarts an older workspace (instance).\n\n**Usage**: `StartWorkspace()`\n\n**Request Parameters**:\n\n|   Parameter   |              Description              |  Type  | Required |\n| :-----------: | :-----------------------------------: | :----: | :------: |\n| `workspaceId` | Workspace Id that needs to be stopped | string |   true   |\n\n<br>\n\n**Response Parameters**:\n\n|   Parameter    |         Description          |  Type  |\n| :------------: | :--------------------------: | :----: |\n|  `instanceId`  |         Instance Id          | string |\n| `workspaceUrl` | URL of the started workspace | string |","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":259,"to":282}}}}],["254",{"pageContent":"### Stop workspace\n\nStops a running workspace (instance).\n\n<APIExample >\n\n<div slot=\"curlExample\">\n\n```bash title=\"cURL\"\ncurl 'https://api.gitpod.io/gitpod.experimental.v1.WorkspacesService/StopWorkspace' \\\n  -H 'content-type: application/json' \\\n  -H 'Authorization: Bearer <YOUR_ACCESS_TOKEN>' \\\n  --data '{\"workspaceId\":\"<WORKSPACE_ID>\"}'\n```\n\n</div>\n\n<!-- Uncomment following, if we get some better response from API endpoint-->\n\n<!-- <div slot=\"responseExample\">\n\n```json\n{}\n```\n\n</div> -->\n\n</APIExample>\n\n**Request Parameters**:\n\n|   Parameter   |              Description              |  Type  | Required |\n| :-----------: | :-----------------------------------: | :----: | :------: |\n| `workspaceId` | Workspace Id that needs to be stopped | string |   true   |\n\n<br>\n\n**Response**: It stops the requested workspace.","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":284,"to":321}}}}],["255",{"pageContent":"### Delete workspace\n\nIt deletes the workspace & also stops the workspace if it is running.\n\n<APIExample >\n\n<div slot=\"curlExample\">\n\n```bash title=\"cURL\"\ncurl 'https://api.gitpod.io/gitpod.experimental.v1.WorkspacesService/DeleteWorkspace' \\\n  -H 'content-type: application/json' \\\n  -H 'Authorization: Bearer <YOUR_ACCESS_TOKEN>' \\\n  --data '{\"workspaceId\":\"<WORKSPACE_ID>\"}'\n```\n\n</div>\n\n<!-- Uncomment following, if we get some better response from API endpoint-->\n\n<!-- <div slot=\"responseExample\">\n\n```json\n{}\n```\n\n</div> -->\n\n</APIExample>\n\n**Request Parameters**:\n\n|   Parameter   |              Description              |  Type  | Required |\n| :-----------: | :-----------------------------------: | :----: | :------: |\n| `workspaceId` | Workspace Id that needs to be deleted | string |   true   |\n\n<br>\n\n**Response**: It deletes the requested workspace.\n\n---","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":323,"to":362}}}}],["256",{"pageContent":"## Resource: Teams","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":364,"to":364}}}}],["257",{"pageContent":"### Create a team\n\nCreates a team.\n\n<APIExample >\n\n<div slot=\"curlExample\">\n\n```bash title=\"cURL\"\ncurl 'https://api.gitpod.io/gitpod.experimental.v1.TeamsService/CreateTeam' \\\n  -H 'content-type: application/json' \\\n  -H 'Authorization: Bearer <YOUR_ACCESS_TOKEN>' \\\n  --data '{\"name\":\"<TEAM_NAME>\"}'\n```\n\n</div>\n\n<div slot=\"responseExample\">\n\n```json\n{\n\t\"team\": {\n\t\t\"id\": \"<TEAM_ID>\",\n\t\t\"name\": \"<TEAM_NAME>\",\n\t\t\"members\": [\n\t\t\t{\n\t\t\t\t\"userId\": \"<USER_ID>\",\n\t\t\t\t\"role\": \"TEAM_ROLE_OWNER\",\n\t\t\t\t\"memberSince\": \"2022-12-22T07:53:52.210Z\",\n\t\t\t\t\"avatarUrl\": \"<USER_AVATAR_URL>\",\n\t\t\t\t\"fullName\": \"<USER_FULL_NAME>\",\n\t\t\t\t\"primaryEmail\": \"<USER_EMAIL>\"\n\t\t\t}\n\t\t],\n\t\t\"teamInvitation\": { \"id\": \"<TEAM_INVITATION_ID>\" }\n\t}\n}","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":366,"to":402}}}}],["258",{"pageContent":"```\n\n</div>\n\n</APIExample>\n\n<br>\n\n**Request Parameters**:\n\n| Parameter | Description |  Type  | Required |\n| :-------: | :---------: | :----: | :------: |\n|  `name`   |  Team name  | string |   true   |\n\n<br>\n\n**Response Parameters**:\n\n|   Parameter    |        Description        |  Type  |\n| :------------: | :-----------------------: | :----: |\n|      `id`      |       UUID of Team        | string |\n|     `name`     |       Name of team        | string |\n| `creationTime` |   Creation time of team   | string |\n|   `members`    | List of members in a team | array  |","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":403,"to":426}}}}],["259",{"pageContent":"### Get a team\n\nReturns a single team.\n\n<APIExample >\n\n<div slot=\"curlExample\">\n\n```bash title=\"cURL\"\ncurl 'https://api.gitpod.io/gitpod.experimental.v1.TeamsService/GetTeam' \\\n  -H 'content-type: application/json' \\\n  -H 'Authorization: Bearer <YOUR_ACCESS_TOKEN>' \\\n  --data '{\"teamId\":\"<TEAM_ID>\"}'\n```\n\n</div>\n\n<div slot=\"goExample\">\n\n```go\nfunc ExampleGetTeam() {\n\ttoken := \"<YOUR_ACCESS_TOKEN>\"\n\n\tgitpod, err := client.New(client.WithCredentials(token))\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Failed to construct gitpod client %v\", err)\n\t\treturn\n\t}\n\n\tresponse, err := gitpod.Teams.GetTeam(context.Background(), connect.NewRequest(&v1.GetTeamRequest{\n\t\tTeamId: \"<TEAM_ID>\",\n\t}))\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Failed to get team %v\", err)\n\t\treturn\n\t}\n\n\tfmt.Fprintf(os.Stdout, \"Retrieved team %v\", response.Msg.GetTeam())\n}","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":428,"to":466}}}}],["260",{"pageContent":"```\n\n</div>\n\n<div slot=\"responseExample\">\n\n```json\n{\n\t\"team\": {\n\t\t\"id\": \"<TEAM_ID>\",\n\t\t\"name\": \"<TEAM_NAME>\",\n\t\t\"members\": [\n\t\t\t{\n\t\t\t\t\"userId\": \"<USER_ID>\",\n\t\t\t\t\"role\": \"TEAM_ROLE_MEMBER\",\n\t\t\t\t\"memberSince\": \"2022-12-22T08:05:20.465Z\",\n\t\t\t\t\"avatarUrl\": \"<USER_AVATAR_URL>\",\n\t\t\t\t\"fullName\": \"<USER_FULL_NAME>'s Bot\",\n\t\t\t\t\"primaryEmail\": \"<USER_EMAIL>\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"userId\": \"<USER_ID>\",\n\t\t\t\t\"role\": \"TEAM_ROLE_OWNER\",\n\t\t\t\t\"memberSince\": \"2022-12-22T07:53:52.210Z\",\n\t\t\t\t\"avatarUrl\": \"<USER_AVATAR_URL>\",\n\t\t\t\t\"fullName\": \"<USER_FULL_NAME>\",\n\t\t\t\t\"primaryEmail\": \"<USER_EMAIL>\"\n\t\t\t}\n\t\t],\n\t\t\"teamInvitation\": { \"id\": \"<TEAM_INVITATION_ID>\" }\n\t}\n}","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":467,"to":498}}}}],["261",{"pageContent":"```\n\n</div>\n\n</APIExample>\n\n<br>\n\n**Request Parameters**:\n\n| Parameter | Description |  Type  | Required |\n| :-------: | :---------: | :----: | :------: |\n| `teamId`  |   Team Id   | string |   true   |\n\n**Response Parameters**:\n\n|   Parameter    |        Description        |  Type  |\n| :------------: | :-----------------------: | :----: |\n|      `id`      |       UUID of Team        | string |\n|     `name`     |       Name of team        | string |\n| `creationTime` |   Creation time of team   | string |\n|   `members`    | List of members in a team | array  |","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":499,"to":520}}}}],["262",{"pageContent":"### List all teams\n\nLists all the teams belongs to the authenticated user.\n\n<APIExample >\n\n<div slot=\"curlExample\">\n\n```bash title=\"cURL\"\ncurl 'https://api.gitpod.io/gitpod.experimental.v1.TeamsService/ListTeams' \\\n  -H 'content-type: application/json' \\\n  -H 'Authorization: Bearer <YOUR_ACCESS_TOKEN>' \\\n  --data '{}'\n```\n\n</div>\n\n<div slot=\"goExample\">\n\n```go\nfunc ExampleListTeams() {\n\ttoken := \"<YOUR_ACCESS_TOKEN>\"\n\tgitpod, err := client.New(client.WithCredentials(token))\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Failed to construct gitpod client %v\", err)\n\t\treturn\n\t}\n\tctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)\n\tdefer cancel()\n\tresponse, err := gitpod.Teams.ListTeams(ctx, connect.NewRequest(&v1.ListTeamsRequest{}))\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Failed to list teams %v\", err)\n\t\treturn\n\t}\n\n\tfmt.Fprintf(os.Stdout, \"Retrieved teams %v\", response.Msg.GetTeams())\n}","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":522,"to":558}}}}],["263",{"pageContent":"```\n\n</div>\n\n<div slot=\"responseExample\">\n\n```json\n{\n\t\"teams\": [\n\t\t{\n\t\t\t\"id\": \"<TEAM_ID>\",\n\t\t\t\"name\": \"<TEAM_NAME>\",\n\t\t\t\"members\": [\n\t\t\t\t{\n\t\t\t\t\t\"userId\": \"<USER_ID>\",\n\t\t\t\t\t\"role\": \"TEAM_ROLE_OWNER\",\n\t\t\t\t\t\"memberSince\": \"2022-09-26T04:33:17.557Z\",\n\t\t\t\t\t\"avatarUrl\": \"<USER_AVATAR_URL>\",\n\t\t\t\t\t\"fullName\": \"<USER_FULL_NAME>\",\n\t\t\t\t\t\"primaryEmail\": \"<USER_EMAIL>\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"teamInvitation\": { \"id\": \"<TEAM_INVITATION_ID>\" }\n\t\t},\n\t\t{\n\t\t\t\"id\": \"<TEAM_ID>\",\n\t\t\t\"name\": \"<TEAM_NAME>\",\n\t\t\t\"members\": [\n\t\t\t\t{\n\t\t\t\t\t\"userId\": \"<USER_ID>\",\n\t\t\t\t\t\"role\": \"TEAM_ROLE_OWNER\",\n\t\t\t\t\t\"memberSince\": \"2022-09-25T15:41:41.352Z\",\n\t\t\t\t\t\"avatarUrl\": \"<USER_AVATAR_URL>\",\n\t\t\t\t\t\"fullName\": \"<USER_FULL_NAME>\",\n\t\t\t\t\t\"primaryEmail\": \"<USER_EMAIL>\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"teamInvitation\": { \"id\": \"<TEAM_INVITATION_ID>\" }\n\t\t}\n\t]\n}","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":559,"to":599}}}}],["264",{"pageContent":"```\n\n</div>\n\n</APIExample>\n<br>\n\n**Request Parameters**:\n\n| Parameter  |                Description                | Type  | Required |\n| :--------: | :---------------------------------------: | :---: | :------: |\n| `pageSize` | It is maximum number of results we expect | Int32 |  false   |\n\n<br>\n\n**Response Parameters**:\n\n| Parameter |       Description       | Type  |\n| :-------: | :---------------------: | :---: |\n|  `teams`  | List of teams of a user | array |","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":600,"to":619}}}}],["265",{"pageContent":"### Join a team\n\nJoins a team.\n\n<APIExample >\n\n<div slot=\"curlExample\">\n\n```bash title=\"cURL\"\ncurl 'https://api.gitpod.io/gitpod.experimental.v1.TeamsService/JoinTeam' \\\n  -H 'content-type: application/json' \\\n  -H 'Authorization: Bearer <YOUR_ACCESS_TOKEN>' \\\n  --data '{\"invitationId\":\"<TEAM_INVITATION_ID>\"}'\n```\n\n</div>\n\n<div slot=\"responseExample\">\n\n```json\n{\n\t\"team\": {\n\t\t\"id\": \"<TEAM_ID>\",\n\t\t\"name\": \"<TEAM_NAME>\",\n\t\t\"members\": [\n\t\t\t{\n\t\t\t\t\"userId\": \"<USER_ID>\",\n\t\t\t\t\"role\": \"TEAM_ROLE_OWNER\",\n\t\t\t\t\"memberSince\": \"2022-12-22T07:53:52.210Z\",\n\t\t\t\t\"avatarUrl\": \"<USER_AVATAR_URL>\",\n\t\t\t\t\"fullName\": \"<USER_FULL_NAME>\",\n\t\t\t\t\"primaryEmail\": \"<USER_EMAIL>\"\n\t\t\t}\n\t\t],\n\t\t\"teamInvitation\": { \"id\": \"<TEAM_INVITATION_ID>\" }\n\t}\n}","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":621,"to":657}}}}],["266",{"pageContent":"```\n\n</div>\n\n</APIExample>\n\n<br>\n\n**Request Parameters**:\n\n|   Parameter    |    Description     |  Type  | Required |\n| :------------: | :----------------: | :----: | :------: |\n| `invitationId` | Team Invitation ID | string |   true   |\n\n<br>\n\n**Response Parameters**:\n\n|   Parameter    |        Description        |  Type  |\n| :------------: | :-----------------------: | :----: |\n|      `id`      |       UUID of Team        | string |\n|     `name`     |       Name of team        | string |\n| `creationTime` |   Creation time of team   | string |\n|   `members`    | List of members in a team | array  |","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":658,"to":681}}}}],["267",{"pageContent":"### Reset team invitation\n\nResets the team invitation.\n\n<APIExample >\n\n<div slot=\"curlExample\">\n\n```bash title=\"cURL\"\ncurl 'https://api.gitpod.io/gitpod.experimental.v1.TeamsService/ResetTeamInvitation' \\\n  -H 'content-type: application/json' \\\n  -H 'Authorization: Bearer <YOUR_ACCESS_TOKEN>' \\\n  --data '{\"teamId\":\"<TEAM_ID>\"}'\n```\n\n</div>\n\n<div slot=\"responseExample\">\n\n```json\n{\n\t\"teamInvitation\": {\n\t\t\"id\": \"<TEAM_INVITATION_ID>\"\n\t}\n}\n```\n\n</div>\n\n</APIExample>\n\n<br>\n\n**Request Parameters**:\n\n| Parameter |    Description     |  Type  | Required |\n| :-------: | :----------------: | :----: | :------: |\n| `teamId`  | Team Invitation ID | string |   true   |\n\n<br>\n\n**Response Parameters**:\n\n|   Parameter    |        Description        |  Type  |\n| :------------: | :-----------------------: | :----: |\n| `invitationId` | new Invitation Id of Team | string |","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":683,"to":728}}}}],["268",{"pageContent":"### Update a team member role\n\nUpdates a team member role\n\n<APIExample >\n\n<div slot=\"curlExample\">\n\n```bash title=\"cURL\"\ncurl 'https://api.gitpod.io/gitpod.experimental.v1.TeamsService/UpdateTeamMember' \\\n  -H 'content-type: application/json' \\\n  -H 'Authorization: Bearer <YOUR_ACCESS_TOKEN>' \\\n  --data '{\"teamId\":\"<TEAM_ID>\", \"teamMember\": {\"userId\":\"<USER_ID>\", \"role\":\"TEAM_ROLE_OWNER\"}}'\n```\n\n</div>\n\n<div slot=\"responseExample\">\n\n```json\n{\n\t\"teamMember\": {\n\t\t\"userId\": \"<USER_ID>\",\n\t\t\"role\": \"TEAM_ROLE_OWNER\"\n\t}\n}","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":730,"to":755}}}}],["269",{"pageContent":"```\n\n</div>\n\n<div slot=\"responseExample\">\n\n```json\n{\n\t\"teamMember\": {\n\t\t\"userId\": \"<USER_ID>\",\n\t\t\"role\": \"TEAM_ROLE_OWNER\"\n\t}\n}\n```\n\n</div>\n\n</APIExample>\n\n<br>\n\n**Request Parameters**:\n\n| Parameter |                          Description                           |  Type  | Required |\n| :-------: | :------------------------------------------------------------: | :----: | :------: |\n| `teamId`  |                           Team name                            | string |   true   |\n| `userId`  |             User ID of a team member being updated             | string |   true   |\n|  `role`   | Role of a team member: `TEAM_ROLE_OWNER` or `TEAM_ROLE_MEMBER` | string |   true   |\n\n<br>\n\n**Response Parameters**:\n\n| Parameter |      Description       |  Type  |\n| :-------: | :--------------------: | :----: |\n| `userId`  | User ID of team member | string |\n|  `role`   |    New role of team    | string |","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":755,"to":791}}}}],["270",{"pageContent":"### Delete team member\n\nDeletes a team member.\n\n<APIExample >\n\n<div slot=\"curlExample\">\n\n```bash title=\"cURL\"\ncurl 'https://api.gitpod.io/gitpod.experimental.v1.TeamsService/DeleteTeamMember' \\\n  -H 'content-type: application/json' \\\n  -H 'Authorization: Bearer <YOUR_ACCESS_TOKEN>' \\\n  --data '{\"teamId\":\"<TEAM_ID>\", \"teamMemberId\": \"<USER_ID>\"}'\n```\n\n</div>\n\n<!-- Uncomment following, if we get some better response from API endpoint-->\n\n<!-- <div slot=\"responseExample\">\n\n```json\n{}\n```\n\n</div> -->\n\n</APIExample>\n\n<br>\n\n**Request Parameters**:\n\n|   Parameter    |           Description           |  Type  | Required |\n| :------------: | :-----------------------------: | :----: | :------: |\n|    `teamId`    |            Team name            | string |   true   |\n| `teamMemberId` | Id of team member being updated | string |   true   |\n\n<br>\n\n**Response**: It deletes the team member from the team.","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":793,"to":833}}}}],["271",{"pageContent":"### Delete a team\n\nDeletes a team.\n\n<APIExample >\n\n<div slot=\"curlExample\">\n\n```bash title=\"cURL\"\ncurl 'https://api.gitpod.io/gitpod.experimental.v1.TeamsService/DeleteTeam' \\\n  -H 'content-type: application/json' \\\n  -H 'Authorization: Bearer <YOUR_ACCESS_TOKEN>' \\\n  --data '{\"teamId\":\"<TEAM_ID>\"}'\n```\n\n</div>\n\n<!-- Uncomment following, if we get some better response from API endpoint-->\n\n<!-- <div slot=\"responseExample\">\n\n```json\n{}\n```\n\n</div> -->\n\n</APIExample>\n\n<br>\n\n**Request Parameters**:\n\n| Parameter | Description |  Type  | Required |\n| :-------: | :---------: | :----: | :------: |\n| `teamId`  |  Team name  | string |   true   |\n\n<br>\n\n**Response**: It deletes the requested team.","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":835,"to":874}}}}],["272",{"pageContent":"## API language clients","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":876,"to":876}}}}],["273",{"pageContent":"### Go\n\nThe following is an example of how to use the Go client library with the Public API for retrieving teams data. Replace the environment variable `PERSONAL_PAT` with your own personal access token, for example: `export PERSONAL_PAT=<your-personal-pat>`\n\n```go\n// Download the helper library using go get -u github.com/gitpod-io/gitpod/components/public-api/go\npackage main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"os\"\n\n    \"github.com/bufbuild/connect-go\"\n    \"github.com/gitpod-io/gitpod/components/public-api/go/client\"\n    v1 \"github.com/gitpod-io/gitpod/components/public-api/go/experimental/v1\"\n)\n\nfunc main() {\n    token := \"<YOUR_ACCESS_TOKEN>\"\n\n    gitpod, err := client.New(client.WithCredentials(token))\n    if err != nil {\n        fmt.Fprintf(os.Stderr, \"Failed to construct gitpod client %v\", err)\n        return\n    }","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":878,"to":903}}}}],["274",{"pageContent":"gitpod, err := client.New(client.WithCredentials(token))\n    if err != nil {\n        fmt.Fprintf(os.Stderr, \"Failed to construct gitpod client %v\", err)\n        return\n    }\n\n    response, err := gitpod.Teams.ListTeams(context.Background(), connect.NewRequest(&v1.ListTeamsRequest{}))\n    if err != nil {\n        fmt.Fprintf(os.Stderr, \"Failed to list teams %v\", err)\n        return\n    }\n\n    fmt.Fprintf(os.Stdout, \"Retrieved teams %v\", response.Msg.GetTeams())\n}\n```","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":903,"to":917}}}}],["275",{"pageContent":"### TypeScript\n\n> 🚧 Under development","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-public-api","loc":{"lines":{"from":919,"to":921}}}}],["276",{"pageContent":"---\nsection: gitpod-yml\ntitle: .gitpod.yml\ndescription: Learn how to configure Gitpod workspaces using the .gitpod.yml file. This file contains properties for configuring Docker images, Prebuilds, VS Code extensions, JetBrains plugins, tasks and more.\n---\n\n# .gitpod.yml\n\nThe `.gitpod.yml` file instructs Gitpod on how to prepare and build a project, such as starting development servers and configuring [Prebuilds](/docs/configure/projects/prebuilds). Below is a full reference of all available properties. To see the underlying schema, please refer to [`gitpod-io/gitpod`](https://github.com/gitpod-io/gitpod/blob/main/components/gitpod-protocol/data/gitpod-schema.json) in the [gitpod-io/gitpod](https://github.com/gitpod-io/gitpod) repository.\n\n> For a more comprehensive configuration guide, see [configuring a project](/docs/configure/workspaces).","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-yml","loc":{"lines":{"from":1,"to":11}}}}],["277",{"pageContent":"-   [.gitpod.yml](#.gitpod.yml)\n    -   [`additionalRepositories`](#additionalrepositories)\n    -   [`checkoutLocation`](#checkoutlocation)\n    -   [`coreDump`](#coreDump)\n    -   [`gitConfig`](#gitconfig)\n    -   [`github`](#github)\n        -   [`prebuilds.addBadge`](#prebuildsaddbadge)\n        -   [`prebuilds.addCheck`](#prebuildsaddcheck)\n        -   [`prebuilds.addComment`](#prebuildsaddcomment)\n        -   [`prebuilds.addLabel`](#prebuildsaddlabel)\n        -   [`prebuilds.branches`](#prebuildsbranches)\n        -   [`prebuilds.master`](#prebuildsmaster)\n        -   [`prebuilds.pullRequests`](#prebuildspullrequests)\n        -   [`prebuilds.pullRequestsFromForks`](#prebuildspullrequestsfromforks)\n    -   [`image`](#image)\n        -   [`image.file`](#imagefile)\n        -   [`image.context`](#imagecontext)\n    -   [`jetbrains`](#jetbrains)\n        -   [`jetbrains.plugins`](#jetbrainsplugins)\n        -   [`jetbrains.[product]`](#jetbrainsproduct)","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-yml","loc":{"lines":{"from":13,"to":32}}}}],["278",{"pageContent":"-   [`image.context`](#imagecontext)\n    -   [`jetbrains`](#jetbrains)\n        -   [`jetbrains.plugins`](#jetbrainsplugins)\n        -   [`jetbrains.[product]`](#jetbrainsproduct)\n        -   [`jetbrains.[product].plugins`](#jetbrainsproductplugins)\n        -   [`jetbrains.[product].prebuilds`](#jetbrainsproductprebuilds)\n        -   [`jetbrains.[product].vmoptions`](#jetbrainsproductvmoptions)\n    -   [`ports`](#ports)\n        -   [`ports[n].name`](#portsnname)\n        -   [`ports[n].description`](#portsndescription)\n        -   [`ports[n].onOpen`](#portsnonopen)\n        -   [`ports[n].port`](#portsnport)\n        -   [`ports[n].visibility`](#portsnvisibility)\n        -   [`ports[n].protocol`](#portsprotocol)\n    -   [`tasks`](#tasks)\n        -   [`tasks[n].before`](#tasksnbefore)\n        -   [`tasks[n].command`](#tasksncommand)\n        -   [`tasks[n].env`](#tasksnenv)\n        -   [`tasks[n].init`](#tasksninit)\n        -   [`tasks[n].name`](#tasksnname)","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-yml","loc":{"lines":{"from":32,"to":51}}}}],["279",{"pageContent":"-   [`tasks[n].command`](#tasksncommand)\n        -   [`tasks[n].env`](#tasksnenv)\n        -   [`tasks[n].init`](#tasksninit)\n        -   [`tasks[n].name`](#tasksnname)\n        -   [`tasks[n].openIn`](#tasksnopenin)\n        -   [`tasks[n].openMode`](#tasksnopenmode)\n        -   [`tasks[n].prebuild`](#tasksnprebuild)\n    -   [`mainConfiguration`](#mainconfiguration)\n    -   [`vscode`](#vscode)\n        -   [`vscode.extensions`](#vscodeextensions)\n    -   [`workspaceLocation`](#workspacelocation)","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-yml","loc":{"lines":{"from":51,"to":61}}}}],["280",{"pageContent":"## `additionalRepositories`\n\n> additionalRepositories is currently in [Beta](/docs/help/public-roadmap/release-cycle). [Send feedback](https://github.com/gitpod-io/gitpod/issues/8623).\n\nDefines additional source control repositories to clone and where the repository is cloned under `/workspaces`\n\n<div class=\"overflow-x-auto\">\n\n| Type     | Default   |\n| -------- | --------- |\n| `object` | `<empty>` |\n\n</div>\n\n**Demo**\n\n<a href=\"https://gitpod.io/#https://github.com/gitpod-io/demo-multi-repo-frontend\"><img src=\"https://gitpod-staging.com/button/open-in-gitpod.svg\"/></a>\n\n**Example**\n\n```yml\nadditionalRepositories:\n    - url: https://github.com/gitpod-io/demo-multi-repo-backend\n      # checkoutLocation is optional and relative to /workspaces.\n      # by default the location defaults to the repository name.\n      checkoutLocation: backend","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-yml","loc":{"lines":{"from":63,"to":88}}}}],["281",{"pageContent":"```\n\nWhen the above configuration is defined then the following additional steps happen when Gitpod workspace is started:\n\n1. If you open a workspace on a branch, Gitpod will clone the same-named branch in all repositories. If such a branch doesn’t exist Gitpod checks out the default branch.\n1. The contents of the branch is cloned under `/workspaces/`\n1. The contents of `https://github.com/gitpod-io/demo-multi-repo-backend` is cloned to `/workspaces/backend`\n\nAfter all of the source control repositories have been cloned then the `before`, `init` and `command` [tasks](https://www.gitpod.io/docs/configure/workspaces/tasks) are executed as per normal.\n\nIf you need to run commands (such as package installation or compilation) on the source control repositories which have been cloned then change your working directory to the use configured or default `checkoutLocation` location using the `before` task.\n\n**Example**","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-yml","loc":{"lines":{"from":89,"to":101}}}}],["282",{"pageContent":"**Example**\n\n```yml\n# example .gitpod.yml from https://github.com/gitpod-io/demo-multi-repo-frontend\nadditionalRepositories:\n    - url: https://github.com/gitpod-io/demo-multi-repo-backend\n      # checkoutLocation is optional and relative to /workspaces.\n      # by default the location defaults to the repository name.\n      checkoutLocation: backend\n\ntasks:\n    - name: backend\n      # change working directory as per configured in `checkoutLocation`\n      # which is configured above as `/workspaces/backend`\n      before: |\n          cd ../backend\n      init: |\n          echo npm install\n      command: |\n          echo npm run dev\n\n      # changing of working directory is not required as these tasks will\n      # by default by executed in `/workspaces/demo-multi-repo-frontend`\n    - name: frontend\n      init: |\n          echo npm install\n          echo npm run build\n      command: |\n          echo npm run dev\n```","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-yml","loc":{"lines":{"from":101,"to":130}}}}],["283",{"pageContent":"## `checkoutLocation`\n\nDefine where Gitpod checks out the project's code, relative to `/workspace`.\n\nIn most cases, this is not needed. If you work on an older Go project, please see the [Go Language Page](/docs/introduction/languages/go) for more details.\n\n<div class=\"overflow-x-auto\">\n\n| Type     | Default      |\n| -------- | ------------ |\n| `string` | `/workspace` |\n\n</div>\n\n**Example**\n\n```yml\ncheckoutLocation: 'go/src/github.com/demo-apps/go-gin-app'\n```","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-yml","loc":{"lines":{"from":132,"to":150}}}}],["284",{"pageContent":"## `coreDump`\n\nDefine workspace core dump behavior.\n\nFor most cases, setting the `coreDump` property is not required. However, it can be a valuable feature to debug C++, or when debugging add-ons in Rust, Python, or node.js.\n\n<div class=\"overflow-x-auto\">\n\n| Type     | Default   |\n| -------- | --------- |\n| `object` | `<empty>` |\n\n</div>\n\n**Example**\n\n```yml\ncoreDump:\n    enabled: true\n```\n\nYou can also set custom size values for the generated core files using the `softLimit` and `hardLimit` values (see example below). The setting `softLimit` configures the upper limit on the size of the core dump file that will be produced if a process receives a core dump signal, while `hardLimit` allows setting a hard limit to act as a ceiling for the soft limit.\n\n```yml\ncoreDump:\n    enabled: true\n    softLimit: <bytes>\n    hardLimit: <bytes>\n```\n\nFor more details, please see the [Linux man page for `getrlimit`](https://man7.org/linux/man-pages/man2/getrlimit.2.html)","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-yml","loc":{"lines":{"from":152,"to":182}}}}],["285",{"pageContent":"## `gitConfig`\n\nDefine a workspace's git configuration as key-value pairs.\n\nPlease refer to https://git-scm.com/docs/git-config#_values for a list of accepted values.\n\n<div class=\"overflow-x-auto\">\n\n| Type     | Default   |\n| -------- | --------- |\n| `object` | `<empty>` |\n\n</div>\n\n**Example**\n\n```yml\ngitConfig:\n    alias.st: status\n    core.autocrlf: input\n```","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-yml","loc":{"lines":{"from":184,"to":204}}}}],["286",{"pageContent":"## `github`\n\nConfigure the [GitHub Gitpod](https://github.com/apps/gitpod-io) app. At this time, the following configuration is used to configure [continuous prebuilds](/docs/configure/projects/prebuilds) for GitHub repositories.\n\n<div class=\"overflow-x-auto\">\n\n| Type     | Default   |\n| -------- | --------- |\n| `object` | `<empty>` |\n\n</div>\n\n**Example**\n\n```yml\ngithub:\n    prebuilds:\n        master: true\n        branches: true\n        pullRequests: true\n        pullRequestsFromForks: true\n        addCheck: false\n        addComment: false\n        addBadge: true\n```","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-yml","loc":{"lines":{"from":206,"to":230}}}}],["287",{"pageContent":"### `prebuilds.addBadge`\n\nGitpod can modify the description of a pull request to add an “Open in Gitpod” button. This approach produces fewer GitHub notifications than [adding a comment](#prebuildsaddcomment), but can also create a concurrent editing conflict when the bot and a user try to edit the description of a pull request at the same time.\n\n![An Open in Gitpod badge in a PR description](/images/docs/beta/references/gitpod-yml/references-gitpod-yml-github-badge.png)\n\n<div class=\"overflow-x-auto\">\n\n| Type      | Default |\n| --------- | ------- |\n| `boolean` | `false` |\n\n</div>","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-yml","loc":{"lines":{"from":232,"to":244}}}}],["288",{"pageContent":"### `prebuilds.addCheck`\n\nConfigure whether Gitpod registers itself as a status check to pull requests - much like a continuous integration system would do. By default a failing prebuild would not make the check fail. Set `prevent-merge-on-error` to block PR merging when prebuilds failed.\n\nTo learn more about status checks, please see the GitHub documentation [about status checks](https://docs.github.com/en/github/collaborating-with-pull-requests/collaborating-on-repositories-with-code-quality-features/about-status-checks).\n\n![Gitpod status check in a pull request](/images/docs/beta/references/gitpod-yml/references-gitpod-yml-github-check.png)\n\n<div class=\"overflow-x-auto\">\n\n| Type     | Default                  | Values                                    |\n| -------- | ------------------------ | ----------------------------------------- |\n| `string` | `prevent-merge-on-error` | `true`, `false`, `prevent-merge-on-error` |\n\n</div>","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-yml","loc":{"lines":{"from":246,"to":260}}}}],["289",{"pageContent":"### `prebuilds.addComment`\n\nGitpod can add a comment with an “Open in Gitpod” button to your pull requests. Alternatively, you could [add a badge](#prebuildsaddbadge) to the pull request's description.\n\n![An Open in Gitpod badge in a PR comment](/images/docs/beta/references/gitpod-yml/references-gitpod-yml-github-comment.png)\n\n<div class=\"overflow-x-auto\">\n\n| Type      | Default |\n| --------- | ------- |\n| `boolean` | `false` |\n\n</div>\n\n### `prebuilds.addLabel`\n\nDeprecated.\n\n### `prebuilds.branches`\n\nDefine whether Gitpod creates prebuilds for all branches.\n\n<div class=\"overflow-x-auto\">\n\n| Type      | Default |\n| --------- | ------- |\n| `boolean` | `false` |\n\n</div>\n\n### `prebuilds.master`\n\nDefine whether Gitpod creates prebuilds for the default branch.\n\n<div class=\"overflow-x-auto\">\n\n| Type      | Default |\n| --------- | ------- |\n| `boolean` | `true`  |\n\n</div>","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-yml","loc":{"lines":{"from":262,"to":302}}}}],["290",{"pageContent":"### `prebuilds.pullRequests`\n\nDefine whether Gitpod creates prebuilds for pull requests from the original repository.\n\n<div class=\"overflow-x-auto\">\n\n| Type      | Default |\n| --------- | ------- |\n| `boolean` | `true`  |\n\n</div>\n\n### `prebuilds.pullRequestsFromForks`\n\nDefine whether Gitpod creates prebuilds for pull requests from forks.\n\n<div class=\"overflow-x-auto\">\n\n| Type      | Default |\n| --------- | ------- |\n| `boolean` | `false` |\n\n</div>","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-yml","loc":{"lines":{"from":304,"to":326}}}}],["291",{"pageContent":"## `image`\n\nDefine a custom Docker image to be used for workspaces. To learn more, please review [Custom Docker Image](/docs/configure/workspaces/workspace-image#configure-a-custom-dockerfile).\n\nPublic images are hosted on [Docker Hub](https://hub.docker.com/u/gitpod/) and can be referenced by their name, e.g. `ubuntu:latest`.\n\nTo see a list of Gitpod-provided images, please see [gitpod-io/workspace-images](https://github.com/gitpod-io/workspace-images).\n\n<div class=\"overflow-x-auto\">\n\n| Type                 | Default                 |\n| -------------------- | ----------------------- |\n| `object` or `string` | `gitpod/workspace-full` |\n\n</div>\n\n**Examples**\n\n_With a public image_\n\n```yml\nimage: ubuntu:latest\n```\n\n_With a custom image_\n\n```yml\nimage:\n    file: .gitpod.Dockerfile\n```\n\n_With an optional context_\n\n```yml\nimage:\n    file: .gitpod.Dockerfile\n    context: ./docker-content\n```","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-yml","loc":{"lines":{"from":328,"to":365}}}}],["292",{"pageContent":"### `image.file`\n\nTo define a custom Docker image, you can use the following configuration:\n\nFor a list of examples, please see https://github.com/gitpod-io/workspace-images.\n\n<div class=\"overflow-x-auto\">\n\n| Type     | Default   |\n| -------- | --------- |\n| `string` | `<empty>` |\n\n</div>\n\n### `image.context`\n\nOptionally, you can set the `image.context`. This is useful when you want to copy files into the Docker image. The [Docker docs](https://docs.docker.com/engine/reference/builder/#usage) describe this in more detail.\n\n<div class=\"overflow-x-auto\">\n\n| Type     | Default   |\n| -------- | --------- |\n| `string` | `<empty>` |\n\n</div>","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-yml","loc":{"lines":{"from":367,"to":391}}}}],["293",{"pageContent":"## `jetbrains`\n\n> JetBrains is currently in [Beta](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/6576).\n\nDefine the integration between Gitpod and JetBrains IDEs.\n\n<div class=\"overflow-x-auto\">\n\n| Type     | Default   |\n| -------- | --------- |\n| `object` | `<empty>` |\n\n</div>\n\n### `jetbrains.plugins`\n\n> JetBrains plugin support (via gitpod.yml) is currently in [Beta](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/6576).\n\nDefine a list of plugins which should be installed for all compatible JetBrains IDEs when starting a workspace. To find the plugin identifier, from the [JetBrains Marketplace](https://plugins.jetbrains.com), find the desired plugin, open the 'Versions' tab, select any version and copy the 'Plugin ID' (like `${publisher}.${name}`).\n\n<div class=\"overflow-x-auto\">\n\n| Type    | Default   |\n| ------- | --------- |\n| `array` | `<empty>` |\n\n</div>","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-yml","loc":{"lines":{"from":393,"to":419}}}}],["294",{"pageContent":"### `jetbrains.[product]`\n\n> JetBrains is currently in [Beta](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/6576).\n\nDefine the integration between Gitpod and a specific JetBrains IDE. Install plugins and configure prebuilds to speed up the IDE indexing.\n\nSpecify the 'product' with one of the following values:\n\n-   `intellij`\n-   `goland`\n-   `pycharm`\n-   `phpstorm`\n\n<div class=\"overflow-x-auto\">\n\n| Type     | Default   |\n| -------- | --------- |\n| `object` | `<empty>` |\n\n</div>","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-yml","loc":{"lines":{"from":421,"to":440}}}}],["295",{"pageContent":"### `jetbrains.[product].plugins`\n\n> JetBrains plugin support (via gitpod.yml) is currently in [Beta](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/6576).\n\nDefine a list of plugins which should be installed for the given JetBrains IDE when starting a workspace. To find the plugin identifier, from the [JetBrains Marketplace](https://plugins.jetbrains.com), find the desired plugin, open the 'Versions' tab, select any version and copy the 'Plugin ID' (like `${publisher}.${name}`).\n\n<div class=\"overflow-x-auto\">\n\n| Type    | Default   |\n| ------- | --------- |\n| `array` | `<empty>` |\n\n</div>\n\n**Example**\n\n```yml\njetbrains:\n    intellij:\n        plugins:\n            - zielu.gittoolbox\n            - izhangzhihao.rainbow.brackets\n```","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-yml","loc":{"lines":{"from":442,"to":464}}}}],["296",{"pageContent":"### `jetbrains.[product].prebuilds`\n\n> JetBrains prebuilds support (via gitpod.yml) is currently in [Alpha](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/6576).\n\nDefine whether Gitpod enables prebuilds for a specific JetBrains IDE.\n\n<div class=\"overflow-x-auto\">\n\n| Type     | Default   |\n| -------- | --------- |\n| `object` | `<empty>` |\n\n</div>\n\n**Example**\n\n```yml\njetbrains:\n    intellij:\n        prebuilds:\n            version: stable\n```\n\nThe `version` is defined as follows:\n\n<div class=\"overflow-x-auto\">\n\n| Type     | Default  | Values                     |\n| -------- | -------- | -------------------------- |\n| `string` | `stable` | `stable`, `latest`, `both` |\n\n</div>","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-yml","loc":{"lines":{"from":466,"to":497}}}}],["297",{"pageContent":"### `jetbrains.[product].vmoptions`\n\n> Configuration of JVM options (via gitpod.yml) is currently in [Alpha](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/8704).\n\nConfigure JVM options for a specific JetBrains IDE.\n\n<div class=\"overflow-x-auto\">\n\n| Type     | Default   |\n| -------- | --------- |\n| `string` | `<empty>` |\n\n</div>\n\n**Example**\n\n```yml\njetbrains:\n    intellij:\n        vmoptions: '-Xmx4g'\n```","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-yml","loc":{"lines":{"from":499,"to":519}}}}],["298",{"pageContent":"## `ports`\n\nConfigure how Gitpod treats various ports your application may listen on. You can learn more about this in the [Exposing Ports](/docs/configure/workspaces/ports) documentation.\n\n<div class=\"overflow-x-auto\">\n\n| Type    | Default   |\n| ------- | --------- |\n| `array` | `<empty>` |\n\n</div>\n\n**Example**\n\n```yml\nports:\n    - name: Website\n      port: 3000\n      onOpen: open-preview\n    - name: VNC\n      description: full GUI Virtual Desktop\n      port: 6080\n      onOpen: open-browser\n    - name: Server\n      port: 10000\n      onOpen: ignore\n```\n\n### `ports[n].name`\n\nDefine a name for the port, which will be shown as a column in the output of `gp ports list` and in the `Port` column inside of the ports list in VS Code Browser and Desktop.\n\n[More detail](/docs/configure/workspaces/ports#specifying-port-names--descriptions)\n\n<div class=\"overflow-x-auto\">\n\n| Type     | Default   |\n| -------- | --------- |\n| `string` | `<empty>` |\n\n</div>","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-yml","loc":{"lines":{"from":521,"to":561}}}}],["299",{"pageContent":"### `ports[n].description`\n\nAdds a description to the port, which will be shown as a column in the output of `gp ports list`.\n\nYou can find the port's description in the ports view table column, following the `Address` field (the same description can be found in the `Remote Explorer` as a tooltip [on hover] of the port).\n\n<div class=\"overflow-x-auto\">\n\n| Type     | Default   |\n| -------- | --------- |\n| `string` | `<empty>` |\n\n</div>","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-yml","loc":{"lines":{"from":563,"to":575}}}}],["300",{"pageContent":"### `ports[n].onOpen`\n\nDefine what to do when Gitpod detects a given port is being listened on.\n\n<div class=\"overflow-x-auto\">\n\n| Type     | Default   | Values                                                                  |\n| -------- | --------- | ----------------------------------------------------------------------- |\n| `string` | `<empty>` | `open-browser`,<br><br>`open-preview`,<br><br>`notify`,<br><br>`ignore` |\n\n</div>\n\n**Please note:** For JetBrains IDEs connected to Gitpod via [JetBrains Gateway](/docs/integrations/jetbrains-gateway) `open-preview` will behave exactly the same as `open-browser`, as there is no functionality for a web preview in the JetBrains IDE.\n\n### `ports[n].port`\n\nDefine a single port or a range of ports, e.g. `3000-3100`.\n\n<div class=\"overflow-x-auto\">\n\n| Type                 | Default   |\n| -------------------- | --------- |\n| `number` or `string` | `<empty>` |\n\n</div>","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-yml","loc":{"lines":{"from":577,"to":601}}}}],["301",{"pageContent":"### `ports[n].visibility`\n\nDefine whether to expose the port publicly or keep it private.\n\nA public port allows you to share a URL for a given port with team members, for example if you want to get their feedback on a new feature you develop.\n\n<div class=\"overflow-x-auto\">\n\n| Type     | Default   | Values                     |\n| -------- | --------- | -------------------------- |\n| `string` | `private` | `private`,<br><br>`public` |\n\n</div>\n\n### `ports[n].protocol`\n\nDefine whether a running port in the workspace is HTTP or HTTPS.\n\n<div class=\"overflow-x-auto\">\n\n| Type     | Default | Values                   |\n| -------- | ------- | ------------------------ |\n| `string` | `http`  | `http`, <br><br> `https` |\n\n</div>","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-yml","loc":{"lines":{"from":603,"to":627}}}}],["302",{"pageContent":"## `tasks`\n\nDefine how Gitpod prepares & builds your project and how it can start the project's development server(s). To learn more, please visit [Start Tasks](/docs/configure/workspaces/tasks). Each array element opens in its own terminal.\n\n<div class=\"overflow-x-auto\">\n\n| Type    | Default   |\n| ------- | --------- |\n| `array` | `<empty>` |\n\n</div>\n\n**Example**\n\n```yml\ntasks:\n    - before: sh ./scripts/setup.sh\n      init: npm install\n      command: npm run dev\n    - name: Database\n      init: sh ./scripts/seed-database.sh\n      command: npm start-db\n      env:\n          DB_HOST: localhost:3306\n          DB_USER: readOnlyUser\n```","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-yml","loc":{"lines":{"from":629,"to":654}}}}],["303",{"pageContent":"### `tasks[n].before`\n\nA shell command to run before `init` and the main `command`. This command is executed on every start and is expected to terminate. If it fails, the following commands will not be executed.\n\nLearn more about [Start Tasks](/docs/configure/workspaces/tasks) in the docs.\n\n<div class=\"overflow-x-auto\">\n\n| Type     | Default   |\n| -------- | --------- |\n| `string` | `<empty>` |\n\n</div>\n\n### `tasks[n].command`\n\nThe main shell command to run after `before` and `init`. This command is executed last on every start and doesn't have to terminate.\n\nLearn more about [Start Tasks](/docs/configure/workspaces/tasks) in the docs.\n\n<div class=\"overflow-x-auto\">\n\n| Type     | Default   |\n| -------- | --------- |\n| `string` | `<empty>` |\n\n</div>","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-yml","loc":{"lines":{"from":656,"to":682}}}}],["304",{"pageContent":"### `tasks[n].env`\n\nDefine environment variables that will be available in the workspace.\n\nLearn more about [Environment Variables](/docs/configure/projects/environment-variables) in the docs.\n\n<div class=\"overflow-x-auto\">\n\n| Type     | Default   |\n| -------- | --------- |\n| `object` | `<empty>` |\n\n</div>\n\n### `tasks[n].init`\n\nA shell command to run between `before` and the main `command`.\n\nThis task is executed only once. When you start a workspace that does not have a [prebuild](/docs/configure/projects/prebuilds), `init` is executed at workspace start. When you start a workspace that has a prebuild, `init` executes as part of the prebuild, but does NOT execute again at workspace start.\n\nThis task is expected to terminate. If it fails, the `command` property will not be executed.\n\nLearn more about [Start Tasks](/docs/configure/workspaces/tasks) in the docs.\n\n<div class=\"overflow-x-auto\">\n\n| Type     | Default   |\n| -------- | --------- |\n| `string` | `<empty>` |\n\n</div>","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-yml","loc":{"lines":{"from":684,"to":714}}}}],["305",{"pageContent":"### `tasks[n].name`\n\nA name for the task, also shown on the terminal tab.\n\n<div class=\"overflow-x-auto\">\n\n| Type     | Default   |\n| -------- | --------- |\n| `string` | `<empty>` |\n\n</div>\n\n### `tasks[n].openIn`\n\nDeprecated. This does not have an impact in VS Code.\n\n### `tasks[n].openMode`\n\nConfigure how the terminal should be opened relative to the previous task.\n\n<div class=\"overflow-x-auto\">\n\n| Type     | Default   | Values                                                                      |\n| -------- | --------- | --------------------------------------------------------------------------- |\n| `string` | `<empty>` | `tab-after`,<br><br>`tab-before`,<br><br>`split-right`,<br><br>`split-left` |\n\n</div>\n\nNote: `split-top` and `split-bottom` are deprecated values.\n\n### `tasks[n].prebuild`\n\nDeprecated. Please use the [`init`](#tasksninit) task instead.","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-yml","loc":{"lines":{"from":716,"to":748}}}}],["306",{"pageContent":"## `mainConfiguration`\n\n> mainConfiguration is currently in [Beta](/docs/help/public-roadmap/release-cycle). [Send feedback](https://github.com/gitpod-io/gitpod/issues/8623).\n\nDefines the repository with the main `.gitpod.yml` file and makes it possible to open the same workspace from any issue, branch or other context URL from any repository defined in a multi repository configuration.\n\n<div class=\"overflow-x-auto\">\n\n| Type     | Default   |\n| -------- | --------- |\n| `string` | `<empty>` |\n\n</div>\n\n**Demo**\n\n<a href=\"https://gitpod.io/#https://github.com/gitpod-io/demo-multi-repo-backend\"><img src=\"https://gitpod-staging.com/button/open-in-gitpod.svg\"/></a>\n\n**Example**\n\n```yml\nmainConfiguration: https://github.com/gitpod-io/demo-multi-repo-frontend\n```","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-yml","loc":{"lines":{"from":750,"to":772}}}}],["307",{"pageContent":"## `vscode`\n\nConfigure the VS Code editor.\n\n<div class=\"overflow-x-auto\">\n\n| Type     | Default   |\n| -------- | --------- |\n| `object` | `<empty>` |\n\n</div>","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-yml","loc":{"lines":{"from":774,"to":784}}}}],["308",{"pageContent":"### `vscode.extensions`\n\nDefine a list of extensions which should be installed for users of this workspace. The identifier of an extension is always `${publisher}.${name}`. For example: 'vscodevim.vim'.\n\nPlease note, Gitpod uses the [Open VSX registry](https://open-vsx.org/) to find extensions. If you cannot find an extension you know exists in your local VS Code, please get in touch with us or open a new PR in the [open-vsx/publish-extensions](https://github.com/open-vsx/publish-extensions) repository to add the extension to Open VSX 🙏.\n\n<div class=\"overflow-x-auto\">\n\n| Type     | Default   |\n| -------- | --------- |\n| `object` | `<empty>` |\n\n</div>\n\nBy default, extensions will use the latest available version unless you use a specific version number. The version number must use semantic versioning rules. If you are interested in importing an extension that is not published on the Open VSX registry you can directly use the full URL.\n\n**Example**","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-yml","loc":{"lines":{"from":786,"to":802}}}}],["309",{"pageContent":"**Example**\n\n```yml\nvscode:\n    extensions:\n        - svelte.svelte-vscode\n        - bradlc.vscode-tailwindcss@0.6.11\n        - https://example.com/abc/releases/extension-0.26.0.vsix\n```","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-yml","loc":{"lines":{"from":802,"to":810}}}}],["310",{"pageContent":"## `workspaceLocation`\n\nDefine which path Gitpod considers the project's workspace directory, relative to `/workspace`.\n\nIn most cases, this is not needed. If you work on an older Go project, please see the [Go Languages](/docs/introduction/languages/go) page for more details.\n\n<div class=\"overflow-x-auto\">\n\n| Type     | Default      |\n| -------- | ------------ |\n| `string` | `/workspace` |\n\n</div>\n\n**Example**\n\n```yml\nworkspaceLocation: '.'\n```","metadata":{"source":"https://www.gitpod.io/docs/references/gitpod-yml","loc":{"lines":{"from":812,"to":830}}}}],["311",{"pageContent":"---\nsection:\ntitle: References\n---\n\n# References\n\nBelow are links to Gitpod reference material you may find helpful:\n\n-   [Product Compatibility Matrix](/docs/references/compatibility?user)\n-   [`.gitpod.yml`](/docs/references/gitpod-yml)\n-   [Command Line Interface](/docs/references/gitpod-cli)\n-   [Roadmap](/docs/help/public-roadmap)\n-   [Gitpod Releases](/docs/help/public-roadmap/release-cycle)\n-   [Security FAQ](/docs/references/security/faq)","metadata":{"source":"https://www.gitpod.io/docs/references","loc":{"lines":{"from":1,"to":15}}}}],["312",{"pageContent":"---\nsection: authentication\ntitle: Bitbucket Server Integration\ndescription: Gitpod works with public, private, or internal repositories on your own instance of Bitbucket Server v7.20 or later.\n---\n\n<script>\n  import Keybind from \"$lib/components/keybind.svelte\";\n</script>\n\n# Bitbucket Server\n\nGitpod works with public, private, or internal repositories on your own instance of [Bitbucket Server](https://bitbucket.org/product/guides/getting-started/overview#bitbucket-software-hosting-options) v7.20 or later. Setting this up requires 2 steps.\n\n1. A one-time registration of the Bitbucket server instance with Gitpod.\n2. Each Gitpod user connects their account to Bitbucket server the first time they start a workspace.","metadata":{"source":"https://www.gitpod.io/docs/configure/authentication/bitbucket-server","loc":{"lines":{"from":1,"to":16}}}}],["313",{"pageContent":"## Registering a Bitbucket Server\n\nThe Bitbucket Server Admin can register the Bitbucket Server in their own Gitpod [account settings](https://gitpod.io/integrations).\n\nStart by creating a **New Integration** and entering the **Provider Host Name** of Bitbucket Server.\n\n![Gitpod New Git Integration form](/images/integrations/bbs-new-integration.png)\n\nCopy the **Redirect URL** from the form above.\n\nOpen your Bitbucket Server Administration settings in another browser tab, and create a new incoming link for an external application.\n\n![Bitbucket Server new OAuth2 application link](/images/integrations/bbs-new-incoming-link.png)\n\nConfigure the link with the required fields, including the redirect URL copied above, and choose \"Projects Admin\" permissions.\n\n![Bitbucket Server configure OAuth2 application link](/images/integrations/bbs-configure-incoming-link.png)\n\nSaving the configuration opens a settings page where you can copy the OAuth **Client ID** and a **Client secret**.","metadata":{"source":"https://www.gitpod.io/docs/configure/authentication/bitbucket-server","loc":{"lines":{"from":18,"to":36}}}}],["314",{"pageContent":"Saving the configuration opens a settings page where you can copy the OAuth **Client ID** and a **Client secret**.\n\n![Bitbucket Server new OAuth client ID and secret](/images/integrations/bbs-oauth-client-id-and-secret.png)\n\nCopy the **Client ID** and **Secret** into the corresponding fields in the new Gitpod integration form, and activate the integration.\n\nRefreshing the integration settings page should show a new Git provider connection to your Bitbucket Server in addition to the Git Integration registration below that.\n\n![Bitbucket Server integration and connection in Gitpod settings](/images/integrations/bbs-integration-and-connection.png)","metadata":{"source":"https://www.gitpod.io/docs/configure/authentication/bitbucket-server","loc":{"lines":{"from":36,"to":44}}}}],["315",{"pageContent":"## Connecting Gitpod accounts to Bitbucket Server\n\nOther Bitbucket Server users need to connect their own Gitpod account to their own Bitbucket Server account by starting a workspace.\n\nTo start a workspace, paste the URL of a Bitbucket Server repository into the New Workspace popup (<Keybind>CtrlCmd + O</Keybind>) in Gitpod, or prefix the repository URL as described in [Getting started](/docs/introduction/getting-started).\n\n![Open in Gitpod form](/images/integrations/bbs-open-in-gitpod.png)\n\nThe first time you do this, you'll be prompted to authorize with your Bitbucket Server instance.\n\n![Prompt to authorize with Bitbucket Server](/images/integrations/bbs-auth-prompt.png)\n\nThe Bitbucket Server OAuth window will prompt for confirmation to access projects and repositories.\n\n![OAuth confirmation from Bitbucket Server](/images/integrations/bbs-oauth-popup.png)","metadata":{"source":"https://www.gitpod.io/docs/configure/authentication/bitbucket-server","loc":{"lines":{"from":46,"to":60}}}}],["316",{"pageContent":"The Bitbucket Server OAuth window will prompt for confirmation to access projects and repositories.\n\n![OAuth confirmation from Bitbucket Server](/images/integrations/bbs-oauth-popup.png)\n\nOnce confirmed, the connection will be saved, and the workspace should open. Subsequent workspaces with repositories from the same Bitbucket Server instance should open without reconnecting.","metadata":{"source":"https://www.gitpod.io/docs/configure/authentication/bitbucket-server","loc":{"lines":{"from":60,"to":64}}}}],["317",{"pageContent":"## Creating a project in Gitpod\n\nTo create a new project with a Bitbucket Server repository in Gitpod, select your Bitbucket Server instance from the list of git providers.\n\n![New project with Bitbucket Server](/images/integrations/bbs-new-project.png)\n\nYou should see your own repositories and those for all projects to which you have access. Use the dropdown to switch between your personal account and other projects.\n\n![New project select Bitbucket Server repo](/images/integrations/bbs-new-project-select-repo.png)\n\nSelecting the repository will install a webhook and enable automatic prebuilds for the project.","metadata":{"source":"https://www.gitpod.io/docs/configure/authentication/bitbucket-server","loc":{"lines":{"from":66,"to":76}}}}],["318",{"pageContent":"---\nsection: authentication\ntitle: Bitbucket\ndescription: You can integrate any public or private repository on Bitbucket with Gitpod.\n---\n\n# Bitbucket\n\nGitpod works with any public or private repository on [Bitbucket](https://bitbucket.org/).\n\nTo start a workspace from a Bitbucket project, prefix the Bitbucket project URL with `gitpod.io/#` as described in [Getting started](/docs/introduction/getting-started) or use the [browser extension](/docs/configure/user-settings/browser-extension) to add a convenient Gitpod button to every Bitbucket page.\n\n## Enable Prebuilds\n\nAll prebuilds require a [Gitpod project](/docs/configure/projects#add-a-new-project) for the repository.\n\nTo enable [prebuilt workspaces](/docs/configure/projects/prebuilds) for your Bitbucket project, you need to grant the `webhook` permission in Gitpod's [Integration Settings](https://gitpod.io/integrations) page. This allows Gitpod to install a webhook which creates a new prebuild for every push event.","metadata":{"source":"https://www.gitpod.io/docs/configure/authentication/bitbucket","loc":{"lines":{"from":1,"to":17}}}}],["319",{"pageContent":"---\nsection: authentication\ntitle: GitHub Enterprise\ndescription: You can integrate any public or private repository on GitHub Enterprise with Gitpod.\n---\n\n<script>\n  import Keybind from \"$lib/components/keybind.svelte\";\n</script>\n\n# GitHub Enterprise\n\nGitpod works with public, private, or internal repositories on your own instance of [GitHub Enterprise](https://docs.github.com/en/enterprise-server@3.4/get-started/onboarding/getting-started-with-github-enterprise-server) (GHE). Setting this up requires 2 steps.\n\n1. A one-time registration of the GHE server with Gitpod.\n2. Each Gitpod user connects their account to GHE the first time they start a workspace.","metadata":{"source":"https://www.gitpod.io/docs/configure/authentication/github-enterprise","loc":{"lines":{"from":1,"to":16}}}}],["320",{"pageContent":"## Registering a GitHub Enterprise Server\n\nThe GHE Admin can register the GHE server in their own Gitpod [account settings](https://gitpod.io/integrations).\n\nStart by creating a **New Integration** and entering the **Provider Host Name** of GHE server.\n\n![Gitpod New Git Integration form](/images/integrations/new-git-integration-form.png)\n\nCopy the **Redirect URL** from the form above.\n\nCreate a new OAuth application in your GHE developer settings, and fill in the **Authorization callback URL** with the copied value.\n\n![GitHub Enterprise register new OAuth application form](/images/integrations/github-new-oauth-application.png)\n\nPopulate the remaining fields and register the application in GHE. This opens a settings page where you can copy the OAuth **Client ID** and a **Client Secret**.\n\n![GitHub Enterprise new OAuth client ID and secret](/images/integrations/github-oauth-client-id-and-secret.png)","metadata":{"source":"https://www.gitpod.io/docs/configure/authentication/github-enterprise","loc":{"lines":{"from":18,"to":34}}}}],["321",{"pageContent":"![GitHub Enterprise new OAuth client ID and secret](/images/integrations/github-oauth-client-id-and-secret.png)\n\nCopy the **Client ID** and **Secret** into the corresponding fields in Gitpod and activate the integration.","metadata":{"source":"https://www.gitpod.io/docs/configure/authentication/github-enterprise","loc":{"lines":{"from":34,"to":36}}}}],["322",{"pageContent":"## Connecting Gitpod accounts to GHE\n\nGHE users connect their Gitpod account to their GHE account by starting a workspace.\n\nTo start a workspace, paste the URL of a GHE repository into the New Workspace popup (<Keybind>CtrlCmd + O</Keybind>) in Gitpod, or prefix the repository URL as described in [Getting started](/docs/introduction/getting-started).\n\n![Open in Gitpod form](/images/integrations/open-in-gitpod.png)\n\nThe first time you do this, you will be prompted to authorize with your GHE instance.\n\n![Prompt to authorize with GitHub Enterprise](/images/integrations/github-enterprise-auth-prompt.png)\n\nThe GHE OAuth window will appear, showing the name of the registered Gitpod OAuth app.\n\n![OAuth confirmation from GitHub Enterprise](/images/integrations/github-enterprise-oauth-popup.png)\n\nIf you are trying to open a private or internal repository in GHE, you will be prompted to grant additional authorization before the workspace starts.","metadata":{"source":"https://www.gitpod.io/docs/configure/authentication/github-enterprise","loc":{"lines":{"from":38,"to":54}}}}],["323",{"pageContent":"If you are trying to open a private or internal repository in GHE, you will be prompted to grant additional authorization before the workspace starts.\n\n![Private repo OAuth authorization from GitHub Enterprise](/images/integrations/github-enterprise-private-repo-scope-authorization.png)","metadata":{"source":"https://www.gitpod.io/docs/configure/authentication/github-enterprise","loc":{"lines":{"from":54,"to":56}}}}],["324",{"pageContent":"## Validating your GHE connection with Gitpod\n\nYou should see the connection to your GHE instance, with your GHE account ID, in your Gitpod [integration settings](https://gitpod.io/integrations)\n\n![GitHub Enterprise connection in Gitpod integration settings](/images/integrations/github-enterprise-connection.png)\n\nIf necessary, you can modify your GHE OAuth permissions to allow private repository access using the context menu on the right.\n\n![Gitpod settings for GitHub integration permissions](/images/integrations/github-oauth-permissions.png)","metadata":{"source":"https://www.gitpod.io/docs/configure/authentication/github-enterprise","loc":{"lines":{"from":58,"to":66}}}}],["325",{"pageContent":"## Creating a project in Gitpod\n\nTo create a new project with a GHE repository in Gitpod, select the your GHE instance from the list of git providers.\n\n![New project with GitHub Enterprise](/images/integrations/new-project-with-github-enterprise.png)\n\nYou should see your own repositories and those for all organizations to which you have access. Use the dropdown to switch between your personal account and other organization accounts. No additional GitHub app installation is required for each organization.\n\n![New project select GitHub Enterprise repo](/images/integrations/new-project-select-github-enterprise-repo.png)\n\nSelecting the repository will install a webhook and enable automatic prebuilds for the project.\n\n![New project on internal GitHub Enterprise repository](/images/integrations/new-project-on-internal-github-enterprise-repo.png)","metadata":{"source":"https://www.gitpod.io/docs/configure/authentication/github-enterprise","loc":{"lines":{"from":68,"to":80}}}}],["326",{"pageContent":"---\nsection: authentication\ntitle: GitHub\ndescription: You can integrate any public or private repository on GitHub with Gitpod.\n---\n\n<script>\n  import Keybind from \"$lib/components/keybind.svelte\";\n</script>\n\n# GitHub\n\nGitpod works well with public or private repositories from [github.com](https://github.com/).\n\nThe first time you login to Gitpod with GitHub, you will be prompted to \"Authorize Gitpod\" to access your GitHub account. This creates a connection between Gitpod and your GitHub account, and installs an OAuth App in your GitHub [settings](https://github.com/settings/applications).\n\nGitpod uses the name and email from your GitHub account ID to create a new Gitpod user account. This is sufficient to start a Gitpod workspace on a public repository.\n\n![GitHub prompt for Gitpod OAuth App permissions with user:email scope](/images/integrations/github-oauth-install.png)","metadata":{"source":"https://www.gitpod.io/docs/configure/authentication/github","loc":{"lines":{"from":1,"to":19}}}}],["327",{"pageContent":"## Starting Workspaces\n\nTo start a new workspace after logging into Gitpod, use <Keybind>CtrlCmd + O</Keybind> or click on the **New Workspace** button in https://gitpod.io/workspaces. This will prompt for a repository URL, or suggest recent repositories opened with your account.\n\nYou can also start a Gitpod workspace using a GitHub repository URL. Simply point your browser to the repository URL prefixed with `gitpod.io/#` as described in [Getting started](/docs/introduction/getting-started).\n\n## Granting additional GitHub OAuth permissions\n\nGitHub requires `repo` scope permissions to open a workspace on a private repository, or to push code changes from a workspace back to your repository.\n\nYou can grant these additional permissions for GitHub at https://gitpod.io/integrations using the context menu on the right.\n\n![Gitpod settings for GitHub integration permissions](/images/integrations/github-oauth-permissions.png)","metadata":{"source":"https://www.gitpod.io/docs/configure/authentication/github","loc":{"lines":{"from":21,"to":33}}}}],["328",{"pageContent":"## Authorizing GitHub webhooks\n\nThe first time you create a new Gitpod [project](/docs/configure/projects) you will need to configure our [GitHub App](https://github.com/apps/gitpod-io) to watch your repositories and trigger prebuilds.\n\n> NOTE: Installing the GitHub App for webhooks is only required for github.com, not for [GitHub Enterprise](/docs/configure/authentication/github-enterprise) or other git providers.\n\n![Gitpod new project prompt for GitHub App authorization](/images/integrations/github-new-project-install-app.png)\n\nThe App must be installed on every GitHub user or organization account with repositories used in a Gitpod project. This allows you to grant permissions for all repositories or select repo-by-repo.\n\n![GitHub App repo authorization](/images/integrations/github-app-authorize-repos.png)","metadata":{"source":"https://www.gitpod.io/docs/configure/authentication/github","loc":{"lines":{"from":35,"to":45}}}}],["329",{"pageContent":"## Errors with private repositories on GitHub orgs\n\nIf you encounter errors setting up a Gitpod project on a private repository in a GitHub org, you may need to approve the Gitpod OAuth app for 3rd party access to the org.\n\n1. In https://github.com/settings/connections/applications/484069277e293e6d2a2a.\n2. Look for the org in question in the lower section of the page under 'Organization access'.\n3. Click on the Grant button.\n\nFor more details, see [Issue #8076](https://github.com/gitpod-io/gitpod/issues/8076).","metadata":{"source":"https://www.gitpod.io/docs/configure/authentication/github","loc":{"lines":{"from":47,"to":55}}}}],["330",{"pageContent":"---\nsection: authentication\ntitle: GitLab\ndescription: You can integrate any public or private repository on GitLab with Gitpod.\n---\n\n# GitLab\n\nGitpod works nicely with GitLab: You can start Gitpod workspaces directly from the web pages of your GitLab repositories, and you can configure Gitpod to automatically prebuild these workspaces such that you can start coding on any branch in no time.\n\nTo use Gitpod on GitLab repositories, you have to link your GitLab account to Gitpod. Gitpod redirects you to GitLab's authentication workflow when needed. Alternatively, you might want to connect your [GitLab account manually](#connecting-your-gitlab-account).\n\nAll of this is already pre-configured for `GitLab.com` (the SaaS version), and can easily be set up for [self-hosted GitLab installations](#registering-a-self-hosted-gitlab-installation).","metadata":{"source":"https://www.gitpod.io/docs/configure/authentication/gitlab","loc":{"lines":{"from":1,"to":13}}}}],["331",{"pageContent":"## Starting Workspaces\n\nYou can start a Gitpod workspace directly from the web pages of a GitLab repository. Simply click on the dropdown arrow next to the _Web IDE_ split button on the project or merge request page, and choose _Gitpod_. The Gitpod workspace will open in a new browser tab. The next time you visit a GitLab page, the last used action will be pre-selected.\n\n![GitLab Integration](/images/docs/beta/integrations/gitpod-button-project-page.png)\n\nTo launch new Gitpod workspaces for issues, branches, specific commits, etc. you can also prefix any GitLab URL with `gitpod.io/#` as described in the [Getting started](/docs/introduction/getting-started) page, or use the [browser extension](/docs/configure/user-settings/browser-extension) to add a convenient _Gitpod_ button to every GitLab page.","metadata":{"source":"https://www.gitpod.io/docs/configure/authentication/gitlab","loc":{"lines":{"from":15,"to":21}}}}],["332",{"pageContent":"## Enabling Prebuilds\n\nAll prebuilds require a [Gitpod project](/docs/configure/projects#add-a-new-project) for the repository.\n\nTo automatically create a [prebuilt workspace](/docs/configure/projects/prebuilds) for each commit, Gitpod needs access to install a webhook. To allow this, go to Gitpod's [Integrations](https://gitpod.io/integrations/) page, scroll to the \"Git Providers\" section, click on the three dot button that pops up when you hover over the \"GitLab\" entry. Then choose _Edit Permissions_ from the popup menu.\n\n![GitLab integration actions menu](/images/docs/beta/integrations/gitlab-integration-actions-menu.png)\n\nIn the \"Edit Permissions\" dialog, make sure that _api_ is checked such that Gitpod is allowed to install the webhook.\n\n![Modal Edit Permissions of GitLab in the Gitpod settings](/images/docs/beta/integrations/edit-permissions.png)","metadata":{"source":"https://www.gitpod.io/docs/configure/authentication/gitlab","loc":{"lines":{"from":23,"to":33}}}}],["333",{"pageContent":"## Connecting Your GitLab Account\n\nTo use Gitpod on a GitLab repository, you have to connect your GitLab account with your Gitpod account. In the following, we assume that you already have a valid account on the GitLab instance you want to connect to.\n\nGitpod supports the following use cases:\n\n-   [GitLab](#GitLab)\n    -   [Starting Workspaces](#starting-workspaces)\n    -   [Enabling Prebuilds](#enabling-prebuilds)\n    -   [Connecting Your GitLab Account](#connecting-your-gitlab-account)\n        -   [Connecting Your GitLab.com Account](#connecting-your-gitlabcom-account)\n        -   [Connecting Your Self-Hosted GitLab Account](#connecting-your-self-hosted-gitlab-account)\n        -   [Disconnecting Your GitLab Account](#disconnecting-your-gitlab-account)\n    -   [Registering A Self-Hosted GitLab Installation](#registering-a-self-hosted-gitlab-installation)","metadata":{"source":"https://www.gitpod.io/docs/configure/authentication/gitlab","loc":{"lines":{"from":35,"to":48}}}}],["334",{"pageContent":"### Connecting Your GitLab.com Account\n\nIf you have initially logged into Gitpod using `GitLab`, your Gitpod account is already connected to your `GitLab.com` account and you can skip this section.\n\nIf you have logged into Gitpod with a different provider, you can manually add your GitLab account as follows:\n\n1. Open [the integrations page](https://gitpod.io/integrations/). Scroll to the section about \"Git Providers\" and click on the three dot button that pops up when you hover over the _GitLab_ item. Select _Connect_ from the popup menu.\n\n![GitLab integration connect menu item](/images/docs/beta/integrations/gitlab-integration-connect-menu-item.png)\n\n2. You will be redirected to GitLab's login page. Log in with your username and password or choose one of the OAuth providers from the list.\n\n3. Once logged in successfully, you will be asked to authorize Gitpod to access your personal information on GitLab and use their API. Click _Authorize_.","metadata":{"source":"https://www.gitpod.io/docs/configure/authentication/gitlab","loc":{"lines":{"from":50,"to":62}}}}],["335",{"pageContent":"3. Once logged in successfully, you will be asked to authorize Gitpod to access your personal information on GitLab and use their API. Click _Authorize_.\n\n![GitLab: Authorize Gitpod](/images/docs/beta/integrations/authorize-gitpod.png)\n\n4. You'll be directed back to Gitpod's settings page. A green bullet left to _GitLab_ signals you've successfully linked your GitLab account with Gitpod.\n\n![GitLab integration connected](/images/docs/beta/integrations/gitlab-integration-connected.png)","metadata":{"source":"https://www.gitpod.io/docs/configure/authentication/gitlab","loc":{"lines":{"from":62,"to":68}}}}],["336",{"pageContent":"### Connecting Your Self-Hosted GitLab Account\n\nA Self-Hosted GitLab installation has to be [registered to Gitpod](#registering-a-self-hosted-gitlab-installation) before it can be used. Once that's done, you can link your GitLab account on that installation to GitPod using the following steps:\n\n1. Make sure you are logged into Gitpod.\n2. In the same browser, open a new tab and navigate to a repository of the GitLab installation.\n3. [Start a new Gitpod workspace](#starting-workspaces) on this repository.","metadata":{"source":"https://www.gitpod.io/docs/configure/authentication/gitlab","loc":{"lines":{"from":70,"to":76}}}}],["337",{"pageContent":"### Disconnecting Your GitLab Account\n\nTo disconnect a GitLab account from your Gitpod account:\n\n1. Open [the integrations page](https://gitpod.io/integrations/). Scroll to the section about \"Git Providers\" and click on the three dot button that pops up when you hover over the item of the GitLab provider you want to disconnect. Select _Disconnect_ from the popup menu.\n\nThis will only invalidate the current access token in Gitpod. To disable access for good you have to revoke the access to Gitpod on the GitLab side.","metadata":{"source":"https://www.gitpod.io/docs/configure/authentication/gitlab","loc":{"lines":{"from":78,"to":84}}}}],["338",{"pageContent":"## Registering A Self-Hosted GitLab Installation\n\nThe SaaS service `GitLab.com` is already pre-configured in Gitpod. But if you are using a Self-Hosted GitLab installation, you have to register it in Gitpod before it can be used.\n\n> Note that the registration has to be done by one Gitpod user only, and that the GitLab account of this user is automatically connected. All other users of the same GitLab installation should just [link to their GitLab accounts](#connecting-your-self-hosted-gitlab-account).\n\nHere is how to register your Self-Hosted GitLab installation:\n\n1. In your GitLab installation, enable the native Gitpod integration as described in the [GitLab docs](https://docs.gitlab.com/ce/integration/gitpod.html). This needs administrator privileges on the GitLab installation.\n\n2. Head over to [the integrations page](https://gitpod.io/integrations/) on Gitpod. Scroll to the section about `Git Integrations` and click on the \"New Integration\" button.","metadata":{"source":"https://www.gitpod.io/docs/configure/authentication/gitlab","loc":{"lines":{"from":86,"to":96}}}}],["339",{"pageContent":"2. Head over to [the integrations page](https://gitpod.io/integrations/) on Gitpod. Scroll to the section about `Git Integrations` and click on the \"New Integration\" button.\n\n![Git Integrations section in the Gitpod settings](/images/docs/beta/integrations/git-integrations.png)\n\n3. In the pop-up window, choose GitLab as the provider type and enter the URL of the GitLab installation you want to use.\n\n![New Git integration dialog](/images/docs/beta/integrations/new-git-integration.png)\n\n4. The next field in the form is the _redirect URL_ that you need to register Gitpod on the GitLab side. Copy the _redirect URL_ to your clipboard using the button on the right.\n\n5. Go to `/profile/applications` on your GitLab installation to create an OAuth app. Type in a name (e.g. \"Gitpod\") and paste the _redirect URL_ in the corresponding text area. Check the scopes _api_ and _read_user_. Click the button _Save Application_ below.","metadata":{"source":"https://www.gitpod.io/docs/configure/authentication/gitlab","loc":{"lines":{"from":96,"to":106}}}}],["340",{"pageContent":"<img alt=\"create new GitLab app\" src=\"https://user-images.githubusercontent.com/372735/91146315-04abe800-e6b7-11ea-87ff-e61f5a87861f.png\">\n\n6. Copy the _Application ID_ and the _Secret_ in the corresponding form fields (_Client ID_ resp. _Client Secret_) of your Gitpod installation.\n\n<img alt=\"link new GitLab app to Gitpod\" src=\"https://user-images.githubusercontent.com/372735/91142160-9f54f880-e6b0-11ea-8436-6a9c8bc67d9f.png\">\n\n7. Press _Connect_ and go through the GitLab authentication flow to connect your user account.","metadata":{"source":"https://www.gitpod.io/docs/configure/authentication/gitlab","loc":{"lines":{"from":108,"to":114}}}}],["341",{"pageContent":"---\nsection: authentication\ntitle: Authentication\ndescription: Gitpod allows you to work with any public or private repository on GitLab, GitHub, and Bitbucket.\n---\n\n# Authentication\n\nGitpod comes with integrations for [GitLab](/docs/configure/authentication/gitlab), [GitHub](/docs/configure/authentication/github), and [Bitbucket](/docs/configure/authentication/bitbucket) projects. It also provides a [browser extension](/docs/configure/user-settings/browser-extension) or a [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) for Chromium-based browsers (Chrome, Edge, Brave) and Firefox.\n\n`youtube: qfIQJflDnco`","metadata":{"source":"https://www.gitpod.io/docs/configure/authentication","loc":{"lines":{"from":1,"to":11}}}}],["342",{"pageContent":"## FAQs\n\n### [\"Email address already used in another account\" when trying to login into Gitpod](https://discord.com/channels/816244985187008514/1015175207301947433)\n\n<!-- DISCORD_BOT_FAQ - DO NOT REMOVE -->\n\nSend us a message through the [contact form](https://www.gitpod.io/contact/support) with your Gitpod account email. After you reach out, we will delete your account so that you can sign up again, which should resolve your issue.","metadata":{"source":"https://www.gitpod.io/docs/configure/authentication","loc":{"lines":{"from":13,"to":19}}}}],["343",{"pageContent":"### [How to get SCM API token from Gitpod's GitLab, GitHub or Bitbucket integration as environment variable](https://discord.com/channels/816244985187008514/1061997373817094236)\n\n<!-- DISCORD_BOT_FAQ - DO NOT REMOVE -->\n\nRun `gp init` on your terminal or manually create a file called `.gitpod.yml`\n\n1. Put the following line in your `.gitpod.yml`:\n\n```yml\nimage:\n    file: .gitpod.Dockerfile\n```\n\n2. Create a file called `.gitpod.Dockerfile` and put the following content in it:\n\n```dockerfile\nFROM gitpod/workspace-full\n\nRUN file=\"$HOME/.bashrc.d/770-scm_token.sh\" \\\n    && printf '%s\\n' 'if [[ \"${GITPOD_WORKSPACE_CONTEXT_URL:-}\" == *gitlab* ]]; then : \"gitlab\"; else : \"github\"; fi; scm_name=\"$_\"' > \"${file}\" \\\n    && printf 'export SCM_TOKEN=\"$(%s)\"\\n' \"gp credential-helper get <<<host=\\${scm_name}.com | sed -n 's/^password=//p'\" >> \"${file}\"","metadata":{"source":"https://www.gitpod.io/docs/configure/authentication","loc":{"lines":{"from":21,"to":41}}}}],["344",{"pageContent":"```\n\n3. [Validate your configuration changes](/docs/configure/workspaces#validate-your-gitpod-configuration) by running `gp validate` in your workspace.\n4. [Apply your .gitpod.yml changes](/docs/configure/workspaces#apply-configuration-changes) by committing and restarting a new workspace.\n\nNow you can use `$SCM_TOKEN` environment variable after you commit and create a new workspace, this variable will contain an API token based on the Git context (i.e. Gitlab/GitHub/Bitbucket)","metadata":{"source":"https://www.gitpod.io/docs/configure/authentication","loc":{"lines":{"from":42,"to":47}}}}],["345",{"pageContent":"### How to use a private GitHub email or custom email for Git commits\n\nAt the [variables](https://gitpod.io/user/variables) page, create two variables[[1](https://gitpod.io/user/account)] called:\n\n-   GIT_COMMITTER_EMAIL\n-   GIT_AUTHOR_EMAIL\n\nand set the custom email address as the value and `*/*` as the scope.\n\nNow all of your new workspaces should use them for Git commits. If you have a workspace running, you can restart it or run `eval \"$(gp env -e)\"` in it.","metadata":{"source":"https://www.gitpod.io/docs/configure/authentication","loc":{"lines":{"from":49,"to":58}}}}],["346",{"pageContent":"---\nsection: billing\ntitle: Billing\ndescription: Learn how Gitpod charges for usage and manages your organization's billing.\n---\n\n# Billing\n\nGitpod charges for usage based on how long workspaces run, and the resources consumed by different [workspace classes](/docs/configure/workspaces/workspace-classes). Metered usage also includes [prebuilds](/docs/configure/projects/prebuilds).\n\nYou can access and manage organization billing settings from the organization menu or the organization usage page.\n\n> **Note:** You need to be an owner of the organization to access the **Billing** page[[1](/docs/configure/orgs/members)].\n\n## Credits\n\nGitpod usage is measured in **credits**.\n\nLarger [workspace classes](/docs/configure/workspaces/workspace-classes) use credits at a faster rate. E.g. Standard workspaces use 10 credits per hour, whereas Large workspaces use 20 credits per hour.\n\nYour invoice will show the total amount of credits consumed in a billing period.","metadata":{"source":"https://www.gitpod.io/docs/configure/billing","loc":{"lines":{"from":1,"to":21}}}}],["347",{"pageContent":"## Free tier\n\nAll users receive a free usage allowance of up to 500 credits per month to try Gitpod in their first created organization.\n\n## Configure billing\n\nOrganization owners can set up billing in the organization settings by clicking \"Upgrade Plan\".\n\n![Configure Billing](/images/docs/billing/configure-org-billing.png)\n\nOnce billing is configured, Gitpod will charge the organization billing account for usage by organization members.\n\n![Active billing](/images/docs/billing/active-org-billing.png)\n\n## Configure a usage limit\n\nThe usage limit prevents workspaces from starting once the limit has been reached.\n\nTo change the usage limit, look for \"Update limit\" in the BALANCE section of your personal or organization billing settings, after you have configured billing.\n\n![Active billing](/images/docs/billing/update-usage-limit-2.png)\n\nNote that it will not stop running workspaces.","metadata":{"source":"https://www.gitpod.io/docs/configure/billing","loc":{"lines":{"from":23,"to":45}}}}],["348",{"pageContent":"## View usage details\n\nOrganization owners can view usage details for their organization.\n\n![View usage](/images/docs/billing/view-org-usage-details.png)\n\n## Old pricing plans\n\nAll old seat-based or personal plans have been faded out. If you had one of those, and need help of any kind related to those, please contact support at support@gitpod.io.","metadata":{"source":"https://www.gitpod.io/docs/configure/billing","loc":{"lines":{"from":47,"to":55}}}}],["349",{"pageContent":"## Old pricing plans\n\nAll old seat-based or personal plans have been faded out. If you had one of those, and need help of any kind related to those, please contact support at support@gitpod.io.\n\n## FAQs\n\n### [How can I limit or optimize prebuild costs?](https://discord.com/channels/816244985187008514/1070648758716600371)\n\n<!-- DISCORD_BOT_FAQ - DO NOT REMOVE -->\n\nThere are a few built-in Gitpod features that can optimize your prebuild costs, such as:\n\n-   **Skip prebuilds** every X commits and use [last successful prebuild](https://www.gitpod.io/docs/configure/projects/last-successful-prebuild)\n\n-   **Stop prebuilds** for all branches, PRs and etc. when on GitHub. See [this page](https://www.gitpod.io/docs/references/gitpod-yml/#github). (might not be necessary)\n\n### With prebuilds enabled, does every push to my repository cost me credits?\n\nIt depends on how you configured prebuilds. Prebuilds run on headless Gitpod workspaces and the cost depends on how long they run when triggered.","metadata":{"source":"https://www.gitpod.io/docs/configure/billing","loc":{"lines":{"from":55,"to":73}}}}],["350",{"pageContent":"---\nsection: orgs\ntitle: Organizations\ndescription: Organizations allow you to manage users, projects, prebuilds and policies across multiple Gitpod workspaces.\n---\n\n# Organizations\n\nAn organization can be used to represent a group of people collaborating together with Gitpod, such as an entire company or an open source collective. Through Gitpod organizations you can:\n\n-   [Manage Organization Members](/docs/configure/orgs/members)\n-   [Manage Projects](/docs/configure/projects) (and [Prebuild](/docs/configure/projects/prebuilds) configurations)\n-   [Apply Organization Policies](/docs/configure/orgs/policies) (e.g. restrict workspace sharing)\n\n`youtube: 4orj31EUsuY`\n\n## Create an organization\n\nTo create a new organization:\n\n1. On the top bar, click on the scope selector and select _New Organization_.\n2. Set the organization name (the name is also the organization slug)","metadata":{"source":"https://www.gitpod.io/docs/configure/orgs","loc":{"lines":{"from":1,"to":22}}}}],["351",{"pageContent":"## View organizations\n\nTo see all the organizations the logged in user is a member of, click the scope selector on the left of the top bar in the Gitpod dashboard.","metadata":{"source":"https://www.gitpod.io/docs/configure/orgs","loc":{"lines":{"from":24,"to":26}}}}],["352",{"pageContent":"---\nsection: orgs\ntitle: Members\ndescription: Learn how to manage members in your organization. Also learn about member roles and permissions.\n---\n\n# Organization Members\n\nMembers are users who are permitted to access the configurations of an Organization.\n\n## Member Roles\n\n| Permission                  | Owner | Member |\n| --------------------------- | ----- | ------ |\n| Manage Organization Members | Yes   | No     |\n| Edit Organization Settings  | Yes   | No     |\n| Manage Organization Billing | Yes   | No     |\n| View Organization Usage     | Yes   | No     |\n| Invite Organization Members | Yes   | No     |\n| Edit Project Settings       | Yes   | Yes    |\n| Edit Project Variables      | Yes   | Yes    |\n| Add Projects                | Yes   | Yes    |\n| Remove Projects             | Yes   | Yes    |\n| View Branches               | Yes   | Yes    |\n| View Prebuilds              | Yes   | Yes    |\n| Trigger Prebuilds           | Yes   | Yes    |","metadata":{"source":"https://www.gitpod.io/docs/configure/orgs/members","loc":{"lines":{"from":1,"to":26}}}}],["353",{"pageContent":"## Add members to an organization\n\nOnce you create an organization you can invite members by using the unique invite URL from the Members page within an organization.\n\n## Change member permissions\n\nNew members will join with a _Member_ role which you can later change if needed from the Members list using the more actions button. For more, see [Roles](#member-roles).\n\n## Remove a member from an organization\n\nYou can remove an organization member form the Members list using the more actions button while hovering over the user entry.\n\n## Leaving an organization\n\nYou can leave an organization using the more actions button in the Members list while hovering over your user entry.","metadata":{"source":"https://www.gitpod.io/docs/configure/orgs/members","loc":{"lines":{"from":28,"to":42}}}}],["354",{"pageContent":"---\nsection: orgs\ntitle: Policies\ndescription: Organizational policies allow you to configure and manage common settings across all workspaces within your Gitpod organization.\n---\n\n# Policies\n\nPolicies allow you to manage and configure functionality across your Gitpod organization.\n\n## Manage a Policy\n\nTo update an Organizational policy:\n\n1. Ensure you have are a Member with the [Role](/docs/configure/orgs/members) \"Organization Owner\".\n1. Navigate to the [Gitpod dashboard](https://gitpod.io/).\n1. Ensure you are in the context of the Organization you want to set the policy.\n1. Navigate to the [settings page](https://gitpod.io/settings).\n1. Update the relevant policy.","metadata":{"source":"https://www.gitpod.io/docs/configure/orgs/policies","loc":{"lines":{"from":1,"to":19}}}}],["355",{"pageContent":"## Workspace Sharing\n\nWorkspace sharing is enabled by default. Through this policy, Organization Owners can prevent Members from sharing workspaces that have been started within an Organization.\n\n-   Prevents workspaces within an Organization from sharing access to a running workspace.\n-   Members can stop sharing a workspace at any time, regardless of the Organizational Policy.\n-   Any currently shared workspaces will not have sharing access removed.","metadata":{"source":"https://www.gitpod.io/docs/configure/orgs/policies","loc":{"lines":{"from":21,"to":27}}}}],["356",{"pageContent":"---\nsection: projects\ntitle: Environment Variables\ndescription: Learn how to set and use environment variables for your Gitpod projects.\n---\n\n# Environment Variables\n\nYou can pass environment variables into your workspace and use them in your code as usual. Please refer to the documentation of your programming language of choice for details on that.\n\n`youtube: dehln1E8ylY`","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/environment-variables","loc":{"lines":{"from":1,"to":11}}}}],["357",{"pageContent":"## Default Environment Variables\n\nBelow are some environment variables which are set automatically by Gitpod and are guaranteed to exist:\n\n-   `GITPOD_WORKSPACE_ID`: The Universally Unique Identifier (UUID) associated with the workspace.\n-   `GITPOD_WORKSPACE_URL`: The unique URL of the workspace.\n-   `GITPOD_REPO_ROOT`: Path to the directory where your git repository was cloned inside the workspace.\n\n> **Tip:** Try running **`env | grep GITPOD_`** on a workspace terminal to see all the Gitpod specific environment variables. These can be useful for scripting a dynamic workspace behavior.\n\n#### Reserved Prefix\n\nEnvironment variables beginning with the prefix `GITPOD_` are reserved for internal use by Gitpod and are overridden on every workspace startup. This means that a _user-defined_ variable set with the name `GITPOD_FOOBAR` will be ignored and not accessible in the workspace.","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/environment-variables","loc":{"lines":{"from":13,"to":25}}}}],["358",{"pageContent":"## User-Specific Environment Variables\n\nGitpod supports encrypted, user-specific environment variables.\nThey are stored as part of your user settings and can be used to set access tokens, or pass any other kind of user-specific information to your workspaces.\n\nThe `DOCKERD_ARGS` environment variable can be used to specify additional arguments to the docker installation running in your workspace. Currently\nmapping a user in your container to the gitpod user in your workspace is supported. This helps if you are using an unprivileged user with your containers\n(e.g. user 1000 in a node image) but need to edit files with vscode that have been created within the container. The content of the environment variable\nshould look like this:\n\n```json\n{ \"remap-user\": \"1000\" }\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/environment-variables","loc":{"lines":{"from":27,"to":39}}}}],["359",{"pageContent":"### Ways of setting user-specific environment variables","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/environment-variables","loc":{"lines":{"from":41,"to":41}}}}],["360",{"pageContent":"#### Using the command line: `gp env`\n\nThe `gp` CLI prints and modifies the persistent environment variables associated with your user for the current repository.\n\nTo set the persistent environment variable `foo` to the value `bar` use:\n\n```sh\ngp env foo=bar\n```\n\nBeware that this does not modify your current terminal session, but rather persists this variable for the next workspace on this repository.\n`gp` can only interact with the persistent environment variables for this repository, not the environment variables of your terminal.\nIf you want to set that environment variable in your terminal, you can do so using -e:\n\n```sh\neval $(gp env -e foo=bar)\n```\n\nIf you're using `fish` shell:\n\n```sh\neval (gp env -e foo=bar)\n```\n\nTo update the current terminal session with the latest set of persistent environment variables, use:\n\n```sh\neval $(gp env -e)\n```\n\nIf you're using `fish` shell:\n\n```sh\neval (gp env -e)","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/environment-variables","loc":{"lines":{"from":43,"to":76}}}}],["361",{"pageContent":"```\n\nTo update the current terminal session with the latest set of persistent environment variables, use:\n\n```sh\neval $(gp env -e)\n```\n\nIf you're using `fish` shell:\n\n```sh\neval (gp env -e)\n```\n\nTo delete a persistent environment variable use:\n\n```sh\ngp env -u foo\n\n# And if you want to remove it from your shell session too:\nunset foo\n```\n\nNote that you can delete/unset variables if their repository pattern matches the repository of this workspace exactly. I.e. you cannot\ndelete environment variables with a repository pattern of _/foo, foo/_ or _/_.\n\n```sh\nUsage:\n  gp env [flags]\n\nFlags:\n  -e, --export   produce a script that can be eval'ed in Bash\n  -h, --help     help for env\n  -u, --unset    deletes/unsets persisted environment variables\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/environment-variables","loc":{"lines":{"from":76,"to":110}}}}],["362",{"pageContent":"#### Using the account settings\n\nYou can also configure and view the persistent environment variables in [your account settings](https://gitpod.io/variables).\n\n![Environment Variables in Account Settings](/images/docs/beta/configure/environment-variables/environment-variables-account-settings.png)\n\nYou can add as many environment variables as you wish.\n\nThe repository pattern of each variable determines in what workspace it will be available.\nRepository patterns follow the `owner/repository` pattern. You can use a wildcard on either of the two, e.g. `gitpod-io/*` would make that variable available in all repositories owned by `gitpod-io`.\nConversely `*/vscode` would make that variable available on all repositories called `vscode`; this is especially useful for forks.\nSubsequently `*/*` makes that variable available in all of those workspace.","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/environment-variables","loc":{"lines":{"from":112,"to":123}}}}],["363",{"pageContent":"**Note**: For GitLab, which allows to have nested group/repository structures like `owner/some-group/sub-group/repo`, the number of segments in the pattern has to match the number of segments in the repository name. This constraint exists to avoid surpises and leaking of content into unexpected repositories. For matching arbitrary segments to the right, there is a dedicated pattern: `**`.\n\nSome example patterns (**for GitLab**) and results for the mentioned `owner/some-group/sub-group/repo` repository:\n\n-   `*/**`: ✅\n-   `*/*`: ❌ _(for GitLab)_\n-   `owner/some-group/*/*`: ✅\n-   `owner/some-group/*`: ❌\n-   `owner/some-group/**`: ✅\n-   `owner/**`: ✅\n-   `owner/some-group/sub-group/repo`: ✅\n-   `*/some-group/sub-group/repo`: ✅\n\n> **Beware:** While the variable values are stored encrypted, they are available as plain text inside a workspace. Be careful when sharing your live workspace or when using `*/*` or `*/**` as repository pattern.","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/environment-variables","loc":{"lines":{"from":125,"to":138}}}}],["364",{"pageContent":"## Using secrets with 3rd-party services\n\nIf you use tools like `aws`, `gcloud` or `vault` with Gitpod, you might want to consider using [OpenID Connect (OIDC)](/docs/configure/workspaces/oidc) over environment variables for authentication. OIDC makes the whole process of sharing secrets between a workspace and a 3rd-party more secure and scalable.","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/environment-variables","loc":{"lines":{"from":140,"to":142}}}}],["365",{"pageContent":"## Project-Specific Environment Variables\n\nEnvironment variables which are defined in [project](/docs/configure/projects) settings will be visible in prebuilds, and optionally also in workspaces. This is useful for prebuilds to access restricted services. Project-Specific Environment Variables will take precedence over [User-Specific Environment Variables](#user-specific-environment-variables). Only members of the [Gitpod organization](/docs/configure/orgs) where the project resides will be able to access the environment variables inside a running workspace, if the associated repository is public then people outside of your Gitpod organization will _not_ have access to them normally.","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/environment-variables","loc":{"lines":{"from":144,"to":146}}}}],["366",{"pageContent":"> **Warning:** Care should be taken with secrets. If your repository is public and prebuilds are enabled, ensure that neither of your `init` or `before` task commands in `.gitpod.yml` are exposing the sensitive environment variable values to the filesystem (i.e. persistent `/workspace` dir) and that [`pullRequestsFromForks` (for GitHub)](/docs/configure/projects/prebuilds#github-specific-configuration) is set to false.","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/environment-variables","loc":{"lines":{"from":148,"to":148}}}}],["367",{"pageContent":"## Task terminal-specific Environment Variables\n\nYou can set environment variables for a Gitpod `task` terminal by setting the `env` property within the task definition in your `.gitpod.yml`. Please note that such environment variables will be limited to the `task` terminal and are not globally set across the workspace.\n\n### Using the `env` keyword\n\n```yml\ntasks:\n    - name: Example of setting an environment variable for a task terminal\n      env:\n          PRINT_ME: 'Hello World!'\n      command: echo \"$PRINT_ME\"\n```\n\nNote: The values should be a static string or integer, you can't refer to an existing variable via `env` keyword.","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/environment-variables","loc":{"lines":{"from":150,"to":164}}}}],["368",{"pageContent":"### Using the task SHELL\n\n```yml\ntasks:\n    - name: Example of starting yarn with a custom environment variable set\n      command: |\n          # Example for referring to the existing system variables\n          export API_URL=\"$HOSTNAME\"\n\n          # Print out the environment variable\n          echo \"$API_URL\"\n\n          yarn start\n\n    - name: Example of updating PATH environment variable inside a task shell\n      command: |\n          # Download and install `fzf` binary to ~/.local/bin/\n          mkdir -p ~/.local/bin\n          curl -sL \"https://github.com/junegunn/fzf/releases/download/0.35.1/fzf-0.35.1-linux_amd64.tar.gz\" | tar -C ~/.local/bin -xpz\n\n          # Update PATH variable\n          export PATH=\"$HOME/.local/bin:$PATH\"\n\n          # Now `fzf` can be called without full path from the task shell\n          ls / | fzf","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/environment-variables","loc":{"lines":{"from":166,"to":190}}}}],["369",{"pageContent":"```\n\nNote: You can use this method when you need to refer to other variables or want to use scripting to set them conditionally.\n\nSee [`.gitpod.yml`](/docs/references/gitpod-yml#tasksnenv) for more details.","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/environment-variables","loc":{"lines":{"from":191,"to":195}}}}],["370",{"pageContent":"## Providing one-time environment variables via URL\n\n> ❗️ This feature is great for setting one-time environment variables for dynamic workspace configurations or setups but is not appropriate for configuring sensitive information, such as passwords or long-lived API tokens. Gitpod and the [Open Web Application Security Project](https://owasp.org/www-community/vulnerabilities/Information_exposure_through_query_strings_in_url) recommends that you do not pass sensitive information through query strings. Refer to [CWE-598](https://cwe.mitre.org/data/definitions/598.html) to learn more about this recommendation.\n\nIn addition to user-specific environment variables, Gitpod also allows passing in variables through the `gitpod.io/#` URL.\nThe syntax for that is:\n\n```\nhttps://gitpod.io/#var=value,var2=value2/https://github.com/my-org/repo-to-work-on","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/environment-variables","loc":{"lines":{"from":197,"to":205}}}}],["371",{"pageContent":"```\n\nThe values are [URL encoded](https://www.w3schools.com/tags/ref_urlencode.asp) to allow any non-ascii characters in values.\nIn case of a conflict, e.g. in the example above if the user already had a variable `var2` set, the user's value would be used.","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/environment-variables","loc":{"lines":{"from":206,"to":209}}}}],["372",{"pageContent":"## Exporting all the Gitpod environment variables that you created\n\nYou can run the following command in your Gitpod Workspace terminal to save your environment variables (which you have configured in [Gitpod Environment Variables](https://gitpod.io/variables)) in a different file (e.g.: gitpod.env):\n\n```bash\ngp env > gitpod.env\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/environment-variables","loc":{"lines":{"from":211,"to":217}}}}],["373",{"pageContent":"---\nsection: projects\ntitle: Incremental Prebuilds\ndescription: Learn about incremental prebuilds in Gitpod which reuses older prebuilds to create new ones faster.\n---\n\n# Incremental Prebuilds\n\nSimilar to [last successful prebuild](/docs/configure/projects/last-successful-prebuild), incremental prebuilds leverage older prebuilds in order to create new prebuilds faster.\n\n![Enable Incremental Prebuilds](/images/docs/projects/enable-incremental-prebuilds.webp)\n\nAn incremental prebuild is based on an older prebuild that was built for an older commit, in order to reuse pre-existing build artifacts. This is achieved by:\n\n1. Loading the older prebuild\n2. Updating the source code to the latest commit\n3. Running any `before`, `prebuild`, and `init` tasks again (incremental rebuild)<br>_Note: This means that your init tasks will be run twice on the same checkout, i.e. they need to be reentrant_","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/incremental-prebuilds","loc":{"lines":{"from":1,"to":17}}}}],["374",{"pageContent":"## How is a base prebuild selected?\n\nWhen incremental prebuilds are enabled for a project, and a new prebuild is being triggered, Gitpod will do the following:","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/incremental-prebuilds","loc":{"lines":{"from":19,"to":21}}}}],["375",{"pageContent":"1. Retrieve the commit history of the current commit to be built (up to 100 ancestor commits)\n2. For each ancestor commit, check if there exists a corresponding prebuild that can be used as a \"base\":\n    - A suitable \"base prebuild\" must have been successful (i.e. failed, canceled, or timed out prebuilds are not reused)\n    - It must be a recent, direct ancestor of the current commit (i.e. not a commit from a different unrelated branch)\n    - It must be based on the same project configuration as the current commit (for example, if the Docker image or the `init` tasks have recently been changed, older prebuilds are no longer relevant or useful and cannot be used as a \"base\")\n3. If a suitable base prebuild is found, Gitpod will load it; update the checkout to the latest commit; and then re-run any `before`, `prebuild` and `init` task on top of it\n    - If no suitable base prebuild is found, Gitpod will build the new prebuild from scratch (i.e. a non-incremental prebuild)","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/incremental-prebuilds","loc":{"lines":{"from":23,"to":29}}}}],["376",{"pageContent":"## When are incremental prebuilds useful?\n\nIncremental prebuilds can significantly speed up most of your prebuilds, especially if:\n\n```\n(time_to_load_older_prebuild + incremental_rebuild_duration) < full_prebuild_duration\n```\n\nTypically, enabling incremental prebuilds makes sense if:\n\n-   Your project's build system benefits from incremental rebuilds (i.e. rebuilds are significantly faster than your initial build)\n-   Your regular prebuilds take longer than 5 minutes (the longer they take, the bigger the potential speedup is)","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/incremental-prebuilds","loc":{"lines":{"from":31,"to":42}}}}],["377",{"pageContent":"---\nsection: projects\ntitle: Projects\ndescription: Learn how to manage projects in your organization. Also learn about project roles and permissions. It allows configuring settings like environment variables and prebuilds for repositories in your organization.\n---\n\n# Projects\n\nProjects live under a Gitpod organization. They connect Gitpod to a git repository. A Gitpod project can only have one git repository, and a git repository can only belong to one project.\n\nA project is required in order to trigger [prebuilds](/docs/configure/projects/prebuilds) on a repository. Organization members use the project to configure and view prebuilds.\n\nWith [organization billing](/docs/configure/billing#configure-organization-billing), all project usage such as workspaces and prebuilds, may be billed to the organization.\n\nProjects have a static URL based on the organization and project name, for example:","metadata":{"source":"https://www.gitpod.io/docs/configure/projects","loc":{"lines":{"from":1,"to":15}}}}],["378",{"pageContent":"Projects have a static URL based on the organization and project name, for example:\n\n<!-- TODO: Update slug, depends upon => https://github.com/gitpod-io/gitpod/pull/16050#pullrequestreview-1272075181 -->\n\n`https://gitpod.io/t/<team>/<project>`","metadata":{"source":"https://www.gitpod.io/docs/configure/projects","loc":{"lines":{"from":15,"to":19}}}}],["379",{"pageContent":"### View projects\n\nThe Projects page for a organization shows a card for each project.\n\nCards show the name, repository URL, quick links to project branches and prebuilds, and the branch and timestamp of the latest prebuild.\n\n### Add a new project\n\nTo add a new project, click on _New Project_ on the Projects page for the organization, and select a repository from the list.\n\nThe list will show repositories from one of your git providers. Select a different provider if necessary. You may also be prompted to configure our [GitHub app](/docs/configure/authentication/github#authorizing-github-webhooks), the first time a project is created for a GitHub account. The new project will be associated with the current organization selected in the dashboard.\n\n### Configure a project\n\nOrganization members can configure Prebuilds, and set the workspace class used for project workspaces, in project settings.\n\n![Project Settings](/images/docs/project-settings.png)","metadata":{"source":"https://www.gitpod.io/docs/configure/projects","loc":{"lines":{"from":21,"to":37}}}}],["380",{"pageContent":"### Remove a project\n\nYou can remove a project using the \"Remove project\" action from a project card.","metadata":{"source":"https://www.gitpod.io/docs/configure/projects","loc":{"lines":{"from":39,"to":41}}}}],["381",{"pageContent":"## FAQs\n\n### [New Project page is stuck at fetching repositories](https://discord.com/channels/816244985187008514/1056255866791272488)\n\n<!-- DISCORD_BOT_FAQ - DO NOT REMOVE -->\n\nTo identify the problem: check browser console logs.\n\nPossible solution(s):\n\n-   Try to disconnect Git(Hub/Lab) or Bitbucket from https://gitpod.io/integrations, then reconnect.\n-   Make sure correct scopes are set for those Git integration providers as well.","metadata":{"source":"https://www.gitpod.io/docs/configure/projects","loc":{"lines":{"from":43,"to":54}}}}],["382",{"pageContent":"---\nsection: projects\ntitle: Last Successful Prebuild\ndescription: Learn about last successful prebuild in Gitpod which reuses older prebuilds to create new ones faster.\n---\n\n# Last Successful Prebuild\n\n> {title} is currently in [Alpha](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/15310).\n\nSimilar to [incremental prebuilds](/docs/configure/projects/incremental-prebuilds), last successful prebuild leverages older prebuilds in order to create new workspaces faster.\n\n![Use Last Successful Prebuild](/images/docs/projects/use-last-successful-prebuild.webp)\n\nWhen enabled, new workspaces may start based on a prebuild that was built for an older commit, in order to reuse any existing build artifacts. This is achieved by:","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/last-successful-prebuild","loc":{"lines":{"from":1,"to":15}}}}],["383",{"pageContent":"When enabled, new workspaces may start based on a prebuild that was built for an older commit, in order to reuse any existing build artifacts. This is achieved by:\n\n1. Loading the older prebuild\n2. Updating the source code to the latest commit\n3. Running any `before`, `prebuild`, and `init` tasks again interactively (incremental rebuild)<br>_Note: This means that your init tasks will be run twice on the same checkout, i.e. they need to be reentrant_\n\nThus, your new workspace will both:\n\n-   _load quickly_: no waiting, even if a newer prebuild is still being computed (i.e. you'll never see the \"Prebuild in Progress\" screen again ⏩)\n-   and it will be _ready quickly_: your IDE Terminal will run either no build at all (if none is needed), or just a quick incremental rebuild (faster than a full build ♻️)","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/last-successful-prebuild","loc":{"lines":{"from":15,"to":24}}}}],["384",{"pageContent":"## Skip Prebuilds\n\nWhen Gitpod can leverage older prebuilds to start your workspaces faster, you no longer necessarily need to create a new prebuild for every commit that is pushed to your repository.\n\nThis is where the ability to skip prebuilds becomes helpful: For example, you could decide to only trigger a new prebuild every 5 commits, or every 10 commits.\n\nThe ideal number depends on your project. For example:\n\n-   If you push new commits to your repository very frequently, you may want a higher number (especially if your prebuilds also take a long time to build)\n-   On the other hand, if your prebuilds finish quickly, and you typically don't push new commits very often, it may be fine to not skip any prebuild (i.e. `skip prebuilds = 0`)\n\nPlease feel free to adjust and experiment with this value.","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/last-successful-prebuild","loc":{"lines":{"from":26,"to":37}}}}],["385",{"pageContent":"---\nsection: projects\ntitle: Gitpod Prebuilds\ndescription: Learn how to configure prebuilds for your Gitpod projects. Prebuilds reduce wait time,by installing dependencies or running builds before you start a new workspace.\n---\n\n# Prebuilds\n\nPrebuilds reduce wait time, by installing dependencies or running builds **before** you start a new workspace.\n\n`youtube: DwkoOz1GSVg`\n\n## .gitpod.yml\n\nPrebuilds are typically configured using an `init` [task](/docs/configure/workspaces/tasks) in your gitpod.yml.\n\nIn the example below, the `init` task installs npm packages into the node_modules directory of the workspace. The `command` task runs 'npm start' on every workspace startup.\n\n```yml\ntasks:\n    - init: |\n          npm install\n    - command: |\n          npm start\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/prebuilds","loc":{"lines":{"from":1,"to":25}}}}],["386",{"pageContent":"## Enable prebuilds on your repository project\n\nUse the following steps to enable prebuilds on your repository:\n\n-   [Create a project](/docs/configure/projects/prebuilds#projects-and-prebuilds) for the repository.\n-   Define the prebuild steps in an init [task](https://www.gitpod.io/docs/configure/workspaces/tasks) in your [gitpod.yml](https://www.gitpod.io/docs/references/gitpod-yml).\n\nSince prebuilds are included in all our metered [pay-as-you-go](https://www.gitpod.io/docs/configure/billing) plans, configuring prebuild settings in your project should help with managing prebuild usage.","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/prebuilds","loc":{"lines":{"from":27,"to":34}}}}],["387",{"pageContent":"## Projects and prebuilds\n\nFor prebuilds to run automatically, you also need a [project](/docs/configure#projects) for your repository.\n\nTo create a new project:\n\n-   Click on _New Project_ in the Projects page of one your organizations.\n<figure>\n<video onloadstart=\"this.playbackRate = 1.5;\" controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"ARepl extension example\" src=\"/images/docs/projects/prebuilds.webm\" type=\"video/webm\"></video>\n    <figcaption>Create a new project in one of your organizations to enable prebuilds</figcaption>\n</figure>\n\n-   If necessary, you will be prompted for additional authorization to install and configure the Gitpod GitHub app,\n    so that Gitpod can watch your repositories and trigger prebuilds.\n-   Select the repository for your project.","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/prebuilds","loc":{"lines":{"from":36,"to":50}}}}],["388",{"pageContent":"### View prebuilds\n\nYou can find a list of recent prebuilds under the **Prebuilds** tab for your project.\n\n![Recent prebuilds list for an example project](/images/docs/projects/prebuild-dashboard.webp)\n\nFrom here, you may also trigger a new prebuild based on the last commit in the project. Selecting a prebuild will open the details page showing the current status as well as additional logs. From the prebuild details page, you may rerun the selected prebuild or start a new workspace based on it.\n\n### Rerun a prebuild\n\nPrebuilds can be triggered again which can be particularly useful when debugging an unexpected failure.\n\nTo rerun a prebuild:\n\n1. Navigate to your project and select the **Prebuilds** tab.\n2. Select the prebuild you wish to rerun.\n3. Select **Rerun Prebuild**.","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/prebuilds","loc":{"lines":{"from":52,"to":68}}}}],["389",{"pageContent":"### Start workspace based on existing prebuild\n\nTo start a workspace using an existing prebuild:\n\n1. Navigate to your project and select the **Prebuilds** tab.\n2. Select the prebuild you wish to start a workspace on top of.\n3. Select **New Workspace (with this prebuild)**.","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/prebuilds","loc":{"lines":{"from":70,"to":76}}}}],["390",{"pageContent":"## Prebuilds are shared\n\nGitpod can trigger a prebuild whenever there is a commit to a repository. That prebuild will then be used for all new workspaces opened on that branch. This is ideal for working together on branches for testing or code reviews.\n\nPrebuild users will see a message in their workspace terminal like this:\n\n```txt\n🤙 This task ran as a workspace prebuild\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/prebuilds","loc":{"lines":{"from":78,"to":86}}}}],["391",{"pageContent":"## Workspace directory only\n\nPrebuilds save **only** the workspace directory. Other directories like the home directory are not saved by prebuilds.\n\nTo use global installs like 'npm install -g', we suggest using a custom Dockerfile or a `before` task, which runs before the init task, and runs again before the command task.\n\n#### Project environment variables\n\nEnvironment variables which are defined in project settings will be visible in prebuilds. This is useful for prebuilds to access restricted services.\n\n**WARNING**\nCare should be taken with secrets in prebuilds. Do not save secrets in a way which could leak into workspaces. This especially true for public repositories.","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/prebuilds","loc":{"lines":{"from":88,"to":99}}}}],["392",{"pageContent":"## Configuring prebuilds manually\n\nAll prebuilds require a [Gitpod project](/docs/configure/projects#add-a-new-project) for the repository.\n\nFor a GitLab or Bitbucket repository, allow Gitpod to install repository webhooks, by granting `api` permissions in your [git provider integrations](https://gitpod.io/integrations)\n\nFor GitLab, if you want to trigger new Gitpod prebuilds for specific branches only, you can configure this in your GitLab [project settings](https://docs.gitlab.com/ee/user/project/integrations/webhooks.html#branch-filtering).\n\nBy default, Gitpod prepares prebuilt workspaces for all changes on the default branch and for pull/merge requests coming from the same repository.\n\n> **Note**: Prebuilds are executed as the user who enabled them. This means that if you want to use\n> prebuilds on a private repository, you must give Gitpod access to private repositories.","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/prebuilds","loc":{"lines":{"from":101,"to":112}}}}],["393",{"pageContent":"> **Note**: Prebuilds are executed as the user who enabled them. This means that if you want to use\n> prebuilds on a private repository, you must give Gitpod access to private repositories.\n\nPrebuilds are configured in your repository's [`.gitpod.yml`](/docs/references/gitpod-yml) file with the following start tasks:\n\n-   `before`\n-   `init`\n\nNote the absence of the `command` task. Since this task may potentially run indefinitely, e.g. if you start a dev server, Gitpod does not execute the `command` task during prebuilds.\n\nPrebuilds have a timeout of 1 hour. If your `before` and `init` tasks combined exceed 1 hour, your prebuild will fail. Subscribe to [this issue](https://github.com/gitpod-io/gitpod/issues/6283) for updates when this limit will be lifted.\n\nEach prebuild starts with a clean environment. In other words, Gitpod does not cache artifacts between prebuilds.","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/prebuilds","loc":{"lines":{"from":112,"to":124}}}}],["394",{"pageContent":"Each prebuild starts with a clean environment. In other words, Gitpod does not cache artifacts between prebuilds.\n\nIncremental Prebuilds use an earlier, successful Prebuild as the base. This can reduce the duration of your Prebuilds significantly, especially if they normally take more than ten minutes to complete. Incremental Prebuilds can be found under the project settings in your Gitpod dashboard.","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/prebuilds","loc":{"lines":{"from":124,"to":126}}}}],["395",{"pageContent":"## GitHub-specific configuration\n\nThe `github` `prebuilds` section in the `.gitpod.yml` file configures when prebuilds are run.\nBy default, prebuilds are run on push to the default branch and for each pull request coming from the same repository.\nAdditionally, you can enable prebuilds for all branches (`branches`) and for pull requests from forks (`pullRequestsFromForks`).\n\n> **Note:** The Gitpod GitHub app has no equivalent for GitLab or Bitbucket yet, so this entire section is GitHub-specific for now.","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/prebuilds","loc":{"lines":{"from":128,"to":134}}}}],["396",{"pageContent":"> **Note:** The Gitpod GitHub app has no equivalent for GitLab or Bitbucket yet, so this entire section is GitHub-specific for now.\n\n```yml\ngithub:\n    prebuilds:\n        # enable for the default branch (defaults to true)\n        master: true\n        # enable for all branches in this repo (defaults to false)\n        branches: false\n        # enable for pull requests coming from this repo (defaults to true)\n        pullRequests: true\n        # enable for pull requests coming from forks (defaults to false)\n        pullRequestsFromForks: false\n        # add a check to pull requests (defaults to true)\n        addCheck: true\n        # add a \"Review in Gitpod\" button as a comment to pull requests (defaults to false)\n        addComment: false\n        # add a \"Review in Gitpod\" button to the pull request's description (defaults to false)\n        addBadge: false\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/prebuilds","loc":{"lines":{"from":134,"to":153}}}}],["397",{"pageContent":"#### Additional GitHub integration\n\nOnce the GitHub app is installed, Gitpod can add helpful annotations to your pull requests.\n\n#### Checks\n\nBy default, Gitpod registers itself as a check to pull requests - much like a continuous integration system would do.\n\nThe default behavior, however, would not make the checks fail when the prebuild failed.\nThis can be enabled with the following snippet:\n\n```yml\ngithub:\n    prebuilds:\n        addCheck: prevent-merge-on-error\n```\n\nYou can disable this behaviour in the `.gitpod.yml` file in your default branch:\n\n```yml\ngithub:\n    prebuilds:\n        addCheck: false\n```\n\n#### Comment\n\nGitpod can add a comment with an \"Open in Gitpod\" button to your pull requests.\n\nYou can enable this behaviour in the `.gitpod.yml` file in your default branch:\n\n```yml\ngithub:\n    prebuilds:\n        addComment: true\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/prebuilds","loc":{"lines":{"from":155,"to":190}}}}],["398",{"pageContent":"#### Badge\n\nInstead of adding a comment, Gitpod can also modify the description of a pull request to add the \"Open in Gitpod\" button.\nThis approach produces fewer GitHub notifications, but can also create a concurrent editing conflict when the bot and a user try to edit the description of a pull request at the same time.\n\nYou can enable this behaviour in the `.gitpod.yml` file in your default branch:\n\n```yml\ngithub:\n    prebuilds:\n        addBadge: true\n```\n\nThe `addComment` and `addBadge` behaviours are not mutually exclusive (i.e. enabling one does not disable the other).\nIf you don't want the comments to be added, disable them using `addComment: false`.","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/prebuilds","loc":{"lines":{"from":192,"to":206}}}}],["399",{"pageContent":"## User specific environment variables in prebuilds\n\nIt is not necessarily best practice to have user specific environment variables in a prebuild `init` block, but sometimes there are build time requirements that mean certain tokens need setting or files need creating. Environment variables defined within your Gitpod Variables preferences are not imported by default, but they can be accessed with the following command within a `before` or `init` block:\n\n```yml\ntasks:\n    - init: |\n          eval $(command gp env -e)\n          echo \"Hello ${MY_VAR}\"\n```\n\nAfter that, the available environment variables will be installed into the rest of you shell script and can be accessed normally.","metadata":{"source":"https://www.gitpod.io/docs/configure/projects/prebuilds","loc":{"lines":{"from":208,"to":219}}}}],["400",{"pageContent":"---\nsection: user-settings\ntitle: Access Tokens\ndescription: Access Tokens are secrets that allow you to interact with Gitpod through Gitpod APIs.\n---\n\n# Access Tokens\n\n> Access Tokens are currently in [Beta](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/14280).\n\nAccess Tokens are secrets that allow you to interact with Gitpod through Gitpod APIs. When you use an Access Token, all actions performed with the token assume the same level of authorization of the Access Token user.\n\n![Create Access Token](/images/docs/access-token-create.png)\n\n## Permissions (Scopes)\n\nEach Access Token either has:\n\n-   No Access.\n-   Full Access to Resources and APIs which the token owner also has access to.\n\nBy default, an Access Token has **No Access**. You need to explicitly select Full Access to succesfully authorize.\n\nIn the future, we will expand Access Tokens with fine grained permissions.","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/access-tokens","loc":{"lines":{"from":1,"to":24}}}}],["401",{"pageContent":"## Expiration\n\nAll Access Tokens have an expiration time. When a token expires, requests made with the token will fail with Unathorized. When a token expires, you can [regenerate](#regenerating-access-tokens) it.\n\n## Managing Access Tokens\n\n### Listing Access Tokens\n\nYou can list your Access Tokens in your user Settings, or by going to [gitpod.io/tokens](https://gitpod.io/tokens).\n\n![List Access Tokens](/images/docs/access-token-list.png)\n\n### Creating an Access Token\n\nYou can create an Access Token by navigating to [gitpod.io/tokens](https://gitpod.io/tokens) or through Settings > Access Tokens. Clicking **New Access Token** will prompt you to specify details of the token.\n\n-   Your access tokens will automatically expire after the specified duration.\n-   Once you create an Access Token, it will be shown to you **once**. Make sure you store it in a secure place, you will not be able to retrieve it again.","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/access-tokens","loc":{"lines":{"from":26,"to":43}}}}],["402",{"pageContent":"## Updating an Access Token\n\nAccess Token can be updated. You can update the following properties on a token:\n\n-   Name\n-   Permission scopes\n\nWhen you update a token, the token secret remains unaffected and you can continue to use it, until it expires.\n\n## Regenerating Access Tokens\n\nAccess Token can be regenerated. Regenerating a token will:\n\n-   Create a new token secret, which you'll need to store in a secure place and replace your old one.\n-   The new token will have a new expiration time.\n-   The old token will no longer be valid and will receive Unathorized when interacting with APIs.\n\n## Deleting Access Tokens\n\nPersonal Access token can be deleted. Once deleted, the token is no longer valid for interaction with APIs.","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/access-tokens","loc":{"lines":{"from":45,"to":64}}}}],["403",{"pageContent":"---\nsection: user-settings\ntitle: Browser Bookmarklet\ndescription: Learn how to use a browser bookmarklet to quickly spin up Gitpod workspaces from any GitHub, GitLab or Bitbucket repository.\n---\n\n# Browser Bookmarklet\n\nCreating a workspace is as easy as prefixing any GitHub URL with `gitpod.io/#`.\n\nFor convenience, we developed a Gitpod browser bookmarklet as an alternative to [installing our browser extension](/docs/configure/user-settings/browser-extension) that does the\nprefixing for you - as simple as that.\n\n1. Drag the following image to your bookmark bar.\n\n![Open in Gitpod](/images/docs/browser-bookmarklet.png)\n\n2. Select all of the code below and then copy it to your clipboard.","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/browser-bookmarklet","loc":{"lines":{"from":1,"to":18}}}}],["404",{"pageContent":"1. Drag the following image to your bookmark bar.\n\n![Open in Gitpod](/images/docs/browser-bookmarklet.png)\n\n2. Select all of the code below and then copy it to your clipboard.\n\n```javascript\njavascript: (() => {\n\t'use strict';\n\t(function () {\n\t\tfor (\n\t\t\tvar t = document.getElementsByTagName('meta'), n = 0;\n\t\t\tn < t.length;\n\t\t\tn++\n\t\t) {\n\t\t\tvar o = t[n];\n\t\t\tif (o.content.toLowerCase().includes('gitlab')) return !0;\n\t\t\tif ('hostname' === o.name && o.content.includes('github'))\n\t\t\t\treturn !0;\n\t\t\tif (\n\t\t\t\t'application-name' === o.name &&\n\t\t\t\to.content.toLowerCase().includes('bitbucket')\n\t\t\t)\n\t\t\t\treturn !0;\n\t\t}\n\t\treturn !1;\n\t})() &&\n\t\twindow.open(\n\t\t\t('https://gitpod.io',\n\t\t\t'https://gitpod.io/#' +\n\t\t\t\t(window.location.protocol + '//' + window.location.host) +\n\t\t\t\twindow.location.pathname),\n\t\t);\n})();","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/browser-bookmarklet","loc":{"lines":{"from":18,"to":51}}}}],["405",{"pageContent":"```\n\n3. Right-click edit the bookmark and replace the contents of the URL field with the code that is in your clipboard:\n\n![Browser Extension](/images/docs/browser-bookmarklet-edit.png)\n\n4. Done! Next time you are viewing a repository on GitHub, GitLab or Bitbucket press the bookmarklet to open the repository in Gitpod.","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/browser-bookmarklet","loc":{"lines":{"from":52,"to":58}}}}],["406",{"pageContent":"## Use with Gitpod Self-Hosted\n\nIf you are using Gitpod Self-Hosted you can still use the browser bookmarklet by configuring it with your self-hosted URL by replacing the `gitpod.io` URL with your self-hosted URL in the bookmarklet code.\n\n```javascript\nwindow.open((\"https://gitpod.io\",\"https://gitpod.io/#\n```\n\n## Source Code\n\nGitpod's browser bookmarklet is open source. You can check out its [source code](https://github.com/gitpod-io/browser-bookmarklet), or even open it in Gitpod:\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-io/browser-bookmarklet)","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/browser-bookmarklet","loc":{"lines":{"from":60,"to":72}}}}],["407",{"pageContent":"---\nsection: user-settings\ntitle: Browser Extension\ndescription: Learn how to use the Gitpod browser extension to quickly spin up Gitpod workspaces from any GitHub, GitLab or Bitbucket repository.\n---\n\n<script>\n  import Keybind from \"$lib/components/keybind.svelte\";\n</script>\n\n# Browser Extension\n\nCreating a workspace is as easy as prefixing any GitHub URL with `gitpod.io/#`.\n\nFor convenience, we developed a Gitpod browser extension. It adds a button to GitHub, GitLab or Bitbucket that does the\nprefixing for you - as simple as that.\n\n![Browser Extension](/images/docs/browser-extension-lense.png)\n\nWe provide the extension for:\n\n-   [Chrome](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) - also works for Edge, Brave and other Chromium-based browsers.\n-   [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/)","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/browser-extension","loc":{"lines":{"from":1,"to":23}}}}],["408",{"pageContent":"## Access the extension settings\n\n1. Right-click on the Gitpod extension icon.\n2. Select `Options` for chrome based browsers. For Firefox, select `Manage Extension` and then `Preferences`.\n\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Gitpod browser extension configuration\" src=\"/images/docs/beta/integrations/new-browser-extension-options.png\">\n\n## Use a custom Gitpod instance URL\n\nIf you are using custom Gitpod instance (e.g. [dedicated](https://www.gitpod.io/dedicated)) you can still use the browser extension by configuring it with your instance URL\n\nAfter you have installed the extension go to the options panel and enter your custom Gitpod instance URL.\n\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Gitpod browser extension configuration\" src=\"/images/docs/beta/integrations/browser-extension-options.png\">","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/browser-extension","loc":{"lines":{"from":25,"to":38}}}}],["409",{"pageContent":"## Open repositories with <Keybind>.</Keybind> (dot) keybind\n\nToggle on the `Enable . keybind to open repositories in Gitpod` option in the Gitpod extension [preferences/options](#accessing-the-extension-optionspreferences). After doing this, whenever you hit <Keybind>.</Keybind> on GitHub or GitLab, the current repository will open in Gitpod.\n\n## Source Code\n\nGitpod's browser extension is open source. You can check out its [source code](https://github.com/gitpod-io/browser-extension), or even open it in Gitpod:\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-io/browser-extension)","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/browser-extension","loc":{"lines":{"from":40,"to":48}}}}],["410",{"pageContent":"---\nsection: user-settings\ntitle: Browser settings\ndescription: Learn how to configure browser settings for an optimal Gitpod experience on Browser.\n---\n\n# Browser Settings\n\nFor the best experience when working with Gitpod, we recommend you whitelist the `.gitpod.io` domain in your browser for the following permissions:\n\n-   Paste content from your clipboard to a Gitpod workspace\n-   Pop-ups, to preview your dev server in a new tab\n\nEach browser handles this slightly differently:\n\n-   [Chrome](#chrome)\n-   [Edge](#edge)\n-   [Brave](#brave)\n-   [Firefox](#firefox)\n-   [Safari](#safari)","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/browser-settings","loc":{"lines":{"from":1,"to":20}}}}],["411",{"pageContent":"## Chrome\n\n### Clipboard\n\n1. Navigate to the Clipboard site permissions at [chrome://settings/content/clipboard](chrome://settings/content/clipboard).\n1. To the right of the \"Allowed to see your clipboard\" heading, click the \"Add\" button.\n1. Paste `[*.]gitpod.io` in the _Site_ field and click \"Add\".\n\n### Pop-ups\n\n1. Navigate to the Pop-ups site permissions at [chrome://settings/content/popups](chrome://settings/content/popups).\n1. To the right of the \"Allowed to send pop-ups and use redirects\" heading, click the \"Add\" button.\n1. Paste `[*.]gitpod.io` in the _Site_ field and click \"Add\".","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/browser-settings","loc":{"lines":{"from":22,"to":34}}}}],["412",{"pageContent":"## Edge\n\n### Clipboard\n\n1. Navigate to the Clipboard site permissions at [edge://settings/content/clipboard](edge://settings/content/clipboard).\n1. To the right of the \"Allow\" heading, click the \"Add\" button.\n1. Paste `[*.]gitpod.io` in the _Site_ field and click \"Add\".\n\n### Pop-ups\n\n1. Navigate to the Pop-ups site permissions at [edge://settings/content/popups](edge://settings/content/popups).\n1. To the right of the \"All\" heading, click the \"Add\" button.\n1. Paste `[*.]gitpod.io` in the _Site_ field and click \"Add\".","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/browser-settings","loc":{"lines":{"from":36,"to":48}}}}],["413",{"pageContent":"## Brave\n\n### Clipboard\n\n1. Navigate to the Clipboard site permissions at [brave://settings/content/clipboard](brave://settings/content/clipboard).\n1. To the right of the \"Allowed to see your clipboard\" heading, click the \"Add\" button.\n1. Paste `[*.]gitpod.io` in the _Site_ field and click \"Add\".\n\n### Pop-ups\n\n1. Navigate to the Pop-ups site permissions at [brave://settings/content/popups](brave://settings/content/popups).\n1. To the right of the \"Allowed to send pop-ups and use redirects\" heading, click the \"Add\" button.\n1. Paste `[*.]gitpod.io` in the _Site_ field and click \"Add\".\n\n## Firefox\n\n### Clipboard\n\nIt works by default.\n\n### Pop-ups\n\n1. Navigate to the Pop-ups site permissions at [about:preferences#privacy](about:preferences#privacy).\n1. To the right of the \"Block pop-up windows\" checkbox, click the \"Exceptions\" button.\n1. Paste `gitpod.io` in the _Address of website_ field and click \"Allow\".\n1. Click \"Save Changes\".","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/browser-settings","loc":{"lines":{"from":50,"to":75}}}}],["414",{"pageContent":"## Safari\n\n### Clipboard\n\nIt works by default.\n\n### Pop-ups\n\n🤷‍♂️ We can't find a solution to whitelist all Gitpod workspaces. If we missed anything, please do let us know through the feedback widget below 🙏.","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/browser-settings","loc":{"lines":{"from":77,"to":85}}}}],["415",{"pageContent":"---\nsection: user-settings\ntitle: Dotfiles\ndescription: Learn how to configure Gitpod to use your own dotfiles for all your workspaces and how to write a custom installation script according to your personal preferences.\n---\n\n# Dotfiles\n\nDotfiles are a way to customize your developer environment according to your personal needs.\n\nTo configure Gitpod to use your own dotfiles for all your workspaces, enter the URL of a dotfiles repository in [your user preferences](https://gitpod.io/preferences).\n\n`youtube: 00dif9QWXNU`","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/dotfiles","loc":{"lines":{"from":1,"to":13}}}}],["416",{"pageContent":"## Custom installation script\n\nGitpod will recognize and run one of the following install scripts from your dotfiles repository.\n\n-   install.sh\n-   install\n-   bootstrap.sh\n-   bootstrap\n-   script/bootstrap\n-   setup.sh\n-   setup\n-   script/setup\n\nNote: Your installation script will be terminated if it exceeds 120 seconds.\n\nMake sure to make your installation script executable with `chmod 755 <install-script-name>.sh` before committing and pushing to your dotfiles repository.\n\nIf there is no install script, your dotfiles will be symlinked into `/home/gitpod`.","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/dotfiles","loc":{"lines":{"from":15,"to":32}}}}],["417",{"pageContent":"## Example\n\n> You can refer this [demo-dotfiles template](https://github.com/gitpod-io/demo-dotfiles) to bring your dotfiles to Gitpod.\n\nThe example below has just one dotfile called `.bash_aliases`. If this file is present in a workspace home directory, it will be found by the '.bashrc' startup script in the Gitpod default image, so no additional install script is required.\n\n**.bash_aliases**\n\n```sh\necho Hello Gitpod\necho Here is my .bash_aliases dotfile\n\nalias gitsha='git rev-parse HEAD'\n```\n\n### Troubleshooting\n\nThe dotfiles repository installation logs are saved to `/home/gitpod/.dotfiles.log` and can be viewed via\n\n```bash\ncat /home/gitpod/.dotfiles.log\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/dotfiles","loc":{"lines":{"from":34,"to":55}}}}],["418",{"pageContent":"## FAQs","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/dotfiles","loc":{"lines":{"from":57,"to":57}}}}],["419",{"pageContent":"### How to debug or test dotfiles changes inside an existing workspace without creating a new one each time?\n\nIf you want to quickly test out dotfiles inside an existing workspace created from your `dotfiles` repository, you can run the below command snippet in your terminal as a workaround:","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/dotfiles","loc":{"lines":{"from":59,"to":61}}}}],["420",{"pageContent":"```bash","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/dotfiles","loc":{"lines":{"from":61,"to":61}}}}],["421",{"pageContent":"gitpod_evars=\"${!GITPOD_*}\" gp_evars=\"${!GP_*}\"; for k in ${gitpod_evars:-} ${gp_evars:-}; do dargs+=(-e \"${k}\"); done; docker run \"${dargs[@]}\" --net=host --rm -v $PWD:/home/gitpod/.dotfiles -v /workspace:/workspace -v /ide:/ide -v /usr/bin/gp:/usr/bin/gp:ro -v /.supervisor:/.supervisor -v /var/run/docker.sock:/var/run/docker.sock --privileged -it gitpod/workspace-full bash -c 'trap \"echo -e \\\"=== Run \\033[1;32mexit\\033[0m command to leave debug workspace\\\"; exec bash -li\" EXIT ERR; echo \"PROMPT_COMMAND=\\\"echo -n \\\\\\\"[debug-workspace] \\\\\\\"; \\$PROMPT_COMMAND\\\"\" >> $HOME/.bashrc; eval \"$(gp env -e)\"; dot_path=\"${HOME}/.dotfiles\"; for s in install setup bootstrap; do if p=\"${dot_path}/${s}\" && test -x \"${p}\" || p=\"${p}.sh\" && test -x \"${p}\"; then set +m; \"$p\"; set -m; exit; fi; done; while read -r file; do rf_path=\"${file#\"${dot_path}\"/}\"; target_file=\"${HOME}/${rf_path}\"; target_dir=\"${target_file%/*}\"; if test ! -d \"$target_dir\"; then mkdir -p \"$target_dir\"; fi; ln -sf \"$file\"","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/dotfiles","loc":{"lines":{"from":72,"to":72}}}}],["422",{"pageContent":"while read -r file; do rf_path=\"${file#\"${dot_path}\"/}\"; target_file=\"${HOME}/${rf_path}\"; target_dir=\"${target_file%/*}\"; if test ! -d \"$target_dir\"; then mkdir -p \"$target_dir\"; fi; ln -sf \"$file\" \"$target_file\"; done < <(find \"${dot_path}\" -type f);'","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/dotfiles","loc":{"lines":{"from":72,"to":72}}}}],["423",{"pageContent":"```\n\nThis will simulate a fake minimal workspace inside your existing Gitpod workspace using `docker`, where your dotfiles will be installed so you can easily test.\n\nFor convenience, you can create a file called `debug.sh` in your dotfiles repository and paste the snippet there. You could then run `bash debug.sh` to use it.","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/dotfiles","loc":{"lines":{"from":73,"to":77}}}}],["424",{"pageContent":"### How to install symlinks from dotfiles when using a [custom installation script](#custom-installation-script)?\n\nWhen you commit a custom script such as `install.sh` in your dotfiles repository, Gitpod will no longer auto symlink your dotfiles under `$HOME` for you. It is by design so that you can have full control of how your dotfiles gets installed. An example of setting up a symlinking step is described below:\n\n-   Create a directory called `home_files` inside your dotfiles repository. You can place your .dotfiles in the `home_files` directory, that means you could put files like `.zshrc`, `.tmux.conf`, `.config/nvim/` and etc. in there.\n-   In your [custom installation script](#custom-installation-script) (e.g. `install.sh`), use/append the below snippet:\n\n```bash\ncurrent_dir=\"$(cd -- \"$( dirname -- \"${BASH_SOURCE[0]}\" )\" &> /dev/null && pwd)\"\ndotfiles_source=\"${current_dir}/home_files\"\n\nwhile read -r file; do","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/dotfiles","loc":{"lines":{"from":79,"to":90}}}}],["425",{"pageContent":"```bash\ncurrent_dir=\"$(cd -- \"$( dirname -- \"${BASH_SOURCE[0]}\" )\" &> /dev/null && pwd)\"\ndotfiles_source=\"${current_dir}/home_files\"\n\nwhile read -r file; do\n\n    relative_file_path=\"${file#\"${dotfiles_source}\"/}\"\n    target_file=\"${HOME}/${relative_file_path}\"\n    target_dir=\"${target_file%/*}\"\n\n    if test ! -d \"${target_dir}\"; then\n        mkdir -p \"${target_dir}\"\n    fi\n\n    printf 'Installing dotfiles symlink %s\\n' \"${target_file}\"\n    ln -sf \"${file}\" \"${target_file}\"\n\ndone < <(find \"${dotfiles_source}\" -type f)\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/dotfiles","loc":{"lines":{"from":90,"to":108}}}}],["426",{"pageContent":"### [It it possible to cache the dotfiles installation?](https://discord.com/channels/816244985187008514/1072003259075657849)\n\n<!-- DISCORD_BOT_FAQ - DO NOT REMOVE -->\n\nIf your dotfiles installation relies on some heavy dependencies, that can take some time to install by nature.\n\nSo, everytime you start a workspace, you may have to wait for the dotfiles installation to complete before you can enter the workspace.\n\nFor some cases, you can start the commands in background from your `install.sh`, by adding `& disown` at the end of a command:\n\n```bash\nsudo apt install qemu-user-static & disown","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/dotfiles","loc":{"lines":{"from":110,"to":121}}}}],["427",{"pageContent":"```\n\nThis is a good workaround, so your workspace can start early and the long-running commands from your dotfiles installation script can happen in parallel.\n\nBut it may not work if you are installing a SHELL (e.g. `zsh`) or a dependency of something else that has to start before your dotfiles can get installed.\n\nSee [#7592](https://github.com/gitpod-io/gitpod/issues/7592) for more info, please upvote and share your feedback on this issue.","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/dotfiles","loc":{"lines":{"from":122,"to":128}}}}],["428",{"pageContent":"---\nsection: user-settings\ntitle: User settings\ndescription: Learn how to configure your personal Gitpod experience. Customize options like SSH keys, browser plugins, and dotfiles.\n---\n\n# User settings\n\nUser settings allow you to customize your own personal Gitpod experience.\n\n-   [Browser Extension](/docs/configure/user-settings/browser-extension)\n-   [Browser Settings](/docs/configure/user-settings/browser-settings)\n-   [Browser Bookmarklet](/docs/configure/user-settings/browser-bookmarklet)\n-   [Dotfiles](/docs/configure/user-settings/dotfiles)\n-   [SSH](/docs/configure/user-settings/ssh)\n-   [Access Tokens](/docs/configure/user-settings/access-tokens)","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings","loc":{"lines":{"from":1,"to":16}}}}],["429",{"pageContent":"---\nsection: user-settings\ntitle: SSH\ndescription: Secure Shell Protocol (SSH) is the basis for connecting to your Gitpod workspace when using VS Code Desktop, JetBrains Gateway, or accessing via CLIs from a local machine.\n---\n\n# SSH\n\nSecure Shell Protocol (SSH) is the basis for connecting to your Gitpod workspace when using [VS Code Desktop](/docs/references/ides-and-editors/vscode), [JetBrains Gateway](/docs/integrations/jetbrains-gateway), or accessing via the [command-line](/docs/references/ides-and-editors/command-line) from a local machine.\n\nSee [command-line](/docs/references/ides-and-editors/command-line) editors & IDEs documentation for more.\n\n`youtube: I4PNCuUeU-I`","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/ssh","loc":{"lines":{"from":1,"to":13}}}}],["430",{"pageContent":"## Manage your SSH Keys","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/ssh","loc":{"lines":{"from":15,"to":15}}}}],["431",{"pageContent":"### Installing a supported SSH client\n\nHow to install a local SSH client depending on your operating system.","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/ssh","loc":{"lines":{"from":17,"to":19}}}}],["432",{"pageContent":"| OS                                        | Instructions                                                                                                                     |\n| ----------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------- |\n| Windows 10 1803+ / Server 2016/2019 1803+ | Install the [Windows OpenSSH Client](https://docs.microsoft.com/windows-server/administration/openssh/openssh_install_firstuse). |\n| Earlier Windows                           | Install [Git for Windows](https://git-scm.com/download/win).                                                                     |\n| macOS                                     | Comes pre-installed.                                                                                                             |","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/ssh","loc":{"lines":{"from":21,"to":25}}}}],["433",{"pageContent":"| macOS                                     | Comes pre-installed.                                                                                                             |\n| Debian / Ubuntu / Mint                    | Run `sudo apt-get install openssh-client`                                                                                        |\n| RHEL / Fedora / CentOS                    | Run `sudo yum install openssh-clients`                                                                                           |\n| Arch / Manjaro                            | Comes pre-installed.                                                                                                             |","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/ssh","loc":{"lines":{"from":25,"to":28}}}}],["434",{"pageContent":"> ❗️ PuTTY for Windows is not a supported client","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/ssh","loc":{"lines":{"from":30,"to":30}}}}],["435",{"pageContent":"### Create an SSH key\n\nCheck to see if you already have an SSH key on your **local** machine. The key is typically located at `~/.ssh/id_ed25519.pub` on macOS / Linux, and the `.ssh` directory in your user profile folder on Windows (for example `C:\\Users\\your-user\\.ssh\\id_ed25519.pub`).\n\nIf you do not have a key, run the following command in a **local** terminal / PowerShell to generate an SSH key pair:\n\n```bash\nssh-keygen -t ed25519\n```\n\nYou will then be prompted to enter a secure passphrase, but you can leave that blank. You should now have a `id_ed25519.pub` file which contains your new public SSH key.\n\n> **Note**: If you are using a legacy system that doesn't support the Ed25519 algorithm, you can use rsa instead: `ssh-keygen -t rsa -b 4096`\n\n> **Tip:** Don't have `ssh-keygen`? Install [a supported SSH client](#installing-a-supported-ssh-client).","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/ssh","loc":{"lines":{"from":32,"to":46}}}}],["436",{"pageContent":"### SSH file and folder permissions\n\n**macOS / Linux:**\n\nOn your local machine, make sure the following permissions are set:\n\n| Folder / File                             | Permissions                       |\n| ----------------------------------------- | --------------------------------- |\n| `.ssh` in your user folder                | `chmod 700 ~/.ssh`                |\n| `.ssh/config` in your user folder         | `chmod 600 ~/.ssh/config`         |\n| `.ssh/id_ed25519.pub` in your user folder | `chmod 600 ~/.ssh/id_ed25519.pub` |\n| Any other key file                        | `chmod 600 /path/to/key/file`     |\n\n**Windows:**\n\nThe specific expected permissions can vary depending on the exact SSH implementation you are using. We recommend using the out of box [Windows 10 OpenSSH Client](https://docs.microsoft.com/windows-server/administration/openssh/openssh_overview).","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/ssh","loc":{"lines":{"from":48,"to":63}}}}],["437",{"pageContent":"In this case, make sure that all of the files in the `.ssh` folder for your remote user on the SSH host is owned by you and no other user has permissions to access it. See the [Windows OpenSSH wiki](https://github.com/PowerShell/Win32-OpenSSH/wiki/Security-protection-of-various-files-in-Win32-OpenSSH) for details.\n\nFor all other clients, consult your client's documentation for what the implementation expects.","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/ssh","loc":{"lines":{"from":65,"to":67}}}}],["438",{"pageContent":"### Upload an SSH key to Gitpod\n\nOnce you've created an SSH key pair, you can upload your public SSH key to Gitpod, by navigating to [gitpod.io/keys](https://gitpod.io/keys) where you can upload one or more public SSH keys.\n\n![SSH page of the Gitpod dashboard](/images/docs/ssh-key-upload-dark-theme.png)\n![SSH page of the Gitpod dashboard](/images/docs/ssh-key-upload-light-theme.png)\n\nPaste your public key, and give your key a memorable title so that you can remember the name of the public key later if you choose to add multiple keys, e.g. \"Gitpod Bastion Host SSH Key\"\n\n![Adding an SSH Key to Gitpod](/images/docs/new-ssh-key-light-theme.png)\n![Adding an SSH Key to Gitpod](/images/docs/new-ssh-key-dark-theme.png)\n\n### Edit an SSH key in Gitpod\n\nGitpod doesn't support editing an SSH key.\n\nTo update an SSH key, delete the key and re-upload the SSH key to Gitpod.","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/ssh","loc":{"lines":{"from":69,"to":85}}}}],["439",{"pageContent":"### Edit an SSH key in Gitpod\n\nGitpod doesn't support editing an SSH key.\n\nTo update an SSH key, delete the key and re-upload the SSH key to Gitpod.\n\n### Delete an SSH key from Gitpod\n\nTo delete an SSH key, click the kebab menu to the right of the SSH key in the dashboard and select \"delete\".\n\n![Deleting an SSH key from Gitpod](/images/docs/delete-ssh-key-light-theme.png)\n![Deleting an SSH key from Gitpod](/images/docs/delete-ssh-key-dark-theme.png)","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/ssh","loc":{"lines":{"from":85,"to":96}}}}],["440",{"pageContent":"## SSH Gateway\n\nSSH Gateway facilitates connection via SSH for direct SSH access using uploaded public keys, and using the workspace owner token. Both the [VS Code Desktop](/docs/references/ides-and-editors/vscode) and [JetBrains](/docs/integrations/jetbrains-gateway) integrations use SSH Gateway to connect to Gitpod workspaces.\n\n### What is SSH Gateway?\n\nSSH Gateway is an intermediary service within Gitpod that proxies incoming SSH requests to the appropriate running workspaces.\n\n![SSH Gateway architecture in Gitpod](/images/ssh-gateway/ssh-gateway-dark-theme.png)\n![SSH Gateway architecture in Gitpod](/images/ssh-gateway/ssh-gateway-light-theme.png)","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/ssh","loc":{"lines":{"from":98,"to":107}}}}],["441",{"pageContent":"### SSH Gateway in Self-Hosted\n\nIf you are running a [Self-Hosted](https://www.gitpod.io/self-hosted) Gitpod installation, you will need to ensure that:\n\n1. The installation has the SSH Gateway component configured and deployed\n2. Your networking and firewalls are configured to allow SSH traffic via port `22`.\n\nSee the [Self-Hosted Reference Architectures](/docs/configure/self-hosted/latest/reference-architecture) for more.\n\n# Troubleshooting\n\n[VS Code Desktop and SSH explained](/blog/vscode-desktop-ssh-updates#diagnosing--fixing-common-ssh-connection-issues) blog has a bunch of good troubleshooting notes, you may check them out.","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/ssh","loc":{"lines":{"from":109,"to":120}}}}],["442",{"pageContent":"## unix_listener: path \"/somewhere/xyz\" too long for Unix domain socket\n\n-   Open your SSH `config` file in a text editor. (i.e. `~/.ssh/config` or `/etc/ssh/ssh_config`[[1](https://www.ssh.com/academy/ssh/config)])\n-   Append the following to it:\n\n```\nHost *.gitpod.io\n     ControlPath /tmp/%r-gitpod\n```\n\n-   Save the file.\n-   Now try connecting via SSH or VS Code Desktop again.","metadata":{"source":"https://www.gitpod.io/docs/configure/user-settings/ssh","loc":{"lines":{"from":122,"to":133}}}}],["443",{"pageContent":"---\nsection: workspaces\ntitle: Collaboration & Sharing of Gitpod workspaces\ndescription: Learn about the different options available for collaborating and sharing Gitpod workspaces with teammates and colleagues. Also learn about Gitpod snapshots, a point-in-time capture of a workspace state.\n---\n\n<script context=\"module\">\n  import IdeToggle from \"$lib/components/docs/ide-toggle.svelte\";\n</script>\n\n# Collaboration & Sharing of Workspaces\n\nThere are currently two ways to share a Gitpod workspace, either by creating a [workspace snapshot](#sharing-snapshots), a \"point in time\" capture of a workspace state that can be then opened by another user. Or, by [sharing a running workspace](#sharing-running-workspaces) which shares access to a single running workspace to multiple users.\n\n`youtube: HcKlXfKpolM`","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/collaboration","loc":{"lines":{"from":1,"to":15}}}}],["444",{"pageContent":"## Workspace Snapshots\n\nSnapshotting a workspace is useful when you want to create reproducible workspace state for reporting support issues, or when giving training, or presentations. You can create up to three snapshots from any workspace.\n\nYou can create a snapshot URL of your workspace to share your workspace files with others. Following a Gitpod snapshot URL starts a new workspace, but under the account of the user who followed that original snapshot URL.\n\nThere are a few important things to note about workspace snapshots:\n\n-   **Snapshots behave like workspace restarts** - All workspace state, including files changed since the original workspace start are preserved in a snapshot. Any tasks or processes typically launched via a workspace start will not run for a workspace snapshot.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/collaboration","loc":{"lines":{"from":17,"to":25}}}}],["445",{"pageContent":"-   **Access to secret information** - Snapshotted workspaces do not grant access to Gitpod environment variables, Gitpod authentication or Git credentials within a snapshot. However, you should use caution that you did not store any secret or private information in any files of a workspace snapshot before generating a snapshot URL.\n\n-   **Deleting and managing snapshots** - If you want to remove any created snapshot URLs, deleting the workspace directly removes any created snapshot URLs associated with that workspace.\n\n-   **Users must have repository access** - Each workspace snapshot creates a new unique URL. Access to a snapshot is based on the access rules on the repository the workspace is based on. This means snapshots based on private repositories can only be opened by those with access to the repository. Public repository snapshots can be accessed without authentication.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/collaboration","loc":{"lines":{"from":27,"to":31}}}}],["446",{"pageContent":"> **Note:** Caution should always be taken when sharing potentially sensitive information, including Gitpod workspace snapshots. If you are concerned you have accidentally shared sensitive information, we suggest you follow best practices such as immediately rotating credentials and adhere to your typical security response process.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/collaboration","loc":{"lines":{"from":33,"to":33}}}}],["447",{"pageContent":"### How To Take a Snapshot URL\n\n<IdeToggle id=\"ide-toggle-ports\">\n\n<div slot=\"jetbrains\">\n\nTo create a snapshot, run \"Gitpod: Share Workspace Snapshot\" from the Backend Control Center, or from the JetBrains IDE search. Once you execute the command, the snapshot is taken and the URL is shown in a dialog.\n\n</div>\n\n<div slot=\"vscodedesktop\">\n\nTo create a snapshot, run \"Gitpod: Share Workspace Snapshot\" from the hamburger menu at the top left of VS Code, from the Gitpod menu at the bottom, or via the VS Code command palette. Once you execute the command, the snapshot is taken and the URL is shown in a dialog.\n\n</div>\n\n<div slot=\"vscodebrowser\">\n\nTo create a snapshot, run \"Gitpod: Share Workspace Snapshot\" from the hamburger menu at the top left of VS Code, from the Gitpod menu at the bottom, or via the VS Code command palette. Once you execute the command, the snapshot is taken and the URL is shown in a dialog.\n\n</div>\n\n<div slot=\"commandline\">","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/collaboration","loc":{"lines":{"from":35,"to":57}}}}],["448",{"pageContent":"</div>\n\n<div slot=\"commandline\">\n\n    You can run `gp snapshot` from any workspace to generate a snapshot URL.\n\n</div>\n\n</IdeToggle>","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/collaboration","loc":{"lines":{"from":57,"to":65}}}}],["449",{"pageContent":"## Sharing Running Workspaces\n\nSharing running workspaces makes it possible to quickly look at a workspace together with a (remote) colleague. It is similar to collaborating on Google Docs, in that you can see who is online and look at the same code and processes.\n\nTo share your workspace, navigate to the workspaces page at https://gitpod.io/workspaces. From there:\n\n1. Move your mouse over the workspace you want to share (change the filter to All if you don't see your workspace).\n1. Click the three dots menu to the right of the highlighted workspace.\n1. Click **Share**\n\nThis marks your workspace as shared. When you open it, you can copy & share its URL.\n\n> **Note:** You can join shared workspaces only by using VS Code Browser. If you prefer to use another editor, please consider using [external collaboration plugins](#external-collaboration-plugins).","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/collaboration","loc":{"lines":{"from":67,"to":79}}}}],["450",{"pageContent":"> **Security note:**\n>\n> Beware, anybody with this URL and a Gitpod account will be able to access the workspace as long as\n> it is shared and running.\n>\n> Every action involving Git in a shared workspace happens on behalf of the workspace owner's account without further authorization. This includes access to secrets used in a shared workspace.\n> It is highly recommended to give workspace URLs only to trusted users and unshare workspaces as soon as sharing them is no longer necessary.\n>\n> **A running Gitpod workspace really is your personal machine.**\n>\n> At present, this feature cannot be disabled. If this is something you are interested in, please [let us know in this issue](https://github.com/gitpod-io/gitpod/issues/6328).","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/collaboration","loc":{"lines":{"from":81,"to":91}}}}],["451",{"pageContent":"## External Collaboration Plugins\n\nWith Gitpod you can also use the following third-party integrations for real-time collaboration:\n\n-   [Code Together](https://www.codetogether.com/) - Works on VS Code Desktop, VS Code Browser, and via JetBrains or Eclipse.\n-   [GitLive](https://git.live/) - Works on VS Code Desktop, VS Code Browser, and via JetBrains.\n-   [Duckly](https://duckly.com/) - Works on VS Code Desktop and VS Code Browser.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/collaboration","loc":{"lines":{"from":93,"to":99}}}}],["452",{"pageContent":"---\nsection: workspaces\ntitle: Workspaces\ndescription: Learn how to configure and manage workspaces in Gitpod. Workspaces are ephemeral development environments that are created on demand and can be shared with others to collaborate.\n---\n\n# Workspaces\n\nGitpod is not simply \"moving your laptop into the cloud\". One key benefit of using a Cloud Development Environment ([CDE](/cde)) is _reproducibility_. When your workspace is configured, opening a new workspace is effortless—allowing you to fully embrace ephemeral development environments.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces","loc":{"lines":{"from":1,"to":9}}}}],["453",{"pageContent":"## Understanding Gitpod configuration\n\n### The gitpod.yml file\n\nThe primary method of configuration is using a YAML file named `.gitpod.yml`, located at the root of your repository. The `gitpod.yml` file defines (for example):\n\n1. The processes to start for your project - e.g. a database or webserver.\n2. Required tools to install before the project starts.\n3. Any editor extensions or IDE plugins to install.\n\nSee the [.gitpod.yml reference](/docs/references/gitpod-yml) page for more.\n\n`youtube: fA2fpqP1xaM`","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces","loc":{"lines":{"from":11,"to":23}}}}],["454",{"pageContent":"### A gitpod.yml example\n\n```yml\nimage: gitpod/workspace-full\n\n# Commands that will run on workspace start\ntasks:\n    - name: Setup, Install & Build\n      before: yarn global add express\n      init: yarn install\n      command: yarn build\n\n# Ports to expose on workspace startup\nports:\n    - port: 3000\n      onOpen: open-preview\n      name: Website\n      description: Website Preview\n```\n\n**Caption:** An example project configured to install, build and run a `yarn` project with a webserver, exposed on port 3000. On start, an in-editor preview of the webserver is opened automatically.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces","loc":{"lines":{"from":25,"to":45}}}}],["455",{"pageContent":"### The workspace image\n\nIn addition to the `gitpod.yml` you can also specify a workspace image for:\n\n1. Application portability\n2. Re-using an existing Dockerfile\n\nCurrently, Gitpod only supports Docker for workspace images. The Dockerfile can either be kept alongside your Gitpod configuration, or you can consume an existing public, or private image.\n\nSee [Workspace Image](/docs/configure/workspaces/workspace-image) for more.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces","loc":{"lines":{"from":47,"to":56}}}}],["456",{"pageContent":"## Creating a Gitpod configuration\n\nYou can create a `.gitpod.yml` manually, or by using the `gp init` command (or `gp init -i` for interactive mode). The `gp` CLI tool is part of the [Gitpod CLI](/docs/references/gitpod-cli), which is included in all Gitpod workspaces by default.\n\n```sh\ngp init\n```\n\nSee the [Gitpod CLI](/docs/references/gitpod-cli) page for more.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces","loc":{"lines":{"from":58,"to":66}}}}],["457",{"pageContent":"## Validate your Gitpod configuration\n\nYou can test your configuration, including your `.gitpod.yml`, without leaving your workspace or committing your changes by using the `gp validate` command. This command opens a workspace (that runs from within your current workspace) which includes your configuration changes. Thus, allowing you to troubleshoot workspace configuration (ports, tasks, etc.) and more.\n\nYou can use the `gp validate` command to test various configuration setups: simple workspace starts (without Prebuilds enabled), workspace starts using a Prebuild, or for debugging Prebuilds themselves. See below for the differences:\n\n| Command                  | Steps ran                     |\n| ------------------------ | ----------------------------- |\n| `gp validate`            | `before` + `init` + `command` |\n| `gp validate --prebuild` | `before` + `init`             |\n\n<!-- | `gp validate --from=\"prebuild\"` | `before` + `command`          | -->","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces","loc":{"lines":{"from":68,"to":79}}}}],["458",{"pageContent":"<!-- | `gp validate --from=\"prebuild\"` | `before` + `command`          | -->\n\n> **Tip:** For improved speed and convenience while updating your workspace configuration, consider starting your workspace using a large [Workspace Class](/docs/configure/workspaces/workspace-classes).","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces","loc":{"lines":{"from":79,"to":81}}}}],["459",{"pageContent":"### Validate a workspace start\n\n1. Run `gp validate` to emit a Workspace URL.\n2. Open the workspace and review your configuration.\n3. Update your configuration in the original workspace, and re-run `gp validate` (if needed).\n\n### Validate a Prebuild\n\nYou can run `gp validate --prebuild` to validate how a prebuild process would look upon completion (this runs `before` and `init` tasks, but not `command` tasks).\n\n1. Run `gp validate --prebuild` - This command will emit a Workspace URL.\n2. Open the workspace to check your configuration.\n3. Update configuration in the original workspace, re-running `gp validate` if needed.\n\n> **Important:** This command runs the workspace _as_ a Prebuild not _from_ a prebuild. Meaning this produces the same environment that is created by a Prebuild process, before a workspace is subsequently started using it.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces","loc":{"lines":{"from":83,"to":97}}}}],["460",{"pageContent":"## Apply configuration changes\n\nTo apply your changes for all subsequent workspaces, commit and push the `gitpod.yml` (and `.gitpod.Dockerfile` if you created one) to the root of your repository.\n\nOpen the commit in a new workspace by either:\n\n1. Prefixing your repo URL with `https://gitpod.io/#`\n    - **For example:** https://gitpod.io/#https://github.com/nodejs/node\n2. Opening a new workspace from the [Gitpod dashboard](https://gitpod.io/dashboard)\n3. Installing, and using the [Gitpod Browser Extension](/docs/configure/user-settings/browser-extension#browser-extension)\n\n> **Important:** You must commit the `.gitpod.yml` to the root of the repository and start a new workspace for changes to apply (a workspace restart is not sufficient).","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces","loc":{"lines":{"from":99,"to":110}}}}],["461",{"pageContent":"## FAQs","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces","loc":{"lines":{"from":112,"to":112}}}}],["462",{"pageContent":"### [Can I use an Android emulator with Gitpod and JetBrains IntelliJ IDEA for Android development?](https://discord.com/channels/816244985187008514/1107341075384897598)\n\nAndroid app development is possible in Gitpod, but you cannot directly run an Android emulator on Gitpod. Check this relevant issue:\n\n-   [gitpod-io/gitpod#1273](https://github.com/gitpod-io/gitpod/issues/1273)\n\nYou have two options:\n\n1. Connect to a physical device with a wirelessly exposed `adb` server. Some guides:\n    - [Connect to a device over Wi-Fi (Android Developer)](https://developer.android.com/tools/adb#connect-to-a-device-over-wi-fi)\n2. Use the exposed `adb` server from a local Android emulator (e.g. from JetBrains Android Studio)\n\nIn both methods, you need to use reverse SSH port forwarding to access the `adb` server inside a Gitpod workspace. For instructions, see:\n\n-   [Port forwarding (Gitpod Documentation)](https://www.gitpod.io/docs/configure/workspaces/ports#port-forwarding)","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces","loc":{"lines":{"from":114,"to":128}}}}],["463",{"pageContent":"-   [Port forwarding (Gitpod Documentation)](https://www.gitpod.io/docs/configure/workspaces/ports#port-forwarding)\n\nYou might also want to use Gitpod with JetBrains IDE locally:\n\n-   [IntelliJ / CLion (Gitpod Documentation)](https://www.gitpod.io/docs/references/ides-and-editors/intellij)\n\nFor Flutter Android development, there is a template available: [gitpod-samples/template-flutter](https://github.com/gitpod-samples/template-flutter)","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces","loc":{"lines":{"from":128,"to":134}}}}],["464",{"pageContent":"### [IP addresses of Gitpod workspace](https://discord.com/channels/816244985187008514/1099925986088333424)\n\n**Q: How can I connect to an Azure SQL instance from a Gitpod.io workspace? Is there a way to get a public IP to whitelist?**\n\nA: Gitpod workspaces do not have dedicated static IPs. However, you can use a proxy server IP and link it with your Gitpod workspaces using Tailscale integration. For more information, refer to [Gitpod's Tailscale Integration documentation](https://www.gitpod.io/docs/integrations/tailscale).","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces","loc":{"lines":{"from":136,"to":140}}}}],["465",{"pageContent":"### [Is it possible to run a Kubernetes cluster in a Gitpod workspace using minikube or kind (or other alternatives)?](https://discord.com/channels/816244985187008514/1094565343038550016)\n\nYou cannot run a Kubernetes cluster directly in a Gitpod workspace using minikube or kind. However, you can run it through QEMU using the following Gitpod template: [template-k3s](https://github.com/gitpod-io/template-k3s). You can also use [template-nixos](https://github.com/gitpod-io/template-nixos).\n\nRelevant GitHub issue: https://github.com/gitpod-io/gitpod/issues/4889","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces","loc":{"lines":{"from":142,"to":146}}}}],["466",{"pageContent":"---\nsection: workspaces\ntitle: Multi-repo\ndescription: Configure Gitpod to clone multiple repositories into a single workspace.\n---\n\n# Multi-repo\n\n> Multi-Repo is currently in [Beta](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/8623).\n\nIf your software project is comprised of multiple source control repositories it is possible to configure Gitpod to clone these additional repositories through the configuration keys of `additionalRepositories` and `mainConfiguration` in the [.gitpod.yml](/docs/references/gitpod-yml) file which removes the need to run multiple workspaces, and makes it easier to configure services which need to be aware of each other.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/multi-repo","loc":{"lines":{"from":1,"to":11}}}}],["467",{"pageContent":"## Cloning additional repositories\n\nThe `additionalRepositories` key is an array of repositories which contains two properties which define the source control `url` to clone and the `checkoutLocation` of where the repository is cloned is under `/workspaces`\n\n```yml\n# example .gitpod.yml from https://github.com/gitpod-io/demo-multi-repo-frontend\nadditionalRepositories:\n    - url: https://github.com/gitpod-io/demo-multi-repo-backend\n      # checkoutLocation is relative to /workspaces\n      checkoutLocation: backend","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/multi-repo","loc":{"lines":{"from":13,"to":22}}}}],["468",{"pageContent":"```\n\nWhen the above configuration is defined then the following additional steps happen when Gitpod workspace is started:\n\n1. If you open a workspace on a branch, Gitpod will clone the same-named branch in all repositories. If such a branch doesn’t exist Gitpod checks out the default branch.\n1. The contents of `https://github.com/gitpod-io/demo-multi-repo-frontend` is cloned to `/workspaces/demo-multi-repo-frontend`\n1. The contents of `https://github.com/gitpod-io/demo-multi-repo-backend` is cloned to `/workspaces/backend`\n\nAfter all of the source control repositories have been cloned then the `before`, `init` and `command` [tasks](https://www.gitpod.io/docs/configure/workspaces/tasks) are executed as per normal. If you need to run commands (such as package installation or compilation) on the source control repositories which have been cloned then change your working directory the `checkoutLocation` location using the `before` task.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/multi-repo","loc":{"lines":{"from":23,"to":31}}}}],["469",{"pageContent":"```yml\n# example .gitpod.yml from https://github.com/gitpod-io/demo-multi-repo-frontend\nadditionalRepositories:\n    - url: https://github.com/gitpod-io/demo-multi-repo-backend\n      checkoutLocation: backend\n\ntasks:\n    - name: backend\n      # change working directory as per configured in `checkoutLocation`\n      # which is configured above as `/workspaces/backend`\n      before: |\n          cd ../backend\n      init: |\n          echo npm install\n      command: |\n          echo npm run dev\n\n      # changing of working directory is not required as these tasks will\n      # by default by executed in `/workspaces/demo-multi-repo-frontend`\n    - name: frontend\n      init: |\n          echo npm install\n          echo npm run build\n      command: |\n          echo npm run dev","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/multi-repo","loc":{"lines":{"from":33,"to":57}}}}],["470",{"pageContent":"```\n\nTry it out at https://github.com/gitpod-io/demo-multi-repo-frontend","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/multi-repo","loc":{"lines":{"from":58,"to":60}}}}],["471",{"pageContent":"## Delegating configuration\n\nThe optional `mainConfiguration` configuration key when configured in additional repositories points to the repository with the main [.gitpod.yml](/docs/references/gitpod-yml) file and makes it possible to open the same workspace from any issue, branch or other context URL from any of the participating repositories. Since the main configuration is used for prebuilds, those will show up under the main project.\n\n```yml\n# example .gitpod.yml from https://github.com/gitpod-io/demo-multi-repo-backend\nmainConfiguration: https://github.com/gitpod-io/demo-multi-repo-frontend\n```\n\nTry it out at https://github.com/gitpod-io/demo-multi-repo-backend","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/multi-repo","loc":{"lines":{"from":62,"to":71}}}}],["472",{"pageContent":"## Adding additional repo folders to VS Code Explorer\n\n![VS Code workspace folders](/images/docs/vscode-workspace-folders.png)\n\nYou might want to see the [`additionalRepositories`](#cloning-additional-repositories) on your VS Code.\n\nTo do so:\n\n1. Create a file called `main.code-workspace` (for example) on your main(e.g. frontend) repository that everyone is expected to open via Gitpod.\n2. Now you can define the folder paths:\n\n```json\n{\n\t// All paths are relative to your main repo\n\t// The additional repos are cloned inside /workspace dir\n\t\"folders\": [\n\t\t{\n\t\t\t\"path\": \".\" // Main repo that you will open in Gitpod (e.g. frontend)\n\t\t},\n\t\t{\n\t\t\t\"path\": \"../backend\" // Additional repo\n\t\t},\n\t\t{\n\t\t\t\"path\": \"../db\" // Additional repo\n\t\t}\n\t]\n}\n```\n\n3. Specify your `.code-workspace` file path on `.gitpod.yml`:\n\n```yml\nworkspaceLocation: frontend/main.code-workspace # Relative to /workspace dir","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/multi-repo","loc":{"lines":{"from":73,"to":105}}}}],["473",{"pageContent":"```\n\n3. Specify your `.code-workspace` file path on `.gitpod.yml`:\n\n```yml\nworkspaceLocation: frontend/main.code-workspace # Relative to /workspace dir\n```\n\n4. [Validate your configuration changes](/docs/configure/workspaces#validate-your-gitpod-configuration) by running `gp validate` in your workspace.\n5. [Apply your .gitpod.yml changes](/docs/configure/workspaces#apply-configuration-changes) by committing and restarting a new workspace.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/multi-repo","loc":{"lines":{"from":105,"to":114}}}}],["474",{"pageContent":"## FAQs","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/multi-repo","loc":{"lines":{"from":116,"to":116}}}}],["475",{"pageContent":"### [Single repo but instances of multiple branches](https://discord.com/channels/816244985187008514/1063202039955476540)\n\n<!-- DISCORD_BOT_FAQ - DO NOT REMOVE -->\n\nIf you want to create multiple instances of one repository with different branches, you could use such a method:\n\n```yml\ntasks:\n    - name: Multi branch\n      before: |\n          # Get primary repo dir path and name\n          main_repo_dir=\"${GITPOD_REPO_ROOT}\"\n          primary_repo_name=\"${main_repo_dir##*/}\"\n\n          # Array for BRANCH name(s).\n          extra_clone_branches=(\n              backend\n              docs\n              next\n          )\n\n          for reference in \"${extra_clone_branches[@]}\"; do {\n              dir=\"${main_repo_dir}-${reference}\"","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/multi-repo","loc":{"lines":{"from":118,"to":140}}}}],["476",{"pageContent":"for reference in \"${extra_clone_branches[@]}\"; do {\n              dir=\"${main_repo_dir}-${reference}\"\n\n              if test ! -e \"${dir}\" && git -C \"${main_repo_dir}\" show-ref --quiet \"refs/heads/${reference}\"; then {\n                printf 'INFO: %s\\n' \"Duplicating ${primary_repo_name} to ${dir} with ${reference} branch\"\n                cp -ra \"${main_repo_dir}\" \"${dir}\"\n                git -C \"${dir}\" checkout \"${reference}\" 2>&1 | grep -v \"Switched to branch '${reference}'\"\n              } fi\n          } done\n\n          # Send signal to awaiting task(s)\n          gp sync-done multi_branch\n\n    - name: Some other task\n      command: |\n          # Wait for multi_branch to avoid race condition\n          gp sync-await multi_branch\n\n          echo hello\n          true 'something'","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/multi-repo","loc":{"lines":{"from":140,"to":159}}}}],["477",{"pageContent":"```\n\nAnd to have such a feature built-in, please react with a \" 👍 \" on this issue: https://github.com/gitpod-io/gitpod/issues/15608","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/multi-repo","loc":{"lines":{"from":160,"to":162}}}}],["478",{"pageContent":"---\nsection: workspaces\ntitle: OpenID Connect\n---\n\n# OpenID Connect (OIDC) in Gitpod\n\nYou can use OIDC authentication to connect Gitpod workspaces to cloud providers or third parties such as: AWS, Azure, GCP, or secret management services like Vault. Use of OIDC integration eliminates the need to manually distribute access credentials, secrets and other key material via other methods such as environment variables.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/oidc","loc":{"lines":{"from":1,"to":8}}}}],["479",{"pageContent":"## What is OIDC?\n\nOpenID Connect (OIDC) is a simple identity layer on top of the [OAuth 2.0 protocol](https://oauth.net/2/), which allows clients to verify identity.\n\nOIDC leverages use of a <abbr title=\"JSON Web Token\">JWT</abbr>, a security token that allows the client to verify the identity of the caller. The token is a JWT that contains claims about the caller. Claims are statements about a caller and can contain information such as a name, email address or repository metadata.\n\nOIDC provides a reliable way to establish a user's identity, including the ability to authenticate them and get their basic profile information. It gives third-party applications a standardized, secure, and scalable method to authenticate and authorize users. When used in combination with Gitpod, it helps in automating the secure access to 3rd-party services that your workspaces might need to interact with.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/oidc","loc":{"lines":{"from":10,"to":16}}}}],["480",{"pageContent":"## Setting up OIDC Authentication with a third party\n\nSetting up OIDC Authentication generally involves three main steps:\n\n1. **Establish Trust**: You first need to register Gitpod with your OIDC-supported third party (like AWS, Google, etc.). This third party then becomes the audience in your JWT token generated in Gitpod.\n\n1. **Setup Trust Rules**: The 3rd party usually allows you to configure what the configuration of the JWT claims must be to exchanged for a valid auth token. Here you can implement fine-grained controls over what access is granted.\n\n1. **Exchange the JWT token**: Once both trust and trust rules have been established with the third party, you can use the JWT tokens generated by the `gp idp token` command to authorize JWT tokens to the third party.\n\n<figure>\n\n![OIDC flow via Gitpod](/images/docs/oidc-flow.png)\n\n<figcaption>\n    Sequence diagram of Authentication via OIDC using AWS with Gitpod\n</figcaption>\n\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/oidc","loc":{"lines":{"from":18,"to":36}}}}],["481",{"pageContent":"## Provider specific guides\n\n-   [AWS](/docs/integrations/aws)\n\n**Read more:**\n\n-   [[Auth0 docs] OpenID Connect Protocol](https://auth0.com/docs/authenticate/protocols/openid-connect-protocol)","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/oidc","loc":{"lines":{"from":38,"to":44}}}}],["482",{"pageContent":"## Gitpod CLI integration\n\nYou can retrieve a JWT token for OIDC using `gp idp`. To retrieve the OIDC token for the current workspace run `gp idp token`.\n\nFor example, to request a new OIDC JWT for `example.org` you'll need to execute `gp idp token --audience example.org`, the output of which you can use to authenticate yourself.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/oidc","loc":{"lines":{"from":46,"to":50}}}}],["483",{"pageContent":"### Example usage\n\n```bash\n$ gp idp token --audience example.org\neyJhbGciOiJSUzI1NiIsImtpZCI6ImlkLTE2ODQ3NTc4MDY...\n```\n\nThe output, when decoded, translates to a JSON object similar to the one below.\n\n```json\n{\n\t\"aud\": [\"example.org\"],\n\t\"auth_time\": 1684777794,\n\t\"azp\": \"example.org\",\n\t\"c_hash\": \"gc_vPbUNoCT0UmXDCdp1sw\",\n\t\"email\": \"kumquat@gitpod.io\",\n\t\"email_verified\": true,\n\t\"exp\": 1684781394,\n\t\"iat\": 1684777794,\n\t\"iss\": \"https://api.gitpod.io/idp\",\n\t\"name\": \"Kumquat The Third\",\n\t\"sub\": \"https://github.com/gitpod-io/website/pull/1\"\n}\n```\n\n> 💡 **Important**: `email_verified` is only true if you are signed in to Gitpod via an SSO provider. If you're only signed in with an <abbr title=\"Source Code Management\">SCM</abbr> authentication provider, this field will be `false`.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/oidc","loc":{"lines":{"from":52,"to":77}}}}],["484",{"pageContent":"---\nsection: workspaces\ntitle: Ports\ndescription: Gitpod supports exposing HTTP ports via a custom domain that is associated with your workspace. You can also use port forwarding, so that you do not need to update your application if it already references the localhost hostname.\n---\n\n<script context=\"module\">\n  import IdeToggle from \"$lib/components/docs/ide-toggle.svelte\";\n  import Action from \"$lib/components/action.svelte\";\n</script>\n\n# Ports","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/ports","loc":{"lines":{"from":1,"to":12}}}}],["485",{"pageContent":"<script context=\"module\">\n  import IdeToggle from \"$lib/components/docs/ide-toggle.svelte\";\n  import Action from \"$lib/components/action.svelte\";\n</script>\n\n# Ports\n\nGitpod supports exposing HTTP ports via a custom domain that is associated with your workspace. You can also use port forwarding, so that you do not need to update your application if it already references the localhost hostname. You can forward all ports using the [local companion](/docs/references/ides-and-editors/local-companion), natively in both [VS Code Desktop](/docs/references/ides-and-editors/vscode), [JetBrains](/docs/integrations/jetbrains-gateway) and also via the [command-line](/docs/references/ides-and-editors/command-line) using SSH.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/ports","loc":{"lines":{"from":12,"to":19}}}}],["486",{"pageContent":"## Default port behaviors\n\nBy default, when a port is opening in a Gitpod workspace, Gitpod will:\n\n1. **Direct HTTP traffic** - When an application starts listening to an HTTP port, Gitpod detects the port and exposes it on a URL that requires authentication. Setting the port to \"public\" would make the port URL accessible to anyone on the internet (or the installed network if using self-hosted Gitpod).\n1. **Notify the user** - Gitpod sends the user a popup notification in their [IDE or editor](/docs/references/ides-and-editors) to let the user know that a port has been detected.\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Setting a port public/private in VS Code Browser\" src=\"/images/editors/port-notification-vscode.png\">\n    <figcaption>Setting a port public/private in VS Code Browser</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/ports","loc":{"lines":{"from":21,"to":31}}}}],["487",{"pageContent":"<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Setting a port public/private in a JetBrains IDE\" src=\"/images/jetbrains-gateway/jetbrains-notification.png\">\n    <figcaption>Setting a port public/private in a JetBrains IDE</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/ports","loc":{"lines":{"from":33,"to":36}}}}],["488",{"pageContent":"## Accessing port URLs\n\nYou can access the dedicated port URL by pre-pending the port number to the workspace URL.\n\ne.g `3000-yourworkspace.ws-eu45.gitpod.io`\n\nYou can also print the port URL using the [gp url](/docs/references/gitpod-cli) command (e.g. `gp url 3000`).\n\nAnd if you prefer listing all open ports URLs at once, use [gp ports list](/docs/references/gitpod-cli) command.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/ports","loc":{"lines":{"from":38,"to":46}}}}],["489",{"pageContent":"## Configuring port behaviors\n\nTo modify or change default port behaviors, update the `ports` section of your [`.gitpod.yml`](/docs/references/gitpod-yml).\n\nAll changes to port behaviors take effect immediately, not requiring a workspace restart.\n\n**Note:** Some actions (e.g. setting a port public/private) can be taken via the IDE or editor.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/ports","loc":{"lines":{"from":48,"to":54}}}}],["490",{"pageContent":"### Configure port opening\n\nThe port open event is triggered when a new port is detected as open within the workspace.\n\nPort opening behavior can only be set via the [`.gitpod.yml`](/docs/references/gitpod-yml)\n\nThe property `onOpen` configures port opening behaviors:\n\n-   `notify` (default) - Show a notification for newly detected ports.\n-   `open-preview` - Open the port URL in a preview within the editor or IDE.\n-   `open-browser` - Open the port URL in a browser tab.\n-   `ignore` - Ignore default behavior (notify).\n\n**Example**: Open a browser tab for port 8080\n\n```yml\nports:\n    - name: Web App\n      description: The main application web server\n      port: 8080\n      onOpen: open-browser\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/ports","loc":{"lines":{"from":56,"to":77}}}}],["491",{"pageContent":"### Specify port names & descriptions\n\nYou can give ports a `name` and a `description` (both optional). These properties will help you to add context about what the port is being used for.\n\n<IdeToggle id=\"ide-toggle-ports\">\n\n<div slot=\"vscodebrowser\">\n    <p>\n        Every exposed port's information and its corresponding actions can be found in the <Action>PORTS</Action> tab inside of VS Code Browser.\n    </p>\n    <figure>\n        <img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"The PORTS tab in VS Code Browser with a single port's actions\" src=\"/images/docs/ports-view-vscode.png\" />\n        <figcaption>The <Action>PORTS</Action> tab in VS Code Browser with a single port's actions</figcaption>\n    </figure>\n</div>","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/ports","loc":{"lines":{"from":79,"to":93}}}}],["492",{"pageContent":"<div slot=\"vscodedesktop\">\n    <p>\n        Every exposed port's information and its corresponding actions can be found in the <Action>EXPOSED PORTS</Action> tab inside of VS Code Desktop.\n    </p>\n    <figure>\n        <img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"The EXPOSED PORTS view in VS Code Desktop with a single port's actions\" src=\"/images/docs/ports-view-vscodedesktop.png\" />\n        <figcaption>The <Action>EXPOSED PORTS</Action> view in VS Code Desktop with a single port's actions</figcaption>\n    </figure>\n</div>","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/ports","loc":{"lines":{"from":95,"to":103}}}}],["493",{"pageContent":"<div slot=\"jetbrains\">\n    <p>\n        You can execute <a href=\"/docs/references/gitpod-cli#list-1\"><code>gp ports list</code></a> in the terminal to output a table-formatted list of ports along with their status, URL, name and description.\n    </p>\n    <figure>\n        <img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Display ports info with the Gitpod CLI\" src=\"/images/docs/ports-with-name-cmd.png\" />\n        <figcaption>Display ports info with the Gitpod CLI</figcaption>\n    </figure>\n</div>","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/ports","loc":{"lines":{"from":105,"to":113}}}}],["494",{"pageContent":"<div slot=\"commandline\">\n    <p>\n        You can execute <a href=\"/docs/references/gitpod-cli#list-1\"><code>gp ports list</code></a> to output a table-formatted list of ports along with their status, URL, name and description.\n    </p>\n    <figure>\n        <img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Display ports info with the Gitpod CLI\" src=\"/images/docs/ports-with-name-cmd.png\" />\n        <figcaption>Display ports info with the Gitpod CLI</figcaption>\n    </figure>\n</div>\n\n</IdeToggle>\n\nThe property `visibility` configures who can access a port:\n\n-   `private` (default) - Only allow users with workspace access to access the port.\n-   `public` - Allows everyone with the port URL to access the port.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/ports","loc":{"lines":{"from":115,"to":130}}}}],["495",{"pageContent":"### Configure port visibility\n\nPort visibility can be set in [`.gitpod.yml`](/docs/references/gitpod-yml), changed via the [Gitpod CLI](/docs/references/gitpod-cli), or manually changed within the IDE or editor.\n\n<IdeToggle id=\"ide-toggle-ports\">\n\n<div slot=\"jetbrains\">\n    <p>Using the <a href=\"/docs/references/gitpod-cli#visibility\">Gitpod CLI with ports visibility</a> in the terminal.</p>\n</div>\n\n<div slot=\"vscodebrowser\">\n    <figure>\n    <img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Setting a port public/private in VS Code Browser\" src=\"/images/editors/toggle-port-visibility-vscode.png\">\n        <figcaption>Setting a port public/private in VS Code Browser</figcaption>\n    </figure>\n</div>\n\n<div slot=\"vscodedesktop\">\n    <p>Using the <a href=\"/docs/references/gitpod-cli#visibility\">Gitpod CLI with ports visibility</a> in the terminal.</p>\n</div>\n\n</IdeToggle>","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/ports","loc":{"lines":{"from":132,"to":153}}}}],["496",{"pageContent":"### Configure port ranges\n\nAll port configurations can be applied to ranges as well as single ports.\n\n**Example:** Prevent notifications for ports between 3000 and 8999.\n\nPorts won't be shown in VS Code's <Action>PORTS</Action> view or in the [Gitpod CLI](/docs/references/gitpod-cli) until they are opened.\n\n```yml\nports:\n    - port: 3000-8999\n      onOpen: ignore\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/ports","loc":{"lines":{"from":155,"to":167}}}}],["497",{"pageContent":"## Ports ordering\n\nPorts are ordered according to their definition in `.gitpod.yml`. Any undefined ports are sorted numerically in ascending order. Port ordering rules apply to all ports views, for example, when using `gp ports list` or viewing ports in VS Code or JetBrains.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/ports","loc":{"lines":{"from":169,"to":171}}}}],["498",{"pageContent":"## Port forwarding\n\nThere are two types of port forwarding: local and remote.\n\nLocal port forwarding allows you to forward a port running in your Gitpod workspace to access via your localhost hostname. Remote port forwarding exposes a locally running process to use in your workspace. Remote port forwarding is not currently supported.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/ports","loc":{"lines":{"from":173,"to":177}}}}],["499",{"pageContent":"### Local port forwarding\n\n<IdeToggle id=\"ide-toggle-ports\">\n\n<div slot=\"jetbrains\">\n    <p>To forward a port in JetBrains, navigate to the preferences page in the <a href=\"/docs/integrations/jetbrains-gateway\">JetBrains Gateway</a> client to select the port and protocol to be forwarded.</p>\n    <figure>\n    <img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Port forwarding in a JetBrains IDE\" src=\"/images/jetbrains-gateway/port-forward-jetbrains.png\">\n        <figcaption>Port forwarding in a JetBrains IDE</figcaption>\n    </figure>\n</div>\n\n<div slot=\"vscodebrowser\">\n    <p>Using the <a href=\"/docs/references/ides-and-editors/local-companion\">Local Companion</a>, you can automatically forward all ports from your workspace to localhost. Setting up port forwarding for VS Code Browser allows you to use a project already configured with <code>localhost</code> without requiring any code changes.</p>\n</div>","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/ports","loc":{"lines":{"from":179,"to":193}}}}],["500",{"pageContent":"<div slot=\"vscodedesktop\">\n    <p>With VS Code Desktop, all ports are automatically forwarded, allowing you to access any forwarded ports on your localhost address. You can also manually forward a port using the ports view.</p>\n\n    <figure>\n    <img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Port forwarding in VS Code Desktop\" src=\"/images/editors/port-forwarding-vscode-desktop.png\">\n        <figcaption>Port forwarding in VS Code Desktop</figcaption>\n    </figure>\n\n</div>\n\n</IdeToggle>","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/ports","loc":{"lines":{"from":195,"to":205}}}}],["501",{"pageContent":"### Local port forwarding via SSH\n\nUsing [SSH command-line](/docs/references/ides-and-editors/command-line) access to your workspace, ports can also be forwarded manually using tools such as the OpenSSH remote login client.\n\n**Example:** Forwarding port `3000` to `localhost:3000`\n\n`ssh -L 3000:localhost:3000 <workspace-ssh-connection>`","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/ports","loc":{"lines":{"from":207,"to":213}}}}],["502",{"pageContent":"### Local reverse port forwarding via SSH\n\nIf you have a port open in your local machine but you want to access it inside Gitpod via SSH, you could do the following:\n\n-   [Copy the SSH command for a workspace](/docs/references/ides-and-editors/command-line#workspace-ssh-approaches).\n-   Paste the SSH command on your **local machine terminal**.\n-   Append `-N -R <port>:localhost:<port>` to the command and press enter, make sure to change the <port>.\n    -   Assuming the port is `5000`, it would look like `-N -R 5000:localhost:5000`.\n\nNow, from your Gitpod workspace, you can access it via `localhost:5000`.\n\n**Example Scenario:**\n\n-   You start a HTTP file server on port 5000 **on your local machine**: `python3 -m http.server 5000`.\n\n-   Start reverse port forwarding from a different terminal **on your local machine** to access it **from your Gitpod workspace**:\n\n```bash\nssh 'some-special-ws-id@gitpod.io' -N -R 5000:localhost:5000","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/ports","loc":{"lines":{"from":215,"to":233}}}}],["503",{"pageContent":"```\n\n-   Now run `curl -L http://localhost:9000` **inside your Gitpod workspace**, which will hit the port 5000 **on your local machine's** HTTP server.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/ports","loc":{"lines":{"from":234,"to":236}}}}],["504",{"pageContent":"### Cross-Origin Resource Sharing (CORS)\n\nIf you start a server on a private port, let's say 5001, and want to connect to it from your web application which runs on a different port, e.g. 3000, you have to configure your requests. This is necessary because Gitpod requires credentials for private ports. Without credentials, Gitpod cannot verify that the request is made by an authorized user.\n\n**Configure your web application**\n\nTo make this work, your web application's `fetch` request needs to have the `credentials: \"include\"` option set. See the [MDN doc's `credentials` description](https://developer.mozilla.org/en-US/docs/Web/API/fetch) for more details.\n\n**Configure your server**\n\nIn your server (the one on port 5001 in the above example), you have to configure the response to include the `Access-Control-Allow-Credentials` header. Without it, your browser rejects the response and you see CORS errors in the browser console.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/ports","loc":{"lines":{"from":238,"to":248}}}}],["505",{"pageContent":"## Port protocols\n\nBy default ports running in the workspace are assumed to be HTTP. You can configure your port to use HTTPS by updating the `.gitpod.yml` or using the `gp ports protocol` command.\n\n> **Note:** Updating your `.gitpod.yml` is the preferred approach to using the `gp` CLI, as the `.gitpod.yml` is declarative and ensures workspaces are created repeatably.\n\n### Configuring the port protocol in `.gitpod.yml`\n\nUpdate the `ports` definition block in `.gitpod.yml` to add the `protocol`.\n\n```yml\nports:\n    - name: Frontend Application\n      port: 3000\n      protocol: https\n```\n\nSee [gitpod.yml](/docs/references/gitpod-yml) for more.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/ports","loc":{"lines":{"from":250,"to":267}}}}],["506",{"pageContent":"### Configuring the protocol with `gp`\n\nDynamically change the protocol of a port using the `gp ports protocol` command.\n\nBy default, ports are set as HTTP.\n\nFor example:\n\n-   `gp ports protocol 3000:https` will change port `3000` to use `https`.\n-   `gp ports protocol 3000:http` will change port `3000` to use `http`.\n\nSee [Gitpod CLI](/docs/references/gitpod-cli) for more.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/ports","loc":{"lines":{"from":269,"to":280}}}}],["507",{"pageContent":"---\nsection: workspaces\ntitle: Workspace classes\ndescription: Learn about the available workspace classes in Gitpod and how to configure your workspaces to use them. You can choose between standard or large workspace classes.\n---\n\n# Workspace classes\n\nWorkspace classes allow you to select the resources available to your workspaces.\n\nOn gitpod.io, the options are:\n\n-   **Standard**: up to 4 cores, up to 8GB RAM, 30GB storage\n-   **Large**: up to 8 cores, up to 16GB RAM, 50GB storage\n\nYou can override the default (Standard) workspace class in the [Gitpod project](/docs/configure/projects) settings for your repository.\n\n![Project Settings](/images/docs/project-settings.png)","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/workspace-classes","loc":{"lines":{"from":1,"to":18}}}}],["508",{"pageContent":"## Select a workspace class for your workspace\n\nYou can select workspace class directly from [Gitpod Dashboard](https://gitpod.io/workspaces). You can do that from by clicking on the `New Workspace` button. Then, you can select the [context url](/docs/introduction/learn-gitpod/context-url) and [Editor](/docs/references/ides-and-editors).\n\n<figure>\n<video onloadstart=\"this.playbackRate = 1.5;\" controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-2xl mt-x-small\" alt=\"Start Gitpod new workspace with options\" src=\"/images/docs/new-workspace-start-with-options.webm\" type=\"video/webm\"></video>\n    <figcaption>Open New Gitpod Workspace with required workspace class • <a href=\"https://gitpod.io/workspaces\">Gitpod Dashboard</a></figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/workspace-classes","loc":{"lines":{"from":20,"to":27}}}}],["509",{"pageContent":"## Good to know\n\n-   Large workspace classes use [credits](/docs/configure/billing#credits) at a faster rate. Standard workspaces use 10 credits per hour, whereas Large workspaces use 20 credits per hour.\n-   [Prebuilds](/docs/configure/projects/prebuilds) currently use the same workspace class as regular workspaces.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/workspace-classes","loc":{"lines":{"from":29,"to":32}}}}],["510",{"pageContent":"## FAQs\n\n### [How to select Large workspace type for extended storage and CPU](https://discord.com/channels/816244985187008514/1061902096389111849)\n\n<!-- DISCORD_BOT_FAQ - DO NOT REMOVE -->\n\nCreate a team [project](/docs/configure/projects) on Gitpod, from the project settings you can select a large workspace.\n\n### [Is it possible to build (android) AOSP source on Gitpod?](https://discord.com/channels/816244985187008514/1055454782908792843)\n\n<!-- DISCORD_BOT_FAQ - DO NOT REMOVE -->\n\nIt is not quite feasible to build an entire AOSP tree right now due to current storage capacity limitations. Please react with a \"👍\" on https://github.com/gitpod-io/gitpod/issues/13950 and comment your requirements.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/workspace-classes","loc":{"lines":{"from":34,"to":46}}}}],["511",{"pageContent":"---\nsection: workspaces\ntitle: Tasks\ndescription: Learn how to automate the setup of your project with Gitpod tasks. This can include installing dependencies or your favorite IDE Extensions/Plugins, compiling code, and starting your development server.\n---\n\n# Tasks\n\n<!--\n  Source for diagrams: https://excalidraw.com/#json=5144082254921728,Kl_Vys0jGocSg6BQ9musNw\n\n  ! If you update the diagrams, make sure you replace the above, immutable URL !\n-->\n\nTo get the most out of ephemeral developer environments, it is important to let Gitpod know how to build your project. We can achieve this by defining `tasks` in the [`.gitpod.yml`](/docs/references/gitpod-yml) configuration file.\n\n> **Note**: In your local developer environment, you likely set up your project only once. If you work in a team, you probably have written instructions on how to get started. With Gitpod, you automate these manual steps so that a new environment can be set up repeatedly by Gitpod.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/tasks","loc":{"lines":{"from":1,"to":17}}}}],["512",{"pageContent":"Tasks are shell scripts that run on top of the Docker image you configure (learn more about [custom Docker images](/docs/configure/workspaces/workspace-image)).\n\n`youtube: E95oV_iqUtI`","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/tasks","loc":{"lines":{"from":19,"to":21}}}}],["513",{"pageContent":"## Execution order\n\nWith Gitpod, you have the following three types of tasks:\n\n-   `before`: Use this for tasks that need to run before `init` and before `command`. For example, customize the terminal or install global project dependencies.\n-   `init`: Use this for heavy-lifting tasks such as downloading dependencies or compiling source code.\n-   `command`: Use this to start your database or development server.\n\nThe order in which these tasks execute depends on whether you have [Prebuilds](/docs/configure/projects/prebuilds) configured for your project and which startup scenario applies. Let's look at the details.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/tasks","loc":{"lines":{"from":23,"to":31}}}}],["514",{"pageContent":"> **Caveats**\n>\n> -   Any file changes made outside of `/workspace` file hierarchy from `init` tasks will be lost on workspace start when prebuilds are enabled. [Learn more](/docs/configure/projects/prebuilds#workspace-directory-only)\n> -   User specific environment variables are not loaded automatically for `init` and `before` tasks but can be loaded if you want. [Learn more](/docs/configure/projects/prebuilds#user-specific-environment-variables-in-prebuilds)","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/tasks","loc":{"lines":{"from":33,"to":36}}}}],["515",{"pageContent":"### Prebuild and New Workspaces\n\nIn this startup scenario, you can see how Prebuilds impact the execution order of tasks:\n\n![Start tasks for Prebuilds & New Workspace](/images/docs/beta/configure/start-tasks/prebuilds-new-workspace-light-theme.png)\n![Start tasks for Prebuilds & New Workspace](/images/docs/beta/configure/start-tasks/prebuilds-new-workspace-dark-theme.png)\n\nThe `init` task is where you want to do the heavy lifting, things like:\n\n-   Download & install dependencies\n-   Compile your source code\n-   Run your test suite\n-   Any other long-running, terminating processes necessary to prepare your project\n\nAs displayed in the diagram above, we highly recommend you enable Prebuilds for your project. In that case, Gitpod executes the `before` and most importantly, `init` tasks automatically for each new commit to your project.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/tasks","loc":{"lines":{"from":38,"to":52}}}}],["516",{"pageContent":"By the time you start a new workspace, all that's left to do is execute the `before` (optional) and `command` tasks. The latter most often starts a database and/or development server.\n\n> Let Gitpod run the time-consuming `init` tasks continuously behind the scene so you and anyone who opens your project on Gitpod doesn't have to wait.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/tasks","loc":{"lines":{"from":54,"to":56}}}}],["517",{"pageContent":"### Restart a Workspace\n\nWhen you restart a workspace, Gitpod already executed the `init` task ([see above](#prebuild-and-new-workspaces)) either as part of a Prebuild or when you started the workspace for the first time.\n\nAs part of a workspace restart, Gitpod executes the `before` and `command` tasks:\n\n![Restart a workspace](/images/docs/beta/configure/start-tasks/restart-workspace-light-theme.png)\n![Restart a workspace](/images/docs/beta/configure/start-tasks/restart-workspace-dark-theme.png)","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/tasks","loc":{"lines":{"from":58,"to":65}}}}],["518",{"pageContent":"### Start a Snapshot\n\nWhen you start a snapshot, Gitpod already executed the `init` task ([see above](#prebuild-and-new-workspaces)) either as part of a Prebuild or when you or a team member started the snapshot's initial workspace for the first time.\n\nAs part of starting a snapshot, Gitpod executes the `before` and `command` tasks:\n\n![Start a snapshot](/images/docs/beta/configure/start-tasks/start-snapshot-light-theme.png)\n![Start a snapshot](/images/docs/beta/configure/start-tasks/start-snapshot-dark-theme.png)","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/tasks","loc":{"lines":{"from":67,"to":74}}}}],["519",{"pageContent":"## Configure the terminal\n\nYou can configure where terminals open using the `openMode` properties below.\nPlease note that this information is used if no previous terminals in the layout exist.\nSnapshots will first try to reuse existing terminals in the layout, before opening new ones.\n\n```yml\ntasks:\n    - name: Static Server\n      command: python3 -m http.server 8080\n    - name: DB Server\n      command: sh ./scripts/start-db.sh\n      openMode: split-right\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/tasks","loc":{"lines":{"from":76,"to":89}}}}],["520",{"pageContent":"### openMode\n\nYou can configure how the terminal should be opened relative to the previous task.\n\n<div class=\"overflow-x-auto\">\n\n| openMode                 | Description                                                |\n| ------------------------ | ---------------------------------------------------------- |\n| `openMode: tab-after`    | Opens in the same tab group right after the previous tab   |\n| `openMode: tab-before`   | Opens in the same tab group left before the previous tab   |\n| `openMode: split-right`  | Splits and adds the terminal to the right                  |\n| `openMode: split-left`   | Splits and adds the terminal to the left                   |\n| `openMode: split-top`    | **Deprecated**. Splits and adds the terminal to the top    |\n| `openMode: split-bottom` | **Deprecated**. Splits and adds the terminal to the bottom |\n\n</div>","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/tasks","loc":{"lines":{"from":91,"to":106}}}}],["521",{"pageContent":"## Example Tasks\n\nThe examples below are common use cases you can get inspired by and adjust for your project's needs.\n\n> **Note**: `before` and `init` tasks need to terminate while `command` can run indefinitely (i.e. until cancelled with Ctrl + C). This is because `before` and `init` may run as part of a prebuild and if these tasks do not terminate, the prebuild will eventually fail with a timeout.\n\n### One-line tasks\n\nEach task contains a single `npm` command. The `init` task terminates once the dependencies are installed while the `command` task starts a development server and does not terminate.\n\n```yml\ntasks:\n    - name: Dev Server\n      init: npm install\n      command: npm run dev\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/tasks","loc":{"lines":{"from":108,"to":123}}}}],["522",{"pageContent":"### Multi-line tasks\n\nTo run multiple commands for a given task, you can use the `|` notation where each line below (make sure you indent correctly) runs in sequence once the previous command terminates.\n\nIn the following example, the `init` task installs dependencies and configures a database. Then, the `command` task starts the dev server(s).\n\n> **Note**: In case of multiple terminals, there is no guarantee on the order in which tasks execute. The only guarantee you have is that `before`, `init` and `command` execute in that sequence **per terminal**.\n\n```yml\ntasks:\n    - name: Dependencies & Database\n      init: |\n          npm install\n          npm run configure-database\n      command: npm run dev\n```\n\n> **Note**: This doesn't stop execution on errors. If `npm install` in the example above fails, the `npm run configure-database` will still run. See [how to exit after failure](#immediately-exit-for-any-command-failure-within-a-task) below for a workaround.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/tasks","loc":{"lines":{"from":125,"to":142}}}}],["523",{"pageContent":"### Wait for commands to complete\n\nWhen working with multiple terminals, you may have a situation where terminal 1 runs build scripts and terminal 2 and 3 require that these scripts complete first. This can be achieved with [`gp sync-await`](/docs/references/gitpod-cli#sync-await) and [`gp sync-done`](/docs/references/gitpod-cli#sync-done).\n\n```yml\ntasks:\n    - name: Rails\n      init: >\n          bundle install &&\n          yarn install --check-files &&\n          rails db:setup &&\n          gp sync-done bundle # 'bundle' is an arbitrary name\n      command: rails server\n\n    - name: Webpack\n      init: gp sync-await bundle # wait for the above 'init' to finish\n      command: bin/webpack-dev-server\n\n    - name: Redis\n      init: gp sync-await bundle\n      command: redis-server\n\n    - name: Sidekiq\n      init: gp sync-await bundle\n      command: sidekiq\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/tasks","loc":{"lines":{"from":144,"to":169}}}}],["524",{"pageContent":"### Wait for a port to be available\n\nLet's say you have a web app dev server that takes a moment to start up to listen on port 3000. Once it's up and running, you want to run end-to-end tests against `http://localhost:3000`.\n\nYou can achieve this with two terminals and the `gp ports await` CLI command.\n\n```yml\ntasks:\n    - name: Dev Server\n      init: npm install\n      command: npm run dev\n\n    - name: e2e Tests\n      command: |\n          gp ports await 3000\n          npm run test\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/tasks","loc":{"lines":{"from":171,"to":187}}}}],["525",{"pageContent":"### Immediately exit for any command failure within a task\n\nIf you wish to halt an entire task with for an error within the task script, then you could do the following:\n\n```yml\ntasks:\n    - init: |\n          (\n            set -e # Tells bash to immediately exit on failure off a command\n            bundle install\n            yarn install --frozen-lockfile\n            bundle exec rake\n            bundle exec nanoc compile\n          )","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/tasks","loc":{"lines":{"from":189,"to":202}}}}],["526",{"pageContent":"```\n\nGitpod starts all your `tasks` inside separate `bash` (`$SHELL`) shells. Gitpod can only assert the exit status of the shell process of a task. Normally `bash` or other shells don't halt on a failure of a command unless you explicitly ask it to. `bash` only inherits the last exit status of a script run with it before it's own `exit`. Hence Gitpod can't determine if all of your commands inside the `init` task succeeded. To have that effect, you can put `set -e;` on top of task shell-commands and wrap your whole task-script with `()` to configure that particular task shell to halt and immediately exit with an error code for a failure of any command. This can be specially helpful for prebuilds (i.e `init` tasks)","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/tasks","loc":{"lines":{"from":203,"to":205}}}}],["527",{"pageContent":"### Missing examples?\n\nWe'd love to hear from you if you have specific questions or ideas for additional examples. Please click the following link to open a pre-configured GitHub issue: [Ask for a new Start Task example](https://github.com/gitpod-io/website/issues/new?title=[Start+Task+Example]&labels=documentation).","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/tasks","loc":{"lines":{"from":207,"to":209}}}}],["528",{"pageContent":"---\nsection: workspaces\ntitle: Workspace Image\ndescription: Learn how to use different workspaces images available in Gitpod. The workspace image defines the base environment from which your workspaces are created. Or, you can create and use your own custom workspace images.\n---\n\n# Workspace Image\n\nBy default, Gitpod uses a standard Docker Image called [`Workspace-Full`](https://github.com/gitpod-io/workspace-images/blob/481f7600b725e0ab507fbf8377641a562a475625/dazzle.yaml#L18) as the foundation for workspaces. Workspaces started based on this default image come pre-installed with Docker, Nix, Go, Java, Node.js, C/C++, Python, Ruby, Rust, Clojure as well as tools such as Homebrew, Tailscale, Nginx and several more.\n\nIf this image does not include the tools you need for your project, you can provide a public Docker image or your own [Dockerfile](#configure-a-custom-dockerfile). This provides you with the flexibility to install the tools & libraries required for your project.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/workspace-image","loc":{"lines":{"from":1,"to":11}}}}],["529",{"pageContent":"> **Note:** Gitpod supports Debian/Ubuntu based Docker images out-of-the-box. Some base images like Alpine do not include [libgcc and libstdc++](https://code.visualstudio.com/docs/remote/linux#_tips-by-linux-distribution) by default, which breaks Visual Studio Code. See a [reference Alpine base image](#alpine) and [issue #3356](https://github.com/gitpod-io/gitpod/issues/3356).","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/workspace-image","loc":{"lines":{"from":13,"to":13}}}}],["530",{"pageContent":"## Configuring a Workspace Image\n\n### Use a public Docker image\n\nYou can define a public Docker image in your `.gitpod.yml` file with the following configuration:\n\n```yml\nimage: node:buster\n```\n\nThe official Gitpod Docker images are hosted on <a href=\"https://hub.docker.com/u/gitpod/\" target=\"_blank\">Docker Hub</a>.\n\nYou can find the source code for these images in <a href=\"https://github.com/gitpod-io/workspace-images/\" target=\"_blank\">this GitHub repository</a>.\n\n**Docker image tags**\n\nFor public images, feel free to specify a tag, e.g. `image: node:buster` if you are interested in a particular version of the Docker image.\n\nFor Gitpod images, we recommend using timestamped tag for maximum reproducibility, for example `image: gitpod/workspace-full:2022-05-08-14-31-53` (taken from the `Tags` panel on [this dockerhub page](https://hub.docker.com/r/gitpod/workspace-full/tags) for example)","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/workspace-image","loc":{"lines":{"from":15,"to":33}}}}],["531",{"pageContent":"### Use a private Docker image\n\n> This is currently in [Alpha](/docs/help/public-roadmap/release-cycle).\n\n`youtube: mH3wihkVVaE`\n\nYou may also use private Docker images.\n\nTo do so you must provide the registry authentication details to Gitpod by setting `GITPOD_IMAGE_AUTH` with the following value `<registry-domain>:<base64-encoded 'username:password'>` as a [Project-level environment variable](/docs/configure/projects/environment-variables#project-specific-environment-variables).\n\nFor example, if the registry is `registry.hub.docker.com`, the username is `foo` and the password is `bar`, the `GITPOD_IMAGE_AUTH` environment variable value may be calculated using the command `echo -n \"registry.hub.docker.com:\"; echo -n \"foo:bar\" | base64 -w0` which outputs `registry.hub.docker.com:Zm9vOmJhcg==`.\n\nLater you should be able to use the following in your `.gitpod.yml`:\n\n```yaml\nimage: registry.hub.docker.com/your_username/image\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/workspace-image","loc":{"lines":{"from":35,"to":51}}}}],["532",{"pageContent":"### Using a custom Dockerfile\n\nThis option provides you with the most flexibility. Start by adding the following configuration in your `.gitpod.yml` file:\n\n```yml\nimage:\n    file: .gitpod.Dockerfile\n```\n\nNext, create a `.gitpod.Dockerfile` file at the root of your project. The syntax is the regular `Dockerfile` syntax as <a href=\"https://docs.docker.com/engine/reference/builder/\" target=\"_blank\">documented on docs.docker.com</a>.\n\nA good starting point for creating a custom `.gitpod.Dockerfile` is the\n<a href=\"https://github.com/gitpod-io/workspace-images/blob/481f7600b725e0ab507fbf8377641a562a475625/dazzle.yaml#L18\" target=\"_blank\">gitpod/workspace-full</a> image as it already contains all the tools necessary to work with all languages Gitpod supports.\n\n```dockerfile\n# You can find the new timestamped tags here: https://hub.docker.com/r/gitpod/workspace-full/tags\nFROM gitpod/workspace-full:2022-05-08-14-31-53\n\n# Install custom tools, runtime, etc.\nRUN brew install fzf","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/workspace-image","loc":{"lines":{"from":53,"to":72}}}}],["533",{"pageContent":"```\n\n> ⚠️ **Caveat:** > `COPY` instructions in a Dockerfile is only evaluated once and then cached.\n> [See this](#manually-rebuild-a-workspace-image) to break the cache and trigger a rebuild.\n\n> ⚠️ **Caveat:** The base image of a custom Dockerfile must be public.\n\n**Docker support**: If you use the `gitpod/workspace-full` image, you get Docker support built-in to your environment.\n\nIf you want a base image without the default tooling installed then use the <a href=\"https://github.com/gitpod-io/workspace-images/blob/481f7600b725e0ab507fbf8377641a562a475625/dazzle.yaml#L3\" target=\"_blank\">gitpod/workspace-base</a> image.\n\n```dockerfile\n# You can find the new timestamped tags here: https://hub.docker.com/r/gitpod/workspace-base/tags\nFROM gitpod/workspace-base:2022-05-08-14-31-53","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/workspace-image","loc":{"lines":{"from":73,"to":86}}}}],["534",{"pageContent":"```dockerfile\n# You can find the new timestamped tags here: https://hub.docker.com/r/gitpod/workspace-base/tags\nFROM gitpod/workspace-base:2022-05-08-14-31-53\n\n# Install custom tools, runtime, etc.\n# base image only got `apt` as the package manager\n# install-packages is a wrapper for `apt` that helps skip a few commands in the docker env.\nRUN sudo install-packages shellcheck tree llvm","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/workspace-image","loc":{"lines":{"from":86,"to":93}}}}],["535",{"pageContent":"```\n\nWhen you launch a Gitpod workspace, the local console will use the `gitpod` user, so all local settings, config file, etc. should apply to `/home/gitpod` or be run using `USER gitpod` (we no longer recommend using `USER root`).\n\nYou can however use `sudo` in your Dockerfile. The following example shows a typical `.gitpod.Dockerfile` inheriting from `gitpod/workspace-full`:\n\n```dockerfile\n# You can find the new timestamped tags here: https://hub.docker.com/r/gitpod/workspace-full/tags\nFROM gitpod/workspace-full:2022-05-08-14-31-53\n\n# Install custom tools, runtime, etc.\n# install-packages is a wrapper for `apt` that helps skip a few commands in the docker env.\nRUN sudo install-packages \\\n          binwalk \\\n          clang \\\n          tmux\n\n# Apply user-specific settings","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/workspace-image","loc":{"lines":{"from":94,"to":111}}}}],["536",{"pageContent":"```\n\nOnce committed and pushed, Gitpod will automatically build this Dockerfile when (or [before](/docs/configure/projects/prebuilds)) new workspaces are created.\n\nSee also [Gero's blog post](/blog/docker-in-gitpod) running through an example.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/workspace-image","loc":{"lines":{"from":112,"to":116}}}}],["537",{"pageContent":"### Custom base image\n\nWhile it is recommended to extend one of the <a href=\"https://hub.docker.com/u/gitpod/\" target=\"_blank\">Gitpod-provided base images</a> for custom Dockerfiles to ensure the image has the required dependencies for a workspace, it is possible to configure a Dockerfile with a public (Debian/Ubuntu-based) image as its base.\n\nThere are some requirements for a public base image to work properly as a workspace. For example, you'll need to set up the `gitpod` user with the right UID, and install `git` to ensure your workspace can start. See the below Dockerfiles as a reference.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/workspace-image","loc":{"lines":{"from":118,"to":122}}}}],["538",{"pageContent":"#### Ubuntu\n\n```dockerfile\nFROM ubuntu:latest\n\n# Install:\n# - git (and git-lfs), for git operations (to e.g. push your work).\n#   Also required for setting up your configured dotfiles in the workspace.\n# - sudo, while not required, is recommended to be installed, since the\n#   workspace user (`gitpod`) is non-root and won't be able to install\n#   and use `sudo` to install any other tools in a live workspace.\nRUN apt-get update && apt-get install -yq \\\n    git \\\n    git-lfs \\\n    sudo \\\n    && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/*\n\n# Create the gitpod user. UID must be 33333.\nRUN useradd -l -u 33333 -G sudo -md /home/gitpod -s /bin/bash -p gitpod gitpod\n\nUSER gitpod\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/workspace-image","loc":{"lines":{"from":124,"to":145}}}}],["539",{"pageContent":"#### Alpine\n\n```dockerfile\nFROM alpine:3.18.2\n\nRUN apk add --no-cache \\\n        # Needed for Gitpod compatibility:\n        git\\\n        # git-lfs \\ # uncomment if needed\n        bash \\\n        sudo  \\\n        docker \\\n        iptables\\\n        # Needed for VSCode compatibility:\n        libgcc \\\n        gcompat \\\n        libstdc++\\\n\n    # Add gitpod user\n    && echo '%gitpod ALL=(ALL) NOPASSWD: ALL' > /etc/sudoers.d/gitpod \\\n    && addgroup -g 33333 gitpod && adduser -u 33333 -G gitpod -h /home/gitpod -s /bin/bash -D gitpod","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/workspace-image","loc":{"lines":{"from":147,"to":167}}}}],["540",{"pageContent":"```\n\n**Additional tools & languages:** see https://github.com/gitpod-io/workspace-images/tree/main/chunks for references to configure your workspace image with common tools and languages. For instance, [this Dockerfile](https://github.com/gitpod-io/workspace-images/blob/main/chunks/tool-docker/Dockerfile) shows how to install `docker` and `docker-compose`.\n\n**Tailscale:** see [the Tailscale integration docs](/docs/integrations/tailscale#integration) for setting up Tailscale in a custom Dockerfile.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/workspace-image","loc":{"lines":{"from":168,"to":172}}}}],["541",{"pageContent":"## Validate and apply a workspace image\n\nTo validate your workspace image is working execute the `gp validate` command from within the workspace with your configuration changes. For the configuration change to apply for all new workspaces you must commit and push your configuration to source control.\n\nFor a full guide, see [Configuring Workspaces](/docs/configure/workspaces).\n\n## Manually rebuild a workspace image\n\nIf you want to force a rebuild of the image associated with a repository,\n\nSometimes you find yourself in situations where you want to manually rebuild a workspace image, for example if packages you rely on released a security fix.\n\nYou can trigger a workspace image rebuild with the following URL pattern: `https://gitpod.io/#imagebuild/<your-repo-url>`.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/workspace-image","loc":{"lines":{"from":174,"to":186}}}}],["542",{"pageContent":"## Configure a custom shell\n\n> **Feedback needed**: Custom shell support is in the works. The below shows a method for running some of the `~/.bashrc.d` startup scripts. To leave feedback on the approach, please see this GitHub issue: [#10105](https://github.com/gitpod-io/gitpod/issues/10105).\n\nFor example, if you wish to default your workspace-image to `zsh`, you could do it from your [custom dockerfile](#custom-docker-image) with the following line:\n\n```dockerfile\nENV SHELL=/usr/bin/zsh\n```\n\nTip: You could also create an environment variable at https://gitpod.io/variables called `SHELL` with `*/*` scope for setting a personal default SHELL.\n\nCaveat: Shells like `fish`, `zsh` and etc. are not POSIX-compliant or bash-compatible, so your Gitpod tasks might error if you use some POSIX or bash specific features in your task scripts.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/workspace-image","loc":{"lines":{"from":188,"to":200}}}}],["543",{"pageContent":"### Load bash environment in custom shell\n\nCurrently we put some startup scripts for the workspace-images at `~/.bashrc.d`, that means if you change your SHELL from `bash` to something else, they will not auto run. You could run the following command from your SHELL to workaround:\n\n```bash\nbash -lic 'true'\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/workspace-image","loc":{"lines":{"from":202,"to":208}}}}],["544",{"pageContent":"## FAQs","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/workspace-image","loc":{"lines":{"from":210,"to":210}}}}],["545",{"pageContent":"### [Why is my custom dockerfile rebuilding everytime even with no change made to it?](https://discord.com/channels/816244985187008514/1069452552111923280)\n\n<!-- DISCORD_BOT_FAQ - DO NOT REMOVE -->\n\nThis usually happens when you don't pin the image tag (AKA version) inside your [custom dockerfile](#use-a-custom-dockerfile).\n\nIn such cases, it could be that there has been long gaps between the time you reuse a workspace or create a new one. We usually release new images every week so if there was more than one week between each start then the image will be rebuild every time.\n\nSo, for example, if your `.gitpod.Dockerfile` looks like the following:\n\n```dockerfile\nFROM gitpod/workspace-full:latest\n\n# ... more stuff\n```\n\nYou could grab a timestamped tag from [here](https://hub.docker.com/r/gitpod/workspace-full/tags) for `gitpod/workspace-full`.\n\nAnd then your `.gitpod.Dockerfile` could look like:\n\n```dockerfile\nFROM gitpod/workspace-full:2023-01-16-03-31-28\n\n# ... more stuff","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/workspace-image","loc":{"lines":{"from":212,"to":235}}}}],["546",{"pageContent":"```\n\nNote: Please grab a recent tag from the linked page, don't copy paste the example from here.\n\nAlso see [docker-image-tags](#docker-image-tags) for more info.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/workspace-image","loc":{"lines":{"from":236,"to":240}}}}],["547",{"pageContent":"### [How to run a Desktop app for GUI development inside a Gitpod workspace](https://discord.com/channels/816244985187008514/1069538137572909106)\n\n<!-- DISCORD_BOT_FAQ - DO NOT REMOVE -->\n\nIf you wish to do GUI application development in Gitpod and getting errors such as:\n\n-   Unable to init server: Could not connect : Connection refused\n-   No display server running\n-   Xorg missing\n-   `xdg-open` command not found\n\nThen you need to use the `gitpod/workspace-full-vnc` docker image. See [this page](https://github.com/gitpod-io/workspace-images/blob/axonasif/add_docs/chunks/tool-vnc/README.md#details) for more info.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/workspace-image","loc":{"lines":{"from":242,"to":253}}}}],["548",{"pageContent":"---\nsection: workspaces\ntitle: Workspace Lifecycle\ndescription: Gitpod brings a new way to think about your development environment. Rather than a single local environment that you keep up-to-date, with Gitpod you can have as many workspaces as you need. This page describes the lifecycle of a Gitpod workspace.\n---\n\n# Workspace Lifecycle\n\nGitpod brings a new way to think about your development environment. Rather than a single local environment that you keep up-to-date, with Gitpod you can have as many [workspaces](/docs/configure/workspaces) as you need.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/workspace-lifecycle","loc":{"lines":{"from":1,"to":9}}}}],["549",{"pageContent":"## Workspace Statuses\n\nThe state of the workspace is indicated by the color of the workspace indicator. For example, in the Gitpod [dashboard](https://gitpod.io/workspaces), workspace state is shown on the workspace list.\n\n1. 🟠 **Starting** - Workspace provisioning, inaccessible to the user.\n2. 🟢 **Running** - Workspace loaded, accessible to the user.\n3. 🟠 **Stopping** - Workspace being stopped, backups performing.\n4. 🔴 **Stopped** - Workspace no longer accessible. File system preserved for restart.\n\n> **Important:**\n>\n> -   Only files in the `/workspace` directory are kept between state transitions.\n> -   Any changes made to `/workspace` from a [custom Dockerfile](/docs/configure/workspaces/workspace-image#use-a-custom-dockerfile) will be overwritten/overlaid by a mount.\n\nThe following describes each workspace status in detail, including what can cause a workspace to transition from one status to another.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/workspace-lifecycle","loc":{"lines":{"from":11,"to":25}}}}],["550",{"pageContent":"### Workspace Starting\n\nWhen you open a workspace, it will be in the \"starting\" state. This means that the workspace is being created and the initialization process is running.\n\n-   Where a workspace is being provisioned and initialized.\n-   If configured and available, a prebuild snapshot is used.\n-   Otherwise, source control is downloaded into the workspace.\n\n### Workspace Running\n\n-   An active workspace is provisioned within Gitpod.\n-   The workspace can be accessed by the user.\n\n### Workspace Stopped\n\n-   No provisioned workspace is running (e.g. ports and URLs are not accessible).\n-   Only files and directories inside `/workspace` are preserved.\n-   If the workspace is restarted, the URL is preserved.\n-   A start is required before the workspace can be used.\n\n### Workspace Deleted\n\nWorkspaces are deleted after 14 days. Pinned workspaces are never deleted automatically.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/workspace-lifecycle","loc":{"lines":{"from":27,"to":49}}}}],["551",{"pageContent":"## Workspace Actions\n\n### Workspace Pinning\n\nA pinned workspace is never deleted. You can pin a workspace from your [workspace list](https://gitpod.io/workspaces/) in the Gitpod dashboard.\n\n### Workspace Snapshotting\n\nYou can create a snapshot of a workspace to save its state. This is useful if you want to keep a workspace around for a longer period of time, than the default. Read more about [Snapshots](/docs/configure/workspaces/collaboration).\n\n## Workspace Deletion\n\nStopped workspaces are automatically deleted 14 days since the last workspace start. Pinned workspaces are never deleted. You can pin a workspace from your [workspace list](https://gitpod.io/workspaces/) in the Gitpod dashboard.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/workspace-lifecycle","loc":{"lines":{"from":51,"to":63}}}}],["552",{"pageContent":"## Workspace Timeouts\n\nRunning workspaces stop automatically after a period of inactivity.\n\n### Workspace Inactivity\n\nBy default, workspaces stop following 30 minutes without user input (e.g. keystrokes or terminal input commands). You can increase the workspace timeout up to a maximum of 24 hours.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/workspace-lifecycle","loc":{"lines":{"from":65,"to":71}}}}],["553",{"pageContent":"### Extend Inactivity Timeouts\n\n> Free plan users cannot update their default workspace inactivity timeout (see [pricing](https://www.gitpod.io/pricing)).\n\n**Current workspace** - You can extend the inactivity timeout of their current workspace using the `gp timeout set` command from the [Gitpod CLI](/docs/references/gitpod-cli) (installed in all gitpod workspaces by default), through the Command Palette in VS Code, or the Backend Control Center in JetBrains Gateway. Extending the workspace inactivity timeout only applies to the currently running workspace.\n\n**Default** - You can set a default workspace inactivity timeout for all new workspaces opened via the [preferences page](https://gitpod.io/preferences). The timeout default cannot currently be set by an organization owner.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/workspace-lifecycle","loc":{"lines":{"from":73,"to":79}}}}],["554",{"pageContent":"### Workspace lifetime\n\nWorkspace have a maximum lifetime. This means that workspaces will be shut down after this period even if the inactivity timeout has not been reached yet. Currently the lifetime of a workspace if you are a free plan user is 8 hours and 36 hours if you are on a paid plan.\n\n### Editor or IDE Disconnect\n\nAll inactivity timeouts are dependent on an active editor or IDE connection. Closing your Gitpod connected editor or IDE will reduce the workspace timeout to 5 minutes unless an explicit workspace inactivity timeout is set via user preference, or via the Gitpod CLI.","metadata":{"source":"https://www.gitpod.io/docs/configure/workspaces/workspace-lifecycle","loc":{"lines":{"from":81,"to":87}}}}],["555",{"pageContent":"---\nsection: background\ntitle: Data and Observability - Gitpod Dedicated docs\n---\n\n# Data and Observability\n\n## Data\n\nGitpod Dedicated creates and uses different data stores for different purposes within the AWS account it is deployed into. These are as follows:\n\n-   A **Relational Database (RDS)** is used to store user information and some tokens and as such contains sensitive data.\n-   **S3** is used to store workspace backups. These can include sensitive data.\n-   **SSM** is used to store system information","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/background/data-observability","loc":{"lines":{"from":1,"to":14}}}}],["556",{"pageContent":"## Observability\n\n> ℹ️ This is an overview of the design of Gitpod Dedicated’s observability architecture - in other words, how data that is required to operate, maintain, and improve Gitpod Dedicated instances is exported from individual instances in a way that ensures confidentiality and privacy.\n\n![Gitpod Dedicated Deployment overview](/images/docs/gitpod-dedicated/background/data-observability/extract-data-from-cells.webp)","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/background/data-observability","loc":{"lines":{"from":16,"to":20}}}}],["557",{"pageContent":"### Architecture\n\nThe exact details of how the data leaves the instance depend on the data type; however, the high-level approach is the same: The data is sent to a component in the instance that sanitizes the data (i.e., removes any business-critical or potentially personal information such as repo names, company names, user names, etc.). This component subsequently sends the data to a Firehose Delivery Stream in the AWS account through a VPC endpoint. The Delivery Stream sends the data to an S3 bucket (one s3 bucket per instance) in Gitpod’s AWS account/control plane. The S3 bucket has a short retention (maximum of 7 days). Gitpod employees can access the data ad-hoc when debugging issues. A few select metrics are forwarded to a third-party service to enable alerting. Product analytics data is sent to a data warehouse. Customers can _optionally_ get read-only access to the S3 bucket to provide visibility into the exported data.","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/background/data-observability","loc":{"lines":{"from":22,"to":24}}}}],["558",{"pageContent":"### Data Types and Retention\n\n-   **Metrics:** used for alerting and monitoring purposes\n\n    -   Retention: 7 days, select metrics that are used for alerting are retained for 13 months in a third party system\n\n-   **Logs**: used for debugging purposes\n\n    -   Retention: by default, no retention. In case logs are exported, they are retained for 1 day\n\n    > ❗ Logs are only exported _on demand_, i.e. if there is a need to debug something. In other cases, logs are not exported.","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/background/data-observability","loc":{"lines":{"from":26,"to":36}}}}],["559",{"pageContent":"> ❗ Logs are only exported _on demand_, i.e. if there is a need to debug something. In other cases, logs are not exported.\n\n-   **Kubernetes state: [used](https://www.notion.so/69714aa12c634aeb9a7a0c43e8c31aa2?pvs=21)** for debugging purposes (no secrets or config maps are exported)\n    -   Retention: 1 day\n-   **Product Analytics Events:** used for product improvement purposes (note that these are sanitised to not expose any potentially confidential information like repository names). Only a select set of events is exported.\n    -   Retention: In S3, 1 Day. Further, Product analytics events are forwarded to a third-party Data Warehouse where they are retained for 12+ months\n-   **Billing Data**: used to track usage for billing purposes\n    -   Retention: Billing data is forwarded to a third-party Data Warehouse where is retained for 100 years.","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/background/data-observability","loc":{"lines":{"from":36,"to":43}}}}],["560",{"pageContent":"## Observability Data Sanitisation\n\nThe data shared is purely for operational and product improvement purposes. To minimize the risk of any PII or confidential information leaking, efforts are in place to avoid sending such data in the first pace as well as to feed back any learnings into improving these efforts. The following diagram shows an overview of the data sanitisation mechanisms in place:\n\n![Gitpod Dedicated Deployment overview](/images/docs/gitpod-dedicated/background/data-observability/observability-architecture.webp)\n\n### Logs\n\nWhen logs are sent out (see above), logs are sanitised at the collector level. When logs are collected, they are screened for any potential PII or sensitive data. For example, strings containing information like emails and IP addresses are identified and redacted. This happens before the data is sent through the firehose to the S3 bucket in Gitpod’s AWS account.","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/background/data-observability","loc":{"lines":{"from":45,"to":53}}}}],["561",{"pageContent":"### Metrics, Product Analytics, Kubernetes State and Billing Data\n\nMetrics, product analytics, Kubernetes State and billing data types are sanitised at the telemetry exporter level, where a library is used to scan for and remove that scans for PII and sensitive data. The telemetry exporter is a component that is used to forward data out of the instance.","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/background/data-observability","loc":{"lines":{"from":55,"to":57}}}}],["562",{"pageContent":"### Feedback Cycles\n\nSanitising data is not a one-off task. It requires a continuous, self-improving system. As such several feedback loops are in place to improve the system:","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/background/data-observability","loc":{"lines":{"from":59,"to":61}}}}],["563",{"pageContent":"-   At the collector and telemetry exporter level: Any sensitive data that is filtered is registered and leads to changes in the source code in order to avoid writing out this data in the first place.\n-   In the S3 bucket: Gitpod operates a third party sensitive data discovery tool ([AWS Macie](https://aws.amazon.com/macie/)) on the S3 bucket containing the telemetry data of the Gitpod Dedicated instance used by Gitpod day to day. This helps screen for any PII or confidential information that might have made it’s way out of an instance bypassing the sanitisation mechanisms mentioned above. The data is deleted, and the source code changed to avoid sending this data in the first place.","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/background/data-observability","loc":{"lines":{"from":63,"to":64}}}}],["564",{"pageContent":"-   Customer level: Customers are also able to see the contents of the data that has been exported out of their instance (see [Accessing data exported from your instance](/docs/gitpod-dedicated/guides/accessing-data-exported-from-your-instance) ). In case they find any PII or sensitive data, they can raise this with their account manager. The account manager will raise a security incident, and the data will be deleted and measures will be taken to avoid writing out the data in the future. This escalation process is also described in [Accessing data exported from your instance](/docs/gitpod-dedicated/guides/accessing-data-exported-from-your-instance).","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/background/data-observability","loc":{"lines":{"from":65,"to":65}}}}],["565",{"pageContent":"---\nsection: background\ntitle: Deployment and Updates - Gitpod Dedicated docs\n---\n\n# Deployment and Updates\n\n> ℹ️ **Glossary**: <br/>\n> Substrate = The control plane that manages Gitpod Dedicated instances <br/>\n> Bootstrap = Initial set up required to create an instance of Gitpod Dedicated <br/>\n> Cell = An instance of Gitpod Dedicated","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/background/deployment-updates","loc":{"lines":{"from":1,"to":11}}}}],["566",{"pageContent":"## Overview\n\n![Gitpod Dedicated Deployment overview](/images/docs/gitpod-dedicated/background/deployment-updates/deployment-overview.webp)\n\nGitpod Dedicated is powered and managed by a Control Plane that sits above Gitpod Dedicated Instances (a.k.a Cells). Controllers, implemented as [Lambdas](https://aws.amazon.com/lambda/), are mainly used to create and update components. They compare the desired state (as defined by a spec that lives in the Control Plane) with the actual state, and then work to resolve any discrepancies.\n\nDeployment and operation can be divided into three stages:\n\n1. Bootstrap (initial set up of infrastructure)\n2. Registration\n3. Updates and ongoing operations","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/background/deployment-updates","loc":{"lines":{"from":13,"to":23}}}}],["567",{"pageContent":"### Bootstrap Stage\n\nThe initial infrastructure required is created using a CloudFormation template executed by the customer. The customer must create a new & dedicated AWS account (as per [Getting Started](/docs/gitpod-dedicated/guides/getting-started)) and and then execute the CloudFormation template within it.\n\nPlease see [Getting Started](/docs/gitpod-dedicated/guides/getting-started) for detailed instructions.\n\n### Registration stage\n\nOnce the CloudFormation template successfully executes, the instance will register itself with the Gitpod Control Plane.\n\n> ℹ️ Registration happens via an outgoing connection only that uses AWS PrivateLink - the Control Plane has no ingoing connection to the instance. See [Networking and Data Flows](/docs/gitpod-dedicated/reference/networking-data-flows).\n\nUpon registration, the instance will check for the newest version of Gitpod and install it onto itself. This happens via the normal update mechanism which is described below.","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/background/deployment-updates","loc":{"lines":{"from":25,"to":37}}}}],["568",{"pageContent":"### Updates and Ongoing Operations\n\n**Application Updates**\n\n> ℹ️ The initial application update is handled just like any other, with the only difference being that no application is installed yet. I.e. all of Gitpod’s components are installed from scratch after the instance has registered itself.\n\nGitpod Dedicated is deployed and operated in the same way as other SaaS offerings, i.e. in a continuous manner. Deployment happens first to our internal staging environments, then gitpod.io, and _only_ then to Dedicated customers.\n\n> 💡 Changes are deployed and new features are enabled independently, using feature flags. Gitpod plans to deploy changes perpetually, but enable new functionality in a way that aligns with release communication.","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/background/deployment-updates","loc":{"lines":{"from":39,"to":47}}}}],["569",{"pageContent":"The instance connects to the Control Plane (_via an outgoing connection only; using AWS PrivateLink_) to periodically check for updates. When it learns that a new version is available, it pulls the latest images (also via PrivateLink) and applies them to update to the latest version.\n\n> ⚠️ **Maintenance mode:** Upon updates of certain application components, the instance may enter maintenance mode - in this mode, workspaces are temporarily blocked from starting and stoping and it is not possible to take a [workspace snapshot](/docs/configure/workspaces/collaboration#workspace-snapshots). Running workspaces are _not_ affected and this should only last a few minutes. During maintenance mode, users see the following error:\n> <img src=\"/images/docs/gitpod-dedicated/background/deployment-updates/maintenance-mode.webp\" alt=\"Gitpod Dedicated Deployment overview\" class=\"mx-auto w-3/6\" />","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/background/deployment-updates","loc":{"lines":{"from":49,"to":52}}}}],["570",{"pageContent":"### Infrastructure updates\n\nOccasionally, infrastructure updates are required to keep a customer’s instance up to date. In such cases, an updated CloudFormation template will be provided, which can be run against the existing stack created by the initial CloudFormation template.\n\n> ⚠️ Infrastructure updates are mandatory. Infrastructure updates need to applied **within two weeks**, as otherwise the instance will no longer receive updates and fall out of the support SLA.","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/background/deployment-updates","loc":{"lines":{"from":54,"to":58}}}}],["571",{"pageContent":"### Debugging\n\nIn the event that there are unforeseen issues with a customer’s installation that cannot be resolved using the data that is exported from an instance (see [Data and Observability](/docs/gitpod-dedicated/background/data-observability)), the customer is able to get access to the instance in order to jointly debug the instance with a Gitpod employee. This is only a tool used in emergencies. Gitpod is not able to access the instance directly. For more information, see [Getting Access to the Instance for Debugging](/docs/gitpod-dedicated/guides/accessing-data-exported-from-your-instance) .","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/background/deployment-updates","loc":{"lines":{"from":60,"to":62}}}}],["572",{"pageContent":"---\nsection: background\ntitle: Gitpod Dedicated Background\n---\n\n# Gitpod Dedicated Background\n\n## Table of Contents\n\n-   [Data Observability](/docs/gitpod-dedicated/background/data-observability)\n-   [Deployment Updates](/docs/gitpod-dedicated/background/deployment-updates)","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/background","loc":{"lines":{"from":1,"to":11}}}}],["573",{"pageContent":"---\nsection: guides\ntitle: Accessing data exported from your instance - Gitpod Dedicated docs\n---\n\n# Accessing data exported from your instance\n\nFor controlling or compliance purposes, you may want to see the exact data that has been shared from your Gitpod Dedicated instance. All data shared from the instance ends up in an S3 bucket located in an AWS account owned by Gitpod. See the [Data and Observability](/docs/gitpod-dedicated/background/data-observability) for more information on the observability architecture.","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/accessing-data-exported-from-your-instance","loc":{"lines":{"from":1,"to":8}}}}],["574",{"pageContent":"### Accessing the Data Shared\n\nCustomers can access the S3 bucket where the data is stored from any role/user in the Gitpod Instance’s AWS account by following the following steps:\n\n1. Upon request, your Gitpod account manager can give you the name of the S3 bucket where the data from your instance is sent to.\n\n2. Set up the AWS CLI environment to assume any role or user in the AWS account where Gitpod is installed into. For example, whatever user or role used to apply the CloudFormation template to install Gitpod can be used.\n\n    ```sh\n    # e.g. if they're using env variables\n    export AWS_SECRET_ACCESS_KEY=\"\"\n    export AWS_ACCESS_KEY_ID=\"\"\n    export AWS_SESSION_TOKEN=\"\"","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/accessing-data-exported-from-your-instance","loc":{"lines":{"from":10,"to":22}}}}],["575",{"pageContent":"```\n\n3. Use the CLI to inspect the data\n\n    ```sh\n    # List the bucket\n    aws s3 ls <bucket-name-provided-by-gitpod>\n    # Download a specific file\n    aws s3 cp s3://<bucket-name-provided-by-gitpod>/k8s-state/meta/2023/06/03/23/k8s-state-meta-1-2023-06-03-23-59-21-12dab8f5-0d40-4069-a679-172f94f13304 kubstate-example.json\n    ```\n\n    > ℹ️ The storage format depends on the telemetry type, so e.g. metrics is currently protobuf and we there is no convenient way to parse it yet.","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/accessing-data-exported-from-your-instance","loc":{"lines":{"from":23,"to":34}}}}],["576",{"pageContent":"### Escalation Process for Data Leaks\n\nIn case any data is found in the S3 bucket that contains personally identifiable or confidential information that should not have been leaked, the process for notifying Gitpod and remediating the issue is as follows:","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/accessing-data-exported-from-your-instance","loc":{"lines":{"from":36,"to":38}}}}],["577",{"pageContent":"1. **Customer can access data to identify potentially sensitive data leaks:** Customers are able to inspect any data that was sent to Gitpod by gaining access to the S3 bucket where all data from an instance is sent to (see “Accessing the Data Shared” above).\n    - In addition to this, Gitpod is continuously monitoring data from internal Gitpod Dedicated instances for potential data leaks using a third party sensitive data discovery tool ([AWS Macie](https://aws.amazon.com/macie/)). If any data leaks are discovered that also apply to customer instances, the process below is also followed. For more on the active data sanitisation mechanisms, please see [Observability and Data](/docs/gitpod-dedicated/background/data-observability)\n2. **Customer informs of data leak:** Upon identification of confidential data leakage, a customer can trigger security incident via their Gitpod account manager.","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/accessing-data-exported-from-your-instance","loc":{"lines":{"from":40,"to":42}}}}],["578",{"pageContent":"2. **Customer informs of data leak:** Upon identification of confidential data leakage, a customer can trigger security incident via their Gitpod account manager.\n3. **Data is deleted:** The data that was “leaked” is identified and measures are taken to delete it in S3 and then further in any third party systems.\n    - For S3 there is the option to delete the entire bucket. In any case, the data in this bucket is configured to have a very short retention. See [Observability and Data](/docs/gitpod-dedicated/background/data-observability).\n    - If the effort is deemed worthwhile, the data can also be deleted individually\n    - For 3rd party services, details will depend on the service and the data that was leaked.\n4. **Improvements made:** The root cause of why the data leaked is identified, and measures are put in place to prevent this from occurring again.","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/accessing-data-exported-from-your-instance","loc":{"lines":{"from":42,"to":47}}}}],["579",{"pageContent":"---\nsection: guides\ntitle: Deleting your Gitpod installation - Gitpod Dedicated docs\n---\n\n# Deleting your Gitpod installation\n\n> ℹ️ If you need to delete your Gitpod installation, this guide will show you how.\n>\n> This is useful in case you no longer need your Gitpod installation, or if you need to re-run the CloudFormation installation process.\n>\n> Unfortunately, this is not as easy as just deleting the CloudFormation Stack in AWS, because CloudFormation creates some resources that it cannot delete itself (for example, new DNS records generated to issue certificates; CloudWatch log groups; ECR image repositories; Elastic IPs…)\n\nIn order to completely delete a Gitpod installation that was created via a CloudFormation template, you will need to use a tool like [cloud-nuke](https://github.com/gruntwork-io/cloud-nuke) to clean up all resources in your account.","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/deleting-your-gitpod-installation","loc":{"lines":{"from":1,"to":14}}}}],["580",{"pageContent":"> ❗️**Disclaimer**: By design, [cloud-nuke](https://github.com/gruntwork-io/cloud-nuke) will completely and permanently delete all the resources present in your AWS sub-account. This is highly destructive. Please use with extreme caution.\n\nHere are the steps to follow to delete all the resources in the AWS sub-account used for your Gitpod installation:\n\n<details class=\"mt-macro ml-2\">\n\n<summary class=\"text-body text-p-medium\">1. Delete resources in the AWS account of the Gitpod Dedicated instance</summary>\n\n<div class=\"ml-2\">\n\n1. Go to the Route53 hosted zone and delete the 3 CNAME records. This this should speed things up as these records don’t get deleted (or created) as part of the stack and deletion fails for the hosted zone\n\n2. Delete the CloudFormation stack of the Gitpod installation","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/deleting-your-gitpod-installation","loc":{"lines":{"from":16,"to":28}}}}],["581",{"pageContent":"2. Delete the CloudFormation stack of the Gitpod installation\n\n    > ⚠️ When deleting failed CloudFormation stacks, sometimes the delete will fail because of a particular resource. When you try to delete the stack again, it will warn you which resources it failed on with a link to the resource. Click those links and manually delete them via the UI, then re-trigger the stack delete. It may give you an option to ignore those resources that failed previously, this time check all of those and the stack delete should succeed. If the `lambdacellstatecontrollersub` or `lambdacellstatecontrollertrigger` resources get stuck (CREATE_IN_PROGRESS status for over an hour), then reach out to Gitpod Support.\n\n3. Delete the CloudFormation stack used to create the role used to execute the Gitpod CloudFormation template\n\n</div>\n\n</details>\n\n<details class=\"mt-macro mb-micro ml-2\">","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/deleting-your-gitpod-installation","loc":{"lines":{"from":28,"to":38}}}}],["582",{"pageContent":"3. Delete the CloudFormation stack used to create the role used to execute the Gitpod CloudFormation template\n\n</div>\n\n</details>\n\n<details class=\"mt-macro mb-micro ml-2\">\n\n<summary class=\"text-body text-p-medium\">2. Delete any residual resources in the AWS account using <code>cloud-nuke</code></summary>\n\n<div class=\"ml-2\">\n\n1.  Install [cloud-nuke](https://github.com/gruntwork-io/cloud-nuke)\n\n2.  Ensure the user or role active in your AWS CLI has access to the AWS Account where Gitpod is installed into\n\n3.  Run cloud-nuke on the account: `cloud-nuke aws --exclude-resource-type transit-gateway`","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/deleting-your-gitpod-installation","loc":{"lines":{"from":38,"to":54}}}}],["583",{"pageContent":"3.  Run cloud-nuke on the account: `cloud-nuke aws --exclude-resource-type transit-gateway`\n\n    -   The `transit-gateway` resource type is excluded because the transit\n        gateway is shared between accounts, so this is necessary to not delete\n        the transit gateway in the other AWS Account - assuming that Transit Gateway is used for other purposes as well.\n    -   You can also add the `--region us-east-2,global` flags to greatly speed up the cloud-nuke, but sometimes you will need to check all regions to ensure all resources are deleted.\n    -   Manually delete any DNS records and zones, as cloud-nuke doesn’t support this yet.\n\n</div>\n\n</details>\n\nOnce this process is complete, all the resources in your AWS account will have been removed. You can then re-install Gitpod from scratch by running a new CloudFormation template, or delete the AWS sub-account if you no longer need it.","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/deleting-your-gitpod-installation","loc":{"lines":{"from":54,"to":66}}}}],["584",{"pageContent":"---\nsection: guides\ntitle: Getting Access to the Instance for Debugging - Gitpod Dedicated docs\n---\n\n# Getting Access to the Instance for Debugging\n\n> ℹ️ As a manner of last resort, when an instance is in a state where Gitpod is unable to resolve an issue, a Gitpod employee may reach out and ask the customer to access their AWS account to help debug the instance. Find out more about the permissions used in the role assumed via [AWS IAM permission requirements](/docs/gitpod-dedicated/reference/aws-iam-permission-requirements). Gitpod itself cannot access the AWS account of the instance nor assume the role used below - this needs to be done by a user in the account of the customer.\n\nIn order to help debug, a Gitpod employee will ask to perform the following steps. Upon completion, the user will have access to the Kubernetes cluster(s) used to run Gitpod:","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/getting-access-to-the-instance-for-debugging","loc":{"lines":{"from":1,"to":10}}}}],["585",{"pageContent":"In order to help debug, a Gitpod employee will ask to perform the following steps. Upon completion, the user will have access to the Kubernetes cluster(s) used to run Gitpod:\n\n1. Sign in to AWS account of the Gitpod instance\n2. Connect to instance:\n    - Go to EC2\n    - Find an instance in the appropriate cluster, e.g. one of the `workspace-*` or `meta-*` instances.\n    - Click Actions -> Connect -> Session Manager -> Connect\n3. Configure AWS CLI, i.e. set `AWS_*` environment variables manually\n\n    - From the AWS console, create credentials programatically for your current user account and then set these as environment variables:\n      ![Configure AWS Environment Variables](/images/docs/gitpod-dedicated/guides/getting-access-to-the-instance-for-debugging/configure-aws-envs.webp)\n\n4. Configure `kubectl` access","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/getting-access-to-the-instance-for-debugging","loc":{"lines":{"from":10,"to":22}}}}],["586",{"pageContent":"4. Configure `kubectl` access\n\n    ```sh\n    export GITPOD_INSTANCE_AWS_ACCOUNT_ID=\"ID of the AWS account where Gitpod runs in\"\n    export GITPOD_INSTANCE_NAME=\"name of the instance, usually the prefix in the url\"\n    export CLUSTER_NAME=\"workspace\" # or meta, depending on the cluster being accessed\n    aws eks update-kubeconfig --name \"${CLUSTER_NAME}\" --role arn:aws:iam::${GITPOD_INSTANCE_AWS_ACCOUNT_ID}:role/gitpod-customer-debug-access-role-${GITPOD_INSTANCE_NAME}","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/getting-access-to-the-instance-for-debugging","loc":{"lines":{"from":22,"to":28}}}}],["587",{"pageContent":"```\n\n5. You should now have `kubectl` access, to verify run `kubectl get pods`\n    <details class=\"text-p-medium ml-8 mt-micro\">\n\n    <summary>Troubleshooting</summary>\n\n    - Sometimes, you will get an auth error. Often this is due to mistyped input in step 4 above. For example, using the wrong quotation mark ( `”` instead of `\"` ) will cause an auth failure.\n\n    </details>","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/getting-access-to-the-instance-for-debugging","loc":{"lines":{"from":29,"to":38}}}}],["588",{"pageContent":"---\nsection: guides\ntitle: Gitpod Dedicated docs\n---\n\n# Gitpod Dedicated Guides","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides","loc":{"lines":{"from":1,"to":6}}}}],["589",{"pageContent":"## Table of Contents","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides","loc":{"lines":{"from":8,"to":8}}}}],["590",{"pageContent":"-   [Getting Started](/docs/gitpod-dedicated/guides/getting-started)\n-   [(Not) modifying your AWS Account](/docs/gitpod-dedicated/guides/not-modify-your-aws-account)\n-   [Updating the Gitpod Dedicated Infrastructure](/docs/gitpod-dedicated/guides/updating-gitpod-dedicated-infrastructure)\n-   [Getting Access to the Instance for Debugging](/docs/gitpod-dedicated/guides/getting-access-to-the-instance-for-debugging)\n-   [Using Custom Domains](/docs/gitpod-dedicated/guides/using-custom-domains)\n-   [Using a Custom or Private CA](/docs/gitpod-dedicated/guides/using-custom-or-private-ca)\n-   [Using Private VPC Resolvers](/docs/gitpod-dedicated/guides/using-private-vpc-resolvers)\n-   [Accessing data exported from your instance](/docs/gitpod-dedicated/guides/accessing-data-exported-from-your-instance)\n-   [Reserving AWS Instances to Save Cost](/docs/gitpod-dedicated/guides/reserving-aws-instances-to-save-cost)","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides","loc":{"lines":{"from":10,"to":18}}}}],["591",{"pageContent":"-   [Reserving AWS Instances to Save Cost](/docs/gitpod-dedicated/guides/reserving-aws-instances-to-save-cost)\n-   [Deleting your Gitpod installation](/docs/gitpod-dedicated/guides/deleting-your-gitpod-installation)","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides","loc":{"lines":{"from":18,"to":19}}}}],["592",{"pageContent":"---\nsection: guides\ntitle: Getting Started with Gitpod Dedicated - Gitpod Dedicated docs\n---\n\n# Getting Started with Gitpod Dedicated\n\n> ℹ️ You will need to have familiarity with AWS, specifically CloudFormation, in order to execute this guide. Please read through the entire guide or review it with your Gitpod engineer to ensure you understand all the requirements and steps.\n\nGitpod Dedicated is currently available in the following AWS regions:\n\n-   `us-east-1`\n-   `us-east-2`\n-   `us-west-1`\n-   `us-west-2`\n-   `ap-northeast-1`\n-   `ap-southeast-2`\n-   `eu-west-1`\n-   `eu-west-2`\n-   `eu-west-3`\n-   `eu-central-1`\n-   `sa-east-1 `","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/getting-started","loc":{"lines":{"from":1,"to":22}}}}],["593",{"pageContent":"## 0. Prerequisites\n\nHere's a list of what you'll need to get started with Gitpod Dedicated:","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/getting-started","loc":{"lines":{"from":24,"to":26}}}}],["594",{"pageContent":"-   **An empty AWS account.** There should be no other resources, EC2 instances, containers, functions or applications running in the account. If your company requires security policies or roles to be present in new accounts please review them with a Gitpod Engineer to ensure there are no items that will block Gitpod Dedicated from running.\n-   **Private network address ranges.** Provide a list of network CIDR ranges to your Gitpod engineer to ensure that traffic is routed correctly to internal resources. This list should include the network address space for any internal or on-premise networks that developers will need to access from their Gitpod workspaces.","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/getting-started","loc":{"lines":{"from":28,"to":29}}}}],["595",{"pageContent":"-   **List of resources developers require to build and test.** This should include any external databases, APIs, PaaS endpoints, cloud resources and anything else that your developers need to build and test their code. Review this list with your Gitpod engineer to ensure the right architecture is set up for your installation. Gitpod Dedicated has four supported modes - public, private, mixed public, and mixed private. We will help you choose the right mode for your environment.\n-   **The ability to run an AWS Cloudformation template.** The Gitpod Dedicated installer is provided as a set of Cloudformation templates. These should be run by a user with Administrator level access to the AWS account. We do not support running the Cloudformation template through terraform. You may run the Cloudformation templates either in the AWS Console (recommended) or via the AWS CLI (expert).","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/getting-started","loc":{"lines":{"from":30,"to":31}}}}],["596",{"pageContent":"-   **Optional - AWS Transit Gateway.** For private, mixed private, and mixed public installations you will create a transit gateway attachment that allows workspaces to connect to private resources on your network. Work with your Gitpod engineer to get this set up correctly.","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/getting-started","loc":{"lines":{"from":32,"to":32}}}}],["597",{"pageContent":"## 1. Set up an AWS Account for Gitpod Dedicated\n\n> ⚠️ Gitpod Dedicated requires its own independent AWS account. It is not intended to run alongside other components in a shared or existing AWS account.\n\nCreate a new AWS account following the steps in [the AWS documentation](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts_create.html). Start by navigating to the AWS console and creating the account as a subaccount in your AWS organization.\n\nEnsure that the account meets the following quota requirements in the region where Gitpod Dedicated will be installed. AWS quota increases may take up to a day to be approved, so make sure you do this step first.\n\nVisit the correct quota increase page for your region. For example this link goes to us-west-2. Replace the region with your own, search for each Service type below, and request an increase to the new value. _On most new AWS accounts you will only need to increase the Elastic IPs and Lambda executions._","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/getting-started","loc":{"lines":{"from":34,"to":42}}}}],["598",{"pageContent":"https://us-west-2.console.aws.amazon.com/servicequotas/home/services","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/getting-started","loc":{"lines":{"from":44,"to":44}}}}],["599",{"pageContent":"|                  Service                  |                               Name                               | Value |                                                                                                                                                                                                                                                        Reasoning                                                                                                                                                                                                                                                         |","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/getting-started","loc":{"lines":{"from":46,"to":46}}}}],["600",{"pageContent":"| :---------------------------------------: | :--------------------------------------------------------------: | :---: ||","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/getting-started","loc":{"lines":{"from":47,"to":47}}}}],["601",{"pageContent":"| Amazon Elastic Compute Cloud (Amazon EC2) |                       EC2-VPC Elastic IPs                        |  20   | Gitpod requires 3 IP addresses for each load balancer (Gitpod has 2 load balancers, one for meta and one for the workspace cluster). Additionally, 3 IPs are needed for each NAT gateway (Gitpod has 3 VPCs, so 3x). Therefore, at a minimum, 15 IPs are needed. The additional 5 act as a buffer in case a new load balancer needs to be provisioned and runs in parallel to the old one, ensuring a smooth transition. For more information, please see [Architecture](/docs/gitpod-dedicated/reference/architecture). |","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/getting-started","loc":{"lines":{"from":48,"to":48}}}}],["602",{"pageContent":"| Amazon Elastic Compute Cloud (Amazon EC2) | Running On-Demand Standard (A, C, D, H, I, M, R, T, Z) Instances |  256  |                                                                                                                                    This value depends on the number of concurrent developers using the instance. 256 the minimum recommended setting and is suitable for proof-of-value trials. Consult with your engineer on an appropriate setting for your expected usage levels.                                                                                                                                     |","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/getting-started","loc":{"lines":{"from":49,"to":49}}}}],["603",{"pageContent":"|                AWS Lambda                 |                      Concurrent Executions                       | 1024  |                                                                                                                                                            To ensure Gitpod can install and operate properly, the default concurrent execution quota should be increased to 1024. Increasing the quota to 1024 guarantees that Gitpod will function properly.                                                                                                                                                            |","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/getting-started","loc":{"lines":{"from":50,"to":50}}}}],["604",{"pageContent":"| Amazon Virtual Private Cloud (Amazon VPC) |                         VPCs per Region                          |   4   |                                                                                                                                               Gitpod Dedicated requires four VPCs. One is the default VPC that comes pre-installed in new accounts. The Gitpod Dedicated platform runs in a second VPC. The other two VPCs are reserved for upcoming feature enhancements.                                                                                                                                               |","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/getting-started","loc":{"lines":{"from":51,"to":51}}}}],["605",{"pageContent":"When your request has been approved verify that you have at least 20 Elastic IPs and 1024 concurrent Lambdas enabled. The screenshots below show how these limits look after they've been raised.\n\n<details>\n  <summary>Click to view screenshot: Elastic IPs</summary>\n  <div style=\"display: flex; justify-content: center;\">\n  <img src=\"/images/docs/gitpod-dedicated/guides/getting-started/20230823_124325_elastic_ips.png\" alt=\"IAM Permissions\" style=\"width: 80%;\">\n</div>\n</details>\n\n<details>\n  <summary>Click to view screenshot: Lambdas</summary>\n  <div style=\"display: flex; justify-content: center;\">\n  <img src=\"/images/docs/gitpod-dedicated/guides/getting-started/20230823_124350_lambdas.png\" alt=\"IAM Permissions\" style=\"width: 80%;\">\n</div>\n</details>\n\n<br>","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/getting-started","loc":{"lines":{"from":53,"to":69}}}}],["606",{"pageContent":"<br>\n\nEnsure that you allow for cross-account and cross-region communication with `eu-central-1`. For example, this could be restricted by [SCPs](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_scps.html) such as a [Region deny SCP](https://docs.aws.amazon.com/controltower/latest/userguide/region-deny.html). To roll out updates to the application, an AWS Lambda function pulls several configurations from a known S3 bucket owned by Gitpod. This bucket is hosted in the Gitpod Dedicated control plane located in the `eu-central-1` region.","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/getting-started","loc":{"lines":{"from":69,"to":71}}}}],["607",{"pageContent":"## 2. Execute two CloudFormation templates\n\n> ℹ️ Notify your Gitpod account manager if you want an overview of what is installed and configured by the Cloudformation templates. You may share these templates with your security and network teams if approval is required. Please see [AWS IAM permission requirements](/docs/gitpod-dedicated/reference/AWS-IAM-permission-requirements) for information on the permissions needed.\n\nFollow the process below to acquire and install your Cloudformation templates:","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/getting-started","loc":{"lines":{"from":73,"to":77}}}}],["608",{"pageContent":"### 2.1 Provide information\n\nYour Gitpod account manager will ask for information needed to generate the CloudFormation templates used to install Gitpod. The information required depends on the choice of networking mode. To help choose the right networking mode, please see [Networking and Data flows](/docs/gitpod-dedicated/reference/networking-data-flows) for general guidance and requirements on which services Gitpod needs to be able to route to.\n\nPlease provide the information required by the chosen networking mode:\n\n<details class=\"ml-4\">\n<summary class=\"text-body text-p-medium mt-micro\">All Private Networking Mode</summary>\n\n<!--***********************************************-->\n<!--Requirements for private mode-->\n<!--***********************************************-->\n\n1. `Subdomain` of your Gitpod installation. The full domain will be `<subdomain>.gitpod.cloud` unless a custom domain is used (see below).","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/getting-started","loc":{"lines":{"from":79,"to":92}}}}],["609",{"pageContent":"1. `Subdomain` of your Gitpod installation. The full domain will be `<subdomain>.gitpod.cloud` unless a custom domain is used (see below).\n\n<div style=\"margin: 0 40px; border: 1px solid #FFAB00; border-radius: 8px; padding: 10px; margin-bottom: 15px;\">\n  <details class=\"ml-8\">\n    <summary class=\"text-body text-p-medium mt-micro\">📝 Note on compliance and privacy:</summary>\n    Depending on your compliance and regulatory requirements, you may want to avoid including your company name in the URL. Although efforts are taken to minimize any exposure, avoiding using the company name can further increase confidentiality and reduce exposure risk.\n  </details>\n</div>","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/getting-started","loc":{"lines":{"from":92,"to":99}}}}],["610",{"pageContent":"2. `AWS account ID` of the empty account you created in the previous section.\n3. `AWS region` where Gitpod will be installed. See [above](/docs/gitpod-dedicated/guides/getting-started#:~:text=Currently%2C%20Gitpod%20Dedicated%20is%20only%20available%20in%20the%20following%20AWS%20regions%3A) for available regions.\n4. `Relay CIDR range`: The small part of the Gitpod Dedicated VPC that needs to be routable from your network. This is called the **relay subnet** and it attaches to your Transit Gateway (see below). See [Networking and Data flows](/docs/gitpod-dedicated/reference/networking-data-flows) for more details and a networking diagram.","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/getting-started","loc":{"lines":{"from":101,"to":103}}}}],["611",{"pageContent":"<div style=\"margin: 0 40px; border: 1px solid #FFAB00; border-radius: 8px; padding: 10px; margin-bottom: 15px;\">\n  <details class=\"ml-8\">\n  <summary class=\"text-body text-p-medium mt-micro\">📝 Please consider the following points when choosing this range:</summary>\n  <ul>\n    <li>The only restriction in place is that the `Relay CIDR range` must be `/25` and not in the range `100.70.0.0/10` (the parent range used by Gitpod).</li>\n    <li>The `Relay CIDR range` <strong>must not overlap with any of your internal services that Gitpod needs to communicate with.</strong> For example, your source code repository, SSO provider, or package repositories.</li>\n    <li>The `Relay CIDR range` must be routable from your source code repository (SCM) server for <a href=\"/docs/configure/projects/prebuilds\">Prebuilds</a> to work. Prebuilds are powered by webhooks, so Gitpod must be able to get notifications of changes to your code repos to trigger prebuilds.</li>\n  </ul>\n</details>\n</div>","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/getting-started","loc":{"lines":{"from":105,"to":114}}}}],["612",{"pageContent":"5. `CIDR range of your network` or the IP address space used by your company network that you want workspaces to be able to route to. At the very least, provide the relevant ranges that you want Gitpod to be able to interact with. This helps Gitpod ensure there are no possible IP conflicts with CIDR ranges used internally in the Gitpod instance (100.70.0.0/16, part of CGNAT range). Note that this internal Gitpod range does not need to be routable from your network.\n\n6. `transitGatewayID` of your Transit Gateway. Network traffic to your internal resources will be routed through a new transit gateway attachment. Gitpod Dedicated control plane traffic does not route through the transit gateway, it is reserved for your internal traffic. See [Networking and Data flows](/docs/gitpod-dedicated/reference/networking-data-flows) for more information.","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/getting-started","loc":{"lines":{"from":116,"to":118}}}}],["613",{"pageContent":"<div style=\"margin: 0 40px; border: 1px solid #FFAB00; border-radius: 8px; padding: 10px; margin-bottom: 15px;\">\n<details class=\"ml-8\">\n<summary class=\"text-body text-p-medium\">📝 Note on auto propagation:</summary>\n\n<div class=\"ml-4\">\nWhen using auto-propagation by default, delete the propagation from your Transit Gateway Routetable associated with the Gitpod Transit Gateway Attachment and replace it with a static route pointing the Relay CIDR range (/25) to the Gitpod Transit Gateway Attachment ID. This ensures only the required relay range is shared on your Transit Gateway network and no other routes are accidentally broadcasted.\n</div>\n\n</details>\n</div>\n\n<!--***********************************************-->\n<!--End of Private Requirements block-->\n<!--***********************************************-->\n\n</details>\n\n<details class=\"ml-4\">\n<summary class=\"text-body text-p-medium mt-micro\">Mixed with Private Ingress Networking Mode</summary>","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/getting-started","loc":{"lines":{"from":120,"to":138}}}}],["614",{"pageContent":"</details>\n\n<details class=\"ml-4\">\n<summary class=\"text-body text-p-medium mt-micro\">Mixed with Private Ingress Networking Mode</summary>\n\n<!--***********************************************-->\n<!--Requirements for mixed private mode-->\n<!--***********************************************-->\n\n1. `Subdomain` of your Gitpod installation. The full domain will be `<subdomain>.gitpod.cloud` unless a custom domain is used (see below).\n\n<div style=\"margin: 0 40px; border: 1px solid #FFAB00; border-radius: 8px; padding: 10px; margin-bottom: 15px;\">\n  <details class=\"ml-8\">\n    <summary class=\"text-body text-p-medium mt-micro\">📝 Note on compliance and privacy:</summary>\n    Depending on your compliance and regulatory requirements, you may want to avoid including your company name in the URL. Although efforts are taken to minimize any exposure, avoiding using the company name can further increase confidentiality and reduce exposure risk.\n  </details>\n</div>","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/getting-started","loc":{"lines":{"from":138,"to":154}}}}],["615",{"pageContent":"2. `AWS account ID` of the empty account you created in the previous section.\n3. `AWS region` where Gitpod will be installed. See [above](/docs/gitpod-dedicated/guides/getting-started#:~:text=Currently%2C%20Gitpod%20Dedicated%20is%20only%20available%20in%20the%20following%20AWS%20regions%3A) for available regions.\n4. `Relay CIDR range`: The small part of the Gitpod Dedicated VPC that needs to be routable from your network. This is called the **relay subnet** and it attaches to your Transit Gateway (see below). See [Networking and Data flows](/docs/gitpod-dedicated/reference/networking-data-flows) for more details and a networking diagram.","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/getting-started","loc":{"lines":{"from":154,"to":156}}}}],["616",{"pageContent":"<div style=\"margin: 0 40px; border: 1px solid #FFAB00; border-radius: 8px; padding: 10px; margin-bottom: 15px;\">\n  <details class=\"ml-8\">\n  <summary class=\"text-body text-p-medium mt-micro\">📝 Please consider the following points when choosing this range:</summary>\n  <ul>\n    <li>The only restriction in place is that the `Relay CIDR range` must be `/25` and not in the range `100.70.0.0/10` (the parent range used by Gitpod).</li>\n    <li>The `Relay CIDR range` <strong>must not overlap with any of your internal services that Gitpod needs to communicate with.</strong> For example, your source code repository, SSO provider, or package repositories.</li>\n    <li>The `Relay CIDR range` must be routable from your source code repository (SCM) server for <a href=\"/docs/configure/projects/prebuilds\">Prebuilds</a> to work. Prebuilds are powered by webhooks, so Gitpod must be able to get notifications of changes to your code repos to trigger prebuilds.</li>\n  </ul>\n</details>\n</div>","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/getting-started","loc":{"lines":{"from":158,"to":167}}}}],["617",{"pageContent":"5. `CIDR range of your network` or the IP address space used by your company network that you want workspaces to be able to route to. At the very least, provide the relevant ranges that you want Gitpod to be able to interact with. This helps Gitpod ensure there are no possible IP conflicts with CIDR ranges used internally in the Gitpod instance (100.70.0.0/16, part of CGNAT range). Note that this internal Gitpod range does not need to be routable from your network.\n\n6. `transitGatewayID` of your Transit Gateway. Network traffic to your internal resources will be routed through a new transit gateway attachment. Gitpod Dedicated control plane traffic does not route through the transit gateway, it is reserved for your internal traffic. See [Networking and Data flows](/docs/gitpod-dedicated/reference/networking-data-flows) for more information.","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/getting-started","loc":{"lines":{"from":169,"to":171}}}}],["618",{"pageContent":"<div style=\"margin: 0 40px; border: 1px solid #FFAB00; border-radius: 8px; padding: 10px; margin-bottom: 15px;\">\n<details class=\"ml-8\">\n<summary class=\"text-body text-p-medium\">📝 Note on auto propagation:</summary>\n\n<div class=\"ml-4\">\nWhen using auto-propagation by default, delete the propagation from your Transit Gateway Routetable associated with the Gitpod Transit Gateway Attachment and replace it with a static route pointing the Relay CIDR range (/25) to the Gitpod Transit Gateway Attachment ID. This ensures only the required relay range is shared on your Transit Gateway network and no other routes are accidentally broadcast.\n</div>\n\n</details>\n</div>","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/getting-started","loc":{"lines":{"from":225,"to":234}}}}],["619",{"pageContent":"</details>\n</div>\n\n7. `Expose public services?` : This optional feature may be enabled to expose webhooks and Identity Provider (IDP) services on public endpoints. The added API gateway does not expose your entire instance to the public Internet. This can be helpful for connecting to OIDC providers such as Okta, Azure AD. This option also makes it easy for developers to connect to your instance without having to route through a VPN or transit gateway.\n\n<!--***********************************************-->\n<!--End of mixed private requirements-->\n<!--***********************************************-->\n\n</details>\n\n<details class=\"ml-4\">\n<summary class=\"text-body text-p-medium mt-micro\">Mixed with Public Ingress Networking Mode</summary>\n\n<!--***********************************************-->\n<!--Requirements for mixed public mode-->\n<!--***********************************************-->","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/getting-started","loc":{"lines":{"from":234,"to":250}}}}],["620",{"pageContent":"<!--***********************************************-->\n<!--Requirements for mixed public mode-->\n<!--***********************************************-->\n\n1. `Subdomain` of your Gitpod installation. The full domain will be `<subdomain>.gitpod.cloud` unless a custom domain is used (see below).\n\n<div style=\"margin: 0 40px; border: 1px solid #FFAB00; border-radius: 8px; padding: 10px; margin-bottom: 15px;\">\n  <details class=\"ml-8\">\n    <summary class=\"text-body text-p-medium mt-micro\">📝 Note on compliance and privacy:</summary>\n    Depending on your compliance and regulatory requirements, you may want to avoid including your company name in the URL. Although efforts are taken to minimize any exposure, avoiding using the company name can further increase confidentiality and reduce exposure risk.\n  </details>\n</div>","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/getting-started","loc":{"lines":{"from":250,"to":261}}}}],["621",{"pageContent":"2. `AWS account ID` of the empty account you created in the previous section.\n3. `AWS region` where Gitpod will be installed. See [above](/docs/gitpod-dedicated/guides/getting-started#:~:text=Currently%2C%20Gitpod%20Dedicated%20is%20only%20available%20in%20the%20following%20AWS%20regions%3A) for available regions.\n4. `Relay CIDR range`: The small part of the Gitpod Dedicated VPC that needs to be routable from your network. This is called the **relay subnet** and it attaches to your Transit Gateway (see below). See [Networking and Data flows](/docs/gitpod-dedicated/reference/networking-data-flows) for more details and a networking diagram.","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/getting-started","loc":{"lines":{"from":261,"to":263}}}}],["622",{"pageContent":"<div style=\"margin: 0 40px; border: 1px solid #FFAB00; border-radius: 8px; padding: 10px; margin-bottom: 15px;\">\n  <details class=\"ml-8\">\n  <summary class=\"text-body text-p-medium mt-micro\">📝 Please consider the following points when choosing this range:</summary>\n  <ul>\n    <li>The only restriction in place is that the `Relay CIDR range` must be `/25` and not in the range `100.70.0.0/10` (the parent range used by Gitpod).</li>\n    <li>The `Relay CIDR range` <strong>must not overlap with any of your internal services that Gitpod needs to communicate with.</strong> For example, your source code repository, SSO provider, or package repositories.</li>\n    <li>The `Relay CIDR range` must be routable from your source code repository (SCM) server for <a href=\"/docs/configure/projects/prebuilds\">Prebuilds</a> to work. Prebuilds are powered by webhooks, so Gitpod must be able to get notifications of changes to your code repos to trigger prebuilds.</li>\n  </ul>\n</details>\n</div>","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/getting-started","loc":{"lines":{"from":265,"to":274}}}}],["623",{"pageContent":"5. `CIDR range of your network` or the IP address space used by your company network that you want workspaces to be able to route to. At the very least, provide the relevant ranges that you want Gitpod to be able to interact with. This helps Gitpod ensure there are no possible IP conflicts with CIDR ranges used internally in the Gitpod instance (100.70.0.0/16, part of CGNAT range). Note that this internal Gitpod range does not need to be routable from your network.\n\n6. `transitGatewayID` of your Transit Gateway. Network traffic to your internal resources will be routed through a new transit gateway attachment. Gitpod Dedicated control plane traffic does not route through the transit gateway, it is reserved for your internal traffic. See [Networking and Data flows](/docs/gitpod-dedicated/reference/networking-data-flows) for more information.","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/getting-started","loc":{"lines":{"from":276,"to":278}}}}],["624",{"pageContent":"<div style=\"margin: 0 40px; border: 1px solid #FFAB00; border-radius: 8px; padding: 10px; margin-bottom: 15px;\">\n<details class=\"ml-8\">\n<summary class=\"text-body text-p-medium\">📝 Note on auto propagation:</summary>\n\n<div class=\"ml-4\">\nWhen using auto-propagation by default, delete the propagation from your Transit Gateway Routetable associated with the Gitpod Transit Gateway Attachment and replace it with a static route pointing the Relay CIDR range (/25) to the Gitpod Transit Gateway Attachment ID. This ensures only the required relay range is shared on your Transit Gateway network and no other routes are accidentally broadcast.\n</div>\n\n</details>\n</div>","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/getting-started","loc":{"lines":{"from":332,"to":341}}}}],["625",{"pageContent":"</details>\n</div>\n\n6. `Expose public services?` : This optional feature may be enabled to expose webhooks and Identity Provider (IDP) services on public endpoints. The added API gateway does not expose your entire instance to the public Internet. This can be helpful for connecting to OIDC providers such as Okta, Azure AD. This option also makes it easy for developers to connect to your instance without having to route through a VPN or transit gateway.\n\n<!--***********************************************-->\n<!--End of mixed public requirements-->\n<!--***********************************************-->\n\n</details>\n\n<details class=\"ml-4\">\n<summary class=\"text-body text-p-medium my-micro\">All Public Networking Mode</summary>\n\n<!--***********************************************-->\n<!--Requirements for allPublic mode-->\n<!--***********************************************-->","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/getting-started","loc":{"lines":{"from":394,"to":410}}}}],["626",{"pageContent":"<!--***********************************************-->\n<!--Requirements for allPublic mode-->\n<!--***********************************************-->\n\n1. `Subdomain` of your Gitpod installation. The full domain will be `<subdomain>.gitpod.cloud` unless a custom domain is used (see below).\n\n<div style=\"margin: 0 40px; border: 1px solid #FFAB00; border-radius: 8px; padding: 10px; margin-bottom: 15px;\">\n  <details class=\"ml-8\">\n    <summary class=\"text-body text-p-medium mt-micro\">📝 Note on compliance and privacy:</summary>\n    Depending on your compliance and regulatory requirements, you may want to avoid including your company name in the URL. Although efforts are taken to minimize any exposure, avoiding using the company name can further increase confidentiality and reduce exposure risk.\n  </details>\n</div>","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/getting-started","loc":{"lines":{"from":410,"to":421}}}}],["627",{"pageContent":"2. `AWS account ID` of the empty account you created in the previous section.\n3. `AWS region` where Gitpod will be installed. See [above](/docs/gitpod-dedicated/guides/getting-started#:~:text=Currently%2C%20Gitpod%20Dedicated%20is%20only%20available%20in%20the%20following%20AWS%20regions%3A) for available regions.\n\n<!--***********************************************-->\n<!--End of Requirements block-->\n<!--***********************************************-->\n\n</details>\n\n**Special Situations**\n\nThe information required further depends on whether the choice of using an allowlist and custom domain:\n\n<details class=\"ml-4\">\n\n<summary class=\"text-body text-p-medium mt-micro\">When using an Allowlist</summary>\n\nThe allowlist will apply to all inbound traffic to the Gitpod Dedicated Instance. In addition to the above, the following information is required:","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/getting-started","loc":{"lines":{"from":423,"to":440}}}}],["628",{"pageContent":"The allowlist will apply to all inbound traffic to the Gitpod Dedicated Instance. In addition to the above, the following information is required:\n\n-   `allowlist` of IPs or CIDR ranges that should be allowed to access the instance. Any CIDRs provided in the `CIDR range of your network` above are always allowed. Example:\n\n    ```\n    allowListIPs:\n        - 32.45.67.4/32\n        - 32.45.67.18/32","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/getting-started","loc":{"lines":{"from":440,"to":447}}}}],["629",{"pageContent":"```\n\n</details>\n\n<details class=\"ml-4\">\n\n<summary class=\"text-body text-p-medium mt-micro\">When using a Custom Domain</summary>\n\nPlease see [Using Custom Domains](/docs/gitpod-dedicated/guides/using-custom-domains) for more information about using a custom domains. In addition to the above, the following information is required:\n\n-   `domainName` that is to be used\n-   `ARN of the certificate` to be used\n\n</details>\n\n<details class=\"ml-4\">\n\n<summary class=\"text-body text-p-medium my-micro\">When using certificates signed by a custom or private Certificate Authority</summary>\n\nPlease see [Using a Custom or Private CA](/docs/gitpod-dedicated/guides/using-custom-or-private-ca) for more information about using custom domains. In addition to the above, the following information is required:\n\n-   `ARN of the Custom CA certificate` that is stored in secrets manager\n\n</details>","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/getting-started","loc":{"lines":{"from":448,"to":471}}}}],["630",{"pageContent":"### 2.2 Receive your Cloudformation Templates\n\nYou will need to execute two CloudFormation templates to install the infrastructure and subsequently Gitpod Dedicated:\n\n1. Role Template: The `infrastructure-creation-role-template.json` creates a new IAM role with ten policies attached. These policies grant the minimum permissions necessary to install and run Gitpod Dedicated in your account.\n\n2. Gitpod Dedicated Template: The `<company>-gitpod-template.json` CloudFormation template installs the infrastructure for Gitpod Dedicated. The role created by the first template is used when installing this second one.\n\nBoth of these templates will be provided by your Gitpod Account Manager.","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/getting-started","loc":{"lines":{"from":473,"to":481}}}}],["631",{"pageContent":"### 2.3 Execute CloudFormation templates\n\n> ⚠️ Do not modify the CloudFormation templates outside of adding AWS resource tags. Doing so will likely result in a failed installation.\n\n<div class=\"ml-6\">\n\n1. First, execute the `infrastructure-creation-role-template.json` template that will be shared by your Gitpod account manager in the Gitpod Dedicated AWS account. During the \"configure stack options\" step, ensure you select the \"roll back all the stack resources\" option under \"Stack failure options\". This will ensure that all resources created by the template are deleted if the template fails to execute.\n\n<div style=\"display: flex; justify-content: center;\">\n  <img src=\"/images/docs/gitpod-dedicated/guides/getting-started/stackoptions.webp\" alt=\"Stack Options\" style=\"width: 80%;\">\n</div>\n\n2. Then, execute `<company>-gitpod-template.json` that will be shared by your Gitpod account manager in the same AWS account. This will create the infrastructure that Gitpod Dedicated requires.","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/getting-started","loc":{"lines":{"from":483,"to":495}}}}],["632",{"pageContent":"2. Then, execute `<company>-gitpod-template.json` that will be shared by your Gitpod account manager in the same AWS account. This will create the infrastructure that Gitpod Dedicated requires.\n\n> ℹ️ During the “configure stack options” step, select the role created by the first CloudFormation template (`GitpodSetupAndInitialEKSUserAdmin`) as the role used for permissions. Depending on timing, you may need to manually select the role using its ARN. Again, select the “roll back all the stack resources” option.\n\n<div style=\"display: flex; justify-content: center;\">\n  <img src=\"/images/docs/gitpod-dedicated/guides/getting-started/iam-perms-configs.webp\" alt=\"IAM Permissions\" style=\"width: 80%;\">\n</div>\n\n<br>\n\n<div style=\"margin: 0 40px; border: 1px solid #FFAB00; border-radius: 8px; padding: 10px; margin-bottom: 15px;\">\n  <details class=\"ml-8\">\n<summary class=\"mt-micro text-important text-p-medium\">⚠️ Important Message for Transit Gateway Users:</summary>\n\n<div class=\"ml-4\">","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/getting-started","loc":{"lines":{"from":495,"to":509}}}}],["633",{"pageContent":"1. Before executing the CloudFormation template, you need to ensure the Transit Gateway that the Gitpod instance attaches to is able to accept attachment requests. For this, the Transit Gateway needs to be shared using AWS Resource Access Manager (RAM) to allow for other AWS accounts in your Organization to send attachment requests for approval. More info on Transit Gateway attachments can be found here.\n2. During the execution of the CloudFormation template, a Transit Gateway attachment to the Transit Gateway defined above is initiated. If you do not have resource sharing policies for this or auto accept turned on, you will have to manually accept this attachment request.","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/getting-started","loc":{"lines":{"from":511,"to":512}}}}],["634",{"pageContent":"3. The flow to manually approve the attachment request is as follows: Navigate to the AWS account the Transit Gateway attachment is in and navigate to the Transit Gateway Attachments page. Within 5 minutes of starting the CloudFormation execution, you should see a pending attachment in which you have limited time to approve else stack creation fails. Find out more in the AWS documentation.","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/getting-started","loc":{"lines":{"from":513,"to":513}}}}],["635",{"pageContent":"</div>\n\n</details>\n</div>\n\n3. If you run into errors during the Cloudformation deployment you should remove all existing resources before trying again. There are a few resources that need to be cleaned up manually before you attempt another installation. See [Deleting your Gitpod installation](/docs/gitpod-dedicated/guides/deleting-your-gitpod-installation) for details.\n\n4. Instance will install Gitpod: After the infrastructure has been created, the instance will register itself with the Gitpod Dedicated Control plane. It will then ask for the newest version of Gitpod, and install it onto the created infrastructure.\n\n</div>\n\nPlease see [Deployment and Updates](/docs/gitpod-dedicated/background/deployment-updates) for more background information around how deployment subsequent operations of Gitpod Dedicated function.","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/getting-started","loc":{"lines":{"from":515,"to":526}}}}],["636",{"pageContent":"## 3. Set Up Gitpod\n\nGitpod is now ready to be setup. Your Gitpod account manager will provide the URL to access it. This URL will contain a one time admin password. This is used to authenticate when no Single Sign-On (SSO) has been set up yet.\n\nYou are three steps away from launching your first Gitpod workspace:\n\n<details class=\"ml-2\">\n\n<summary class=\"text-body text-medium mt-micro font-bold\">Name your organization</summary>\n\n<div class=\"ml-2 mt-micro\">\n\nWe suggest your company name, but you know best. Don’t worry you can always change this later. For example, if the name of your company was “Amazing Co.”\n\n![Name your organization](/images/docs/gitpod-dedicated/guides/getting-started/sso-name-org.webp)\n\nIt will appear in Gitpod like this:\n\n![Preview in Gitpod Dashboard](/images/docs/gitpod-dedicated/guides/getting-started/sso-gitpod-org-name.webp)\n\n</div>\n\n</details>\n<br>\n<details class=\"ml-2\">","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/getting-started","loc":{"lines":{"from":528,"to":552}}}}],["637",{"pageContent":"It will appear in Gitpod like this:\n\n![Preview in Gitpod Dashboard](/images/docs/gitpod-dedicated/guides/getting-started/sso-gitpod-org-name.webp)\n\n</div>\n\n</details>\n<br>\n<details class=\"ml-2\">\n\n<summary class=\"text-body text-medium mt-micro font-bold\">Configure Single Sign-On</summary>\n\n<div class=\"ml-2 mt-micro\">\n\nGitpod Dedicated requires OpenID Connect (OIDC) for authentication, for example with Identity Providers (IdP) such as Google, Okta or Azure AD.\n\n**General instructions**","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/getting-started","loc":{"lines":{"from":552,"to":568}}}}],["638",{"pageContent":"<div class=\"ml-2 mt-micro\">\n\nGitpod Dedicated requires OpenID Connect (OIDC) for authentication, for example with Identity Providers (IdP) such as Google, Okta or Azure AD.\n\n**General instructions**\n\n-   You will need to create a configuration with your Identity Provider and provide the “redirect URI” you can copy from this screen.\n-   Once you’ve created your Identity Provider configuration, you should copy and paste the Issuer URL, Client ID and Client Secret values on this screen.\n-   Clicking “Verify SSO Configuration” will ensure that validity of the values by authenticating your account. If successful, your user will be created and configured with the “owner” role. Subsequent users that log in will be granted the default “member” role.\n\n    ![Configure Single Sign-on](/images/docs/gitpod-dedicated/guides/getting-started/configure-sso-gitpod.webp)\n\n**Identity Provider specific instructions**\n\n<details>\n\n<summary class=\"text-body font-semibold text-p-medium\">Okta</summary>","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/getting-started","loc":{"lines":{"from":568,"to":584}}}}],["639",{"pageContent":"**Identity Provider specific instructions**\n\n<details>\n\n<summary class=\"text-body font-semibold text-p-medium\">Okta</summary>\n\n<div class=\"ml-6 mt-macro\">\n\nAs _prerequisites_, you will need the following:\n\n-   Access to your Okta instance\n-   Permission to create an [app integration](https://help.okta.com/oie/en-us/Content/Topics/Apps/apps-overview-get-started.htm)\n\n_Creating a Gitpod SSO Integration_\n\n1. On the Okta Admin dashboard, navigate to Applications\n2. Select `Create App Integration`\n\n    ![Applications - Okta Dashboard](/images/docs/gitpod-dedicated/guides/getting-started/sso/okta/okta-dashboard.webp)\n\n3. Select the following options and click `Next`\n\n    - Sign-in method: `OIDC - Open ID Connect`\n    - Application type: `Web Application`\n\n    ![Create App Integration - Okta Dashboard](/images/docs/gitpod-dedicated/guides/getting-started/sso/okta/create-app-integration.webp)\n\n4. Specify General Settings","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/getting-started","loc":{"lines":{"from":584,"to":611}}}}],["640",{"pageContent":"![Create App Integration - Okta Dashboard](/images/docs/gitpod-dedicated/guides/getting-started/sso/okta/create-app-integration.webp)\n\n4. Specify General Settings\n\n    - App integration name: `Gitpod` (or choose your own name)\n    - Sign-in redirect URIs: _copy this value from your Gitpod setup screen_ (see [details](/docs/gitpod-dedicated/guides/getting-started#:~:text=or%20Azure%20AD.-,General%20instructions,-You%20will%20need) above under \"General instructions\")\n    - Sign-out redirect URIs: `none`\n    - Trusted Origins: `none`\n    - Assignments: _choose option appropriate to your organization_\n\n    ![Specify Okta settings - Okta Dashboard](/images/docs/gitpod-dedicated/guides/getting-started/sso/okta/specify-general-settings.webp)\n\n5. Obtain Client ID & Client Secret","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/getting-started","loc":{"lines":{"from":611,"to":623}}}}],["641",{"pageContent":"![Specify Okta settings - Okta Dashboard](/images/docs/gitpod-dedicated/guides/getting-started/sso/okta/specify-general-settings.webp)\n\n5. Obtain Client ID & Client Secret\n\n    - Copy the `Client ID` and use it as input in Gitpod setup (see [details](/docs/gitpod-dedicated/guides/getting-started#:~:text=or%20Azure%20AD.-,General%20instructions,-You%20will%20need) above under \"General instructions\")\n    - Copy `Client Secret` and use it as input in Gitpod setup (see [details](/docs/gitpod-dedicated/guides/getting-started#:~:text=or%20Azure%20AD.-,General%20instructions,-You%20will%20need) above under \"General instructions\")\n    - Set the `Issuer` to your Okta instance, eg: `https://amazingco.okta.com/`\n\n    ![Configure Client Secrets - Okta Dashboard](/images/docs/gitpod-dedicated/guides/getting-started/sso/okta/client-configs-okta.webp)","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/getting-started","loc":{"lines":{"from":623,"to":631}}}}],["642",{"pageContent":"![Configure Client Secrets - Okta Dashboard](/images/docs/gitpod-dedicated/guides/getting-started/sso/okta/client-configs-okta.webp)\n\n6. Continue with Gitpod SSO Configuration verification: [Clicking “Verify SSO Configuration”](/docs/gitpod-dedicated/guides/getting-started#:~:text=or%20Azure%20AD.-,General%20instructions,-You%20will%20need)\n\n</div>\n\n</details>\n\n<details class=\"mt-macro\">\n\n<summary class=\"text-body font-semibold text-p-medium\">Google</summary>\n\n<div class=\"ml-6 mt-macro\">\n\n_As prerequisites_ you will need the following:\n\n-   Access to setup a new [API Credentials](https://console.cloud.google.com/apis/credentials) in your GCP Account\n\n_Creating a Gitpod SSO Integration_\n\n1. Navigate to your Google Cloud Console, API Credentials\n2. Select Create Credentials, and choose OAuth client ID\n\n    ![Create credentials - Google Cloud Dashboard](/images/docs/gitpod-dedicated/guides/getting-started/sso/google/create-credentials.webp)","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/getting-started","loc":{"lines":{"from":631,"to":654}}}}],["643",{"pageContent":"![Create credentials - Google Cloud Dashboard](/images/docs/gitpod-dedicated/guides/getting-started/sso/google/create-credentials.webp)\n\n3. Configure your OAuth Client ID, by specifying the Authorized Redirect URIs: [Once you’ve created your Identity Provider configuration, you should copy...](/docs/gitpod-dedicated/guides/getting-started#:~:text=or%20Azure%20AD.-,General%20instructions,-You%20will%20need)\n4. Obtain the Client ID & Client Secret and input these into your Gitpod Setup page\n\n    ![OAuth Client Created - Google Cloud Dashboard](/images/docs/gitpod-dedicated/guides/getting-started/sso/google/OAuth-client-created.webp)\n\n5. Set Provider's Issuer URL to `https://accounts.google.com`\n6. Proceed to verify the integration on the Gitpod setup page: [Clicking “Verify SSO Configuration”](/docs/gitpod-dedicated/guides/getting-started#:~:text=or%20Azure%20AD.-,General%20instructions,-You%20will%20need)\n\n</div>\n\n</details>\n\n<details class=\"mt-macro\">","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/getting-started","loc":{"lines":{"from":654,"to":668}}}}],["644",{"pageContent":"</div>\n\n</details>\n\n<details class=\"mt-macro\">\n\n<summary class=\"text-body font-semibold text-p-medium\">Azure AD</summary>\n\n<div class=\"ml-6 mt-macro\">\n\n_As_ _prerequisites_ you will need the following:\n\n-   Access to Azure Directory, to Register an Application\n\n_Creating a Gitpod SSO Integration_\n\n1. Navigate to your Azure portal > App Registrations\n2. Select New Registration\n\n    ![New registration - Azure AD Dashboard](/images/docs/gitpod-dedicated/guides/getting-started/sso/azure/new-registration.webp)\n\n3. Name your application - e.g. Gitpod\n4. Select supported account types depending on your organizational needs. Most likely you want _Accounts in this organizational directory only_\n5. Copy the redirect URL from the Gitpod SSO setup page and set it as the Redirect URI, selecting Web as the application type\n\n    ![Register Application - Azure AD Dashboard](/images/docs/gitpod-dedicated/guides/getting-started/sso/azure/register-application.webp)","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/getting-started","loc":{"lines":{"from":668,"to":693}}}}],["645",{"pageContent":"![Register Application - Azure AD Dashboard](/images/docs/gitpod-dedicated/guides/getting-started/sso/azure/register-application.webp)\n\n6. From the App Registration Overview, you should obtain the Application (client) ID and copy it into your Gitpod SSO setup page\n7. Create a client secret - navigate to Certificates & Secrets, click New client secret\n\n    ![Create client secret - Azure AD Dashboard](/images/docs/gitpod-dedicated/guides/getting-started/sso/azure/client-secrets.webp)\n\n8. Name the secret, and set expiry according to your needs.\n\n    > 📌 Once the client secret expires, you (nor anyone else in your organization) will be able to log in to Gitpod. You will need to update the SSO configuration (secret) to continue using SSO.\n\n9. Obtain the _Secret Value_ and copy into into the Gitpod SSO Client Secret input field\n10. Grant the application access to OpenId `email` , `openid`and `profile` information","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/getting-started","loc":{"lines":{"from":693,"to":705}}}}],["646",{"pageContent":"9. Obtain the _Secret Value_ and copy into into the Gitpod SSO Client Secret input field\n10. Grant the application access to OpenId `email` , `openid`and `profile` information\n\n    - Navigate to API Permissions\n    - Select Microsoft Graph\n    - Enable `OpenId.email`, `OpenId.openid` and `Openid.profile`\n      ![Request API Permissions - Azure AD Dashboard](/images/docs/gitpod-dedicated/guides/getting-started/sso/azure/request-api-permissions.webp)\n    - Once saved, your configured permissions should look as follows:\n      ![Configure API Permissions - Azure AD Dashboard](/images/docs/gitpod-dedicated/guides/getting-started/sso/azure/configured-permissions.webp)\n\n11. Obtain the Provider URL","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/getting-started","loc":{"lines":{"from":705,"to":715}}}}],["647",{"pageContent":"11. Obtain the Provider URL\n\n    - Navigate to your App Registration > Overview\n    - Click endpoints\n      ![Endpoints - Azure AD Dashboard](/images/docs/gitpod-dedicated/guides/getting-started/sso/azure/endpoints.webp)\n    - Find the entry for `OpenID Connect metadata document`\n    - Use the URL before the `.well-known/openid-configuration` segment,\n        - For example: `https://login.microsoftonline.com/512571ea-9fc5-494e-a300-625b33c8efa6/v2.0/`\n\n12. Proceed to Verify the SSO configuration on the Github SSO setup page: : [Clicking “Verify SSO Configuration”](/docs/gitpod-dedicated/guides/getting-started#:~:text=or%20Azure%20AD.-,General%20instructions,-You%20will%20need)\n\n</div>\n\n</details>\n\n</div>\n\n</details>\n<br>\n<details class=\"ml-2\">\n\n<summary class=\"text-body text-medium mt-micro font-bold\">Add an SCM integration for GitHub, GitLab or Bitbucket</summary>\n\n<div class=\"ml-2 mt-micro\">","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/getting-started","loc":{"lines":{"from":715,"to":738}}}}],["648",{"pageContent":"</details>\n<br>\n<details class=\"ml-2\">\n\n<summary class=\"text-body text-medium mt-micro font-bold\">Add an SCM integration for GitHub, GitLab or Bitbucket</summary>\n\n<div class=\"ml-2 mt-micro\">\n\nIntegrate it with your SCM as per the steps shown in the UI or below. You can now create your first workspace and start using Gitpod! For more information on how to use Gitpod, please see the [Getting Started guide of Gitpod](/docs/introduction/getting-started).","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/getting-started","loc":{"lines":{"from":738,"to":746}}}}],["649",{"pageContent":"-   Look at [these steps](/docs/configure/authentication/gitlab#registering-a-self-hosted-gitlab-installation) for information on how to integrate [`GitLab.com`](https://gitlab.com/) with your Gitpod instance. You will need to enter `gitlab.com` as the `Provider Host Name` in the New Git Integration Modal if you want to use gitlab.com, contrary to what is described.\n-   Look at these [these steps](/docs/configure/authentication/github-enterprise) for information on how to integrate [`GitHub.com`](http://github.com/) with your Gitpod instance. You will need to enter `github.com` as the `Provider Host Name` in the New Git Integration Modal if you want to use github.com, contrary to what is described.","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/getting-started","loc":{"lines":{"from":748,"to":749}}}}],["650",{"pageContent":"-   Look at [these steps](/docs/configure/authentication/bitbucket-server) for information on how to integrate [`Bitbucket Server`](https://www.atlassian.com/de/software/bitbucket/enterprise) with your Gitpod instance. Select `Bitbucket Server` as the `Provider Type` in the New Git Integration Modal. For bitbucket.org this requires configuring an “OAuth consumer” on a “workspace”. This is slightly different from the documented Bitbucket Server integration. See [gitpod PR #9894](https://github.com/gitpod-io/gitpod/pull/9894#pullrequestreview-969013833) for an example.","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/getting-started","loc":{"lines":{"from":750,"to":750}}}}],["651",{"pageContent":"![Git Integrations Preview in Gitpod Dashboard](/images/docs/gitpod-dedicated/guides/getting-started/git-integration.webp)\n\n> ℹ️ The first workspace start(s) will take longer than usual, sometimes exceeding 10 minutes depending on the workspace image used. This is because an image first needs to be built, a node needs to be spun up, and that image then downloaded to the node. However, subsequent workspace starts will be significantly faster.\n\n</div>\n\n</details>","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/getting-started","loc":{"lines":{"from":752,"to":758}}}}],["652",{"pageContent":"## 4. Frequently Asked Questions\n\n<details class=\"ml-8\">\n<summary class=\"text-body text-p-medium\">Click to view FAQ</summary>\n\n**Q.** Can we install our own custom resources inside the same AWS account where Gitpod Dedicated is installed?\n**A.** No. Gitpod Dedicated is installed in a dedicated AWS account. This is to ensure that Gitpod Dedicated can be installed without any conflicts with existing resources in your AWS account. If you have special requirements for the account please speak with your Gitpod account manager.\n\n**Q.** If we use the allPublic networking mode do we still need to provide a `CIDR range of our network`?  \n**A.** No. The `CIDR range of our network` is only required when using the mixed or private networking modes.","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/getting-started","loc":{"lines":{"from":760,"to":769}}}}],["653",{"pageContent":"**Q.** If the Gitpod internal range of `100.70.0.0/16` does not need to be routable from my network, why do we need to specify the `CIDR range of our network`?  \n**A.** User workspaces traffic must cross this range when reaching the rest of your network. If there are common internal services and systems that developers may need to access that overlap with this range, the experience may be inconsistent and difficult to troubleshoot. To avoid this, Gitpod can adapt the internally used CIDR range for workspaces to the customer’s CIDR range.\n\n**Q.** What if the `100.70.0.0/16` range overlaps with my network?  \n**A.** Please contact your Gitpod account manager for assistance. There is some flexibility to the CIDR range used internally by Gitpod.","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/getting-started","loc":{"lines":{"from":771,"to":775}}}}],["654",{"pageContent":"**Q.** Why two templates?  \n**A.** The `infrastructure-creation-role-template.json` CloudFormation template is used to create a role with the minimum permissions required to install and update Gitpod Dedicated. This role and its policies are used to install the second Cloudformation template.\n\n**Q.** Can the stack created by `infrastructure-creation-role-template.json` be deleted after executing the `<company>-gitpod-template.json`?  \n**A.** No, the stack created by `infrastructure-creation-role-template.json` should be maintained. The role created is also used when updates are provided to the `<company>-gitpod-template.jsonn` template. For more details on infrastructure updates, please see [Deployment and Updates](/docs/gitpod-dedicated/background/deployment-updates).","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/getting-started","loc":{"lines":{"from":777,"to":781}}}}],["655",{"pageContent":"**Q.** What happens if my Cloudformation stack fails to install?  \n**A.** If the stack fails to install, you should delete the stack and try again. There are a few resources that need to be cleaned up manually before you attempt another installation. See [Deleting your Gitpod installation](/docs/gitpod-dedicated/guides/deleting-your-gitpod-installation) for details.\n\n**Q.** What if we want to use a custom domain name?  \n**A.** Please see [Using Custom Domains](/docs/gitpod-dedicated/guides/using-custom-domains) for more information about using a custom domain.","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/getting-started","loc":{"lines":{"from":783,"to":787}}}}],["656",{"pageContent":"**Q.** What if we want to use a custom domain name?  \n**A.** Please see [Using Custom Domains](/docs/gitpod-dedicated/guides/using-custom-domains) for more information about using a custom domain.\n\n**Q.** Can we grant public access to webhooks and IDP services without exposing the entire Gitpod application to the Internet?  \n**A.** Yes. Gitpod Dedicated can be configured to expose webhooks and IDP services on public endpoints. This can be helpful for connecting to OIDC providers such as Okta, Azure AD. This option also makes it easy for developers to connect to your instance without having to route through a VPN or transit gateway. See [Networking and Data flows](/docs/gitpod-dedicated/reference/networking-data-flows) for more information.\n\n</details>","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/getting-started","loc":{"lines":{"from":787,"to":793}}}}],["657",{"pageContent":"---\nsection: guides\ntitle: Using Custom Domains - Gitpod Dedicated docs\n---\n\n# (Not) modifying your AWS Account\n\n> ℹ️ To ensure Gitpod's ability to provide a satisfactory level of service for Gitpod Dedicated, it is essential to follow these rules.\n\nGitpod Dedicated is operated by Gitpod, but runs in the customer’s cloud account, giving the customer full visibility as well as the potential to modify components and settings. However, Gitpod kindly asks to not apply any modifications as any changes to Gitpod or the environment it is running in could potentially destabilize its operations. In detail:\n\n-   Customers should not make any modifications to what is running within the cell. However, \"reading\" or viewing what is running is expected\n-   Modifying what is running or adding additional resources to the installation is not supported\n-   It is expected that the AWS account running the Gitpod cell is _only_ used to run Gitpod","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/not-modify-your-aws-account","loc":{"lines":{"from":1,"to":14}}}}],["658",{"pageContent":"---\nsection: guides\ntitle: Reserving AWS Instances to Save Cost - Gitpod Dedicated docs\n---\n\n# Reserving AWS Instances to Save Cost\n\nTo reduce infrastructure cost, it is best practice to reserve capacity on AWS for known, long-running and predictable workloads. This also applies to Gitpod. This guide gives recommendations on which reservations to make initially.\n\nThe requirements around machine types for Gitpod Dedicated in different scenarios are as follows:\n\n### Instance requirements without load (0 workspaces):\n\n-   For supporting services, dashboard, etc. Gitpod requires:\n    -   1 `m6a.large`\n    -   3 `m6a.xlarge`\n    -   1 `m6a.2xlarge`\n-   When no workspaces are running, Gitpod requires:\n    -   0 `c6id.8xlarge` (the node group is scaled to 0)","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/reserving-aws-instances-to-save-cost","loc":{"lines":{"from":1,"to":19}}}}],["659",{"pageContent":"### Instance requirements with load:\n\n-   For supporting services, dashboard, etc:\n    -   1 `m6a.large`\n    -   3 `m6a.xlarge`\n    -   1 `m6a.2xlarge`\n-   For workspaces:\n\n    > ℹ️ The main driver of Gitpod infrastructure cost are the machines used to run workspaces. However, these machines are scaled to 0 when no workspaces are running. Before making reservations here, it is best to first observe the real world usage of this machine type within the first few weeks and only then make reservations if deemed cost-effective. Reservations also apply for when instances are not running, so the cost savings from the reservations needs to outweigh the cost of the reservations when instances are not running (i.e. likely outside of work hours). This is because reserved instances are billed on an hourly basis and are reserved for every hour of the reservation period (e.g. 1year). See [AWS docs](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/concepts-reserved-instances-application.html).","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/reserving-aws-instances-to-save-cost","loc":{"lines":{"from":21,"to":29}}}}],["660",{"pageContent":"-   x `c6id.8xlarge`\n\n        -   Example calculation for x: 20 developers, each using _large_ workspaces, with on average one workspace during work hours each: (20 devs \\* 1 workspace) / 4 workspaces per instance → 5 instances during _working hours_.\n\n        <details class=\"ml-4\">\n\n        <summary><span class=\"pl-5\"> Maximum number of workspaces per node (subject to change)</span></summary>\n\n        -   **1** workspace instance using a class **XXLarge** (30 cores/54GiB RAM)\n        -   **2** workspace instances using a class **XLarge** (14 cores/30GiB RAM)\n        -   **4** workspace instances using a class **Large** (7 cores/16GiB RAM)\n        -   **7** workspace instances using a class **Standard** (4 cores/8GiB RAM)\n\n        </details>","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/reserving-aws-instances-to-save-cost","loc":{"lines":{"from":31,"to":44}}}}],["661",{"pageContent":"## Recommended initial reservations\n\nGiven the above, the initial recommended reservations are as follows:\n\n-   1 `m6a.large`\n-   3 `m6a.xlarge`\n-   1 `m6a.2xlarge`\n-   0 `c6id.8xlarge` until data is available to make an informed reservation - see above.","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/reserving-aws-instances-to-save-cost","loc":{"lines":{"from":46,"to":53}}}}],["662",{"pageContent":"---\nsection: guides\ntitle: Updating the Gitpod Dedicated Infrastructure - Gitpod Dedicated docs\n---\n\n# Updating the Gitpod Dedicated Infrastructure\n\nOccasionally, it is necessary to update your Gitpod Dedicated infrastructure components to improve performance,\nreliability, and security. This guide explains how to apply these updates using CloudFormation templates. Most\napplication updates can be applied directly and do not require infrastructure changes.\nSee [Deployment and Updates](/docs/gitpod-dedicated/background/deployment-updates) for more information about those.","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/updating-gitpod-dedicated-infrastructure","loc":{"lines":{"from":1,"to":11}}}}],["663",{"pageContent":"## Gitpod Dedicated Infrastructure Update Process\n\n1. Receive the updated CloudFormation templates from your Gitpod Account Manager. Note that you may receive either one\n   or two templates depending on the updates required.\n2. If you receive two templates, apply them in this order:\n    - **First**, update the stack for the infrastructure creation role (`infrastructure-creation-role-template.json`).\n        - Important: When updating this stack, **do not select any role** under permissions.\n    - **Then**, update the stack for the Gitpod Infrastructure.\n        - Important: When updating this stack, **select the `GitpodSetupAndInitialEKSUserAdmin` role** under\n          permissions. This role is created by the infrastructure creation role template.\n3. If you only receive one template, follow the relevant instructions as described below.","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/updating-gitpod-dedicated-infrastructure","loc":{"lines":{"from":13,"to":23}}}}],["664",{"pageContent":"Consult the [Infrastructure Update Changelog](/docs/gitpod-dedicated/reference/infrastructure-update-changelog) or your\nGitpod Account Manager to determine which stacks need updates and the number of templates you should apply.","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/updating-gitpod-dedicated-infrastructure","loc":{"lines":{"from":25,"to":26}}}}],["665",{"pageContent":"## Detailed Steps\n\n### 1. Update Infrastructure Creation Role\n\n1. Go to the AWS CloudFormation page and select the stack for the infrastructure creation role.\n2. Choose \"Create change set for current stack\" in the stack actions.\n3. Select \"Replace current template\" and upload the updated CloudFormation template for the infrastructure creation\n   role.\n4. Follow the prompts in the AWS console UI.\n5. Under permissions, **do not** select any role.\n6. Acknowledge that IAM resources may be created and press \"Submit\".\n7. Once a change set is published, verify the changes.\n8. Execute the change set. Choose \"Roll back all stack resources\" for behavior on provisioning failure. Wait for the\n   update to complete, and the status will change to `UPDATE_COMPLETE`.","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/updating-gitpod-dedicated-infrastructure","loc":{"lines":{"from":28,"to":41}}}}],["666",{"pageContent":"### 2. Update Gitpod Infrastructure\n\n1. Return to the AWS CloudFormation page and select the stack for the Gitpod Infrastructure.\n\n     <details>\n\n     <summary class=\"text-body mt-3 text-p-medium ml-6\"> Screenshot </summary>\n\n     <div class=\"ml-8 mt-macro\">\n\n    ![Configure AWS Environment Variables](/images/docs/gitpod-dedicated/guides/updating-gitpod-dedicated-infrastructure/navigate-aws-console.webp)\n\n     </div>\n     </details>\n\n2. Select stack action, create change set for current stack\n\n     <details>\n\n     <summary class=\"text-body mt-3 text-p-medium ml-6\"> Screenshot </summary>\n\n     <div class=\"ml-8 mt-macro\">\n\n    ![Select stack from AWS console](/images/docs/gitpod-dedicated/guides/updating-gitpod-dedicated-infrastructure/select-stack.webp)\n\n     </div>\n     </details>\n\n3. Select \"Replace current template\" and upload the updated CloudFormation template for Gitpod Infrastructure.\n\n     <details>","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/updating-gitpod-dedicated-infrastructure","loc":{"lines":{"from":43,"to":73}}}}],["667",{"pageContent":"</div>\n     </details>\n\n3. Select \"Replace current template\" and upload the updated CloudFormation template for Gitpod Infrastructure.\n\n     <details>\n\n     <summary class=\"text-body mt-3 text-p-medium ml-6\"> Screenshot </summary>\n\n     <div class=\"ml-8 mt-macro\">\n\n    ![Replace current template](/images/docs/gitpod-dedicated/guides/updating-gitpod-dedicated-infrastructure/replace-template.webp)\n\n     </div>\n     </details>\n\n4. Follow along in the process as described in the AWS console UI\n\n> ❗️ Under permissions ensure you select `GitpodSetupAndInitialEKSUserAdmin` as the stack execution role. This role was\n> created by applying a CloudFormation template supplied by Gitpod in the initial installation process.\n> See [Getting Started](/docs/gitpod-dedicated/guides/getting-started) for more information.\n> ![Update Permissions](/images/docs/gitpod-dedicated/guides/updating-gitpod-dedicated-infrastructure/permissions-update.webp)","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/updating-gitpod-dedicated-infrastructure","loc":{"lines":{"from":73,"to":94}}}}],["668",{"pageContent":"6.  Acknowledge that IAM resources may be created and press \"Submit\".\n\n     <details>\n\n     <summary class=\"text-body mt-3 text-p-medium ml-6\"> Screenshot </summary>\n\n     <div class=\"ml-8 mt-macro\">\n\n    ![ACK IAM Resources](/images/docs/gitpod-dedicated/guides/updating-gitpod-dedicated-infrastructure/ack-IAM-resources.webp)\n\n     </div>\n     </details>\n\n7.  Once a change set is published, verify the changes.\n\n     <details>\n\n     <summary class=\"text-body mt-3 text-p-medium ml-6\"> Screenshot </summary>\n\n     <div class=\"ml-8 mt-macro\">\n\n    ![Set changes published](/images/docs/gitpod-dedicated/guides/updating-gitpod-dedicated-infrastructure/changes-published.webp)\n\n     </div>\n     </details>\n\n8.  Execute the change set. Choose \"Roll back all stack resources\" for behavior on provisioning failure. Wait for the\n    update to complete. Execution will take a few minutes\n\n        <details>\n\n        <summary class=\"text-body mt-3 text-p-medium ml-6\"> Screenshot </summary>","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/updating-gitpod-dedicated-infrastructure","loc":{"lines":{"from":96,"to":127}}}}],["669",{"pageContent":"<details>\n\n        <summary class=\"text-body mt-3 text-p-medium ml-6\"> Screenshot </summary>\n\n        <div class=\"ml-8 mt-macro\">\n\n    ![Execute set changes](/images/docs/gitpod-dedicated/guides/updating-gitpod-dedicated-infrastructure/execute-change-set.webp)\n\n        </div>\n        </details>\n\n        <details>\n\n        <summary class=\"text-body mt-4 text-p-medium ml-6\"> Once done, the status will change to <code>UPDATE_COMPLETE</code></summary>\n\n        <div class=\"ml-8 mt-macro\">\n\n    ![Update completed](/images/docs/gitpod-dedicated/guides/updating-gitpod-dedicated-infrastructure/update-complete.webp)\n\n        </div>\n        </details>\n\nYour Gitpod Dedicated infrastructure should now be updated successfully.","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/updating-gitpod-dedicated-infrastructure","loc":{"lines":{"from":127,"to":149}}}}],["670",{"pageContent":"---\nsection: guides\ntitle: Using Private ECR Repositories for Workspace Images - Gitpod Dedicated docs\n---\n\n# Using Private ECR Repositories for Workspace Images\n\n> ⚠️ **Limitation**: Private ECR repositories currently cannot be used when specified within a [custom Dockerfile](/docs/configure/workspaces/workspace-image#using-a-custom-dockerfile) that Gitpod builds into an image. Images need to be built outside of Gitpod, and then referenced directly in the .gitpod.yml . Ensure the images adhere to the requirements described [here](/docs/configure/workspaces/workspace-image#custom-base-image).","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/use-private-ecr-repos-for-workspace-images","loc":{"lines":{"from":1,"to":8}}}}],["671",{"pageContent":"> ⚠️ **Note**: When using a private image in combination with `gp validate`, you'll need to [authenticate against the private registry](https://docs.aws.amazon.com/AmazonECR/latest/userguide/registry_auth.html) in your workspace.\n> This is because `gp validate` emulates a workspace start using the Docker daemon running in your workspace. To prevent unintended security repercussions, the credentials used during workspace start are not automatically made available in the workspace.\n\nTake the following steps to use a private ECR repository as the source for workspace images:\n\n1. Navigate to the AWS account where the target ECR repository is in\n2. Modify the target ECR repositories resource policy (repositories > permissions) with the following entry:","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/use-private-ecr-repos-for-workspace-images","loc":{"lines":{"from":10,"to":16}}}}],["672",{"pageContent":"1. Navigate to the AWS account where the target ECR repository is in\n2. Modify the target ECR repositories resource policy (repositories > permissions) with the following entry:\n\n    ```json\n    {\n    \t\"Version\": \"2012-10-17\",\n    \t\"Statement\": [\n    \t\t{\n    \t\t\t\"Sid\": \"Gitpod Access\",\n    \t\t\t\"Action\": [\n    \t\t\t\t\"ecr:BatchCheckLayerAvailability\",\n    \t\t\t\t\"ecr:BatchGetImage\",\n    \t\t\t\t\"ecr:GetDownloadUrlForLayer\"\n    \t\t\t],\n    \t\t\t\"Effect\": \"Allow\",\n    \t\t\t\"Principal\": {\n    \t\t\t\t\"AWS\": [\n    \t\t\t\t\t\"arn:aws:iam::<your-gitpod-dedicated-aws-account-id>:root\"\n    \t\t\t\t]\n    \t\t\t}\n    \t\t}\n    \t]\n    }","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/use-private-ecr-repos-for-workspace-images","loc":{"lines":{"from":16,"to":38}}}}],["673",{"pageContent":"```\n\nYou can now reference images from this ECR repository in [`.gitpod.yml` files](/docs/references/gitpod-yml) by specifying it in the `image` field: `image: <aws-ecr-url-prefix>.amazonaws.com/<your-image-name:tag>`. Ensure the images adhere to the requirements described [here](/docs/configure/workspaces/workspace-image#custom-base-image).","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/use-private-ecr-repos-for-workspace-images","loc":{"lines":{"from":39,"to":41}}}}],["674",{"pageContent":"---\nsection: guides\ntitle: Using Custom Domains - Gitpod Dedicated docs\n---\n\n# Using Custom Domains\n\nTo enable your Gitpod Dedicated instance to use your custom domain, you will need to follow the process below. For more information about how to create a Gitpod Dedicated instance, please see [Getting Started](/docs/gitpod-dedicated/guides/getting-started).\n\n> ℹ️ Changing to a custom domain can also be done once an instance is already running. However, this requires coordination with Gitpod:\n\n-   Gitpod needs to ship a new release to the instance that updates the internally used domain\n-   The customer needs to recreate the SSO, git provider and OIDC configurations\n\nThe process to use custom domains requires:\n\n1. The TLS certificate to be used with the custom domain needs to be uploaded to AWS Certificate Manager.","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/using-custom-domains","loc":{"lines":{"from":1,"to":17}}}}],["675",{"pageContent":"The process to use custom domains requires:\n\n1. The TLS certificate to be used with the custom domain needs to be uploaded to AWS Certificate Manager.\n\n    > ⚠️ You are responsible the ongoing validity of this certificate. The certificate must be valid for the following (sub)domains:\n    >\n    > - `yourinstance.yourcustomdomain.com`\n    > - `*.yourinstance.yourcustomdomain.com`\n    > - `*.ws.yourinstance.yourcustomdomain.com`\n\n2. The `ARN of the certificate` needs to be provided to Gitpod along with the `domain name`. The certificate needs to be accessible to the account where Gitpod is installed in.\n3. The instance will be created as per [Getting Started](/docs/gitpod-dedicated/guides/getting-started)\n4. Once created, you need to ensure that you can actually route to the instance:\n\n    1. Navigate to the DNS zone that controls your domain.\n    2. Add a record the following CNAME records:","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/using-custom-domains","loc":{"lines":{"from":17,"to":32}}}}],["676",{"pageContent":"1. Navigate to the DNS zone that controls your domain.\n    2. Add a record the following CNAME records:\n\n        > ℹ️ You can also find the list of domains that need to be redirected to by navigate to Route 53 > DNS zones > [your-instance-name.gitpod.cloud](http://your-instance-name.gitpod.cloud) in the AWS account that Gitpod Dedicated is running in. All `A` ,`AAAA` and `CNAME` records require a redirect from your custom domain.\n\n        - From `gitpod.yourcustomdomain.com` to `your-instance-name.gitpod.cloud`\n        - From `*.gitpod.yourcustomdomain.com` to `*.your-instance-name.gitpod.cloud`\n        - From `*.ws.gitpod.yourcustomdomain.com` to `*.ws.your-instance-name.gitpod.cloud`\n        - From `*.lssh.gitpod.yourcustomdomain.com` to `*.lssh.your-instance-name.gitpod.cloud`\n        - From `services.gitpod.yourcustomdomain.com` to `services.your-instance-name.gitpod.cloud`","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/using-custom-domains","loc":{"lines":{"from":32,"to":41}}}}],["677",{"pageContent":"---\nsection: guides\ntitle: Using a Custom or Private CA - Gitpod Dedicated docs\n---\n\n# Using a Custom or Private CA\n\nTo enable your enable your Gitpod Dedicated instance to use certificates signed by a custom or private Certificate Authority, you will need to follow the process below. For more information about how to create a Gitpod Dedicated instance, please see [Getting Started](/docs/gitpod-dedicated/guides/getting-started).\n\n> ℹ️ Adding a custom CA can also be done once an instance is already running. However, this requires coordination with Gitpod, as Gitpod needs to ship a new release to the instance that updates the internally used domain.\n\nThe process to use custom domains requires:\n\n1. Upload the custom CAs certificate needs to AWS secret Manager.\n\n    <details class=\"ml-4\">\n\n    <summary class=\"text-body text-p-medium mt-micro\">How to upload the CA certificate to AWS Secret Manager in the same AWS account that the Gitpod instance runs in.</summary>","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/using-custom-or-private-ca","loc":{"lines":{"from":1,"to":18}}}}],["678",{"pageContent":"<summary class=\"text-body text-p-medium mt-micro\">How to upload the CA certificate to AWS Secret Manager in the same AWS account that the Gitpod instance runs in.</summary>\n\n    1. In the AWS account that the Gitpod instance runs in, navigate to the Secret Manager within the AWS Console. Click on Store a new secret. Select the Secret Type as Other and input your certificate in plain text as illustrated below\n       ![Upload CA Certificate to same AWS Account](/images/docs/gitpod-dedicated/guides/using-custom-or-private-ca/upload-CA-certificate.webp)\n    2. You can either choose to use the default KMS Encryption Key or create a new one\n    3. Follow the instructions on screen and store the secret\n    4. Note down the ARN of the secret\n\n    </details>\n\n    <details class=\"ml-4\">\n\n    <summary class=\"text-body text-p-medium mt-micro\">How to upload the CA certificate to AWS Secret Manager to another AWS account and make it accessible to the Gitpod instance’s AWS account</summary>","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/using-custom-or-private-ca","loc":{"lines":{"from":18,"to":30}}}}],["679",{"pageContent":"1. In the preferred AWS account, navigate to the Secret Manager within the AWS Console. Click on Store a new secret. Select the Secret Type as Other and input your certificate in plain text as illustrated below\n       ![Upload CA Certificate to other AWS Account](/images/docs/gitpod-dedicated/guides/using-custom-or-private-ca/upload-CA-certificate-other-aws-account.webp)\n    2. Create or choose a different KMS Encryption key than the default `aws/secretmanager` key. This is very important because secrets signed with the default key cannot be shared with other accounts. When creating the key, allow access to the Gitpod instance’s AWS account to the key by providing the account ID as can be seen in the image:\n       ![Choose different KMS encryption key](/images/docs/gitpod-dedicated/guides/using-custom-or-private-ca/KMS-key.webp)\n        - If you are using a pre-existing encryption key, you should add a policy like this:\n            ```json\n            {","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/using-custom-or-private-ca","loc":{"lines":{"from":32,"to":38}}}}],["680",{"pageContent":"- If you are using a pre-existing encryption key, you should add a policy like this:\n            ```json\n            {\n            \t\"Sid\": \"Allow use of the key\",\n            \t\"Effect\": \"Allow\",\n            \t\"Principal\": {\n            \t\t\"AWS\": \"arn:aws:iam::<gitpod-instance-aws-id>:root\"\n            \t},\n            \t\"Action\": [\n            \t\t\"kms:Encrypt\",\n            \t\t\"kms:Decrypt\",\n            \t\t\"kms:ReEncrypt*\",\n            \t\t\"kms:GenerateDataKey*\",\n            \t\t\"kms:DescribeKey\"\n            \t],\n            \t\"Resource\": \"<* OR ARN of key>\"\n            }\n            ```\n    3. Store the secret following the instructions\n    4. Once the secret is created, edit the permissions of the secret and allow access from the cell AWS account (secret-arn is the arn of secret that was just created)","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/using-custom-or-private-ca","loc":{"lines":{"from":38,"to":57}}}}],["681",{"pageContent":"```json\n        {\n        \t\"Version\": \"2012-10-17\",\n        \t\"Statement\": [\n        \t\t{\n        \t\t\t\"Effect\": \"Allow\",\n        \t\t\t\"Principal\": {\n        \t\t\t\t\"AWS\": \"arn:aws:iam::<gitpod-instance-aws-id>:root\"\n        \t\t\t},\n        \t\t\t\"Action\": \"secretsmanager:GetSecretValue\",\n        \t\t\t\"Resource\": \"<secret-arn>\"\n        \t\t}\n        \t]\n        }","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/using-custom-or-private-ca","loc":{"lines":{"from":59,"to":72}}}}],["682",{"pageContent":"```\n\n    5. Note down the ARN of the secret.\n\n    </details>\n\n2. Provide the `ARN of the certificate` to your Gitpod Account Manager. The certificate needs to be accessible to the account where Gitpod is installed in.\n3. Create the instance as per [Getting Started](/docs/gitpod-dedicated/guides/getting-started).\n4. Domains signed by the custom CA should now be accessible.","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/using-custom-or-private-ca","loc":{"lines":{"from":73,"to":81}}}}],["683",{"pageContent":"---\nsection: guides\ntitle: Using Private VPC Resolvers - Gitpod Dedicated docs\n---\n\n# Using Private VPC Resolvers\n\nTo enable your Gitpod Dedicated instance (and thus your workspaces) to resolve domains that are managed via a private DNS zone, please follow these steps:\n\n1. Navigate to Route53 and the hosted Zone managing the domains you want the Gitpod instance to be able to route to. Navigate to the configuration section of the hosted zone. If you are creating a new zone, this will be the first screen shown.\n\n    <details class=\"ml-4\">\n\n    <summary class=\"text-body text-p-medium mt-micro\">You should now see a configuration screen like this:</summary>\n\n    ![Gitpod Dedicated Configuration screen](/images/docs/gitpod-dedicated/guides/using-private-vpc-resolvers/configuration-screen.webp)\n\n    </details>","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/using-private-vpc-resolvers","loc":{"lines":{"from":1,"to":18}}}}],["684",{"pageContent":"![Gitpod Dedicated Configuration screen](/images/docs/gitpod-dedicated/guides/using-private-vpc-resolvers/configuration-screen.webp)\n\n    </details>\n\n2. Add the Gitpod VPC to the “VPCs to associate with the hosted zone”. If you want to reconfigure an existing existing zone, you will need to do this via the AWS CLI.\n   ![Gitpod Dedicated Associate VPC screen](/images/docs/gitpod-dedicated/guides/using-private-vpc-resolvers/associate-vpc-screen.webp)\n\n3. The Gitpod VPC, and thus the Gitpod instance and workspaces should now be able to resolve all of the private DNS records that the hosted Zone has access to.","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/guides/using-private-vpc-resolvers","loc":{"lines":{"from":18,"to":25}}}}],["685",{"pageContent":"---\nsection: gitpod-dedicated/reference\ntitle: Gitpod Dedicated Architecture\n---\n\n# Gitpod Dedicated Architecture\n\n## Overview\n\n![Gitpod Dedicated Architecture overview](/images/docs/gitpod-dedicated/reference/architecture/architecture-overview.webp)\n\nGitpod Dedicated is a single-tenant installation of Gitpod in the customer's AWS account. This account is distinct from the account(s) where the customer's source control management (SCM) system and other development infrastructure and services are hosted. Gitpod Dedicated connects to the Gitpod Dedicated control plane (which runs in Gitpod’s AWS account) via an outgoing connection that uses AWS PrivateLink.","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/architecture","loc":{"lines":{"from":1,"to":12}}}}],["686",{"pageContent":"## Architecture Details\n\n![Gitpod Dedicated Architecture detailed overview](/images/docs/gitpod-dedicated/reference/architecture/architecture-details.webp)\n\nGitpod Dedicated uses AWS native services such as ECR, EKS, Lambda, RDS, S3 and CloudWatch to operate. These [are automatically installed](/docs/gitpod-dedicated/background/deployment-updates) into the AWS account by Gitpod. The Dashboard (Product UI) and Workspace components run in their own K8s clusters, connected to the customer’s development infrastructure via a transit gateway attachment.","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/architecture","loc":{"lines":{"from":14,"to":18}}}}],["687",{"pageContent":"## Architecture Deep Dive\n\n> ℹ️ This architecture diagram is representative of the “All Private” networking mode only. Please refer to [Networking and Data Flows](/docs/gitpod-dedicated/reference/networking-data-flows) for more details and information on how the other modes differ.\n\n![Gitpod Dedicated Architecture deep dive](/images/docs/gitpod-dedicated/reference/architecture/architecture-deep-dive.webp)\n\nFor a more detailed view from a networking perspective, please see the [Network Diagram](/docs/gitpod-dedicated/reference/networking-data-flows#networking-modes-and-diagrams).\n\nFor more details on how Gitpod is deployed and operated, please see [Deployment and Updates](/docs/gitpod-dedicated/background/deployment-updates) for more details.","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/architecture","loc":{"lines":{"from":20,"to":28}}}}],["688",{"pageContent":"---\nsection: gitpod-dedicated/reference\ntitle: Infrastructure cost - Gitpod Dedicated docs\n---\n\n# AWS IAM permission requirements\n\n> ℹ️ For more information on how and when these permissions are used, please see [Deployment and Updates](/docs/gitpod-dedicated/background/deployment-updates).\n\n**Glossary**: <br/>\n\n-   Substrate = The control plane that manages Gitpod Dedicated instances <br/>\n-   Bootstrap = Initial set up required to create an instance of Gitpod Dedicated <br/>\n-   Cell = An instance of Gitpod Dedicated\n\nGitpod Dedicated requires different sets of permissions to function. These vary depending on the phase of operation:\n\n-   Permissions needed to execute the CloudFormation template that installs the Gitpod Infrastructure\n-   Permissions needed by the instance to bootstrap and operate\n-   Debugging role that can be assumed by the customer only","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/aws-iam-permission-requirements","loc":{"lines":{"from":1,"to":20}}}}],["689",{"pageContent":"For more information on the phases during which these permissions are needed and how they relate, please refer to [Deployment and Updates](/docs/gitpod-dedicated/background/deployment-updates).\n\n<details>\n\n<summary class=\"text-p-medium mt-8 text-important\"><b>Permissions needed to execute the CloudFormation template that installs the Gitpod Infrastructure</b></summary>\n\n<div class=\"ml-4 mt-2\">\n\nThe permissions needed for this are defined by a separate CloudFormation which is first applied in the AWS account that Gitpod is to be installed into. More information on this can be found in the [Getting Started guide](/docs/gitpod-dedicated/guides/getting-started). You can also find the CloudFormation template below:\n\n<div class=\"mt-2\">\n   <a href='/images/docs/gitpod-dedicated/reference/aws-iam-permission-requirements/infrastructure-creation-role-template.json' download>infrastructure-creation-role-template.json</a>\n</div>\n\n</div>\n\n</details>\n\n<details>","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/aws-iam-permission-requirements","loc":{"lines":{"from":22,"to":40}}}}],["690",{"pageContent":"</div>\n\n</details>\n\n<details>\n\n<summary class=\"text-p-medium mt-8 text-important\"><b>Permissions needed by the instance to bootstrap and operate</b></summary>\n\n<div class=\"ml-4 mt-2\">\n\nDuring operations, the following permissions are required for a Gitpod Dedicated instance to run within a customer's AWS account. No permission to assume a role/permission from outside is needed.\n\n<details>\n<summary><b>Permissions required by an instance named <code>foobar</code>:</b></summary>","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/aws-iam-permission-requirements","loc":{"lines":{"from":40,"to":53}}}}],["691",{"pageContent":"```json\n{\n  \"key\": \"vpcflowlogsroleA49E581D\",\n  \"value\": {\n    \"Type\": \"AWS::IAM::Role\",\n    \"Properties\": {\n      \"AssumeRolePolicyDocument\": {\n        \"Statement\": [\n          {\n            \"Action\": \"sts:AssumeRole\",\n            \"Effect\": \"Allow\",\n            \"Principal\": {\n              \"Service\": \"vpc-flow-logs.amazonaws.com\"\n            }\n          }\n        ],\n        \"Version\": \"2012-10-17\"\n      }\n    },\n    \"Metadata\": {\n      \"aws:cdk:path\": \"gitpod-cell/vpc-flow-logs-role/Resource\"\n    }\n  }\n}\n{\n  \"key\": \"vpcflowlogsroleDefaultPolicyAAD1B3D4\",\n  \"value\": {\n    \"Type\": \"AWS::IAM::Policy\",\n    \"Properties\": {\n      \"PolicyDocument\": {\n        \"Statement\": [\n          {\n            \"Action\": [\n              \"logs:CreateLogStream\",\n              \"logs:PutLogEvents\",\n              \"logs:DescribeLogStreams\"\n            ],\n            \"Effect\": \"Allow\",\n            \"Resource\": {\n              \"Fn::GetAtt\": [\n                \"vpcflowlogsgroup4676BF4E\",\n                \"Arn\"","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/aws-iam-permission-requirements","loc":{"lines":{"from":55,"to":96}}}}],["692",{"pageContent":"],\n            \"Effect\": \"Allow\",\n            \"Resource\": {\n              \"Fn::GetAtt\": [\n                \"vpcflowlogsgroup4676BF4E\",\n                \"Arn\"\n              ]\n            }\n          },\n          {\n            \"Action\": \"iam:PassRole\",\n            \"Effect\": \"Allow\",\n            \"Resource\": {\n              \"Fn::GetAtt\": [\n                \"vpcflowlogsroleA49E581D\",\n                \"Arn\"\n              ]\n            }\n          }\n        ],\n        \"Version\": \"2012-10-17\"\n      },\n      \"PolicyName\": \"vpcflowlogsroleDefaultPolicyAAD1B3D4\",\n      \"Roles\": [\n        {\n          \"Ref\": \"vpcflowlogsroleA49E581D\"\n        }\n      ]\n    },\n    \"Metadata\": {\n      \"aws:cdk:path\": \"gitpod-cell/vpc-flow-logs-role/DefaultPolicy/Resource\"\n    }\n  }\n}\n{\n  \"key\": \"registryfacadepolicyD3B21BD1\",\n  \"value\": {\n    \"Type\": \"AWS::IAM::ManagedPolicy\",\n    \"Properties\": {\n      \"PolicyDocument\": {\n        \"Statement\": [\n          {\n            \"Action\": [","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/aws-iam-permission-requirements","loc":{"lines":{"from":96,"to":138}}}}],["693",{"pageContent":"{\n  \"key\": \"registryfacadepolicyD3B21BD1\",\n  \"value\": {\n    \"Type\": \"AWS::IAM::ManagedPolicy\",\n    \"Properties\": {\n      \"PolicyDocument\": {\n        \"Statement\": [\n          {\n            \"Action\": [\n              \"ecr:BatchCheckLayerAvailability\",\n              \"ecr:BatchGetImage\",\n              \"ecr:GetDownloadUrlForLayer\",\n              \"ecr:GetAuthorizationToken\"\n            ],\n            \"Effect\": \"Allow\",\n            \"Resource\": [\n              {\n                \"Fn::GetAtt\": [\n                  \"baseimagebuildrepoD634AA75\",\n                  \"Arn\"\n                ]\n              },\n              {\n                \"Fn::GetAtt\": [\n                  \"workspaceimagebuildrepo9C4DE89D\",\n                  \"Arn\"\n                ]\n              }\n            ]\n          }\n        ],\n        \"Version\": \"2012-10-17\"\n      },\n      \"Description\": \"\",\n      \"Path\": \"/\"\n    },\n    \"Metadata\": {\n      \"aws:cdk:path\": \"gitpod-cell/registry-facade-policy/Resource\"\n    }\n  }\n}\n{","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/aws-iam-permission-requirements","loc":{"lines":{"from":138,"to":179}}}}],["694",{"pageContent":"\"Version\": \"2012-10-17\"\n      },\n      \"Description\": \"\",\n      \"Path\": \"/\"\n    },\n    \"Metadata\": {\n      \"aws:cdk:path\": \"gitpod-cell/registry-facade-policy/Resource\"\n    }\n  }\n}\n{\n  \"key\": \"imagebuilderpolicy98A11844\",\n  \"value\": {\n    \"Type\": \"AWS::IAM::ManagedPolicy\",\n    \"Properties\": {\n      \"PolicyDocument\": {\n        \"Statement\": [\n          {\n            \"Action\": [\n              \"ecr:BatchCheckLayerAvailability\",\n              \"ecr:BatchGetImage\",\n              \"ecr:GetDownloadUrlForLayer\",\n              \"ecr:GetAuthorizationToken\",\n              \"ecr:TagResource\",\n              \"ecr:PutImage\",\n              \"ecr:InitiateLayerUpload\",\n              \"ecr:CompleteLayerUpload\",\n              \"ecr:UploadLayerPart\"\n            ],\n            \"Effect\": \"Allow\",\n            \"Resource\": [\n              {\n                \"Fn::GetAtt\": [\n                  \"baseimagebuildrepoD634AA75\",\n                  \"Arn\"\n                ]\n              },\n              {","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/aws-iam-permission-requirements","loc":{"lines":{"from":179,"to":216}}}}],["695",{"pageContent":"\"Resource\": [\n              {\n                \"Fn::GetAtt\": [\n                  \"baseimagebuildrepoD634AA75\",\n                  \"Arn\"\n                ]\n              },\n              {\n                \"Fn::GetAtt\": [\n                  \"workspaceimagebuildrepo9C4DE89D\",\n                  \"Arn\"\n                ]\n              }\n            ]\n          }\n        ],\n        \"Version\": \"2012-10-17\"\n      },\n      \"Description\": \"\",\n      \"Path\": \"/\"\n    },\n    \"Metadata\": {\n      \"aws:cdk:path\": \"gitpod-cell/image-builder-policy/Resource\"\n    }\n  }\n}\n{\n  \"key\": \"ecrpullsecretpolicy3C12CB71\",\n  \"value\": {\n    \"Type\": \"AWS::IAM::ManagedPolicy\",\n    \"Properties\": {\n      \"PolicyDocument\": {\n        \"Statement\": [\n          {\n            \"Action\": [\n              \"ecr:BatchCheckLayerAvailability\",\n              \"ecr:BatchGetImage\",\n              \"ecr:GetDownloadUrlForLayer\",\n              \"ecr:GetAuthorizationToken\"\n            ],\n            \"Effect\": \"Allow\",","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/aws-iam-permission-requirements","loc":{"lines":{"from":216,"to":256}}}}],["696",{"pageContent":"\"ecr:BatchGetImage\",\n              \"ecr:GetDownloadUrlForLayer\",\n              \"ecr:GetAuthorizationToken\"\n            ],\n            \"Effect\": \"Allow\",\n            \"Resource\": [\n              {\n                \"Fn::GetAtt\": [\n                  \"baseimagebuildrepoD634AA75\",\n                  \"Arn\"\n                ]\n              },\n              {\n                \"Fn::GetAtt\": [\n                  \"workspaceimagebuildrepo9C4DE89D\",\n                  \"Arn\"\n                ]\n              }\n            ]\n          },\n          {\n            \"Action\": [\n              \"ecr:BatchImportUpstreamImage\",\n              \"ecr:DescribeRegistry\",\n              \"ecr:GetAuthorizationToken\"\n            ],\n            \"Effect\": \"Allow\",\n            \"Resource\": \"*\"\n          }\n        ],\n        \"Version\": \"2012-10-17\"\n      },\n      \"Description\": \"\",\n      \"Path\": \"/\"\n    },\n    \"Metadata\": {\n      \"aws:cdk:path\": \"gitpod-cell/ecr-pull-secret-policy/Resource\"\n    }\n  }\n}\n{","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/aws-iam-permission-requirements","loc":{"lines":{"from":256,"to":296}}}}],["697",{"pageContent":"\"Version\": \"2012-10-17\"\n      },\n      \"Description\": \"\",\n      \"Path\": \"/\"\n    },\n    \"Metadata\": {\n      \"aws:cdk:path\": \"gitpod-cell/ecr-pull-secret-policy/Resource\"\n    }\n  }\n}\n{\n  \"key\": \"rdsdbconnectserver0C78DEEF\",\n  \"value\": {\n    \"Type\": \"AWS::IAM::ManagedPolicy\",\n    \"Properties\": {\n      \"PolicyDocument\": {\n        \"Statement\": [\n          {\n            \"Action\": \"rds-db:connect\",\n            \"Effect\": \"Allow\",\n            \"Resource\": {\n              \"Fn::Sub\": [\n                \"arn:aws:rds-db:${region}:${accountID}:dbuser:${dbInstance}/gitpod\",\n                {\n                  \"accountID\": {\n                    \"Ref\": \"AWS::AccountId\"\n                  },\n                  \"dbInstance\": {\n                    \"Ref\": \"gitpoddbAD7CE160\"\n                  },\n                  \"region\": {\n                    \"Ref\": \"AWS::Region\"\n                  }\n                }\n              ]\n            }\n          }\n        ],\n        \"Version\": \"2012-10-17\"\n      },","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/aws-iam-permission-requirements","loc":{"lines":{"from":296,"to":335}}}}],["698",{"pageContent":"\"Ref\": \"AWS::Region\"\n                  }\n                }\n              ]\n            }\n          }\n        ],\n        \"Version\": \"2012-10-17\"\n      },\n      \"Description\": \"Policy used by webapp components to access the database\",\n      \"Path\": \"/\"\n    },\n    \"Metadata\": {\n      \"aws:cdk:path\": \"gitpod-cell/rds-db-connect-server/Resource\"\n    }\n  }\n}\n{\n  \"key\": \"contentserviceroleF6B3E425\",\n  \"value\": {\n    \"Type\": \"AWS::IAM::ManagedPolicy\",\n    \"Properties\": {\n      \"PolicyDocument\": {\n        \"Statement\": [\n          {\n            \"Action\": [\n              \"s3:ListObjects\",\n              \"s3:ListObjectsV2\",\n              \"s3:ListBucketMultipartUploads\",\n              \"s3:DeleteObjectVersion\",\n              \"s3:ListBucketVersions\",\n              \"s3:GetObjectAttributes\",\n              \"s3:ListBucket\",\n              \"s3:GetObjectVersionAttributes\",\n              \"s3:ListMultipartUploadParts\",\n              \"s3:PutObject\",\n              \"s3:GetObjectAcl\",","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/aws-iam-permission-requirements","loc":{"lines":{"from":335,"to":371}}}}],["699",{"pageContent":"\"s3:ListBucket\",\n              \"s3:GetObjectVersionAttributes\",\n              \"s3:ListMultipartUploadParts\",\n              \"s3:PutObject\",\n              \"s3:GetObjectAcl\",\n              \"s3:GetObject\",\n              \"s3:AbortMultipartUpload\",\n              \"s3:PutObjectVersionAcl\",\n              \"s3:DeleteObject\",\n              \"s3:PutObjectAcl\",\n              \"s3:GetObjectVersion\"\n            ],\n            \"Effect\": \"Allow\",\n            \"Resource\": {\n              \"Fn::Join\": [\n                \"\",\n                [\n                  {\n                    \"Fn::GetAtt\": [\n                      \"contentservicebucketD68A2057\",\n                      \"Arn\"\n                    ]\n                  },\n                  \"/*\"\n                ]\n              ]\n            }\n          }\n        ],\n        \"Version\": \"2012-10-17\"\n      },\n      \"Description\": \"\",\n      \"Path\": \"/\"\n    },\n    \"Metadata\": {\n      \"aws:cdk:path\": \"gitpod-cell/content-service-role/Resource\"\n    }\n  }\n}","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/aws-iam-permission-requirements","loc":{"lines":{"from":371,"to":409}}}}],["700",{"pageContent":"],\n        \"Version\": \"2012-10-17\"\n      },\n      \"Description\": \"\",\n      \"Path\": \"/\"\n    },\n    \"Metadata\": {\n      \"aws:cdk:path\": \"gitpod-cell/content-service-role/Resource\"\n    }\n  }\n}\n{\n  \"key\": \"prometheuspolicy8961D7A5\",\n  \"value\": {\n    \"Type\": \"AWS::IAM::ManagedPolicy\",\n    \"Properties\": {\n      \"PolicyDocument\": {\n        \"Statement\": [\n          {\n            \"Action\": [\n              \"aps:RemoteWrite\",\n              \"aps:GetSeries\",\n              \"aps:GetLabels\",\n              \"aps:GetMetricsMetadata\"\n            ],\n            \"Effect\": \"Allow\",\n            \"Resource\": {\n              \"Fn::GetAtt\": [\n                \"prometheus\",\n                \"Arn\"\n              ]\n            }\n          }\n        ],\n        \"Version\": \"2012-10-17\"\n      },\n      \"Description\": \"\",\n      \"ManagedPolicyName\": \"foobar-prometheus\",\n      \"Path\": \"/\"\n    },\n    \"Metadata\": {\n      \"aws:cdk:path\": \"gitpod-cell/prometheus-policy/Resource\"\n    }\n  }\n}\n{","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/aws-iam-permission-requirements","loc":{"lines":{"from":409,"to":454}}}}],["701",{"pageContent":"\"Description\": \"\",\n      \"ManagedPolicyName\": \"foobar-prometheus\",\n      \"Path\": \"/\"\n    },\n    \"Metadata\": {\n      \"aws:cdk:path\": \"gitpod-cell/prometheus-policy/Resource\"\n    }\n  }\n}\n{\n  \"key\": \"grafanapolicy3E79243C\",\n  \"value\": {\n    \"Type\": \"AWS::IAM::ManagedPolicy\",\n    \"Properties\": {\n      \"PolicyDocument\": {\n        \"Statement\": [\n          {\n            \"Action\": [\n              \"aps:QueryMetrics\",\n              \"aps:GetSeries\",\n              \"aps:GetLabels\",\n              \"aps:GetMetricsMetadata\"\n            ],\n            \"Effect\": \"Allow\",\n            \"Resource\": {\n              \"Fn::GetAtt\": [\n                \"prometheus\",\n                \"Arn\"\n              ]\n            }\n          }\n        ],\n        \"Version\": \"2012-10-17\"\n      },\n      \"Description\": \"\",\n      \"ManagedPolicyName\": \"foobar-grafana\",\n      \"Path\": \"/\"\n    },\n    \"Metadata\": {\n      \"aws:cdk:path\": \"gitpod-cell/grafana-policy/Resource\"\n    }\n  }\n}\n{\n  \"key\": \"usagepolicy71D05CC3\",\n  \"value\": {","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/aws-iam-permission-requirements","loc":{"lines":{"from":454,"to":499}}}}],["702",{"pageContent":"\"Path\": \"/\"\n    },\n    \"Metadata\": {\n      \"aws:cdk:path\": \"gitpod-cell/grafana-policy/Resource\"\n    }\n  }\n}\n{\n  \"key\": \"usagepolicy71D05CC3\",\n  \"value\": {\n    \"Type\": \"AWS::IAM::ManagedPolicy\",\n    \"Properties\": {\n      \"PolicyDocument\": {\n        \"Statement\": [\n          {\n            \"Action\": [\n              \"s3:ListObjects\",\n              \"s3:ListObjectsV2\",\n              \"s3:ListBucketMultipartUploads\",\n              \"s3:DeleteObjectVersion\",\n              \"s3:ListBucketVersions\",\n              \"s3:GetObjectAttributes\",\n              \"s3:ListBucket\",\n              \"s3:GetObjectVersionAttributes\",\n              \"s3:ListMultipartUploadParts\",\n              \"s3:PutObject\",\n              \"s3:GetObjectAcl\",\n              \"s3:GetObject\",\n              \"s3:AbortMultipartUpload\",\n              \"s3:PutObjectVersionAcl\",\n              \"s3:DeleteObject\",\n              \"s3:PutObjectAcl\",\n              \"s3:GetObjectVersion\"\n            ],\n            \"Effect\": \"Allow\",","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/aws-iam-permission-requirements","loc":{"lines":{"from":499,"to":533}}}}],["703",{"pageContent":"\"s3:PutObjectVersionAcl\",\n              \"s3:DeleteObject\",\n              \"s3:PutObjectAcl\",\n              \"s3:GetObjectVersion\"\n            ],\n            \"Effect\": \"Allow\",\n            \"Resource\": {\n              \"Fn::Join\": [\n                \"\",\n                [\n                  {\n                    \"Fn::GetAtt\": [\n                      \"usagebucket853837BC\",\n                      \"Arn\"\n                    ]\n                  },\n                  \"/*\"\n                ]\n              ]\n            }\n          }\n        ],\n        \"Version\": \"2012-10-17\"\n      },\n      \"Description\": \"Read/write access to usage bucket\",\n      \"ManagedPolicyName\": \"foobar-usage\",\n      \"Path\": \"/\"\n    },\n    \"Metadata\": {\n      \"aws:cdk:path\": \"gitpod-cell/usage-policy/Resource\"\n    }\n  }\n}\n{\n  \"key\": \"dynamodbaccessrw2116470B\",\n  \"value\": {\n    \"Type\": \"AWS::IAM::ManagedPolicy\",\n    \"Properties\": {\n      \"PolicyDocument\": {\n        \"Statement\": [\n          {\n            \"Action\": [","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/aws-iam-permission-requirements","loc":{"lines":{"from":533,"to":574}}}}],["704",{"pageContent":"}\n{\n  \"key\": \"dynamodbaccessrw2116470B\",\n  \"value\": {\n    \"Type\": \"AWS::IAM::ManagedPolicy\",\n    \"Properties\": {\n      \"PolicyDocument\": {\n        \"Statement\": [\n          {\n            \"Action\": [\n              \"dynamodb:DescribeTable\",\n              \"dynamodb:Query\",\n              \"dynamodb:GetItem\",\n              \"dynamodb:PartiQLSelect\",\n              \"dynamodb:PutItem\",\n              \"dynamodb:UpdateItem\",\n              \"dynamodb:DescribeStream\",\n              \"dynamodb:GetRecords\",\n              \"dynamodb:GetShardIterator\",\n              \"dynamodb:ListStreams\"\n            ],\n            \"Effect\": \"Allow\",\n            \"Resource\": [\n              {\n                \"Fn::GetAtt\": [\n                  \"dynamotableresourcesF8FA6E47\",\n                  \"Arn\"\n                ]\n              },\n              {\n                \"Fn::GetAtt\": [\n                  \"dynamotableresourcesF8FA6E47\",\n                  \"StreamArn\"\n                ]\n              }\n            ]\n          }","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/aws-iam-permission-requirements","loc":{"lines":{"from":574,"to":610}}}}],["705",{"pageContent":"{\n                \"Fn::GetAtt\": [\n                  \"dynamotableresourcesF8FA6E47\",\n                  \"StreamArn\"\n                ]\n              }\n            ]\n          }\n        ],\n        \"Version\": \"2012-10-17\"\n      },\n      \"Description\": \"used by the Gitpod Dedicated lambdas to access DynamoDB\",\n      \"Path\": \"/\",\n      \"Roles\": [\n        {\n          \"Ref\": \"lambdafunctioncontrollerroleF57C0FDD\"\n        },\n        {\n          \"Ref\": \"clustercontrollereksctlroleC1C3C3FD\"\n        },\n        {\n          \"Ref\": \"lambdaclusterctrldcroleAEB16FDF\"\n        },\n        {\n          \"Ref\": \"lambdaappcontrollerroleDE5D3901\"\n        },\n        {\n          \"Ref\": \"lambdacellstatecontrollerroleFAFF62D3\"\n        }\n      ]\n    },\n    \"Metadata\": {\n      \"aws:cdk:path\": \"gitpod-cell/dynamodb-access-rw/Resource\"\n    }\n  }\n}\n{\n  \"key\": \"lambdaappcontrollerroleDE5D3901\",\n  \"value\": {\n    \"Type\": \"AWS::IAM::Role\",\n    \"Properties\": {\n      \"AssumeRolePolicyDocument\": {","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/aws-iam-permission-requirements","loc":{"lines":{"from":610,"to":651}}}}],["706",{"pageContent":"}\n  }\n}\n{\n  \"key\": \"lambdaappcontrollerroleDE5D3901\",\n  \"value\": {\n    \"Type\": \"AWS::IAM::Role\",\n    \"Properties\": {\n      \"AssumeRolePolicyDocument\": {\n        \"Statement\": [\n          {\n            \"Action\": \"sts:AssumeRole\",\n            \"Effect\": \"Allow\",\n            \"Principal\": {\n              \"Service\": \"lambda.amazonaws.com\"\n            }\n          }\n        ],\n        \"Version\": \"2012-10-17\"\n      },\n      \"ManagedPolicyArns\": [\n        \"arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\"\n      ]\n    },\n    \"Metadata\": {\n      \"aws:cdk:path\": \"gitpod-cell/lambda-app-controller-role/Resource\"\n    }\n  }\n}\n{\n  \"key\": \"lambdafunctioncontrollerroleF57C0FDD\",\n  \"value\": {\n    \"Type\": \"AWS::IAM::Role\",\n    \"Properties\": {\n      \"AssumeRolePolicyDocument\": {\n        \"Statement\": [\n          {\n            \"Action\": \"sts:AssumeRole\",\n            \"Effect\": \"Allow\",\n            \"Principal\": {\n              \"Service\": \"lambda.amazonaws.com\"\n            }\n          }","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/aws-iam-permission-requirements","loc":{"lines":{"from":651,"to":693}}}}],["707",{"pageContent":"{\n            \"Action\": \"sts:AssumeRole\",\n            \"Effect\": \"Allow\",\n            \"Principal\": {\n              \"Service\": \"lambda.amazonaws.com\"\n            }\n          }\n        ],\n        \"Version\": \"2012-10-17\"\n      },\n      \"ManagedPolicyArns\": [\n        \"arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\"\n      ]\n    },\n    \"Metadata\": {\n      \"aws:cdk:path\": \"gitpod-cell/lambda-function-controller-role/Resource\"\n    }\n  }\n}\n{\n  \"key\": \"functioncontrollercanaccessssmC9F8DA3A\",\n  \"value\": {\n    \"Type\": \"AWS::IAM::Policy\",\n    \"Properties\": {\n      \"PolicyDocument\": {\n        \"Statement\": [\n          {\n            \"Action\": [\n              \"ssm:GetParameter\",\n              \"ssm:GetParameters\"\n            ],\n            \"Effect\": \"Allow\",\n            \"Resource\": {\n              \"Fn::Sub\": [\n                \"arn:aws:ssm:${region}:${accountID}:parameter/*\",\n                {\n                  \"accountID\": {\n                    \"Ref\": \"AWS::AccountId\"","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/aws-iam-permission-requirements","loc":{"lines":{"from":693,"to":730}}}}],["708",{"pageContent":"\"Fn::Sub\": [\n                \"arn:aws:ssm:${region}:${accountID}:parameter/*\",\n                {\n                  \"accountID\": {\n                    \"Ref\": \"AWS::AccountId\"\n                  },\n                  \"region\": {\n                    \"Ref\": \"AWS::Region\"\n                  }\n                }\n              ]\n            }\n          },\n          {\n            \"Action\": \"lambda:UpdateFunctionCode\",\n            \"Effect\": \"Allow\",\n            \"Resource\": {\n              \"Fn::Sub\": [\n                \"arn:aws:lambda:${region}:${accountID}:function:*\",\n                {\n                  \"accountID\": {\n                    \"Ref\": \"AWS::AccountId\"\n                  },\n                  \"region\": {\n                    \"Ref\": \"AWS::Region\"\n                  }\n                }\n              ]\n            }\n          }\n        ],\n        \"Version\": \"2012-10-17\"\n      },\n      \"PolicyName\": \"functioncontrollercanaccessssmC9F8DA3A\",\n      \"Roles\": [\n        {","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/aws-iam-permission-requirements","loc":{"lines":{"from":730,"to":765}}}}],["709",{"pageContent":"]\n            }\n          }\n        ],\n        \"Version\": \"2012-10-17\"\n      },\n      \"PolicyName\": \"functioncontrollercanaccessssmC9F8DA3A\",\n      \"Roles\": [\n        {\n          \"Ref\": \"lambdafunctioncontrollerroleF57C0FDD\"\n        }\n      ]\n    },\n    \"Metadata\": {\n      \"aws:cdk:path\": \"gitpod-cell/function-controller-can-access-ssm/Resource\"\n    }\n  }\n}\n{\n  \"key\": \"lambdaclusterctrlsfnrole9C1CFAD7\",\n  \"value\": {\n    \"Type\": \"AWS::IAM::Role\",\n    \"Properties\": {\n      \"AssumeRolePolicyDocument\": {\n        \"Statement\": [\n          {\n            \"Action\": \"sts:AssumeRole\",\n            \"Effect\": \"Allow\",\n            \"Principal\": {\n              \"Service\": {\n                \"Fn::FindInMap\": [\n                  \"ServiceprincipalMap\",\n                  {\n                    \"Ref\": \"AWS::Region\"\n                  },\n                  \"states\"\n                ]\n              }\n            }\n          }\n        ],\n        \"Version\": \"2012-10-17\"\n      }\n    },","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/aws-iam-permission-requirements","loc":{"lines":{"from":765,"to":808}}}}],["710",{"pageContent":"},\n                  \"states\"\n                ]\n              }\n            }\n          }\n        ],\n        \"Version\": \"2012-10-17\"\n      }\n    },\n    \"Metadata\": {\n      \"aws:cdk:path\": \"gitpod-cell/lambda-cluster-ctrl-sfn-role/Resource\"\n    }\n  }\n}\n{\n  \"key\": \"lambdaclusterctrlsfnrolepolicy957C7A7C\",\n  \"value\": {\n    \"Type\": \"AWS::IAM::Policy\",\n    \"Properties\": {\n      \"PolicyDocument\": {\n        \"Statement\": [\n          {\n            \"Action\": [\n              \"logs:CreateLogDelivery\",\n              \"logs:GetLogDelivery\",\n              \"logs:UpdateLogDelivery\",\n              \"logs:DeleteLogDelivery\",\n              \"logs:ListLogDeliveries\",\n              \"logs:PutLogEvents\",\n              \"logs:PutResourcePolicy\",\n              \"logs:DescribeResourcePolicies\",\n              \"logs:DescribeLogGroups\"\n            ],\n            \"Effect\": \"Allow\",\n            \"Resource\": \"*\"\n          },\n          {\n            \"Action\": [\n              \"events:PutTargets\",","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/aws-iam-permission-requirements","loc":{"lines":{"from":808,"to":847}}}}],["711",{"pageContent":"\"logs:DescribeLogGroups\"\n            ],\n            \"Effect\": \"Allow\",\n            \"Resource\": \"*\"\n          },\n          {\n            \"Action\": [\n              \"events:PutTargets\",\n              \"events:PutRule\",\n              \"events:DescribeRule\"\n            ],\n            \"Effect\": \"Allow\",\n            \"Resource\": {\n              \"Fn::Sub\": [\n                \"arn:aws:events:${region}:${accountID}:rule/StepFunctionsGetEventsForECSTaskRule\",\n                {\n                  \"accountID\": {\n                    \"Ref\": \"AWS::AccountId\"\n                  },\n                  \"region\": {\n                    \"Ref\": \"AWS::Region\"\n                  }\n                }\n              ]\n            }\n          },\n          {\n            \"Action\": [\n              \"states:DescribeExecution\",\n              \"states:StopExecution\",\n              \"states:StartExecution\"\n            ],\n            \"Effect\": \"Allow\",\n            \"Resource\": \"*\"\n          }\n        ],","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/aws-iam-permission-requirements","loc":{"lines":{"from":847,"to":882}}}}],["712",{"pageContent":"\"states:StopExecution\",\n              \"states:StartExecution\"\n            ],\n            \"Effect\": \"Allow\",\n            \"Resource\": \"*\"\n          }\n        ],\n        \"Version\": \"2012-10-17\"\n      },\n      \"PolicyName\": \"lambdaclusterctrlsfnrolepolicy957C7A7C\",\n      \"Roles\": [\n        {\n          \"Ref\": \"lambdaclusterctrlsfnrole9C1CFAD7\"\n        }\n      ]\n    },\n    \"Metadata\": {\n      \"aws:cdk:path\": \"gitpod-cell/lambda-cluster-ctrl-sfn-role-policy/Resource\"\n    }\n  }\n}\n{\n  \"key\": \"clustercontrollertaskroleC42D05B1\",\n  \"value\": {\n    \"Type\": \"AWS::IAM::Role\",\n    \"Properties\": {\n      \"AssumeRolePolicyDocument\": {\n        \"Statement\": [\n          {\n            \"Action\": \"sts:AssumeRole\",\n            \"Effect\": \"Allow\",\n            \"Principal\": {\n              \"Service\": \"ecs-tasks.amazonaws.com\"\n            }\n          }\n        ],\n        \"Version\": \"2012-10-17\"\n      }\n    },\n    \"Metadata\": {\n      \"aws:cdk:path\": \"gitpod-cell/cluster-controller-task-role/Resource\"","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/aws-iam-permission-requirements","loc":{"lines":{"from":882,"to":922}}}}],["713",{"pageContent":"}\n          }\n        ],\n        \"Version\": \"2012-10-17\"\n      }\n    },\n    \"Metadata\": {\n      \"aws:cdk:path\": \"gitpod-cell/cluster-controller-task-role/Resource\"\n    }\n  }\n}\n{\n  \"key\": \"clustercontrollertaskrolepolicy4515677B\",\n  \"value\": {\n    \"Type\": \"AWS::IAM::Policy\",\n    \"Properties\": {\n      \"PolicyDocument\": {\n        \"Statement\": [\n          {\n            \"Action\": [\n              \"logs:CreateLogStream\",\n              \"logs:PutLogEvents\"\n            ],\n            \"Effect\": \"Allow\",\n            \"Resource\": {\n              \"Fn::GetAtt\": [\n                \"clustercontrollertaskslogs3E649D7D\",\n                \"Arn\"\n              ]\n            }\n          }\n        ],\n        \"Version\": \"2012-10-17\"\n      },\n      \"PolicyName\": \"clustercontrollertaskrolepolicy4515677B\",\n      \"Roles\": [\n        {\n          \"Ref\": \"clustercontrollertaskroleC42D05B1\"\n        }\n      ]\n    },\n    \"Metadata\": {","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/aws-iam-permission-requirements","loc":{"lines":{"from":922,"to":963}}}}],["714",{"pageContent":"},\n      \"PolicyName\": \"clustercontrollertaskrolepolicy4515677B\",\n      \"Roles\": [\n        {\n          \"Ref\": \"clustercontrollertaskroleC42D05B1\"\n        }\n      ]\n    },\n    \"Metadata\": {\n      \"aws:cdk:path\": \"gitpod-cell/cluster-controller-task-role-policy/Resource\"\n    }\n  }\n}\n{\n  \"key\": \"clustercontrollereksctlroleC1C3C3FD\",\n  \"value\": {\n    \"Type\": \"AWS::IAM::Role\",\n    \"Properties\": {\n      \"AssumeRolePolicyDocument\": {\n        \"Statement\": [\n          {\n            \"Action\": \"sts:AssumeRole\",\n            \"Effect\": \"Allow\",\n            \"Principal\": {\n              \"Service\": \"ecs-tasks.amazonaws.com\"\n            }\n          }\n        ],\n        \"Version\": \"2012-10-17\"\n      },\n      \"ManagedPolicyArns\": [\n        \"arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\",\n        \"arn:aws:iam::aws:policy/AmazonEC2FullAccess\"\n      ]\n    },\n    \"Metadata\": {\n      \"aws:cdk:path\": \"gitpod-cell/cluster-controller-eksctl-role/Resource\"\n    }\n  }\n}\n{","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/aws-iam-permission-requirements","loc":{"lines":{"from":963,"to":1003}}}}],["715",{"pageContent":"\"arn:aws:iam::aws:policy/AmazonEC2FullAccess\"\n      ]\n    },\n    \"Metadata\": {\n      \"aws:cdk:path\": \"gitpod-cell/cluster-controller-eksctl-role/Resource\"\n    }\n  }\n}\n{\n  \"key\": \"clustercontrollereksctlroleDefaultPolicyC8CE6A0B\",\n  \"value\": {\n    \"Type\": \"AWS::IAM::Policy\",\n    \"Properties\": {\n      \"PolicyDocument\": {\n        \"Statement\": [\n          {\n            \"Action\": [\n              \"ecr:BatchCheckLayerAvailability\",\n              \"ecr:GetDownloadUrlForLayer\",\n              \"ecr:BatchGetImage\"\n            ],\n            \"Effect\": \"Allow\",\n            \"Resource\": {\n              \"Fn::Sub\": [\n                \"arn:aws:ecr:${region}:096840763576:repository/poc/lambda-cluster\",\n                {\n                  \"region\": {\n                    \"Ref\": \"AWS::Region\"\n                  }\n                }\n              ]\n            }\n          },\n          {\n            \"Action\": \"ecr:GetAuthorizationToken\",\n            \"Effect\": \"Allow\",\n            \"Resource\": \"*\"","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/aws-iam-permission-requirements","loc":{"lines":{"from":1003,"to":1039}}}}],["716",{"pageContent":"}\n              ]\n            }\n          },\n          {\n            \"Action\": \"ecr:GetAuthorizationToken\",\n            \"Effect\": \"Allow\",\n            \"Resource\": \"*\"\n          },\n          {\n            \"Action\": [\n              \"logs:CreateLogStream\",\n              \"logs:PutLogEvents\"\n            ],\n            \"Effect\": \"Allow\",\n            \"Resource\": {\n              \"Fn::GetAtt\": [\n                \"clustercontrollertaskslogs3E649D7D\",\n                \"Arn\"\n              ]\n            }\n          }\n        ],\n        \"Version\": \"2012-10-17\"\n      },\n      \"PolicyName\": \"clustercontrollereksctlroleDefaultPolicyC8CE6A0B\",\n      \"Roles\": [\n        {\n          \"Ref\": \"clustercontrollereksctlroleC1C3C3FD\"\n        }\n      ]\n    },\n    \"Metadata\": {\n      \"aws:cdk:path\": \"gitpod-cell/cluster-controller-eksctl-role/DefaultPolicy/Resource\"\n    }\n  }\n}\n{\n  \"key\": \"clustercontrollereksctlrolepolicy7884FB7E\",\n  \"value\": {\n    \"Type\": \"AWS::IAM::Policy\",\n    \"Properties\": {","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/aws-iam-permission-requirements","loc":{"lines":{"from":1039,"to":1080}}}}],["717",{"pageContent":"}\n  }\n}\n{\n  \"key\": \"clustercontrollereksctlrolepolicy7884FB7E\",\n  \"value\": {\n    \"Type\": \"AWS::IAM::Policy\",\n    \"Properties\": {\n      \"PolicyDocument\": {\n        \"Statement\": [\n          {\n            \"Action\": \"ssm:PutParameter\",\n            \"Effect\": \"Allow\",\n            \"Resource\": {\n              \"Fn::Sub\": [\n                \"arn:aws:ssm:${region}:${accountID}:parameter/cell/foobar/*\",\n                {\n                  \"accountID\": {\n                    \"Ref\": \"AWS::AccountId\"\n                  },\n                  \"region\": {\n                    \"Ref\": \"AWS::Region\"\n                  }\n                }\n              ]\n            }\n          },\n          {\n            \"Action\": [\n              \"ssm:GetParameter\",\n              \"ssm:GetParameters\"\n            ],\n            \"Effect\": \"Allow\",\n            \"Resource\": {\n              \"Fn::Sub\": [\n                \"arn:aws:ssm:${region}:${accountID}:parameter/aws/*\",\n                {\n                  \"accountID\": {","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/aws-iam-permission-requirements","loc":{"lines":{"from":1080,"to":1117}}}}],["718",{"pageContent":"\"Resource\": {\n              \"Fn::Sub\": [\n                \"arn:aws:ssm:${region}:${accountID}:parameter/aws/*\",\n                {\n                  \"accountID\": {\n                    \"Ref\": \"AWS::AccountId\"\n                  },\n                  \"region\": {\n                    \"Ref\": \"AWS::Region\"\n                  }\n                }\n              ]\n            }\n          },\n          {\n            \"Action\": \"cloudformation:*\",\n            \"Effect\": \"Allow\",\n            \"Resource\": \"*\"\n          },\n          {\n            \"Action\": \"eks:*\",\n            \"Effect\": \"Allow\",\n            \"Resource\": \"*\"\n          },\n          {\n            \"Action\": [\n              \"kms:CreateGrant\",\n              \"kms:DescribeKey\"\n            ],\n            \"Effect\": \"Allow\",\n            \"Resource\": \"*\"\n          },\n          {\n            \"Action\": \"logs:PutRetentionPolicy\",\n            \"Effect\": \"Allow\",\n            \"Resource\": \"*\"\n          },\n          {\n            \"Action\": [","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/aws-iam-permission-requirements","loc":{"lines":{"from":1117,"to":1155}}}}],["719",{"pageContent":"},\n          {\n            \"Action\": \"logs:PutRetentionPolicy\",\n            \"Effect\": \"Allow\",\n            \"Resource\": \"*\"\n          },\n          {\n            \"Action\": [\n              \"iam:CreateInstanceProfile\",\n              \"iam:DeleteInstanceProfile\",\n              \"iam:GetInstanceProfile\",\n              \"iam:RemoveRoleFromInstanceProfile\",\n              \"iam:GetRole\",\n              \"iam:CreateRole\",\n              \"iam:DeleteRole\",\n              \"iam:AttachRolePolicy\",\n              \"iam:PutRolePolicy\",\n              \"iam:ListInstanceProfiles\",\n              \"iam:AddRoleToInstanceProfile\",\n              \"iam:ListInstanceProfilesForRole\",\n              \"iam:PassRole\",\n              \"iam:DetachRolePolicy\",\n              \"iam:DeleteRolePolicy\",\n              \"iam:GetRolePolicy\",\n              \"iam:GetOpenIDConnectProvider\",\n              \"iam:CreateOpenIDConnectProvider\",\n              \"iam:DeleteOpenIDConnectProvider\",\n              \"iam:TagOpenIDConnectProvider\",","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/aws-iam-permission-requirements","loc":{"lines":{"from":1155,"to":1182}}}}],["720",{"pageContent":"\"iam:GetOpenIDConnectProvider\",\n              \"iam:CreateOpenIDConnectProvider\",\n              \"iam:DeleteOpenIDConnectProvider\",\n              \"iam:TagOpenIDConnectProvider\",\n              \"iam:ListAttachedRolePolicies\",\n              \"iam:TagRole\",\n              \"iam:GetPolicy\",\n              \"iam:CreatePolicy\",\n              \"iam:DeletePolicy\",\n              \"iam:ListPolicyVersions\"\n            ],\n            \"Effect\": \"Allow\",\n            \"Resource\": [\n              {\n                \"Fn::Sub\": [\n                  \"arn:aws:iam::${accountID}:instance-profile/eksctl-*\",\n                  {\n                    \"accountID\": {\n                      \"Ref\": \"AWS::AccountId\"\n                    },\n                    \"region\": {\n                      \"Ref\": \"AWS::Region\"\n                    }\n                  }\n                ]\n              },\n              {\n                \"Fn::Sub\": [\n                  \"arn:aws:iam::${accountID}:role/eksctl-*\",\n                  {","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/aws-iam-permission-requirements","loc":{"lines":{"from":1182,"to":1211}}}}],["721",{"pageContent":"}\n                ]\n              },\n              {\n                \"Fn::Sub\": [\n                  \"arn:aws:iam::${accountID}:role/eksctl-*\",\n                  {\n                    \"accountID\": {\n                      \"Ref\": \"AWS::AccountId\"\n                    },\n                    \"region\": {\n                      \"Ref\": \"AWS::Region\"\n                    }\n                  }\n                ]\n              },\n              {\n                \"Fn::Sub\": [\n                  \"arn:aws:iam::${accountID}:policy/eksctl-*\",\n                  {\n                    \"accountID\": {\n                      \"Ref\": \"AWS::AccountId\"\n                    },\n                    \"region\": {\n                      \"Ref\": \"AWS::Region\"\n                    }\n                  }\n                ]\n              },\n              {\n                \"Fn::Sub\": [\n                  \"arn:aws:iam::${accountID}:oidc-provider/*\",\n                  {\n                    \"accountID\": {","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/aws-iam-permission-requirements","loc":{"lines":{"from":1211,"to":1244}}}}],["722",{"pageContent":"]\n              },\n              {\n                \"Fn::Sub\": [\n                  \"arn:aws:iam::${accountID}:oidc-provider/*\",\n                  {\n                    \"accountID\": {\n                      \"Ref\": \"AWS::AccountId\"\n                    },\n                    \"region\": {\n                      \"Ref\": \"AWS::Region\"\n                    }\n                  }\n                ]\n              },\n              {\n                \"Fn::Sub\": [\n                  \"arn:aws:iam::${accountID}:role/aws-service-role/eks-nodegroup.amazonaws.com/AWSServiceRoleForAmazonEKSNodegroup\",\n                  {\n                    \"accountID\": {\n                      \"Ref\": \"AWS::AccountId\"\n                    },\n                    \"region\": {\n                      \"Ref\": \"AWS::Region\"\n                    }\n                  }\n                ]\n              },\n              {\n                \"Fn::Sub\": [\n                  \"arn:aws:iam::${accountID}:role/eksctl-managed-*\",","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/aws-iam-permission-requirements","loc":{"lines":{"from":1244,"to":1274}}}}],["723",{"pageContent":"}\n                  }\n                ]\n              },\n              {\n                \"Fn::Sub\": [\n                  \"arn:aws:iam::${accountID}:role/eksctl-managed-*\",\n                  {\n                    \"accountID\": {\n                      \"Ref\": \"AWS::AccountId\"\n                    },\n                    \"region\": {\n                      \"Ref\": \"AWS::Region\"\n                    }\n                  }\n                ]\n              },\n              {\n                \"Fn::Sub\": [\n                  \"arn:aws:iam::${accountID}:role/foobar*\",\n                  {\n                    \"accountID\": {\n                      \"Ref\": \"AWS::AccountId\"\n                    },\n                    \"region\": {\n                      \"Ref\": \"AWS::Region\"\n                    }\n                  }\n                ]\n              }\n            ]\n          },\n          {\n            \"Action\": \"iam:GetRole\",\n            \"Effect\": \"Allow\",\n            \"Resource\": {","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/aws-iam-permission-requirements","loc":{"lines":{"from":1274,"to":1309}}}}],["724",{"pageContent":"}\n                ]\n              }\n            ]\n          },\n          {\n            \"Action\": \"iam:GetRole\",\n            \"Effect\": \"Allow\",\n            \"Resource\": {\n              \"Fn::Sub\": [\n                \"arn:aws:iam::${accountID}:role/*\",\n                {\n                  \"accountID\": {\n                    \"Ref\": \"AWS::AccountId\"\n                  },\n                  \"region\": {\n                    \"Ref\": \"AWS::Region\"\n                  }\n                }\n              ]\n            }\n          },\n          {\n            \"Action\": \"iam:CreateServiceLinkedRole\",\n            \"Effect\": \"Allow\",\n            \"Resource\": \"*\"\n          }\n        ],\n        \"Version\": \"2012-10-17\"\n      },\n      \"PolicyName\": \"clustercontrollereksctlrolepolicy7884FB7E\",\n      \"Roles\": [\n        {\n          \"Ref\": \"clustercontrollereksctlroleC1C3C3FD\"\n        }\n      ]\n    },\n    \"Metadata\": {\n      \"aws:cdk:path\": \"gitpod-cell/cluster-controller-eksctl-role-policy/Resource\"","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/aws-iam-permission-requirements","loc":{"lines":{"from":1309,"to":1347}}}}],["725",{"pageContent":"{\n          \"Ref\": \"clustercontrollereksctlroleC1C3C3FD\"\n        }\n      ]\n    },\n    \"Metadata\": {\n      \"aws:cdk:path\": \"gitpod-cell/cluster-controller-eksctl-role-policy/Resource\"\n    }\n  }\n}\n{\n  \"key\": \"lambdaclusterctrlsfnroleexecpolicyA791C5AD\",\n  \"value\": {\n    \"Type\": \"AWS::IAM::Policy\",\n    \"Properties\": {\n      \"PolicyDocument\": {\n        \"Statement\": [\n          {\n            \"Action\": \"ecs:RunTask\",\n            \"Effect\": \"Allow\",\n            \"Resource\": {\n              \"Ref\": \"clustercontrollertaskB80858A6\"\n            }\n          },\n          {\n            \"Action\": \"iam:PassRole\",\n            \"Effect\": \"Allow\",\n            \"Resource\": [\n              {\n                \"Fn::GetAtt\": [\n                  \"clustercontrollertaskroleC42D05B1\",\n                  \"Arn\"\n                ]\n              },\n              {\n                \"Fn::GetAtt\": [\n                  \"clustercontrollereksctlroleC1C3C3FD\",\n                  \"Arn\"\n                ]\n              }","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/aws-iam-permission-requirements","loc":{"lines":{"from":1347,"to":1386}}}}],["726",{"pageContent":"]\n              },\n              {\n                \"Fn::GetAtt\": [\n                  \"clustercontrollereksctlroleC1C3C3FD\",\n                  \"Arn\"\n                ]\n              }\n            ]\n          }\n        ],\n        \"Version\": \"2012-10-17\"\n      },\n      \"PolicyName\": \"lambdaclusterctrlsfnroleexecpolicyA791C5AD\",\n      \"Roles\": [\n        {\n          \"Ref\": \"lambdaclusterctrlsfnrole9C1CFAD7\"\n        }\n      ]\n    },\n    \"Metadata\": {\n      \"aws:cdk:path\": \"gitpod-cell/lambda-cluster-ctrl-sfn-role-exec-policy/Resource\"\n    }\n  }\n}\n{\n  \"key\": \"lambdaclusterctrldcroleAEB16FDF\",\n  \"value\": {\n    \"Type\": \"AWS::IAM::Role\",\n    \"Properties\": {\n      \"AssumeRolePolicyDocument\": {\n        \"Statement\": [\n          {\n            \"Action\": \"sts:AssumeRole\",\n            \"Effect\": \"Allow\",\n            \"Principal\": {\n              \"Service\": \"lambda.amazonaws.com\"\n            }\n          }\n        ],\n        \"Version\": \"2012-10-17\"\n      },\n      \"ManagedPolicyArns\": [","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/aws-iam-permission-requirements","loc":{"lines":{"from":1386,"to":1428}}}}],["727",{"pageContent":"\"Principal\": {\n              \"Service\": \"lambda.amazonaws.com\"\n            }\n          }\n        ],\n        \"Version\": \"2012-10-17\"\n      },\n      \"ManagedPolicyArns\": [\n        \"arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\"\n      ]\n    },\n    \"Metadata\": {\n      \"aws:cdk:path\": \"gitpod-cell/lambda-cluster-ctrl-dc-role/Resource\"\n    }\n  }\n}\n{\n  \"key\": \"lambdaclusterctrldcpolicyB13892E2\",\n  \"value\": {\n    \"Type\": \"AWS::IAM::Policy\",\n    \"Properties\": {\n      \"PolicyDocument\": {\n        \"Statement\": [\n          {\n            \"Action\": [\n              \"ssm:GetParameter\",\n              \"ssm:GetParameters\",\n              \"ssm:PutParameter\"\n            ],\n            \"Effect\": \"Allow\",\n            \"Resource\": {\n              \"Fn::Sub\": [\n                \"arn:aws:ssm:${region}:${accountID}:parameter/*\",\n                {\n                  \"accountID\": {\n                    \"Ref\": \"AWS::AccountId\"\n                  },\n                  \"region\": {","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/aws-iam-permission-requirements","loc":{"lines":{"from":1428,"to":1465}}}}],["728",{"pageContent":"{\n                  \"accountID\": {\n                    \"Ref\": \"AWS::AccountId\"\n                  },\n                  \"region\": {\n                    \"Ref\": \"AWS::Region\"\n                  }\n                }\n              ]\n            }\n          },\n          {\n            \"Action\": [\n              \"ec2:DescribeVpcs\",\n              \"ec2:DescribeSubnets\",\n              \"ec2:DescribeImages\"\n            ],\n            \"Effect\": \"Allow\",\n            \"Resource\": \"*\"\n          },\n          {\n            \"Action\": \"states:StartExecution\",\n            \"Effect\": \"Allow\",\n            \"Resource\": {\n              \"Fn::Sub\": [\n                \"arn:aws:states:${region}:${accountID}:stateMachine:*\",\n                {\n                  \"accountID\": {\n                    \"Ref\": \"AWS::AccountId\"\n                  },\n                  \"region\": {\n                    \"Ref\": \"AWS::Region\"\n                  }\n                }\n              ]\n            }\n          }\n        ],","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/aws-iam-permission-requirements","loc":{"lines":{"from":1465,"to":1502}}}}],["729",{"pageContent":"},\n                  \"region\": {\n                    \"Ref\": \"AWS::Region\"\n                  }\n                }\n              ]\n            }\n          }\n        ],\n        \"Version\": \"2012-10-17\"\n      },\n      \"PolicyName\": \"lambdaclusterctrldcpolicyB13892E2\",\n      \"Roles\": [\n        {\n          \"Ref\": \"lambdaclusterctrldcroleAEB16FDF\"\n        }\n      ]\n    },\n    \"Metadata\": {\n      \"aws:cdk:path\": \"gitpod-cell/lambda-cluster-ctrl-dc-policy/Resource\"\n    }\n  }\n}\n{\n  \"key\": \"lambdaappctrlpolicyF8E18B9E\",\n  \"value\": {\n    \"Type\": \"AWS::IAM::Policy\",\n    \"Properties\": {\n      \"PolicyDocument\": {\n        \"Statement\": [\n          {\n            \"Action\": [\n              \"ssm:GetParameter\",\n              \"ssm:GetParameters\",\n              \"ssm:PutParameter\"\n            ],\n            \"Effect\": \"Allow\",\n            \"Resource\": {\n              \"Fn::Sub\": [\n                \"arn:aws:ssm:${region}:${accountID}:parameter/*\",\n                {\n                  \"accountID\": {","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/aws-iam-permission-requirements","loc":{"lines":{"from":1502,"to":1543}}}}],["730",{"pageContent":"\"Resource\": {\n              \"Fn::Sub\": [\n                \"arn:aws:ssm:${region}:${accountID}:parameter/*\",\n                {\n                  \"accountID\": {\n                    \"Ref\": \"AWS::AccountId\"\n                  },\n                  \"region\": {\n                    \"Ref\": \"AWS::Region\"\n                  }\n                }\n              ]\n            }\n          },\n          {\n            \"Action\": \"s3:GetObject\",\n            \"Effect\": \"Allow\",\n            \"Resource\": \"arn:aws:s3:::foobar/*\"\n          }\n        ],\n        \"Version\": \"2012-10-17\"\n      },\n      \"PolicyName\": \"lambdaappctrlpolicyF8E18B9E\",\n      \"Roles\": [\n        {\n          \"Ref\": \"lambdaappcontrollerroleDE5D3901\"\n        }\n      ]\n    },\n    \"Metadata\": {\n      \"aws:cdk:path\": \"gitpod-cell/lambda-app-ctrl-policy/Resource\"\n    }\n  }\n}\n{\n  \"key\": \"lambdacellstatecontrollerroleFAFF62D3\",\n  \"value\": {\n    \"Type\": \"AWS::IAM::Role\",\n    \"Properties\": {\n      \"AssumeRolePolicyDocument\": {","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/aws-iam-permission-requirements","loc":{"lines":{"from":1543,"to":1582}}}}],["731",{"pageContent":"}\n  }\n}\n{\n  \"key\": \"lambdacellstatecontrollerroleFAFF62D3\",\n  \"value\": {\n    \"Type\": \"AWS::IAM::Role\",\n    \"Properties\": {\n      \"AssumeRolePolicyDocument\": {\n        \"Statement\": [\n          {\n            \"Action\": \"sts:AssumeRole\",\n            \"Effect\": \"Allow\",\n            \"Principal\": {\n              \"Service\": \"lambda.amazonaws.com\"\n            }\n          }\n        ],\n        \"Version\": \"2012-10-17\"\n      },\n      \"ManagedPolicyArns\": [\n        \"arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\"\n      ]\n    },\n    \"Metadata\": {\n      \"aws:cdk:path\": \"gitpod-cell/lambda-cellstate-controller-role/Resource\"\n    }\n  }\n}\n{\n  \"key\": \"cellstatecontrollercanaccessssm288FE590\",\n  \"value\": {\n    \"Type\": \"AWS::IAM::Policy\",\n    \"Properties\": {\n      \"PolicyDocument\": {\n        \"Statement\": [\n          {\n            \"Action\": [\n              \"ssm:GetParameter\",\n              \"ssm:GetParameters\"\n            ],\n            \"Effect\": \"Allow\",\n            \"Resource\": {","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/aws-iam-permission-requirements","loc":{"lines":{"from":1582,"to":1624}}}}],["732",{"pageContent":"\"Statement\": [\n          {\n            \"Action\": [\n              \"ssm:GetParameter\",\n              \"ssm:GetParameters\"\n            ],\n            \"Effect\": \"Allow\",\n            \"Resource\": {\n              \"Fn::Sub\": [\n                \"arn:aws:ssm:${region}:${accountID}:parameter/*\",\n                {\n                  \"accountID\": {\n                    \"Ref\": \"AWS::AccountId\"\n                  },\n                  \"region\": {\n                    \"Ref\": \"AWS::Region\"\n                  }\n                }\n              ]\n            }\n          },\n          {\n            \"Action\": [\n              \"secretsmanager:CreateSecret\",\n              \"secretsmanager:PutSecretValue\",\n              \"secretsmanager:GetSecretValue\"\n            ],\n            \"Effect\": \"Allow\",\n            \"Resource\": {\n              \"Fn::Sub\": [\n                \"arn:aws:secretsmanager:${region}:${accountID}:secret:/gitpod/substrate/foobar/*\",\n                {\n                  \"accountID\": {","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/aws-iam-permission-requirements","loc":{"lines":{"from":1624,"to":1656}}}}],["733",{"pageContent":"\"Fn::Sub\": [\n                \"arn:aws:secretsmanager:${region}:${accountID}:secret:/gitpod/substrate/foobar/*\",\n                {\n                  \"accountID\": {\n                    \"Ref\": \"AWS::AccountId\"\n                  },\n                  \"region\": {\n                    \"Ref\": \"AWS::Region\"\n                  }\n                }\n              ]\n            }\n          }\n        ],\n        \"Version\": \"2012-10-17\"\n      },\n      \"PolicyName\": \"cellstatecontrollercanaccessssm288FE590\",\n      \"Roles\": [\n        {\n          \"Ref\": \"lambdacellstatecontrollerroleFAFF62D3\"\n        }\n      ]\n    },\n    \"Metadata\": {\n      \"aws:cdk:path\": \"gitpod-cell/cellstate-controller-can-access-ssm/Resource\"\n    }\n  }\n}","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/aws-iam-permission-requirements","loc":{"lines":{"from":1656,"to":1683}}}}],["734",{"pageContent":"```\n\n</details>\n\n</div>\n\n</details>\n\n<details>\n\n<summary class=\"text-p-medium mt-8 text-important\"><b>Debugging role that can be assumed by the customer only</b></summary>\n\n<div class=\"ml-4 mt-2\">\n\nIn extraordinary circumstances, it may be necessary to perform certain operations within the AWS account of the Gitpod Dedicated instance. Only the customer is able to access this, and thus a Gitpod employee may ask a Customer to assume this role. Please see [Getting Access to the Instance for Debugging](/docs/gitpod-dedicated/guides/getting-access-to-the-instance-for-debugging) for more information.\n\nThis role is called `gitpod-customer-debug-access-role` and is created when applying the CloudFormation template to install Gitpod. This role includes two sets of permissions:","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/aws-iam-permission-requirements","loc":{"lines":{"from":1684,"to":1700}}}}],["735",{"pageContent":"This role is called `gitpod-customer-debug-access-role` and is created when applying the CloudFormation template to install Gitpod. This role includes two sets of permissions:\n\n-   **Read-only access to the AWS account a Gitpod Dedicated instance is running:** This read only access is defined by the default AWS managed policy `arn:aws:iam::aws:policy/ReadOnlyAccess` which grants read-only access to all AWS resources and services within an account.\n-   **Read and write access to the Kubernetes clusters that are used to run Gitpod:** Gives the customer (_not_ Gitpod!) `kubectl` access to the Kubernetes clusters used to run Gitpod.\n\n</div>\n\n</details>","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/aws-iam-permission-requirements","loc":{"lines":{"from":1700,"to":1707}}}}],["736",{"pageContent":"---\nsection: gitpod-dedicated/reference\ntitle: Gitpod Dedicated References\n---\n\n# Gitpod Dedicated References\n\n## Table of Contents\n\n-   [AWS IAM permission requirements](/docs/gitpod-dedicated/reference/aws-iam-permission-requirements)\n-   [Architecture](/docs/gitpod-dedicated/reference/architecture)\n-   [Networking and Data Flow](/docs/gitpod-dedicated/reference/networking-data-flows)\n-   [Infrastructure Cost](/docs/gitpod-dedicated/reference/infrastructure-cost)\n-   [Infrastrcture Update Changelog](/docs/gitpod-dedicated/reference/infrastructure-update-changelog)","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference","loc":{"lines":{"from":1,"to":14}}}}],["737",{"pageContent":"---\nsection: gitpod-dedicated/reference\ntitle: Infrastructure cost - Gitpod Dedicated docs\n---\n\n# Infrastructure cost of Gitpod Dedicated\n\n> ℹ️ The infrastructure cost of Gitpod dedicated are payed for by the customer. This page helps set expectations for their magnitude. The cost will vary based on usage patterns. Your Gitpod Account Manager can work with you to obtain a customised estimate of the infrastructure costs below and discuss the license costs of Gitpod Dedicated itself.","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/infrastructure-cost","loc":{"lines":{"from":1,"to":8}}}}],["738",{"pageContent":"## Projected cost of a Gitpod Dedicated instance\n\nThe running infrastructure cost of a Gitpod Dedicated instances can be split into:\n\n    -   Fixed cost for running the dashboard and supporting services\n    -   Variable cost for running workspaces\n\nThe variable cost scale with the number of running workspaces and their size. This makes determining a precise estimate of the overall cost impossible as different usage patterns result in different cost. However, internal and customer data points can be used to extrapolate to following scenarios:\n\n> ⚠️ The exact cost varies greatly depending on usage patterns, number of users, AWS region used, currency exchange, existing AWS discounts, AWS capacity reservations and more. There are further ways to reduce cost. The numbers below are merely an example and _not_ representative.","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/infrastructure-cost","loc":{"lines":{"from":10,"to":19}}}}],["739",{"pageContent":"| Scenario  | Fixed Infrastructure Cost | Variable Infrastructure Cost | Total Monthly Cost |\n| --------- | ------------------------- | ---------------------------- | ------------------ |\n| 50 Users  | $2,900                    | $3,840                       | $6,740             |\n| 100 Users | $2,900                    | $7,680                       | $10,580            |\n| 200 Users | $2,900                    | $15,360                      | $18,260            |\n| 500 Users | $2,900                    | $38,400                      | $41,300            |","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/infrastructure-cost","loc":{"lines":{"from":21,"to":26}}}}],["740",{"pageContent":"## Billable services used by the Gitpod Instance\n\nBelow is a list of all billable AWS services that are used with Gitpod Dedicated:\n\n-   EC2\n-   VPC\n-   Relational Database Service\n-   Elastic Container Service for Kubernetes\n-   CloudWatch\n-   CloudTrail\n-   Kinesis Firehose\n-   Elastic Load Balancing\n-   S3\n-   ElastiCache\n-   DynamoDB\n-   EC2 Container Registry (ECR)\n-   Secrets Manager\n-   Lambda\n-   Key Management Service\n-   Route 53\n-   SNS","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/infrastructure-cost","loc":{"lines":{"from":28,"to":48}}}}],["741",{"pageContent":"---\nsection: gitpod-dedicated/reference\ntitle: Infrastructure cost - Gitpod Dedicated docs\n---\n\n# Networking and Data Flows in Gitpod Dedicated\n\n> ℹ️ Gitpod Dedicated was designed with the goal of minimizing data inflows and relying mostly on data outflows to operate. This reduces the number of external access points, thus reducing the potential attack surface.\n\n## Data flows\n\nThe following is a summary of the data flows that can be expected coming into and going out of a Gitpod Dedicated instance.\n\n**Outgoing flows include:**\n\n-   Making calls and sending heartbeats to the Substrate API (Gitpod Dedicated Control Plane) in order to send status updates and to check for available updates\n-   Sending out observability data for support purposes\n\n**Incoming flows include:**\n\n-   Downloading images from ECR/Docker to update Gitpod","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/networking-data-flows","loc":{"lines":{"from":1,"to":21}}}}],["742",{"pageContent":"## Connectivity Requirements:\n\nFor Gitpod to function, the following services need to be reachable from the instance at a minimum:\n\n> ℹ️ When using All Private networking mode (described below), the customer is responsible for ensuring connectivity to all of these.","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/networking-data-flows","loc":{"lines":{"from":23,"to":27}}}}],["743",{"pageContent":"-   **Login via SSO** (outbound connectivity only): This feature allows users to log into the instance when using SSO via OIDC (default). Only outbound connectivity is needed as the callback URL is resolved on the users machine rather than within the Gitpod Instance. If the provider for SSO is only available on the public internet, this means the instance requires an outward route to the internet.\n-   **Git provider** (outbound connectivity always required, inbound connectivity for prebuilds): This feature enables users to see the contents of their Git repos and for enabling [prebuilds](https://www.gitpod.io/docs/configure/projects/prebuilds). For prebuilds, inbound connectivity is required as they use webhooks to be triggered. If the git provider is only available on the public internet (e.g. Gitlab.com), this means the instance requires an inbound and outbound connection to the public internet.","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/networking-data-flows","loc":{"lines":{"from":29,"to":30}}}}],["744",{"pageContent":"-   **Identity Provider (IDP) connectivity** (inbound and outbound connectivity): IDP connectivity (both inbound and outbound) is required to enable [OIDC from within workspaces](https://www.gitpod.io/docs/configure/workspaces/oidc). This allows workspaces to connect and authenticate with third party services such as AWS. If the IDP is only available on the public internet, this means the instance requires an inbound and outbound connection to the public internet.\n-   **[Open VSX](https://open-vsx.org/)** (outbound connectivity only)**:** In order for VS code extensions to work, the following endpoints need to be reachable from the Gitpod Account and, if using VS Code Desktop, from the users workstation:\n    -   [https://open-vsx.gitpod.io](https://open-vsx.gitpod.io/): This is the registry that contains references to the VS code extensions.","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/networking-data-flows","loc":{"lines":{"from":31,"to":33}}}}],["745",{"pageContent":"-   [https://open-vsx.gitpod.io](https://open-vsx.gitpod.io/): This is the registry that contains references to the VS code extensions.\n    -   [https://openvsxorg.blob.core.windows.net](https://openvsxorg.blob.core.windows.net/): The actual content of the extensions is downloaded from blob storage.","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/networking-data-flows","loc":{"lines":{"from":33,"to":34}}}}],["746",{"pageContent":"### Networking Modes and Diagrams\n\nGitpod Dedicated can operate in four different networking modes depending on the customer’s choice. These differ in their connectivity on the ingress and egress side to the public internet. Please see the diagram below for an overview:\n\n![Gitpod Dedicated Networking Modes](/images/docs/gitpod-dedicated/reference/networking-data-flows/Gitpod-Dedicated-Architecture.webp)\n\nBenefits of each networking mode:","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/networking-data-flows","loc":{"lines":{"from":36,"to":42}}}}],["747",{"pageContent":"-   **All Private:** This mode gives the customer a maximum of control over network traffic, as all traffic except for what needs to reach the Gitpod Dedicated Control plane is routed through the customer’s network. As such, the customer can use their own firewall, perform deep packet inspection and more. However, the burden is on the customer to ensure that all the services required for Gitpod to function are reachable - for example, this may include public-only endpoints required to do SSO via OIDC (e.g. Azure AD auth endpoints). See Connectivity Requirements above.","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/networking-data-flows","loc":{"lines":{"from":44,"to":44}}}}],["748",{"pageContent":"-   _Optionally_ public services can be exposed. Here, an API Gateway is added to expose endpoints for webhooks (required for prebuilds, e.g. Gitlab.com, to allow webhooks to be forwarded to internal Gitpod services) and IDP services (required to enable the use of public [OIDC IDPs within workspaces](https://www.gitpod.io/docs/configure/workspaces/oidc)) to the public internet. An allowlist can be used to restrict access. The added API gateway enables these features without:\n        -   Exposing the entire instance to the public internet\n        -   Extra effort to add public ingress within the customer’s network behind the transit gateway.","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/networking-data-flows","loc":{"lines":{"from":45,"to":47}}}}],["749",{"pageContent":"-   Exposing the entire instance to the public internet\n        -   Extra effort to add public ingress within the customer’s network behind the transit gateway.\n-   **Mixed with private ingress:** This mode also restricts public access of the instance. However, an Internet Gateway is added for egress traffic only. This allows the customer’s network to control ingress to the Gitpod instance without having to add an additional route to the internet. This enables use cases where outward facing internet connectivity is required (e.g. to reach a public SSO provider such as Azure AD). All ingress still happens via the customer’s network.","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/networking-data-flows","loc":{"lines":{"from":47,"to":49}}}}],["750",{"pageContent":"-   _Optionally_ public services can be exposed. Here, an API Gateway is added to expose endpoints for webhooks (required for prebuilds, e.g. Gitlab.com, to allow webhooks to be forwarded to internal Gitpod services) and IDP services (required to enable the use of public [OIDC IDPs within workspaces](https://www.gitpod.io/docs/configure/workspaces/oidc)) to the public internet. An allowlist can be used to restrict access. The added API gateway enables these features without:\n        -   Exposing the entire instance to the public internet\n        -   Extra effort to add public ingress within the customer’s network behind the transit gateway.\n-   **Mixed with Public Ingress:** This mode results in the instance being accessible to the public internet, allowing for developers anywhere to access the Gitpod installation (restrictions can be applied solely on IP ranges via an allow list). This still allows access to private resources that the Gitpod installation is allowed to connect to.","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/networking-data-flows","loc":{"lines":{"from":50,"to":53}}}}],["751",{"pageContent":"-   **All Public:** This mode results in all ingress and egress traffic being routed via the public internet. This is useful for situations where network access is not too much a concern or if the ease of setup is a priority (e.g. for a PoV). The Gitpod instance will be behind a static range of IP addresses representing the installation and their users workspace traffic, allowing for the Gitpod Instance to be allow listed in other services.","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/networking-data-flows","loc":{"lines":{"from":54,"to":54}}}}],["752",{"pageContent":"<!-- Add toggle using summary and details -->\n\n<details>\n    <summary class=\"text-body text-large\"><b>All Private</b></summary>\n\n<div class=\"ml-2 md:ml-4\">","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/networking-data-flows","loc":{"lines":{"from":56,"to":61}}}}],["753",{"pageContent":"<div class=\"ml-2 md:ml-4\">\n\n-   The instance is not accessible by the public internet, it is essentially “air gapped” unless the customer chooses to allow internet access from within their network.\n-   Users access the instance via the Transit Gateway in the customer’s AWS account.\n-   All traffic (ingress and egress) is routed through the Transit Gateway attachment, except for the traffic to the Gitpod Dedicated Control plane, which is routed via AWS PrivateLink. There is no _incoming_ connection into the Gitpod VPC except for the Transit Gateway attachment.\n-   _Optionally_ public services can be exposed. Here, an API Gateway is added to expose endpoints for webhooks (required for prebuilds, e.g. Gitlab.com, to allow webhooks to be forwarded to internal Gitpod services) and IDP services (required to enable the use of public [OIDC IDPs within workspaces](https://www.gitpod.io/docs/configure/workspaces/oidc)) to the public internet. This ingress can be allow listed.","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/networking-data-flows","loc":{"lines":{"from":61,"to":66}}}}],["754",{"pageContent":"-   `Relay CIDR range` requirements: - The entire VPC used in the Gitpod installation ~~is~~ has a /10 CIDR block. This takes the form of `100.70.0.0/16` and does not need to be routable from the customer network. However, the relay CIDR may not be in this `100.70.0.0/16` range. - Gitpod only requires a `/25` CIDR block to be routable to or from the customer’s network. This is the relay CIDR in the diagram below. - For more information on CIDR range requirements, please see\n\n![Gitpod Dedicated Networking Modes in All Private mode](/images/docs/gitpod-dedicated/reference/networking-data-flows/Gitpod-Dedicated-Architecture-all-private.webp)\n\nFor more information on CIDR range requirements, please see: [Pt. 4 in \"All Private Networking Mode\"](/docs/gitpod-dedicated/guides/getting-started#:~:text=All%20Private%20Networking%20Mode)\n\n</div>\n\n</details>\n<details>\n    <summary class=\"text-body text-large mt-4 md:mt-8\"><b>Mixed with Private Ingress</b></summary>\n\n<div class=\"ml-2 md:ml-4\">","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/networking-data-flows","loc":{"lines":{"from":68,"to":80}}}}],["755",{"pageContent":"-   The instance is not available on the public internet. However, there is an ability to route to public endpoints on the egress path only.\n-   Users access the instance via the Transit Gateway in the customer’s AWS account.\n-   Egress traffic that is part of the customer defined CIDR (CIDR range of your network in [Getting Started](/docs/gitpod-dedicated/guides/getting-started)) is routed through the Transit Gateway attachment. Everything that is outside of the customer defined CIDR range is routed through Internet Gateway. The only exception to this is the traffic to the Gitpod Dedicated Control plane, which is routed via AWS PrivateLink. There is no incoming connection into the Gitpod VPC except for the Transit Gateway attachment.","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/networking-data-flows","loc":{"lines":{"from":82,"to":84}}}}],["756",{"pageContent":"-   _Optionally_ public services can be exposed. Here, an API Gateway is added to expose endpoints for webhooks (required for prebuilds, e.g. Gitlab.com, to allow webhooks to be forwarded to internal Gitpod services) and IDP services (required to enable the use of public OIDC IDPs within workspaces) to the public internet. This ingress can be allow listed.\n-   `Relay CIDR range` requirements:\n    -   The entire VPC used in the Gitpod installation is has a /10 CIDR block. This takes the form of `100.70.0.0/16` and does not need to be routable from the customer network. However, the relay CIDR may not be in this `100.70.0.0/16` range.\n    -   Gitpod only requires a `/25` CIDR block to be routable to or from the customer’s network. This is the relay CIDR in the diagram below.","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/networking-data-flows","loc":{"lines":{"from":85,"to":88}}}}],["757",{"pageContent":"-   Gitpod only requires a `/25` CIDR block to be routable to or from the customer’s network. This is the relay CIDR in the diagram below.\n    -   For more information on CIDR range requirements, please see [Pt. 5 in \"Mixed with Private Ingress Networking Mode\"](/docs/gitpod-dedicated/guides/getting-started#:~:text=Mixed%20with%20Private%20Ingress%20Networking%20Mode).","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/networking-data-flows","loc":{"lines":{"from":88,"to":89}}}}],["758",{"pageContent":"![Gitpod Dedicated Networking Modes in Mixed with Public Ingress](/images/docs/gitpod-dedicated/reference/networking-data-flows/Gitpod-Dedicated-Architecture-mixed-with-pvt-ingress.webp)\n\n</div>\n\n</details>\n<details>\n    <summary class=\"text-body text-large mt-4 md:mt-8\"><b>Mixed with Public Ingress</b></summary>\n\n<div class=\"ml-2 md:ml-4\">","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/networking-data-flows","loc":{"lines":{"from":91,"to":99}}}}],["759",{"pageContent":"-   Users access the instance via the public internet\n-   Egress traffic that is part of the customer defined CIDR (`CIDR range of your network` in [Getting Started](/docs/gitpod-dedicated/guides/getting-started) ) is routed through the Transit Gateway attachment. Everything that is outside of the customer defined CIDR range is routed through Internet Gateway. The only exception to this is the traffic to the Gitpod Dedicated Control plane, which is routed via AWS PrivateLink. There is no _incoming_ connection into the Gitpod VPC except for the Transit Gateway attachment.\n-   Ingress can be allow listed.\n-   `Relay CIDR range` requirements:\n    -   The entire VPC used in the Gitpod installation is has a /10 CIDR block. This takes the form of `100.70.0.0/16` and does not need to be routable from the customer network. However, the relay CIDR may not be in this `100.70.0.0/16` range.","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/networking-data-flows","loc":{"lines":{"from":101,"to":105}}}}],["760",{"pageContent":"-   Gitpod only requires a `/25` CIDR block to be routable to or from the customer’s network. This is the relay CIDR in the diagram below.\n    -   For more information on CIDR range requirements, please see [Pt. 4 in \"Mixed with Public Ingress Networking Mode\"](/docs/gitpod-dedicated/guides/getting-started#:~:text=Mixed%20with%20Public%20Ingress%20Networking%20Mode).","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/networking-data-flows","loc":{"lines":{"from":106,"to":107}}}}],["761",{"pageContent":"![Gitpod Dedicated Networking Modes in Mixed with Public Ingress](/images/docs/gitpod-dedicated/reference/networking-data-flows/Gitpod-Dedicated-Architecture-mixed-public-ingress.webp)\n\n</div>\n\n</details>\n\n<details>\n    <summary class=\"text-body text-large mt-4 md:mt-8\"><b>All Public</b></summary>\n\n<div class=\"ml-2 md:ml-4\">\n\n-   All ingress and egress traffic is routed via the public internet.\n-   Ingress can be allow listed.\n\n![Gitpod Dedicated Networking Modes in in All Public mode](/images/docs/gitpod-dedicated/reference/networking-data-flows/Gitpod-Dedicated-Architecture-all-public.webp)\n\n</div>\n\n</details>","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/networking-data-flows","loc":{"lines":{"from":109,"to":127}}}}],["762",{"pageContent":"---\nsection: gitpod-dedicated/reference\ntitle: Infrastructure Update Changelog - Gitpod Dedicated docs\n---\n\n# Infrastructure Update Changelog\n\n> ℹ️ This is a changelog detailing the changes that go into Infrastructure updates. More information on these updates can be found in [Deployment and Updates](/docs/gitpod-dedicated/background/deployment-updates). A guide on how to apply them can be found in [Updating the Gitpod Dedicated Infrastructure](/docs/gitpod-dedicated/guides/updating-gitpod-dedicated-infrastructure).\n\n<details>\n    <summary class=\"text-body text-large\"><b>Infrastructure Update v25</b> (released 14 August, 2023 )</summary>\n\n<div class=\"ml-2 md:ml-4\">\n\n> ❗️ This update impacts running workspaces and should not be done during working hours. **You can expect a downtime of 5 minutes** after the CloudFormation Change Set is applied as new nodes are spun up.","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/infrastructure-update-changelog","loc":{"lines":{"from":1,"to":15}}}}],["763",{"pageContent":"> ℹ️ Creating the change set can take longer than usual. Further, once the change stack is applied, the clean up step will take longer than usual - up to 40 minutes (see below for reasoning). The Gitpod instance can be used as normal during this time. Future updates will take less time again.","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/infrastructure-update-changelog","loc":{"lines":{"from":17,"to":17}}}}],["764",{"pageContent":"### How to update\n\n-   Your Gitpod Account Manager will provide you with two CloudFormation templates (one for the infrastructure template role and one for Gitpod itself) that both need to be applied as change sets.\n\n-   Follow the process laid out on [Updating the Gitpod Dedicated Infrastructure](/docs/gitpod-dedicated/guides/updating-gitpod-dedicated-infrastructure)","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/infrastructure-update-changelog","loc":{"lines":{"from":19,"to":23}}}}],["765",{"pageContent":"### Changelog\n\n-   Support for custom CA certificates (important: An application release is necessary to fully roll out this feature. You can ask your Gitpod Account Manager whether your instance has received the required release)\n-   Disabled scaling the instance to 0 nodes during working hours (6:00 to 22:00 local time to the instance) to speed up the workspace starts in the morning. Scale to 0 is still enabled on weekends.\n-   Improvements of log groups associated with Lambda functions to reduce cost and align function names with AWS conventions. This requires all lambdas to be recreated, leading to the longer than usual clean up time mentioned above.\n-   Enforce use of IMDSv2 AWS metadata endpoint for EC2 instances\n-   Various bug fixes","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/infrastructure-update-changelog","loc":{"lines":{"from":25,"to":31}}}}],["766",{"pageContent":"### Expected CloudFormation Change Set\n\nThe change set being generated as part of this CF change is expected to include the following changes:\n\n**Changes to the stack for the role used to execute the Gitpod CF template:**\n\n![Changes in Gitpod CF Template - 10 Aug 2023](/images/docs/gitpod-dedicated/reference/infrastructure-update-changelog/10-aug-2023/changes-gitpod-cf-template.webp)\n\n### Changes to Gitpod CF template\n\n<a href='/images/docs/gitpod-dedicated/reference/infrastructure-update-changelog/10-aug-2023/infra-version-25-changes.json' download>infra-version-25-changes.json</a>\n\n</div>\n\n</details>\n\n<details>\n    <summary class=\"text-body text-large mt-8\"><b>Infrastructure Update v19</b> (released July 13, 2023)</summary>\n\n<div class=\"ml-2 md:ml-4\">","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/infrastructure-update-changelog","loc":{"lines":{"from":33,"to":52}}}}],["767",{"pageContent":"### How to update\n\n-   Follow the process laid out in [Updating the Gitpod Dedicated Infrastructure](/docs/gitpod-dedicated/guides/updating-gitpod-dedicated-infrastructure)\n\n-   This update does not impact running workspaces and can be done during working hours.\n\n### Changelog\n\n-   Update to the application controller (Lambda) to improve the ordering of its operations\n-   Turn off debug mode for the telemetry controller as it was logging too much\n-   Turn off AZ rebalancing which was impacting the stability of some nodes and thus workspaces\n-   Set workspace DNS resolvers to be local VPC resolver IP instead of public DNS lookup. This resolves networking issues in environments where public DNS lookups are blocked. This is the first of a two part roll out process, the second part is an application change.","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/infrastructure-update-changelog","loc":{"lines":{"from":54,"to":65}}}}],["768",{"pageContent":"### Expected CloudFormation Change Set\n\nThe change set being generated as part of this CF change is expected to include the following 14 changes:\n\n![Changes in Gitpod CF Template - 10 Aug 2023](/images/docs/gitpod-dedicated/reference/infrastructure-update-changelog/13-july-2023/changes.webp)\n\n</div>\n\n</details>","metadata":{"source":"https://www.gitpod.io/docs/gitpod-dedicated/reference/infrastructure-update-changelog","loc":{"lines":{"from":67,"to":75}}}}],["769",{"pageContent":"---\nsection: help/contribute\ntitle: Contribute\ndescription: Learn how you can contribute to Gitpod through documentation updates, features, patches, content creation and more.\n---\n\n# Contribute\n\nThe team behind Gitpod has built in the open for the last decade. Transparency is key and as a company Gitpod strives to be as open about as many things as possible. This refers to both developing Gitpod in the open (public issues, public roadmap, public milestones) as well as how employees interact on a personal level with other human beings. Gitpodders are strong believers in the benefits that an open culture provides. At Gitpod we are open-minded, inclusive, transparent, and curious. We always remain students of the game, not masters of the game.\n\n`youtube: KcSeDGSMexs`","metadata":{"source":"https://www.gitpod.io/docs/help/contribute","loc":{"lines":{"from":1,"to":11}}}}],["770",{"pageContent":"`youtube: KcSeDGSMexs`\n\nWe 🧡 the people who are involved in this project, and we’d love to have you on board, especially if you are just getting started or have never contributed to open-source before. So here's to you, lovely person who wants to join us — this is how you can support us:\n\n-   [Contribute to Gitpod Samples](https://github.com/gitpod-samples#-welcome-to-gitpod-samples)\n-   [Participating in the Gitpod Discord community](https://www.gitpod.io/chat).\n-   [Responding to questions on StackOverflow](https://stackoverflow.com/questions/tagged/gitpod).\n-   [Creating content that shares your experiences with Gitpod](contribute/content)\n-   [Using the feedback widget at the bottom of each page in our documentation](contribute/documentation).\n-   [Submitting documentation updates when you learn something that you think other developers would also benefit from](contribute/documentation).\n-   [Making contributions to the code base](contribute/features-and-patches).","metadata":{"source":"https://www.gitpod.io/docs/help/contribute","loc":{"lines":{"from":11,"to":21}}}}],["771",{"pageContent":"---\nsection: public-roadmap\ntitle: Public roadmap\n---\n\n# Public roadmap\n\n> 🚧 **Under Construction** 🚧 - Looking for the Gitpod public roadmap?\n\nWe are currently in a process of re-thinking how we can best communicate upcoming changes to Gitpod with our customers, users and community members.\n\nWe still _love_ hearing what you think about Gitpod, as we build the future of [CDE](https://www.gitpod.io/cde)'s together—that has not changed! In the mean time, here are some ways that you can stay in touch:\n\n-   To see what was recently released, see our [Changelog](https://gitpod.io/changelog).\n-   For feedback and feature requests, see our repo on [GitHub](https://github.com/gitpod-io/gitpod/issues/new/choose).\n-   To chat about Gitpod, join us in [Discord](https://gitpod.io/chat).\n\n**Why did we deprecate the public roadmap?**","metadata":{"source":"https://www.gitpod.io/docs/help/public-roadmap","loc":{"lines":{"from":1,"to":18}}}}],["772",{"pageContent":"**Why did we deprecate the public roadmap?**\n\nOur previous public roadmap was tied to GitHub issues, which became difficult to maintain and could at times be confusing or misleading, especially when plans changed—as they often do—as we adapted Gitpod features to the feedback of our users and customers.\n\n**Where can I hear about what's planned and upcoming?**\n\nKeep an eye on our [Changelog](https://gitpod.io/changelog), because we like to [rollout features early](https://www.gitpod.io/docs/help/public-roadmap/release-cycle) to get your feedback and input. We're also very active in [Discord](https://gitpod.io/chat), which is a great place for discussions and conversations about Gitpod... so, why not join the next community session?","metadata":{"source":"https://www.gitpod.io/docs/help/public-roadmap","loc":{"lines":{"from":18,"to":24}}}}],["773",{"pageContent":"---\nsection: public-roadmap\ntitle: Release Cycle\ndescription: Learn how Gitpod releases updates and manages their release cycle.\n---\n\n# Release Cycle\n\nInformation regarding how, and when Gitpod releases updates.\n\nFor information on latest changes, please see the [changelog](/changelog).\n\n## Gitpod Release Cycle\n\n1. **Private Beta** - Available by invitation only (see: [gitpod.io/labs](https://www.gitpod.io/labs)).\n2. **Beta** - Feature and published APIs are relatively stable.\n3. **General Availability (GA)** - Features and published API's are stable. Deprecations and API changes will be communicated in advance.","metadata":{"source":"https://www.gitpod.io/docs/help/public-roadmap/release-cycle","loc":{"lines":{"from":1,"to":17}}}}],["774",{"pageContent":"---\nsection: getting-started\ntitle: Getting started\ndescription: Learn how to start your first Gitpod workspace for free, set up a gitpod.yml configuration file and enable Prebuilds.\n---\n\n# Getting started\n\nIn this guide we'll walk you through the basics to get up and running with Gitpod today.\n\n-   [Step 1: Your first workspace](#step-1-your-first-workspace)\n-   [Step 2: Customize Gitpod](#step-2-customize-gitpod)\n-   [Step 3: Gitpodify a project](#step-3-gitpodify-a-project)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started","loc":{"lines":{"from":1,"to":13}}}}],["775",{"pageContent":"## Step 1: Your first workspace\n\n`youtube: ij1msCffQZA`\n\nThe best way to get see the power of Gitpod, is to try it out by starting your first [Workspace](/docs/configure/workspaces).\n\nTo start your first workspace:\n\n1. Navigate to a GitHub, GitLab or Bitbucket repository.\n2. Open the repo in Gitpod by prefixing the URL with: `gitpod.io/#`.\n3. Confirm the workspace creation.\n\nFor example, click this link to open the NodeJS project in a Gitpod workspace:\n\n[`https://gitpod.io/#https://github.com/nodejs/node`](https://gitpod.io/#https://github.com/nodejs/node)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started","loc":{"lines":{"from":15,"to":29}}}}],["776",{"pageContent":"## Step 2: Customize Gitpod\n\n`youtube: c6zc3LL1S98`\n\nGitpod can be customized depending on the needs of the project, and your own personal taste. With Gitpod, you can set an IDE preference between VS Code and JetBrains, either working in the browser, or on your desktop application. You can add custom scripts via Dotfiles.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started","loc":{"lines":{"from":31,"to":35}}}}],["777",{"pageContent":"### Set your IDE preference\n\n<figure>\n  <video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" src=\"/images/editors/select-jetbrains-ide.webm\" type=\"video/webm\"></video>\n  <figcaption>Updating Gitpod IDE preferences to {title}</figcaption>\n</figure>\n\nWork in the browser with [VS Code Browser](/docs/references/ides-and-editors/vscode-browser), or on desktop with [VS Code Desktop](/docs/references/ides-and-editors/vscode) or [JetBrains Gateway](/docs/integrations/jetbrains-gateway). To set your preferences, navigate to [gitpod.io/preferences](https://gitpod.io/preferences) to set your [IDE preference](/docs/references/ides-and-editors).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started","loc":{"lines":{"from":37,"to":44}}}}],["778",{"pageContent":"### Install the browser extension\n\n![Browser Extension](/images/docs/browser-extension-lense.png)\n\nA convenient way to work with Gitpod is using the custom [browser extension](/docs/configure/user-settings/browser-extension). Using the extension you can open workspaces directly from inside GitHub and GitLab.\n\n### Set your Dotfiles\n\nDotfiles are a way to customize your developer environment according to your personal needs. To configure Gitpod to use your own dotfiles for all your workspaces, enter the URL of a dotfiles repository in your user preferences. See [Dotfiles](/docs/configure/user-settings/dotfiles) for more.\n\nSee [User Settings](/docs/configure/user-settings) for more ways to customize Gitpod.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started","loc":{"lines":{"from":46,"to":56}}}}],["779",{"pageContent":"## Step 3: Gitpodify a project\n\nGitpod uses a `.gitpod.yml` file located at the root of your repository to unlock all benefits. It defines the processes to start for your project (e.g. a database or webserver), installs the required tools, editor extensions or IDE plugins. To get started:\n\n1. Add a `.gitpod.yml` at the root of your repository.\n    - You can use `gp init` to quickly generate the `.gitpod.yml` file.\n2. Use the `gp validate` command to validate your configuration is working.\n3. Commit and push to apply the configuration for all subsequent workspace starts.\n\nEvery opened workspace will now run the steps defined in your `gitpod.yml`.\n\nFor more, see the [.gitpod.yml reference](/docs/references/gitpod-yml) and [configuring workspaces](/docs/configure/workspaces).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started","loc":{"lines":{"from":58,"to":69}}}}],["780",{"pageContent":"### A gitpod.yml example\n\n```yml\nimage: gitpod/workspace-full\n\n# Commands that will run on workspace start\ntasks:\n    - name: Setup, Install & Build\n      before: yarn global add express\n      init: yarn install\n      command: yarn build\n\n# Ports to expose on workspace startup\nports:\n    - port: 3000\n      onOpen: open-preview\n      name: Website\n      description: Website Preview\n      visibility: private\n      protocol: https\n```\n\n**Caption:** An example project configured to install, build and run a `yarn` project with a webserver, exposed on port 3000. On start, the webserver preview is opened automatically.\n\nSee the [.gitpod.yml reference page](/docs/references/gitpod-yml) for more.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started","loc":{"lines":{"from":71,"to":95}}}}],["781",{"pageContent":"---\nsection: languages\ntitle: Bash in Gitpod\n---\n\n# Bash in Gitpod\n\nBash is the default shell for Gitpod. However, if you're developing a Bash script yourself, you may want to configure additional language support.\n\n## Example Repositories\n\nHere are a few Bash example projects that are already automated with Gitpod:\n\n<div class=\"overflow-x-auto\">\n\n| Repository                                        | Description                      | Try It                                                                                                                |\n| ------------------------------------------------- | -------------------------------- | --------------------------------------------------------------------------------------------------------------------- |\n| [inlets/inlets](https://github.com/inlets/inlets) | Reverse proxy and service tunnel | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/inlets/inlets) |\n\n</div>","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/bash","loc":{"lines":{"from":1,"to":20}}}}],["782",{"pageContent":"## VS Code Extensions\n\n### ShellCheck\n\nShellCheck provides linting for common mistakes in your shell script.\n\nTo use ShellCheck in Gitpod, first, we must install the `shellcheck` tool. Here is a simple Dockerfile to get you started:\n\n```dockerfile\nFROM gitpod/workspace-full\n\nUSER gitpod\n\nRUN brew install shellcheck\n```\n\nYou should also install the shellcheck VS Code extension in Gitpod, by adding a [.gitpod.yml](/docs/references/gitpod-yml) configuration file to your repository that looks like this (notice the `vscode` extensions section):\n\n```yml\nimage:\n    file: .gitpod.Dockerfile\n\nvscode:\n    extensions:\n        - timonwong.shellcheck@0.9.0:hsU/Rd39aqPYowTqL+DbXg==\n```\n\nNot sure about ShellCheck? Try it in Gitpod!\n\n[![gitpod-io/Gitpod-ShellCheck](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-io/Gitpod-ShellCheck)","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/bash","loc":{"lines":{"from":22,"to":51}}}}],["783",{"pageContent":"### Bash IDE\n\n![A Bash IDE demonstration](/images/docs/bashIDE.png)\n\nJust to name a few things Bash IDE adds: Code completion, hovers, and diagnostic reporting.\n\nTo install Bash IDE to your repository add the following to your [.gitpod.Dockerfile](/docs/configure/workspaces/workspace-image)\n\n```dockerfile\nRUN npm i -g bash-language-server\n```\n\nAlso the following in your\n[.gitpod.yml](/docs/references/gitpod-yml)\n\n```yml\nvscode:\n    extensions:\n        - mads-hartmann.bash-ide-vscode@1.4.0:/qx+rdXE/fGTGWhelNf3aQ==\n```\n\nNot sure about Bash IDE? Try it in Gitpod\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-io/Gitpod-BashIDE)","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/bash","loc":{"lines":{"from":53,"to":76}}}}],["784",{"pageContent":"## Further Reading\n\n-   For more information about ShellCheck please see [shellcheck.net](https://shellcheck.net)\n\n## Known issues\n\n### The shellcheck program was not found\n\n[It has been reported](https://github.com/gitpod-io/gitpod/issues/1461#issuecomment-621232166) that shellcheck extension fails to detect shellcheck from homebrew which results in:\n![shellcheck notification](https://user-images.githubusercontent.com/11302521/80605581-91110b80-8a33-11ea-9247-44cb33134cc9.png)\n\nTo resolve this you need to set `\"shellcheck.executablePath\": \"/home/linuxbrew/.linuxbrew/bin/shellcheck\",` (or to path that point to shellcheck on your system), See https://github.com/vivek-verma202/GWAS_FM/pull/3/files","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/bash","loc":{"lines":{"from":78,"to":89}}}}],["785",{"pageContent":"---\nsection: languages\ntitle: Dart in Gitpod\n---\n\n# Dart in Gitpod","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/dart","loc":{"lines":{"from":1,"to":6}}}}],["786",{"pageContent":"## Example Repositories\n\nHere are a few Dart example projects that are already automated with Gitpod:\n\n<div class=\"overflow-x-auto\">\n\n| Repository                                                                | Description                                                 | Try it                                                                                                                             |\n| ------------------------------------------------------------------------- | ----------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------- |\n| [Flutter Hello World Demo](https://github.com/gitpod-io/template-flutter) | The Flutter hello world demo template configured for Gitpod | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-io/template-flutter) |\n\n</div>","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/dart","loc":{"lines":{"from":8,"to":18}}}}],["787",{"pageContent":"## Installing Dart\n\nTo install the Dart SDK in Gitpod one must add the following to your [.gitpod.Dockerfile](/docs/configure/workspaces/workspace-image)\n\n```dockerfile\nRUN brew tap dart-lang/dart && brew install dart\n```\n\n## VS Code Extensions\n\n### Dart\n\nThis Extension adds cool syntax highlighting\n\n![Syntax highlighting example](/images/docs/AfterSyntaxHighlighting.png)\n\nIt adds [IntelliSense](https://code.visualstudio.com/docs/editor/intellisense) support for autocompletion\n\n![Dart IntelliSense example](/images/docs/DartIntellisenseExample.png)\n\n## Try it\n\nHere is a hello world example of a [Gitpodified](/guides/gitpodify) project running in the browser, try it!\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-io/Gitpod-Dart)","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/dart","loc":{"lines":{"from":20,"to":44}}}}],["788",{"pageContent":"---\nsection: languages\ntitle: C++ in Gitpod\n---\n\n# C++ in Gitpod\n\nGitpod supports C++ right out of the box, but there are still ways to enhance your C++ experience within Gitpod.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/cpp","loc":{"lines":{"from":1,"to":8}}}}],["789",{"pageContent":"## Example Repositories\n\nHere are a few C++ example projects that are already automated with Gitpod:\n\n<div class=\"overflow-x-auto\">","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/cpp","loc":{"lines":{"from":10,"to":14}}}}],["790",{"pageContent":"| Repository                                                         | Description                                                       | Try it                                                                                                                                           |\n| ------------------------------------------------------------------ | ----------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------ |\n| [Component Editor](https://github.com/Circuito-io/ComponentEditor) | circuito.io Component Editor                                      | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/Circuito-io/ComponentEditor)              |","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/cpp","loc":{"lines":{"from":16,"to":18}}}}],["791",{"pageContent":"| [tinyraycaster](https://github.com/ssloy/tinyraycaster)            | old-school FPS in a weekend                                       | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/ssloy/tinyraycaster)                      |\n| [HelloGitPod](https://github.com/Shadouw/HelloGitPod)              | Example Gitpod C++ configuration with `clang-tidy` linter enabled | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/Shadouw/HelloGitPod/blob/master/main.cpp) |","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/cpp","loc":{"lines":{"from":19,"to":20}}}}],["792",{"pageContent":"</div>","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/cpp","loc":{"lines":{"from":22,"to":22}}}}],["793",{"pageContent":"## Environment\n\n### C++ Tools\n\nAll Gitpod workspaces come with the latest available `clang`, `gcc`, `cmake`, `gdb`, and other useful C++ tools pre-installed by default.\n\nHowever, if you're missing some additional tools, you can simply run `brew install <tool_name>` to install it in the current workspace or [write your own .gitpod.Dockerfile](/docs/configure/workspaces/workspace-image#creating-docker-images-for-gitpod) to install it across all workspaces for your repository.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/cpp","loc":{"lines":{"from":24,"to":30}}}}],["794",{"pageContent":"## IDE Features","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/cpp","loc":{"lines":{"from":32,"to":32}}}}],["795",{"pageContent":"### Debugging\n\nSince `gdb` is already pre-installed in Gitpod, you can already debug any C, C++, Go, etc. program directly from the Terminal with a single command.\n\nHowever, you can also get the IDE's Debugging features to work with your C++ program, using GDB as a backend.\n\nTo enable C++ debugging for your project, simply follow these steps:\n\n1. Open the Extensions panel (in the IDE's left vertical menu bar)\n\n2. Use the Search feature to find the extension called \"[Native Debug](https://open-vsx.org/extension/webfreak/debug)\", then click on `Install`, and select `Install for this project`\n\n3. Next, open the Debug panel (also in the IDE's left vertical menu bar), and click on the Gear (⚙️) icon to open the `launch.json` configuration file\n\n4. Finally, configure debugging for your project by adding a GDB launch configuration. You can use auto-completion for assistance. In the end, your `launch.json` should look something like this:","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/cpp","loc":{"lines":{"from":34,"to":48}}}}],["796",{"pageContent":"4. Finally, configure debugging for your project by adding a GDB launch configuration. You can use auto-completion for assistance. In the end, your `launch.json` should look something like this:\n\n```js\n{\n  // Use IntelliSense to learn about possible attributes.\n  // Hover to view descriptions of existing attributes.\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n      {\n          \"type\": \"gdb\",\n          \"request\": \"launch\",\n          \"name\": \"Debug Firefox (GDB)\",\n          \"target\": \"./obj-x86_64-pc-linux-gnu/dist/bin/firefox\",\n          \"cwd\": \"${workspaceRoot}\",\n          \"valuesFormatting\": \"parseText\"\n      }\n  ]\n}","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/cpp","loc":{"lines":{"from":48,"to":65}}}}],["797",{"pageContent":"```\n\nNote: This example GDB launch configuration points to a compiled Firefox browser binary. You'll need to adjust it to point to your project's own compiled binary.\n\nWith this, you should be able to set breakpoints in your C++ code directly from the code editor margin, then start a debugging session from the Debug panel. The IDE should then show you debug information, hopefully pause execution on your breakpoint, and allow you to step through the code.\n\nIf that doesn't work, please feel free to ask for help in [community.gitpod.io](https://community.gitpod.io) and we'll be happy to help you make debugging work for your project.\n\nFor a more in-depth walk-through of how do debug applications, please [refer to this comment on GitHub](https://github.com/gitpod-io/gitpod/issues/4805#issuecomment-883228543).","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/cpp","loc":{"lines":{"from":66,"to":74}}}}],["798",{"pageContent":"## Further Reading\n\n-   <a class=\"no-nowrap\" href=\"https://community.gitpod.io/t/gitpod-and-c/622\">How to enable the `clang-tidy` linter in Gitpod</a>","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/cpp","loc":{"lines":{"from":76,"to":78}}}}],["799",{"pageContent":"---\nsection: languages\ntitle: Deno in Gitpod\n---\n\n# Deno in Gitpod\n\nIt's easy to set up Deno in Gitpod.\n\n## Setting up the Dockerfile\n\nAdd a Dockerfile to your project as [.gitpod.Dockerfile](/docs/configure/workspaces/workspace-image):\n\n```dockerfile\nFROM gitpod/workspace-full\n\nRUN curl -fsSL https://deno.land/x/install/install.sh | sh\nRUN /home/gitpod/.deno/bin/deno completions bash > /home/gitpod/.bashrc.d/90-deno && \\\n    echo 'export DENO_INSTALL=\"/home/gitpod/.deno\"' >> /home/gitpod/.bashrc.d/90-deno && \\\n    echo 'export PATH=\"$DENO_INSTALL/bin:$PATH\"' >> /home/gitpod/.bashrc.d/90-deno\n```\n\nAnd configure this Dockerfile in your [.gitpod.yml](/docs/references/gitpod-yml):\n\n```yml\nimage:\n    file: .gitpod.Dockerfile\n```\n\nIt'll run the latest Deno version and install the Bash completions.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/deno","loc":{"lines":{"from":1,"to":30}}}}],["800",{"pageContent":"## Example Repositories\n\nHere are a few Deno example projects that are already automated with Gitpod:\n\n<div class=\"overflow-x-auto\">\n\n| Repository                                                         | Description                                     | Try it                                                                                                                            |\n| ------------------------------------------------------------------ | ----------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------- |\n| [fake-log-generator](https://github.com/fknipp/fake-log-generator) | Generator for fake log files as CLI application | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/fknipp/fake-log-generator) |\n\n</div>","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/deno","loc":{"lines":{"from":32,"to":42}}}}],["801",{"pageContent":"## VS Code Extensions\n\nHere is a useful extensions that you'll likely want to install in your Deno project.\n\n### [Deno](https://marketplace.visualstudio.com/items?itemName=denoland.vscode-deno)\n\nTo add this extension to your repository, simply open Gitpod's Extensions panel (see left vertical menu in the IDE), then search for \"Deno\" and install it \"for this project\".\n\nNext, simply commit the [.gitpod.yml](/docs/references/gitpod-yml) configuration file that was automatically created (or updated) by Gitpod.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/deno","loc":{"lines":{"from":44,"to":52}}}}],["802",{"pageContent":"---\nsection: languages\ntitle: .NET in Gitpod\n---\n\n# .NET in Gitpod","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/dotnet","loc":{"lines":{"from":1,"to":6}}}}],["803",{"pageContent":"## Example Repositories\n\n<div class=\"overflow-x-auto\">","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/dotnet","loc":{"lines":{"from":8,"to":10}}}}],["804",{"pageContent":"| Repository                                                      | Description                                                                   | Try it                                                                                                                                |\n| --------------------------------------------------------------- | ----------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------- |\n| [dotnetcore](https://github.com/gitpod-io/example-dotnet-core)  | C# .NET Core template                                                         | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-io/example-dotnet-core) |","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/dotnet","loc":{"lines":{"from":12,"to":14}}}}],["805",{"pageContent":"| [uno](https://github.com/unoplatform/uno)                       | Build Mobile, Desktop and WebAssembly apps with C# and XAML                   | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/unoplatform/uno)               |\n| [uno.quickstart](https://github.com/unoplatform/uno.quickstart) | An Uno \"Hello world!\" project using Windows UWP, iOS, Android and WebAssembly | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/unoplatform/uno.quickstart)    |","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/dotnet","loc":{"lines":{"from":15,"to":16}}}}],["806",{"pageContent":"</div>","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/dotnet","loc":{"lines":{"from":18,"to":18}}}}],["807",{"pageContent":"## Installing the .NET Tools\n\nTo get all the .NET tools that you need pre-installed in your Gitpod workspaces, use the following base image in your [.gitpod.yml](/docs/references/gitpod-yml):\n\n```yml\nimage: gitpod/workspace-dotnet\n```\n\nIf your project requires a GUI or Virtual Desktop, please use this image instead:\n\n```yml\nimage: gitpod/workspace-dotnet-vnc\n```\n\nThis will give you a full GUI Virtual Desktop for your .NET application! The Virtual Desktop will be running on port `6080`.\n\n## Compiling .NET Code in Gitpod\n\nTo compile your **C#** or **F#** Code in Gitpod, run `dotnet build <FILE>`, where `<FILE>` is the path to the C# or F# project file or .NET solution file you want to compile.\n\n## Running .NET Code in Gitpod\n\nTo run your code after it has been compiled run `dotnet <FILE>` where `<FILE>` is the path to the EXE file you want to run. You can also run application with `dotnet run <FILE>` where `<FILE>` is the path to the C# or F# project file you want to compile and run.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/dotnet","loc":{"lines":{"from":20,"to":42}}}}],["808",{"pageContent":"## Running .NET Code in watch-mode\n\nAlternatively, you can also run your application in so-called watch-mode. In such configuration the application will recompile and rerun itself every time you save any source file belonging to the project. To run your code in watch-mode use `dotnet watch --project <FILE> run` where `<FILE>` is the path to the C# or F# project file you want to compile and run.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/dotnet","loc":{"lines":{"from":44,"to":46}}}}],["809",{"pageContent":"## Useful VS Code Extensions\n\n### C#\n\nThe official C# extension from Microsoft [is proprietary](https://aka.ms/VSCode-DotNet-DbgLicense) and unfortunately cannot be used. The MIT licensed [muhammad-sammy.csharp](https://open-vsx.org/extension/muhammad-sammy/csharp) extension from Samsung brings code completion, snippets, auto-formatting, peek definition, refactoring, hover documentation and breakpoint debugging for C# however!\n\n![C# Extension Demo](/images/docs/CSharpDemo.png)\n\nTo add this extension to your repository, add the following to your [.gitpod.yml](/docs/references/gitpod-yml):\n\n```yml\nvscode:\n    extensions:\n        - muhammad-sammy.csharp\n```","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/dotnet","loc":{"lines":{"from":48,"to":62}}}}],["810",{"pageContent":"### F#\n\nThe [Ionide-fsharp](https://ionide.io/) extension gives F# developers the following features:\n\n-   A Widget for your F# needs\n-   Auto completion\n-   Shows errors inline\n-   Quickfix\n-   Goto definition\n-   Peek definition\n-   And more...\n\n![Ionide fsharp Example](/images/docs/Iondine_Example.png)\n\nTo add this extension to your repository, add the following to your [.gitpod.yml](/docs/references/gitpod-yml):\n\n```yml\nvscode:\n    extensions:\n        - Ionide.Ionide-fsharp@4.6.2:yBkAE6j7z7gJ5WEcyMjEOg==\n```","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/dotnet","loc":{"lines":{"from":64,"to":84}}}}],["811",{"pageContent":"---\nsection: languages\ntitle: Go in Gitpod\n---\n\n# Go in Gitpod\n\nGitpod includes Go in the default image, but if you need to customize your Go version or IDE setup in Gitpod, this guide will help you.\n\n## Prerequisites\n\nThis guide assumes familiarity with:\n\n[Docker](https://docs.docker.com/), [YAML](https://yaml.org/spec/1.1/), [Linux](https://www.linux.org/), [Bash](https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html) and Linux [environment variables](https://wiki.archlinux.org/title/environment_variables).\n\n## Getting started / Quick Start\n\n`youtube: ij1msCffQZA`\n\nTo see a full working Go application, take a look at [gitpod-samples/template-golang-cli](https://github.com/gitpod-samples/template-golang-cli). To update an existing Go application, follow the steps below in this guide.\n\n<a href=\"https://gitpod.io/#https://github.com/gitpod-samples/template-golang-cli\">\n    <img src=\"https://gitpod.io/button/open-in-gitpod.svg\" alt=\"Push\" align=\"center\" >\n</a>","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/go","loc":{"lines":{"from":1,"to":24}}}}],["812",{"pageContent":"## Installing Dependencies\n\n### The default base image\n\nThe default Gitpod workspace image default is [workspace-full](https://github.com/gitpod-io/workspace-images) based on [Ubuntu](https://ubuntu.com/).\n\nThis base image includes:\n\n-   [Go](https://golang.org/) `v1.19.1` (`go version`)\n\n> **Note:** We discuss how to set up a [custom base image](/docs/introduction/languages/go#setting-up-a-custom-dockerfile) later in the guide.\n\n### Updating Go Versions\n\nGitpod uses the latest stable version of Go by default. If you want to use a different version, you can use the [Go Version Manager](https://github.com/moovweb/gvm) to install and manage multiple versions of Go or you can following their [official guide](https://go.dev/doc/manage-install).","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/go","loc":{"lines":{"from":26,"to":40}}}}],["813",{"pageContent":"### Setting up a custom Dockerfile\n\n`youtube: jFsbmcXCRf8`\n\nTo ensure Gitpod workspaces always start with the correct dependencies, configure a Dockerfile:\n\n1. Create a `.gitpod.yml`\n\n```bash\ntouch .gitpod.yml\n```\n\n2. Create a custom Dockerfile\n\n```bash\ntouch .gitpod.Dockerfile\n```\n\n3. Reference your newly created Dockerfile in your `.gitpod.yml`\n\n```yml\nimage:\n    file: .gitpod.Dockerfile","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/go","loc":{"lines":{"from":42,"to":64}}}}],["814",{"pageContent":"```\n\n2. Create a custom Dockerfile\n\n```bash\ntouch .gitpod.Dockerfile\n```\n\n3. Reference your newly created Dockerfile in your `.gitpod.yml`\n\n```yml\nimage:\n    file: .gitpod.Dockerfile\n```\n\n4. Update your `.gitpod.Dockerfile` to install your preferred [dependency versions](https://go.dev/project)\n\n```dockerfile\n# You can find the new timestamped tags here: https://hub.docker.com/r/gitpod/workspace-base/tags\nFROM gitpod/workspace-base:latest\n\n# Change your version here\nENV GO_VERSION=1.17\n\n# For ref, see: https://github.com/gitpod-io/workspace-images/blob/61df77aad71689504112e1087bb7e26d45a43d10/chunks/lang-go/Dockerfile#L10\nENV GOPATH=$HOME/go-packages\nENV GOROOT=$HOME/go\nENV PATH=$GOROOT/bin:$GOPATH/bin:$PATH\nRUN curl -fsSL https://dl.google.com/go/go${GO_VERSION}.linux-amd64.tar.gz | tar xzs \\\n    && printf '%s\\n' 'export GOPATH=/workspace/go' \\\n                      'export PATH=$GOPATH/bin:$PATH' > $HOME/.bashrc.d/300-go","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/go","loc":{"lines":{"from":64,"to":94}}}}],["815",{"pageContent":"```\n\n5. Commit and push both `.gitpod.yml` and `.gitpod.Dockerfile`\n\n```bash\ngit commit -m \"configuring gitpod with go\" && git push\n```\n\n6. Start a **new workspace** from the branch with the committed `.gitpod.Dockerfile`\n\nFor example, opening: `gitpod.io/#https://github.com/gitpod-io/gitpod`\n\n7. Test your dependencies are correct in the new workspace\n\n```bash\ngo version\n```\n\n> **Note:** If your changes are not taking effect, ensure your workspace is building from the correct [context](/docs/introduction/learn-gitpod/context-url), where your `gitpod.yml` or `gitpod.Dockerfile` are checked in to version control and are on the branch or commit that you are opening.\n\nSee [configure Docker](/docs/configure/workspaces/workspace-image) for more.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/go","loc":{"lines":{"from":95,"to":115}}}}],["816",{"pageContent":"### Using the `dep` dependency manager in Gitpod\n\nIf your project uses the [`dep` _(deprecated - v0.5.4)_](https://golang.github.io/dep/) dependency manager then you need to add a [.gitpod.Dockerfile](/docs/configure/workspaces/workspace-image) to your project. A basic example that extends the default workspace image might be something like:\n\n```dockerfile\nFROM gitpod/workspace-full\n\nUSER gitpod\n\nRUN sudo apt-get install go-dep\n```\n\nAlso, don't forget to reference the above Dockerfile in your `.gitpod.yml` configuration file, like so:\n\n```yml\nimage:\n    file: .gitpod.Dockerfile\n\ntasks:\n    - init: dep ensure\n\nvscode:\n    extensions:\n        - golang.go\n        - premparihar.gotestexplorer\n```","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/go","loc":{"lines":{"from":117,"to":142}}}}],["817",{"pageContent":"## Debugging your Go application in Gitpod","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/go","loc":{"lines":{"from":144,"to":144}}}}],["818",{"pageContent":"### Debugging your Go applications in VS Code\n\nHere is a quick clip on how to automatically configure debugging for Go!\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Go debugging example\" src=\"/images/docs/GoDebug.webm\" type=\"video/webm\"></video>\n    <figcaption>Go debugging example</figcaption>\n</figure>\n\nSo, basically in this video we:\n\n1. First, open the Go file that we want to debug\n2. Then, go to the debug menu and select \"Add Configuration...\"\n3. Next, in the dropdown choose \"Go launch file\"\n4. Finally, start debugging your Go program!\n\nYou can also create the Go debug configuration file manually\n\nTo start debugging your Go application in Gitpod, please create a new directory called `.theia/`, and inside add a file called `launch.json`, finally, add the following to it:","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/go","loc":{"lines":{"from":146,"to":164}}}}],["819",{"pageContent":"To start debugging your Go application in Gitpod, please create a new directory called `.theia/`, and inside add a file called `launch.json`, finally, add the following to it:\n\n```json\n{\n\t// Use IntelliSense to learn about possible attributes.\n\t// Hover to view descriptions of existing attributes.\n\t\"version\": \"0.2.0\",\n\t\"configurations\": [\n\t\t{\n\t\t\t\"name\": \"Launch file\",\n\t\t\t\"type\": \"go\",\n\t\t\t\"request\": \"launch\",\n\t\t\t\"mode\": \"debug\",\n\t\t\t\"program\": \"${file}\"\n\t\t}\n\t]\n}","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/go","loc":{"lines":{"from":164,"to":180}}}}],["820",{"pageContent":"```\n\nThen, simply open the Go file you want to debug, open the Debug panel (in the left vertical toolbar, click the icon with the crossed-out-spider), and click the green \"Run\" button.\n\n<br>\n\nTo see a basic repository with Go debugging, please check out [gitpod-samples/template-golang-cli](https://github.com/gitpod-samples/template-golang-cli):\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-samples/template-golang-cli)","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/go","loc":{"lines":{"from":181,"to":189}}}}],["821",{"pageContent":"### Debugging your Go applications in GoLand\n\nSteps to debug your Go application in GoLand:\n\n1. Open your project in Gitpod with GoLand.\n2. Open the `main.go` file in the editor.\n3. Click on the `Run` menu and select `Edit Configurations...`.\n4. Click on the `+` button and select `Go Application`.\n5. In the `Go Application` window, enter the name of the configuration and the path to the file you want to debug.\n6. Click on the `Apply` button.\n7. Click on the `Debug` button to start debugging your Go application.\n\n<img class=\"shadow-medium rounded-xl max-w-xl mt-x-small\" src=\"/images/docs/goland-debug.webp\" alt=\"Debug on GoLand in Gitpod\" loading=\"lazy\"/>","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/go","loc":{"lines":{"from":191,"to":203}}}}],["822",{"pageContent":"### Using `$GOPATH`\n\nOlder Go projects without module support need a <a href=\"https://golang.org/doc/code.html#Organization\" target=\"_blank\">specific workspace layout</a>:\nthe source code of your repository and its dependencies must be in the directories\n\n```sh\nsrc/[repository-provider]/[repository-owner]/[repository-name]\n```\n\nin the `$GOPATH`. Using the `.gitpod.yml` file, you can bring about such a workspace layout. Here is\nhow we do that for the example <a href=\"https://github.com/gitpod-io/definitely-gp/blob/master/go-gin-app/.gitpod.yml\" target=\"_blank\">go-gin-app</a> repository:\n\n```yml\n---\ncheckoutLocation: 'src/github.com/demo-apps/go-gin-app'\nworkspaceLocation: '.'\ntasks:\n    - init: |\n          cd /workspace/src/github.com/demo-apps/go-gin-app &&\n          go get -v ./... &&\n          go build -o app\n      command: |\n          cd /workspace/src/github.com/demo-apps/go-gin-app &&\n          ./app","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/go","loc":{"lines":{"from":205,"to":228}}}}],["823",{"pageContent":"```\n\nIn more detail:\n\n-   By default, Gitpod clones the repository into the directory `/workspace`, which becomes the\n    root directory for the workspace. With [`checkoutLocation`](/docs/references/gitpod-yml#checkoutlocation) and [`workspaceLocation`](/docs/references/gitpod-yml#workspacelocation) you can\n    change this behavior (the paths are taken relative to `/workspace`).\n-   Gitpod preconfigures the `$GOPATH` environment variable to include the directory `/workspace/go`.\n-   With `go get -v ./...` we retrieve the sources of the dependencies from GitHub.\n-   To build the app, we run `go build -o app`.\n-   Lastly, we start the application.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/go","loc":{"lines":{"from":229,"to":239}}}}],["824",{"pageContent":"## Example Repositories\n\nHere are a few Go example projects that are already automated with Gitpod:","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/go","loc":{"lines":{"from":241,"to":243}}}}],["825",{"pageContent":"|                       Repository                       |                        Description                        |                                                                                                                        Try It |\n| :----------------------------------------------------: | :-------------------------------------------------------: | ----------------------------------------------------------------------------------------------------------------------------: |\n| [prometheus](https://github.com/prometheus/prometheus) | The Prometheus monitoring system and time series database | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/prometheus/prometheus) |\n| [go-swagger](https://github.com/go-swagger/go-swagger) | A simple yet powerful representation of your RESTful API  | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/go-swagger/go-swagger) |","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/go","loc":{"lines":{"from":245,"to":248}}}}],["826",{"pageContent":"| [go-gin-app](https://github.com/gitpod-io/go-gin-app)  |               Gin example running in Gitpod               |  [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-io/go-gin-app) |\n| [gosh-terminal](https://github.com/gosh-terminal/gosh) |  A terminal implemented in Go where you can do anything   |    [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gosh-terminal/gosh) |","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/go","loc":{"lines":{"from":249,"to":250}}}}],["827",{"pageContent":"## Further Reading\n\n-   [VS Code/Go Documentation](https://code.visualstudio.com/docs/languages/go) The stuff here also applies to Gitpod!\n-   [JetBrains/GoLand Documentation](https://www.jetbrains.com/help/go) The stuff here also applies to Gitpod!\n-   [VS Code/Go debugging](https://github.com/Microsoft/vscode-go/wiki/Debugging-Go-code-using-VS-Code) VS Code's Documentation on Go debugging","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/go","loc":{"lines":{"from":252,"to":256}}}}],["828",{"pageContent":"---\nsection: languages\ntitle: HTML & CSS in Gitpod\n---\n\n# HTML & CSS in Gitpod\n\nGitpod has great HTML and CSS support. In fact, Gitpod was made with web development in mind. And, depending on your needs, you may want to customize this experience further!","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/html","loc":{"lines":{"from":1,"to":8}}}}],["829",{"pageContent":"## Example Repositories\n\nHere are a few HTML/CSS example projects that are already automated with Gitpod:\n\n<div class=\"overflow-x-auto\">","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/html","loc":{"lines":{"from":10,"to":14}}}}],["830",{"pageContent":"| Repository                                                                 | Description                                                                   | Try it                                                                                                                                   |\n| -------------------------------------------------------------------------- | ----------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------- |\n| [Front-End-Checklist](https://github.com/thedaviddias/Front-End-Checklist) | The perfect Front-End Checklist for modern websites and meticulous developers | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/thedaviddias/Front-End-Checklist) |","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/html","loc":{"lines":{"from":16,"to":18}}}}],["831",{"pageContent":"| [Devhints](https://github.com/rstacruz/cheatsheets)                        | TL;DR for developer documentation - a ridiculous collection of cheatsheets    | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/rstacruz/cheatsheets)             |","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/html","loc":{"lines":{"from":19,"to":19}}}}],["832",{"pageContent":"</div>","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/html","loc":{"lines":{"from":21,"to":21}}}}],["833",{"pageContent":"## [emmet](https://emmet.io/) &nbsp;Support\n\n![emmet demo](/images/docs/emmet.png)\nGitpod comes with [emmet](https://emmet.io/) support right out of the box giving you access to powerful snippets and completions\n\n## Live Preview\n\n![Live Preview Demo](/images/docs/html-preview.png)\nWith Gitpod you can open a preview for HTML files while you are coding. You can do this by opening a web server `python -m http.server 8000`.\n\nYou can also automate this in your [`.gitpod.yml`](/docs/references/gitpod-yml) file, so that every time you start a new workspace your preview is ready to go. For example:\n\n```yml\ntasks:\n    - name: Start web server\n      init: python -m http.server 8000\n\nports:\n    - port: 8000\n      onOpen: open-preview\n```","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/html","loc":{"lines":{"from":23,"to":43}}}}],["834",{"pageContent":"## Try It!\n\nWant to see a minimal example in action? Try it out by opening an example on Gitpod:\n\n[![gitpod-io/Gitpod-Web-Development-Example](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-io/Gitpod-Web-Development-Example)","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/html","loc":{"lines":{"from":45,"to":49}}}}],["835",{"pageContent":"---\nsection: languages\ntitle: Java in Gitpod\n---\n\n# Java in Gitpod\n\nGitpod comes with great support for Java. This guide walks you through how to fully configure a Java application using Gitpod.\n\n## Prerequisites\n\nThis guide assumes familiarity with:\n\n[Docker](https://docs.docker.com/), [YAML](https://yaml.org/spec/1.1/), [Linux](https://www.linux.org/), [Bash](https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html) and Linux [environment variables](https://wiki.archlinux.org/title/environment_variables).\n\n## Getting started / Quick Start\n\n`youtube: ij1msCffQZA`\n\nTo see a full working Java application, take a look at [gitpod-io/spring-petclinic](https://github.com/gitpod-io/spring-petclinic/). To update an existing Java application, follow the steps below in this guide.\n\n<a href=\"https://gitpod.io/#https://github.com/gitpod-io/spring-petclinic\">\n    <img src=\"https://gitpod.io/button/open-in-gitpod.svg\" alt=\"Push\" align=\"center\" >\n</a>","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/java","loc":{"lines":{"from":1,"to":24}}}}],["836",{"pageContent":"## Installing dependencies\n\n### The default base image\n\nThe default Gitpod workspace image default is [workspace-full](https://github.com/gitpod-io/workspace-images) based on [Ubuntu](https://ubuntu.com/).\n\nAlong with other languages and tools, this base image includes:\n\n-   [SDKMAN!](https://sdkman.io/) `v5.16.0` (`sdk version`)\n-   [Java](https://www.java.com) `v11.0.16` (`java -version`)\n-   [Gradle](https://gradle.org/) `v7.5.1` (`gradle -version`)\n-   [Maven](https://maven.apache.org/) `v3.8.6` (`mvn -version`)\n\n> **Note:** We discuss how to set up a [custom base image](/docs/introduction/languages/java#setting-up-a-custom-dockerfile) later in the guide.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/java","loc":{"lines":{"from":26,"to":39}}}}],["837",{"pageContent":"### Updating Java, Maven & Gradle\n\nFor alternative versions to those provided in the Gitpod base image, with [SDKMAN!](https://sdkman.io/usage#listversions) you can quickly update your dependencies: `sdk install <candidate> [version]`\n\n> **Important:** Dynamically swapping Java, Maven or Gradle versions manually is a quick way to explore Gitpod. However, for day-to-day development **strongly recommend to add explicit dependency versions in your gitpod.yml or Dockerfile**.\n\n#### Updating Java version\n\n-   `sdk list java` - to see available java versions\n-   `sdk install java 18.0.1.fx-zulu` - to install a specific version\n\n#### Updating Maven version\n\n-   `sdk list maven` - to see available maven versions\n-   `sdk install maven 3.8.6` - to install a specific version\n\n#### Updating Gradle version\n\n-   `sdk list gradle` - to see available gradle versions\n-   `sdk install gradle 7.4.1` - to install a specific version","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/java","loc":{"lines":{"from":41,"to":60}}}}],["838",{"pageContent":"### Setting up a custom Dockerfile\n\n`youtube: jFsbmcXCRf8`\n\nTo ensure Gitpod workspaces always start with the correct dependencies, configure a Dockerfile:\n\n1. Create a `.gitpod.yml`\n\n```bash\ntouch .gitpod.yml\n```\n\n2. Create a custom Dockerfile\n\n```bash\ntouch .gitpod.Dockerfile\n```\n\n3. Reference your newly created Dockerfile in your `.gitpod.yml`\n\n```yml\nimage:\n    file: .gitpod.Dockerfile\n```\n\n4. Update your `.gitpod.Dockerfile` to install your dependency versions\n\n```Dockerfile\nFROM gitpod/workspace-full\n\nUSER gitpod\n\nRUN bash -c \". /home/gitpod/.sdkman/bin/sdkman-init.sh && \\\n    sdk install java 17.0.3-ms && \\\n    sdk default java 17.0.3-ms\"\n```\n\n5. Commit and push both `gitpod.yml` and `.gitpod.Dockerfile`\n\n```bash\ngit commit -m \"configuring gitpod with java\" && git push","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/java","loc":{"lines":{"from":62,"to":102}}}}],["839",{"pageContent":"```\n\n5. Commit and push both `gitpod.yml` and `.gitpod.Dockerfile`\n\n```bash\ngit commit -m \"configuring gitpod with java\" && git push\n```\n\n6. Start a **new workspace** from the branch with the committed `.gitpod.Dockerfile`\n\nFor example, opening: `gitpod.io/#https://github.com/gitpod-io/gitpod`\n\n7. Test your dependencies are correct in the new workspace\n\n```bash\nsdk current\n```\n\n> **Note:** If your changes are not taking effect, ensure your workspace is building from the correct [context](/docs/introduction/learn-gitpod/context-url), where your `gitpod.yml` or `gitpod.Dockerfile` are checked in to version control and are on the branch or commit that you are opening.\n\nSee [configure Docker](/docs/configure/workspaces/workspace-image) for more.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/java","loc":{"lines":{"from":102,"to":122}}}}],["840",{"pageContent":"## Build and run your application","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/java","loc":{"lines":{"from":124,"to":124}}}}],["841",{"pageContent":"### Building a Java application\n\nTo build your application, you'll need to configure a [start task](/docs/configure/workspaces/tasks).\n\nStart tasks are processes that are initiated on every workspace start. Depending on your project setup, start tasks can be used to build your application, run your application directly, or start any necessary tools for the application to run, such as starting database processes.\n\n1. Add the command to build your application to your `.gitpod.yml`\n\n**Example with Gradle**\n\n```yml\ntasks:\n    - init: gradle build\n```\n\n**Example with Maven**\n\n```yml\ntasks:\n    - init: mvn package\n```\n\n2. **Optional:** Validate by stopping and starting (restart) your workspace\n\n```bash\ngp stop\n```\n\n3. **Optional:** Validate your commands by running [`gp tasks`](/docs/references/gitpod-cli#tasks)\n\n```shell\ngp tasks","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/java","loc":{"lines":{"from":126,"to":157}}}}],["842",{"pageContent":"```\n\n3. **Optional:** Validate your commands by running [`gp tasks`](/docs/references/gitpod-cli#tasks)\n\n```shell\ngp tasks\n```\n\n> **Tip:** If you're using [VS Code Browser](/docs/references/ides-and-editors/vscode-browser) or [VS Code Desktop](/docs/references/ides-and-editors/vscode), then your tasks will open as terminal windows. You can configure their layout using the [openMode](/docs/configure/workspaces/tasks#openmode) property.\n\n> **Note:** We are using the `init` property so that we can perform application building during a [prebuild](/docs/configure/projects/prebuilds), for increased performance. We'll discuss prebuilds more later on.\n\nSee [start tasks](/docs/configure/workspaces/tasks) and [.gitpod.yml reference](/docs/references/gitpod-yml) for more.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/java","loc":{"lines":{"from":157,"to":169}}}}],["843",{"pageContent":"### Running a Java application\n\nTo run your application, you have two options:\n\n1. **Update your start task command** - Starting your application using the `command` start task will run the start process on workspace start. With both [VS Code Browser](/docs/references/ides-and-editors/vscode) and [VS Code Desktop](/docs/references/ides-and-editors/vscode-browser), tasks are automatically opened in the terminal(s). With [IntelliJ](/docs/references/ides-and-editors/intellij) / [JetBrains Gateway](/docs/integrations/jetbrains-gateway), configured tasks can be viewed by running `gp tasks` in the workspace.\n2. **Use a run / launch configuration** - Alternatively, you can commit a [run/debug configuration in IntelliJ IDEA](/docs/introduction/languages/java#configuring-jetbrains-rundebug-configurations) or a [launch configuration in VS Code](/docs/introduction/languages/java#configuring-vs-code-launch-configurations) as a way to start your application.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/java","loc":{"lines":{"from":171,"to":176}}}}],["844",{"pageContent":"#### Using start tasks to run Java\n\n1. Add a `command` for starting your application to your `.gitpod.yml`\n\n**Example with Gradle**\n\n```yml\ntasks:\n    - init: gradle build\n      command: gradle run\n```\n\n**Example with Maven**\n\n```yml\ntasks:\n    - init: mvn package\n      command: mvn exec:java\n```\n\n1. **Optional:** Validate by stopping and starting (restart) your workspace\n\n```bash\ngp stop\n```\n\n3. **Optional:** Validate your commands by running [`gp tasks`](/docs/references/gitpod-cli#tasks)\n\n```shell\ngp tasks\n```","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/java","loc":{"lines":{"from":178,"to":208}}}}],["845",{"pageContent":"### Configuring environment variables\n\n`youtube: dehln1E8ylY`\n\nGitpod supports encrypted, user-specific environment variables.\n\nEnvironment variables are stored as part of your user settings and can be used to set access tokens, or pass any other kind of user-specific information to your workspaces. You can set environment variables using `gp env`, or in your project and account settings.\n\nSee [environment variables](/docs/configure/projects/environment-variables) for more.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/java","loc":{"lines":{"from":210,"to":218}}}}],["846",{"pageContent":"### Configuring ports\n\nWhen your project starts a service that listens on a given port, Gitpod automatically serves traffic to this port of your application on an authenticated URL.\n\nIf you want to configure ports, such as: their visibility, what Gitpod does when it detects a new port being available, etc, you can do that in the ports section of the .gitpod.yml configuration file.\n\nFor example, add the following to your `.gitpod.yml` to configure port `3000` to open in your browser on workspace start.\n\n```yml\nports:\n    - port: 3000\n      onOpen: open-browser\n```\n\nSee [configuring ports](/docs/configure/workspaces/ports) for more","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/java","loc":{"lines":{"from":220,"to":234}}}}],["847",{"pageContent":"### Configuring localhost\n\nYour development application might rely on the `localhost` hostname to effectively run.\n\nTo ensure your localhost address works with Gitpod, you have two options:\n\n1. **Replace localhost references** - Swap `localhost` references within the application with the output of `gp url <port>`, typically via an [environment variable](/docs/configure/projects/environment-variables).\n\n**Example:** Using the `DEV_ENVIRONMENT_HOST` environment variable instead of localhost within the application, configured in the `command` of the `.gitpod.yml` start tasks.\n\n```yml\ntasks:\n  - command: |\n    export DEV_ENVIRONMENT_HOST=`gp url 3000`\n    java <application-entry>","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/java","loc":{"lines":{"from":236,"to":250}}}}],["848",{"pageContent":"```\n\n2. **Setup localhost port forwarding** - Connect your local machine with your running workspace means that you don't need to replace localhost references, to do that you'll need to configure port forwarding. Port forwarding is useful if you're working with a framework that needs localhost, and the application cannot be reconfigured.\n\nWith [VS Code Desktop](/docs/references/ides-and-editors/vscode), local port-forwarding is handled automatically and can be configured via the ports view within VS Code Desktop.\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Port forwarding in VS Code Desktop\" src=\"/images/editors/port-forwarding-vscode-desktop.png\">\n    <figcaption>Port forwarding in VS Code Desktop</figcaption>\n</figure>\n\nWith IntelliJ IDEA using [JetBrains Gateway](/docs/integrations/jetbrains-gateway) you can setup remote port-forwarding manually.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/java","loc":{"lines":{"from":251,"to":262}}}}],["849",{"pageContent":"With IntelliJ IDEA using [JetBrains Gateway](/docs/integrations/jetbrains-gateway) you can setup remote port-forwarding manually.\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Port forwarding in a JetBrains IDE\" src=\"/images/jetbrains-gateway/port-forward-jetbrains.png\">\n    <figcaption>Port forwarding in a JetBrains IDE</figcaption>\n</figure>\n\nAlternatively, by using [local companion](/docs/references/ides-and-editors/local-companion) all workspace ports will be forwarded automatically.\n\nSee [configuring ports](/docs/configure/workspaces/ports) for more.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/java","loc":{"lines":{"from":262,"to":271}}}}],["850",{"pageContent":"### Configuring VS Code extensions\n\nTo set default plugins to be installed for all users starting a workspace for the project, add a list of the JetBrains plugin identifiers to your `.gitpod.yml` under `vscode.extensions`.\n\n```yml\nvscode:\n    extensions:\n        - vscjava.vscode-java-pack\n```\n\nSee [.gitpod.yml reference](/docs/references/gitpod-yml) for more.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/java","loc":{"lines":{"from":273,"to":283}}}}],["851",{"pageContent":"### Configuring VS Code Launch configurations\n\nLaunch configurations can be shared by committing the `.vscode/launch.json` file to version control. To use a launch configuration with Java, need Java version 11 or above, and some VS Code extensions. Assuming you have configured your base image with a compatible JDK version as described above, a simple way to get set up is by adding the Extension Pack for Java will configure the correct VS Code extensions. Alternatively, you can selectively choose the extensions to install.\n\n```yml\nvscode:\n    extensions:\n        - vscjava.vscode-java-pack\n```\n\nSee [Debugging in Visual Studio Code](https://code.visualstudio.com/docs/editor/debugging#_launch-configurations) and [VS Code Java Extensions](https://code.visualstudio.com/docs/java/extensions) for more.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/java","loc":{"lines":{"from":285,"to":295}}}}],["852",{"pageContent":"### Configuring JetBrains Run/Debug configurations\n\nTo share your run/debug configurations, you can commit their definitions to source control. Since the `.idea` folder contains lots of information used for IntelliJ (which can include sensitive information or secrets) you may wish to ignore the `.idea` from version control, and explicitly allow `.idea/runConfigurations`.\n\nAdd run/debug configurations to git, by adding the following to your `.gitignore`.\n\n```\n/.idea/*\n!/.idea/runConfigurations\n```\n\nSee [JetBrains Run/Debug configuration](https://www.jetbrains.com/help/idea/run-debug-configuration.html) documentation for more.\n\n### Configuring JetBrains Plugins\n\nTo set default extensions to be installed for all users starting a workspace for the project, add a list of the VS Code extension identifiers to your `.gitpod.yml`.\n\n```yml\njetbrains:\n    intellij:\n        plugins:\n            - com.intellij.lang.jsgraphql\n```\n\nSee [.gitpod.yml reference](/docs/references/gitpod-yml) for more.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/java","loc":{"lines":{"from":297,"to":321}}}}],["853",{"pageContent":"## Optimising Java Applications\n\nGitpod prebuilds reduce wait time by installing dependencies or running builds before you start a new workspace. By default, Gitpod prepares prebuilt workspaces for all changes on the default branch and pull/merge requests coming from the same repository. However, prebuilds save only the `workspace` directory, any files stored outside of the workspace directory will be lost. For Java applications, we recommend to execute build commands within an `init` startup task.\n\n`youtube: DwkoOz1GSVg`\n\nSee [prebuilds](/docs/configure/projects/prebuilds) and [start tasks](/docs/configure/workspaces/tasks) for more.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/java","loc":{"lines":{"from":323,"to":329}}}}],["854",{"pageContent":"### Optimising JetBrains indexing\n\n> JetBrains prebuilds support (via gitpod.yml) is currently in [Alpha](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/6576).\n\nGitpod currently has early support for improved indexing performance with JetBrains IDEs that works out-of-the-box. You can enable this setting via the `.gitpod.yml`.\n\n**Example:** Index both the stable and latest of the IntelliJ IDE\n\n```yml\njetbrains:\n    intellij:\n        prebuilds:\n            version: stable\n```","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/java","loc":{"lines":{"from":331,"to":344}}}}],["855",{"pageContent":"### Caching Maven dependencies\n\nThe default cache location for Maven is the `.m2` directory. However, since this location is by default outside of the `/workspace` directory caches will not be stored as part of a prebuild.\n\nIf you are using the [workspace-full](https://github.com/gitpod-io/workspace-images) image, Maven caching configuration is already enabled.\n\nTo configure Maven caching, add the following to your custom [Dockerfile](/docs/configure/workspaces/workspace-image).\n\n1. Create an `.m2` directory in the users (`gitpod`) home directory.\n\n```bash\nmkdir /home/gitpod/.m2\n```\n\n2. Create a `settings.xml` and configure `localRepository` within `workspace`.\n\n```bash\nprintf '<settings>\\n  <localRepository>/workspace/m2-repository/</localRepository>\\n</settings>\\n' > /home/gitpod/.m2/settings.xml\n```\n\nSee [prebuilds](/docs/configure/projects/prebuilds) for more.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/java","loc":{"lines":{"from":346,"to":366}}}}],["856",{"pageContent":"### Caching Gradle dependencies\n\nThe default location of the gradle home is `$USER_HOME/.gradle`, however, since this location is by default outside of the `/workspace` directory caches will not be stored as part of a prebuild.\n\nIf you are using the [workspace-full](https://github.com/gitpod-io/workspace-images) image, Gradle caching configuration is already enabled.\n\nTo configure Gradle caching, add the following to your custom [Dockerfile](/docs/configure/workspaces/workspace-image).\n\n```\nENV GRADLE_USER_HOME=/workspace/.gradle/\n```\n\nSee [prebuilds](/docs/configure/projects/prebuilds) for more.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/java","loc":{"lines":{"from":368,"to":380}}}}],["857",{"pageContent":"## Personalizing Gitpod\n\nAll settings introduced so far, such as `.gitpod.yml` and `Dockerfile` apply for all users using of the gitpod project. To apply personalisation, consider setting up [dotfiles](/docs/configure/user-settings/dotfiles), the Gitpod [Browser Extension](/docs/configure/user-settings/browser-extension),\n\n### Dotfiles\n\nDotfiles allow you to setup per-user configurations in your Gitpod workspace, such as modifying your shell and adding command aliases. To configure Gitpod to use your own dotfiles for all your workspaces, enter the URL of a public dotfiles repository in your Gitpod [preferences](https://gitpod.io/preferences).\n\nSee [dotfiles](/docs/configure/user-settings/dotfiles) for more.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/java","loc":{"lines":{"from":382,"to":390}}}}],["858",{"pageContent":"### Browser Extension\n\n![Browser Extension](/images/docs/browser-extension-lense.png)\n\nTo make opening Gitpod workspaces easier, install the Gitpod browser extension, which enables an \"Open in Gitpod\" button on GitHub, GitLab and Bitbucket.\n\nSee [Browser Extension](/docs/configure/user-settings/browser-extension) for more.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/java","loc":{"lines":{"from":392,"to":398}}}}],["859",{"pageContent":"### Configure your IDE or editor\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Updating Gitpod IDE preferences\" src=\"/images/editors/select-jetbrains-ide.webm\" type=\"video/webm\"></video>\n    <figcaption>Updating Gitpod IDE preferences to a JetBrains IDE</figcaption>\n</figure>\n\nWith Gitpod, you can work with [VS Code Browser](/docs/references/ides-and-editors/vscode-browser), [VS Code Desktop](/docs/references/ides-and-editors/vscode) or [JetBrains](/docs/integrations/jetbrains-gateway) IDEs, such as [IntelliJ IDEA](/docs/references/ides-and-editors/intellij). Setting your preference ensures all future workspaces start with the chosen IDE or editor. Visit the [preferences](https://gitpod.io/preferences) page to configure these settings.\n\nSee [IDEs & Editors](/docs/references/ides-and-editors) for more.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/java","loc":{"lines":{"from":400,"to":409}}}}],["860",{"pageContent":"### VS Code Desktop Settings Sync\n\n![Enable Settings Sync with Gitpod](/images/editors/enable-signin-with-gitpod-light-theme.png)\n![Enable Settings Sync with Gitpod](/images/editors/enable-signin-with-gitpod-dark-theme.png)\n_Enable Settings Sync with Gitpod_\n\nVS Code Desktop by default is not setup to sync your VS Code settings (e.g. your fonts, layouts, etc) with VS Code running in the browser of Gitpod. You can configure Gitpod to sync settings between browser and desktop by running the command palette action \"Settings Sync: Enable signing in with Gitpod\" from the Gitpod VS Code extension.\n\nSee [VS Code settings sync](/docs/references/ides-and-editors/settings-sync) for more.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/java","loc":{"lines":{"from":411,"to":419}}}}],["861",{"pageContent":"---\nsection: languages\ntitle: Languages\n---\n\n<script lang=\"ts\">\n  import PopularLanguages from \"$lib/components/docs/languages/popular-languages.svelte\"\n  import RemainingLanguages from \"$lib/components/docs/languages/remaining-languages.svelte\"\n</script>\n\n# Languages\n\nGitpod is a very flexible tool and can be configured with many languages.\n\n<PopularLanguages />\n\n---\n\n<RemainingLanguages />","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages","loc":{"lines":{"from":1,"to":19}}}}],["862",{"pageContent":"---\nsection: languages\ntitle: JavaScript in Gitpod\n---\n\n# JavaScript in Gitpod\n\nGitpod comes with great built-in support for JavaScript, TypeScript, and tools like Node.js, npm, pnpm & yarn pre-installed with [Gitpod workspace image](https://www.gitpod.io/docs/configure/workspaces/workspace-image). This guide walks you through how to fully configure a JavaScript application using Gitpod.\n\n## Prerequisites\n\nThis guide assumes familiarity with:\n\n[Docker](https://docs.docker.com/), [YAML](https://yaml.org/spec/1.1/), [Linux](https://www.linux.org/), [Bash](https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html) and Linux [environment variables](https://wiki.archlinux.org/title/environment_variables).","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/javascript","loc":{"lines":{"from":1,"to":14}}}}],["863",{"pageContent":"## Getting started / Quick Start\n\n`youtube: ij1msCffQZA`\n\nTo see a full working Node/TypeScript application, take a look at [gitpod-samples/template-typescript-node](https://github.com/gitpod-samples/template-typescript-node). To update an existing JavaScript application, follow the steps below in this guide.\n\n<a href=\"https://gitpod.io/#https://github.com/gitpod-samples/template-typescript-node\">\n    <img src=\"https://gitpod.io/button/open-in-gitpod.svg\" alt=\"Push\" align=\"center\" >\n</a>","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/javascript","loc":{"lines":{"from":16,"to":24}}}}],["864",{"pageContent":"## Installing dependencies\n\n### The default base image\n\nThe default Gitpod workspace image default is [workspace-full](https://github.com/gitpod-io/workspace-images) based on [Ubuntu](https://ubuntu.com/).\n\nAlong with other languages and tools, this base image includes:\n\n-   [Node.js](https://nodejs.org/en/) `v18.16.0` (`node -v`)\n-   [Node Package Manager - npm](https://www.npmjs.com/) `9.5.1` (`npm -v`)\n-   [Node Version Manager - nvm](https://nvm.sh) `0.39.0` (`nvm -v`)\n\n> **Note:** We discuss how to set up a [custom base image](/docs/introduction/languages/javascript#setting-up-a-custom-dockerfile) later in the guide.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/javascript","loc":{"lines":{"from":26,"to":38}}}}],["865",{"pageContent":"### Updating Node Versions\n\nGitpod comes with the latest stable Node.js version pre-installed but let's say your project uses a different version of `node` (say `14.8.0` for example), well the good news is that Gitpod also comes with `nvm` (a tool used to manage multiple active Node.js versions) installed. To install and configure the desired version of node: `nvm install 14.8.0` and `nvm use 14.8.0` (you can also use `nvm alias default 14.8.0` to set the default version of node) or you can setup [custom Dockerfile](/docs/introduction/languages/javascript#setting-up-a-custom-dockerfile) to install the desired version of node & other required tools.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/javascript","loc":{"lines":{"from":40,"to":42}}}}],["866",{"pageContent":"### Setting up a custom Dockerfile\n\n`youtube: jFsbmcXCRf8`\n\nTo ensure Gitpod workspaces always start with the correct dependencies, configure a Dockerfile:\n\n1. Create a `.gitpod.yml`\n\n```bash\ntouch .gitpod.yml\n```\n\n2. Create a custom Dockerfile\n\n```bash\ntouch .gitpod.Dockerfile\n```\n\n3. Reference your newly created Dockerfile in your `.gitpod.yml`\n\n```yml\nimage:\n    file: .gitpod.Dockerfile\n```\n\n4. Update your `.gitpod.Dockerfile` to install your dependency versions\n\n```dockerfile\nFROM gitpod/workspace-full:latest\n\nRUN bash -c 'VERSION=\"14.8.0\" \\\n    && source $HOME/.nvm/nvm.sh && nvm install $VERSION \\\n    && nvm use $VERSION && nvm alias default $VERSION'\n\nRUN echo \"nvm use default &>/dev/null\" >> ~/.bashrc.d/51-nvm-fix\n```\n\n5. Commit and push both `.gitpod.yml` and `.gitpod.Dockerfile`\n\n```bash\ngit commit -m \"configuring gitpod with javascript\" && git push","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/javascript","loc":{"lines":{"from":44,"to":84}}}}],["867",{"pageContent":"```\n\n5. Commit and push both `.gitpod.yml` and `.gitpod.Dockerfile`\n\n```bash\ngit commit -m \"configuring gitpod with javascript\" && git push\n```\n\n6. Start a **new workspace** from the branch with the committed `.gitpod.Dockerfile`\n\nFor example, opening: `gitpod.io/#https://github.com/gitpod-io/gitpod`\n\n7. Test your dependencies are correct in the new workspace\n\n```bash\nnode -v\n```\n\n> **Note:** If your changes are not taking effect, ensure your workspace is building from the correct [context](/docs/introduction/learn-gitpod/context-url), where your `gitpod.yml` or `gitpod.Dockerfile` are checked in to version control and are on the branch or commit that you are opening.\n\nSee [configure Docker](/docs/configure/workspaces/workspace-image) for more.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/javascript","loc":{"lines":{"from":84,"to":104}}}}],["868",{"pageContent":"## Build and run your application","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/javascript","loc":{"lines":{"from":106,"to":106}}}}],["869",{"pageContent":"### Building a JavaScript application\n\nTo build your application, you'll need to configure a [start task](/docs/configure/workspaces/tasks).\n\nStart tasks are processes that are initiated on every workspace start. Depending on your project setup, start tasks can be used to build your application, run your application directly, or start any necessary tools for the application to run, such as starting database processes.\n\n1. Add the command to build your application to your `.gitpod.yml`\n\n**Example with npm**\n\n```yml\ntasks:\n    - init: npm install && npm run build\n```\n\n**Example with yarn**\n\n```yml\ntasks:\n    - init: yarn install && yarn build\n```\n\n2. **Optional:** Validate by stopping and starting (restart) your workspace\n\n```bash\ngp stop\n```\n\n3. **Optional:** Validate your commands by running [`gp tasks`](/docs/references/gitpod-cli#tasks)\n\n```shell\ngp tasks","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/javascript","loc":{"lines":{"from":108,"to":139}}}}],["870",{"pageContent":"```\n\n3. **Optional:** Validate your commands by running [`gp tasks`](/docs/references/gitpod-cli#tasks)\n\n```shell\ngp tasks\n```\n\n> **Tip:** If you're using [VS Code Browser](/docs/references/ides-and-editors/vscode-browser) or [VS Code Desktop](/docs/references/ides-and-editors/vscode), then your tasks will open as terminal windows. You can configure their layout using the [openMode](/docs/configure/workspaces/tasks#openmode) property.\n\n> **Note:** We are using the `init` property so that we can perform application building during a [prebuild](/docs/configure/projects/prebuilds), for increased performance. We'll discuss prebuilds more later on.\n\nSee [start tasks](/docs/configure/workspaces/tasks) and [.gitpod.yml reference](/docs/references/gitpod-yml) for more.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/javascript","loc":{"lines":{"from":139,"to":151}}}}],["871",{"pageContent":"### Running a JavaScript application\n\nTo run your application, you have two options:\n\n1. **Update your start task command** - Starting your application using the `command` start task will run the start process on workspace start. With both [VS Code Browser](/docs/references/ides-and-editors/vscode) and [VS Code Desktop](/docs/references/ides-and-editors/vscode-browser), tasks are automatically opened in the terminal(s). With [IntelliJ](/docs/references/ides-and-editors/intellij) / [JetBrains Gateway](/docs/integrations/jetbrains-gateway), configured tasks can be viewed by running `gp tasks` in the workspace.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/javascript","loc":{"lines":{"from":153,"to":157}}}}],["872",{"pageContent":"#### Using start tasks to run JavaScript\n\n1. Add a `command` for starting your application to your `.gitpod.yml`\n\n**Example with npm**\n\n```yml\ntasks:\n    - init: npm install && npm run build\n      command: npm run dev\n```\n\n**Example with yarn**\n\n```yml\ntasks:\n    - init: yarn install && yarn build\n      command: yarn start\n```\n\n2. **Optional:** Validate by stopping and starting (restart) your workspace\n\n```bash\ngp stop\n```\n\n3. **Optional:** Validate your commands by running [`gp tasks`](/docs/references/gitpod-cli#tasks)\n\n```shell\ngp tasks\n```","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/javascript","loc":{"lines":{"from":159,"to":189}}}}],["873",{"pageContent":"### Using ESLint for linting\n\nIf your project's `package.json` does not mention ESLint as a dependency then you have to install it first. For installing it add the following to the end of the `init` phase of your [.gitpod.yml](/docs/references/gitpod-yml) as shown:\n\n```yml\ntasks:\n    - init: npm install && npm run build && npm install -g eslint\n```\n\nand then search for `eslint` in the extensions tab and then install it from there using the install button as shown in the screenshot.\n\n![Install ESLint in Gitpod](/images/docs/eslint-extension.png)\n\n### Hot Module Replacement (HMR)\n\nEspecially when it comes to Frontend Projects, the dev-server should be able to auto-reload on file changes. The implementation varies from server to server. To make this work, some additional config is required:","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/javascript","loc":{"lines":{"from":191,"to":206}}}}],["874",{"pageContent":"### Vite\n\nVite 3+ works with Gitpod out of the box. However, if you are using Vite 2 you should add the following config:\n\n```js title=\"vite.config.js\"\nimport { defineConfig } from 'vite';\n\nexport default defineConfig({\n\tserver: {\n\t\thmr: process.env.GITPOD_WORKSPACE_URL\n\t\t\t? {\n\t\t\t\t\tprotocol: 'wss',\n\t\t\t\t\tclientPort: 443,\n\t\t\t\t\thost: process.env.GITPOD_WORKSPACE_URL.replace(\n\t\t\t\t\t\t'https://',\n\t\t\t\t\t\t'3000-',\n\t\t\t\t\t),\n\t\t\t  }\n\t\t\t: true,\n\t},\n});\n```","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/javascript","loc":{"lines":{"from":208,"to":229}}}}],["875",{"pageContent":"### Webpack\n\nIn your `.gitpod.yml` file, you should export the workspace url for the port your server runs into the environment.\n\n```yml title=\".gitpod.yml\"\ntasks:\n    - init: npm install\n      command: |\n          export HMR_HOST=`gp url 3000`\n```\n\nAfter the workspace URL with the given port is exported to the environment, it can be used in the `webpack.config.js` to determine the right port and hostname.\n\n```js title=\"webpack.config.js\"\nmodule.exports = {\n\tdevServer: {\n\t\tclient: {\n\t\t\twebSocketURL: {\n\t\t\t\thostname: process.env.HMR_HOST\n\t\t\t\t\t? new URL(process.env.HMR_HOST).hostname\n\t\t\t\t\t: 'localhost',\n\t\t\t\tport: process.env.HMR_HOST ? 443 : 3000,\n\t\t\t\tprotocol: 'wss',\n\t\t\t},\n\t\t},\n\t},\n};\n```","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/javascript","loc":{"lines":{"from":231,"to":258}}}}],["876",{"pageContent":"### Use of Private Packages\n\nIf you want to use private packages from npm or yarn on Gitpod, you can use the [`NPM_TOKEN`](https://docs.npmjs.com/creating-and-viewing-access-tokens) environment variable. You can set it in your [Gitpod user settings](/docs/configure/projects/environment-variables#using-the-account-settings).","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/javascript","loc":{"lines":{"from":260,"to":262}}}}],["877",{"pageContent":"## Debug your JavaScript application in Gitpod\n\n### Debugging JavaScript applications in VS Code\n\nTo debug your application, you can use the [VS Code Browser](/docs/references/ides-and-editors/vscode-browser) or [VS Code Desktop](/docs/references/ides-and-editors/vscode) IDE. You can start debugging by clicking the `Debug` button in the IDE's status bar or by pressing `F5` or following the steps below:\n\n![Debugger Option in Gitpod VS Code](/images/docs/debugger-option-vscode.webp)\n\n_You Can follow [this official blog](https://code.visualstudio.com/docs/editor/debugging) for more._","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/javascript","loc":{"lines":{"from":264,"to":272}}}}],["878",{"pageContent":"### Debugging JavaScript applications in JetBrains IDE (WebStorm)\n\nTo debug your application, you can use the [WebStorm](/docs/references/ides-and-editors/webstorm) IDE. You can start debugging by clicking the `Add Configurations` button in the IDE's top status bar.\n\n![Debugger Option in Gitpod WebStorm](/images/docs/debugger-option-webstorm.webp)\n\n_You Can follow [this official blog](https://blog.jetbrains.com/webstorm/2018/01/how-to-debug-with-webstorm/) for more._","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/javascript","loc":{"lines":{"from":274,"to":280}}}}],["879",{"pageContent":"## Example Repositories\n\nHere are a few JavaScript/TypeScript example projects that are automated with Gitpod:","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/javascript","loc":{"lines":{"from":282,"to":284}}}}],["880",{"pageContent":"|                          Repository                          |                                       Description                                       |                                                              Try it                                                               |\n| :----------------------------------------------------------: | :-------------------------------------------------------------------------------------: | :-------------------------------------------------------------------------------------------------------------------------------: |\n|    [Tesseract.js](https://github.com/naptha/tesseract.js)    |                     Pure JavaScript OCR for more than 100 Languages                     |    [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/naptha/tesseract.js)    |","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/javascript","loc":{"lines":{"from":286,"to":288}}}}],["881",{"pageContent":"| [freeCodeCamp](https://github.com/freeCodeCamp/freeCodeCamp) | [freeCodeCamp.org](https://www.freecodecamp.org/)'s open source codebase and curriculum | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/freeCodeCamp/freeCodeCamp) |\n|     [Mozilla PDF.js](https://github.com/mozilla/pdf.js)      |                     PDF.js is a PDF viewer that is built with HTML5                     |      [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/mozilla/pdf.js)       |","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/javascript","loc":{"lines":{"from":289,"to":290}}}}],["882",{"pageContent":"## Recommended Reading\n\n-   [Build Projects in a Gitpod Ephemeral Dev Environment — The Ultimate Guide](/guides/guide-ephemeral-dev-environment-on-gitpod)\n-   [Sustainable Node.js development with only a browser](/blog/node-js-development).\n-   [Developing a Nuxt.js app entirely in your browser](/blog/developing-nuxtjs-in-browser)\n-   [Gitpodifying — The Ultimate Guide](/guides/gitpodify)\n-   [Debugging Node.js applications in Theia](/blog/node-js-gitpod)","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/javascript","loc":{"lines":{"from":292,"to":298}}}}],["883",{"pageContent":"---\nsection: languages\ntitle: Julia in Gitpod\n---\n\n# Julia in Gitpod\n\n## Example Repositories\n\nHere are a few Julia example projects that are already automated with Gitpod:\n\nA minimal example of a ready-to-code Julia developer environment is [JesterOrNot/Gitpod-Julia](https://github.com/JesterOrNot/Gitpod-Julia). Feel free to take a look.\n\nAnd to showcase a real-world Julia project in Gitpod, we've gitpodified the [Julia repository](https://github.com/JesterOrNot/Julia) itself! Try it via the following button:\n\n[![JesterOrNot/Julia](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/JesterOrNot/Julia)","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/julia","loc":{"lines":{"from":1,"to":16}}}}],["884",{"pageContent":"---\nsection: languages\ntitle: Kotlin in Gitpod\n---\n\n# Kotlin in Gitpod\n\nTo work with Kotlin in Gitpod, you will need to properly configure your repository. Here is how to do it.\n\n## Installing Kotlin\n\nTo install Kotlin in Gitpod add the following to your [.gitpod.Dockerfile](/docs/configure/workspaces/workspace-image):\n\n```dockerfile\nRUN brew install kotlin\n```\n\nA full example could look like this:\n\n```dockerfile\nFROM gitpod/workspace-full\n\nUSER gitpod\nRUN brew install kotlin\n```","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/kotlin","loc":{"lines":{"from":1,"to":25}}}}],["885",{"pageContent":"## VS Code extensions\n\n### Kotlin Language\n\nThis extension provides Kotlin language support for Gitpod and other IDEs, with:\n\n-   Syntax highlighting\n-   Code snippets\n-   Region code folding\n\nTo get it, open Gitpod's **Extensions** panel (left vertical menu), then search for \"Kotlin\" and install the extension by Mathias Fröhlich for your project. Next, commit the [.gitpod.yml](/docs/references/gitpod-yml) file that was automatically created (or updated) by Gitpod.\n\n### Code Runner\n\nWhile this extension isn't Kotlin-specific, but allows to run code snippets in many different languages, including Kotlin.\n\nTo get it, open Gitpod's Extensions panel, then search for \"Code Runner\" and install it for your project.\n\n## Try it\n\nPlease use the button below to see a gitpodified [Kotlin example project](https://github.com/gitpod-io/Gitpod-Kotlin) in Gitpod:\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-io/Gitpod-Kotlin)","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/kotlin","loc":{"lines":{"from":27,"to":49}}}}],["886",{"pageContent":"---\nsection: languages\ntitle: LaTeX in Gitpod\n---\n\n# LaTeX in Gitpod\n\nThis tutorial will demonstrate how to configure Gitpod to work with [LaTeX](https://www.latex-project.org/) files. You can find a complete [example repository](https://github.com/ptrottier/latex) at the end.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/latex","loc":{"lines":{"from":1,"to":8}}}}],["887",{"pageContent":"## Installing LaTeX\n\nFirst, you will probably want to install LaTeX in Gitpod. To do this, add a new file to your repository called [.gitpod.Dockerfile](/docs/configure/workspaces/workspace-image), and add the following content to it:\n\n```dockerfile\nFROM gitpod/workspace-full\n\n# Install LaTeX\nRUN sudo apt-get -q update && \\\n    sudo apt-get install -yq texlive && \\\n    sudo rm -rf /var/lib/apt/lists/*\n```\n\nNext, create a file called [.gitpod.yml](/docs/references/gitpod-yml) and add the following to it:\n\n```yml\nimage:\n    file: .gitpod.Dockerfile\n```\n\nNow commit both files into source control, and push them to your GitHub or GitLab repository.\n\nThis will be your base configuration for LaTeX in Gitpod — from now on, every time you create a new Gitpod workspace for your repository, it will be configured as specified in your `.gitpod.yml` and `.gitpod.Dockerfile`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/latex","loc":{"lines":{"from":10,"to":32}}}}],["888",{"pageContent":"## Automatically compiling LaTeX files on save\n\nOne way to achieve this is to install `inotify-tools` by modifying your earlier `.gitpod.Dockerfile` like so:\n\n```dockerfile\nFROM gitpod/workspace-full\n\n# Install LaTeX\nRUN sudo apt-get -q update && \\\n    sudo apt-get install -yq texlive-full inotify-tools && \\\n    sudo rm -rf /var/lib/apt/lists/*\n```\n\nNext, modify your `.gitpod.yml` like so:\n\n```yml\nimage:\n    file: .gitpod.Dockerfile\n\ntasks:\n    - name: LaTeX auto-rebuild\n      command: >\n          while find . -name '*.tex' | xargs inotifywait -qqre modify .; do \\\n            latexmk -pdf ; \\\n          done\n    - name: Terminal\n```\n\nThis will start a watcher process that automatically recompiles your `*.tex` files when they are changed. Note: The watcher process will start in a separate Terminal on every workspace start.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/latex","loc":{"lines":{"from":34,"to":62}}}}],["889",{"pageContent":"## VS Code Extensions\n\n### TexLab\n\nThis extension provides rich editing support for the LaTeX typesetting system powered by the [TexLab](https://github.com/latex-lsp/texlab-vscode) language server.\n\nTo install it in Gitpod, simply download the corresponding `*.vsix` file [Open VSX](https://open-vsx.org/), and then drag-and-drop it into Gitpod's Extensions view (which can be found in the left vertical menu bar).\n\nThis will automatically append something like this to your `.gitpod.yml` file:\n\n```yml\nvscode:\n    extensions:\n        - efoerster.texlab@1.10.0:/Vq+k9Ug/81LYWajjTgMpA==\n```\n\n(Note: You can also append these lines yourself if you don't want to download & re-upload the `*.vsix` file.)","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/latex","loc":{"lines":{"from":64,"to":80}}}}],["890",{"pageContent":"### LaTeX Workshop\n\nAnother great LaTeX extension is [LaTeX Workshop](https://github.com/James-Yu/LaTeX-Workshop):\n\n> Boost LaTeX typesetting efficiency with preview, compile, autocomplete, colorize, and more.\n\nIt is also available [on Open VSX](https://open-vsx.org/extension/James-Yu/latex-workshop).\n\n### LaTeX Snippets\n\nThere is also [LaTeX Snippets](https://github.com/JeffersonQin/VSCode-LaTeX-Snippets):\n\n> This extension includes a variety of snippets for LaTeX including making environments and plotting images for functions, etc.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/latex","loc":{"lines":{"from":82,"to":94}}}}],["891",{"pageContent":"## Try it!\n\nTo see a complete minimal example repository with a Gitpod configuration for LaTeX, including most of the tools we've covered, see [ptrottier/latex](https://github.com/ptrottier/latex). You can try it in your browser:\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/ptrottier/latex)","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/latex","loc":{"lines":{"from":96,"to":100}}}}],["892",{"pageContent":"---\nsection: languages\ntitle: PHP in Gitpod\n---\n\n# PHP in Gitpod\n\nGitpod supports PHP right out of the box, but more advanced features such as debugging can be configured, so here is how to do it!\n\n> There is also an awesome community project that utilizes [ddev](https://github.com/ddev/ddev) with Gitpod and makes things much easier.\n> Be sure to check it out first from below!\n>\n> https://ddev.github.io/ddev-gitpod-launcher/\n>\n> With it, you can run XDebug out of the box, change PHP versions on the fly, and much more!","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/php","loc":{"lines":{"from":1,"to":15}}}}],["893",{"pageContent":"## Example Repositories\n\n<div class=\"overflow-x-auto\">","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/php","loc":{"lines":{"from":17,"to":19}}}}],["894",{"pageContent":"| Repository                                                         | Description                                                                    | Try it                                                                                                                                        |\n| ------------------------------------------------------------------ | ------------------------------------------------------------------------------ | --------------------------------------------------------------------------------------------------------------------------------------------- |\n| [symfony-demo](https://github.com/gitpod-io/symfony-demo)          | A PHP/Symfony reference application following best practices                   | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-io/symfony-demo)                |","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/php","loc":{"lines":{"from":21,"to":23}}}}],["895",{"pageContent":"| [magento2gitpod](https://github.com/nemke82/magento2gitpod)        | Magento 2 optimized setup for Gitpod: Nginx, MySQL, PHP 7.2, PHP-FPM and more  | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/nemke82/magento2gitpod)                |\n| [koel](https://github.com/phanan/koel)                             | A personal music streaming server that works                                   | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/phanan/koel)                           |\n| [drupal](https://github.com/bserem/gitpod-drupal-mysql-starterkit) | Drupal 9 with MySQL, suitable for site building and contrib module development | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/bserem/gitpod-drupal-mysql-starterkit) |","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/php","loc":{"lines":{"from":24,"to":26}}}}],["896",{"pageContent":"| [phpmyadmin](https://github.com/apolopena/gitpod-phpmyadmin)       | A phpMyAdmin example with Node.js, a REST API and MySQL for data persistence   | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/apolopena/gitpod-phpmyadmin)           |","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/php","loc":{"lines":{"from":27,"to":27}}}}],["897",{"pageContent":"</div>","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/php","loc":{"lines":{"from":29,"to":29}}}}],["898",{"pageContent":"## Switching PHP versions\n\nGitpod installs PHP from [Ondřej Surý's PPA](https://launchpad.net/~ondrej/+archive/ubuntu/php) in [here](https://github.com/gitpod-io/workspace-images/blob/main/chunks/tool-nginx/Dockerfile). The default version should be set to PHP8.\n\nBut let's say you want to switch to PHP7.4, follow along!\nAt first, add a [.gitpod.Dockerfile](/docs/configure/workspaces/workspace-image) file on your repo with the following content in it:\n\n```dockerfile\n# You can find the new timestamped tags here: https://hub.docker.com/r/gitpod/workspace-full/tags\nFROM gitpod/workspace-full:2022-05-08-14-31-53\n\n# Change your version here\nRUN sudo update-alternatives --set php $(which php7.4)\n```\n\nSecondly, reference the above Dockerfile in your `.gitpod.yml` configuration file, like so:\n\n```yml\nimage:\n    file: .gitpod.Dockerfile\n```\n\nNow you can [See it in action on a new workspace](/docs/references/gitpod-yml#see-it-in-action)","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/php","loc":{"lines":{"from":31,"to":53}}}}],["899",{"pageContent":"## Debugging PHP in Gitpod\n\n![PHP debugging example](/images/docs/phpDebug.png)\n\nThe PHP Debug extension allows debugging PHP applications from within Gitpod.\n\nTo get this extension for your project, you must do two things:\n\nFirst, you must create a [.gitpod.Dockerfile](/docs/configure/workspaces/workspace-image) for your repository:\n\n```dockerfile\nFROM gitpod/workspace-full:2022-05-08-14-31-53\n\nRUN sudo install-packages php-xdebug\n```\n\nSecond, reference the above Dockerfile in a [.gitpod.yml](/docs/references/gitpod-yml) file, and then also install the extension, like so:\n\n```yml\nimage:\n    file: .gitpod.Dockerfile\n\nvscode:\n    extensions:\n        - felixfbecker.php-debug","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/php","loc":{"lines":{"from":55,"to":79}}}}],["900",{"pageContent":"```\n\nNow you can [See it in action on a new workspace](/docs/references/gitpod-yml#see-it-in-action)\n\nLater, you can head over to `Run and Debug` on the left hand side and have fun debugging PHP! You can also create a `launch.json` file.\n\nFinally, here is a full [example repository](https://github.com/gitpod-io/Gitpod-PHP-Debug) containing the complete Gitpod PHP debug configuration described above. You can try it by clicking here:\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-io/Gitpod-PHP-Debug)","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/php","loc":{"lines":{"from":80,"to":88}}}}],["901",{"pageContent":"## PECL Package Manager\n\nGitpod's default workspace image also comes with the [PECL](https://pecl.php.net/) package manager pre-installed. To install packages with it, you must use `sudo pecl install <EXTENSION>` in your repository's [.gitpod.Dockerfile](/docs/configure/workspaces/workspace-image), e.g. like so:\n\n```dockerfile\nFROM gitpod/workspace-full\n\nRUN sudo pecl channel-update pecl.php.net && \\\n    sudo pecl install <EXTENSION>\n```\n\nwhere `<EXTENSION>` is the PHP extension you want to install, e.g. `xdebug`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/php","loc":{"lines":{"from":90,"to":101}}}}],["902",{"pageContent":"## Setting GitHub token to Composer\n\nSome composer plugins like [symfony/flex](https://github.com/symfony/flex) does direct API call against GitHub to fetch additional information. These unauthenticated requests will be rate-limited and may fail your task steps. To fix this behavior we can use the default credential-helper to obtain a GitHub Token and configure composer properly\n\n```bash\ncomposer config --global github-oauth.github.com $(printf '%s\\n' host=github.com | gp credential-helper get | sort | head -2 | tail -1 | sed 's;password=;;')\n```\n\n## Further Reading\n\n-   <a class=\"no-nowrap\" href=\"https://notes.etin.space/posts/gitpodifying-a-new-laravel-application\">Gitpodifying a new Laravel Application</a> by Etin Obaseki","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/php","loc":{"lines":{"from":103,"to":113}}}}],["903",{"pageContent":"---\nsection: languages\ntitle: Python in Gitpod\n---\n\n# Python in Gitpod\n\nGitpod comes with great support for Python built-in. Still, depending on your project, you might want to further optimize the experience.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/python","loc":{"lines":{"from":1,"to":8}}}}],["904",{"pageContent":"## Python Project Examples\n\nBefore we get started, here are some examples of already-[gitpodified](/guides/gitpodify) repositories!\n\n<div class=\"overflow-x-auto\">","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/python","loc":{"lines":{"from":10,"to":14}}}}],["905",{"pageContent":"| Repository                                                                                | Description                                               | Try it                                                                                                                                         |\n| ----------------------------------------------------------------------------------------- | --------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------- |\n| [python-flask-api-tutorial](https://github.com/breatheco-de/python-flask-api-tutorial)    | A step by step Todo List API tutorial with Flask + Python | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/breatheco-de/python-flask-api-tutorial) |","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/python","loc":{"lines":{"from":16,"to":18}}}}],["906",{"pageContent":"| [django-locallibrary-tutorial](https://github.com/gitpod-io/django-locallibrary-tutorial) | An example website written in Django by MDN               | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-io/django-locallibrary-tutorial) |\n| [Gitpod-PyQt](https://github.com/gitpod-io/Gitpod-PyQt)                                   | A PyQt example for Gitpod                                 | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-io/Gitpod-PyQt)                  |\n| [wxPython-example](https://github.com/gitpod-io/wxPython-example)                         | A wxPython example for Gitpod                             | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-io/wxPython-example)             |","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/python","loc":{"lines":{"from":19,"to":21}}}}],["907",{"pageContent":"| [template-python-django](https://github.com/gitpod-io/template-python-django)             | A Django example for Gitpod                               | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-io/template-python-django)       |\n| [template-python-flask](https://github.com/gitpod-io/template-python-flask)               | A Flask example for Gitpod                                | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-io/template-python-flask)        |","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/python","loc":{"lines":{"from":22,"to":23}}}}],["908",{"pageContent":"</div>","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/python","loc":{"lines":{"from":25,"to":25}}}}],["909",{"pageContent":"## Pandas\n\nWelcome data scientists! This part of the guide will show you how to configure Gitpod for Pandas development.\n\n### Try Pandas in Gitpod\n\nTo see a minimal project with Pandas installed and configured, please check out [gitpod-io/Gitpod-Pandas](https://github.com/gitpod-io/Gitpod-Pandas):\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-io/Gitpod-Pandas)\n\n### Use Gitpod for Pandas development\n\nPandas Team has their official docs on how to use Gitpod for Pandas development. Please check out [Pandas Team's Gitpod guide](https://pandas.pydata.org/docs/dev/development/contributing_gitpod.html).\n\n## Jupyter Notebooks in VS Code\n\nFor the best experience with Jupyter, please open your Gitpod workspaces in [VS Code Desktop](/docs/references/ides-and-editors/vscode).","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/python","loc":{"lines":{"from":27,"to":43}}}}],["910",{"pageContent":"## Python Versions\n\nRun `pyenv versions` to see which Python versions are pre-installed in Gitpod.\n\nThe easiest way to install a new Python version is to use `pyenv install <VERSION>`. For example, suppose you wanted to install Python `3.6.4`, you would run `pyenv install 3.6.4`.\n\nYou can switch between Python versions using `pyenv local <VERSION>`. For example, if you wanted to switch to Python version `2.7.17` you would run `pyenv local 2.7.17`. This will create a `.python-version` file that controls which Python version is the default in your project.\n\nIf you want to setup a [custom dockerfile](/docs/configure/workspaces/workspace-image#use-a-custom-dockerfile) so that you don't have to repeat the process, here's how your `.gitpod.Dockerfile` could look like:\n\n```dockerfile\n# You could use `gitpod/workspace-full` as well.\nFROM gitpod/workspace-python\n\nRUN pyenv install 3.11 \\\n    && pyenv global 3.11\n```","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/python","loc":{"lines":{"from":45,"to":61}}}}],["911",{"pageContent":"## [Start tasks](/docs/configure/workspaces/tasks)\n\nYou can start building your project when, or even [before](/docs/configure/projects/prebuilds) you start your Gitpod workspace. Are you using a `requirements.txt` file to manage dependencies? If so, add this to your [.gitpod.yml](/docs/references/gitpod-yml) to automatically pre-install all dependencies when starting a workspace:\n\n```yml\ntasks:\n    - init: pip3 install -r requirements.txt\n      command: python3 main.py\n```","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/python","loc":{"lines":{"from":63,"to":71}}}}],["912",{"pageContent":"## Linting\n\nYou can <a class=\"no-nowrap\" href=\"https://github.com/palantir/python-language-server#configuration\">create a `setup.cfg` or a `pycodestyle.cfg` in the project root</a> and [adjust pycodestyle](http://pycodestyle.pycqa.org/en/latest/intro.html#configuration) rules there like this:\n\n```toml\n[pycodestyle]\nignore = E226,E302,E41\nmax-line-length = 160\nstatistics = True\n```\n\nYou'll need to refresh the browser in order to update these rule. [Source](https://github.com/gitpod-io/gitpod/issues/640#issuecomment-506622491).","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/python","loc":{"lines":{"from":73,"to":84}}}}],["913",{"pageContent":"## VS Code Extensions\n\nWhile the most popular Python VS Code extensions are built into Gitpod, here are a few \"nice to have\" extensions that you can use as well.\n\n### ARepl for Python\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"ARepl extension example\" src=\"/images/docs/AReplExample.webm\" type=\"video/webm\"></video>\n    <figcaption>ARepl extension example</figcaption>\n</figure>\n\nARepl for Python is helpful for constantly checking your code and debugging.\nTo install this extension for your repository, add the following to your [.gitpod.yml](/docs/references/gitpod-yml):\n\n```yml\nvscode:\n    extensions:\n        - almenon.arepl\n```","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/python","loc":{"lines":{"from":86,"to":104}}}}],["914",{"pageContent":"### Python Test Explorer\n\n![Python test explorer example](/images/docs/python_Test_In_Gitpod.png)\nEasily test your python code with the Python Test Explorer.\nTo add this to your repository add the following to your [.gitpod.yml](/docs/references/gitpod-yml)\n\n```yml\nvscode:\n    extensions:\n        - littlefoxteam.vscode-python-test-adapter@0.3.16:tZ/6xOSSdKUaq6JCUVkD+A==\n```","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/python","loc":{"lines":{"from":106,"to":116}}}}],["915",{"pageContent":"## GUI Applications with wxPython\n\nTo install wxPython to your repository please add the following to your [.gitpod.Dockerfile](/docs/configure/workspaces/workspace-image). If you don't have one, simply run [`gp init`](/docs/references/gitpod-cli) and commit the two generated files.\n\n```dockerfile\n# This will pull the official Gitpod `vnc` image\n# which has much of what you need to start\nFROM gitpod/workspace-full-vnc\n\nUSER gitpod\n\n# Install wxPython dependencies\nRUN sudo apt-get -q update && \\\n    sudo DEBIAN_FRONTEND=noninteractive apt-get install -yq freeglut3-dev python3.7-dev libpython3.7-dev libgl1-mesa-dev libglu1-mesa-dev libgstreamer-plugins-base1.0-dev libgtk-3-dev libnotify-dev libsdl2-dev libwebkit2gtk-4.0-dev libxtst-dev libgtk2.0-dev && \\\n    sudo rm -rf /var/lib/apt/lists/*\n\n# Install wxPython\nRUN pip3 install -U -f https://extras.wxpython.org/wxPython4/extras/linux/gtk3/ubuntu-18.04/ wxPython","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/python","loc":{"lines":{"from":118,"to":135}}}}],["916",{"pageContent":"```\n\nHere is a corresponding [.gitpod.yml](/docs/references/gitpod-yml) example:\n\n```yml\nimage:\n    file: .gitpod.Dockerfile\n\n# This will expose all necessary ports needed for your VNC image\nports:\n    - port: 6080\n      onOpen: open-preview\n    - port: 5900\n      onOpen: ignore\n    - port: 35900\n      onOpen: ignore\n\n# This will make it so that on workspace start it will run a file called `app.py`\ntasks:\n    - command: python3 app.py","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/python","loc":{"lines":{"from":136,"to":155}}}}],["917",{"pageContent":"```\n\n<br>\nWe also support other GUI frameworks such as `Kivy` and `PyQt`\n<br>\nHere are some other examples of Python GUI applications in Gitpod:\n\n<div class=\"overflow-x-auto\">","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/python","loc":{"lines":{"from":156,"to":163}}}}],["918",{"pageContent":"| Name                                                              | Framework | Try it                                                                                                                              |\n| ----------------------------------------------------------------- | --------- | ----------------------------------------------------------------------------------------------------------------------------------- |\n| [Tic-Tac-Toe-GUI](https://github.com/JesterOrNot/Tic-Tac-Toe-GUI) | Kivy      | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/JesterOrNot/Tic-Tac-Toe-GUI) |\n| [Pong](https://github.com/JesterOrNot/Pong)                       | Kivy      | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/JesterOrNot/Pong)            |","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/python","loc":{"lines":{"from":165,"to":168}}}}],["919",{"pageContent":"| [Gitpod-PyQt](https://github.com/gitpod-io/Gitpod-PyQt)           | PyQt      | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-io/Gitpod-PyQt)       |","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/python","loc":{"lines":{"from":169,"to":169}}}}],["920",{"pageContent":"</div>\n\n<br>","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/python","loc":{"lines":{"from":171,"to":173}}}}],["921",{"pageContent":"## Debugging\n\nHere is a quick clip on how to automatically configure debugging for Python!\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Python debugging example\" src=\"/images/docs/PythonDebug.webm\" type=\"video/webm\"></video>\n    <figcaption>Python debugging example</figcaption>\n</figure>\n\nSo, basically in this video we:\n\n1. First, open the Python file that we want to debug\n2. Then, go to the debug menu and select \"Add Configuration...\"\n3. Next, in the dropdown choose \"Python\"\n4. Next, choose \"Python File\" as the debug configuration\n5. Finally, start debugging your Python program!\n\nYou can also create the Python debug configuration file manually\n\nTo start debugging your Python application in Gitpod, please create a new directory called `.theia/`, and inside add a file called `launch.json`, finally, add the following to it:","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/python","loc":{"lines":{"from":175,"to":194}}}}],["922",{"pageContent":"To start debugging your Python application in Gitpod, please create a new directory called `.theia/`, and inside add a file called `launch.json`, finally, add the following to it:\n\n```json\n{\n\t\"version\": \"0.2.0\",\n\t\"configurations\": [\n\t\t{\n\t\t\t\"name\": \"Python: Current File\",\n\t\t\t\"type\": \"python\",\n\t\t\t\"request\": \"launch\",\n\t\t\t\"program\": \"${file}\",\n\t\t\t\"console\": \"internalConsole\"\n\t\t}\n\t]\n}","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/python","loc":{"lines":{"from":194,"to":208}}}}],["923",{"pageContent":"```\n\nThen, simply open the Python file you want to debug, open the Debug panel (in the left vertical toolbar, click the icon with the crossed-out-spider), and click the green \"Run\" button.\n\n<br>\n\nTo see a basic repository with Python debugging enabled, please check out [gitpod-io/Gitpod-Python-Debug](https://github.com/gitpod-io/Gitpod-Python-Debug):\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-io/Gitpod-Python-Debug)\n\n<br>","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/python","loc":{"lines":{"from":209,"to":219}}}}],["924",{"pageContent":"## Further Reading\n\n-   **_[VS Code documentation for Python debugging](https://code.visualstudio.com/docs/python/debugging)_** All the information there should also apply to Gitpod as well.\n-   **_[Troubleshooting Matplotlib/TK](https://github.com/gitpod-io/gitpod/issues/795)_** Here is how to troubleshoot Matplotlib/TK issues for Python GUI applications.\n-   **_[Debugging Django](https://community.gitpod.io/t/django-debugging/381/6)_** This is how to debug Django applications in Gitpod.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/python","loc":{"lines":{"from":221,"to":225}}}}],["925",{"pageContent":"---\nsection: languages\ntitle: R in Gitpod\n---\n\n# R in Gitpod\n\nTo work with R in Gitpod, you will need to properly configure your repository. Here is how to do it.\n\n## Installing R\n\nFirst, you'll probably want to install R itself. To do this, add a new file to your repository called [.gitpod.Dockerfile](/docs/configure/workspaces/workspace-image), and add the following content to it:\n\n```dockerfile\nFROM gitpod/workspace-full\n\nRUN brew install R\n```\n\nNext, create a Gitpod configuration file called [.gitpod.yml](/docs/references/gitpod-yml) (you can also simply run `gp init` and Gitpod will generate the file), and reference the above Dockerfile in it like so:\n\n```yml\nimage:\n    file: .gitpod.Dockerfile\n```\n\nThen commit and push both files to your repository. After that, every new Gitpod workspace created for your project will have R pre-installed.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/r","loc":{"lines":{"from":1,"to":27}}}}],["926",{"pageContent":"## VS Code Extensions\n\n### R Extension\n\n![R extension](/images/docs/RGitpod.png)\nTo install the R extension to your repository, add the following to your [.gitpod.yml](/docs/references/gitpod-yml) file:\n\n```yml\nvscode:\n    extensions:\n        - Ikuyadeu.r@1.2.1:z5vr1v1bfS++U/aHLSXQ6Q==\n```\n\nHere is a minimal example of [R running in Gitpod](https://github.com/gitpod-io/Gitpod-R). You can try it here:\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-io/Gitpod-R)","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/r","loc":{"lines":{"from":29,"to":44}}}}],["927",{"pageContent":"---\nsection: languages\ntitle: Ruby in Gitpod\n---\n\n# Ruby in Gitpod\n\nIt's relatively easy to set up your Ruby project in Gitpod.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/ruby","loc":{"lines":{"from":1,"to":8}}}}],["928",{"pageContent":"## Ruby Versions\n\nAs of this writing, Gitpod comes with Ruby 3.1 pre-installed in the [gitpod/workspace-full](https://hub.docker.com/r/gitpod/workspace-full).\n\nTo use a different Ruby version, you can [change the base image](https://www.gitpod.io/docs/configure/workspaces/workspace-image#configure-a-public-docker-image) to one of the following:\n\n-   [gitpod/workspace-ruby-2](https://hub.docker.com/r/gitpod/workspace-ruby-2)\n-   [gitpod/workspace-ruby-3.0](https://hub.docker.com/r/gitpod/workspace-ruby-3.0)\n\nThese images are automatically updated every week with the latest ruby patch versions.\n\nTo use a fixed version, you may use a [custom Dockerfile](https://www.gitpod.io/docs/configure/workspaces/workspace-image#configure-a-custom-dockerfile).\n\n```dockerfile\nFROM gitpod/workspace-full\nUSER gitpod","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/ruby","loc":{"lines":{"from":10,"to":25}}}}],["929",{"pageContent":"```dockerfile\nFROM gitpod/workspace-full\nUSER gitpod\n\n# Install Ruby version 2.7.6 and set it as default\nRUN _ruby_version=ruby-2.7.6 \\\n    && printf \"rvm_gems_path=/home/gitpod/.rvm\\n\" > ~/.rvmrc \\\n    && bash -lc \"rvm reinstall ${_ruby_version} && \\\n                 rvm use ${_ruby_version} --default\" \\\n    && printf \"rvm_gems_path=/workspace/.rvm\" > ~/.rvmrc \\\n    && printf \"{ rvm use \\$(rvm current); } >/dev/null 2>&1\\n\" >> \"$HOME/.bashrc.d/70-ruby\"","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/ruby","loc":{"lines":{"from":25,"to":35}}}}],["930",{"pageContent":"```\n\n> 💡 Explanation: Gitpod initially [sets up RVM](https://github.com/gitpod-io/workspace-images/blob/481f7600b725e0ab507fbf8377641a562a475625/chunks/lang-ruby/Dockerfile#L11-L26) in `/home/gitpod/.rvm`, but then later switches the RVM configuration directory to `/workspace/.rvm`, so that any user-made changes (like installing new gems) are persisted within a Gitpod workspace. However, during the Dockerfile build, the `/workspace` directory doesn't exist yet, so we temporarily reset RVM's configuration directory to `/home/gitpod/.rvm`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/ruby","loc":{"lines":{"from":36,"to":38}}}}],["931",{"pageContent":"## Example Repositories\n\nHere are a few Ruby example projects that are already automated with Gitpod:\n\n<div class=\"overflow-x-auto\">","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/ruby","loc":{"lines":{"from":40,"to":44}}}}],["932",{"pageContent":"| Repository                                                           | Description                                              | Try it                                                                                                                          |\n| -------------------------------------------------------------------- | -------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------- |\n| [Ruby on Rails template](https://github.com/gitpod-io/ruby-on-rails) | Ruby on Rails template with a PostgreSQL database        | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-io/ruby-on-rails) |","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/ruby","loc":{"lines":{"from":46,"to":48}}}}],["933",{"pageContent":"| [Forem](https://github.com/forem/forem)                              | The platform that powers [dev.to](https://dev.to)        | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/forem/forem)             |\n| [GitLab](https://gitlab.com/gitlab-org/gitlab)                       | The open source end-to-end software development platform | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://gitlab.com/gitlab-org/gitlab)       |","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/ruby","loc":{"lines":{"from":49,"to":50}}}}],["934",{"pageContent":"</div>","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/ruby","loc":{"lines":{"from":52,"to":52}}}}],["935",{"pageContent":"## VS Code Extensions\n\nHere are a few useful extensions that you'll likely want to install in your Ruby project.\n\n### [Ruby Test Explorer](https://marketplace.visualstudio.com/items?itemName=connorshea.vscode-ruby-test-adapter)\n\nWith the Ruby test explorer, you can run unit tests from within the Gitpod UI.\n![Ruby test explorer example](/images/docs/ruby_test_ui.png)\nTo add this extension to your repository, simply add these lines to your [.gitpod.yml](/docs/references/gitpod-yml) configuration file:\n\n```yml\nvscode:\n    extensions:\n        - connorshea.vscode-ruby-test-adapter@0.9.0\n        - hbenl.vscode-test-explorer@2.21.1\n```","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/ruby","loc":{"lines":{"from":54,"to":69}}}}],["936",{"pageContent":"## Ruby On Rails\n\nSo, you want to write your cool new Ruby On Rails application in Gitpod? Well, here is an idea of how to do it. Please take a look at our [minimal Rails example](https://github.com/gitpod-io/Gitpod-Ruby-On-Rails) running in Gitpod:\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-io/Gitpod-Ruby-On-Rails)","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/ruby","loc":{"lines":{"from":71,"to":75}}}}],["937",{"pageContent":"## FAQs\n\n### [How to avoid the need to run \"bundle install\" each time I restart my workspace?](https://discord.com/channels/816244985187008514/1082108211936645182)\n\nTo avoid running `bundle install` each time you restart your workspace in Gitpod, try changing your `.gitpod.yml` file configuration. Instead of using `init`, use a `before` task, as it will be re-run each time the workspace is restarted.\n\nHere's an example:\n\n```yml\ntasks:\n    - before: bundle install\n```\n\nFor more information on tasks, refer to the Gitpod [docs on tasks](https://www.gitpod.io/docs/configure/workspaces/tasks).\n\n**Note**: When a workspace is deactivated, only the workspace directory is saved and restored. Therefore, if `bundle install` creates files in various places in the file system, they may not be retained after a restart.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/ruby","loc":{"lines":{"from":77,"to":92}}}}],["938",{"pageContent":"---\nsection: languages\ntitle: Scala in Gitpod\n---\n\n# Scala in Gitpod\n\nWelcome, Scala programmer. Today we will show you how to configure Gitpod for your project.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/scala","loc":{"lines":{"from":1,"to":8}}}}],["939",{"pageContent":"## Installing Scala\n\nFirst, you'll probably want to install Scala. To do this, add a new file to your repository called [.gitpod.Dockerfile](/docs/configure/workspaces/workspace-image), and add the following content to it:\n\n```dockerfile\nFROM gitpod/workspace-full\n\nRUN brew install scala\n```\n\nAdditionally create a file called [.gitpod.yml](/docs/references/gitpod-yml) and add the following:\n\n```yml\nimage:\n    file: .gitpod.Dockerfile\n```\n\nNow commit both files into source control.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/scala","loc":{"lines":{"from":10,"to":27}}}}],["940",{"pageContent":"### What are these files for?\n\nLet's break this down. First, in `.gitpod.Dockerfile`, we declare `FROM gitpod/workspace-full` to have your project use Gitpod's default workspace image (recommended). You can use other images too, but some Gitpod features might not work as well with untested images.\n\nNext, we declare `RUN brew install scala`. This simply installs Scala into the workspace image via HomeBrew.\n\nThen, we register our custom Dockerfile in Gitpod's configuration file `.gitpod.yml`, so that Gitpod knows it should pick it up and build it on-the-fly when booting up new workspaces.\n\nFinally, please note that these changes will only take effect in new workspaces. To try out your new automated dev setup, simply commit both files; push them to GitHub; and then open a new Gitpod workspace for your repository. 🚀","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/scala","loc":{"lines":{"from":29,"to":37}}}}],["941",{"pageContent":"## Using the Ammonite REPL\n\n![The Ammonite REPL in action](/images/docs/AmmoniteRepl.png)\n\nTo install the [Ammonite REPL](https://ammonite.io/) in Gitpod, you must add the following to our previously-created [.gitpod.Dockerfile](/docs/configure/workspaces/workspace-image):\n\n```dockerfile\nRUN sudo sh -c '(echo \"#!/usr/bin/env sh\" && curl -L https://github.com/lihaoyi/Ammonite/releases/download/2.0.4/2.13-2.0.4) > /usr/local/bin/amm && chmod +x /usr/local/bin/amm'\n```\n\nThen commit the changes and push to your repository. Finally, when you open a new workspace, you will be able to type `amm` in the terminal, and behold a super cool Scala REPL in your workspace!","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/scala","loc":{"lines":{"from":39,"to":49}}}}],["942",{"pageContent":"## Building projects with sbt\n\nTo use [sbt](https://www.scala-sbt.org/) (simple build tool) in Gitpod, you can add the following to that [.gitpod.Dockerfile](/docs/configure/workspaces/workspace-image) we created:\n\n```dockerfile\nRUN brew install sbt\n```\n\nAs usual, commit and push the changes, and `sbt` will be installed in all future workspaces.\n\n## Managing Scala versions with scalaenv\n\nSay your project needs a specific Scala version. You can use [scalaenv](https://github.com/scalaenv/scalaenv), a version manager for Scala, to switch between different Scala versions. But first, we must install `scalaenv`. As usual, we need to change our [.gitpod.Dockerfile](/docs/configure/workspaces/workspace-image), by adding this to it:\n\n```dockerfile\nRUN brew install scalaenv\n```\n\nThen, say you need Scala version `2.12.11`, you would add the following line as well:\n\n```dockerfile\nRUN scalaenv install scala-2.12.11 && scalaenv global scala-2.12.11\n```","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/scala","loc":{"lines":{"from":51,"to":73}}}}],["943",{"pageContent":"## Using coursier, an artifact fetcher for Scala\n\n[coursier](https://get-coursier.io/) is useful for building certain Scala projects and installing different tools.\n\n```dockerfile\nRUN brew install coursier/formulas/coursier\n```\n\n(Don't forget to commit and push this change!)\n\n## Formatting Scala code with scalafmt\n\nTo install [scalafmt](https://scalameta.org/scalafmt/) for your repository, add the following to your [.gitpod.Dockerfile](/docs/configure/workspaces/workspace-image):\n\n```dockerfile\nRUN sudo env \"PATH=$PATH\" coursier bootstrap org.scalameta:scalafmt-cli_2.12:2.4.2 \\\n  -r sonatype:snapshots \\\n  -o /usr/local/bin/scalafmt --standalone --main org.scalafmt.cli.Cli\n```\n\nThen to format your code simply run `scalafmt`!","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/scala","loc":{"lines":{"from":75,"to":95}}}}],["944",{"pageContent":"## Putting it all together\n\nA full example of a [.gitpod.Dockerfile](/docs/configure/workspaces/workspace-image) configured for Scala could look something like:\n\n```dockerfile\nFROM gitpod/workspace-full\n\nRUN sudo sh -c '(echo \"#!/usr/bin/env sh\" && curl -L https://github.com/lihaoyi/Ammonite/releases/download/2.0.4/2.13-2.0.4) > /usr/local/bin/amm && chmod +x /usr/local/bin/amm'\n\nRUN brew install scala coursier/formulas/coursier sbt scalaenv\n\nRUN sudo env \"PATH=$PATH\" coursier bootstrap org.scalameta:scalafmt-cli_2.12:2.4.2 \\\n  -r sonatype:snapshots \\\n  -o /usr/local/bin/scalafmt --standalone --main org.scalafmt.cli.Cli\n\nRUN scalaenv install scala-2.12.11 && scalaenv global scala-2.12.11","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/scala","loc":{"lines":{"from":97,"to":112}}}}],["945",{"pageContent":"```\n\nYou will notice that all the `brew install` commands are on the same line. We recommend grouping similar commands together to minimize the number of [Docker layers](https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#minimize-the-number-of-layers).\n\nAdditionally, your [.gitpod.yml](/docs/references/gitpod-yml) file should still look like this:\n\n```yml\nimage:\n    file: .gitpod.Dockerfile\n```","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/scala","loc":{"lines":{"from":113,"to":122}}}}],["946",{"pageContent":"## VS Code Extensions\n\n### Scala Syntax (official)\n\n![Scala Syntax demo](/images/docs/scala-syntax.png)\n\nScala Syntax adds basic syntax highlighting for Scala and `sbt` files.\n\nTo get it, open Gitpod's **Extensions** panel (left vertical menu in the IDE), then search for \"Scala Syntax\", and install it \"for this project\". Then, commit the automatic `.gitpod.yml` change that was made by Gitpod.\n\n### Metals\n\n![An example of the metals in Gitpod](/images/docs/metals-demo.png)\n\nMetals adds helpful Scala features to Gitpod, for example, advanced autocompletion and debugging support just to name a few. Although to use it you must also have the previously mentioned Scala Syntax.\n\nTo get it, open Gitpod's **Extensions** panel (left vertical menu in the IDE), then search for \"Scala Metals\", and install it \"for this project\". Then, commit the automatic `.gitpod.yml` change that was made by Gitpod.\n\nBoom! You're done! (Just a reminder, don't forget to push the changes.)","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/scala","loc":{"lines":{"from":124,"to":142}}}}],["947",{"pageContent":"## Debugging Scala code\n\nTo debug Scala code in Gitpod you should use the Metals extension which we just went over. Here is an example of Scala Debugging in action:\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Example of debugging Scala in Gitpod\" src=\"/images/docs/scala-debug.webm\" type=\"video/webm\"></video>\n    <figcaption>Example of debugging Scala in Gitpod</figcaption>\n</figure>\n\nIn general when debugging Scala code, go to the main method, and click the Debug button over it! And boom you're debugging.\n\n## Try it!\n\nTo see a minimal repository with a Gitpod configuration that installs all the tools we've covered, see [gitpod-io/Gitpod-Scala](https://github.com/gitpod-io/Gitpod-Scala). You can try it in your browser:\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-io/Gitpod-Scala)","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/scala","loc":{"lines":{"from":144,"to":159}}}}],["948",{"pageContent":"## Need help?\n\nIf you are having trouble and need help please find us in the [Gitpod community](https://community.gitpod.io/), or, [file an issue on GitHub](https://github.com/gitpod-io/gitpod/issues/new/choose).\n\n## Feedback\n\nWe love feedback and want to continuously improve all of our guides and documentation. If you found a grammar mistake, or we left out your favorite Scala tool, or you just have general feedback on the guide, please feel free to [edit this guide](https://gitpod.io/#https://github.com/gitpod-io/website/blob/master/src/docs/introduction/languages/scala.md) or to [file a website issue on GitHub](https://github.com/gitpod-io/website/issues/new/choose).","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/scala","loc":{"lines":{"from":161,"to":167}}}}],["949",{"pageContent":"---\nsection: languages\ntitle: Rust in Gitpod\n---\n\n# Rust in Gitpod\n\nWelcome, Rustacean!\n\nRust is a first-class language in Gitpod, and we believe that Gitpod is a great tool for Rust projects. Some of Gitpod's core developers frequently work with Rust code (in Gitpod), and several key components of Gitpod are written in Rust:\n\n-   The fantastic language support is provided by the [rls](https://github.com/rust-lang/rls)\n-   The blazing-fast workspace search is powered by [ripgrep](https://github.com/BurntSushi/ripgrep)","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/rust","loc":{"lines":{"from":1,"to":13}}}}],["950",{"pageContent":"## Rust Version\n\nGitpod always comes with the latest available Rust toolchain pre-installed using [rustup](https://rustup.rs/). (As of this writing, the Rust version is `1.68.1`.\n\nYou can also use `rustup` yourself in Gitpod in order to switch to a different Rust version, or to install extra components. See [the rustup book](https://rust-lang.github.io/rustup/index.html) to learn more about `rustup` itself.\n\nNote: If you try to use `rustup` in your repository's [.gitpod.Dockerfile](/docs/configure/workspaces/workspace-image), you might get the following error:\n\n```\n/bin/sh: rustup command not found\n```\n\nTo fix this, simply wrap the `rustup` command in a login Bash shell, like so:\n\n```dockerfile\nRUN bash -cl \"rustup toolchain install nightly\"","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/rust","loc":{"lines":{"from":15,"to":30}}}}],["951",{"pageContent":"```\n\nTo fix this, simply wrap the `rustup` command in a login Bash shell, like so:\n\n```dockerfile\nRUN bash -cl \"rustup toolchain install nightly\"\n```\n\nYou can override this default by committing a `rustup-toolchain` file in the root of your repository. Say for example you need the nightly compiler for March 4th, 2020, you would create a `rustup-toolchain` file and add the following\n\n```text\nnightly-2020-03-04\n```\n\nwhich will set the required Rust version and if you commit the file into source control it will set the default nightly version across all workspaces.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/rust","loc":{"lines":{"from":30,"to":44}}}}],["952",{"pageContent":"## Example Repositories\n\nHere are a few Rust example projects that are already automated with Gitpod:\n\n<div class=\"overflow-x-auto\">","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/rust","loc":{"lines":{"from":46,"to":50}}}}],["953",{"pageContent":"| Repository                                          | Description                         | Try it                                                                                                                       |\n| --------------------------------------------------- | ----------------------------------- | ---------------------------------------------------------------------------------------------------------------------------- |\n| [Nushell](https://github.com/nushell/nushell/)      | A next-gen shell for the GitHub era | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/nushell/nushell)      |\n| [MathLang](https://github.com/JesterOrNot/mathlang) | Basic maths language in Rust        | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/JesterOrNot/MathLang) |","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/rust","loc":{"lines":{"from":52,"to":55}}}}],["954",{"pageContent":"| [Servo](https://github.com/servo/servo)             | The Servo Browser Engine            | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/servo/servo)          |","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/rust","loc":{"lines":{"from":56,"to":56}}}}],["955",{"pageContent":"</div>","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/rust","loc":{"lines":{"from":58,"to":58}}}}],["956",{"pageContent":"## VS Code Extensions\n\nThe most popular Rust VS Code extensions are already pre-installed in Gitpod. But here are a few \"nice to have\" extensions you may choose to install as well.\n\nIn order to install one of these extensions for your repository, simply head to Gitpod's [Extensions panel](/docs/references/ides-and-editors/vscode-extensions) (find it in the IDE's left vertical menu), then search for the desired extension by name, and install it for your project. This will add an entry to your [.gitpod.yml](/docs/references/gitpod-yml) file that ensures all future Gitpod workspaces for your repository will already have this extension pre-installed.\n\n### Rust Test Explorer\n\n![Rust test explorer example](/images/docs/rustTest.png)\n<br>\n<br>\nThe Rust Test Explorer makes it easy to run Rust tests.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/rust","loc":{"lines":{"from":60,"to":71}}}}],["957",{"pageContent":"### Rust Test Explorer\n\n![Rust test explorer example](/images/docs/rustTest.png)\n<br>\n<br>\nThe Rust Test Explorer makes it easy to run Rust tests.\n\n### Crates\n\n> **_Note: This extension outputs emojis by default if the crate version is set at the latest. You can disable this by using `crates.upToDateDecorator` option in your preferences_** > <br>\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"A crates extension demo\" src=\"/images/docs/cratesDemo.webm\" type=\"video/webm\"></video>\n    <figcaption>A crates extension demo</figcaption>\n</figure>\n\nThe VS Code extension Crates makes it easier to manage your Cargo dependency versions.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/rust","loc":{"lines":{"from":71,"to":87}}}}],["958",{"pageContent":"### Search Crates.io\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"An example of search crates.io extension\" src=\"/images/docs/searchCratesio.webm\" type=\"video/webm\"></video>\n    <figcaption>An example of search crates.io extension</figcaption>\n</figure>\n\nDo you have an idea of a library you want to use but don't know the version well just type in the name of the library and Search Crates.io will get the version.\n\n### Better TOML\n\n![TOML Syntax highlighting example](/images/docs/feature_syntax_highlight.png)\n\nBetter TOML adds syntax highlighting to your `Cargo.toml`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/rust","loc":{"lines":{"from":89,"to":102}}}}],["959",{"pageContent":"## Cross-compiling with MUSL\n\nTo cross-compile with MUSL in Gitpod, you can:\n\n-   Run `rustup target add x86_64-unknown-linux-musl`, for example in your [.gitpod.Dockerfile](/docs/configure/workspaces/workspace-image)\n-   Then, build with `cargo build --target x86_64-unknown-linux-musl`\n\nTo learn more, see [MUSL support for fully static binaries](https://doc.rust-lang.org/edition-guide/rust-2018/platform-and-target-support/musl-support-for-fully-static-binaries.html).","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/rust","loc":{"lines":{"from":104,"to":111}}}}],["960",{"pageContent":"## Debugging\n\nIn this section we will show you how to configure your project for debugging in Gitpod.\n\nFirst, before we get to that we need to get some prerequisites set-up.\n\nFirst we'll install the needed extension. If you haven't already, head over to Gitpod's [Extensions panel](/docs/references/ides-and-editors/vscode-extensions) (left vertical menu in the IDE) and search for an extension called `Native Debug` by webfreak. When you see it, click to install it for your project.\n\nThe next prerequisite is a Docker configuration.\n\nIf you already have a [.gitpod.Dockerfile](/docs/configure/workspaces/workspace-image) just add the following:\n\n```dockerfile\nRUN sudo apt-get -q update \\\n    && sudo apt-get install -yq \\\n        libpython3.6 \\\n        rust-lldb \\\n    && sudo rm -rf /var/lib/apt/lists/*\n\nENV RUST_LLDB=/usr/bin/lldb-8","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/rust","loc":{"lines":{"from":113,"to":132}}}}],["961",{"pageContent":"```\n\nIf not there are two steps. First, create a file called `.gitpod.Dockerfile` with the following content:\n\n```dockerfile\nFROM gitpod/workspace-full\n\nUSER gitpod\n\nRUN sudo apt-get -q update \\\n    && sudo apt-get install -yq \\\n        libpython3.6 \\\n        rust-lldb \\\n    && sudo rm -rf /var/lib/apt/lists/*\n\nENV RUST_LLDB=/usr/bin/lldb-8\n```\n\nNext, add the following to your [.gitpod.yml](/docs/references/gitpod-yml) file:\n\n```yml\nimage:\n    file: .gitpod.Dockerfile","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/rust","loc":{"lines":{"from":133,"to":155}}}}],["962",{"pageContent":"```\n\nNow that's out of the way, here is a video on how to configure the debug configuration\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Rust debugging example\" src=\"/images/docs/RustDebug.webm\" type=\"video/webm\"></video>\n    <figcaption>Rust debugging example</figcaption>\n</figure>\n\nSo, basically in this video we:","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/rust","loc":{"lines":{"from":156,"to":165}}}}],["963",{"pageContent":"1. Go to the debug menu and select \"Add Configuration...\"\n2. Next, in the dropdown choose \"GDB: Launch Program\"\n3. Go to the `Cargo.toml` file and find the name of the program.\n4. Modify the target field and change it to `${workspaceFolder}/target/debug/<PROGRAM_NAME>` where `<PROGRAM_NAME>` is the name of the program under the name field in the `Cargo.toml` file.\n5. Add another property to the created file called `preLaunchTask` and set it to \"cargo\"\n6. Go to the terminal menu and click configure tasks\n7. Select cargo build from the menu that pops up\n8. change the tag `type` to `command`\n9. change the tag `subcommand` to `args` and the value to `[\"build\"]`\n10. Next remove the `problemMatcher` field.\n11. Add a field called `type` and set it to `process`\n12. Add a field called `label` and set it to `cargo`\n13. Go to the Rust file you want to debug\n14. Add a breakpoint or two\n15. Go back to the debug menu that has the crossed out spider\n16. Click the green run button.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/rust","loc":{"lines":{"from":167,"to":182}}}}],["964",{"pageContent":"13. Go to the Rust file you want to debug\n14. Add a breakpoint or two\n15. Go back to the debug menu that has the crossed out spider\n16. Click the green run button.\n17. Finally, start debugging your Rust program!","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/rust","loc":{"lines":{"from":182,"to":186}}}}],["965",{"pageContent":"You can also create the Rust debug configuration file manually\n\nTo start debugging your Rust application in Gitpod, please create a new directory called `.theia/`, and inside add a file called `launch.json`, add the following to it:\n\n```json\n{\n\t// Use IntelliSense to learn about possible attributes.\n\t// Hover to view descriptions of existing attributes.\n\t\"version\": \"0.2.0\",\n\t\"configurations\": [\n\t\t{\n\t\t\t\"type\": \"gdb\",\n\t\t\t\"request\": \"launch\",\n\t\t\t\"name\": \"Debug Rust Code\",\n\t\t\t\"preLaunchTask\": \"cargo\",\n\t\t\t\"target\": \"${workspaceFolder}/target/debug/rust_debug\",\n\t\t\t\"cwd\": \"${workspaceFolder}\",\n\t\t\t\"valuesFormatting\": \"parseText\"\n\t\t}\n\t]\n}","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/rust","loc":{"lines":{"from":188,"to":208}}}}],["966",{"pageContent":"```\n\nNext create another file in the same `.theia/` directory called `tasks.json` with the following content:\n\n```json\n{\n\t\"tasks\": [\n\t\t{\n\t\t\t\"command\": \"cargo\",\n\t\t\t\"args\": [\"build\"],\n\t\t\t\"type\": \"process\",\n\t\t\t\"label\": \"cargo\"\n\t\t}\n\t]\n}\n```\n\nThen, simply open the Rust file you want to debug, add some breakpoints, and open the Debug panel (in the left vertical toolbar, click the icon with the crossed-out-spider), and click the green \"Run\" button.\n\n<br>\n\nTo see a basic repository with Rust debugging configured, please check out [gitpod-io/Gitpod-Rust-Debug](https://github.com/gitpod-io/Gitpod-Rust-Debug):\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-io/Gitpod-Rust-Debug)\n\n<br>","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/rust","loc":{"lines":{"from":209,"to":234}}}}],["967",{"pageContent":"## Further Reading\n\n-   **_[Rocket-Example](/blog/docker-in-gitpod)_** For an example of how to setup a project for the [`Rocket`](https://rocket.rs/) web-development framework","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/rust","loc":{"lines":{"from":236,"to":238}}}}],["968",{"pageContent":"---\nsection: languages\ntitle: Svelte in Gitpod\n---\n\n# Svelte in Gitpod\n\nTo work with Svelte in Gitpod, you will need to properly configure your repository. Here is how to do that, assuming that you're using the official sveltejs [template](https://github.com/sveltejs/template) which uses Rollup:\n\n## Create a .gitpod.yml\n\nStart by creating a `.gitpod.yml` file in the root of your project and add the following to it:\n\n```yml\ntasks:\n    - init: npm install\n      command: npm run dev\n\nports:\n    - port: 5000\n      onOpen: open-preview\n    - port: 35729\n      onOpen: ignore\n```\n\nAfter committing and pushing this file to your repository, start a new Gitpod workspace. You'll see that Gitpod will automatically install the dependencies; start the dev server; and open a preview on the side for port `5000`.\n\n![Sveltejs Template in Gitpod](/images/docs/svelte-template-in-gitpod.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/svelte","loc":{"lines":{"from":1,"to":28}}}}],["969",{"pageContent":"## Making Live Reload work\n\nIn order to make live reload work we need to add a bit of configuration as specified below:\n\n-   Setup an environment variable called `CLIENT_URL` in the `.gitpod.yml` config file as shown below please make sure that you set it up before the task which starts the dev server(which is `npm run dev` in this case):\n\n    ```bash\n    - init: npm install\n        command: |\n          export CLIENT_URL=\"$(gp url 35729)/livereload.js?snipver=1&port=443\"\n          npm run dev\n    ```\n\n-   Pass the value of `CLIENT_URL` environment variable to the `rollup-plugin-livereload` in `rollup-config.js` inside of the `plugins` array as shown:\n    ```js\n    plugins: [\n    \t!production &&\n    \t\tlivereload({\n    \t\t\twatch: 'public',\n    \t\t\tclientUrl: process.env.CLIENT_URL,\n    \t\t}),\n    ];\n    ```\n    This will set `CLIENT_URL` to the workspace url of port `35729` (default port for livereload in Gitpod).","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/svelte","loc":{"lines":{"from":30,"to":53}}}}],["970",{"pageContent":"## Example Projects\n\n<div class=\"overflow-x-auto\">\n\n| Repository                                                          | Description                        | Try it                                                                                                                              |\n| ------------------------------------------------------------------- | ---------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------- |\n| [SvelteJS template](https://github.com/gitpod-io/sveltejs-template) | A project template for Svelte apps | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/gitpod-io/sveltejs-template) |\n\n</div>","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/svelte","loc":{"lines":{"from":55,"to":63}}}}],["971",{"pageContent":"## VS Code Extensions\n\n### Svelte for VS Code\n\nSvelte for VS Code Provides syntax highlighting and rich IntelliSense for Svelte components in VS Code, utilising the [svelte language server](https://github.com/sveltejs/language-tools/tree/master/packages/language-server).\n\nTo add this extension to your repository, simply head to Gitpod’s [Extensions panel](/docs/references/ides-and-editors/vscode-extensions) (find it in the IDE’s left vertical menu), then search for the desired extension by name, and install it for your project. This will add an entry to your [.gitpod.yml](/docs/references/gitpod-yml) file that ensures all future Gitpod workspaces for your repository will already have this extension pre-installed.\n\nhttps://github.com/gitpod-io/sveltejs-template repo is a working example of the config described above <span aria-hidden=\"true\">👆</span>.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/svelte","loc":{"lines":{"from":65,"to":73}}}}],["972",{"pageContent":"---\nsection: languages\ntitle: Vue.js in Gitpod\n---\n\n# Vue.js in Gitpod\n\nTo work with Vue.js in Gitpod, you will need to properly configure your repository. Here is how to do it.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/vue","loc":{"lines":{"from":1,"to":8}}}}],["973",{"pageContent":"## Example Repositories\n\nHere are a few Vue.js example projects that are already automated with Gitpod:\n\n<div class=\"overflow-x-auto\">","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/vue","loc":{"lines":{"from":10,"to":14}}}}],["974",{"pageContent":"| Repository                                            | Description                                                                     | Try it                                                                                                                        |\n| ----------------------------------------------------- | ------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------- |\n| [vuepress](https://github.com/vuejs/vuepress)         | Minimalistic Vue-powered static site generator                                  | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/vuejs/vuepress)        |","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/vue","loc":{"lines":{"from":16,"to":18}}}}],["975",{"pageContent":"| [postwoman](https://github.com/liyasthomas/postwoman) | A free, fast and beautiful API request builder (web alternative to Postman)     | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/liyasthomas/postwoman) |\n| [nuxtjs.org](https://github.com/nuxt/nuxtjs.org)      | Nuxt.js Documentation Website (Universal Vue.js Application built with Nuxt.js) | [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/nuxt/nuxtjs.org)       |","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/vue","loc":{"lines":{"from":19,"to":20}}}}],["976",{"pageContent":"</div>","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/vue","loc":{"lines":{"from":22,"to":22}}}}],["977",{"pageContent":"## Vue-CLI\n\nTo install the Vue.js command-line interface in your current workspace run the following\n\n```bash\nnpm i -g vue-cli\n```\n\nTo install globally across all workspaces add the following to your [.gitpod.Dockerfile](/docs/configure/workspaces/workspace-image)\n\n```dockerfile\nRUN npm i -g vue-cli\n```\n\n> Please note: If you don't already have one please run [`gp init`](/docs/references/gitpod-cli#init) which should generate two files [.gitpod.yml](/docs/references/gitpod-yml) and [.gitpod.Dockerfile](/docs/configure/workspaces/workspace-image)","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/vue","loc":{"lines":{"from":24,"to":38}}}}],["978",{"pageContent":"## VS Code Extensions\n\n### Vetur\n\n![Vetur extension](/images/docs/Vetur.png)\n\nVetur provides syntax highlighting, snippets, Emmet support, linting/error checking, auto-formatting, and auto-complete for Vue files.\n\nTo add this extension to your repository add the following to your [.gitpod.yml](/docs/references/gitpod-yml)\n\n```yml\nvscode:\n    extensions:\n        - octref.vetur@0.23.0:TEzauMObB6f3i2JqlvrOpA==\n```\n\nFor projects that already have a [.gitpod.yml](/docs/references/gitpod-yml), you can skip the first part and just add the provided snippet.","metadata":{"source":"https://www.gitpod.io/docs/introduction/languages/vue","loc":{"lines":{"from":40,"to":56}}}}],["979",{"pageContent":"---\nsection: learn-gitpod\ntitle: Context URL\ndescription: Learn about Gitpod context URLs and how they determine the configuration and automation while starting a Gitpod workspace.\n---\n\n# Context URL\n\nGitpod understands a variety of common situations you experience as part of your development workflow and automates repetitive tasks, giving you time to focus on more impactful work.\n\nThe context is determined by a Gitpod URL's [_anchor_](https://developer.mozilla.org/en-US/docs/Learn/Common_questions/What_is_a_URL), i.e. the link provided at the end of the `#` character in the `gitpod.io/#` URL.\n\nRegardless of the context, Gitpod performs the tasks configured in `.gitpod.yml` if this configuration file is available for a given repository.\n\nGitpod is aware of the following contexts:","metadata":{"source":"https://www.gitpod.io/docs/introduction/learn-gitpod/context-url","loc":{"lines":{"from":1,"to":15}}}}],["980",{"pageContent":"Regardless of the context, Gitpod performs the tasks configured in `.gitpod.yml` if this configuration file is available for a given repository.\n\nGitpod is aware of the following contexts:\n\n-   [Context URL](#Context-URL)\n    -   [Repository Context](#repository-context)\n    -   [Branch and Commit Contexts](#branch-and-commit-contexts)\n    -   [Issue Context](#issue-context)\n    -   [Pull/Merge Request Context](#pullmerge-request-context)\n\nPlease note, these contexts are supported for GitHub, GitLab, and Bitbucket. This also includes Self-Hosted installations of these git providers, where available.","metadata":{"source":"https://www.gitpod.io/docs/introduction/learn-gitpod/context-url","loc":{"lines":{"from":15,"to":25}}}}],["981",{"pageContent":"## Repository Context\n\nTo start a new workspace, you prefix your repository URL with `gitpod.io/#`. E.g. [gitpod.io/#https://github.com/gitpod-io/website](https://gitpod.io/#https://github.com/gitpod-io/website).\n\nThis is the most basic context and Gitpod simply checks out the default branch and opens the Welcome screen once the workspace is ready.\n\nAn example URL for the repository context is:\n\n```\ngitpod.io/#https://github.com/gitpod-io/website\n```","metadata":{"source":"https://www.gitpod.io/docs/introduction/learn-gitpod/context-url","loc":{"lines":{"from":27,"to":37}}}}],["982",{"pageContent":"## Branch and Commit Contexts\n\nThe branch and commit contexts are very similar to the repository context described above. When you open a new workspace for a given branch or commit, Gitpod automatically checks out that branch or commit, allowing you to browse the repository on that branch or at the time of the given commit.\n\nAn example URL for the branch context is:\n\n```\ngitpod.io/#https://github.com/gitpod-io/website/tree/my-branch\n```\n\nAn example URL for the commit SHA context is:\n\n```\ngitpod.io/#https://github.com/gitpod-io/website/commit/f5d4eb4cd3859a760ac613598e840b94e8094649\n```","metadata":{"source":"https://www.gitpod.io/docs/introduction/learn-gitpod/context-url","loc":{"lines":{"from":39,"to":53}}}}],["983",{"pageContent":"## Issue Context\n\nThe fastest way to work on an issue is to start a Gitpod workspace with an issue context. Gitpod automatically creates a local branch based on the following pattern:\n\n```text\n<your-username>/<issue-title>-<issue-number>\n```\n\nThis branch is based on the most recent commit in your project's default branch.\n\nYou can commit your changes with the `git` command line interface or use the _Source Control_ panel on the left side of the editor. From there, you can also create a new pull/merge request without leaving Gitpod.\n\nAn example URL for the issue context is:\n\n```\ngitpod.io/#https://github.com/gitpod-io/website/issues/470\n```","metadata":{"source":"https://www.gitpod.io/docs/introduction/learn-gitpod/context-url","loc":{"lines":{"from":55,"to":71}}}}],["984",{"pageContent":"## Pull/Merge Request Context\n\n> **Note:** Currently pull-request based context URLs are only supported by [GitHub authentication](https://www.gitpod.io/docs/configure/authentication/github) as a [Gitpod authentication method](https://www.gitpod.io/docs/configure/authentication).\n\nWhen Gitpod recognizes a pull or merge request context, it knows you most likely have one of two intentions:\n\n-   As a reviewer, provide PR/MR feedback\n-   As an author, process feedback and update the code\n\nIn either case, Gitpod automatically performs the following tasks for you:\n\n1. Starts a workspace with the correct branch checked out\n1. Opens the PR/MR review panel where you can see and contribute to existing conversations\n1. Displays a list of files changed as part of that PR/MR\n1. Enables you to leave comments right within individual files (yep, no need to switch between the code and the PR/MR in your browser)","metadata":{"source":"https://www.gitpod.io/docs/introduction/learn-gitpod/context-url","loc":{"lines":{"from":73,"to":87}}}}],["985",{"pageContent":"In addition, Gitpod lets you merge a PR/MR. Once merged, you close the browser tab and move on to your next task - in a new, ephemeral developer environment 🎉.\n\nAn example URL for the pull/merge request context is:\n\n```\ngitpod.io/#https://github.com/gitpod-io/website/pull/494\n```","metadata":{"source":"https://www.gitpod.io/docs/introduction/learn-gitpod/context-url","loc":{"lines":{"from":89,"to":95}}}}],["986",{"pageContent":"---\nsection: learn-gitpod\ntitle: Learn Gitpod\ndescription: Learn how to use Gitpod for your development workflows, including tips and best practices.\n---\n\n# Learn Gitpod\n\nCloud development environments (CDEs) are on-demand development environments that are pre-configured with all tools, libraries and dependencies needed to write and review code. They can be easily duplicated and shared across teams.","metadata":{"source":"https://www.gitpod.io/docs/introduction/learn-gitpod","loc":{"lines":{"from":1,"to":9}}}}],["987",{"pageContent":"## What is a Gitpod Workspace?\n\nGitpod allows easy creation of personal \"workspaces\". Workspaces are based on Linux and can be automated through configuration of a gitpod.yml and/or a workspace image, such as Docker. Workspaces are ephemeral and fully-isolated, with full super-user permissions.\n\nAnything you can do on Linux, you can do in Gitpod.\n\nYou can use Gitpod for native desktop UI and graphical user interface (GUI) applications via Virtual Networking Computing (VNC), to achieve an experience comparible to Virtual Desktop Infrastructure (VDI) yet fully optimised for developer experience.\n\nSee [Ephemeral Workspaces](/docs/introduction/learn-gitpod/one-workspace-per-task), [Workspace Image](/docs/configure/workspaces/workspace-image) and [.gitpod.yml](/docs/references/gitpod-yml) for more.","metadata":{"source":"https://www.gitpod.io/docs/introduction/learn-gitpod","loc":{"lines":{"from":11,"to":19}}}}],["988",{"pageContent":"## Who can use Gitpod?\n\nGitpod is optimised for developer experience, however having access to reproducible workspaces is beneficial to many members of an engineering organisation. For instance: Platform Engineers, Quality Assurance, Data Scientists and Product Managers can use Gitpod for use cases such as: running test suites, previewing applications and performing operations work.","metadata":{"source":"https://www.gitpod.io/docs/introduction/learn-gitpod","loc":{"lines":{"from":21,"to":23}}}}],["989",{"pageContent":"## Accessing Gitpod via Browser or Desktop\n\nYou can access Gitpod on a PC, laptop, tablet or phone using a code editor (e.g. VS Code), IDE (e.g. IntelliJ), or a terminal (e.g. SSH). Both browser-based and desktop applications are supported.\n\nSee [IDEs & Editors](/docs/references/ides-and-editors) for more.\n\n<!-- TODO: Rename page + introduce ephemerality -->\n\n<!--\n### Edit in your browser\n\n-   VS Code\n-   Keyboard Shortcuts\n-   PR Flow + Full Working\n-   Arc Browser\n-   Browser Settings\n-   Browser Extension\n\n### Edit on your desktop\n\n-   JetBrains\n-   VS Code\n-   Port Forwarding\n-   LocalHost\n-   SSH (Copy/Paste SSH)\n-   Vim (Terminal editors) -->","metadata":{"source":"https://www.gitpod.io/docs/introduction/learn-gitpod","loc":{"lines":{"from":25,"to":50}}}}],["990",{"pageContent":"---\nsection: learn-gitpod\ntitle: One workspace per task\ndescription: Learn how you can use one Gitpod workspace per task to keep your development environments clean and focused.\n---\n\n# One workspace per task\n\nOn any given day, you may be involved in tasks such as the following:\n\n-   Implement a new feature\n-   Fix a bug\n-   Review a pull/merge request\n-   Pair-program with a team member\n-   Browse an open source project's source code\n\nFor each of these tasks, you start a clean, ephemeral Gitpod workspace. You can even start **multiple workspaces in parallel**. For example, while you're working on a feature, you can start a second workspace to review a production hotfix. When the review is complete, you close the browser tab of that workspace and continue to work on your feature. This works for any GitLab, GitHub or Bitbucket project.\n\nYou can learn more about the [Life of a workspace](/docs/configure/workspaces/workspace-lifecycle)\n\n`youtube: n7Ca3jHFtZg`","metadata":{"source":"https://www.gitpod.io/docs/introduction/learn-gitpod/one-workspace-per-task","loc":{"lines":{"from":1,"to":21}}}}],["991",{"pageContent":"## Gitpod vs. local development\n\nA Gitpod workspace is similar to your local developer environment, except for two key differentiators:\n\n1. It is configured as code\n1. It is ephemeral and only lives for as long as you work on a task\n\n### Configuration vs. manual setup\n\nYour project's `.gitpod.yml` and optional `.gitpod.Dockerfile` files control what tools will be available in your Gitpod workspace. Both files are version-controlled and let you monitor changes to the developer environment over time. There is no longer a need to `@channel` in your team's communication software to tell everyone to upgrade their version of Node.js, only to find out that some people were on vacation and didn't see the message.","metadata":{"source":"https://www.gitpod.io/docs/introduction/learn-gitpod/one-workspace-per-task","loc":{"lines":{"from":23,"to":32}}}}],["992",{"pageContent":"### Ephemeral vs. long-lived\n\nThanks to the fact that Gitpod workspaces are configured as code, you can start and stop them as frequently as you want. You know that each workspace has the tools it needs and even more importantly, has the latest code from your default branch checked out! You no longer have to pull the latest default branch a few times per day because each time you start a new workspace, it has the latest code already available.","metadata":{"source":"https://www.gitpod.io/docs/introduction/learn-gitpod/one-workspace-per-task","loc":{"lines":{"from":34,"to":36}}}}],["993",{"pageContent":"---\nsection: ides-and-editors\ntitle: Browser Terminal\n---\n\n# Browser Terminal\n\nA terminal running in your browser to edit code in your Gitpod workspaces.\n\nWhilst JetBrains IDEs and VS Code both have built-in terminals, using the browser terminal is more minimal and flexible for both full time editing with tools like Vim or for quick edits like running `git` commands on a pull request. Use the [Gitpod CLI](/docs/references/gitpod-cli) to access your ports and tasks, and [Dotfiles](/docs/configure/user-settings/dotfiles) to customize the experience. Every new tab will open a new shell session.\n\nIf you're looking to open a terminal on desktop, see [Command Line (SSH)](/docs/references/ides-and-editors/command-line).\n\n![Browser Terminal](/images/docs/browser-terminal.webp)","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/browser-terminal","loc":{"lines":{"from":1,"to":14}}}}],["994",{"pageContent":"## Managing workspace tasks\n\nIf you have defined tasks in your `.gitpod.yml` you can view and access those tasks using the command [`gp tasks`](/docs/references/gitpod-cli#tasks). You can see all your running tasks with `gp tasks list` and attach a task with `gp tasks attach` to view its logs. Use `gp tasks` in combination with tools like [tmux](https://github.com/tmux/tmux/wiki), and [Zellij](https://zellij.dev/) to achieve a highly customized experience.\n\n> **Note:** Layout configuration such as `openMode` (e.g. `split-right`) are not supported.\n\n## Managing workspace ports\n\nYou can also view and manage ports with the command [`gp ports`](/docs/references/gitpod-cli#ports). To see open workspace ports, run [`gp ports list`](/docs/references/gitpod-cli#ports).\n\n> **Note**: `gp preview` and `gp preview --external` have the same effect with the Browser Terminal, because split-view is not supported in a browser terminal.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/browser-terminal","loc":{"lines":{"from":16,"to":26}}}}],["995",{"pageContent":"## FAQs\n\n### Can I view multiple terminals at the same time? e.g. split windows.\n\nTo split your terminal into different panes, we recommend `tmux`, which enables you to tile your terminal into multiple views. See [Dotfiles](/docs/configure/user-settings/dotfiles) for instructions on how to install tooling across all of your Gitpod workspaces. To create a new terminal process, you can open a new tab with the same URL. Opening a new tab will create a new terminal process in the same workspace.\n\nSee: [A beginner's guide to tmux | Red Hat](https://www.redhat.com/sysadmin/introduction-tmux-linux) for more.\n\n### Can I use different shells?\n\nYes, you can use different shells. The default shell is `bash`.\n\nYou can change the shell in your [Dotfiles](/docs/configure/user-settings/dotfiles).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/browser-terminal","loc":{"lines":{"from":28,"to":40}}}}],["996",{"pageContent":"### Can I use different shells?\n\nYes, you can use different shells. The default shell is `bash`.\n\nYou can change the shell in your [Dotfiles](/docs/configure/user-settings/dotfiles).\n\n### What tools are available?\n\nThe set of tools available will depend on the tools that are included in your [Workspace image](/docs/configure/workspaces/workspace-image) and the tools that you install through your [Dotfiles](/docs/configure/user-settings/dotfiles).\n\n---\n\nGot feedback? See [issue #17724](https://github.com/gitpod-io/gitpod/issues/17724).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/browser-terminal","loc":{"lines":{"from":40,"to":52}}}}],["997",{"pageContent":"---\nsection: ides-and-editors\ntitle: Command Line (SSH)\n---\n\n# Command Line (SSH)\n\nYou can directly access your workspace via SSH for editing code directly using a [command-line editor](/docs/references/ides-and-editors/command-line), such as Vim & Emacs or for connecting SSH supported applications such as a database client.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/command-line","loc":{"lines":{"from":1,"to":8}}}}],["998",{"pageContent":"## Workspace SSH approaches\n\nThere are two ways to access a workspace via SSH using an SSH key or an Access Token.\n\n![Copy SSH key from modal](/images/docs/ssh-key-modal-dark-light-theme.png)\n![Copy SSH key from modal](/images/docs/ssh-key-modal-dark-theme.png)\n\n1. **SSH Key** (recommended) - By creating your own public/private SSH key pair, and uploading the public key to Gitpod you can directly SSH into a Gitpod workspace. Uploading a public key means that you do not need to keep re-visiting the Gitpod dashboard to retrieve an SSH command. It is also a more secure approach. See [configure SSH](/docs/configure/user-settings/ssh) for more.\n\n2. **Access Token** - Alternatively, you can access a workspace using the copy/paste SSH command. This approach uses an access token which is reset on every workspace start. This approach is useful for quick SSH access, or when installing an SSH key locally is not possible, such as on some devices.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/command-line","loc":{"lines":{"from":10,"to":19}}}}],["999",{"pageContent":"## SSH key Access\n\n> **Note:** You must upload a public key to Gitpod before you can access your workspace using an SSH key. See [configure SSH](/docs/configure/user-settings/ssh) for more.\n\nTo access a workspace using an SSH Key:\n\n1. Visit [your workspace list](https://gitpod.io/workspaces) in Gitpod\n2. View a running Gitpod workspace and click the more actions menu\n3. Select \"connect via SSH\"\n4. Copy paste the selected command\n\n<br/>\n\n![Accessing an SSH key from the workspace list](/images/docs/ssh-workspace-list-dark-theme.png)\n![Accessing an SSH key from the workspace list](/images/docs/ssh-workspace-list-light-theme.png)\n\n<br/>\n\n![SSH Key access via modal](/images/docs/ssh-key-modal-dark-light-theme.png)\n![SSH Key access via modal](/images/docs/ssh-key-modal-dark-theme.png)\n\nYou can also access the SSH connection string from the workspace start page, which is shown to users who have selected a desktop IDE or editor as their [preference](https://gitpod.io/preferences).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/command-line","loc":{"lines":{"from":21,"to":42}}}}],["1000",{"pageContent":"You can also access the SSH connection string from the workspace start page, which is shown to users who have selected a desktop IDE or editor as their [preference](https://gitpod.io/preferences).\n\n![SSH to a workspace via the workspace splash page](/images/docs/ssh-connect-splash-dark-theme.png)\n![SSH to a workspace via the workspace splash page](/images/docs/ssh-connect-splash-light-theme.png)","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/command-line","loc":{"lines":{"from":42,"to":45}}}}],["1001",{"pageContent":"## Access Token SSH\n\nYou can currently copy/paste a simple SSH command to get command line access to your workspace from the Gitpod dashboard.\n\n1. Visit [your workspace list](https://gitpod.io/workspaces) in Gitpod\n2. View a running Gitpod workspace and click the more actions menu\n3. Select \"connect via SSH\"\n4. Navigate to the \"Access Token\" tab\n5. Copy paste the selected command\n\n<br/>\n\n![Accessing an SSH key from the workspace list](/images/docs/ssh-workspace-list-dark-theme.png)\n![Accessing an SSH key from the workspace list](/images/docs/ssh-workspace-list-light-theme.png)\n\n<br/>\n\n![SSH via access token from the workspace list](/images/docs/ssh-accesss-modal-dark-theme.png)\n![SSH via access token from the workspace list](/images/docs/ssh-accesss-modal-light-theme.png)\n\nYou can also access the SSH connection string from the workspace start page, which is shown to users who have selected a desktop IDE or editor as their [preference](https://gitpod.io/preferences).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/command-line","loc":{"lines":{"from":47,"to":67}}}}],["1002",{"pageContent":"You can also access the SSH connection string from the workspace start page, which is shown to users who have selected a desktop IDE or editor as their [preference](https://gitpod.io/preferences).\n\n![SSH to a workspace via the workspace splash page](/images/docs/ssh-connect-splash-dark-theme.png)\n![SSH to a workspace via the workspace splash page](/images/docs/ssh-connect-splash-light-theme.png)","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/command-line","loc":{"lines":{"from":67,"to":70}}}}],["1003",{"pageContent":"## SSH via Local Companion\n\n> **Note:** It is possible to access your Gitpod workspaces via the command line using [local companion](/docs/references/ides-and-editors/local-companion), however access using an SSH key is the preferred approach.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/command-line","loc":{"lines":{"from":97,"to":99}}}}],["1004",{"pageContent":"---\nsection: ides-and-editors\ntitle: CLion\n---\n\n<!--\n  This document is auto generated from generators/ide/jb-product.md\n  Edit this file instead and run `yarn generate:jb`to apply.\n-->\n\n<!-- prettier-ignore -->\n# CLion\n\n> {title} is currently in [Beta](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/6576).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/clion","loc":{"lines":{"from":1,"to":14}}}}],["1005",{"pageContent":"## Getting started","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/clion","loc":{"lines":{"from":16,"to":16}}}}],["1006",{"pageContent":"1. **Install [JetBrains Gateway](https://www.jetbrains.com/help/clion/remote-development-a.html#gateway)** - With the [JetBrains Gateway and Gitpod](/docs/integrations/jetbrains-gateway) plugin you can create and manage your latest 20 Gitpod workspaces.\n2. **Install the Gitpod plugin** - Open JetBrains Gateway and you'll see the Gitpod logo on the main page. Click \"install\" to install the [Gitpod plugin](https://plugins.jetbrains.com/plugin/18438-gitpod-gateway) for JetBrains Gateway.\n3. **Update your Gitpod preferences** - Select {title} on the [Gitpod preferences page](https://gitpod.io/preferences) which will set {title} as your default IDE for future workspace starts.\n4. **Start (or restart) your workspace** - Either start a workspace directly from within the [JetBrains Gateway](/docs/integrations/jetbrains-gateway) via the Gitpod plugin **OR** open a new workspace directly in Gitpod where on workspace start you will be prompted to open {title} for that workspace.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/clion","loc":{"lines":{"from":18,"to":21}}}}],["1007",{"pageContent":"<figure>\n  <video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" src=\"/images/editors/select-jetbrains-ide.webm\" type=\"video/webm\"></video>\n  <figcaption>Updating Gitpod IDE preferences to {title}</figcaption>\n</figure>\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Opening a JetBrains IDE from Gitpod\" src=\"/images/editors/opening-the-thin-jetbrains-client.webm\" type=\"video/webm\"></video>\n    <figcaption>Opening a JetBrains IDE from Gitpod</figcaption>\n</figure>\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Updating the Gitpod plugin in JetBrains Gateway\" src=\"/images/editors/update-jetbrains-gateway-settings.webm\" type=\"video/webm\"></video>\n    <figcaption>Updating the Gitpod plugin in JetBrains Gateway</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/clion","loc":{"lines":{"from":23,"to":36}}}}],["1008",{"pageContent":"<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Opening a JetBrains IDE from Gateway\" src=\"/images/editors/open-from-jetbrains-gateway.webm\" type=\"video/webm\"></video>\n    <figcaption>Opening a JetBrains IDE from Gateway</figcaption>\n</figure>\n\n**Important:** You must restart any started workspaces for your IDE preferences to take effect.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/clion","loc":{"lines":{"from":38,"to":43}}}}],["1009",{"pageContent":"## Install Plugins\n\n> This section relates to plugin management when using JetBrains IDEs in a remote development context. For information on regular plugin management, refer to <a href=\"https://www.jetbrains.com/help/clion/managing-plugins.html\" target=\"_blank\">{title} docs</a>.\n\nUnlike with regular development, JetBrains [Remote development](https://www.jetbrains.com/help/clion/remote-development-overview.html#defs) with {title} allows users to install plugins in different locations:","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/clion","loc":{"lines":{"from":45,"to":49}}}}],["1010",{"pageContent":"-   [**{title} backend plugins**](#install-on-title-backend) - The JetBrains {title} backend runs within the remote Gitpod workspace. Backend plugins contribute functionality for IDE experiences relating to the filesystem, tools or languages and frameworks. When installed, **a backend plugin only applies to the currently running Gitpod workspace** and is not associated with a user. However, a plugin can be [preconfigured for all users of a repository](#preconfigure-for-repository) so that the plugin is enabled with every workspace start. It is not currently possible to install a backend plugin that applies to all workspaces of a Gitpod user or organization.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/clion","loc":{"lines":{"from":51,"to":51}}}}],["1011",{"pageContent":"-   [**JetBrains Client plugins**](#install-on-jetbrains-client) - The JetBrains client runs on the users local machine and can be thought of as the user interface to the remote {title} backend. Client plugins are different to backend plugins as they contribute to the user interface aspect of the IDE experience (e.g. keyboard shortcuts and themes). Once installed, **a client plugin is enabled for all Gitpod workspaces the user opens** (if the workspace is running the exact same version of the {title} backend where the plugin was initially installed).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/clion","loc":{"lines":{"from":52,"to":52}}}}],["1012",{"pageContent":"-   [**JetBrains Gateway plugins**](/docs/integrations/jetbrains-gateway#getting-started) - The JetBrains Gateway is an application downloaded onto a users local machine which allows users to start JetBrains Clients that are compatible with the {title} backend, running in a Gitpod workspace. JetBrains Gateway plugins are installed directly in JetBrains Gateway and contribute to remote development connection experiences (e.g. the [Gitpod JetBrains Gateway](https://plugins.jetbrains.com/plugin/18438-gitpod-gateway) plugin).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/clion","loc":{"lines":{"from":53,"to":53}}}}],["1013",{"pageContent":"### Install on JetBrains Client\n\nThe JetBrains client runs on the users local machine and can be thought of as the user interface to the remote {title} backend. Client plugins contribute to the user interface aspect of the IDE experience (e.g. keyboard shortcuts and themes).\n\nOnce installed, **a client plugin is enabled for all Gitpod workspaces the user opens** (if the workspace is running the exact same version of the {title} backend where the plugin was initially installed).\n\nTo install a plugin on **JetBrains Client** follow these steps:\n\n-   In **JetBrains Client** open the IDE settings and select **Plugins**.\n-   Find the plugin in the **Marketplace** and click **Install**.\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Install a plugin on JetBrains Client\" src=\"/images/editors/install-local-jb-plugin.png\">\n    <figcaption>Install a plugin on JetBrains Client</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/clion","loc":{"lines":{"from":55,"to":69}}}}],["1014",{"pageContent":"### Install on {title} backend\n\nThe JetBrains {title} backend runs within the remote Gitpod workspace. Backend plugins contribute functionality requiring access to IDE experiences such as the remote filesystem (e.g. contributing support of languages and frameworks).\n\nWhen installed, **a backend plugin only applies to the currently running Gitpod workspace** and is not associated with a user. However, a plugin can be [preconfigured for all users of a repository](#preconfigure-for-repository) so that the plugin is enabled with every workspace start.\n\nIt is not currently possible to install a backend plugin that applies to all workspaces of a Gitpod user or organization.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/clion","loc":{"lines":{"from":71,"to":77}}}}],["1015",{"pageContent":"#### Install for your current workspace\n\nYou can install a plugin only for **your current workspace** following these steps:\n\n-   In **JetBrains Client** open the IDE settings and select **Plugins On Host**.\n-   Find the plugin in the **Marketplace** and click **Install**.\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Install a plugin on {title} backend\" src=\"/images/editors/install-remote-jb-plugin.png\">\n    <figcaption>Install a plugin on {title} backend</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/clion","loc":{"lines":{"from":79,"to":89}}}}],["1016",{"pageContent":"#### Preconfigure for repository\n\n> JetBrains plugin support is currently in [Beta](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/6576).\n\nYou can share a plugin on **{title} backend** with everybody working on the repository by adding it to [.gitpod.yml](/docs/references/gitpod-yml) and pushing to your Git repository.\nEach workspace is preconfigured with plugins from the `gitpod.yml` configuration file. For example:\n\n```yml\njetbrains:\n    clion:\n        plugins:\n            - zielu.gittoolbox\n            - izhangzhihao.rainbow.brackets\n```\n\nYou can find the **pluginId** on the [JetBrains Marketplace](https://plugins.jetbrains.com) page:\n\n-   Find a page of the required plugin.\n-   Select the **Versions** tab.\n-   Click any version to copy the **pluginId** (short name such as `org.rust.lang`) of the plugin you want to install.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/clion","loc":{"lines":{"from":91,"to":110}}}}],["1017",{"pageContent":"#### Install for your user\n\nIt is not yet possible to install plugins on **{title} backend** for your user to share across all your Gitpod workspaces.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/clion","loc":{"lines":{"from":112,"to":114}}}}],["1018",{"pageContent":"## Configure JVM options\n\n> Configuration of JVM options is currently in [Alpha](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/8704).\n\nYou can adjust JVM options for {title} backend, especially if you want to increase the `-Xmx` memory size. For example:\n\n```yml\njetbrains:\n    clion:\n        vmoptions: '-Xmx4g'\n```\n\nFor more detailed information on JVM options, refer to [Common JVM Options](https://www.jetbrains.com/help/clion/tuning-the-ide.html#common-jvm-options) from JetBrains documentation.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/clion","loc":{"lines":{"from":116,"to":128}}}}],["1019",{"pageContent":"## Configure IDE settings\n\n> **Feedback needed:** The JetBrains Gitpod integration is currently beta. Gitpod [continues to collaborate with JetBrains](https://www.gitpod.io/blog/gitpod-jetbrains). The below shows how you can configure global settings with JetBrains. To leave feedback on the approach, please see this GitHub issue: [#6576](https://github.com/gitpod-io/gitpod/issues/6576). Also note that JetBrains is working on [comprehensive settings sync functionality](https://youtrack.jetbrains.com/issue/RDCT-1/Settings-synchronization).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/clion","loc":{"lines":{"from":130,"to":132}}}}],["1020",{"pageContent":"When running {title} locally, the JetBrains IDE applies [global settings](https://www.jetbrains.com/help/clion/configuring-project-and-ide-settings.html) to all projects on your machine. However when running in a remote context using [JetBrains Gateway](/docs/integrations/jetbrains-gateway), it's important to note that some IDE settings are configured on the [JetBrains Client](#on-jetbrains-client) and others in the [{title} backend](#on-title-backend) running in your Gitpod [Workspace](/docs/configure/workspaces). See below instructions for more.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/clion","loc":{"lines":{"from":134,"to":134}}}}],["1021",{"pageContent":"### On JetBrains Client\n\nIDE Settings that are configured on the JetBrains Client are stored on your local machine and don't have `On Host` label in the IDE settings. These IDE settings are reused if the workspace is running the exact same version of the {title} backend where the settings were initially configured.\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Configure IDE settings on JetBrains client\" src=\"/images/editors/jb-client-configure-settings-client.webp\">\n    <figcaption>JetBrains client settings don't have <code>On Host</code> label.</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/clion","loc":{"lines":{"from":136,"to":143}}}}],["1022",{"pageContent":"### On {title} backend\n\nSettings configured on {title} backend are stored in a Gitpod workspace and have `On Host` label in the IDE settings.\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Configure IDE settings on JetBrains client\" src=\"/images/editors/jb-backend-configure-settings.webp\">\n    <figcaption>{title} backend settings have `On Host` label.</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/clion","loc":{"lines":{"from":145,"to":152}}}}],["1023",{"pageContent":"### Configure IDE settings per project\n\nSome IDE settings cannot be configured via [environment variables](/docs/configure/projects/environment-variables#environment-variables) or through setting [vm options](#configure-jvm-options). These settings can only be set via the UI of JetBrains client, and must be manually copied to be syned between workspaces. The below steps detail how to configure your IDE settings for all the users of a given Gitpod project:\n\n**Step 1: Manually use JetBrains UI to configure settings** - Set your IDE settings as you normally would, using the JetBrains UI.\n\n**Step 2: Find generated IDE settings** - You will need to manually find any global settings generated by JetBrains backend within the following path: `/workspace/.config/JetBrains<-latest>/RemoteDev-/<your-project-name>/options`","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/clion","loc":{"lines":{"from":154,"to":160}}}}],["1024",{"pageContent":"**Step 3:** Move any relevant settings manually to a persistent location within your Gitpod project. Either via a [Workspace Image](/docs/configure/workspaces/workspace-image), or persisted in the version control of your project, for example by committing settings data to GitHub.\n\n**Include relevant IDE settings in your Workspace Image**\n\n-   `/home/gitpod/.gitpod/jetbrains/options` - This location applies settings to all JetBrains products (IntelliJ IDEA, GoLang, etc).\n-   `/home/gitpod/.gitpod/jetbrains/clion/options` - This location will apply settings only to the given IDE, e.g. {title}.\n\n**Commit relevant IDE settings to source control**\n\n-   `/workspace/<your-project-name>/.gitpod/jetbrains/options` - This location applies settings to all JetBrains products (IntelliJ IDEA, GoLang, etc).\n-   `/workspace/<your-project-name>/.gitpod/jetbrains/clion/options` - This location will apply settings only to the given IDE, e.g. {title}.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/clion","loc":{"lines":{"from":162,"to":172}}}}],["1025",{"pageContent":"For any further changes to your IDE settings, you will need to follow the above steps again.\n\n> **Note:** When locating and applying IDE settings, Gitpod will read the locations specified above in priority order. The locations specified first are overriden by the locations specified later.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/clion","loc":{"lines":{"from":174,"to":176}}}}],["1026",{"pageContent":"### Configure IDE settings per user\n\nTo configure IDE settings for your user only, and not all those using a project.\n\nFollow the instructions for [configuring IDE settings per project](#configure-ide-settings-per-project), but instead use [.dotfiles](/docs/configure/user-settings/dotfiles#dotfiles) rather than a workspace image or source control to store your IDE settings.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/clion","loc":{"lines":{"from":178,"to":182}}}}],["1027",{"pageContent":"## Indexing using Prebuilds\n\n> JetBrains Prebuilds is currently in [Alpha](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/6576).\n\nWhen you open the project {title} starts indexing to load modules and\nenable the core functionality like code completion and navigation.\nDepending on the size of your project indexing speed can vary significantly.\n\nYou can speed up the indexing of a project by applying these [general recommendations](https://www.jetbrains.com/help/clion/performance-tuning-tips.html).\nGitpod prebuilds allow you to improve it further by indexing before you start a new workspace.\n\nTo leverage it:\n\n-   configure prebuilds for your repository, refer to [Prebuilds](/docs/configure/projects/prebuilds);\n-   enable indexing for {title} in prebuilds by editing [.gitpod.yml](/docs/references/gitpod-yml) in your repository:\n\n```yml\njetbrains:\n    clion:\n        prebuilds:\n            version: stable","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/clion","loc":{"lines":{"from":184,"to":204}}}}],["1028",{"pageContent":"```\n\n-   push changes to your Git repository to apply.\n\nThe `version` property allows you to control whether to index for `stable`, `latest`, or `both` versions of {title} compatible with Gitpod.\nUsers can switch between `stable` and `latest` versions of {title} on the [user preferences](https://gitpod.io/preferences) page.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/clion","loc":{"lines":{"from":205,"to":210}}}}],["1029",{"pageContent":"## Workspace performance\n\nWhen using a Gitpod workspace you might experience performance issues caused by:\n\n-   An application using more resources than expected\n-   Resource consumption in adjacent containers running on the workspace node.\n\nIn your JetBrains IDE within the JetBrains Gateway [Backend Control Center](https://www.jetbrains.com/help/idea/work-inside-remote-project.html#control_center) you can find two metrics relating to your running workspace: `Workspace CPU` and `Workspace Memory`.\n\nThe remaining metrics you can find in the Backend Control Center regarding the node that your workspace is running on, and not the workspace itself.\n\n> **Note:** Performance information shown in the Backend Control Center is the same as the information that is shown when running the command [`gp top`](/docs/references/gitpod-cli#top) in your workspace, see the [Command Line Interface](/docs/references/gitpod-cli) documentation for more.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/clion","loc":{"lines":{"from":212,"to":223}}}}],["1030",{"pageContent":"![jetbrains performance](/images/jetbrains-gateway/jetbrains-performance-center.png)","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/clion","loc":{"lines":{"from":225,"to":225}}}}],["1031",{"pageContent":"## FAQs\n\n-   For the questions about supported IDEs and Editors in Gitpod, refer to [FAQs](/docs/references/ides-and-editors/faqs).\n\n-   For the general questions about JetBrains Remote Development, refer to refer to the general IDE <a href=\"https://www.jetbrains.com/help/clion/faq-about-remote-development.html\" target=\"_blank\">{title} FAQ</a>.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/clion","loc":{"lines":{"from":227,"to":231}}}}],["1032",{"pageContent":"### Are there any JetBrains optimizations I can make if my workspace is slow?\n\nDebugging performance can be challenging, as performance issues can depend on many factors such as how Gitpod is configured (if you're operating Gitpod on Self-Hosted). However, there are some ways you can gather performance information and optimise your JetBrains IDE setup with Gitpod:\n\n1. Firstly, to gather information on performance, you can [view workspace performance metrics from within the IDE](/docs/references/ides-and-editors/intellij#workspace-performance) in the Backend Control Center, or by using [`gp top`](/docs/references/gitpod-cli#top).\n2. You may also want to try adjusting the Max Heap Size allocated to the JetBrains Backend in the Settings tab of the Backend Control Center. If updating this setting helps your performance, you can set the `vmoptions` value for your JetBrains IDE in your `.gitpod.yml`.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/clion","loc":{"lines":{"from":233,"to":238}}}}],["1033",{"pageContent":"> **Note:** If the performance metrics show that your workspace is hitting its resource limits, and you are using Gitpod Self-Hosted, it might make sense to consider changing the resource configuration for your workspaces. This can be done via a [config-patch](/docs/configure/self-hosted/latest/config-patches). Configuring workspace resources is not yet available on SaaS.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/clion","loc":{"lines":{"from":240,"to":240}}}}],["1034",{"pageContent":"## Troubleshooting\n\n-   [What should I do if JetBrains Gateway and Gitpod aren’t working?](/docs/help/troubleshooting#what-should-i-do-if-jetbrains-gateway-and-gitpod-arent-working)\n-   [Gitpod logs in JetBrains Client](/docs/help/troubleshooting#gitpod-logs-in-jetbrains-client)\n-   [Gitpod logs in JetBrains Gateway](/docs/help/troubleshooting#gitpod-logs-in-jetbrains-gateway)","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/clion","loc":{"lines":{"from":242,"to":246}}}}],["1035",{"pageContent":"---\nsection: ides-and-editors\ntitle: FAQs\n---\n\n# FAQs\n\n## Is there a limit of IDE/editor connections to Gitpod?\n\nThere is no hard-limit about how many IDE/editors can be connected to a running Gitpod workspace. All connected IDEs/editors will have access to the same underlying file system and directories.\n\n## What version of VS Code runs in Gitpod (in the browser)?\n\nVS Code in the browser in Gitpod uses a fork of [VS Code](https://github.com/microsoft/vscode) called [openvscode-server](https://github.com/gitpod-io/openvscode-server). Gitpod actively monitors VS Code's release cycle, and releases the latest version of VS Code shortly after the upstream repository is updated. You can find more information about which version of VS Code is running in the browser by navigating to \"Help > About\" from a running Gitpod workspace.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/faqs","loc":{"lines":{"from":1,"to":14}}}}],["1036",{"pageContent":"## Does Gitpod VS Code settings sync work with other products (e.g. Codespaces)?\n\nGitpod doesn't currently support settings sync with other hosted VS Code environments, such as [Codespaces](https://github.com/features/codespaces) or [vscode.dev](https://vscode.dev/).\n\n## My VS Code extensions are not syncing, what should I do?\n\n1. When installing an extension in Gitpod using the `Install (Do Not Sync)` option.\n2. Extensions defined in [`gitpod.yml`](https://www.gitpod.io/docs/references/gitpod-yml/)\n3. Extensions manually installed from a `vsix` file","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/faqs","loc":{"lines":{"from":16,"to":24}}}}],["1037",{"pageContent":"## Can I use both a desktop IDE and a browser editor in Gitpod?\n\nYes, you can. Both desktop and browser IDEs/editors have full access to files and directories within the workspace. So, when you connect to your Gitpod workspace from your Desktop you can also access your workspace via your browser. This means browser-based editing can either be used as your first-choice editor, or as a \"fall back\" alternative option for when you want to make edits on the move. With Gitpod, where and how you edit your code is very flexible.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/faqs","loc":{"lines":{"from":26,"to":28}}}}],["1038",{"pageContent":"## What is the preferred IDE/editor for Gitpod?\n\nThere are many supported ways to edit your code in Gitpod, there is no preferred experience. Gitpod is intended to be flexible to allow you and your team to use the tools you are most familiar and comfortable with. You can edit code in Gitpod using:\n\n1. [JetBrains IDE's](/docs/references/ides-and-editors) via [JetBrains Gateway](/docs/integrations/jetbrains-gateway)\n2. [VS Code in the browser](/docs/references/ides-and-editors/vscode-browser) and [VS Code on desktop](/docs/references/ides-and-editors/vscode)\n3. [Command-line](/docs/references/ides-and-editors/command-line) based editors such as Vim\n\nPlease see the [IDEs & editors](/docs/references/ides-and-editors) documentation for more details.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/faqs","loc":{"lines":{"from":30,"to":38}}}}],["1039",{"pageContent":"## How do desktop and browser differ regarding performance?\n\nUsing a desktop editor like JetBrains or VS Code Desktop, files persist in the Gitpod workspace, however a copy of files is fetched to the client to improve performance. All desktop clients communicate via the SSH protocol. Most processing tasks like intellisense and auto-completion are executed in the server (the Gitpod workspace). You can optimize your in-terminal typing experience using [local echo](https://code.visualstudio.com/updates/v1_51#_local-echo) or [typeahead](https://www.jetbrains.com/help/rider/Advanced_settings.html#advanced_terminal).\n\n## Do I need a license to use JetBrains and Gitpod?\n\nThe licensing of Remote Development is handled on the local machine and is covered by your existing active IDE license. See [JetBrains documentation](https://www.jetbrains.com/help/idea/remote-development-starting-page.html#licensing) for more.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/faqs","loc":{"lines":{"from":40,"to":46}}}}],["1040",{"pageContent":"## Will Gitpod support all the JetBrains IDE's?\n\nYes, the plan is to eventually support all of the JetBrains IDE's. Please refer to the [Gitpod roadmap](https://www.gitpod.io/roadmap) for future updates.\n\n## Does Gitpod support the IntelliJ IDEA Community edition?\n\nNo, JetBrains Remote Development and Gateway are available only in the IntelliJ IDEA Ultimate edition, please refer to [IntelliJ IDEA FAQ](https://www.jetbrains.com/help/idea/faq-about-remote-development.html#community).\n\n## Will Gitpod support JetBrains Fleet?\n\n[JetBrains Fleet](https://www.jetbrains.com/fleet/) is a next-generation IDE from JetBrains. The currently supported method of using JetBrains IDE's with Gitpod is on desktop via [JetBrains Gateway](/docs/integrations/jetbrains-gateway), please refer to our documentation for current [IDE and editor support](/docs/references/ides-and-editors) and the [Gitpod roadmap](https://www.gitpod.io/roadmap) for future updates.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/faqs","loc":{"lines":{"from":48,"to":58}}}}],["1041",{"pageContent":"## Can I use JetBrains Projector with Gitpod?\n\nGitpod does not officially support [JetBrains Projector](https://lp.jetbrains.com/projector/). Gitpod has support for [JetBrains Gateway](/docs/integrations/jetbrains-gateway), which is the primary tool for remote development when using JetBrains IDE's.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/faqs","loc":{"lines":{"from":60,"to":62}}}}],["1042",{"pageContent":"---\nsection: ides-and-editors\ntitle: GoLand\n---\n\n<!--\n  This document is auto generated from generators/ide/jb-product.md\n  Edit this file instead and run `yarn generate:jb`to apply.\n-->\n\n<!-- prettier-ignore -->\n# GoLand\n\n> {title} is currently in [Beta](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/6576).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/goland","loc":{"lines":{"from":1,"to":14}}}}],["1043",{"pageContent":"## Getting started\n\n1. **Install [JetBrains Gateway](https://www.jetbrains.com/help/go/remote-development-a.html#gateway)** - With the [JetBrains Gateway and Gitpod](/docs/integrations/jetbrains-gateway) plugin you can create and manage your latest 20 Gitpod workspaces.\n2. **Install the Gitpod plugin** - Open JetBrains Gateway and you'll see the Gitpod logo on the main page. Click \"install\" to install the [Gitpod plugin](https://plugins.jetbrains.com/plugin/18438-gitpod-gateway) for JetBrains Gateway.\n3. **Update your Gitpod preferences** - Select {title} on the [Gitpod preferences page](https://gitpod.io/preferences) which will set {title} as your default IDE for future workspace starts.\n4. **Start (or restart) your workspace** - Either start a workspace directly from within the [JetBrains Gateway](/docs/integrations/jetbrains-gateway) via the Gitpod plugin **OR** open a new workspace directly in Gitpod where on workspace start you will be prompted to open {title} for that workspace.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/goland","loc":{"lines":{"from":16,"to":21}}}}],["1044",{"pageContent":"<figure>\n  <video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" src=\"/images/editors/select-jetbrains-ide.webm\" type=\"video/webm\"></video>\n  <figcaption>Updating Gitpod IDE preferences to {title}</figcaption>\n</figure>\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Opening a JetBrains IDE from Gitpod\" src=\"/images/editors/opening-the-thin-jetbrains-client.webm\" type=\"video/webm\"></video>\n    <figcaption>Opening a JetBrains IDE from Gitpod</figcaption>\n</figure>\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Updating the Gitpod plugin in JetBrains Gateway\" src=\"/images/editors/update-jetbrains-gateway-settings.webm\" type=\"video/webm\"></video>\n    <figcaption>Updating the Gitpod plugin in JetBrains Gateway</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/goland","loc":{"lines":{"from":23,"to":36}}}}],["1045",{"pageContent":"<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Opening a JetBrains IDE from Gateway\" src=\"/images/editors/open-from-jetbrains-gateway.webm\" type=\"video/webm\"></video>\n    <figcaption>Opening a JetBrains IDE from Gateway</figcaption>\n</figure>\n\n**Important:** You must restart any started workspaces for your IDE preferences to take effect.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/goland","loc":{"lines":{"from":38,"to":43}}}}],["1046",{"pageContent":"## Install Plugins\n\n> This section relates to plugin management when using JetBrains IDEs in a remote development context. For information on regular plugin management, refer to <a href=\"https://www.jetbrains.com/help/go/managing-plugins.html\" target=\"_blank\">{title} docs</a>.\n\nUnlike with regular development, JetBrains [Remote development](https://www.jetbrains.com/help/go/remote-development-overview.html#defs) with {title} allows users to install plugins in different locations:","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/goland","loc":{"lines":{"from":45,"to":49}}}}],["1047",{"pageContent":"-   [**{title} backend plugins**](#install-on-title-backend) - The JetBrains {title} backend runs within the remote Gitpod workspace. Backend plugins contribute functionality for IDE experiences relating to the filesystem, tools or languages and frameworks. When installed, **a backend plugin only applies to the currently running Gitpod workspace** and is not associated with a user. However, a plugin can be [preconfigured for all users of a repository](#preconfigure-for-repository) so that the plugin is enabled with every workspace start. It is not currently possible to install a backend plugin that applies to all workspaces of a Gitpod user or organization.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/goland","loc":{"lines":{"from":51,"to":51}}}}],["1048",{"pageContent":"-   [**JetBrains Client plugins**](#install-on-jetbrains-client) - The JetBrains client runs on the users local machine and can be thought of as the user interface to the remote {title} backend. Client plugins are different to backend plugins as they contribute to the user interface aspect of the IDE experience (e.g. keyboard shortcuts and themes). Once installed, **a client plugin is enabled for all Gitpod workspaces the user opens** (if the workspace is running the exact same version of the {title} backend where the plugin was initially installed).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/goland","loc":{"lines":{"from":52,"to":52}}}}],["1049",{"pageContent":"-   [**JetBrains Gateway plugins**](/docs/integrations/jetbrains-gateway#getting-started) - The JetBrains Gateway is an application downloaded onto a users local machine which allows users to start JetBrains Clients that are compatible with the {title} backend, running in a Gitpod workspace. JetBrains Gateway plugins are installed directly in JetBrains Gateway and contribute to remote development connection experiences (e.g. the [Gitpod JetBrains Gateway](https://plugins.jetbrains.com/plugin/18438-gitpod-gateway) plugin).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/goland","loc":{"lines":{"from":53,"to":53}}}}],["1050",{"pageContent":"### Install on JetBrains Client\n\nThe JetBrains client runs on the users local machine and can be thought of as the user interface to the remote {title} backend. Client plugins contribute to the user interface aspect of the IDE experience (e.g. keyboard shortcuts and themes).\n\nOnce installed, **a client plugin is enabled for all Gitpod workspaces the user opens** (if the workspace is running the exact same version of the {title} backend where the plugin was initially installed).\n\nTo install a plugin on **JetBrains Client** follow these steps:\n\n-   In **JetBrains Client** open the IDE settings and select **Plugins**.\n-   Find the plugin in the **Marketplace** and click **Install**.\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Install a plugin on JetBrains Client\" src=\"/images/editors/install-local-jb-plugin.png\">\n    <figcaption>Install a plugin on JetBrains Client</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/goland","loc":{"lines":{"from":55,"to":69}}}}],["1051",{"pageContent":"### Install on {title} backend\n\nThe JetBrains {title} backend runs within the remote Gitpod workspace. Backend plugins contribute functionality requiring access to IDE experiences such as the remote filesystem (e.g. contributing support of languages and frameworks).\n\nWhen installed, **a backend plugin only applies to the currently running Gitpod workspace** and is not associated with a user. However, a plugin can be [preconfigured for all users of a repository](#preconfigure-for-repository) so that the plugin is enabled with every workspace start.\n\nIt is not currently possible to install a backend plugin that applies to all workspaces of a Gitpod user or organization.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/goland","loc":{"lines":{"from":71,"to":77}}}}],["1052",{"pageContent":"#### Install for your current workspace\n\nYou can install a plugin only for **your current workspace** following these steps:\n\n-   In **JetBrains Client** open the IDE settings and select **Plugins On Host**.\n-   Find the plugin in the **Marketplace** and click **Install**.\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Install a plugin on {title} backend\" src=\"/images/editors/install-remote-jb-plugin.png\">\n    <figcaption>Install a plugin on {title} backend</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/goland","loc":{"lines":{"from":79,"to":89}}}}],["1053",{"pageContent":"#### Preconfigure for repository\n\n> JetBrains plugin support is currently in [Beta](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/6576).\n\nYou can share a plugin on **{title} backend** with everybody working on the repository by adding it to [.gitpod.yml](/docs/references/gitpod-yml) and pushing to your Git repository.\nEach workspace is preconfigured with plugins from the `gitpod.yml` configuration file. For example:\n\n```yml\njetbrains:\n    goland:\n        plugins:\n            - zielu.gittoolbox\n            - izhangzhihao.rainbow.brackets\n```\n\nYou can find the **pluginId** on the [JetBrains Marketplace](https://plugins.jetbrains.com) page:\n\n-   Find a page of the required plugin.\n-   Select the **Versions** tab.\n-   Click any version to copy the **pluginId** (short name such as `org.rust.lang`) of the plugin you want to install.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/goland","loc":{"lines":{"from":91,"to":110}}}}],["1054",{"pageContent":"#### Install for your user\n\nIt is not yet possible to install plugins on **{title} backend** for your user to share across all your Gitpod workspaces.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/goland","loc":{"lines":{"from":112,"to":114}}}}],["1055",{"pageContent":"## Configure JVM options\n\n> Configuration of JVM options is currently in [Alpha](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/8704).\n\nYou can adjust JVM options for {title} backend, especially if you want to increase the `-Xmx` memory size. For example:\n\n```yml\njetbrains:\n    goland:\n        vmoptions: '-Xmx4g'\n```\n\nFor more detailed information on JVM options, refer to [Common JVM Options](https://www.jetbrains.com/help/go/tuning-the-ide.html#common-jvm-options) from JetBrains documentation.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/goland","loc":{"lines":{"from":116,"to":128}}}}],["1056",{"pageContent":"## Configure IDE settings\n\n> **Feedback needed:** The JetBrains Gitpod integration is currently beta. Gitpod [continues to collaborate with JetBrains](https://www.gitpod.io/blog/gitpod-jetbrains). The below shows how you can configure global settings with JetBrains. To leave feedback on the approach, please see this GitHub issue: [#6576](https://github.com/gitpod-io/gitpod/issues/6576). Also note that JetBrains is working on [comprehensive settings sync functionality](https://youtrack.jetbrains.com/issue/RDCT-1/Settings-synchronization).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/goland","loc":{"lines":{"from":130,"to":132}}}}],["1057",{"pageContent":"When running {title} locally, the JetBrains IDE applies [global settings](https://www.jetbrains.com/help/go/configuring-project-and-ide-settings.html) to all projects on your machine. However when running in a remote context using [JetBrains Gateway](/docs/integrations/jetbrains-gateway), it's important to note that some IDE settings are configured on the [JetBrains Client](#on-jetbrains-client) and others in the [{title} backend](#on-title-backend) running in your Gitpod [Workspace](/docs/configure/workspaces). See below instructions for more.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/goland","loc":{"lines":{"from":134,"to":134}}}}],["1058",{"pageContent":"### On JetBrains Client\n\nIDE Settings that are configured on the JetBrains Client are stored on your local machine and don't have `On Host` label in the IDE settings. These IDE settings are reused if the workspace is running the exact same version of the {title} backend where the settings were initially configured.\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Configure IDE settings on JetBrains client\" src=\"/images/editors/jb-client-configure-settings-client.webp\">\n    <figcaption>JetBrains client settings don't have <code>On Host</code> label.</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/goland","loc":{"lines":{"from":136,"to":143}}}}],["1059",{"pageContent":"### On {title} backend\n\nSettings configured on {title} backend are stored in a Gitpod workspace and have `On Host` label in the IDE settings.\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Configure IDE settings on JetBrains client\" src=\"/images/editors/jb-backend-configure-settings.webp\">\n    <figcaption>{title} backend settings have `On Host` label.</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/goland","loc":{"lines":{"from":145,"to":152}}}}],["1060",{"pageContent":"### Configure IDE settings per project\n\nSome IDE settings cannot be configured via [environment variables](/docs/configure/projects/environment-variables#environment-variables) or through setting [vm options](#configure-jvm-options). These settings can only be set via the UI of JetBrains client, and must be manually copied to be syned between workspaces. The below steps detail how to configure your IDE settings for all the users of a given Gitpod project:\n\n**Step 1: Manually use JetBrains UI to configure settings** - Set your IDE settings as you normally would, using the JetBrains UI.\n\n**Step 2: Find generated IDE settings** - You will need to manually find any global settings generated by JetBrains backend within the following path: `/workspace/.config/JetBrains<-latest>/RemoteDev-GO/<your-project-name>/options`","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/goland","loc":{"lines":{"from":154,"to":160}}}}],["1061",{"pageContent":"**Step 3:** Move any relevant settings manually to a persistent location within your Gitpod project. Either via a [Workspace Image](/docs/configure/workspaces/workspace-image), or persisted in the version control of your project, for example by committing settings data to GitHub.\n\n**Include relevant IDE settings in your Workspace Image**\n\n-   `/home/gitpod/.gitpod/jetbrains/options` - This location applies settings to all JetBrains products (IntelliJ IDEA, GoLang, etc).\n-   `/home/gitpod/.gitpod/jetbrains/goland/options` - This location will apply settings only to the given IDE, e.g. {title}.\n\n**Commit relevant IDE settings to source control**\n\n-   `/workspace/<your-project-name>/.gitpod/jetbrains/options` - This location applies settings to all JetBrains products (IntelliJ IDEA, GoLang, etc).\n-   `/workspace/<your-project-name>/.gitpod/jetbrains/goland/options` - This location will apply settings only to the given IDE, e.g. {title}.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/goland","loc":{"lines":{"from":162,"to":172}}}}],["1062",{"pageContent":"For any further changes to your IDE settings, you will need to follow the above steps again.\n\n> **Note:** When locating and applying IDE settings, Gitpod will read the locations specified above in priority order. The locations specified first are overriden by the locations specified later.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/goland","loc":{"lines":{"from":174,"to":176}}}}],["1063",{"pageContent":"### Configure IDE settings per user\n\nTo configure IDE settings for your user only, and not all those using a project.\n\nFollow the instructions for [configuring IDE settings per project](#configure-ide-settings-per-project), but instead use [.dotfiles](/docs/configure/user-settings/dotfiles#dotfiles) rather than a workspace image or source control to store your IDE settings.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/goland","loc":{"lines":{"from":178,"to":182}}}}],["1064",{"pageContent":"## Indexing using Prebuilds\n\n> JetBrains Prebuilds is currently in [Alpha](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/6576).\n\nWhen you open the project {title} starts indexing to load modules and\nenable the core functionality like code completion and navigation.\nDepending on the size of your project indexing speed can vary significantly.\n\nYou can speed up the indexing of a project by applying these [general recommendations](https://www.jetbrains.com/help/go/indexing.html).\nGitpod prebuilds allow you to improve it further by indexing before you start a new workspace.\n\nTo leverage it:\n\n-   configure prebuilds for your repository, refer to [Prebuilds](/docs/configure/projects/prebuilds);\n-   enable indexing for {title} in prebuilds by editing [.gitpod.yml](/docs/references/gitpod-yml) in your repository:\n\n```yml\njetbrains:\n    goland:\n        prebuilds:\n            version: stable","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/goland","loc":{"lines":{"from":184,"to":204}}}}],["1065",{"pageContent":"```\n\n-   push changes to your Git repository to apply.\n\nThe `version` property allows you to control whether to index for `stable`, `latest`, or `both` versions of {title} compatible with Gitpod.\nUsers can switch between `stable` and `latest` versions of {title} on the [user preferences](https://gitpod.io/preferences) page.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/goland","loc":{"lines":{"from":205,"to":210}}}}],["1066",{"pageContent":"## Workspace performance\n\nWhen using a Gitpod workspace you might experience performance issues caused by:\n\n-   An application using more resources than expected\n-   Resource consumption in adjacent containers running on the workspace node.\n\nIn your JetBrains IDE within the JetBrains Gateway [Backend Control Center](https://www.jetbrains.com/help/idea/work-inside-remote-project.html#control_center) you can find two metrics relating to your running workspace: `Workspace CPU` and `Workspace Memory`.\n\nThe remaining metrics you can find in the Backend Control Center regarding the node that your workspace is running on, and not the workspace itself.\n\n> **Note:** Performance information shown in the Backend Control Center is the same as the information that is shown when running the command [`gp top`](/docs/references/gitpod-cli#top) in your workspace, see the [Command Line Interface](/docs/references/gitpod-cli) documentation for more.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/goland","loc":{"lines":{"from":212,"to":223}}}}],["1067",{"pageContent":"![jetbrains performance](/images/jetbrains-gateway/jetbrains-performance-center.png)","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/goland","loc":{"lines":{"from":225,"to":225}}}}],["1068",{"pageContent":"## FAQs\n\n-   For the questions about supported IDEs and Editors in Gitpod, refer to [FAQs](/docs/references/ides-and-editors/faqs).\n\n-   For the general questions about JetBrains Remote Development, refer to refer to the general IDE <a href=\"https://www.jetbrains.com/help/go/faq-about-remote-development.html\" target=\"_blank\">{title} FAQ</a>.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/goland","loc":{"lines":{"from":227,"to":231}}}}],["1069",{"pageContent":"### Are there any JetBrains optimizations I can make if my workspace is slow?\n\nDebugging performance can be challenging, as performance issues can depend on many factors such as how Gitpod is configured (if you're operating Gitpod on Self-Hosted). However, there are some ways you can gather performance information and optimise your JetBrains IDE setup with Gitpod:\n\n1. Firstly, to gather information on performance, you can [view workspace performance metrics from within the IDE](/docs/references/ides-and-editors/intellij#workspace-performance) in the Backend Control Center, or by using [`gp top`](/docs/references/gitpod-cli#top).\n2. You may also want to try adjusting the Max Heap Size allocated to the JetBrains Backend in the Settings tab of the Backend Control Center. If updating this setting helps your performance, you can set the `vmoptions` value for your JetBrains IDE in your `.gitpod.yml`.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/goland","loc":{"lines":{"from":233,"to":238}}}}],["1070",{"pageContent":"> **Note:** If the performance metrics show that your workspace is hitting its resource limits, and you are using Gitpod Self-Hosted, it might make sense to consider changing the resource configuration for your workspaces. This can be done via a [config-patch](/docs/configure/self-hosted/latest/config-patches). Configuring workspace resources is not yet available on SaaS.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/goland","loc":{"lines":{"from":240,"to":240}}}}],["1071",{"pageContent":"## Troubleshooting\n\n-   [What should I do if JetBrains Gateway and Gitpod aren’t working?](/docs/help/troubleshooting#what-should-i-do-if-jetbrains-gateway-and-gitpod-arent-working)\n-   [Gitpod logs in JetBrains Client](/docs/help/troubleshooting#gitpod-logs-in-jetbrains-client)\n-   [Gitpod logs in JetBrains Gateway](/docs/help/troubleshooting#gitpod-logs-in-jetbrains-gateway)","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/goland","loc":{"lines":{"from":242,"to":246}}}}],["1072",{"pageContent":"---\nsection: ides-and-editors\ntitle: IDEs & Editors\n---\n\n<script lang=\"ts\">\n    import OpenGraph from \"$lib/components/open-graph.svelte\";\n</script>\n\n<OpenGraph\ndata={{\n    description:\n      \"Connect and integrate Gitpod workspaces with your favourite IDE or editor. VS Code Browser and Desktop. JetBrains. IntelliJ. GoLand. PhpStorm. PyCharm. Vim. Emacs. SSH.\",\n    title: \"Gitpod integrates with VS Code, JetBrains and SSH.\",\n    keywords: \"online IDEs, JetBrains, VS Code, IntelliJ, PHPStorm, PyCharm, Rider, RubyMine, WebStorm, CLion etc.\",\n  }}\n/>\n\n# IDEs & Editors","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors","loc":{"lines":{"from":1,"to":19}}}}],["1073",{"pageContent":"# IDEs & Editors\n\nIn line with [our ambition to \"remove all friction from the developer experience\"](https://www.notion.so/gitpod/Values-Attributes-2ed4c2f93c84499b98e3b5389980992e), Gitpod currently supports many popular IDE/editors e.g. JetBrains and VS Code through both the browser and on desktop. You can even use the command-line directly for editors like Vim (via SSH). There are many ways to configure your IDE/editor in Gitpod to match your preferred workflow or setup.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors","loc":{"lines":{"from":19,"to":21}}}}],["1074",{"pageContent":"## Connecting an IDE/editor to Gitpod\n\nThe three main ways to edit code or access a Gitpod workspace:\n\n1. **Browser** - Using [VS Code Browser](/docs/references/ides-and-editors/vscode-browser).\n2. **SSH** - Using an [SSH key](/docs/references/ides-and-editors/command-line#ssh-key-access) or an [Access Token](/docs/references/ides-and-editors/command-line#access-token-ssh).\n3. **Desktop** - Using [VS Code Desktop](ides-and-editors/vscode) or [JetBrains Gateway](/docs/integrations/jetbrains-gateway).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors","loc":{"lines":{"from":23,"to":29}}}}],["1075",{"pageContent":"### Supported IDE/editors\n\n-   [VS Code Browser](ides-and-editors/vscode-browser)\n-   [VS Code Desktop](ides-and-editors/vscode)\n-   [IntelliJ](ides-and-editors/intellij)\n-   [GoLand](ides-and-editors/goland)\n-   [PhpStorm](ides-and-editors/phpstorm)\n-   [PyCharm](ides-and-editors/pycharm)\n-   [RubyMine](ides-and-editors/rubymine)\n-   [WebStorm](ides-and-editors/webstorm)\n-   [Rider](ides-and-editors/rider)\n-   [CLion](ides-and-editors/clion)\n-   [Command Line (e.g. Vim)](ides-and-editors/command-line)","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors","loc":{"lines":{"from":31,"to":43}}}}],["1076",{"pageContent":"### Start a workspace with an IDE/editor\n\nYou can start a workspace with your favourite IDE/editor directly from [Gitpod Dashboard](https://gitpod.io/workspaces). You can do that from by clicking on the `New Workspace` button. Then, you can select the [context url](/docs/introduction/learn-gitpod/context-url), Editor and custom [workspace class](/docs/configure/workspaces/workspace-classes).\n\n<figure>\n<video onloadstart=\"this.playbackRate = 1.5;\" controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-2xl mt-x-small\" alt=\"Start Gitpod new workspace with options\" src=\"/images/docs/new-workspace-start-with-options.webm\" type=\"video/webm\"></video>\n    <figcaption>Open New Gitpod Workspace with your favourite IDE • <a href=\"https://gitpod.io/workspaces\">Gitpod Dashboard</a></figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors","loc":{"lines":{"from":45,"to":52}}}}],["1077",{"pageContent":"---\nsection: ides-and-editors\ntitle: IntelliJ IDEA\n---\n\n<!--\n  This document is auto generated from generators/ide/jb-product.md\n  Edit this file instead and run `yarn generate:jb`to apply.\n-->\n\n<!-- prettier-ignore -->\n# IntelliJ IDEA Ultimate\n\n> {title} is currently in [Beta](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/6576).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/intellij","loc":{"lines":{"from":1,"to":14}}}}],["1078",{"pageContent":"## Getting started","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/intellij","loc":{"lines":{"from":16,"to":16}}}}],["1079",{"pageContent":"1. **Install [JetBrains Gateway](https://www.jetbrains.com/help/idea/remote-development-a.html#gateway)** - With the [JetBrains Gateway and Gitpod](/docs/integrations/jetbrains-gateway) plugin you can create and manage your latest 20 Gitpod workspaces.\n2. **Install the Gitpod plugin** - Open JetBrains Gateway and you'll see the Gitpod logo on the main page. Click \"install\" to install the [Gitpod plugin](https://plugins.jetbrains.com/plugin/18438-gitpod-gateway) for JetBrains Gateway.\n3. **Update your Gitpod preferences** - Select {title} on the [Gitpod preferences page](https://gitpod.io/preferences) which will set {title} as your default IDE for future workspace starts.\n4. **Start (or restart) your workspace** - Either start a workspace directly from within the [JetBrains Gateway](/docs/integrations/jetbrains-gateway) via the Gitpod plugin **OR** open a new workspace directly in Gitpod where on workspace start you will be prompted to open {title} for that workspace.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/intellij","loc":{"lines":{"from":18,"to":21}}}}],["1080",{"pageContent":"<figure>\n  <video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" src=\"/images/editors/select-jetbrains-ide.webm\" type=\"video/webm\"></video>\n  <figcaption>Updating Gitpod IDE preferences to {title}</figcaption>\n</figure>\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Opening a JetBrains IDE from Gitpod\" src=\"/images/editors/opening-the-thin-jetbrains-client.webm\" type=\"video/webm\"></video>\n    <figcaption>Opening a JetBrains IDE from Gitpod</figcaption>\n</figure>\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Updating the Gitpod plugin in JetBrains Gateway\" src=\"/images/editors/update-jetbrains-gateway-settings.webm\" type=\"video/webm\"></video>\n    <figcaption>Updating the Gitpod plugin in JetBrains Gateway</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/intellij","loc":{"lines":{"from":23,"to":36}}}}],["1081",{"pageContent":"<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Opening a JetBrains IDE from Gateway\" src=\"/images/editors/open-from-jetbrains-gateway.webm\" type=\"video/webm\"></video>\n    <figcaption>Opening a JetBrains IDE from Gateway</figcaption>\n</figure>\n\n**Important:** You must restart any started workspaces for your IDE preferences to take effect.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/intellij","loc":{"lines":{"from":38,"to":43}}}}],["1082",{"pageContent":"## Install Plugins\n\n> This section relates to plugin management when using JetBrains IDEs in a remote development context. For information on regular plugin management, refer to <a href=\"https://www.jetbrains.com/help/idea/managing-plugins.html\" target=\"_blank\">{title} docs</a>.\n\nUnlike with regular development, JetBrains [Remote development](https://www.jetbrains.com/help/idea/remote-development-overview.html#defs) with {title} allows users to install plugins in different locations:","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/intellij","loc":{"lines":{"from":45,"to":49}}}}],["1083",{"pageContent":"-   [**{title} backend plugins**](#install-on-title-backend) - The JetBrains {title} backend runs within the remote Gitpod workspace. Backend plugins contribute functionality for IDE experiences relating to the filesystem, tools or languages and frameworks. When installed, **a backend plugin only applies to the currently running Gitpod workspace** and is not associated with a user. However, a plugin can be [preconfigured for all users of a repository](#preconfigure-for-repository) so that the plugin is enabled with every workspace start. It is not currently possible to install a backend plugin that applies to all workspaces of a Gitpod user or organization.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/intellij","loc":{"lines":{"from":51,"to":51}}}}],["1084",{"pageContent":"-   [**JetBrains Client plugins**](#install-on-jetbrains-client) - The JetBrains client runs on the users local machine and can be thought of as the user interface to the remote {title} backend. Client plugins are different to backend plugins as they contribute to the user interface aspect of the IDE experience (e.g. keyboard shortcuts and themes). Once installed, **a client plugin is enabled for all Gitpod workspaces the user opens** (if the workspace is running the exact same version of the {title} backend where the plugin was initially installed).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/intellij","loc":{"lines":{"from":52,"to":52}}}}],["1085",{"pageContent":"-   [**JetBrains Gateway plugins**](/docs/integrations/jetbrains-gateway#getting-started) - The JetBrains Gateway is an application downloaded onto a users local machine which allows users to start JetBrains Clients that are compatible with the {title} backend, running in a Gitpod workspace. JetBrains Gateway plugins are installed directly in JetBrains Gateway and contribute to remote development connection experiences (e.g. the [Gitpod JetBrains Gateway](https://plugins.jetbrains.com/plugin/18438-gitpod-gateway) plugin).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/intellij","loc":{"lines":{"from":53,"to":53}}}}],["1086",{"pageContent":"### Install on JetBrains Client\n\nThe JetBrains client runs on the users local machine and can be thought of as the user interface to the remote {title} backend. Client plugins contribute to the user interface aspect of the IDE experience (e.g. keyboard shortcuts and themes).\n\nOnce installed, **a client plugin is enabled for all Gitpod workspaces the user opens** (if the workspace is running the exact same version of the {title} backend where the plugin was initially installed).\n\nTo install a plugin on **JetBrains Client** follow these steps:\n\n-   In **JetBrains Client** open the IDE settings and select **Plugins**.\n-   Find the plugin in the **Marketplace** and click **Install**.\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Install a plugin on JetBrains Client\" src=\"/images/editors/install-local-jb-plugin.png\">\n    <figcaption>Install a plugin on JetBrains Client</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/intellij","loc":{"lines":{"from":55,"to":69}}}}],["1087",{"pageContent":"### Install on {title} backend\n\nThe JetBrains {title} backend runs within the remote Gitpod workspace. Backend plugins contribute functionality requiring access to IDE experiences such as the remote filesystem (e.g. contributing support of languages and frameworks).\n\nWhen installed, **a backend plugin only applies to the currently running Gitpod workspace** and is not associated with a user. However, a plugin can be [preconfigured for all users of a repository](#preconfigure-for-repository) so that the plugin is enabled with every workspace start.\n\nIt is not currently possible to install a backend plugin that applies to all workspaces of a Gitpod user or organization.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/intellij","loc":{"lines":{"from":71,"to":77}}}}],["1088",{"pageContent":"#### Install for your current workspace\n\nYou can install a plugin only for **your current workspace** following these steps:\n\n-   In **JetBrains Client** open the IDE settings and select **Plugins On Host**.\n-   Find the plugin in the **Marketplace** and click **Install**.\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Install a plugin on {title} backend\" src=\"/images/editors/install-remote-jb-plugin.png\">\n    <figcaption>Install a plugin on {title} backend</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/intellij","loc":{"lines":{"from":79,"to":89}}}}],["1089",{"pageContent":"#### Preconfigure for repository\n\n> JetBrains plugin support is currently in [Beta](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/6576).\n\nYou can share a plugin on **{title} backend** with everybody working on the repository by adding it to [.gitpod.yml](/docs/references/gitpod-yml) and pushing to your Git repository.\nEach workspace is preconfigured with plugins from the `gitpod.yml` configuration file. For example:\n\n```yml\njetbrains:\n    intellij:\n        plugins:\n            - zielu.gittoolbox\n            - izhangzhihao.rainbow.brackets\n```\n\nYou can find the **pluginId** on the [JetBrains Marketplace](https://plugins.jetbrains.com) page:\n\n-   Find a page of the required plugin.\n-   Select the **Versions** tab.\n-   Click any version to copy the **pluginId** (short name such as `org.rust.lang`) of the plugin you want to install.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/intellij","loc":{"lines":{"from":91,"to":110}}}}],["1090",{"pageContent":"#### Install for your user\n\nIt is not yet possible to install plugins on **{title} backend** for your user to share across all your Gitpod workspaces.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/intellij","loc":{"lines":{"from":112,"to":114}}}}],["1091",{"pageContent":"## Configure JVM options\n\n> Configuration of JVM options is currently in [Alpha](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/8704).\n\nYou can adjust JVM options for {title} backend, especially if you want to increase the `-Xmx` memory size. For example:\n\n```yml\njetbrains:\n    intellij:\n        vmoptions: '-Xmx4g'\n```\n\nFor more detailed information on JVM options, refer to [Common JVM Options](https://www.jetbrains.com/help/idea/tuning-the-ide.html#common-jvm-options) from JetBrains documentation.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/intellij","loc":{"lines":{"from":116,"to":128}}}}],["1092",{"pageContent":"## Configure IDE settings\n\n> **Feedback needed:** The JetBrains Gitpod integration is currently beta. Gitpod [continues to collaborate with JetBrains](https://www.gitpod.io/blog/gitpod-jetbrains). The below shows how you can configure global settings with JetBrains. To leave feedback on the approach, please see this GitHub issue: [#6576](https://github.com/gitpod-io/gitpod/issues/6576). Also note that JetBrains is working on [comprehensive settings sync functionality](https://youtrack.jetbrains.com/issue/RDCT-1/Settings-synchronization).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/intellij","loc":{"lines":{"from":130,"to":132}}}}],["1093",{"pageContent":"When running {title} locally, the JetBrains IDE applies [global settings](https://www.jetbrains.com/help/idea/configuring-project-and-ide-settings.html) to all projects on your machine. However when running in a remote context using [JetBrains Gateway](/docs/integrations/jetbrains-gateway), it's important to note that some IDE settings are configured on the [JetBrains Client](#on-jetbrains-client) and others in the [{title} backend](#on-title-backend) running in your Gitpod [Workspace](/docs/configure/workspaces). See below instructions for more.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/intellij","loc":{"lines":{"from":134,"to":134}}}}],["1094",{"pageContent":"### On JetBrains Client\n\nIDE Settings that are configured on the JetBrains Client are stored on your local machine and don't have `On Host` label in the IDE settings. These IDE settings are reused if the workspace is running the exact same version of the {title} backend where the settings were initially configured.\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Configure IDE settings on JetBrains client\" src=\"/images/editors/jb-client-configure-settings-client.webp\">\n    <figcaption>JetBrains client settings don't have <code>On Host</code> label.</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/intellij","loc":{"lines":{"from":136,"to":143}}}}],["1095",{"pageContent":"### On {title} backend\n\nSettings configured on {title} backend are stored in a Gitpod workspace and have `On Host` label in the IDE settings.\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Configure IDE settings on JetBrains client\" src=\"/images/editors/jb-backend-configure-settings.webp\">\n    <figcaption>{title} backend settings have `On Host` label.</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/intellij","loc":{"lines":{"from":145,"to":152}}}}],["1096",{"pageContent":"### Configure IDE settings per project\n\nSome IDE settings cannot be configured via [environment variables](/docs/configure/projects/environment-variables#environment-variables) or through setting [vm options](#configure-jvm-options). These settings can only be set via the UI of JetBrains client, and must be manually copied to be syned between workspaces. The below steps detail how to configure your IDE settings for all the users of a given Gitpod project:\n\n**Step 1: Manually use JetBrains UI to configure settings** - Set your IDE settings as you normally would, using the JetBrains UI.\n\n**Step 2: Find generated IDE settings** - You will need to manually find any global settings generated by JetBrains backend within the following path: `/workspace/.config/JetBrains<-latest>/RemoteDev-IU/<your-project-name>/options`","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/intellij","loc":{"lines":{"from":154,"to":160}}}}],["1097",{"pageContent":"**Step 3:** Move any relevant settings manually to a persistent location within your Gitpod project. Either via a [Workspace Image](/docs/configure/workspaces/workspace-image), or persisted in the version control of your project, for example by committing settings data to GitHub.\n\n**Include relevant IDE settings in your Workspace Image**\n\n-   `/home/gitpod/.gitpod/jetbrains/options` - This location applies settings to all JetBrains products (IntelliJ IDEA, GoLang, etc).\n-   `/home/gitpod/.gitpod/jetbrains/intellij/options` - This location will apply settings only to the given IDE, e.g. {title}.\n\n**Commit relevant IDE settings to source control**\n\n-   `/workspace/<your-project-name>/.gitpod/jetbrains/options` - This location applies settings to all JetBrains products (IntelliJ IDEA, GoLang, etc).\n-   `/workspace/<your-project-name>/.gitpod/jetbrains/intellij/options` - This location will apply settings only to the given IDE, e.g. {title}.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/intellij","loc":{"lines":{"from":162,"to":172}}}}],["1098",{"pageContent":"For any further changes to your IDE settings, you will need to follow the above steps again.\n\n> **Note:** When locating and applying IDE settings, Gitpod will read the locations specified above in priority order. The locations specified first are overriden by the locations specified later.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/intellij","loc":{"lines":{"from":174,"to":176}}}}],["1099",{"pageContent":"### Configure IDE settings per user\n\nTo configure IDE settings for your user only, and not all those using a project.\n\nFollow the instructions for [configuring IDE settings per project](#configure-ide-settings-per-project), but instead use [.dotfiles](/docs/configure/user-settings/dotfiles#dotfiles) rather than a workspace image or source control to store your IDE settings.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/intellij","loc":{"lines":{"from":178,"to":182}}}}],["1100",{"pageContent":"## Indexing using Prebuilds\n\n> JetBrains Prebuilds is currently in [Alpha](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/6576).\n\nWhen you open the project {title} starts indexing to load modules and\nenable the core functionality like code completion and navigation.\nDepending on the size of your project indexing speed can vary significantly.\n\nYou can speed up the indexing of a project by applying these [general recommendations](https://www.jetbrains.com/help/idea/indexing.html).\nGitpod prebuilds allow you to improve it further by indexing before you start a new workspace.\n\nTo leverage it:\n\n-   configure prebuilds for your repository, refer to [Prebuilds](/docs/configure/projects/prebuilds);\n-   enable indexing for {title} in prebuilds by editing [.gitpod.yml](/docs/references/gitpod-yml) in your repository:\n\n```yml\njetbrains:\n    intellij:\n        prebuilds:\n            version: stable","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/intellij","loc":{"lines":{"from":184,"to":204}}}}],["1101",{"pageContent":"```\n\n-   push changes to your Git repository to apply.\n\nThe `version` property allows you to control whether to index for `stable`, `latest`, or `both` versions of {title} compatible with Gitpod.\nUsers can switch between `stable` and `latest` versions of {title} on the [user preferences](https://gitpod.io/preferences) page.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/intellij","loc":{"lines":{"from":205,"to":210}}}}],["1102",{"pageContent":"## Workspace performance\n\nWhen using a Gitpod workspace you might experience performance issues caused by:\n\n-   An application using more resources than expected\n-   Resource consumption in adjacent containers running on the workspace node.\n\nIn your JetBrains IDE within the JetBrains Gateway [Backend Control Center](https://www.jetbrains.com/help/idea/work-inside-remote-project.html#control_center) you can find two metrics relating to your running workspace: `Workspace CPU` and `Workspace Memory`.\n\nThe remaining metrics you can find in the Backend Control Center regarding the node that your workspace is running on, and not the workspace itself.\n\n> **Note:** Performance information shown in the Backend Control Center is the same as the information that is shown when running the command [`gp top`](/docs/references/gitpod-cli#top) in your workspace, see the [Command Line Interface](/docs/references/gitpod-cli) documentation for more.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/intellij","loc":{"lines":{"from":212,"to":223}}}}],["1103",{"pageContent":"![jetbrains performance](/images/jetbrains-gateway/jetbrains-performance-center.png)","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/intellij","loc":{"lines":{"from":225,"to":225}}}}],["1104",{"pageContent":"## FAQs\n\n-   For the questions about supported IDEs and Editors in Gitpod, refer to [FAQs](/docs/references/ides-and-editors/faqs).\n\n-   For the general questions about JetBrains Remote Development, refer to refer to the general IDE <a href=\"https://www.jetbrains.com/help/idea/faq-about-remote-development.html\" target=\"_blank\">{title} FAQ</a>.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/intellij","loc":{"lines":{"from":227,"to":231}}}}],["1105",{"pageContent":"### Are there any JetBrains optimizations I can make if my workspace is slow?\n\nDebugging performance can be challenging, as performance issues can depend on many factors such as how Gitpod is configured (if you're operating Gitpod on Self-Hosted). However, there are some ways you can gather performance information and optimise your JetBrains IDE setup with Gitpod:\n\n1. Firstly, to gather information on performance, you can [view workspace performance metrics from within the IDE](/docs/references/ides-and-editors/intellij#workspace-performance) in the Backend Control Center, or by using [`gp top`](/docs/references/gitpod-cli#top).\n2. You may also want to try adjusting the Max Heap Size allocated to the JetBrains Backend in the Settings tab of the Backend Control Center. If updating this setting helps your performance, you can set the `vmoptions` value for your JetBrains IDE in your `.gitpod.yml`.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/intellij","loc":{"lines":{"from":233,"to":238}}}}],["1106",{"pageContent":"> **Note:** If the performance metrics show that your workspace is hitting its resource limits, and you are using Gitpod Self-Hosted, it might make sense to consider changing the resource configuration for your workspaces. This can be done via a [config-patch](/docs/configure/self-hosted/latest/config-patches). Configuring workspace resources is not yet available on SaaS.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/intellij","loc":{"lines":{"from":240,"to":240}}}}],["1107",{"pageContent":"## Troubleshooting\n\n-   [What should I do if JetBrains Gateway and Gitpod aren’t working?](/docs/help/troubleshooting#what-should-i-do-if-jetbrains-gateway-and-gitpod-arent-working)\n-   [Gitpod logs in JetBrains Client](/docs/help/troubleshooting#gitpod-logs-in-jetbrains-client)\n-   [Gitpod logs in JetBrains Gateway](/docs/help/troubleshooting#gitpod-logs-in-jetbrains-gateway)","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/intellij","loc":{"lines":{"from":242,"to":246}}}}],["1108",{"pageContent":"---\nsection: ides-and-editors\ntitle: Legacy VS Code Desktop Connection\n---\n\n<script context=\"module\">\n  export const prerender = true;\n</script>\n\n# Legacy - VS Code Desktop Connection Methods\n\nThe following are previous methods of working with VS Code Desktop. See [VS Code Desktop](/docs/references/ides-and-editors/vscode#connecting-to-vs-code-desktop) for the latest connection methods and approaches.\n\n1. SSH Gateway access using an uploaded public SSH key\n2. SSH Gateway access using the owner token\n3. Using Local Companion\n\n<!-- > **🚨 Security Note:** To use `Local SSH`, [**it requires to add some content to your ssh config file**](docs/references/ides-and-editors/vscode#modify-ssh-config-file). Please remember that if you ever have any security concerns, you could use other methods or choose other editors. -->\n\nSee [configure SSH](/docs/configure/user-settings/ssh) for more on SSH Gateway.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/legacy-vscode-connections","loc":{"lines":{"from":1,"to":20}}}}],["1109",{"pageContent":"See [configure SSH](/docs/configure/user-settings/ssh) for more on SSH Gateway.\n\n> **Important:** You must first ensure that `gitpod.remote.useLocalApp` is set to `false` in your VS Code user preferences for Gitpod to connect via the two SSH Gateway methods.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/legacy-vscode-connections","loc":{"lines":{"from":20,"to":22}}}}],["1110",{"pageContent":"### Connect to VS Code Desktop using an uploaded public SSH key\n\nFirst, VS Code Desktop will check if you have already added a public SSH key to Gitpod and that the associated private key is available on your device.\n\nIf you haven't set up an SSH key with Gitpod, you can go to [gitpod.io/keys](https://gitpod.io/keys) to upload a public key. Alternatively, you can continue using the owner token approach detailed below.\n\n<div align=\"center\">\n  <img alt=\"The VS Code Desktop prompt from Gitpod when opening a workspace with no SSH key found locally or uploaded to Gitpod\" src=\"/images/editors/no-registered-ssh-key-for-this-machine.png\" width=\"50%\">\n  <p><i>The VS Code Desktop prompt from Gitpod when opening a workspace with no SSH key found locally or uploaded to Gitpod.</i></p>\n  <br />\n</div>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/legacy-vscode-connections","loc":{"lines":{"from":24,"to":34}}}}],["1111",{"pageContent":"You must have at least one public key uploaded to Gitpod, and a matching private key locally on your device to avoid this prompt. VS Code Desktop will look to find private keys in the following named files within the `.ssh` directory listed under your home directory.\n\n-   `id_dsa`\n-   `id_dsa`\n-   `id_ecdsa`\n-   `id_rsa`\n-   `id_ed25519`\n-   `id_xmss`\n-   `id_ecdsa_sk`\n-   `id_ed25519_sk`","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/legacy-vscode-connections","loc":{"lines":{"from":36,"to":45}}}}],["1112",{"pageContent":"### Connect to VS Code Desktop using the workspace owner token\n\nIf you cannot upload a public key to Gitpod (for whatever reason) selecting **Copy** will allow you to proceed to access your Gitpod workspace using the owner token approach. Selecting **Copy** will copy the necessary password to your clipboard to be pasted in the subsequent password prompt.\n\n![VS Code prompting for a password. This message is shown when the public key warning notice is dismissed on the previous page by selecting Copy](/images/editors/enter-password-for-ssh-connection-dark-theme.png)\n![VS Code prompting for a password. This message is shown when the public key warning notice is dismissed on the previous page by selecting Copy](/images/editors/enter-password-for-ssh-connection-light-theme.png)\n_VS Code prompting for a password. This message is shown when the public key warning notice is dismissed on the previous page by selecting Copy._","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/legacy-vscode-connections","loc":{"lines":{"from":47,"to":53}}}}],["1113",{"pageContent":"> **Note:** Gitpod previously required a local private SSH key to be stored in the default SSH directory, otherwise Gitpod would prompt for a \"password\". This limitation is no longer required. If not using an SSH uploaded key, you may be prompted for a password (the owner token), or asked for the passphrase associated with your SSH key.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/legacy-vscode-connections","loc":{"lines":{"from":55,"to":55}}}}],["1114",{"pageContent":"### Connect to VS Code Desktop using Local Companion\n\nIf VS Code Desktop cannot connect directly via the SSH Gateway methods described above, the Local Companion approach is used as a fallback to tunnel your SSH connection. Gitpod via the VS Code Desktop plugin will download and start the Local Companion process on your behalf.\n\nThis approach is not recommended because:\n\n1. It overwrites your [`remote.SSH.configFile`](https://code.visualstudio.com/blogs/2019/10/03/remote-ssh-tips-and-tricks) VS Code setting.\n2. Downloads and starts Local Companion in a non-transparent way.\n3. Is less performant than the SSH Gateway approach.\n\nIf required, you manually can force VS Code Desktop to always fallback to the Local Companion by setting the property `gitpod.remote.useLocalApp` in your user preferences to `true`.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/legacy-vscode-connections","loc":{"lines":{"from":57,"to":67}}}}],["1115",{"pageContent":"If required, you manually can force VS Code Desktop to always fallback to the Local Companion by setting the property `gitpod.remote.useLocalApp` in your user preferences to `true`.\n\n![The VS Code Desktop Gitpod extension useLocalApp setting](/images/editors/vscode-local-app-setting-dark-theme.png)\n![The VS Code Desktop Gitpod extension useLocalApp setting](/images/editors/vscode-local-app-setting-light-theme.png)\n_The VS Code Desktop Gitpod extension \"useLocalApp\" setting_\n\n> **Deprecation Notice:** The fallback SSH connection using Local Companion for VS Code Desktop will be deprecated in a future release of Gitpod. If you cannot connect to your workspaces directly via SSH, for example, because your firewall is blocking the SSH connection, please [contact support](https://www.gitpod.io/support) with [troubleshooting logs](https://www.gitpod.io/docs/help/troubleshooting#gitpod-logs-in-vs-code-web-and-desktop).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/legacy-vscode-connections","loc":{"lines":{"from":67,"to":73}}}}],["1116",{"pageContent":"## FAQs","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/legacy-vscode-connections","loc":{"lines":{"from":75,"to":75}}}}],["1117",{"pageContent":"### When opening VS Code Desktop, the owner token wasn't copied to my clipboard, where can I find it?\n\nWhen opening VS Code Desktop, if you are being prompted for the owner token password, but cannot copy it to clipboard, you can find the password on the gitpod [workspaces page](https://gitpod.io/workspaces) under \"connect via SSH\".\n\n![The password prompt in VS Code Desktop for the owner token](/images/editors/enter-password-for-ssh-connection-dark-theme.png)\n![The password prompt in VS Code Desktop for the owner token](/images/editors/enter-password-for-ssh-connection-light-theme.png)\n_The password prompt in VS Code Desktop for the owner token_\n\n![Accessing the owner token string manually from the Gitpod dashboard](/images/editors/connect-via-ssh-dashboard-dark-theme.png)\n![Accessing the owner token string manually from the Gitpod dashboard](/images/editors/connect-via-ssh-dashboard-light-theme.png)\n_Accessing the owner token string manually from the Gitpod dashboard_","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/legacy-vscode-connections","loc":{"lines":{"from":77,"to":87}}}}],["1118",{"pageContent":"> **Note:** Pattern of the owner token is: `user#password@host`","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/legacy-vscode-connections","loc":{"lines":{"from":89,"to":89}}}}],["1119",{"pageContent":"### I'm being prompted for a password/passphrase but VS Code Desktop cannot authenticate?\n\nThe owner token prompt and passphrase prompt in VS Code Desktop can look similar, however require different inputs. If you're seeing a failure to connect it could be you are using the incorrect authentication method, e.g. pasting an owner token for a passphrase, or vice versa.\n\n1. **Owner token** - If the password prompt in VS Code Desktop asks `Enter password for workspace@\\*.gitpod.io`, this prompt is for the owner token of the workspace, not the passphrase associated with your SSH key.\n\n![The password prompt in VS Code Desktop for the owner token](/images/editors/enter-password-for-ssh-connection-dark-theme.png)\n![The password prompt in VS Code Desktop for the owner token](/images/editors/enter-password-for-ssh-connection-light-theme.png)\n_The password prompt in VS Code Desktop for the owner token_","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/legacy-vscode-connections","loc":{"lines":{"from":91,"to":99}}}}],["1120",{"pageContent":"![Accessing the owner token string manually from the Gitpod dashboard](/images/editors/connect-via-ssh-dashboard-dark-theme.png)\n![Accessing the owner token string manually from the Gitpod dashboard](/images/editors/connect-via-ssh-dashboard-light-theme.png)\n_Accessing the owner token string manually from the Gitpod dashboard_\n\n1. **SSH key Passphrase** - If your SSH key has a \"passphrase\" associated with the SSH key (it is not required for SSH keys), you'll need to enter your passphrase. If your public key has no passphrase, you should not see the passphrase prompt.\n\n![Passphrase prompt from VS Code requiring the SSH key passphrase](/images/editors/enter-passphrase-for-ssh.png)\n_Passphrase prompt from VS Code requiring the SSH key passphrase_\n\n> **Note:** If you cannot remember your passphrase, consider creating a new SSH key and uploading the new key to Gitpod.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/legacy-vscode-connections","loc":{"lines":{"from":101,"to":110}}}}],["1121",{"pageContent":"## Troubleshooting\n\nIf you are still having issues connecting to VS Code Desktop from Gitpod, try:\n\n1. Checking your Gitpod VS Code Desktop extension version is using the latest version.\n2. Attempt to directly connect via SSH using the `-v` to show verbose SSH logs. For example: `ssh -v workspacename@hostname`. You can find the `ssh` command in the workspace list on your Gitpod dashboard, see the [command-line](/docs/references/ides-and-editors/command-line) docs for more.\n3. If you're a self-hosted customer, ensure [SSH Gateway](/docs/configure/user-settings/ssh) is configured correctly.\n\nIf you are still experiencing issues using VS Code Desktop and Gitpod, please [contact support](/support) with any related [troubleshooting logs](/docs/help/troubleshooting#gitpod-logs-in-vs-code-web-and-desktop)","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/legacy-vscode-connections","loc":{"lines":{"from":112,"to":120}}}}],["1122",{"pageContent":"---\nsection: ides-and-editors\ntitle: Gitpod Local Companion\n---\n\n# Gitpod Local Companion\n\n> {title} is currently in [Beta](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/5712).\n\nPlease refer to the [Gitpod Local Companion - localhost is going remote](/blog/local-app) announcement blog post for more details on how to explore the beta release of the _Gitpod local companion_.\n\n## Connect To VS Code Desktop\n\nWhilst it is possible to use the Gitpod local companion to connect your desktop VS Code application to Gitpod, the best way is to use the Gitpod VS Code Plugin, which you can access directly from the command pallette via any Gitpod the workspace. For more details about VS Code Desktop, please refer to the [VS Code Desktop support docs](/docs/references/ides-and-editors/vscode).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/local-companion","loc":{"lines":{"from":1,"to":14}}}}],["1123",{"pageContent":"---\nsection: ides-and-editors\ntitle: PhpStorm\n---\n\n<!--\n  This document is auto generated from generators/ide/jb-product.md\n  Edit this file instead and run `yarn generate:jb`to apply.\n-->\n\n<!-- prettier-ignore -->\n# PhpStorm\n\n> {title} is currently in [Beta](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/6576).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/phpstorm","loc":{"lines":{"from":1,"to":14}}}}],["1124",{"pageContent":"## Getting started","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/phpstorm","loc":{"lines":{"from":16,"to":16}}}}],["1125",{"pageContent":"1. **Install [JetBrains Gateway](https://www.jetbrains.com/help/phpstorm/remote-development-a.html#gateway)** - With the [JetBrains Gateway and Gitpod](/docs/integrations/jetbrains-gateway) plugin you can create and manage your latest 20 Gitpod workspaces.\n2. **Install the Gitpod plugin** - Open JetBrains Gateway and you'll see the Gitpod logo on the main page. Click \"install\" to install the [Gitpod plugin](https://plugins.jetbrains.com/plugin/18438-gitpod-gateway) for JetBrains Gateway.\n3. **Update your Gitpod preferences** - Select {title} on the [Gitpod preferences page](https://gitpod.io/preferences) which will set {title} as your default IDE for future workspace starts.\n4. **Start (or restart) your workspace** - Either start a workspace directly from within the [JetBrains Gateway](/docs/integrations/jetbrains-gateway) via the Gitpod plugin **OR** open a new workspace directly in Gitpod where on workspace start you will be prompted to open {title} for that workspace.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/phpstorm","loc":{"lines":{"from":18,"to":21}}}}],["1126",{"pageContent":"<figure>\n  <video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" src=\"/images/editors/select-jetbrains-ide.webm\" type=\"video/webm\"></video>\n  <figcaption>Updating Gitpod IDE preferences to {title}</figcaption>\n</figure>\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Opening a JetBrains IDE from Gitpod\" src=\"/images/editors/opening-the-thin-jetbrains-client.webm\" type=\"video/webm\"></video>\n    <figcaption>Opening a JetBrains IDE from Gitpod</figcaption>\n</figure>\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Updating the Gitpod plugin in JetBrains Gateway\" src=\"/images/editors/update-jetbrains-gateway-settings.webm\" type=\"video/webm\"></video>\n    <figcaption>Updating the Gitpod plugin in JetBrains Gateway</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/phpstorm","loc":{"lines":{"from":23,"to":36}}}}],["1127",{"pageContent":"<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Opening a JetBrains IDE from Gateway\" src=\"/images/editors/open-from-jetbrains-gateway.webm\" type=\"video/webm\"></video>\n    <figcaption>Opening a JetBrains IDE from Gateway</figcaption>\n</figure>\n\n**Important:** You must restart any started workspaces for your IDE preferences to take effect.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/phpstorm","loc":{"lines":{"from":38,"to":43}}}}],["1128",{"pageContent":"## Install Plugins\n\n> This section relates to plugin management when using JetBrains IDEs in a remote development context. For information on regular plugin management, refer to <a href=\"https://www.jetbrains.com/help/phpstorm/managing-plugins.html\" target=\"_blank\">{title} docs</a>.\n\nUnlike with regular development, JetBrains [Remote development](https://www.jetbrains.com/help/phpstorm/remote-development-overview.html#defs) with {title} allows users to install plugins in different locations:","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/phpstorm","loc":{"lines":{"from":45,"to":49}}}}],["1129",{"pageContent":"-   [**{title} backend plugins**](#install-on-title-backend) - The JetBrains {title} backend runs within the remote Gitpod workspace. Backend plugins contribute functionality for IDE experiences relating to the filesystem, tools or languages and frameworks. When installed, **a backend plugin only applies to the currently running Gitpod workspace** and is not associated with a user. However, a plugin can be [preconfigured for all users of a repository](#preconfigure-for-repository) so that the plugin is enabled with every workspace start. It is not currently possible to install a backend plugin that applies to all workspaces of a Gitpod user or organization.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/phpstorm","loc":{"lines":{"from":51,"to":51}}}}],["1130",{"pageContent":"-   [**JetBrains Client plugins**](#install-on-jetbrains-client) - The JetBrains client runs on the users local machine and can be thought of as the user interface to the remote {title} backend. Client plugins are different to backend plugins as they contribute to the user interface aspect of the IDE experience (e.g. keyboard shortcuts and themes). Once installed, **a client plugin is enabled for all Gitpod workspaces the user opens** (if the workspace is running the exact same version of the {title} backend where the plugin was initially installed).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/phpstorm","loc":{"lines":{"from":52,"to":52}}}}],["1131",{"pageContent":"-   [**JetBrains Gateway plugins**](/docs/integrations/jetbrains-gateway#getting-started) - The JetBrains Gateway is an application downloaded onto a users local machine which allows users to start JetBrains Clients that are compatible with the {title} backend, running in a Gitpod workspace. JetBrains Gateway plugins are installed directly in JetBrains Gateway and contribute to remote development connection experiences (e.g. the [Gitpod JetBrains Gateway](https://plugins.jetbrains.com/plugin/18438-gitpod-gateway) plugin).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/phpstorm","loc":{"lines":{"from":53,"to":53}}}}],["1132",{"pageContent":"### Install on JetBrains Client\n\nThe JetBrains client runs on the users local machine and can be thought of as the user interface to the remote {title} backend. Client plugins contribute to the user interface aspect of the IDE experience (e.g. keyboard shortcuts and themes).\n\nOnce installed, **a client plugin is enabled for all Gitpod workspaces the user opens** (if the workspace is running the exact same version of the {title} backend where the plugin was initially installed).\n\nTo install a plugin on **JetBrains Client** follow these steps:\n\n-   In **JetBrains Client** open the IDE settings and select **Plugins**.\n-   Find the plugin in the **Marketplace** and click **Install**.\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Install a plugin on JetBrains Client\" src=\"/images/editors/install-local-jb-plugin.png\">\n    <figcaption>Install a plugin on JetBrains Client</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/phpstorm","loc":{"lines":{"from":55,"to":69}}}}],["1133",{"pageContent":"### Install on {title} backend\n\nThe JetBrains {title} backend runs within the remote Gitpod workspace. Backend plugins contribute functionality requiring access to IDE experiences such as the remote filesystem (e.g. contributing support of languages and frameworks).\n\nWhen installed, **a backend plugin only applies to the currently running Gitpod workspace** and is not associated with a user. However, a plugin can be [preconfigured for all users of a repository](#preconfigure-for-repository) so that the plugin is enabled with every workspace start.\n\nIt is not currently possible to install a backend plugin that applies to all workspaces of a Gitpod user or organization.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/phpstorm","loc":{"lines":{"from":71,"to":77}}}}],["1134",{"pageContent":"#### Install for your current workspace\n\nYou can install a plugin only for **your current workspace** following these steps:\n\n-   In **JetBrains Client** open the IDE settings and select **Plugins On Host**.\n-   Find the plugin in the **Marketplace** and click **Install**.\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Install a plugin on {title} backend\" src=\"/images/editors/install-remote-jb-plugin.png\">\n    <figcaption>Install a plugin on {title} backend</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/phpstorm","loc":{"lines":{"from":79,"to":89}}}}],["1135",{"pageContent":"#### Preconfigure for repository\n\n> JetBrains plugin support is currently in [Beta](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/6576).\n\nYou can share a plugin on **{title} backend** with everybody working on the repository by adding it to [.gitpod.yml](/docs/references/gitpod-yml) and pushing to your Git repository.\nEach workspace is preconfigured with plugins from the `gitpod.yml` configuration file. For example:\n\n```yml\njetbrains:\n    phpstorm:\n        plugins:\n            - zielu.gittoolbox\n            - izhangzhihao.rainbow.brackets\n```\n\nYou can find the **pluginId** on the [JetBrains Marketplace](https://plugins.jetbrains.com) page:\n\n-   Find a page of the required plugin.\n-   Select the **Versions** tab.\n-   Click any version to copy the **pluginId** (short name such as `org.rust.lang`) of the plugin you want to install.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/phpstorm","loc":{"lines":{"from":91,"to":110}}}}],["1136",{"pageContent":"#### Install for your user\n\nIt is not yet possible to install plugins on **{title} backend** for your user to share across all your Gitpod workspaces.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/phpstorm","loc":{"lines":{"from":112,"to":114}}}}],["1137",{"pageContent":"## Configure JVM options\n\n> Configuration of JVM options is currently in [Alpha](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/8704).\n\nYou can adjust JVM options for {title} backend, especially if you want to increase the `-Xmx` memory size. For example:\n\n```yml\njetbrains:\n    phpstorm:\n        vmoptions: '-Xmx4g'\n```\n\nFor more detailed information on JVM options, refer to [Common JVM Options](https://www.jetbrains.com/help/phpstorm/tuning-the-ide.html#common-jvm-options) from JetBrains documentation.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/phpstorm","loc":{"lines":{"from":116,"to":128}}}}],["1138",{"pageContent":"## Configure IDE settings\n\n> **Feedback needed:** The JetBrains Gitpod integration is currently beta. Gitpod [continues to collaborate with JetBrains](https://www.gitpod.io/blog/gitpod-jetbrains). The below shows how you can configure global settings with JetBrains. To leave feedback on the approach, please see this GitHub issue: [#6576](https://github.com/gitpod-io/gitpod/issues/6576). Also note that JetBrains is working on [comprehensive settings sync functionality](https://youtrack.jetbrains.com/issue/RDCT-1/Settings-synchronization).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/phpstorm","loc":{"lines":{"from":130,"to":132}}}}],["1139",{"pageContent":"When running {title} locally, the JetBrains IDE applies [global settings](https://www.jetbrains.com/help/phpstorm/configuring-project-and-ide-settings.html) to all projects on your machine. However when running in a remote context using [JetBrains Gateway](/docs/integrations/jetbrains-gateway), it's important to note that some IDE settings are configured on the [JetBrains Client](#on-jetbrains-client) and others in the [{title} backend](#on-title-backend) running in your Gitpod [Workspace](/docs/configure/workspaces). See below instructions for more.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/phpstorm","loc":{"lines":{"from":134,"to":134}}}}],["1140",{"pageContent":"### On JetBrains Client\n\nIDE Settings that are configured on the JetBrains Client are stored on your local machine and don't have `On Host` label in the IDE settings. These IDE settings are reused if the workspace is running the exact same version of the {title} backend where the settings were initially configured.\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Configure IDE settings on JetBrains client\" src=\"/images/editors/jb-client-configure-settings-client.webp\">\n    <figcaption>JetBrains client settings don't have <code>On Host</code> label.</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/phpstorm","loc":{"lines":{"from":136,"to":143}}}}],["1141",{"pageContent":"### On {title} backend\n\nSettings configured on {title} backend are stored in a Gitpod workspace and have `On Host` label in the IDE settings.\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Configure IDE settings on JetBrains client\" src=\"/images/editors/jb-backend-configure-settings.webp\">\n    <figcaption>{title} backend settings have `On Host` label.</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/phpstorm","loc":{"lines":{"from":145,"to":152}}}}],["1142",{"pageContent":"### Configure IDE settings per project\n\nSome IDE settings cannot be configured via [environment variables](/docs/configure/projects/environment-variables#environment-variables) or through setting [vm options](#configure-jvm-options). These settings can only be set via the UI of JetBrains client, and must be manually copied to be syned between workspaces. The below steps detail how to configure your IDE settings for all the users of a given Gitpod project:\n\n**Step 1: Manually use JetBrains UI to configure settings** - Set your IDE settings as you normally would, using the JetBrains UI.\n\n**Step 2: Find generated IDE settings** - You will need to manually find any global settings generated by JetBrains backend within the following path: `/workspace/.config/JetBrains<-latest>/RemoteDev-PS/<your-project-name>/options`","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/phpstorm","loc":{"lines":{"from":154,"to":160}}}}],["1143",{"pageContent":"**Step 3:** Move any relevant settings manually to a persistent location within your Gitpod project. Either via a [Workspace Image](/docs/configure/workspaces/workspace-image), or persisted in the version control of your project, for example by committing settings data to GitHub.\n\n**Include relevant IDE settings in your Workspace Image**\n\n-   `/home/gitpod/.gitpod/jetbrains/options` - This location applies settings to all JetBrains products (IntelliJ IDEA, GoLang, etc).\n-   `/home/gitpod/.gitpod/jetbrains/phpstorm/options` - This location will apply settings only to the given IDE, e.g. {title}.\n\n**Commit relevant IDE settings to source control**\n\n-   `/workspace/<your-project-name>/.gitpod/jetbrains/options` - This location applies settings to all JetBrains products (IntelliJ IDEA, GoLang, etc).\n-   `/workspace/<your-project-name>/.gitpod/jetbrains/phpstorm/options` - This location will apply settings only to the given IDE, e.g. {title}.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/phpstorm","loc":{"lines":{"from":162,"to":172}}}}],["1144",{"pageContent":"For any further changes to your IDE settings, you will need to follow the above steps again.\n\n> **Note:** When locating and applying IDE settings, Gitpod will read the locations specified above in priority order. The locations specified first are overriden by the locations specified later.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/phpstorm","loc":{"lines":{"from":174,"to":176}}}}],["1145",{"pageContent":"### Configure IDE settings per user\n\nTo configure IDE settings for your user only, and not all those using a project.\n\nFollow the instructions for [configuring IDE settings per project](#configure-ide-settings-per-project), but instead use [.dotfiles](/docs/configure/user-settings/dotfiles#dotfiles) rather than a workspace image or source control to store your IDE settings.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/phpstorm","loc":{"lines":{"from":178,"to":182}}}}],["1146",{"pageContent":"## Indexing using Prebuilds\n\n> JetBrains Prebuilds is currently in [Alpha](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/6576).\n\nWhen you open the project {title} starts indexing to load modules and\nenable the core functionality like code completion and navigation.\nDepending on the size of your project indexing speed can vary significantly.\n\nYou can speed up the indexing of a project by applying these [general recommendations](https://www.jetbrains.com/help/phpstorm/indexing.html).\nGitpod prebuilds allow you to improve it further by indexing before you start a new workspace.\n\nTo leverage it:\n\n-   configure prebuilds for your repository, refer to [Prebuilds](/docs/configure/projects/prebuilds);\n-   enable indexing for {title} in prebuilds by editing [.gitpod.yml](/docs/references/gitpod-yml) in your repository:\n\n```yml\njetbrains:\n    phpstorm:\n        prebuilds:\n            version: stable","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/phpstorm","loc":{"lines":{"from":184,"to":204}}}}],["1147",{"pageContent":"```\n\n-   push changes to your Git repository to apply.\n\nThe `version` property allows you to control whether to index for `stable`, `latest`, or `both` versions of {title} compatible with Gitpod.\nUsers can switch between `stable` and `latest` versions of {title} on the [user preferences](https://gitpod.io/preferences) page.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/phpstorm","loc":{"lines":{"from":205,"to":210}}}}],["1148",{"pageContent":"## Workspace performance\n\nWhen using a Gitpod workspace you might experience performance issues caused by:\n\n-   An application using more resources than expected\n-   Resource consumption in adjacent containers running on the workspace node.\n\nIn your JetBrains IDE within the JetBrains Gateway [Backend Control Center](https://www.jetbrains.com/help/idea/work-inside-remote-project.html#control_center) you can find two metrics relating to your running workspace: `Workspace CPU` and `Workspace Memory`.\n\nThe remaining metrics you can find in the Backend Control Center regarding the node that your workspace is running on, and not the workspace itself.\n\n> **Note:** Performance information shown in the Backend Control Center is the same as the information that is shown when running the command [`gp top`](/docs/references/gitpod-cli#top) in your workspace, see the [Command Line Interface](/docs/references/gitpod-cli) documentation for more.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/phpstorm","loc":{"lines":{"from":212,"to":223}}}}],["1149",{"pageContent":"![jetbrains performance](/images/jetbrains-gateway/jetbrains-performance-center.png)","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/phpstorm","loc":{"lines":{"from":225,"to":225}}}}],["1150",{"pageContent":"## FAQs\n\n-   For the questions about supported IDEs and Editors in Gitpod, refer to [FAQs](/docs/references/ides-and-editors/faqs).\n\n-   For the general questions about JetBrains Remote Development, refer to refer to the general IDE <a href=\"https://www.jetbrains.com/help/phpstorm/faq-about-remote-development.html\" target=\"_blank\">{title} FAQ</a>.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/phpstorm","loc":{"lines":{"from":227,"to":231}}}}],["1151",{"pageContent":"### Are there any JetBrains optimizations I can make if my workspace is slow?\n\nDebugging performance can be challenging, as performance issues can depend on many factors such as how Gitpod is configured (if you're operating Gitpod on Self-Hosted). However, there are some ways you can gather performance information and optimise your JetBrains IDE setup with Gitpod:\n\n1. Firstly, to gather information on performance, you can [view workspace performance metrics from within the IDE](/docs/references/ides-and-editors/intellij#workspace-performance) in the Backend Control Center, or by using [`gp top`](/docs/references/gitpod-cli#top).\n2. You may also want to try adjusting the Max Heap Size allocated to the JetBrains Backend in the Settings tab of the Backend Control Center. If updating this setting helps your performance, you can set the `vmoptions` value for your JetBrains IDE in your `.gitpod.yml`.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/phpstorm","loc":{"lines":{"from":233,"to":238}}}}],["1152",{"pageContent":"> **Note:** If the performance metrics show that your workspace is hitting its resource limits, and you are using Gitpod Self-Hosted, it might make sense to consider changing the resource configuration for your workspaces. This can be done via a [config-patch](/docs/configure/self-hosted/latest/config-patches). Configuring workspace resources is not yet available on SaaS.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/phpstorm","loc":{"lines":{"from":240,"to":240}}}}],["1153",{"pageContent":"## Troubleshooting\n\n-   [What should I do if JetBrains Gateway and Gitpod aren’t working?](/docs/help/troubleshooting#what-should-i-do-if-jetbrains-gateway-and-gitpod-arent-working)\n-   [Gitpod logs in JetBrains Client](/docs/help/troubleshooting#gitpod-logs-in-jetbrains-client)\n-   [Gitpod logs in JetBrains Gateway](/docs/help/troubleshooting#gitpod-logs-in-jetbrains-gateway)","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/phpstorm","loc":{"lines":{"from":242,"to":246}}}}],["1154",{"pageContent":"---\nsection: ides-and-editors\ntitle: PyCharm\n---\n\n<!--\n  This document is auto generated from generators/ide/jb-product.md\n  Edit this file instead and run `yarn generate:jb`to apply.\n-->\n\n<!-- prettier-ignore -->\n# PyCharm\n\n> {title} is currently in [Beta](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/6576).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/pycharm","loc":{"lines":{"from":1,"to":14}}}}],["1155",{"pageContent":"## Getting started","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/pycharm","loc":{"lines":{"from":16,"to":16}}}}],["1156",{"pageContent":"1. **Install [JetBrains Gateway](https://www.jetbrains.com/help/pycharm/remote-development-a.html#gateway)** - With the [JetBrains Gateway and Gitpod](/docs/integrations/jetbrains-gateway) plugin you can create and manage your latest 20 Gitpod workspaces.\n2. **Install the Gitpod plugin** - Open JetBrains Gateway and you'll see the Gitpod logo on the main page. Click \"install\" to install the [Gitpod plugin](https://plugins.jetbrains.com/plugin/18438-gitpod-gateway) for JetBrains Gateway.\n3. **Update your Gitpod preferences** - Select {title} on the [Gitpod preferences page](https://gitpod.io/preferences) which will set {title} as your default IDE for future workspace starts.\n4. **Start (or restart) your workspace** - Either start a workspace directly from within the [JetBrains Gateway](/docs/integrations/jetbrains-gateway) via the Gitpod plugin **OR** open a new workspace directly in Gitpod where on workspace start you will be prompted to open {title} for that workspace.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/pycharm","loc":{"lines":{"from":18,"to":21}}}}],["1157",{"pageContent":"<figure>\n  <video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" src=\"/images/editors/select-jetbrains-ide.webm\" type=\"video/webm\"></video>\n  <figcaption>Updating Gitpod IDE preferences to {title}</figcaption>\n</figure>\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Opening a JetBrains IDE from Gitpod\" src=\"/images/editors/opening-the-thin-jetbrains-client.webm\" type=\"video/webm\"></video>\n    <figcaption>Opening a JetBrains IDE from Gitpod</figcaption>\n</figure>\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Updating the Gitpod plugin in JetBrains Gateway\" src=\"/images/editors/update-jetbrains-gateway-settings.webm\" type=\"video/webm\"></video>\n    <figcaption>Updating the Gitpod plugin in JetBrains Gateway</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/pycharm","loc":{"lines":{"from":23,"to":36}}}}],["1158",{"pageContent":"<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Opening a JetBrains IDE from Gateway\" src=\"/images/editors/open-from-jetbrains-gateway.webm\" type=\"video/webm\"></video>\n    <figcaption>Opening a JetBrains IDE from Gateway</figcaption>\n</figure>\n\n**Important:** You must restart any started workspaces for your IDE preferences to take effect.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/pycharm","loc":{"lines":{"from":38,"to":43}}}}],["1159",{"pageContent":"## Install Plugins\n\n> This section relates to plugin management when using JetBrains IDEs in a remote development context. For information on regular plugin management, refer to <a href=\"https://www.jetbrains.com/help/pycharm/managing-plugins.html\" target=\"_blank\">{title} docs</a>.\n\nUnlike with regular development, JetBrains [Remote development](https://www.jetbrains.com/help/pycharm/remote-development-overview.html#defs) with {title} allows users to install plugins in different locations:","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/pycharm","loc":{"lines":{"from":45,"to":49}}}}],["1160",{"pageContent":"-   [**{title} backend plugins**](#install-on-title-backend) - The JetBrains {title} backend runs within the remote Gitpod workspace. Backend plugins contribute functionality for IDE experiences relating to the filesystem, tools or languages and frameworks. When installed, **a backend plugin only applies to the currently running Gitpod workspace** and is not associated with a user. However, a plugin can be [preconfigured for all users of a repository](#preconfigure-for-repository) so that the plugin is enabled with every workspace start. It is not currently possible to install a backend plugin that applies to all workspaces of a Gitpod user or organization.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/pycharm","loc":{"lines":{"from":51,"to":51}}}}],["1161",{"pageContent":"-   [**JetBrains Client plugins**](#install-on-jetbrains-client) - The JetBrains client runs on the users local machine and can be thought of as the user interface to the remote {title} backend. Client plugins are different to backend plugins as they contribute to the user interface aspect of the IDE experience (e.g. keyboard shortcuts and themes). Once installed, **a client plugin is enabled for all Gitpod workspaces the user opens** (if the workspace is running the exact same version of the {title} backend where the plugin was initially installed).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/pycharm","loc":{"lines":{"from":52,"to":52}}}}],["1162",{"pageContent":"-   [**JetBrains Gateway plugins**](/docs/integrations/jetbrains-gateway#getting-started) - The JetBrains Gateway is an application downloaded onto a users local machine which allows users to start JetBrains Clients that are compatible with the {title} backend, running in a Gitpod workspace. JetBrains Gateway plugins are installed directly in JetBrains Gateway and contribute to remote development connection experiences (e.g. the [Gitpod JetBrains Gateway](https://plugins.jetbrains.com/plugin/18438-gitpod-gateway) plugin).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/pycharm","loc":{"lines":{"from":53,"to":53}}}}],["1163",{"pageContent":"### Install on JetBrains Client\n\nThe JetBrains client runs on the users local machine and can be thought of as the user interface to the remote {title} backend. Client plugins contribute to the user interface aspect of the IDE experience (e.g. keyboard shortcuts and themes).\n\nOnce installed, **a client plugin is enabled for all Gitpod workspaces the user opens** (if the workspace is running the exact same version of the {title} backend where the plugin was initially installed).\n\nTo install a plugin on **JetBrains Client** follow these steps:\n\n-   In **JetBrains Client** open the IDE settings and select **Plugins**.\n-   Find the plugin in the **Marketplace** and click **Install**.\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Install a plugin on JetBrains Client\" src=\"/images/editors/install-local-jb-plugin.png\">\n    <figcaption>Install a plugin on JetBrains Client</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/pycharm","loc":{"lines":{"from":55,"to":69}}}}],["1164",{"pageContent":"### Install on {title} backend\n\nThe JetBrains {title} backend runs within the remote Gitpod workspace. Backend plugins contribute functionality requiring access to IDE experiences such as the remote filesystem (e.g. contributing support of languages and frameworks).\n\nWhen installed, **a backend plugin only applies to the currently running Gitpod workspace** and is not associated with a user. However, a plugin can be [preconfigured for all users of a repository](#preconfigure-for-repository) so that the plugin is enabled with every workspace start.\n\nIt is not currently possible to install a backend plugin that applies to all workspaces of a Gitpod user or organization.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/pycharm","loc":{"lines":{"from":71,"to":77}}}}],["1165",{"pageContent":"#### Install for your current workspace\n\nYou can install a plugin only for **your current workspace** following these steps:\n\n-   In **JetBrains Client** open the IDE settings and select **Plugins On Host**.\n-   Find the plugin in the **Marketplace** and click **Install**.\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Install a plugin on {title} backend\" src=\"/images/editors/install-remote-jb-plugin.png\">\n    <figcaption>Install a plugin on {title} backend</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/pycharm","loc":{"lines":{"from":79,"to":89}}}}],["1166",{"pageContent":"#### Preconfigure for repository\n\n> JetBrains plugin support is currently in [Beta](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/6576).\n\nYou can share a plugin on **{title} backend** with everybody working on the repository by adding it to [.gitpod.yml](/docs/references/gitpod-yml) and pushing to your Git repository.\nEach workspace is preconfigured with plugins from the `gitpod.yml` configuration file. For example:\n\n```yml\njetbrains:\n    pycharm:\n        plugins:\n            - zielu.gittoolbox\n            - izhangzhihao.rainbow.brackets\n```\n\nYou can find the **pluginId** on the [JetBrains Marketplace](https://plugins.jetbrains.com) page:\n\n-   Find a page of the required plugin.\n-   Select the **Versions** tab.\n-   Click any version to copy the **pluginId** (short name such as `org.rust.lang`) of the plugin you want to install.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/pycharm","loc":{"lines":{"from":91,"to":110}}}}],["1167",{"pageContent":"#### Install for your user\n\nIt is not yet possible to install plugins on **{title} backend** for your user to share across all your Gitpod workspaces.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/pycharm","loc":{"lines":{"from":112,"to":114}}}}],["1168",{"pageContent":"## Configure JVM options\n\n> Configuration of JVM options is currently in [Alpha](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/8704).\n\nYou can adjust JVM options for {title} backend, especially if you want to increase the `-Xmx` memory size. For example:\n\n```yml\njetbrains:\n    pycharm:\n        vmoptions: '-Xmx4g'\n```\n\nFor more detailed information on JVM options, refer to [Common JVM Options](https://www.jetbrains.com/help/pycharm/tuning-the-ide.html#common-jvm-options) from JetBrains documentation.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/pycharm","loc":{"lines":{"from":116,"to":128}}}}],["1169",{"pageContent":"## Configure IDE settings\n\n> **Feedback needed:** The JetBrains Gitpod integration is currently beta. Gitpod [continues to collaborate with JetBrains](https://www.gitpod.io/blog/gitpod-jetbrains). The below shows how you can configure global settings with JetBrains. To leave feedback on the approach, please see this GitHub issue: [#6576](https://github.com/gitpod-io/gitpod/issues/6576). Also note that JetBrains is working on [comprehensive settings sync functionality](https://youtrack.jetbrains.com/issue/RDCT-1/Settings-synchronization).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/pycharm","loc":{"lines":{"from":130,"to":132}}}}],["1170",{"pageContent":"When running {title} locally, the JetBrains IDE applies [global settings](https://www.jetbrains.com/help/pycharm/configuring-project-and-ide-settings.html) to all projects on your machine. However when running in a remote context using [JetBrains Gateway](/docs/integrations/jetbrains-gateway), it's important to note that some IDE settings are configured on the [JetBrains Client](#on-jetbrains-client) and others in the [{title} backend](#on-title-backend) running in your Gitpod [Workspace](/docs/configure/workspaces). See below instructions for more.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/pycharm","loc":{"lines":{"from":134,"to":134}}}}],["1171",{"pageContent":"### On JetBrains Client\n\nIDE Settings that are configured on the JetBrains Client are stored on your local machine and don't have `On Host` label in the IDE settings. These IDE settings are reused if the workspace is running the exact same version of the {title} backend where the settings were initially configured.\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Configure IDE settings on JetBrains client\" src=\"/images/editors/jb-client-configure-settings-client.webp\">\n    <figcaption>JetBrains client settings don't have <code>On Host</code> label.</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/pycharm","loc":{"lines":{"from":136,"to":143}}}}],["1172",{"pageContent":"### On {title} backend\n\nSettings configured on {title} backend are stored in a Gitpod workspace and have `On Host` label in the IDE settings.\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Configure IDE settings on JetBrains client\" src=\"/images/editors/jb-backend-configure-settings.webp\">\n    <figcaption>{title} backend settings have `On Host` label.</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/pycharm","loc":{"lines":{"from":145,"to":152}}}}],["1173",{"pageContent":"### Configure IDE settings per project\n\nSome IDE settings cannot be configured via [environment variables](/docs/configure/projects/environment-variables#environment-variables) or through setting [vm options](#configure-jvm-options). These settings can only be set via the UI of JetBrains client, and must be manually copied to be syned between workspaces. The below steps detail how to configure your IDE settings for all the users of a given Gitpod project:\n\n**Step 1: Manually use JetBrains UI to configure settings** - Set your IDE settings as you normally would, using the JetBrains UI.\n\n**Step 2: Find generated IDE settings** - You will need to manually find any global settings generated by JetBrains backend within the following path: `/workspace/.config/JetBrains<-latest>/RemoteDev-PY/<your-project-name>/options`","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/pycharm","loc":{"lines":{"from":154,"to":160}}}}],["1174",{"pageContent":"**Step 3:** Move any relevant settings manually to a persistent location within your Gitpod project. Either via a [Workspace Image](/docs/configure/workspaces/workspace-image), or persisted in the version control of your project, for example by committing settings data to GitHub.\n\n**Include relevant IDE settings in your Workspace Image**\n\n-   `/home/gitpod/.gitpod/jetbrains/options` - This location applies settings to all JetBrains products (IntelliJ IDEA, GoLang, etc).\n-   `/home/gitpod/.gitpod/jetbrains/pycharm/options` - This location will apply settings only to the given IDE, e.g. {title}.\n\n**Commit relevant IDE settings to source control**\n\n-   `/workspace/<your-project-name>/.gitpod/jetbrains/options` - This location applies settings to all JetBrains products (IntelliJ IDEA, GoLang, etc).\n-   `/workspace/<your-project-name>/.gitpod/jetbrains/pycharm/options` - This location will apply settings only to the given IDE, e.g. {title}.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/pycharm","loc":{"lines":{"from":162,"to":172}}}}],["1175",{"pageContent":"For any further changes to your IDE settings, you will need to follow the above steps again.\n\n> **Note:** When locating and applying IDE settings, Gitpod will read the locations specified above in priority order. The locations specified first are overriden by the locations specified later.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/pycharm","loc":{"lines":{"from":174,"to":176}}}}],["1176",{"pageContent":"### Configure IDE settings per user\n\nTo configure IDE settings for your user only, and not all those using a project.\n\nFollow the instructions for [configuring IDE settings per project](#configure-ide-settings-per-project), but instead use [.dotfiles](/docs/configure/user-settings/dotfiles#dotfiles) rather than a workspace image or source control to store your IDE settings.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/pycharm","loc":{"lines":{"from":178,"to":182}}}}],["1177",{"pageContent":"## Indexing using Prebuilds\n\n> JetBrains Prebuilds is currently in [Alpha](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/6576).\n\nWhen you open the project {title} starts indexing to load modules and\nenable the core functionality like code completion and navigation.\nDepending on the size of your project indexing speed can vary significantly.\n\nYou can speed up the indexing of a project by applying these [general recommendations](https://www.jetbrains.com/help/pycharm/indexing.html).\nGitpod prebuilds allow you to improve it further by indexing before you start a new workspace.\n\nTo leverage it:\n\n-   configure prebuilds for your repository, refer to [Prebuilds](/docs/configure/projects/prebuilds);\n-   enable indexing for {title} in prebuilds by editing [.gitpod.yml](/docs/references/gitpod-yml) in your repository:\n\n```yml\njetbrains:\n    pycharm:\n        prebuilds:\n            version: stable","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/pycharm","loc":{"lines":{"from":184,"to":204}}}}],["1178",{"pageContent":"```\n\n-   push changes to your Git repository to apply.\n\nThe `version` property allows you to control whether to index for `stable`, `latest`, or `both` versions of {title} compatible with Gitpod.\nUsers can switch between `stable` and `latest` versions of {title} on the [user preferences](https://gitpod.io/preferences) page.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/pycharm","loc":{"lines":{"from":205,"to":210}}}}],["1179",{"pageContent":"## Workspace performance\n\nWhen using a Gitpod workspace you might experience performance issues caused by:\n\n-   An application using more resources than expected\n-   Resource consumption in adjacent containers running on the workspace node.\n\nIn your JetBrains IDE within the JetBrains Gateway [Backend Control Center](https://www.jetbrains.com/help/idea/work-inside-remote-project.html#control_center) you can find two metrics relating to your running workspace: `Workspace CPU` and `Workspace Memory`.\n\nThe remaining metrics you can find in the Backend Control Center regarding the node that your workspace is running on, and not the workspace itself.\n\n> **Note:** Performance information shown in the Backend Control Center is the same as the information that is shown when running the command [`gp top`](/docs/references/gitpod-cli#top) in your workspace, see the [Command Line Interface](/docs/references/gitpod-cli) documentation for more.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/pycharm","loc":{"lines":{"from":212,"to":223}}}}],["1180",{"pageContent":"![jetbrains performance](/images/jetbrains-gateway/jetbrains-performance-center.png)","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/pycharm","loc":{"lines":{"from":225,"to":225}}}}],["1181",{"pageContent":"## FAQs\n\n-   For the questions about supported IDEs and Editors in Gitpod, refer to [FAQs](/docs/references/ides-and-editors/faqs).\n\n-   For the general questions about JetBrains Remote Development, refer to refer to the general IDE <a href=\"https://www.jetbrains.com/help/pycharm/faq-about-remote-development.html\" target=\"_blank\">{title} FAQ</a>.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/pycharm","loc":{"lines":{"from":227,"to":231}}}}],["1182",{"pageContent":"### Are there any JetBrains optimizations I can make if my workspace is slow?\n\nDebugging performance can be challenging, as performance issues can depend on many factors such as how Gitpod is configured (if you're operating Gitpod on Self-Hosted). However, there are some ways you can gather performance information and optimise your JetBrains IDE setup with Gitpod:\n\n1. Firstly, to gather information on performance, you can [view workspace performance metrics from within the IDE](/docs/references/ides-and-editors/intellij#workspace-performance) in the Backend Control Center, or by using [`gp top`](/docs/references/gitpod-cli#top).\n2. You may also want to try adjusting the Max Heap Size allocated to the JetBrains Backend in the Settings tab of the Backend Control Center. If updating this setting helps your performance, you can set the `vmoptions` value for your JetBrains IDE in your `.gitpod.yml`.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/pycharm","loc":{"lines":{"from":233,"to":238}}}}],["1183",{"pageContent":"> **Note:** If the performance metrics show that your workspace is hitting its resource limits, and you are using Gitpod Self-Hosted, it might make sense to consider changing the resource configuration for your workspaces. This can be done via a [config-patch](/docs/configure/self-hosted/latest/config-patches). Configuring workspace resources is not yet available on SaaS.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/pycharm","loc":{"lines":{"from":240,"to":240}}}}],["1184",{"pageContent":"## Troubleshooting\n\n-   [What should I do if JetBrains Gateway and Gitpod aren’t working?](/docs/help/troubleshooting#what-should-i-do-if-jetbrains-gateway-and-gitpod-arent-working)\n-   [Gitpod logs in JetBrains Client](/docs/help/troubleshooting#gitpod-logs-in-jetbrains-client)\n-   [Gitpod logs in JetBrains Gateway](/docs/help/troubleshooting#gitpod-logs-in-jetbrains-gateway)","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/pycharm","loc":{"lines":{"from":242,"to":246}}}}],["1185",{"pageContent":"---\nsection: ides-and-editors\ntitle: Rider\n---\n\n<!--\n  This document is auto generated from generators/ide/jb-product.md\n  Edit this file instead and run `yarn generate:jb`to apply.\n-->\n\n<!-- prettier-ignore -->\n# Rider\n\n> {title} is currently in [Beta](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/6576).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rider","loc":{"lines":{"from":1,"to":14}}}}],["1186",{"pageContent":"## Getting started","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rider","loc":{"lines":{"from":16,"to":16}}}}],["1187",{"pageContent":"1. **Install [JetBrains Gateway](https://www.jetbrains.com/help/rider/Remote_development-a.html#gateway#gateway)** - With the [JetBrains Gateway and Gitpod](/docs/integrations/jetbrains-gateway) plugin you can create and manage your latest 20 Gitpod workspaces.\n2. **Install the Gitpod plugin** - Open JetBrains Gateway and you'll see the Gitpod logo on the main page. Click \"install\" to install the [Gitpod plugin](https://plugins.jetbrains.com/plugin/18438-gitpod-gateway) for JetBrains Gateway.\n3. **Update your Gitpod preferences** - Select {title} on the [Gitpod preferences page](https://gitpod.io/preferences) which will set {title} as your default IDE for future workspace starts.\n4. **Start (or restart) your workspace** - Either start a workspace directly from within the [JetBrains Gateway](/docs/integrations/jetbrains-gateway) via the Gitpod plugin **OR** open a new workspace directly in Gitpod where on workspace start you will be prompted to open {title} for that workspace.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rider","loc":{"lines":{"from":18,"to":21}}}}],["1188",{"pageContent":"<figure>\n  <video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" src=\"/images/editors/select-jetbrains-ide.webm\" type=\"video/webm\"></video>\n  <figcaption>Updating Gitpod IDE preferences to {title}</figcaption>\n</figure>\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Opening a JetBrains IDE from Gitpod\" src=\"/images/editors/opening-the-thin-jetbrains-client.webm\" type=\"video/webm\"></video>\n    <figcaption>Opening a JetBrains IDE from Gitpod</figcaption>\n</figure>\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Updating the Gitpod plugin in JetBrains Gateway\" src=\"/images/editors/update-jetbrains-gateway-settings.webm\" type=\"video/webm\"></video>\n    <figcaption>Updating the Gitpod plugin in JetBrains Gateway</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rider","loc":{"lines":{"from":23,"to":36}}}}],["1189",{"pageContent":"<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Opening a JetBrains IDE from Gateway\" src=\"/images/editors/open-from-jetbrains-gateway.webm\" type=\"video/webm\"></video>\n    <figcaption>Opening a JetBrains IDE from Gateway</figcaption>\n</figure>\n\n**Important:** You must restart any started workspaces for your IDE preferences to take effect.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rider","loc":{"lines":{"from":38,"to":43}}}}],["1190",{"pageContent":"## Prerequisites\n\nTo successfully use Rider and load a .NET project, your workspace needs the .NET Framework or a compatible alternative, to be installed. The [default workspace image](/docs/configure/workspaces/workspace-image#use-a-public-docker-image) does not come with .NET pre-installed, so you have two options:\n\n**Using the .NET workspace image (Recommended)**\n\n1. Create a `.gitpod.yml` file\n2. Set the `image` property to `image: gitpod/workspace-dotnet:latest` or alternatively, [use a custom Dockerfile](https://www.gitpod.io/docs/configure/workspaces/workspace-image#use-a-custom-dockerfile)\n\nIf you need a specific version of .NET, check out our [Dockerfile](https://github.com/gitpod-io/workspace-images/blob/main/chunks/tool-dotnet/Dockerfile) so you can create your own, specifying the version you need.\n\nFor additional examples, check out [.NET in Gitpod](/docs/introduction/languages/dotnet).\n\n**Manually install .NET**","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rider","loc":{"lines":{"from":45,"to":58}}}}],["1191",{"pageContent":"For additional examples, check out [.NET in Gitpod](/docs/introduction/languages/dotnet).\n\n**Manually install .NET**\n\n1. Using a workspace terminal, install `dotnet` or a compatible alternative\n2. Restart the IDE\n\nNote: manually installed dependencies are only available in the current workspace, when you start a new workspace dotnet will not be pre-installed, for this reason we recommend the first option.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rider","loc":{"lines":{"from":58,"to":65}}}}],["1192",{"pageContent":"## Install Plugins\n\n> This section relates to plugin management when using JetBrains IDEs in a remote development context. For information on regular plugin management, refer to <a href=\"https://www.jetbrains.com/help/rider/Managing_Plugins.html\" target=\"_blank\">{title} docs</a>.\n\nUnlike with regular development, JetBrains [Remote development](https://www.jetbrains.com/help/rider/Remote_development_overview.html#defs) with {title} allows users to install plugins in different locations:","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rider","loc":{"lines":{"from":67,"to":71}}}}],["1193",{"pageContent":"-   [**{title} backend plugins**](#install-on-title-backend) - The JetBrains {title} backend runs within the remote Gitpod workspace. Backend plugins contribute functionality for IDE experiences relating to the filesystem, tools or languages and frameworks. When installed, **a backend plugin only applies to the currently running Gitpod workspace** and is not associated with a user. However, a plugin can be [preconfigured for all users of a repository](#preconfigure-for-repository) so that the plugin is enabled with every workspace start. It is not currently possible to install a backend plugin that applies to all workspaces of a Gitpod user or organization.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rider","loc":{"lines":{"from":73,"to":73}}}}],["1194",{"pageContent":"-   [**JetBrains Client plugins**](#install-on-jetbrains-client) - The JetBrains client runs on the users local machine and can be thought of as the user interface to the remote {title} backend. Client plugins are different to backend plugins as they contribute to the user interface aspect of the IDE experience (e.g. keyboard shortcuts and themes). Once installed, **a client plugin is enabled for all Gitpod workspaces the user opens** (if the workspace is running the exact same version of the {title} backend where the plugin was initially installed).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rider","loc":{"lines":{"from":74,"to":74}}}}],["1195",{"pageContent":"-   [**JetBrains Gateway plugins**](/docs/integrations/jetbrains-gateway#getting-started) - The JetBrains Gateway is an application downloaded onto a users local machine which allows users to start JetBrains Clients that are compatible with the {title} backend, running in a Gitpod workspace. JetBrains Gateway plugins are installed directly in JetBrains Gateway and contribute to remote development connection experiences (e.g. the [Gitpod JetBrains Gateway](https://plugins.jetbrains.com/plugin/18438-gitpod-gateway) plugin).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rider","loc":{"lines":{"from":75,"to":75}}}}],["1196",{"pageContent":"### Install on JetBrains Client\n\nThe JetBrains client runs on the users local machine and can be thought of as the user interface to the remote {title} backend. Client plugins contribute to the user interface aspect of the IDE experience (e.g. keyboard shortcuts and themes).\n\nOnce installed, **a client plugin is enabled for all Gitpod workspaces the user opens** (if the workspace is running the exact same version of the {title} backend where the plugin was initially installed).\n\nTo install a plugin on **JetBrains Client** follow these steps:\n\n-   In **JetBrains Client** open the IDE settings and select **Plugins**.\n-   Find the plugin in the **Marketplace** and click **Install**.\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Install a plugin on JetBrains Client\" src=\"/images/editors/install-local-jb-plugin.png\">\n    <figcaption>Install a plugin on JetBrains Client</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rider","loc":{"lines":{"from":77,"to":91}}}}],["1197",{"pageContent":"### Install on {title} backend\n\nThe JetBrains {title} backend runs within the remote Gitpod workspace. Backend plugins contribute functionality requiring access to IDE experiences such as the remote filesystem (e.g. contributing support of languages and frameworks).\n\nWhen installed, **a backend plugin only applies to the currently running Gitpod workspace** and is not associated with a user. However, a plugin can be [preconfigured for all users of a repository](#preconfigure-for-repository) so that the plugin is enabled with every workspace start.\n\nIt is not currently possible to install a backend plugin that applies to all workspaces of a Gitpod user or organization.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rider","loc":{"lines":{"from":93,"to":99}}}}],["1198",{"pageContent":"#### Install for your current workspace\n\nYou can install a plugin only for **your current workspace** following these steps:\n\n-   In **JetBrains Client** open the IDE settings and select **Plugins On Host**.\n-   Find the plugin in the **Marketplace** and click **Install**.\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Install a plugin on {title} backend\" src=\"/images/editors/install-remote-jb-plugin.png\">\n    <figcaption>Install a plugin on {title} backend</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rider","loc":{"lines":{"from":101,"to":111}}}}],["1199",{"pageContent":"#### Preconfigure for repository\n\n> JetBrains plugin support is currently in [Beta](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/6576).\n\nYou can share a plugin on **{title} backend** with everybody working on the repository by adding it to [.gitpod.yml](/docs/references/gitpod-yml) and pushing to your Git repository.\nEach workspace is preconfigured with plugins from the `gitpod.yml` configuration file. For example:\n\n```yml\njetbrains:\n    rider:\n        plugins:\n            - zielu.gittoolbox\n            - izhangzhihao.rainbow.brackets\n```\n\nYou can find the **pluginId** on the [JetBrains Marketplace](https://plugins.jetbrains.com) page:\n\n-   Find a page of the required plugin.\n-   Select the **Versions** tab.\n-   Click any version to copy the **pluginId** (short name such as `org.rust.lang`) of the plugin you want to install.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rider","loc":{"lines":{"from":113,"to":132}}}}],["1200",{"pageContent":"#### Install for your user\n\nIt is not yet possible to install plugins on **{title} backend** for your user to share across all your Gitpod workspaces.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rider","loc":{"lines":{"from":134,"to":136}}}}],["1201",{"pageContent":"## Configure JVM options\n\n> Configuration of JVM options is currently in [Alpha](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/8704).\n\nYou can adjust JVM options for {title} backend, especially if you want to increase the `-Xmx` memory size. For example:\n\n```yml\njetbrains:\n    rider:\n        vmoptions: '-Xmx4g'\n```\n\nFor more detailed information on JVM options, refer to [Common JVM Options](https://www.jetbrains.com/help/rider/Tuning_the_IDE.html#common-jvm-options) from JetBrains documentation.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rider","loc":{"lines":{"from":138,"to":150}}}}],["1202",{"pageContent":"## Configure IDE settings\n\n> **Feedback needed:** The JetBrains Gitpod integration is currently beta. Gitpod [continues to collaborate with JetBrains](https://www.gitpod.io/blog/gitpod-jetbrains). The below shows how you can configure global settings with JetBrains. To leave feedback on the approach, please see this GitHub issue: [#6576](https://github.com/gitpod-io/gitpod/issues/6576). Also note that JetBrains is working on [comprehensive settings sync functionality](https://youtrack.jetbrains.com/issue/RDCT-1/Settings-synchronization).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rider","loc":{"lines":{"from":152,"to":154}}}}],["1203",{"pageContent":"When running {title} locally, the JetBrains IDE applies [global settings](https://www.jetbrains.com/help/rider/Rider_Settings.html) to all projects on your machine. However when running in a remote context using [JetBrains Gateway](/docs/integrations/jetbrains-gateway), it's important to note that some IDE settings are configured on the [JetBrains Client](#on-jetbrains-client) and others in the [{title} backend](#on-title-backend) running in your Gitpod [Workspace](/docs/configure/workspaces). See below instructions for more.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rider","loc":{"lines":{"from":156,"to":156}}}}],["1204",{"pageContent":"### On JetBrains Client\n\nIDE Settings that are configured on the JetBrains Client are stored on your local machine and don't have `On Host` label in the IDE settings. These IDE settings are reused if the workspace is running the exact same version of the {title} backend where the settings were initially configured.\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Configure IDE settings on JetBrains client\" src=\"/images/editors/jb-client-configure-settings-client.webp\">\n    <figcaption>JetBrains client settings don't have <code>On Host</code> label.</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rider","loc":{"lines":{"from":158,"to":165}}}}],["1205",{"pageContent":"### On {title} backend\n\nSettings configured on {title} backend are stored in a Gitpod workspace and have `On Host` label in the IDE settings.\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Configure IDE settings on JetBrains client\" src=\"/images/editors/jb-backend-configure-settings.webp\">\n    <figcaption>{title} backend settings have `On Host` label.</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rider","loc":{"lines":{"from":167,"to":174}}}}],["1206",{"pageContent":"### Configure IDE settings per project\n\nSome IDE settings cannot be configured via [environment variables](/docs/configure/projects/environment-variables#environment-variables) or through setting [vm options](#configure-jvm-options). These settings can only be set via the UI of JetBrains client, and must be manually copied to be syned between workspaces. The below steps detail how to configure your IDE settings for all the users of a given Gitpod project:\n\n**Step 1: Manually use JetBrains UI to configure settings** - Set your IDE settings as you normally would, using the JetBrains UI.\n\n**Step 2: Find generated IDE settings** - You will need to manually find any global settings generated by JetBrains backend within the following path: `/workspace/.config/JetBrains<-latest>/RemoteDev-/<your-project-name>/options`","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rider","loc":{"lines":{"from":176,"to":182}}}}],["1207",{"pageContent":"**Step 3:** Move any relevant settings manually to a persistent location within your Gitpod project. Either via a [Workspace Image](/docs/configure/workspaces/workspace-image), or persisted in the version control of your project, for example by committing settings data to GitHub.\n\n**Include relevant IDE settings in your Workspace Image**\n\n-   `/home/gitpod/.gitpod/jetbrains/options` - This location applies settings to all JetBrains products (IntelliJ IDEA, GoLang, etc).\n-   `/home/gitpod/.gitpod/jetbrains/rider/options` - This location will apply settings only to the given IDE, e.g. {title}.\n\n**Commit relevant IDE settings to source control**\n\n-   `/workspace/<your-project-name>/.gitpod/jetbrains/options` - This location applies settings to all JetBrains products (IntelliJ IDEA, GoLang, etc).\n-   `/workspace/<your-project-name>/.gitpod/jetbrains/rider/options` - This location will apply settings only to the given IDE, e.g. {title}.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rider","loc":{"lines":{"from":184,"to":194}}}}],["1208",{"pageContent":"For any further changes to your IDE settings, you will need to follow the above steps again.\n\n> **Note:** When locating and applying IDE settings, Gitpod will read the locations specified above in priority order. The locations specified first are overriden by the locations specified later.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rider","loc":{"lines":{"from":196,"to":198}}}}],["1209",{"pageContent":"### Configure IDE settings per user\n\nTo configure IDE settings for your user only, and not all those using a project.\n\nFollow the instructions for [configuring IDE settings per project](#configure-ide-settings-per-project), but instead use [.dotfiles](/docs/configure/user-settings/dotfiles#dotfiles) rather than a workspace image or source control to store your IDE settings.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rider","loc":{"lines":{"from":200,"to":204}}}}],["1210",{"pageContent":"## Indexing using Prebuilds\n\nCurrently, prebuilds for Rider are not supported. To leave feedback or check for updates, see [gitpod/issues/6740](https://github.com/gitpod-io/gitpod/issues/6740).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rider","loc":{"lines":{"from":206,"to":208}}}}],["1211",{"pageContent":"## Workspace performance\n\nWhen using a Gitpod workspace you might experience performance issues caused by:\n\n-   An application using more resources than expected\n-   Resource consumption in adjacent containers running on the workspace node.\n\nIn your JetBrains IDE within the JetBrains Gateway [Backend Control Center](https://www.jetbrains.com/help/idea/work-inside-remote-project.html#control_center) you can find two metrics relating to your running workspace: `Workspace CPU` and `Workspace Memory`.\n\nThe remaining metrics you can find in the Backend Control Center regarding the node that your workspace is running on, and not the workspace itself.\n\n> **Note:** Performance information shown in the Backend Control Center is the same as the information that is shown when running the command [`gp top`](/docs/references/gitpod-cli#top) in your workspace, see the [Command Line Interface](/docs/references/gitpod-cli) documentation for more.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rider","loc":{"lines":{"from":210,"to":221}}}}],["1212",{"pageContent":"![jetbrains performance](/images/jetbrains-gateway/jetbrains-performance-center.png)","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rider","loc":{"lines":{"from":223,"to":223}}}}],["1213",{"pageContent":"## FAQs\n\n-   For the questions about supported IDEs and Editors in Gitpod, refer to [FAQs](/docs/references/ides-and-editors/faqs).\n\n-   For the general questions about JetBrains Remote Development, refer to refer to the general IDE <a href=\"https://www.jetbrains.com/help/rider/FAQ_about_remote_development.html\" target=\"_blank\">{title} FAQ</a>.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rider","loc":{"lines":{"from":225,"to":229}}}}],["1214",{"pageContent":"### Are there any JetBrains optimizations I can make if my workspace is slow?\n\nDebugging performance can be challenging, as performance issues can depend on many factors such as how Gitpod is configured (if you're operating Gitpod on Self-Hosted). However, there are some ways you can gather performance information and optimise your JetBrains IDE setup with Gitpod:\n\n1. Firstly, to gather information on performance, you can [view workspace performance metrics from within the IDE](/docs/references/ides-and-editors/intellij#workspace-performance) in the Backend Control Center, or by using [`gp top`](/docs/references/gitpod-cli#top).\n2. You may also want to try adjusting the Max Heap Size allocated to the JetBrains Backend in the Settings tab of the Backend Control Center. If updating this setting helps your performance, you can set the `vmoptions` value for your JetBrains IDE in your `.gitpod.yml`.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rider","loc":{"lines":{"from":231,"to":236}}}}],["1215",{"pageContent":"> **Note:** If the performance metrics show that your workspace is hitting its resource limits, and you are using Gitpod Self-Hosted, it might make sense to consider changing the resource configuration for your workspaces. This can be done via a [config-patch](/docs/configure/self-hosted/latest/config-patches). Configuring workspace resources is not yet available on SaaS.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rider","loc":{"lines":{"from":238,"to":238}}}}],["1216",{"pageContent":"## Troubleshooting\n\n-   [What should I do if JetBrains Gateway and Gitpod aren’t working?](/docs/help/troubleshooting#what-should-i-do-if-jetbrains-gateway-and-gitpod-arent-working)\n-   [Gitpod logs in JetBrains Client](/docs/help/troubleshooting#gitpod-logs-in-jetbrains-client)\n-   [Gitpod logs in JetBrains Gateway](/docs/help/troubleshooting#gitpod-logs-in-jetbrains-gateway)","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rider","loc":{"lines":{"from":240,"to":244}}}}],["1217",{"pageContent":"---\nsection: ides-and-editors\ntitle: RubyMine\n---\n\n<!--\n  This document is auto generated from generators/ide/jb-product.md\n  Edit this file instead and run `yarn generate:jb`to apply.\n-->\n\n<!-- prettier-ignore -->\n# RubyMine\n\n> {title} is currently in [Beta](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/6576).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rubymine","loc":{"lines":{"from":1,"to":14}}}}],["1218",{"pageContent":"## Getting started","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rubymine","loc":{"lines":{"from":16,"to":16}}}}],["1219",{"pageContent":"1. **Install [JetBrains Gateway](https://www.jetbrains.com/help/ruby/remote-development-a.html#gateway)** - With the [JetBrains Gateway and Gitpod](/docs/integrations/jetbrains-gateway) plugin you can create and manage your latest 20 Gitpod workspaces.\n2. **Install the Gitpod plugin** - Open JetBrains Gateway and you'll see the Gitpod logo on the main page. Click \"install\" to install the [Gitpod plugin](https://plugins.jetbrains.com/plugin/18438-gitpod-gateway) for JetBrains Gateway.\n3. **Update your Gitpod preferences** - Select {title} on the [Gitpod preferences page](https://gitpod.io/preferences) which will set {title} as your default IDE for future workspace starts.\n4. **Start (or restart) your workspace** - Either start a workspace directly from within the [JetBrains Gateway](/docs/integrations/jetbrains-gateway) via the Gitpod plugin **OR** open a new workspace directly in Gitpod where on workspace start you will be prompted to open {title} for that workspace.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rubymine","loc":{"lines":{"from":18,"to":21}}}}],["1220",{"pageContent":"<figure>\n  <video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" src=\"/images/editors/select-jetbrains-ide.webm\" type=\"video/webm\"></video>\n  <figcaption>Updating Gitpod IDE preferences to {title}</figcaption>\n</figure>\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Opening a JetBrains IDE from Gitpod\" src=\"/images/editors/opening-the-thin-jetbrains-client.webm\" type=\"video/webm\"></video>\n    <figcaption>Opening a JetBrains IDE from Gitpod</figcaption>\n</figure>\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Updating the Gitpod plugin in JetBrains Gateway\" src=\"/images/editors/update-jetbrains-gateway-settings.webm\" type=\"video/webm\"></video>\n    <figcaption>Updating the Gitpod plugin in JetBrains Gateway</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rubymine","loc":{"lines":{"from":23,"to":36}}}}],["1221",{"pageContent":"<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Opening a JetBrains IDE from Gateway\" src=\"/images/editors/open-from-jetbrains-gateway.webm\" type=\"video/webm\"></video>\n    <figcaption>Opening a JetBrains IDE from Gateway</figcaption>\n</figure>\n\n**Important:** You must restart any started workspaces for your IDE preferences to take effect.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rubymine","loc":{"lines":{"from":38,"to":43}}}}],["1222",{"pageContent":"## Install Plugins\n\n> This section relates to plugin management when using JetBrains IDEs in a remote development context. For information on regular plugin management, refer to <a href=\"https://www.jetbrains.com/help/ruby/managing-plugins.html\" target=\"_blank\">{title} docs</a>.\n\nUnlike with regular development, JetBrains [Remote development](https://www.jetbrains.com/help/ruby/remote-development-overview.html#defs) with {title} allows users to install plugins in different locations:","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rubymine","loc":{"lines":{"from":45,"to":49}}}}],["1223",{"pageContent":"-   [**{title} backend plugins**](#install-on-title-backend) - The JetBrains {title} backend runs within the remote Gitpod workspace. Backend plugins contribute functionality for IDE experiences relating to the filesystem, tools or languages and frameworks. When installed, **a backend plugin only applies to the currently running Gitpod workspace** and is not associated with a user. However, a plugin can be [preconfigured for all users of a repository](#preconfigure-for-repository) so that the plugin is enabled with every workspace start. It is not currently possible to install a backend plugin that applies to all workspaces of a Gitpod user or organization.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rubymine","loc":{"lines":{"from":51,"to":51}}}}],["1224",{"pageContent":"-   [**JetBrains Client plugins**](#install-on-jetbrains-client) - The JetBrains client runs on the users local machine and can be thought of as the user interface to the remote {title} backend. Client plugins are different to backend plugins as they contribute to the user interface aspect of the IDE experience (e.g. keyboard shortcuts and themes). Once installed, **a client plugin is enabled for all Gitpod workspaces the user opens** (if the workspace is running the exact same version of the {title} backend where the plugin was initially installed).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rubymine","loc":{"lines":{"from":52,"to":52}}}}],["1225",{"pageContent":"-   [**JetBrains Gateway plugins**](/docs/integrations/jetbrains-gateway#getting-started) - The JetBrains Gateway is an application downloaded onto a users local machine which allows users to start JetBrains Clients that are compatible with the {title} backend, running in a Gitpod workspace. JetBrains Gateway plugins are installed directly in JetBrains Gateway and contribute to remote development connection experiences (e.g. the [Gitpod JetBrains Gateway](https://plugins.jetbrains.com/plugin/18438-gitpod-gateway) plugin).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rubymine","loc":{"lines":{"from":53,"to":53}}}}],["1226",{"pageContent":"### Install on JetBrains Client\n\nThe JetBrains client runs on the users local machine and can be thought of as the user interface to the remote {title} backend. Client plugins contribute to the user interface aspect of the IDE experience (e.g. keyboard shortcuts and themes).\n\nOnce installed, **a client plugin is enabled for all Gitpod workspaces the user opens** (if the workspace is running the exact same version of the {title} backend where the plugin was initially installed).\n\nTo install a plugin on **JetBrains Client** follow these steps:\n\n-   In **JetBrains Client** open the IDE settings and select **Plugins**.\n-   Find the plugin in the **Marketplace** and click **Install**.\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Install a plugin on JetBrains Client\" src=\"/images/editors/install-local-jb-plugin.png\">\n    <figcaption>Install a plugin on JetBrains Client</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rubymine","loc":{"lines":{"from":55,"to":69}}}}],["1227",{"pageContent":"### Install on {title} backend\n\nThe JetBrains {title} backend runs within the remote Gitpod workspace. Backend plugins contribute functionality requiring access to IDE experiences such as the remote filesystem (e.g. contributing support of languages and frameworks).\n\nWhen installed, **a backend plugin only applies to the currently running Gitpod workspace** and is not associated with a user. However, a plugin can be [preconfigured for all users of a repository](#preconfigure-for-repository) so that the plugin is enabled with every workspace start.\n\nIt is not currently possible to install a backend plugin that applies to all workspaces of a Gitpod user or organization.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rubymine","loc":{"lines":{"from":71,"to":77}}}}],["1228",{"pageContent":"#### Install for your current workspace\n\nYou can install a plugin only for **your current workspace** following these steps:\n\n-   In **JetBrains Client** open the IDE settings and select **Plugins On Host**.\n-   Find the plugin in the **Marketplace** and click **Install**.\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Install a plugin on {title} backend\" src=\"/images/editors/install-remote-jb-plugin.png\">\n    <figcaption>Install a plugin on {title} backend</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rubymine","loc":{"lines":{"from":79,"to":89}}}}],["1229",{"pageContent":"#### Preconfigure for repository\n\n> JetBrains plugin support is currently in [Beta](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/6576).\n\nYou can share a plugin on **{title} backend** with everybody working on the repository by adding it to [.gitpod.yml](/docs/references/gitpod-yml) and pushing to your Git repository.\nEach workspace is preconfigured with plugins from the `gitpod.yml` configuration file. For example:\n\n```yml\njetbrains:\n    rubymine:\n        plugins:\n            - zielu.gittoolbox\n            - izhangzhihao.rainbow.brackets\n```\n\nYou can find the **pluginId** on the [JetBrains Marketplace](https://plugins.jetbrains.com) page:\n\n-   Find a page of the required plugin.\n-   Select the **Versions** tab.\n-   Click any version to copy the **pluginId** (short name such as `org.rust.lang`) of the plugin you want to install.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rubymine","loc":{"lines":{"from":91,"to":110}}}}],["1230",{"pageContent":"#### Install for your user\n\nIt is not yet possible to install plugins on **{title} backend** for your user to share across all your Gitpod workspaces.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rubymine","loc":{"lines":{"from":112,"to":114}}}}],["1231",{"pageContent":"## Configure JVM options\n\n> Configuration of JVM options is currently in [Alpha](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/8704).\n\nYou can adjust JVM options for {title} backend, especially if you want to increase the `-Xmx` memory size. For example:\n\n```yml\njetbrains:\n    rubymine:\n        vmoptions: '-Xmx4g'\n```\n\nFor more detailed information on JVM options, refer to [Common JVM Options](https://www.jetbrains.com/help/ruby/tuning-the-ide.html#common-jvm-options) from JetBrains documentation.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rubymine","loc":{"lines":{"from":116,"to":128}}}}],["1232",{"pageContent":"## Configure IDE settings\n\n> **Feedback needed:** The JetBrains Gitpod integration is currently beta. Gitpod [continues to collaborate with JetBrains](https://www.gitpod.io/blog/gitpod-jetbrains). The below shows how you can configure global settings with JetBrains. To leave feedback on the approach, please see this GitHub issue: [#6576](https://github.com/gitpod-io/gitpod/issues/6576). Also note that JetBrains is working on [comprehensive settings sync functionality](https://youtrack.jetbrains.com/issue/RDCT-1/Settings-synchronization).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rubymine","loc":{"lines":{"from":130,"to":132}}}}],["1233",{"pageContent":"When running {title} locally, the JetBrains IDE applies [global settings](https://www.jetbrains.com/help/ruby/configuring-project-and-ide-settings.html) to all projects on your machine. However when running in a remote context using [JetBrains Gateway](/docs/integrations/jetbrains-gateway), it's important to note that some IDE settings are configured on the [JetBrains Client](#on-jetbrains-client) and others in the [{title} backend](#on-title-backend) running in your Gitpod [Workspace](/docs/configure/workspaces). See below instructions for more.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rubymine","loc":{"lines":{"from":134,"to":134}}}}],["1234",{"pageContent":"### On JetBrains Client\n\nIDE Settings that are configured on the JetBrains Client are stored on your local machine and don't have `On Host` label in the IDE settings. These IDE settings are reused if the workspace is running the exact same version of the {title} backend where the settings were initially configured.\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Configure IDE settings on JetBrains client\" src=\"/images/editors/jb-client-configure-settings-client.webp\">\n    <figcaption>JetBrains client settings don't have <code>On Host</code> label.</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rubymine","loc":{"lines":{"from":136,"to":143}}}}],["1235",{"pageContent":"### On {title} backend\n\nSettings configured on {title} backend are stored in a Gitpod workspace and have `On Host` label in the IDE settings.\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Configure IDE settings on JetBrains client\" src=\"/images/editors/jb-backend-configure-settings.webp\">\n    <figcaption>{title} backend settings have `On Host` label.</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rubymine","loc":{"lines":{"from":145,"to":152}}}}],["1236",{"pageContent":"### Configure IDE settings per project\n\nSome IDE settings cannot be configured via [environment variables](/docs/configure/projects/environment-variables#environment-variables) or through setting [vm options](#configure-jvm-options). These settings can only be set via the UI of JetBrains client, and must be manually copied to be syned between workspaces. The below steps detail how to configure your IDE settings for all the users of a given Gitpod project:\n\n**Step 1: Manually use JetBrains UI to configure settings** - Set your IDE settings as you normally would, using the JetBrains UI.\n\n**Step 2: Find generated IDE settings** - You will need to manually find any global settings generated by JetBrains backend within the following path: `/workspace/.config/JetBrains<-latest>/RemoteDev-RM/<your-project-name>/options`","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rubymine","loc":{"lines":{"from":154,"to":160}}}}],["1237",{"pageContent":"**Step 3:** Move any relevant settings manually to a persistent location within your Gitpod project. Either via a [Workspace Image](/docs/configure/workspaces/workspace-image), or persisted in the version control of your project, for example by committing settings data to GitHub.\n\n**Include relevant IDE settings in your Workspace Image**\n\n-   `/home/gitpod/.gitpod/jetbrains/options` - This location applies settings to all JetBrains products (IntelliJ IDEA, GoLang, etc).\n-   `/home/gitpod/.gitpod/jetbrains/rubymine/options` - This location will apply settings only to the given IDE, e.g. {title}.\n\n**Commit relevant IDE settings to source control**\n\n-   `/workspace/<your-project-name>/.gitpod/jetbrains/options` - This location applies settings to all JetBrains products (IntelliJ IDEA, GoLang, etc).\n-   `/workspace/<your-project-name>/.gitpod/jetbrains/rubymine/options` - This location will apply settings only to the given IDE, e.g. {title}.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rubymine","loc":{"lines":{"from":162,"to":172}}}}],["1238",{"pageContent":"For any further changes to your IDE settings, you will need to follow the above steps again.\n\n> **Note:** When locating and applying IDE settings, Gitpod will read the locations specified above in priority order. The locations specified first are overriden by the locations specified later.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rubymine","loc":{"lines":{"from":174,"to":176}}}}],["1239",{"pageContent":"### Configure IDE settings per user\n\nTo configure IDE settings for your user only, and not all those using a project.\n\nFollow the instructions for [configuring IDE settings per project](#configure-ide-settings-per-project), but instead use [.dotfiles](/docs/configure/user-settings/dotfiles#dotfiles) rather than a workspace image or source control to store your IDE settings.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rubymine","loc":{"lines":{"from":178,"to":182}}}}],["1240",{"pageContent":"## Indexing using Prebuilds\n\n> JetBrains Prebuilds is currently in [Alpha](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/6576).\n\nWhen you open the project {title} starts indexing to load modules and\nenable the core functionality like code completion and navigation.\nDepending on the size of your project indexing speed can vary significantly.\n\nYou can speed up the indexing of a project by applying these [general recommendations](https://www.jetbrains.com/help/ruby/indexing.html).\nGitpod prebuilds allow you to improve it further by indexing before you start a new workspace.\n\nTo leverage it:\n\n-   configure prebuilds for your repository, refer to [Prebuilds](/docs/configure/projects/prebuilds);\n-   enable indexing for {title} in prebuilds by editing [.gitpod.yml](/docs/references/gitpod-yml) in your repository:\n\n```yml\njetbrains:\n    rubymine:\n        prebuilds:\n            version: stable","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rubymine","loc":{"lines":{"from":184,"to":204}}}}],["1241",{"pageContent":"```\n\n-   push changes to your Git repository to apply.\n\nThe `version` property allows you to control whether to index for `stable`, `latest`, or `both` versions of {title} compatible with Gitpod.\nUsers can switch between `stable` and `latest` versions of {title} on the [user preferences](https://gitpod.io/preferences) page.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rubymine","loc":{"lines":{"from":205,"to":210}}}}],["1242",{"pageContent":"## Workspace performance\n\nWhen using a Gitpod workspace you might experience performance issues caused by:\n\n-   An application using more resources than expected\n-   Resource consumption in adjacent containers running on the workspace node.\n\nIn your JetBrains IDE within the JetBrains Gateway [Backend Control Center](https://www.jetbrains.com/help/idea/work-inside-remote-project.html#control_center) you can find two metrics relating to your running workspace: `Workspace CPU` and `Workspace Memory`.\n\nThe remaining metrics you can find in the Backend Control Center regarding the node that your workspace is running on, and not the workspace itself.\n\n> **Note:** Performance information shown in the Backend Control Center is the same as the information that is shown when running the command [`gp top`](/docs/references/gitpod-cli#top) in your workspace, see the [Command Line Interface](/docs/references/gitpod-cli) documentation for more.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rubymine","loc":{"lines":{"from":212,"to":223}}}}],["1243",{"pageContent":"![jetbrains performance](/images/jetbrains-gateway/jetbrains-performance-center.png)","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rubymine","loc":{"lines":{"from":225,"to":225}}}}],["1244",{"pageContent":"## FAQs\n\n-   For the questions about supported IDEs and Editors in Gitpod, refer to [FAQs](/docs/references/ides-and-editors/faqs).\n\n-   For the general questions about JetBrains Remote Development, refer to refer to the general IDE <a href=\"https://www.jetbrains.com/help/ruby/faq-about-remote-development.html\" target=\"_blank\">{title} FAQ</a>.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rubymine","loc":{"lines":{"from":227,"to":231}}}}],["1245",{"pageContent":"### Are there any JetBrains optimizations I can make if my workspace is slow?\n\nDebugging performance can be challenging, as performance issues can depend on many factors such as how Gitpod is configured (if you're operating Gitpod on Self-Hosted). However, there are some ways you can gather performance information and optimise your JetBrains IDE setup with Gitpod:\n\n1. Firstly, to gather information on performance, you can [view workspace performance metrics from within the IDE](/docs/references/ides-and-editors/intellij#workspace-performance) in the Backend Control Center, or by using [`gp top`](/docs/references/gitpod-cli#top).\n2. You may also want to try adjusting the Max Heap Size allocated to the JetBrains Backend in the Settings tab of the Backend Control Center. If updating this setting helps your performance, you can set the `vmoptions` value for your JetBrains IDE in your `.gitpod.yml`.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rubymine","loc":{"lines":{"from":233,"to":238}}}}],["1246",{"pageContent":"> **Note:** If the performance metrics show that your workspace is hitting its resource limits, and you are using Gitpod Self-Hosted, it might make sense to consider changing the resource configuration for your workspaces. This can be done via a [config-patch](/docs/configure/self-hosted/latest/config-patches). Configuring workspace resources is not yet available on SaaS.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rubymine","loc":{"lines":{"from":240,"to":240}}}}],["1247",{"pageContent":"## Troubleshooting\n\n-   [What should I do if JetBrains Gateway and Gitpod aren’t working?](/docs/help/troubleshooting#what-should-i-do-if-jetbrains-gateway-and-gitpod-arent-working)\n-   [Gitpod logs in JetBrains Client](/docs/help/troubleshooting#gitpod-logs-in-jetbrains-client)\n-   [Gitpod logs in JetBrains Gateway](/docs/help/troubleshooting#gitpod-logs-in-jetbrains-gateway)","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/rubymine","loc":{"lines":{"from":242,"to":246}}}}],["1248",{"pageContent":"---\nsection: ides-and-editors\ntitle: VS Code settings sync\n---\n\n<script>\n  import Keybind from \"$lib/components/keybind.svelte\";\n</script>\n\n# VS Code settings sync\n\nVS Code is beloved for its endless customization possibilities.\n\nHowever, you may come across the challenge of having many multiple VS Code instances needing to share the same extensions, themes and settings. Since every start of a [Gitpod workspace](https://www.gitpod.io/docs/introduction/learn-gitpod/one-workspace-per-task) is a new instance of VS Code, using [Settings Sync](https://code.visualstudio.com/docs/editor/settings-sync) helps you avoid re-setting your environment for each new workspace and embrace ephemeral Gitpod workspaces.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/settings-sync","loc":{"lines":{"from":1,"to":14}}}}],["1249",{"pageContent":"## How VS Code Setting Sync works\n\nOnce enabled, Settings Sync polls the backend to ensure that your settings are stored. To save network bandwidth and allow for more frequent synchronization only changed items are pushed to the server after the first sync.\n\nThe following settings are synced via Settings Sync:\n\n-   [VS Code preferences](https://code.visualstudio.com/docs/getstarted/settings)\n-   [Keybindings](https://code.visualstudio.com/docs/getstarted/keybindings)\n-   [Snippets](https://code.visualstudio.com/docs/editor/userdefinedsnippets)\n-   [Tasks](https://code.visualstudio.com/Docs/editor/tasks#_user-level-tasks)\n-   [Installed Extensions](https://code.visualstudio.com/docs/editor/extension-marketplace#_manage-extensions)\n-   [Global State](https://code.visualstudio.com/docs/editor/settings-sync#_sync-user-global-state-between-machines)","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/settings-sync","loc":{"lines":{"from":16,"to":27}}}}],["1250",{"pageContent":"## Gitpod vs Microsoft Settings Sync\n\nBy default, most desktop VS Code installations are configured to sync settings via a GitHub or a Microsoft account. These settings are synced to Microsoft's servers and are inaccessible to third-parties, including Gitpod. Due to this limitation of access to settings stored in Microsoft servers, Gitpod implements its own VS Code settings sync server. Gitpod **Settings Sync is enabled by default for VS Code in the browser, but must be configured for desktop**.\n\n### Enabling Settings Sync in VS Code Browser\n\nVS Code in the browser with Gitpod has Settings Sync enabled by default, syncing preferences to Gitpod's servers.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/settings-sync","loc":{"lines":{"from":29,"to":35}}}}],["1251",{"pageContent":"### Enabling Settings Sync in VS Code Desktop\n\n> **Notice:** As of version 1.81, Settings Sync in VS Code is experiencing issues, due to [an unanticipated change in the upstream VS Code API](https://github.com/microsoft/vscode/pull/187006). Whilst the issue is resolved, we recommend using an earlier version of VS Code, such as [1.80.2](https://code.visualstudio.com/updates/v1_80). For updates or feedback, see this issue: [#18573](https://github.com/gitpod-io/gitpod/issues/18573).\n\n1. Install and enable the [Gitpod extension](https://marketplace.visualstudio.com/items?itemName=gitpod.gitpod-desktop).\n\n**Note:** If you open VS Code Desktop directly from Gitpod, the Gitpod extension is automatically installed for you.\n\n<figure>\n<img class=\"shadow-medium rounded-xl max-w-md mt-x-small\" alt=\"The Gitpod VS Code Desktop plugin\" src=\"/images/editors/gitpod-extension.png\">\n    <figcaption>The Gitpod VS Code Desktop plugin</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/settings-sync","loc":{"lines":{"from":37,"to":48}}}}],["1252",{"pageContent":"2. Using the [Command Palette](https://code.visualstudio.com/api/ux-guidelines/command-palette) select: \"Settings Sync: Enable signing in with Gitpod\".\n\n![Enable Settings Sync with Gitpod](/images/editors/enable-signin-with-gitpod-light-theme.png)\n![Enable Settings Sync with Gitpod](/images/editors/enable-signin-with-gitpod-dark-theme.png)\n_Enable Settings Sync with Gitpod_\n\n3. Restart your VS Code Desktop application.\n\n<figure>\n<img class=\"shadow-medium rounded-xl max-w-md mt-x-small\" alt=\"Prompt to restart VS Code Desktop\" src=\"/images/editors/restart-vscode.png\">\n    <figcaption>Prompt to restart VS Code Desktop</figcaption>\n</figure>\n\n> **Important:** You must entirely close VS Code Desktop for changes to take effect.\n\n4. Enable settings sync from the Manage gear menu at the bottom of the Activity Bar.\n\nYou must authenticate with Gitpod to enable settings sync.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/settings-sync","loc":{"lines":{"from":50,"to":67}}}}],["1253",{"pageContent":"4. Enable settings sync from the Manage gear menu at the bottom of the Activity Bar.\n\nYou must authenticate with Gitpod to enable settings sync.\n\n<figure>\n<img class=\"shadow-medium rounded-xl max-w-md mt-x-small\" alt=\"Enable settings sync from the Manage gear menu\" src=\"/images/editors/enable-settings-sync.png\">\n    <figcaption>Enable settings sync from the Manage gear menu</figcaption>\n</figure>\n\nYou will be prompted which settings to sync, and to authenticate via Gitpod.\n\n<figure>\n<img class=\"shadow-medium rounded-xl max-w-md mt-x-small\" alt=\"Sign into Gitpod to enable VS Code settings sync\" src=\"/images/editors/signin-and-turnon.png\">\n    <figcaption>Sign into Gitpod to enable VS Code settings sync</figcaption>\n</figure>\n\n5. Resolve any settings conflicts\n\nSettings in VS Code Desktop might differ from your remote settings, follow the instructions in VS Code to resolve any conflicts with the preferences files.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/settings-sync","loc":{"lines":{"from":67,"to":85}}}}],["1254",{"pageContent":"5. Resolve any settings conflicts\n\nSettings in VS Code Desktop might differ from your remote settings, follow the instructions in VS Code to resolve any conflicts with the preferences files.\n\n<figure>\n<img class=\"shadow-medium rounded-xl max-w-md mt-x-small\" alt=\"Merge or replace VS Code Settings\" src=\"/images/editors/resolve-merge-conflicts.png\">\n    <figcaption>Merge or replace VS Code Settings</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/settings-sync","loc":{"lines":{"from":85,"to":92}}}}],["1255",{"pageContent":"## FAQs\n\n### [How to disable extension sync?](https://discord.com/channels/816244985187008514/1115681868654850108)\n\nWhen using a Cloud Development Environment like Gitpod, you might want to disable extension sync to prevent certain extensions from being installed in every workspace.\n\nTo achieve this, you should disable syncing the specific extensions that are not meant to be auto-installed in all of your workspaces. You can do this by following the steps as below:\n\n[!screenshot](https://cdn.discordapp.com/attachments/1115681868654850108/1116443879550484531/Screenshot_2023-06-09_at_1.06.23_AM.png).\n\nFor project/repository-specific Visual Studio Code extensions, it's recommended to [specify them through the `.gitpod.yml` configuration file](https://www.gitpod.io/docs/references/ides-and-editors/vscode-extensions#installing-an-extension). This approach will allow you to avoid issues with extensions getting synced in your personal settings.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/settings-sync","loc":{"lines":{"from":94,"to":104}}}}],["1256",{"pageContent":"### How do I disable VS Code Settings Sync?\n\nSearch for `settings sync off` in your VS Code [Command Palette](https://code.visualstudio.com/docs/getstarted/userinterface#_command-palette) and hit <Keybind>Enter</Keybind>.\n\n> **Note:** This will only work properly inside of VS Code Desktop. If you choose to disable Settings Sync inside of VS Code Browser, you will have to disable it in every new workspace and every time a workspace restarts.\n\n<figure>\n<img class=\"shadow-medium rounded-xl max-w-md mt-x-small\" alt=\"Disable Gitpod settings sync\" src=\"/images/editors/disable-settings-sync.png\">\n    <figcaption>Searching for \"setting sync\" on the Command Palette</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/settings-sync","loc":{"lines":{"from":106,"to":115}}}}],["1257",{"pageContent":"---\nsection: ides-and-editors\ntitle: VS Code Browser\n---\n\n<script>\n  import Keybind from \"$lib/components/keybind.svelte\";\n</script>\n\n# VS Code Browser\n\nVS Code Browser is the default editor that workspaces open in when using Gitpod. You can even [configure your VS Code extension](/docs/references/ides-and-editors/vscode-extensions) preferences by updating your .gitpod.yml.\n\n![VS Code](/images/gitpod-editor.jpg)\n\n## Changing the VS Code Browser version\n\nVS Code Browser in Gitpod is based on a fork of [VS Code](https://github.com/microsoft/vscode) called [OpenVSCode Server\n](https://github.com/gitpod-io/openvscode-server). VS Code in the browser in Gitpod is updated frequently, to use the latest nightly build of Gitpod you can switch to the \"insiders\" version of VS Code from [your Gitpod preferences page](https://gitpod.io/preferences).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode-browser","loc":{"lines":{"from":1,"to":19}}}}],["1258",{"pageContent":"## Settings Sync\n\nBy default, all your extensions and other preferences are synced between all of your workspaces on Gitpod. You can read more about over at [Settings Sync](settings-sync).\n\n## Upload Files\n\nYou can upload files to your workspace by dragging and dropping them into the editor. You can also upload files by clicking the \"Upload\" button in the file explorer.\n\n<figure>\n  <video onloadstart=\"this.playbackRate = 1.5;\" controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" src=\"/images/editors/file-upload-ui-button.webm\" type=\"video/webm\"></video>\n  <figcaption>Upload Files from local to VS Code Browser</figcaption>\n</figure>\n\n## FAQs","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode-browser","loc":{"lines":{"from":21,"to":34}}}}],["1259",{"pageContent":"## FAQs\n\n## Is it possible to intercept shortcuts like cmd+w in VS Code browser?\n\nIt is not possible to intercept <Keybind>Cmd + W</Keybind> directly in browsers like Chrome or Firefox, as it would require overriding the native keyboard shortcut.\n\n### Recommended Solution\n\n-   Use [Gitpod with VS Code Desktop](/docs/references/ides-and-editors/vscode) for the best keyboard experience.\n\n### Alternative Solution\n\nYou can also install Gitpod as a <abbr title=\"Progressive Web App\">PWA</abbr>. If you're interested in this approach, you can follow the instructions listed in the accompanying GitHub Issue [here](https://github.com/gitpod-io/gitpod/issues/1445#issuecomment-1028706854).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode-browser","loc":{"lines":{"from":34,"to":46}}}}],["1260",{"pageContent":"---\nsection: ides-and-editors\ntitle: VS Code extensions\n---\n\n# VS Code extensions\n\nGitpod already comes well equipped for most development tasks, and provides language support for the most popular programming languages such as Python, JavaScript, Go, Rust, C/C++, Java, Ruby, and many more out of the box.\n\nStill, you may wish to customize Gitpod, or to extend it with new features. You can do this by installing VS Code extensions.\n\n`youtube: 4A1ZYUacyXI`","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode-extensions","loc":{"lines":{"from":1,"to":12}}}}],["1261",{"pageContent":"## Installing an Extension\n\nTo install a VS Code extension in Gitpod, simply go to the left vertical menu, and open the Extensions view. There you can search for an extension and install it with one click.\n\nFor [VS Code Browser](vscode-browser), we use the [Open VSX](#open-vsx) registry. If you can't find an extension you use in your local VS Code, please read the \"[Where do I find extensions?](#where-do-i-find-extensions)\" section below.\n\nIf the extension is helpful to anyone who works on the project, you can add it to the `.gitpod.yml` configuration file so that it gets installed for anyone who works on the project. To do that:\n\n1. Visit the extension page (where you installed it from)\n2. Click the settings icon\n3. Select \"Add to .gitpod.yml\" from the menu\n\nYour project's `.gitpod.yml` is updated automatically and lists the given extension. You can also directly edit this file to install or remove extensions manually.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode-extensions","loc":{"lines":{"from":14,"to":26}}}}],["1262",{"pageContent":"Your project's `.gitpod.yml` is updated automatically and lists the given extension. You can also directly edit this file to install or remove extensions manually.\n\nHere is an example of what a `.gitpod.yml` with installed extensions may look like:\n\n```yml\nvscode:\n    extensions:\n        - svelte.svelte-vscode\n        - bradlc.vscode-tailwindcss@0.6.11\n        - https://example.com/abc/releases/extension-0.26.0.vsix","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode-extensions","loc":{"lines":{"from":26,"to":35}}}}],["1263",{"pageContent":"```\n\nYou can share the installed extensions with your organization by committing the `.gitpod.yml` change and pushing it to your Git repository.\n\nExtensions are installed in the `/workspace/.vscode-remote/extensions/` directory.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode-extensions","loc":{"lines":{"from":36,"to":40}}}}],["1264",{"pageContent":"## User Extensions\n\nYou have two options to install extensions for yourself only:\n\n1. For the current workspace only - if you don't want extensions to be synced across workspaces, select `Install (Do Not Sync)` instead of `Install` when installing new extensions.\n2. For all your workspaces - can be useful for extensions that you want to have in all your projects (for example a custom theme), and this doesn't require changing every project's `.gitpod.yml` configuration. **All manually installed extensions are synced across workspaces by default**.\n\nYou can read more about why and how extensions are synced on the [Settings Sync](settings-sync) page.\n\n## Built-in Extensions\n\nGitpod already comes with a number of commonly used VS Code extensions pre-installed by default.\n\nYou can view all pre-installed extensions by navigating to VS Code's Extensions section on the left-hand side. In the \"Search Extensions in Marketplace\" input field, type `@builtin` to see the built-in extensions.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode-extensions","loc":{"lines":{"from":42,"to":55}}}}],["1265",{"pageContent":"## Use of Microsoft-owned extensions in Gitpod\n\nYou can only use extensions available on the [Open VSX](#open-vsx) registry with [VS Code Browser](vscode-browser) on Gitpod. Microsoft only permits use of their marketplace via \"Microsoft’s publicly supported interfaces\" (see their [ToS](https://cdn.vsassets.io/v/M190_20210811.1/_content/Microsoft-Visual-Studio-Marketplace-Terms-of-Use.pdf) section `1f`), and this restriction applies to the Gitpod VS Code Browser integration. If you wish to use extensions from Microsoft's VS Code Marketplace, you must use [VS Code Desktop](vscode).\n\nThe following extensions are therefore not available in VS Code Browser:","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode-extensions","loc":{"lines":{"from":57,"to":61}}}}],["1266",{"pageContent":"The following extensions are therefore not available in VS Code Browser:\n\n-   [Microsoft Pylance](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance)\n-   [Microsoft C#](https://marketplace.visualstudio.com/items?itemName=ms-dotnettools.csharp)\n-   [Microsoft .Net](https://marketplace.visualstudio.com/items?itemName=ms-dotnettools.vscode-dotnet-runtime)\n-   [Microsoft C++](https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools)\n-   [GitHub Copilot](https://marketplace.visualstudio.com/items?itemName=GitHub.copilot)","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode-extensions","loc":{"lines":{"from":61,"to":67}}}}],["1267",{"pageContent":"## Install VS Code extensions from a VSIX file\n\nIt is possible to develop, install and test your own custom VS Code extensions in Gitpod. While developing the extension, you can test it by uploading the `.vsix` file to your Gitpod workspace.\n\n**Please note:**\n\n-   You can install any private extensions using manual VSIX installation.\n-   Installing a `.vsix` in Gitpod does not list that extension anywhere public.\n-   Any `.vsix` referenced in the `.gitpod.yml` must be publicly accessible.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode-extensions","loc":{"lines":{"from":69,"to":77}}}}],["1268",{"pageContent":"## Open VSX\n\nOpen VSX is an open source VS Code extensions registry. For VS Code Browser in Gitpod, Gitpod uses a self-hosted mirror of the public Open VSX instance provided by the [Eclipse Foundation](https://www.eclipse.org/), [open-vsx.org](https://open-vsx.org/). Any extensions published to Open VSX are immediately reflected in the Gitpod OpenVSX mirror.\n\n### Why do we need Open VSX?\n\nVS Code Browser is prohibited from accessing the Microsoft VS Code Extensions marketplace.\n\nSee [Use of Microsoft owned extensions in Gitpod](#use-of-microsoft-owned-extensions-in-gitpod) for more.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode-extensions","loc":{"lines":{"from":79,"to":87}}}}],["1269",{"pageContent":"### Where do I find extensions?\n\nIf you cannot find an extension by searching in Gitpod using [VS Code Browser](vscode-browser), the extension, in many cases, was not yet added to the [Open VSX](https://open-vsx.org/) registry.\n\nIn that case, please reach out to the extension author and politely ask them to publish their extension to the vendor-neutral, open-source Open VSX registry. The [\"how to Publish an Extension\"](https://github.com/eclipse/openvsx/wiki/Publishing-Extensions) docs provide step-by-step instructions.\n\n> **Note**: `.vsix` files downloaded from the [Visual Studio Marketplace](https://marketplace.visualstudio.com/vscode) should not be installed in Gitpod.\n\nSee [Use of Microsoft owned extensions in Gitpod](#use-of-microsoft-owned-extensions-in-gitpod) for more.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode-extensions","loc":{"lines":{"from":89,"to":97}}}}],["1270",{"pageContent":"---\nsection: ides-and-editors\ntitle: VS Code Desktop\n---\n\n<script>\n  import Keybind from \"$lib/components/keybind.svelte\";\n</script>\n\n# VS Code Desktop\n\nWith VS Code Desktop Support, you keep your local editor configurations<sup>1</sup> and benefit from Gitpod's high-spec servers & automated prebuilds. As usual, your code executes in an ephemeral Gitpod workspace, keeping each of your projects isolated from one another.\n\n`youtube: kI6firDA0Bw`","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode","loc":{"lines":{"from":1,"to":14}}}}],["1271",{"pageContent":"## Open a workspace in VS Code Desktop\n\nThere are currently three supported ways to open a VS Code Desktop session connected to a Gitpod workspace, either by opening it from the [Gitpod dashboard](https://gitpod.io/workspaces), choosing VS Code Desktop as your default preference, or directly from within VS Code Browser itself.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode","loc":{"lines":{"from":16,"to":18}}}}],["1272",{"pageContent":"### Open VS Code Desktop from the Gitpod Dashboard\n\nYou can start a workspace with VS Code Desktop directly from [Gitpod Dashboard](https://gitpod.io/workspaces). You can do that from by clicking on the `New Workspace` button. Then, you can select the [context url](/docs/introduction/learn-gitpod/context-url), Editor and custom [workspace class](/docs/configure/workspaces/workspace-classes).\n\n<figure>\n<video onloadstart=\"this.playbackRate = 1.5;\" controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-2xl mt-x-small\" alt=\"Start Gitpod new workspace with options\" src=\"/images/docs/new-workspace-start-with-options.webm\" type=\"video/webm\"></video>\n    <figcaption>Open New Gitpod Workspace with VS Code Desktop • <a href=\"https://gitpod.io/workspaces\">Gitpod Dashboard</a></figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode","loc":{"lines":{"from":20,"to":27}}}}],["1273",{"pageContent":"### Open VS Code Desktop from VS Code Browser\n\n1. Start a new Gitpod workspace\n2. Open the command palette (<Keybind>F1</Keybind> or <Keybind>CtrlCmd + Shift + P</Keybind>)\n3. Type \"Open in VS Code\" and hit <Keybind>Enter</Keybind>\n\nYou will now be redirected to VS Code Desktop.\n\n![Open VS Code via the Command Palette](/images/editors/open-in-vscode-command-palette-light-theme.png)\n![Open VS Code via the Command Palette](/images/editors/open-in-vscode-command-palette-dark-theme.png)\n_Open VS Code via the Command Palette_","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode","loc":{"lines":{"from":29,"to":39}}}}],["1274",{"pageContent":"### Open VS Code Desktop using your preferences\n\n1. Navigate to your [Gitpod preferences](https://gitpod.io/preferences)\n2. Select \"VS Code\" (without the browser label)\n3. Restart any running workspaces\n\nWhen the workspace starts, you will be prompted to open VS Code Desktop. You can also access your workspace using VS Code Browser, or copy SSH credentials from this page.\n\n![Open VS Code Desktop from the workspace start page](/images/editors/vscode-desktop-splash-light-theme.png)\n![Open VS Code Desktop from the workspace start page](/images/editors/vscode-desktop-splash-dark-theme.png)\n_Open VS Code Desktop from the workspace start page_\n\n![Selecting VS Code Desktop as an editor preference](/images/editors/select-vscode-desktop-preference-light-theme.png)\n![Selecting VS Code Desktop as an editor preference](/images/editors/select-vscode-desktop-preference-dark-theme.png)\n_Selecting VS Code Desktop as an editor preference_","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode","loc":{"lines":{"from":41,"to":55}}}}],["1275",{"pageContent":"## Connecting to VS Code Desktop\n\nConnection to VS Code Desktop works via a secure tunnel established on the users device. A minor update is required to the users SSH configuration. A directory is created `~/.ssh/code_gitpod.d`, and an `Include` statement is added to the main SSH configuration file (`~/.ssh/config`). No other SSH configuration files are read, or written to by Gitpod.\n\n### SSH configuration modifications\n\nThe following shows examples of the changes Gitpod makes to a user's SSH configuration files to establish a connection to Gitpod.\n\n```shell\n$ cat ~/.ssh/code_gitpod.d/config\n### This file is managed by Gitpod. Any manual changes will be lost.\n\nHost *.vss.gitpod.io\n  ...\n```\n\n**Caption:** An example of the directory created `~/.ssh/code_gitpod.d` and included configuration in the auto-generated `~/.ssh/code_gitpod.d/config` file.\n\n```shell\n$ cat ~/.ssh/config\n## START GITPOD INTEGRATION","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode","loc":{"lines":{"from":57,"to":77}}}}],["1276",{"pageContent":"## START GITPOD INTEGRATION\n## This section is managed by Gitpod. Any manual changes will be lost.\nInclude \"code_gitpod.d/config\"","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode","loc":{"lines":{"from":77,"to":79}}}}],["1277",{"pageContent":"## END GITPOD INTEGRATION\n```\n\n**Caption:** Example of the update to the SSH config file in `~/.ssh/config`.\n\n![How VS Code Desktop establishes connection to Gitpod](/images/editors/how-vscode-local-ssh-connect-dark-theme.png)\n![How VS Code Desktop establishes connection to Gitpod](/images/editors/how-vscode-local-ssh-connect-light-theme.png)\n_How VS Code Desktop establishes connection to Gitpod_","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode","loc":{"lines":{"from":80,"to":87}}}}],["1278",{"pageContent":"### Legacy Connection Methods\n\nFor documentation on previous / deprecated methods of connecting to VS Code see [Legacy - VS Code Desktop Connection Methods](/docs/references/ides-and-editors/legacy-vscode-connections), this includes:\n\n1. [SSH Gateway access using an uploaded public SSH key](/docs/references/ides-and-editors/legacy-vscode-connections#connect-to-vs-code-desktop-using-an-uploaded-public-ssh-key)\n2. [SSH Gateway access using the owner token](/docs/references/ides-and-editors/legacy-vscode-connections#connect-to-vs-code-desktop-using-the-workspace-owner-token)\n3. [Using Local Companion](/docs/references/ides-and-editors/legacy-vscode-connections#connect-to-vs-code-desktop-using-local-companion)","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode","loc":{"lines":{"from":89,"to":95}}}}],["1279",{"pageContent":"## Reconnect to VS Code Desktop\n\nWhen VS Code Desktop disconnects from the workspace, either you are experiencing genuine connectivity issues, or it's possible that the workspace has timed out and stopped.\n\n![VS Code Desktop attempting to reconnect](/images/editors/reconnect-window-light-theme.png)\n![VS Code Desktop attempting to reconnect](/images/editors/reconnect-window-dark-theme.png)\n_VS Code Desktop attempting to reconnect_\n\nTo restart the workspace, click **Open Workspace** from the workspace start page or from the dashboard and VS Code Desktop should automatically reconnect.\n\n**Please note:** There is currently no way to start a workspace directly from VS Code Desktop.\n\n![Open workspace button shown on a stopped workspace page](/images/editors/workspace-stopped-dark-theme.png)\n![Open workspace button shown on a stopped workspace page](/images/editors/workspace-stopped-light-theme.png)\n_The open workspace button shown on a stopped workspace page_","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode","loc":{"lines":{"from":97,"to":111}}}}],["1280",{"pageContent":"## VS Code settings sync\n\nYou can optionally enable Settings Sync with Gitpod to keep your extensions, themes and settings up-to-date with VS Code Browser and Desktop. See [VS Code settings sync](settings-sync) for more\n\n![Enable Settings Sync with Gitpod](/images/editors/enable-signin-with-gitpod-light-theme.png)\n![Enable Settings Sync with Gitpod](/images/editors/enable-signin-with-gitpod-dark-theme.png)\n_Enable Settings Sync with Gitpod_\n\n## Managing VS Code extensions\n\nVS Code runs extensions in one of two places: locally on the UI / client side, or remotely on your Gitpod workspace.\n\nFor further details, please refer to the official VS Code docs on how to [manage extensions](https://code.visualstudio.com/docs/remote/ssh#_managing-extensions).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode","loc":{"lines":{"from":113,"to":125}}}}],["1281",{"pageContent":"## Custom fonts in VS Code Desktop\n\nThe process of installing fonts matches how you typically install custom fonts locally:\n\n1. Download the desired font to your local machine and install it locally on your operating system.\n1. Open the editor's user settings (e.g. _File_ > _Preferences_ > _Settings_ > _User_)\n1. Configure your font with the `editor.fontFamily` setting:\n    ```json\n    {\n    \t\"editor.fontFamily\": \"Your custom font name\"\n    }\n    ```","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode","loc":{"lines":{"from":127,"to":138}}}}],["1282",{"pageContent":"## Optimizing VS Code Desktop\n\nIf you're using VS Code Desktop for frequent work you'll want to optimize your setup. Below are some tips to get a workspace set up as efficient as possible.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode","loc":{"lines":{"from":140,"to":142}}}}],["1283",{"pageContent":"### SSH fingerprint\n\n![Accepting the SSH fingerprint in VS Code](/images/editors/vscode-ssh-fingerprint-light-theme.png)\n![Accepting the SSH fingerprint in VS Code](/images/editors/vscode-ssh-fingerprint-dark-theme.png)\n_Accepting the SSH fingerprint in VS Code_\n\nIt is common convention to be asked for a fingerprint when accessing a new SSH server. When the fingerprint is accepted, a reference to the server is stored in your local `known_hosts` file, which suppresses subsequent SSH connection prompts for that server.\n\nYou should only be presented with a request to trust the Gitpod workspace when using the legacy Local Companion approach of connecting to VS Code Desktop.\n\nBy swapping to the SSH Gateway approach of accessing VS Code Desktop, your known hosts file will be updated automatically. See [connecting to VS Code Desktop](/docs/references/ides-and-editors/vscode#connecting-to-vs-code-desktop-ssh) for more.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode","loc":{"lines":{"from":144,"to":154}}}}],["1284",{"pageContent":"### Workspace Trust\n\n![The VS Code Workspace Trust popup](/images/editors/trust-authors-workspace-light-theme.png)\n![The VS Code Workspace Trust popup](/images/editors/trust-authors-workspace-dark-theme.png)\n_The VS Code Workspace Trust popup_\n\n[Workspace Trust](https://code.visualstudio.com/docs/editor/workspace-trust#_trusting-a-workspace) is a feature within VS Code implemented to help prevent automatic code execution by disabling or limiting the operation of several VS Code features: tasks, debugging, workspace settings, and extensions.\n\nWhen opening a Gitpod workspace with VS Code Desktop for the first time you will be prompted by a trust modal (given that you have not disabled the workspace trust setting in VS Code).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode","loc":{"lines":{"from":156,"to":164}}}}],["1285",{"pageContent":"When opening a Gitpod workspace with VS Code Desktop for the first time you will be prompted by a trust modal (given that you have not disabled the workspace trust setting in VS Code).\n\nSelecting \"**Yes, I trust the authors**\" will open the workspace and store a reference to the workspace host and directory. Opening the same workspace will not show the prompt again. However, due to a hostname change, new workspaces require trust to be accepted on first open.\n\nChoosing \"**No, I do not trust the authors**\" will enter you into the VS Code Restricted Mode. You can edit code in your workspace, but some features will be restricted. You can disable the VS Code Restricted Mode after the initial prompt.\n\nIf required, you can disable the workspace trust feature, however this is not recommended. Select \"**Manage Workspace Trust**\" from the Manage gear menu to view and modify your VS Code Workspace Trust settings.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode","loc":{"lines":{"from":164,"to":170}}}}],["1286",{"pageContent":"![Updating Workspace Trust settings](/images/editors/manage-workspace-trust-dark-theme.png)\n![Updating Workspace Trust settings](/images/editors/manage-workspace-trust-light-theme.png)\n_Updating Workspace Trust settings_\n\nSee [Workspace Trust](https://code.visualstudio.com/docs/editor/workspace-trust) in the VS Code official documentation for more.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode","loc":{"lines":{"from":172,"to":176}}}}],["1287",{"pageContent":"### How do I know how I'm connecting to VS Code Desktop?\n\nIf you're unsure whether you're connecting via the local companion, or SSH Gateway approach, when connected to your Gitpod workspace, VS Code Desktop will show the connection host in the bottom left.\n\n-   **Local SSH** - `SSH: <workspaceid>.vss.gitpod.io` or `SSH: <workspaceid>.vsi.gitpod.io`\n-   **[SSH Gateway](/docs/references/ides-and-editors/legacy-vscode-connections#connect-to-vs-code-desktop-using-an-uploaded-public-ssh-key)** - `SSH: <workspaceid>.ssh.*.gitpod.io`\n-   **[Local Companion](/docs/references/ides-and-editors/legacy-vscode-connections#connect-to-vs-code-desktop-using-local-companion)**: `<workspaceid>` (no domain)","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode","loc":{"lines":{"from":178,"to":184}}}}],["1288",{"pageContent":"![The SSH host information shown in the bottom left of VS Code Desktop](/images/editors/show-ssh-connection-vscode-light-theme.png)\n![The SSH host information shown in the bottom left of VS Code Desktop](/images/editors/show-ssh-connection-vscode-dark-theme.png)\n_The SSH host information shown in the bottom left of VS Code Desktop_","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode","loc":{"lines":{"from":186,"to":188}}}}],["1289",{"pageContent":"### I'm being asked to choose the `platform of the remote host`. What should I choose?\n\nWhen connecting, sometimes VS Code Desktop fails to automatically detect the host OS of a Gitpod workspace, asking the following: `Select the platform of the remote host \"{id}\"`.\n\nNo matter what the OS is on your computer, you should always choose `Linux` as the remote host platform, since this is the operating system all Gitpod workspaces run on.\n\nIf you choose another option, you may encounter an error like this:\n\n```text\nResolver error: Error: Got bad result from install script\n```\n\n### How do I enable SSH agent forwarding for Desktop VS Code?\n\nGitpod extension delegates ssh connection to the [MS Remote - SSH](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-ssh) extension so agent forwarding should just work if you configure it in your `~/.ssh/config` file:\n\n```\nHost *.gitpod.io\n    ForwardAgent yes\n```","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode","loc":{"lines":{"from":190,"to":209}}}}],["1290",{"pageContent":"## Upload Files\n\nYou can upload files to your workspace by dragging and dropping them into the editor. This method works with every IDE (e.g. Intellij, PyCharm, etc.)\n\n<figure>\n  <video onloadstart=\"this.playbackRate = 1.5;\" controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" src=\"/images/editors/file-upload-drag-and-drop.webm\" type=\"video/webm\"></video>\n  <figcaption>Upload Files from local to VS Code Desktop</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode","loc":{"lines":{"from":211,"to":218}}}}],["1291",{"pageContent":"## Troubleshooting\n\nIf you are still having issues connecting to VS Code Desktop from Gitpod, try:\n\n1. Check if your VS Code Desktop application and Gitpod VS Code Desktop extension version are all using the latest version.\n2. Identify [which method you're using to connect to Gitpod](/docs/references/ides-and-editors/vscode#how-do-i-know-how-im-connecting-to-vs-code-desktop), if it's `SSH Gateway` or `Local Companion` see their troubleshooting [here](/docs/references/ides-and-editors/legacy-vscode-connections#troubleshooting)\n3. If it's Local SSH, please [export log](/docs/help/troubleshooting#gitpod-logs-in-vs-code-browser-and-desktop) on the failed to connect window and [email us](mailto:contact@gitpod.io)","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/vscode","loc":{"lines":{"from":220,"to":226}}}}],["1292",{"pageContent":"---\nsection: ides-and-editors\ntitle: WebStorm\n---\n\n<!--\n  This document is auto generated from generators/ide/jb-product.md\n  Edit this file instead and run `yarn generate:jb`to apply.\n-->\n\n<!-- prettier-ignore -->\n# WebStorm\n\n> {title} is currently in [Beta](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/6576).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/webstorm","loc":{"lines":{"from":1,"to":14}}}}],["1293",{"pageContent":"## Getting started","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/webstorm","loc":{"lines":{"from":16,"to":16}}}}],["1294",{"pageContent":"1. **Install [JetBrains Gateway](https://www.jetbrains.com/help/webstorm/remote-development-a.html#gateway)** - With the [JetBrains Gateway and Gitpod](/docs/integrations/jetbrains-gateway) plugin you can create and manage your latest 20 Gitpod workspaces.\n2. **Install the Gitpod plugin** - Open JetBrains Gateway and you'll see the Gitpod logo on the main page. Click \"install\" to install the [Gitpod plugin](https://plugins.jetbrains.com/plugin/18438-gitpod-gateway) for JetBrains Gateway.\n3. **Update your Gitpod preferences** - Select {title} on the [Gitpod preferences page](https://gitpod.io/preferences) which will set {title} as your default IDE for future workspace starts.\n4. **Start (or restart) your workspace** - Either start a workspace directly from within the [JetBrains Gateway](/docs/integrations/jetbrains-gateway) via the Gitpod plugin **OR** open a new workspace directly in Gitpod where on workspace start you will be prompted to open {title} for that workspace.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/webstorm","loc":{"lines":{"from":18,"to":21}}}}],["1295",{"pageContent":"<figure>\n  <video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" src=\"/images/editors/select-jetbrains-ide.webm\" type=\"video/webm\"></video>\n  <figcaption>Updating Gitpod IDE preferences to {title}</figcaption>\n</figure>\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Opening a JetBrains IDE from Gitpod\" src=\"/images/editors/opening-the-thin-jetbrains-client.webm\" type=\"video/webm\"></video>\n    <figcaption>Opening a JetBrains IDE from Gitpod</figcaption>\n</figure>\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Updating the Gitpod plugin in JetBrains Gateway\" src=\"/images/editors/update-jetbrains-gateway-settings.webm\" type=\"video/webm\"></video>\n    <figcaption>Updating the Gitpod plugin in JetBrains Gateway</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/webstorm","loc":{"lines":{"from":23,"to":36}}}}],["1296",{"pageContent":"<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Opening a JetBrains IDE from Gateway\" src=\"/images/editors/open-from-jetbrains-gateway.webm\" type=\"video/webm\"></video>\n    <figcaption>Opening a JetBrains IDE from Gateway</figcaption>\n</figure>\n\n**Important:** You must restart any started workspaces for your IDE preferences to take effect.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/webstorm","loc":{"lines":{"from":38,"to":43}}}}],["1297",{"pageContent":"## Install Plugins\n\n> This section relates to plugin management when using JetBrains IDEs in a remote development context. For information on regular plugin management, refer to <a href=\"https://www.jetbrains.com/help/webstorm/managing-plugins.html\" target=\"_blank\">{title} docs</a>.\n\nUnlike with regular development, JetBrains [Remote development](https://www.jetbrains.com/help/webstorm/remote-development-overview.html#defs) with {title} allows users to install plugins in different locations:","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/webstorm","loc":{"lines":{"from":45,"to":49}}}}],["1298",{"pageContent":"-   [**{title} backend plugins**](#install-on-title-backend) - The JetBrains {title} backend runs within the remote Gitpod workspace. Backend plugins contribute functionality for IDE experiences relating to the filesystem, tools or languages and frameworks. When installed, **a backend plugin only applies to the currently running Gitpod workspace** and is not associated with a user. However, a plugin can be [preconfigured for all users of a repository](#preconfigure-for-repository) so that the plugin is enabled with every workspace start. It is not currently possible to install a backend plugin that applies to all workspaces of a Gitpod user or organization.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/webstorm","loc":{"lines":{"from":51,"to":51}}}}],["1299",{"pageContent":"-   [**JetBrains Client plugins**](#install-on-jetbrains-client) - The JetBrains client runs on the users local machine and can be thought of as the user interface to the remote {title} backend. Client plugins are different to backend plugins as they contribute to the user interface aspect of the IDE experience (e.g. keyboard shortcuts and themes). Once installed, **a client plugin is enabled for all Gitpod workspaces the user opens** (if the workspace is running the exact same version of the {title} backend where the plugin was initially installed).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/webstorm","loc":{"lines":{"from":52,"to":52}}}}],["1300",{"pageContent":"-   [**JetBrains Gateway plugins**](/docs/integrations/jetbrains-gateway#getting-started) - The JetBrains Gateway is an application downloaded onto a users local machine which allows users to start JetBrains Clients that are compatible with the {title} backend, running in a Gitpod workspace. JetBrains Gateway plugins are installed directly in JetBrains Gateway and contribute to remote development connection experiences (e.g. the [Gitpod JetBrains Gateway](https://plugins.jetbrains.com/plugin/18438-gitpod-gateway) plugin).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/webstorm","loc":{"lines":{"from":53,"to":53}}}}],["1301",{"pageContent":"### Install on JetBrains Client\n\nThe JetBrains client runs on the users local machine and can be thought of as the user interface to the remote {title} backend. Client plugins contribute to the user interface aspect of the IDE experience (e.g. keyboard shortcuts and themes).\n\nOnce installed, **a client plugin is enabled for all Gitpod workspaces the user opens** (if the workspace is running the exact same version of the {title} backend where the plugin was initially installed).\n\nTo install a plugin on **JetBrains Client** follow these steps:\n\n-   In **JetBrains Client** open the IDE settings and select **Plugins**.\n-   Find the plugin in the **Marketplace** and click **Install**.\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Install a plugin on JetBrains Client\" src=\"/images/editors/install-local-jb-plugin.png\">\n    <figcaption>Install a plugin on JetBrains Client</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/webstorm","loc":{"lines":{"from":55,"to":69}}}}],["1302",{"pageContent":"### Install on {title} backend\n\nThe JetBrains {title} backend runs within the remote Gitpod workspace. Backend plugins contribute functionality requiring access to IDE experiences such as the remote filesystem (e.g. contributing support of languages and frameworks).\n\nWhen installed, **a backend plugin only applies to the currently running Gitpod workspace** and is not associated with a user. However, a plugin can be [preconfigured for all users of a repository](#preconfigure-for-repository) so that the plugin is enabled with every workspace start.\n\nIt is not currently possible to install a backend plugin that applies to all workspaces of a Gitpod user or organization.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/webstorm","loc":{"lines":{"from":71,"to":77}}}}],["1303",{"pageContent":"#### Install for your current workspace\n\nYou can install a plugin only for **your current workspace** following these steps:\n\n-   In **JetBrains Client** open the IDE settings and select **Plugins On Host**.\n-   Find the plugin in the **Marketplace** and click **Install**.\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Install a plugin on {title} backend\" src=\"/images/editors/install-remote-jb-plugin.png\">\n    <figcaption>Install a plugin on {title} backend</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/webstorm","loc":{"lines":{"from":79,"to":89}}}}],["1304",{"pageContent":"#### Preconfigure for repository\n\n> JetBrains plugin support is currently in [Beta](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/6576).\n\nYou can share a plugin on **{title} backend** with everybody working on the repository by adding it to [.gitpod.yml](/docs/references/gitpod-yml) and pushing to your Git repository.\nEach workspace is preconfigured with plugins from the `gitpod.yml` configuration file. For example:\n\n```yml\njetbrains:\n    webstorm:\n        plugins:\n            - zielu.gittoolbox\n            - izhangzhihao.rainbow.brackets\n```\n\nYou can find the **pluginId** on the [JetBrains Marketplace](https://plugins.jetbrains.com) page:\n\n-   Find a page of the required plugin.\n-   Select the **Versions** tab.\n-   Click any version to copy the **pluginId** (short name such as `org.rust.lang`) of the plugin you want to install.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/webstorm","loc":{"lines":{"from":91,"to":110}}}}],["1305",{"pageContent":"#### Install for your user\n\nIt is not yet possible to install plugins on **{title} backend** for your user to share across all your Gitpod workspaces.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/webstorm","loc":{"lines":{"from":112,"to":114}}}}],["1306",{"pageContent":"## Configure JVM options\n\n> Configuration of JVM options is currently in [Alpha](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/8704).\n\nYou can adjust JVM options for {title} backend, especially if you want to increase the `-Xmx` memory size. For example:\n\n```yml\njetbrains:\n    webstorm:\n        vmoptions: '-Xmx4g'\n```\n\nFor more detailed information on JVM options, refer to [Common JVM Options](https://www.jetbrains.com/help/webstorm/tuning-the-ide.html#common-jvm-options) from JetBrains documentation.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/webstorm","loc":{"lines":{"from":116,"to":128}}}}],["1307",{"pageContent":"## Configure IDE settings\n\n> **Feedback needed:** The JetBrains Gitpod integration is currently beta. Gitpod [continues to collaborate with JetBrains](https://www.gitpod.io/blog/gitpod-jetbrains). The below shows how you can configure global settings with JetBrains. To leave feedback on the approach, please see this GitHub issue: [#6576](https://github.com/gitpod-io/gitpod/issues/6576). Also note that JetBrains is working on [comprehensive settings sync functionality](https://youtrack.jetbrains.com/issue/RDCT-1/Settings-synchronization).","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/webstorm","loc":{"lines":{"from":130,"to":132}}}}],["1308",{"pageContent":"When running {title} locally, the JetBrains IDE applies [global settings](https://www.jetbrains.com/help/webstorm/configuring-project-and-ide-settings.html) to all projects on your machine. However when running in a remote context using [JetBrains Gateway](/docs/integrations/jetbrains-gateway), it's important to note that some IDE settings are configured on the [JetBrains Client](#on-jetbrains-client) and others in the [{title} backend](#on-title-backend) running in your Gitpod [Workspace](/docs/configure/workspaces). See below instructions for more.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/webstorm","loc":{"lines":{"from":134,"to":134}}}}],["1309",{"pageContent":"### On JetBrains Client\n\nIDE Settings that are configured on the JetBrains Client are stored on your local machine and don't have `On Host` label in the IDE settings. These IDE settings are reused if the workspace is running the exact same version of the {title} backend where the settings were initially configured.\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Configure IDE settings on JetBrains client\" src=\"/images/editors/jb-client-configure-settings-client.webp\">\n    <figcaption>JetBrains client settings don't have <code>On Host</code> label.</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/webstorm","loc":{"lines":{"from":136,"to":143}}}}],["1310",{"pageContent":"### On {title} backend\n\nSettings configured on {title} backend are stored in a Gitpod workspace and have `On Host` label in the IDE settings.\n\n<figure>\n<img class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Configure IDE settings on JetBrains client\" src=\"/images/editors/jb-backend-configure-settings.webp\">\n    <figcaption>{title} backend settings have `On Host` label.</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/webstorm","loc":{"lines":{"from":145,"to":152}}}}],["1311",{"pageContent":"### Configure IDE settings per project\n\nSome IDE settings cannot be configured via [environment variables](/docs/configure/projects/environment-variables#environment-variables) or through setting [vm options](#configure-jvm-options). These settings can only be set via the UI of JetBrains client, and must be manually copied to be syned between workspaces. The below steps detail how to configure your IDE settings for all the users of a given Gitpod project:\n\n**Step 1: Manually use JetBrains UI to configure settings** - Set your IDE settings as you normally would, using the JetBrains UI.\n\n**Step 2: Find generated IDE settings** - You will need to manually find any global settings generated by JetBrains backend within the following path: `/workspace/.config/JetBrains<-latest>/RemoteDev-WS/<your-project-name>/options`","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/webstorm","loc":{"lines":{"from":154,"to":160}}}}],["1312",{"pageContent":"**Step 3:** Move any relevant settings manually to a persistent location within your Gitpod project. Either via a [Workspace Image](/docs/configure/workspaces/workspace-image), or persisted in the version control of your project, for example by committing settings data to GitHub.\n\n**Include relevant IDE settings in your Workspace Image**\n\n-   `/home/gitpod/.gitpod/jetbrains/options` - This location applies settings to all JetBrains products (IntelliJ IDEA, GoLang, etc).\n-   `/home/gitpod/.gitpod/jetbrains/webstorm/options` - This location will apply settings only to the given IDE, e.g. {title}.\n\n**Commit relevant IDE settings to source control**\n\n-   `/workspace/<your-project-name>/.gitpod/jetbrains/options` - This location applies settings to all JetBrains products (IntelliJ IDEA, GoLang, etc).\n-   `/workspace/<your-project-name>/.gitpod/jetbrains/webstorm/options` - This location will apply settings only to the given IDE, e.g. {title}.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/webstorm","loc":{"lines":{"from":162,"to":172}}}}],["1313",{"pageContent":"For any further changes to your IDE settings, you will need to follow the above steps again.\n\n> **Note:** When locating and applying IDE settings, Gitpod will read the locations specified above in priority order. The locations specified first are overriden by the locations specified later.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/webstorm","loc":{"lines":{"from":174,"to":176}}}}],["1314",{"pageContent":"### Configure IDE settings per user\n\nTo configure IDE settings for your user only, and not all those using a project.\n\nFollow the instructions for [configuring IDE settings per project](#configure-ide-settings-per-project), but instead use [.dotfiles](/docs/configure/user-settings/dotfiles#dotfiles) rather than a workspace image or source control to store your IDE settings.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/webstorm","loc":{"lines":{"from":178,"to":182}}}}],["1315",{"pageContent":"## Indexing using Prebuilds\n\n> JetBrains Prebuilds is currently in [Alpha](/docs/help/public-roadmap/release-cycle) · [Send feedback](https://github.com/gitpod-io/gitpod/issues/6576).\n\nWhen you open the project {title} starts indexing to load modules and\nenable the core functionality like code completion and navigation.\nDepending on the size of your project indexing speed can vary significantly.\n\nYou can speed up the indexing of a project by applying these [general recommendations](https://www.jetbrains.com/help/webstorm/indexing.html).\nGitpod prebuilds allow you to improve it further by indexing before you start a new workspace.\n\nTo leverage it:\n\n-   configure prebuilds for your repository, refer to [Prebuilds](/docs/configure/projects/prebuilds);\n-   enable indexing for {title} in prebuilds by editing [.gitpod.yml](/docs/references/gitpod-yml) in your repository:\n\n```yml\njetbrains:\n    webstorm:\n        prebuilds:\n            version: stable","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/webstorm","loc":{"lines":{"from":184,"to":204}}}}],["1316",{"pageContent":"```\n\n-   push changes to your Git repository to apply.\n\nThe `version` property allows you to control whether to index for `stable`, `latest`, or `both` versions of {title} compatible with Gitpod.\nUsers can switch between `stable` and `latest` versions of {title} on the [user preferences](https://gitpod.io/preferences) page.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/webstorm","loc":{"lines":{"from":205,"to":210}}}}],["1317",{"pageContent":"## Workspace performance\n\nWhen using a Gitpod workspace you might experience performance issues caused by:\n\n-   An application using more resources than expected\n-   Resource consumption in adjacent containers running on the workspace node.\n\nIn your JetBrains IDE within the JetBrains Gateway [Backend Control Center](https://www.jetbrains.com/help/idea/work-inside-remote-project.html#control_center) you can find two metrics relating to your running workspace: `Workspace CPU` and `Workspace Memory`.\n\nThe remaining metrics you can find in the Backend Control Center regarding the node that your workspace is running on, and not the workspace itself.\n\n> **Note:** Performance information shown in the Backend Control Center is the same as the information that is shown when running the command [`gp top`](/docs/references/gitpod-cli#top) in your workspace, see the [Command Line Interface](/docs/references/gitpod-cli) documentation for more.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/webstorm","loc":{"lines":{"from":212,"to":223}}}}],["1318",{"pageContent":"![jetbrains performance](/images/jetbrains-gateway/jetbrains-performance-center.png)","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/webstorm","loc":{"lines":{"from":225,"to":225}}}}],["1319",{"pageContent":"## FAQs\n\n-   For the questions about supported IDEs and Editors in Gitpod, refer to [FAQs](/docs/references/ides-and-editors/faqs).\n\n-   For the general questions about JetBrains Remote Development, refer to refer to the general IDE <a href=\"https://www.jetbrains.com/help/webstorm/faq-about-remote-development.html\" target=\"_blank\">{title} FAQ</a>.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/webstorm","loc":{"lines":{"from":227,"to":231}}}}],["1320",{"pageContent":"### Are there any JetBrains optimizations I can make if my workspace is slow?\n\nDebugging performance can be challenging, as performance issues can depend on many factors such as how Gitpod is configured (if you're operating Gitpod on Self-Hosted). However, there are some ways you can gather performance information and optimise your JetBrains IDE setup with Gitpod:\n\n1. Firstly, to gather information on performance, you can [view workspace performance metrics from within the IDE](/docs/references/ides-and-editors/intellij#workspace-performance) in the Backend Control Center, or by using [`gp top`](/docs/references/gitpod-cli#top).\n2. You may also want to try adjusting the Max Heap Size allocated to the JetBrains Backend in the Settings tab of the Backend Control Center. If updating this setting helps your performance, you can set the `vmoptions` value for your JetBrains IDE in your `.gitpod.yml`.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/webstorm","loc":{"lines":{"from":233,"to":238}}}}],["1321",{"pageContent":"> **Note:** If the performance metrics show that your workspace is hitting its resource limits, and you are using Gitpod Self-Hosted, it might make sense to consider changing the resource configuration for your workspaces. This can be done via a [config-patch](/docs/configure/self-hosted/latest/config-patches). Configuring workspace resources is not yet available on SaaS.","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/webstorm","loc":{"lines":{"from":240,"to":240}}}}],["1322",{"pageContent":"## Troubleshooting\n\n-   [What should I do if JetBrains Gateway and Gitpod aren’t working?](/docs/help/troubleshooting#what-should-i-do-if-jetbrains-gateway-and-gitpod-arent-working)\n-   [Gitpod logs in JetBrains Client](/docs/help/troubleshooting#gitpod-logs-in-jetbrains-client)\n-   [Gitpod logs in JetBrains Gateway](/docs/help/troubleshooting#gitpod-logs-in-jetbrains-gateway)","metadata":{"source":"https://www.gitpod.io/docs/references/ides-and-editors/webstorm","loc":{"lines":{"from":242,"to":246}}}}],["1323",{"pageContent":"---\nsection: security\ntitle: Security FAQ\ndescription: Frequently asked questions about Gitpod security.\n---\n\n# Security FAQ\n\n## What type of data does Gitpod collect?\n\nGitpod processes first name, last name, and email in order to provide the services, in addition to the user account from your company’s code repository. For more information, please contact your Account Manager for the Gitpod DPA.\n\n## How does Gitpod integrate with code repositories?\n\nAuthentication occurs via OAuth tokens which can be revoked and/or re-authorized at any time.\n\n## How is data secured within the Gitpod platform?\n\nAll Workspace content is encrypted at rest with (AES256) and in-transit (TLS 1.2 or above).\n\n## Are Workspaces isolated?\n\nWorkspaces deploy as Kubernetes pods. Each Workspace operates within its own set of namespaces, so that they cannot interfere with each other.","metadata":{"source":"https://www.gitpod.io/docs/references/security/faq","loc":{"lines":{"from":1,"to":23}}}}],["1324",{"pageContent":"## Are Workspaces isolated?\n\nWorkspaces deploy as Kubernetes pods. Each Workspace operates within its own set of namespaces, so that they cannot interfere with each other.\n\n## How is Gitpod’s Infrastructure deployed?\n\nGitpod is deployed on GCP and AWS. Their certifications are available [here](https://cloud.google.com/security/compliance) and [here](https://aws.amazon.com/compliance/).\n\n## What certifications does Gitpod have?\n\nWe are SOC 2 Type 2 compliant for two years running and conduct pentesting at least annually. Reports are available upon request and under MNDA; please contact your Account Manager.\n\n## How does Gitpod deploy?\n\nGitpod can be hosted end-to-end by us, or deployed by you in your own AWS account. For more information, please see this [link](https://www.youtube.com/watch?v=iYLCHQgj0fE) for deployment architecture.","metadata":{"source":"https://www.gitpod.io/docs/references/security/faq","loc":{"lines":{"from":23,"to":37}}}}],["1325",{"pageContent":"# February Release 2019 🎉\n\nWe are close to leaving the beta phase and with that are also approaching a more regular release schedule.\nThis means we are going to have monthly release notes. They will pop up only once and you can easily dismiss them by pressing <kbd>[ESC]</kbd>.\nIf you want to look up the release notes later you can open them through the command palette <kbd>[F1]</kbd>. Simply search for 'Release Notes'.\n\nSo here are the new & noteworthy things that we have been hard at work at this time.\n\n## GitHub Links\n\nYou can now navigate to GitHub directly from the editor. The GitHub URL of any editor position or selection can be accessed with a right-click, and used for example in GitHub issues or Pull Request comments to reference interesting code locations.\n\n![GitHub Links](/images/docs/release-notes/2019-02-15/github-navi.jpg)","metadata":{"source":"https://www.gitpod.io/docs/release-notes/2019-02-15/february-2019","loc":{"lines":{"from":1,"to":13}}}}],["1326",{"pageContent":"## Snapshots\n\nIn addition to live sharing a running Gitpod workspace, you can now take a snapshot. Snapshots capture the current state of a workspace session including the UI layout and the file changes. Anyone who has a snapshot link can create a fresh workspace based on that.\n\nThis is super handy for providing reproducibles in GitHub issues and StackOverflow posts. They are also great to prepare trainigs, tutorials, or just to showcase stuff you have thrown together.\n\nPlease see this [blog post](https://medium.com/gitpod/code-never-lies-creating-reproducibles-for-any-programming-language-7946021a68f2) as well as the [documentation](/docs/configure/workspaces/collaboration#sharing-snapshots) for more details.\n\n![Snapshot](/images/docs/release-notes/2019-02-15/snapshots.png)","metadata":{"source":"https://www.gitpod.io/docs/release-notes/2019-02-15/february-2019","loc":{"lines":{"from":15,"to":23}}}}],["1327",{"pageContent":"## Configuration\n\nThe possibilities to fine-tune the developer experience when using Gitpod on your repository have been improved. Here are the features you can define in your `.gitpod.yml`:\n\n### Tasks\n\nYou can now specify multiple tasks. Each task will have its own terminal view on start. You can even specify where those terminals whould be opened.\nThe following config, for instance, will make sure that two terminals are opened next to each other.\n\n```yml\ntasks:\n    - command: echo 'left'\n    - command: echo 'right'\n      openMode: split-right\n```\n\n![Split Terminals](/images/docs/release-notes/2019-02-15/terminal-split.png)","metadata":{"source":"https://www.gitpod.io/docs/release-notes/2019-02-15/february-2019","loc":{"lines":{"from":25,"to":41}}}}],["1328",{"pageContent":"### Lifecycles\n\nIn addition we have introduced multiple lifecycle phases for the tasks, such as [init](/docs/configure/workspaces/tasks#init-command) and [before](/docs/configure/workspaces/tasks#before-command). The main purpose is to avoid rerunning unnecessary commands such as full builds, when restarting workspaces or opening snapshots.\n\nCheck the table below for an overview of the different starting scenarios.\n\n<div class=\"overflow-x-auto\">\n\n| Start Mode        | Execution                   |\n| ----------------- | --------------------------- |\n| Fresh Workspace   | `before && init && command` |\n| Restart Workspace | `before && command`         |\n| Snapshot          | `before && command`         |\n\n</div>","metadata":{"source":"https://www.gitpod.io/docs/release-notes/2019-02-15/february-2019","loc":{"lines":{"from":43,"to":57}}}}],["1329",{"pageContent":"### Ports\n\nYou can now specify the default behavior on port detection. By default users get a notification when starting a server, asking whether they want to open a web view or an external browser.\n\nThis behavior can now be pre-configured so users are not bothered with annoying notifications. Here is an example where we configure port `8080` to automatically open in a web preview pane:\n\n```yml\nports:\n    - port: 8080\n      onOpen: open-preview\n```\n\nCheck out [the docs](/docs/configure/workspaces/tasks) to learn more about pre-configuring things in Gitpod.","metadata":{"source":"https://www.gitpod.io/docs/release-notes/2019-02-15/february-2019","loc":{"lines":{"from":59,"to":71}}}}],["1330",{"pageContent":"## YAML Support\n\nGitpod now understands YAML syntax and uses json schema specifications to validate and guide developers. While this works for any YAML files it comes in especially handy when editing `.gitpod.yml`.\n\n![yaml in action](/images/docs/release-notes/2019-02-15/yaml-support.png)","metadata":{"source":"https://www.gitpod.io/docs/release-notes/2019-02-15/february-2019","loc":{"lines":{"from":73,"to":77}}}}],["1331",{"pageContent":"## Gitpod CLI\n\nThe CLI for Gitpod has learned new tricks. Check out all the cool things you can do with it by typing `gp help`.\n\nHere are the new commands we added:\n\n### gp init\n\nTo get the best experience with Gitpod, you should configure your repository to have the right tools, run the right commands on start, etc. This information is stored in a `.gitpod.yml` file sitting in your repository.\n\nThe `gp init` command walks you through the basic setup and generates a `.gitpod.yml` and if desired a corresponding `Dockerfile`.\n\n```sh\ngitpod /workspace/my-repo $ gp init\nUse the arrow keys to navigate: ↓ ↑ → ←\n? Workspace Docker image:\n  ▸ default\n    custom image\n    docker file\n```\n\nMore information about writing `.gitpod.yml` configurations can be found in [the docs](/docs/configure).","metadata":{"source":"https://www.gitpod.io/docs/release-notes/2019-02-15/february-2019","loc":{"lines":{"from":79,"to":100}}}}],["1332",{"pageContent":"### gp url\n\nOne of the things you do in a `.gitpod.yml` is declaring the exposed ports. Gitpod maps them to a specific subdomain in order to make them accessible. For instance if you have a dev server running on `0.0.0.0:3000` the `gp url` command gives you the external url for that service.\n\nHere is an example:\n\n```sh\ngitpod /workspace/release-notes $ gp url 3000\nhttps://3000-b33f605e-b32a-4e44-ae5a-acad9641de0a.ws-eu0.gitpod.io/\n```\n\n`gp url` can also give you the URL of the workspace itself:\n\n```sh\ngitpod /workspace/release-notes $ gp url\nhttps://b33f605e-b32a-4e44-ae5a-acad9641de0a.ws-eu0.gitpod.io/\n```\n\n### gp preview\n\n`gp preview` is similar to `gp open`, except that it does not open a file in the editor but a URL in a preview pane on the right.\n\nThis is especially handy together with `gp url` if you want to open a specific path from a script.\n\nHere's an example:\n\n```sh\ngp preview $(gp url 3000)my/special/path.html\n```","metadata":{"source":"https://www.gitpod.io/docs/release-notes/2019-02-15/february-2019","loc":{"lines":{"from":102,"to":130}}}}],["1333",{"pageContent":"## Improved Docker Performance\n\nIn addition to the `.gitpod.yml` you can provide a `Dockerfile` which is automatically picked up by Gitpod. See [this blog post](https://medium.com/gitpod/bring-your-own-docker-image-to-gitpod-52db1aa861de) for more information on setting up a Dockerfile for your project.\n\nFor example, here is a Dockerfile that allows developing native UI applications in Go on Gitpod:\n\n```sh\nFROM gitpod/workspace-full-vnc\nRUN sudo apt-get update && \\\n    sudo apt-get install -y libgtk-3-dev && \\\n    sudo rm -rf /var/lib/apt/lists/*\n```\n\nSince we launched this feature, the performance and logging for docker builds have also been improved significantly.","metadata":{"source":"https://www.gitpod.io/docs/release-notes/2019-02-15/february-2019","loc":{"lines":{"from":132,"to":145}}}}],["1334",{"pageContent":"## Status Page\n\nAs we continuously improve and expand Gitpod, there are times when things inevitably don't go as planned, occasionally causing downtime. If you're ever curious about the status of [gitpod.io](https://gitpod.io), or you'd like to follow how we resolve an incident, we made [status.gitpod.io](https://status.gitpod.io/) just for you.\n\nIn fact, thanks to [Statusfy](https://github.com/bazzite/statusfy), it took us just a few hours to build an entire [open source status page](https://github.com/gitpod-io/gitpod-status). Learn more about this short adventure in [this blog post](https://medium.com/gitpod/status-update-gitpod-%EF%B8%8F-statusfy-ed8266d63a20).","metadata":{"source":"https://www.gitpod.io/docs/release-notes/2019-02-15/february-2019","loc":{"lines":{"from":147,"to":151}}}}],["1335",{"pageContent":"## Java Debugging\n\nIn addition to Node.js one can now also launch and debug Java applications directly from within the editor. Code lense actions on `main()` methods will automatically use the right classpath from the current project settings (based on maven, gradle or eclipse classpath information).\n\nLaunch configs are stored in a VS Code compatible `launch.json` file.\n\n![Debug Java](/images/docs/release-notes/2019-02-15/debug-java.jpg)\n\n## XML Support\n\nThe new improved XML support not only does syntax highlighting for XML and XSD but also uses associated schemas to provide diagnostics, content assist and hover information.\n\n![XML Support](/images/docs/release-notes/2019-02-15/xml-support.png)","metadata":{"source":"https://www.gitpod.io/docs/release-notes/2019-02-15/february-2019","loc":{"lines":{"from":153,"to":165}}}}],["1336",{"pageContent":"## Better Previews\n\nPreviews can now easily be opened by clicking on the top right icon (![icon](/images/docs/release-notes/2019-02-15/icon.jpg)) on any previewable files, such as Markdown, HTML and SVG files.\n\nThe inverse is supported, too. I.e. clicking the file icon on the top right of a preview will open the corresponding editor on the left. For Markdown even scrolling is synced between the two views.\n\n## AsciiDoc Support\n\nIn addition to Markdown, Gitpod now also supports previewing AsciiDoc as you type.\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"ASCIIdoc Support\" src=\"/images/docs/release-notes/2019-02-15/asciidoc-support.webm\" type=\"video/webm\"></video>\n    <figcaption>ASCIIdoc Support</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/release-notes/2019-02-15/february-2019","loc":{"lines":{"from":167,"to":180}}}}],["1337",{"pageContent":"## Many Bugfixes, small features and other improvements\n\nThese are just the most noteworthy features we have been working on.\nFor a more detailed list of bugfixes and enhancemenst see all the issues we've closed:\n\n-   [Closed Issues in Gitpod](https://github.com/gitpod-io/gitpod/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aclosed+closed%3A%3E2018-11-01)\n-   [Merged PRs in Theia](https://github.com/theia-ide/theia/pulls?utf8=%E2%9C%93&q=merged%3A%3E2018-11-01+merged%3A%3C2018-02-13+)","metadata":{"source":"https://www.gitpod.io/docs/release-notes/2019-02-15/february-2019","loc":{"lines":{"from":182,"to":188}}}}],["1338",{"pageContent":"# April 2019\n\nToday we are happy to announce that we are moving out of beta.\nWe want to thank all the beta testers who have provided great feedback. Gitpod wouldn't be what it is without you! ❤️\n\nYou can read more about the announcement in [the blog post](/blog/gitpod-launch).\n\nBesides a complete relaunch of the website and app, we have added some very exciting new features:\n\n## GitHub App / Prebuilt Workspaces 🚀\n\nWe have been busy developing a <a href=\"https://github.com/apps/gitpod-io\" target=\"_blank\">new GitHub app</a>, that once installed on your repository will prebuild your project on every push.\nOn GitHub pull requests this is communicated through a status check.\n\n![Prebuilt Check on PR](/images/docs/release-notes/2019-04-05/prebuilt-check.png)\n\nAs a result, Gitpod is now the first IDE that builds your project, before you open it.\n\nRead more about this exciting feature in [the docs](/docs/configure/projects/prebuilds) and in [Chris' blog post](/blog/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/release-notes/2019-04-05/april-2019","loc":{"lines":{"from":1,"to":19}}}}],["1339",{"pageContent":"## Better `localhost` Handling\n\nWhen starting web servers in Gitpod, often times you need to explicitly make sure the dev server allows connections from non-localhost.\nStarting today, you no longer need to worry about that. Gitpod now forwards the port locally and rewrites the host headers,\nso that dev servers will be fine.\n\n## Better Go Support\n\nGitpod now directly uses Microsoft's great Go support for VS Code.\n\n![VS Code Go Extension](/images/docs/release-notes/2019-04-05/vscode-go.png)","metadata":{"source":"https://www.gitpod.io/docs/release-notes/2019-04-05/april-2019","loc":{"lines":{"from":21,"to":31}}}}],["1340",{"pageContent":"## Better Go Support\n\nGitpod now directly uses Microsoft's great Go support for VS Code.\n\n![VS Code Go Extension](/images/docs/release-notes/2019-04-05/vscode-go.png)\n\n## Unlimited Hours\n\nIf you don't feel comfortable with a time-based limit, you can now purchase the 'Unlimited' plan to use Gitpod as much as you like on public and private repositories.\n\nWe also offer [unlimited plans for teams](https://gitpod.io/teams/), and [for students](/pricing) the price for an unlimited plan is only 9$ or 8€.\n\n> If you have created your account during the beta, i.e. before April 5th, you will be able to work on private repositories for free for another month, on us.\n\nYou can check out the various [pricing options on the website](/pricing).","metadata":{"source":"https://www.gitpod.io/docs/release-notes/2019-04-05/april-2019","loc":{"lines":{"from":31,"to":45}}}}],["1341",{"pageContent":"## New Design 💄\n\nAs part of the launch, we have refreshed the design of Gitpod. The website and dashboard now use a new dark theme that we hope you'll like, and the UI of the\nIDE is more closely matching the look of VS Code.\n\n![New Dashboard](/images/docs/release-notes/2019-04-05/dashboard-design.png)\n\n## Delete Workspace\n\nYou can now delete workspaces in the dashboard. Please note that deletion can not be reversed as we are really\ndeleting all the contents of your workspace.\n\nYou can also delete your entire account (hopefully the least used feature).\n\n## Many Small Improvements\n\nBesides these bigger features, we have fixed many bugs and improved the performance and user experience of Gitpod.\nWe have merged 146 PRs in Gitpod and <a href=\"https://github.com/theia-ide/theia/pulls?utf8=%E2%9C%93&q=is%3Apr+merged%3A%3E2019-02-05+\" target=\"_blank\">206 in Theia</a>.","metadata":{"source":"https://www.gitpod.io/docs/release-notes/2019-04-05/april-2019","loc":{"lines":{"from":47,"to":64}}}}],["1342",{"pageContent":"## What's next?\n\nWith this release we have already added some VS Code extensions. Going forward we will double down on the integration.\nWe are looking at one programming language after the other, making sure the experience is excellent and the VS Code extensions\nwork as expected. Once we've reached a state where we are confident VS Code extensions work reliably in general, we will allow users to install them.\nFurthermore, we are focusing on start-up time improvements and, of course, bug-fixing and offering you a great development experience.","metadata":{"source":"https://www.gitpod.io/docs/release-notes/2019-04-05/april-2019","loc":{"lines":{"from":66,"to":71}}}}],["1343",{"pageContent":"# June 2019\n\nAfter the public launch of Gitpod.io in April, we have spent most of our time on changing our internal architecture to better scale and improve the cloud density as well\nas supporting VS Code extension. Although this work is not yet finished, we have added a bunch of new features on the way, which are listed below.\n\n## Toggle Maximize\n\nSimple but useful: Double-clicking a tab will maximize the corresponding panel.\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Toggle Maximize\" src=\"/images/docs/release-notes/2019-06-17/maximize.webm\" type=\"video/webm\"></video>\n    <figcaption>Toggle Maximize</figcaption>\n</figure>\n\n## Links in terminals\n\nYou can now follow links and open files from the terminal by clicking on the respective links.\n\n![Terminal Links](/images/docs/release-notes/2019-06-17/terminal-link.png)","metadata":{"source":"https://www.gitpod.io/docs/release-notes/2019-06-17/june-2019","loc":{"lines":{"from":1,"to":19}}}}],["1344",{"pageContent":"## Links in terminals\n\nYou can now follow links and open files from the terminal by clicking on the respective links.\n\n![Terminal Links](/images/docs/release-notes/2019-06-17/terminal-link.png)\n\n## Environment Variables\n\nGitpod allows users to inject environment variables into workspaces. Based on a simple pattern against the repository name\none can filter which env vars are actually injected. Also please note that all environment variable values are encrypted before stored in the database.\n\nIn addition to user-based environment variables, you can pass environment variables through the context link on start.\nSee the [docs](/docs/configure/projects/environment-variables) for more information.","metadata":{"source":"https://www.gitpod.io/docs/release-notes/2019-06-17/june-2019","loc":{"lines":{"from":19,"to":31}}}}],["1345",{"pageContent":"## Bi-directional Scroll Sync\n\nWhen editing Markdown files it is very convenient to see the preview next to the editor. You can open a preview by click the icon on the top right of the editor.\nNow you can scroll both the editor or the preview and see how the other part is scrolling with it, showing the corresponding sections.\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Scroll sync\" src=\"/images/docs/release-notes/2019-06-17/scroll-sync.webm\" type=\"video/webm\"></video>\n    <figcaption>Scroll sync</figcaption>\n</figure>\n\nContributed through [PR #5442](https://github.com/theia-ide/theia/pull/5442).\n\n## Better Rust support\n\nIn addition to the Go VS Code extension, Gitpod now also runs the official [Rust VS Code extensions](https://github.com/rust-lang/rls-vscode).\nSo expect faster and more reliable support for Rust.","metadata":{"source":"https://www.gitpod.io/docs/release-notes/2019-06-17/june-2019","loc":{"lines":{"from":33,"to":48}}}}],["1346",{"pageContent":"## Emmet support\n\nGitpod comes with support for emmet, a web-developer’s toolkit that can greatly improve your HTML & CSS workflow.\nAmong other things it allows to quickly generate html boilerplate using shortcuts.\n\n![Emmet](/images/docs/release-notes/2019-06-17/emmet.png)\nSee the [cheat-sheet](https://docs.emmet.io/cheat-sheet/) for a quick overview of what's supported.\n\n## Debugging in Java\n\nThe debugging of Java applications had a problem in that it the process would pick a wrong java executable when launching processes.\nThis is now fixed.\n\n## Better Upload\n\nYou can now upload large files through drag and drop and see proper progress information on the top of the window.\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"upload\" src=\"/images/docs/release-notes/2019-06-17/upload.webm\" type=\"video/webm\"></video>\n    <figcaption>upload</figcaption>\n</figure>","metadata":{"source":"https://www.gitpod.io/docs/release-notes/2019-06-17/june-2019","loc":{"lines":{"from":50,"to":70}}}}],["1347",{"pageContent":"## Improved C++ Language Support\n\nWe have upgrade the language services to use the latest clangd version.\n\n## Better Git Amend\n\nThe git amend UI has been improved so that you can amend / squash multiple commits but also\nundo that.\n\n<figure>\n<video controls playsinline autoplay loop muted class=\"shadow-medium w-full rounded-xl max-w-3xl mt-x-small\" alt=\"Git amend\" src=\"/images/docs/release-notes/2019-06-17/git-amend.webm\" type=\"video/webm\"></video>\n    <figcaption>Git amend</figcaption>\n</figure>\n\nAlso the entire SCM widget has been rewritten to match VS Code's UX.\n\n## Config: Port ranges\n\nIn your `.gitpod.yml` one can now specify [port ranges](/docs/configure/workspaces/ports#port-ranges), so you can manage antire ranges addition\nand tell Gitpod what to do when a service opens on one of those ports.","metadata":{"source":"https://www.gitpod.io/docs/release-notes/2019-06-17/june-2019","loc":{"lines":{"from":72,"to":91}}}}],["1348",{"pageContent":"## CLI: _gp await-port_\n\nThe cli learned a new thing, that let's you wait for a certain port to open.\nThis is useful if you want to wait for a certain path and then take a specific action.\n\nHere's an example that will open a certain path in the preview once a service is a available port 3000:\n\n```sh\ngp await-port 3000 && gp preview $(gp url 3000)my/path/index.html\n```\n\n## Many Small Improvements\n\nBesides these bigger features, we have fixed many bugs and improved the performance and user experience of Gitpod.\nWe have merged 146 PRs in Gitpod and [220 in Theia](https://github.com/theia-ide/theia/pulls?utf8=%E2%9C%93&q=is%3Apr+merged%3A%3E2019-04-01+).","metadata":{"source":"https://www.gitpod.io/docs/release-notes/2019-06-17/june-2019","loc":{"lines":{"from":93,"to":107}}}}],["1349",{"pageContent":"## What's next?\n\nWith this release we have added some additional VS Code extensions.\nThe upcoming release will allow you to install arbitrary VS Code extensions and add that as configuration to your `.gitpod.yml` files.\nThe GitLab integration as well as a easy-to-install, Self-Hosted version of Gitpod is in the works.\nFinally, we are looking into optimizing start-up time improvements and, of course, bug-fixing and offering you a great development experience.","metadata":{"source":"https://www.gitpod.io/docs/release-notes/2019-06-17/june-2019","loc":{"lines":{"from":109,"to":114}}}}],["1350",{"pageContent":"---\nsection: self-hosted/helm-deprecated\ntitle: Gitpod Self-Hosted\n---\n\n# Gitpod Self-Hosted\n\n> ⚠️ **Deprecated Content**\n>\n> The content of this page assumes you are using Helm, which is now deprecated. Please use the [Installer](./latest) instead.\n\nGitpod, just as you know it from [gitpod.io](https://gitpod.io), can be deployed and operated on your own infrastructure. It supports different cloud providers, self-managed Kubernetes clusters, corporate firewalls, and even off-grid / air-gapped networks.\n\n-   [Requirements for Gitpod Self-Hosted](./helm-deprecated/requirements)\n-   [Installing Gitpod Self-Hosted](./helm-deprecated/installation)\n-   [Configuring Gitpod Self-Hosted](./helm-deprecated/configuration)\n-   [Troubleshooting Gitpod Self-Hosted](./helm-deprecated/troubleshooting)\n-   [Updating Gitpod Self-Hosted](./helm-deprecated/updating)","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated","loc":{"lines":{"from":1,"to":18}}}}],["1351",{"pageContent":"---\nsection: self-hosted/latest\nsubsection: background\ntitle: Background\n---\n\n# Background\n\n> ⚠️ **Gitpod Self-hosted is [no longer supported](/blog/introducing-gitpod-dedicated)**\n>\n> The last update of Gitpod Self-hosted product was [November 2022](/changelog/november-self-hosted-release). Users can still request our [free community license](/community-license) however there will be no support or updates to the product. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n\nThis section gives you relevant background information about Gitpod Self-Hosted:\n\n-   [Disaster Recovery](disaster-recovery) - Best practices around disaster recovery","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/background","loc":{"lines":{"from":1,"to":15}}}}],["1352",{"pageContent":"---\nsection: self-hosted/latest\nsubsection: operational-guides\ntitle: How to backup and restore Gitpod\n---\n\n# How to Backup and Restore Gitpod\n\n> ⚠️ **Gitpod Self-hosted is [no longer supported](/blog/introducing-gitpod-dedicated)**\n>\n> The last update of Gitpod Self-hosted product was [November 2022](/changelog/november-self-hosted-release). Users can still request our [free community license](/community-license) however there will be no support or updates to the product. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/backup-restore","loc":{"lines":{"from":1,"to":11}}}}],["1353",{"pageContent":"For [business continuity](https://en.wikipedia.org/wiki/Business_continuity_planning) purposes, it is important to think about how you might restore your ability to use Gitpod, and thus develop software in the event of a catastrophic failure of Gitpod or the underlying infrastructure it runs on. This guide assumes that you will use the backup and restore strategy for disaster recovery and will guide you towards what needs to be backed up and how to restore using said backup. Please see our background reading on [disaster recovery](./disaster-recovery) for more information.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/backup-restore","loc":{"lines":{"from":13,"to":13}}}}],["1354",{"pageContent":"> **Important:** When using Gitpod in a production setting, we recommend you base your installation on the [single cluster reference architecture](./reference-architecture/single-cluster-ref-arch). Using in-cluster dependencies is not recommended because there is no means to produce backups, and the database/storages systems are within failure domain of the cluster. If possible consider using Gitpod [SaaS](https://www.gitpod.io/pricing).\n\n> **Note:** We recommend to regularly trial run a recovery using this method to ensure that it works in practice and to allow yourself the chance to spot any unforeseen issues.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/backup-restore","loc":{"lines":{"from":15,"to":17}}}}],["1355",{"pageContent":"## What to back up\n\nIt is critical to consider what needs to be backed up and ensure you take the necessary steps to secure each of the listed elements. What needs to be backed up is closely aligned with [Gitpod’s architecture](./reference-architecture/single-cluster-ref-arch#overview) and how it runs.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/backup-restore","loc":{"lines":{"from":19,"to":21}}}}],["1356",{"pageContent":"### Database\n\nThe database is a central component in Gitpod where all metadata about users and workspaces, as well as settings of the Gitpod instance (such as auth providers) are stored. This makes the database a critical component. In case of a database outage, you are not able to log in, use the Gitpod dashboard, or start workspaces. We recommend using a cloud provider native relational database service that supports MySQL - see [required components](./requirements). This means that you can rely on the best practices of each service for disaster recovery. For example:","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/backup-restore","loc":{"lines":{"from":23,"to":25}}}}],["1357",{"pageContent":"-   **AWS Relational Database Service**: You can rely on RDS’s [backup and restore mechanisms](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_CommonTasks.BackupRestore.html) and set it up to run in [multiple availability zones](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/create-multi-az-db-cluster.html) to allow for higher availability. You can also consider other [disaster best practices](https://medium.com/tensult/amazon-rds-disaster-recovery-8a40dd8350ea).\n-   **Google Cloud SQL:** You can rely on Cloud SQLs [backup and restore features](https://cloud.google.com/sql/docs/mysql/backup-recovery/backups) and run the instance in a [high availability configuration](https://cloud.google.com/sql/docs/mysql/high-availability) to decrease the chance of failure. You can also refer to the general [Google Cloud disaster recovery best practices](https://cloud.google.com/architecture/dr-scenarios-planning-guide).","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/backup-restore","loc":{"lines":{"from":27,"to":28}}}}],["1358",{"pageContent":"### Object Storage\n\nGitpod uses **object storage** to store blob data. This includes workspace backups created when a workspace stops and are used to restore the state upon restart. As such, to secure the work of your users, it is critical to think about backing up this data and/or relying on the best practices for disaster recovery of the object storage service being used. For example:\n\n-   **AWS S3:** You can consider using [cross-region replication](https://docs.aws.amazon.com/AmazonS3/latest/userguide/replication.html) to increase reliability further - although S3 already stores your data across multiple geographically distant _Availability Zones_ by default.\n-   **Google Cloud Storage:** Consider using the [Multi-Regional Storage option](https://cloud.google.com/storage/docs/storage-classes) for additional availability.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/backup-restore","loc":{"lines":{"from":30,"to":35}}}}],["1359",{"pageContent":"### OCI Image Registry\n\nGitpod uses an image registry to cache images and store images it builds on behalf of users. _Note: For non-airgapped environments, this is **not** the registry that contains the images of Gitpod’s services._ As such, losing this data means that workspace starts may take longer because images need to be re-built. Consider implementing best practices for securing the registry you are using.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/backup-restore","loc":{"lines":{"from":37,"to":39}}}}],["1360",{"pageContent":"### Application Config\n\n> **Important:** KOTS Snapshots will **NOT** save any data from your Gitpod database, registry or object storage. It will also not backup any data outside of your `gitpod` namespace. It will backup:\n>\n> -   the KOTS dashboard\n> -   the KOTS configuration\n> -   the version of Gitpod installed\n> -   the TLS certificate generated by cert-manager (if enabled)\n\nAlthough you could simply re-install Gitpod using the regular [installation path](/docs/configure/self-hosted/latest/installing-gitpod), this can take some time and you would need to re-configure it to the state you had last had it in. To minimize your recovery time, you can persist the application configuration (ideally regularly).","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/backup-restore","loc":{"lines":{"from":41,"to":50}}}}],["1361",{"pageContent":"#### Configuring Velero\n\n[Velero](https://velero.io/) is an open source tool to safely backup and restore, perform disaster recovery, and migrate Kubernetes cluster resources and persistent volumes. It is used by KOTS to connect to your backup location. It supports many [data sources](https://docs.replicated.com/enterprise/snapshots-storage-destinations), including AWS, Azure and GCP storage solutions.\n\nPlease follow the installation instructions as per the [Velero documentation](https://velero.io/docs/latest/basic-install). KOTS requires [Restic integration](https://velero.io/docs/v1.9/restic) to function correctly, which can be added by appending the `--use-restic` flag to the `velero install` command.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/backup-restore","loc":{"lines":{"from":52,"to":56}}}}],["1362",{"pageContent":"#### Triggering Your First Backup\n\n> For full documentation on the KOTS backup solution, please see their [documentation](https://docs.replicated.com/enterprise/snapshots-understanding).\n\nTo create a new backup via the KOTS CLI or in the Snapshots section of your KOTS dashboard, you can do this by running the following command:\n\n```bash\nkubectl kots backup --namespace gitpod\n```\n\nWhen that has finished, you will be able to list your backups:\n\n```bash\nkubectl kots backup ls\n```\n\nAnd it will display a list that looks similar to this:\n\n```bash\nNAME              STATUS       ERRORS    WARNINGS    STARTED                          COMPLETED                        EXPIRES\ninstance-ab1cd    Completed    0         0           2022-08-11 13:36:38 +0100 BST    2022-08-11 13:36:54 +0100 BST    29d\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/backup-restore","loc":{"lines":{"from":58,"to":79}}}}],["1363",{"pageContent":"### Cluster Configuration\n\nTo reduce the time it takes you to re-create a cluster, you can move to an infrastructure as code flow, e.g. by codifying the infrastructure you need using Terraform.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/backup-restore","loc":{"lines":{"from":81,"to":83}}}}],["1364",{"pageContent":"## How to restore\n\nThe following explains how you might restore Gitpod after its underlying cluster fails.\n\n1. Recreate your infrastructure. Ideally, you do this using something like a Terraform script.\n2. Configure Velero using the instructions [above](#configuring-velero) - it is recommended that you install the same version that you used previously.\n3. List your available backups using:\n\n```bash\nkubectl kots backup ls\n```\n\n4. Restore the backup using:\n\n```bash\nkubectl kots restore --from-backup instance-ab1cd\n```\n\n5. Load the KOTS dashboard:\n\n```bash\nkubectl kots admin-console --namespace gitpod\n```\n\n6. Hit the \"Redeploy\" button.\n7. This should result in your Gitpod instance having the same state as before, thus allowing your users to pick up where they left off.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/backup-restore","loc":{"lines":{"from":85,"to":110}}}}],["1365",{"pageContent":"## Security considerations\n\n### Application Config\n\nVelero should be configured so that is deployed to a different namespace to Gitpod. The Velero deployment will contain secrets which will allow access to your backup source of choice. Your Kubernetes cluster should be configured to limit access to these resources with use of a role-based access policy (RBAC).\n\nYou should always consult with the Velero documentation to ensure that you are following their best practice guidelines to ensure the integrity of your backup artifacts.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/backup-restore","loc":{"lines":{"from":112,"to":118}}}}],["1366",{"pageContent":"---\nsection: self-hosted/latest\nsubsection: reference\ntitle: Cluster Set-Up\n---\n\n# Cluster Requirements\n\n> ⚠️ **Gitpod Self-hosted is [no longer supported](/blog/introducing-gitpod-dedicated)**\n>\n> The last update of Gitpod Self-hosted product was [November 2022](/changelog/november-self-hosted-release). Users can still request our [free community license](/community-license) however there will be no support or updates to the product. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n\nGitpod is a Kubernetes application running with certain expectations on the characteristics of the cluster it is running on.\n\n![cluster requirements](/images/docs/self-hosted/cluster-requirements.png)\n\n<!-- raw editable diagram can be found under static/images/docs/self-hosted/cluster-requirements.excalidraw -->","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/cluster-requirements","loc":{"lines":{"from":1,"to":17}}}}],["1367",{"pageContent":"## Reference Architectures\n\nWe have created a set of [reference architectures](../latest/reference-architecture) for all the major cloud providers that fulfil the requirements below. These are intended as a starting point for you to create an environment to install Gitpod into. If you wish to use K3s, please refer to the [k3s guide](../latest/cluster-set-up/on-k3s).","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/cluster-requirements","loc":{"lines":{"from":19,"to":21}}}}],["1368",{"pageContent":"## Supported Kubernetes Distributions\n\nGitpod requires Kubernetes as an orchestration technology in order to spin workspaces up and down--ideally in combination with cluster autoscaling to minimize cost. We strongly recommend deploying a dedicated Kubernetes cluster just for Gitpod Self-Hosted.\n\n> Kubernetes version `1.21` or above is required\n\nGitpod Self-Hosted runs well on:\n\n-   Amazon Elastic Kubernetes Service\n-   Google Kubernetes Engine\n-   Microsoft Azure Kubernetes Service\n-   K3s","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/cluster-requirements","loc":{"lines":{"from":23,"to":34}}}}],["1369",{"pageContent":"### Incompatible Kubernetes Distributions\n\nThese platforms do not currently work with Gitpod Self-Hosted but we would like to support them in the future. Gitpod is an open-source project, maybe you could contribute the required changes to help get them working sooner?\n\n-   [Red Hat® OpenShift®](https://github.com/gitpod-io/gitpod/issues/5409)\n-   [Rancher Kubernetes Engine (RKE)](https://github.com/gitpod-io/gitpod/issues/5410)\n\nIf you are considering purchasing a commercial license for Gitpod Self-Hosted and need one of the above platforms then please [contact us](/contact/sales) to start discussions about making support for them happen sooner.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/cluster-requirements","loc":{"lines":{"from":36,"to":43}}}}],["1370",{"pageContent":"## Node Affinity Labels Requirements\n\nYour Kubernetes cluster must have node(s) with the following labels applied to them:\n\n-   `gitpod.io/workload_meta=true`\n-   `gitpod.io/workload_ide=true`\n-   `gitpod.io/workload_workspace_services=true`\n-   `gitpod.io/workload_workspace_regular=true`\n-   `gitpod.io/workload_workspace_headless=true`\n\nIt is recommended to have a minimum of two node pools, grouping the `meta` and `ide` nodes into one node pool and `workspace` related nodes into another. These two groups of workloads have different performance characteristics. Separating them into node pools after the fact is more difficult and incurs downtime.\n\n## Node and Container Requirements\n\nThese are the components expected on each node:\n\n-   Either Ubuntu 18.04 with ≥ v5.4 kernel or Ubuntu 20.04 with ≥ v5.4 kernel\n-   Calico for the networking overlay and network policy\n-   Containerd ≥ 1.5\n-   At least 4 vCPU and 16GB of RAM","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/cluster-requirements","loc":{"lines":{"from":45,"to":64}}}}],["1371",{"pageContent":"## Kubernetes Privilege Requirements\n\nYour Kubernetes cluster must allow Gitpod to run privileged pods and manage PodSecurityPolicies, as Gitpod depends on these privileges to provide workspace isolation.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/cluster-requirements","loc":{"lines":{"from":66,"to":68}}}}],["1372",{"pageContent":"## Load Balancer Requirements\n\nGitpod uses [`LoadBalancer` type services](https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer) to expose the Gitpod Dashboard, browser-based IDEs, and SSH connections used by desktop IDEs. Your Kubernetes cluster must be able to provision layer 4 or layer 7 load balancers for `LoadBalancer` type services that can route HTTP(S) connections to Gitpod services. If you intend to use desktop IDEs or SSH to workspaces then your cluster must also be able to provision layer 4 load balancers that can route SSH connection to Gitpod services.\n\nAll supported Kubernetes distributions provide load balancers that meet Gitpod's needs. For more information see the Kubernetes distribution documentation below:","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/cluster-requirements","loc":{"lines":{"from":70,"to":74}}}}],["1373",{"pageContent":"All supported Kubernetes distributions provide load balancers that meet Gitpod's needs. For more information see the Kubernetes distribution documentation below:\n\n-   [Google Kubernetes Engine](https://cloud.google.com/kubernetes-engine/docs/concepts/service-load-balancer)\n-   Amazon Elastic Kubernetes Engine:\n    -   Layer 4/7 (default): [Classic Load Balancer](https://aws.amazon.com/premiumsupport/knowledge-center/eks-kubernetes-services-cluster/)\n    -   Layer 4 only: [Network Load Balancing](https://docs.aws.amazon.com/eks/latest/userguide/network-load-balancing.html)\n-   [Microsoft Azure Kubernetes Service](https://docs.microsoft.com/en-us/azure/aks/concepts-network)\n-   [K3s](https://rancher.com/docs/k3s/latest/en/networking/#service-load-balancer)","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/cluster-requirements","loc":{"lines":{"from":74,"to":81}}}}],["1374",{"pageContent":"---\nsection: self-hosted/latest\nsubsection: troubleshooting\ntitle: Config Patches\n---\n\n# Gitpod Configuration Patches\n\n> ⚠️ **Gitpod Self-hosted is [no longer supported](/blog/introducing-gitpod-dedicated)**\n>\n> The last update of Gitpod Self-hosted product was [November 2022](/changelog/november-self-hosted-release). Users can still request our [free community license](/community-license) however there will be no support or updates to the product. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n\nFurther customization of your installation is possible within the installation UI, where Gitpod can provide you with a config patch to tailor the installation to your specific needs. In the “Additional Options” section, click the “Enable additional options” checkbox, and upload the file in the “Gitpod config patch” field.\n\n![config patch](/images/docs/self-hosted/config-patch.png)","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/config-patches","loc":{"lines":{"from":1,"to":15}}}}],["1375",{"pageContent":"![config patch](/images/docs/self-hosted/config-patch.png)\n\nThe patch file is effectively a patch for the internally used [Gitpod Installer config file](https://github.com/gitpod-io/gitpod/blob/main/install/installer/example-config.yaml). It gives you access to all configuration options that Gitpod accepts - even those not present in the UI. All values that are set in the patch file will override the generated config file values.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/config-patches","loc":{"lines":{"from":15,"to":17}}}}],["1376",{"pageContent":"---\nsection: self-hosted/latest\nsubsection: operational-guides\ntitle: Configuring workspace resources and limits\n---\n\n# Configuring workspace resources\n\n> ⚠️ **Gitpod Self-hosted is [no longer supported](/blog/introducing-gitpod-dedicated)**\n>\n> The last update of Gitpod Self-hosted product was [November 2022](/changelog/november-self-hosted-release). Users can still request our [free community license](/community-license) however there will be no support or updates to the product. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n\nConfiguring workspace resources and limits is essential to balancing the following factors:","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/configuring-workspace-resources","loc":{"lines":{"from":1,"to":13}}}}],["1377",{"pageContent":"Configuring workspace resources and limits is essential to balancing the following factors:\n\n-   **Workspace performance:** The amount of compute available to each workspace\n-   **Workspace startup times:** Having smaller workspaces on a node increases the chances of there being space available for another workspace, meaning that a new node does not need to be spun up. On the other extreme: one workspace per node means a new node needs to be spun up for every new workspace\n-   **Your cost of compute:** The fewer resources your workspaces request, the more you can fit on the node - and the fewer nodes you have to pay for","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/configuring-workspace-resources","loc":{"lines":{"from":13,"to":17}}}}],["1378",{"pageContent":"## How to configure workspace requests and limits\n\n> You should always be setting limits for your workspaces in order to avoid a process taking up the resources of an entire node, starving all other processes. We recommend sizing workspaces onto a node such that `4 cores` and `8 GiB of RAM` are left unused for Gitpod's services (mainly `ws-daemon`) and other processes (e.g. the kubelet).\n\nCurrently, workspace resources and limits can be set via a [config-patch](./config-patches).\n\nFor example, assuming a machine with 16 CPUs and 64 GB of memory, we recommend the following config-patch:\n\n```yaml\nworkspace:\n    resources:\n        requests:\n            cpu: '4'\n            memory: 16Gi\n        limits:\n            cpu: '4'\n            memory: 16Gi","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/configuring-workspace-resources","loc":{"lines":{"from":19,"to":35}}}}],["1379",{"pageContent":"```\n\nWith this configuration, 3 workspaces should fit onto the aforementioned 16 CPU / 64 GB memory node (with CPU cores being the limiting factor). A workspace would always have 4 CPUs and 16 GB of RAM available. These numbers are also used when scheduling workspaces onto pods - workspaces are only scheduled onto nodes that have at least these amounts of resources available.\n\n> This is intentionally on the conservative side due to potential resource conflicts concerning I/O bandwidth.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/configuring-workspace-resources","loc":{"lines":{"from":36,"to":40}}}}],["1380",{"pageContent":"---\nsection: self-hosted/latest\ntitle: Self-Hosted\n---\n\n<script lang=\"ts\">\n  import OpenGraph from \"$lib/components/open-graph.svelte\";\n</script>\n\n<OpenGraph\ndata={{\n    description:\n      \"Install and run Gitpod with full control on public cloud providers or self-managed Kubernetes clusters. Enterprise-grade security within corporate firewalls and air-gapped networks. Requirements. Installation. Configuration. GKE. EKS. AKS. Open-source.\",\n    title: \"Gitpod Self-Hosted installation guide\",\n    keywords: \"installation\",\n  }}\n/>\n\n# Self-Hosted","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest","loc":{"lines":{"from":1,"to":19}}}}],["1381",{"pageContent":"# Self-Hosted\n\n> ⚠️ **Gitpod Self-hosted is [no longer supported](/blog/introducing-gitpod-dedicated)**\n>\n> The last update of Gitpod Self-hosted product was [November 2022](/changelog/november-self-hosted-release). Users can still request our [free community license](/community-license) however there will be no support or updates to the product. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n\nGitpod can be deployed and operated on your own infrastructure. It supports different cloud providers, self-managed Kubernetes clusters, corporate firewalls, and even off-grid / air-gapped networks.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest","loc":{"lines":{"from":19,"to":25}}}}],["1382",{"pageContent":"## Local Preview\n\nThe [Local Preview](/docs/configure/self-hosted/latest/local-preview) installation of Gitpod Self-Hosted is the easiest way to try out Gitpod locally in situations where you cannot use the [SaaS version](https://gitpod.io/workspaces/) and cannot easily spin up a Kubernetes cluster to use the Proof-of-Value [reference architecture](/docs/configure/self-hosted/latest/reference-architecture).\n\nIt is intended for preview purposes only - we strongly encourage the Kubernetes-based installation below for continuous usage.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest","loc":{"lines":{"from":27,"to":31}}}}],["1383",{"pageContent":"## Prerequisites to Install Gitpod Self-Hosted\n\n> **Note:** Gitpod is not just a simple Kubernetes application like a web shop app. It is more of an infrastructure tool comparable to a build system that heavily makes use of Kubernetes internals to build and deploy images, control Kubernetes containers (the workspaces) and more. This is why it needs more permissions in Kubernetes than a simple web app.\n\n-   **Kubernetes expertise** <br />\n    Gitpod is a Kubernetes application that makes heavy use of various Kubernetes features. It is highly recommended to have sufficient Kubernetes experience in order to install Gitpod. These docs expect that you are able to create and maintain a Kubernetes cluster that meets our [requirements](./latest/requirements) on your own.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest","loc":{"lines":{"from":33,"to":38}}}}],["1384",{"pageContent":"-   **Compatible Kubernetes cluster** <br />\n    To install Gitpod you need to have a Kubernetes cluster up and running. There are a few [requirements](/docs/configure/self-hosted/latest/requirements) that must be met. Please see the [product compatibility matrix](/docs/references/compatibility?admin) supported Kubernetes distributions. To help you get started, there are several different situation-dependent [reference architectures](./latest/reference-architecture) for all major cloud providers that include both a detailed guide as well as terraform configuration.\n\n-   **Cert-Manager** <br />\n    Gitpod expects a properly configured [cert-manager](https://cert-manager.io/) that runs in the cluster. It is used to issue internal certificates for the Gitpod installation and to create certificates for the Gitpod domain (unless you bring your own domain certificates).","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest","loc":{"lines":{"from":40,"to":44}}}}],["1385",{"pageContent":"-   **DNS setup** <br />\n    For your Gitpod installation you need a properly configured domain. The domain itself and the wildcard subdomain `*.example.com`, `*.ws.example.com` (replace `example.com` with your Gitpod domain) need to point to the cluster ingress.\n\n-   **Gitpod product license** <br />\n    To install Gitpod, you need a license that you can get [here](/community-license).","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest","loc":{"lines":{"from":46,"to":50}}}}],["1386",{"pageContent":"## Installing Gitpod\n\nThe [installation guide](./latest/installing-gitpod) provides you with step-by-step instructions on how to install Gitpod on your infrastructure.\n\n## Troubleshooting\n\nRefer to the [troubleshooting section](./latest/troubleshooting) for help with your Gitpod Self-Hosted Instance. You can also take a look at our [support page](/support) to learn how to reach our community and support team.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest","loc":{"lines":{"from":52,"to":58}}}}],["1387",{"pageContent":"---\nsection: self-hosted/latest\nsubsection: installation-guides\ntitle: Installation Guides\n---\n\n# Installation Guides\n\n> ⚠️ **Gitpod Self-hosted is [no longer supported](/blog/introducing-gitpod-dedicated)**\n>\n> The last update of Gitpod Self-hosted product was [November 2022](/changelog/november-self-hosted-release). Users can still request our [free community license](/community-license) however there will be no support or updates to the product. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n> Read [our blog on Gitpod Dedicated](/blog/introducing-gitpod-dedicated) to learn why we made the decision to discontinue self-hosted.\n\nThis section has the guides you need to install Gitpod:","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/installation-guides","loc":{"lines":{"from":1,"to":14}}}}],["1388",{"pageContent":"This section has the guides you need to install Gitpod:\n\n-   [Local Preview](local-preview) - Try out Gitpod locally without having to set up a Kubernetes cluster\n-   [Reference Architectures](/docs/configure/self-hosted/latest/reference-architecture) - Help with setting up your Kubernetes cluster to run Gitpod on\n-   [Installation guide](/docs/configure/self-hosted/latest/installing-gitpod) - How to install Gitpod onto an Kubernetes cluster\n-   [Advanced Installation Guides](/docs/configure/self-hosted/latest/advanced) - Help with advanced installation topics","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/installation-guides","loc":{"lines":{"from":14,"to":19}}}}],["1389",{"pageContent":"---\nsection: self-hosted/latest\nsubsection: background\ntitle: Disaster Recovery\n---\n\n# Business Continuity and Disaster Recovery Considerations with Gitpod\n\n> ⚠️ **Gitpod Self-hosted is [no longer supported](/blog/introducing-gitpod-dedicated)**\n>\n> The last update of Gitpod Self-hosted product was [November 2022](/changelog/november-self-hosted-release). Users can still request our [free community license](/community-license) however there will be no support or updates to the product. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n\n> **Note:** There is a lot more to disaster recovery than we can cover here. This is just a high-level overview that speaks to how disaster recovery relates to Gitpod - it does not aim to be a complete guide to the topic.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/disaster-recovery","loc":{"lines":{"from":1,"to":13}}}}],["1390",{"pageContent":"### Disaster Recovery Principles\n\nThinking about disaster recovery with Gitpod is essential for business continuity and compliance reasons given how critical Gitpod is within your business’ practices: it is not only used to write code for new features but also e.g. to fix a security vulnerability.\n\nWhen evaluating different disaster recovery strategies, it is important to keep in mind the business impact of different strategies. This impact is often defined by these interconnected metrics:","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/disaster-recovery","loc":{"lines":{"from":15,"to":19}}}}],["1391",{"pageContent":"When evaluating different disaster recovery strategies, it is important to keep in mind the business impact of different strategies. This impact is often defined by these interconnected metrics:\n\n-   **Recovery Time Objective (RTO):** this is the amount of time it takes to recover from a catastrophic failure. Applying this to Gitpod, this would be the time between a major outage that renders Gitpod unusable and the point at which Gitpod is restored and developers can develop again.\n-   **Recovery Point Objective (RPO):** This is the maximum amount of data loss (measured by time) during an outage that is acceptable to an organisation.\n-   **Acceptable Cost:** Different disaster recovery strategies come with different cost profiles. You need to know the acceptable cost level for your business to help choose the right strategy.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/disaster-recovery","loc":{"lines":{"from":19,"to":23}}}}],["1392",{"pageContent":"The accepted value of each key metric will depend on your business’ risk appetite and acceptable cost levels. These metrics can be used to better understand and categorise the different disaster recovery options available with Gitpod.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/disaster-recovery","loc":{"lines":{"from":25,"to":25}}}}],["1393",{"pageContent":"## Disaster Recovery Strategies\n\n> **Note:** Whichever disaster recovery strategy you chose, make sure that you practice it end-to-end regularly to ensure that you can execute it successfully if ever it does become necessary.\n\nPlease refer to our guide around [backing up and restoring Gitpod](backup-restore) to learn more about which data Gitpod produces and how it can be backed up.\n\n### Backup And Restore (Higher RTO)\n\nWith this strategy, you aim to replace a failed Gitpod instance or Kubernetes cluster by spinning up an entirely new cluster. You can find out more on how to do this in our [How to Backup and Restore Guide](backup-restore).\n\nThis strategy has the benefit of being cost-effective because you only operate a single cluster at a time. However, the time to spin up a new cluster and install Gitpod can be high increasing the time to recover. Thus, depending on your recovery time objective, it may be beneficial to evaluate the strategies mentioned below.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/disaster-recovery","loc":{"lines":{"from":27,"to":37}}}}],["1394",{"pageContent":"### Pilot Light (Medium RTO)\n\nWith this strategy, you keep a secondary Kubernetes cluster running that is identical to the one used in production - but in a separate data center and scaled down to the minimum set of nodes to save cost. This means that you do not need to first spin up a cluster in case of disaster but can rather use the one already running to install Gitpod onto (using the same external dependencies and thus data as your production cluster) and then shift traffic to. This can significantly reduce your time to recovery but comes with the cost of running an additional cluster.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/disaster-recovery","loc":{"lines":{"from":39,"to":41}}}}],["1395",{"pageContent":"---\nsection: self-hosted/latest\nsubsection: installation-guides\ntitle: Installing Gitpod Self-Hosted\n---\n\n# Installing Gitpod Self-Hosted\n\n> ⚠️ **Gitpod Self-hosted is [no longer supported](/blog/introducing-gitpod-dedicated)**\n>\n> The last update of Gitpod Self-hosted product was [November 2022](/changelog/november-self-hosted-release). Users can still request our [free community license](/community-license) however there will be no support or updates to the product. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n\n> **Note:** Setting up a self-hosted Gitpod instance needs some Kubernetes experience. Detailed guidance on how to setup and maintain a Kubernetes cluster is behind the scope of these docs. Please also see the [_prerequisites_](/docs/configure/self-hosted/latest/installing-gitpod#prerequisites) below.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/installing-gitpod","loc":{"lines":{"from":1,"to":13}}}}],["1396",{"pageContent":"## Prerequisites\n\n> These prerequisites are fulfilled already if you used one of the [reference architectures](./reference-architecture). We strongly encourage the use of these reference architectures. Please see the [requirements](./requirements) for more information on what Gitpod needs to function.\n\n<details>\n  <summary  class=\"text-p-medium\"><b> Kubernetes Cluster</b></summary>\n\nGitpod is a Kubernetes application that uses Kubernetes internally to provision workspaces as Kubernetes pods. Before you can start installing Gitpod, you need to create a compatible Kubernetes cluster. The [reference architectures](./reference-architecture) will help you to get started with your favorite cloud provider. If you are creating a cluster yourself, it's up to you to set up a cluster that meets the [requirements](./requirements).\n\n</details>\n\n<details>\n  <summary  class=\"text-p-medium\"><b>Cert-Manager installed on the cluster</b></summary>","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/installing-gitpod","loc":{"lines":{"from":15,"to":27}}}}],["1397",{"pageContent":"</details>\n\n<details>\n  <summary  class=\"text-p-medium\"><b>Cert-Manager installed on the cluster</b></summary>\n\nOnce you have created your Kubernetes cluster you need to install [cert-manager](https://cert-manager.io/). cert-manager is needed even when you bring your own TLS certificate for your domain. Please consider the [cert-manager documentation](https://cert-manager.io/docs/) on how to install it.\n\n</details>\n\n<details>\n  <summary  class=\"text-p-medium\"><b>DNS and TLS configured</b></summary>\n\nTo install Gitpod you need a domain with a TLS certificate. The DNS setup to your domain needs to be configured such that it points to the ingress of your Kubernetes cluster. You need to configure your actual domain (say `example.com`) as well as the wildcard subdomains `*.example.com` and `*.ws.example.com`. Alternatively, you can rely on a configured `Issuer`/`ClusterIssuer` plus a `Certificate` (that also includes the wildcard domains) for cert-manager:","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/installing-gitpod","loc":{"lines":{"from":27,"to":39}}}}],["1398",{"pageContent":"**Creating TLS certs for your domain with cert-manager**\n\ncert-manager provides the Gitpod installation with certificates for internal communication. Besides this, cert-manager can also create a TLS certificate for your domain. Since Gitpod needs wildcard certificates, you must use the [DNS-01 challenge](https://letsencrypt.org/docs/challenge-types/#dns-01-challenge). Please consult the [cert-manager documentation](https://cert-manager.io/docs/configuration/acme/dns01) for instructions. You can use either an [`Issuer` or `ClusterIssuer`](https://cert-manager.io/docs/concepts/issuer).\n\nFollowing the cert-manager instructions, you will have an `Issuer` or `ClusterIssuer` with a configured `dns01` solver (most probably with a proper secret with credentials for your DNS provider) as well a `Certificate` with the following `dnsNames`:\n\n-   `example.com`\n-   `*.example.com`\n-   `*.ws.example.com`\n\n_(replace `example.com` with your Gitpod domain)_\n\n</details>","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/installing-gitpod","loc":{"lines":{"from":41,"to":53}}}}],["1399",{"pageContent":"## Install Gitpod\n\nTo start with installing Gitpod, you need a terminal where you can run `kubectl` against your cluster. First, install the KOTS kubectl plugin:\n\n```shell\ncurl https://kots.io/install | bash\n```\n\nNow, you are ready to install Gitpod. Run the following command in your terminal:\n\n```shell\nkubectl kots install gitpod\n```\n\nYou will be asked for the namespace you want to install Gitpod to as well as a password for the admin console. After some time, you will see the following output:\n\n```\n  • Press Ctrl+C to exit\n  • Go to http://localhost:8800 to access the Admin Console","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/installing-gitpod","loc":{"lines":{"from":55,"to":73}}}}],["1400",{"pageContent":"```\n\nOpen your favorite browser and go to `http://localhost:8800` (port `8800` is opened on your node on `localhost` only--you may want to forward the port to your workstation in order to access the admin console).\n\nThe first page will ask you to upload your Gitpod license which you can get [here](/community-license) For more information about our licenses and respective pricing plans, please visit our [self-hosted pricing page](https://www.gitpod.io/self-hosted).\n\nAfter uploading the license, you will be forwarded to the config page. On this page, you need to enter your domain name for your Gitpod installation. You can also configure to use [external components](./requirements) (by default internal ones are installed) as well as your TLS certs setup or your [workspace size](./configuring-workspace-resources). Click “Continue” to proceed with the installation.\n\n![kots-install-config](/images/docs/self-hosted/kots-install-config.png)","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/installing-gitpod","loc":{"lines":{"from":74,"to":82}}}}],["1401",{"pageContent":"![kots-install-config](/images/docs/self-hosted/kots-install-config.png)\n\nIn the next step, the installer runs a preflight check. This validates your cluster meets the minimum requirements. Everything is green? Awesome! Click “Continue” to proceed.\n\n![kots-preflights-results](/images/docs/self-hosted/kots-preflights-results.png)\n\nNow, you are seeing the installation admin page. Once the installation has been finished successfully, you will see the status “Ready” with a small green indicator next to the Gitpod logo. You will also see which version you installed and which license you are using.\n\n![kots-admin-dashboard](/images/docs/self-hosted/kots-admin-dashboard.png)\n\nOpen your Gitpod domain in your browser to access your running Gitpod instance. You should be greeted by the following screen:\n\n![welcome screen](/images/docs/self-hosted/welcome-screen.png)\n\nYou will then be asked to configure a git integration:","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/installing-gitpod","loc":{"lines":{"from":82,"to":96}}}}],["1402",{"pageContent":"![welcome screen](/images/docs/self-hosted/welcome-screen.png)\n\nYou will then be asked to configure a git integration:\n\n![git integration setup](/images/docs/self-hosted/git-integration-setup.png)\n\nThis git integration will also serve as the way that you and your users get authenticated against your Gitpod installation. You can find out more in the [Integrations](/docs/integrations) section.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/installing-gitpod","loc":{"lines":{"from":96,"to":102}}}}],["1403",{"pageContent":"> **Important:** Public (SaaS) Source Control Management Systems (SCMs) (i.e. [GitLab.com](http://Gitlab.com), [GitHub.com](http://github.com/) and [Bitbucket.org](http://Bitbucket.org)) are **not** integrated by default with a Self-Hosted Gitpod instance because OAuth apps are tied to domains. Therefore, these public SCMs need to be integrated manually with an OAuth application you specifically create for your domain. This is done similarly to how it is done for the private/self-hosted versions of each SCM. As such their respective guides also apply here:\n>\n> -   Follow [these](/docs/configure/authentication/gitlab#registering-a-self-hosted-gitlab-installation) steps to integrate [`GitLab.com`](https://gitlab.com/) with your self-hosted Gitpod instance. You will need to enter `gitlab.com` as the `Provider Host Name` in the New Git Integration Modal.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/installing-gitpod","loc":{"lines":{"from":104,"to":106}}}}],["1404",{"pageContent":"> -   Follow [these](/docs/configure/authentication/github-enterprise) steps to integrate [`GitHub.com`](http://github.com) with your self-hosted Gitpod instance. You will need to enter `github.com` as the `Provider Host Name` in the New Git Integration Modal.\n> -   Follow [these](/docs/configure/authentication/bitbucket-server) steps to integrate [`Bitbucket.org`](https://bitbucket.org/) with your self-hosted Gitpod instance. Select `Bitbucket` as the `Provider Type` in the New Git Integration Modal. For bitbucket.org this requires configuring an \"OAuth consumer\" on a \"workspace\". This is slightly different from the documented Bitbucket Server integration. See [gitpod PR #9894](https://github.com/gitpod-io/gitpod/pull/9894#pullrequestreview-969013833) for an example.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/installing-gitpod","loc":{"lines":{"from":107,"to":108}}}}],["1405",{"pageContent":"> **Note:** Your first workspace start can take a bit of time because the workspace image first needs to be built and then downloaded. Subsequent workspace starts should be much quicker.\n\nOnce you are all set up, you can visit the [getting started with Gitpod page](/docs/introduction/getting-started) to start learning about using Gitpod. You should also familiarise yourself with our [guides around operating Gitpod Self-Hosted](./operational-guides), especially the guide that explains [how to update Gitpod](./updating).","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/installing-gitpod","loc":{"lines":{"from":110,"to":112}}}}],["1406",{"pageContent":"---\nsection: self-hosted/latest\nsubsection: installation-guides\ntitle: Local Preview of Gitpod Self-Hosted\n---\n\n<script lang=\"ts\">\n\n  import BigPill from \"$lib/components/big-pill.svelte\";\n  import Tooltip from \"$lib/components/tooltip.svelte\";\n</script>\n\n# How to Install the Local Preview of Gitpod Self-Hosted\n\n> ⚠️ **Gitpod Self-hosted is [no longer supported](/blog/introducing-gitpod-dedicated)**\n>\n> The last update of Gitpod Self-hosted product was [November 2022](/changelog/november-self-hosted-release). Users can still request our [free community license](/community-license) however there will be no support or updates to the product. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/local-preview","loc":{"lines":{"from":1,"to":17}}}}],["1407",{"pageContent":"| <!-- Our markdown parser does not support tables without a header --> ||","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/local-preview","loc":{"lines":{"from":19,"to":19}}}}],["1408",{"pageContent":"| --------------------------------------------------------------------- ||","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/local-preview","loc":{"lines":{"from":20,"to":20}}}}],["1409",{"pageContent":"| Status:                                                               | <BigPill text=\"beta\" class=\"ml|","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/local-preview","loc":{"lines":{"from":21,"to":21}}}}],["1410",{"pageContent":"| Intended for:                                                         | The Local Preview allows you to experience Gitpod Self-Hosted on your local machine without having to set up a Kubernetes cluster. It is purely intended for testing purposes. Please see the [installation guides section](./installation-guides) for recommended sustainable installation methods. <!-- To Do : replace link to getting started with reference architectures once these are fully ready-->                                                                                                                                                                                          |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/local-preview","loc":{"lines":{"from":22,"to":22}}}}],["1411",{"pageContent":"| Limitations:                                                          | - Performance is limited by the capabilities of your machine. Your experience is likely to be better when using the SaaS version ([gitpod.io](/docs/introduction/getting-started)) or when running on one of our [reference architectures](./reference-architecture) <br /> - Minimum of 4 cores and 6GB of ram required. **Macs with Apple Silicon (e.g. M1) are currently not supported.** See [the relevant issue](https://github.com/gitpod-io/gitpod/issues/11309) for more information <br /> - [Prebuilds](/docs/configure/projects/prebuilds) are not supported because they require webhooks |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/local-preview","loc":{"lines":{"from":23,"to":23}}}}],["1412",{"pageContent":"The Local Preview of Gitpod Self-Hosted is the easiest way to try out Gitpod locally in situations where you cannot use the SaaS version ([gitpod.io](/docs/introduction/getting-started)) and cannot easily spin up a Kubernetes cluster to use the [Proof-of-Value Reference Architecture](./reference-architecture/proof-of-value). It allows you to try Gitpod Self-Hosted locally with minimal effort and resource requirements. As a result, this is **not intended for production** nor continuous usage. Please refer to the [installation guide](/docs/configure/self-hosted/latest/installing-gitpod) for instructions on how to install Gitpod for continuous usage. <!-- To Do : replace link to getting started with reference architectures once these are fully ready-->","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/local-preview","loc":{"lines":{"from":25,"to":25}}}}],["1413",{"pageContent":"This install method runs a [K3s](https://k3s.io/) cluster inside a Docker container. Self-signed certificates are automatically created and a Gitpod instance using these certificates will be installed into the `k3s` cluster. See our [TLS](./advanced/tls) page for more information about Gitpod and certificates.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/local-preview","loc":{"lines":{"from":27,"to":27}}}}],["1414",{"pageContent":"## 1. Running the Docker container\n\nRun the following command to get the `local-preview` Docker container up and running:\n\n```bash\ndocker run -p 443:443 --privileged --name gitpod -it --mount type=volume,source=gitpod,destination=/var/gitpod eu.gcr.io/gitpod-core-dev/build/local-preview","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/local-preview","loc":{"lines":{"from":29,"to":34}}}}],["1415",{"pageContent":"```\n\nUnpacking the above command:\n\n-   `-p 443:443` to map the `443` container port to host.\n-   `--privileged` to be able to run docker (and hence `k3s`) inside the container. This is necessary.\n-   `--name gitpod` to set the name of the docker container for further access.\n-   `--rm` to delete the Docker container after stopping.\n-   `--mount type=volume,source=gitpod,destination=/var/gitpod` to create a volume called `gitpod`, and mounting it to the container.\n\n> **Note:** By default, `preview.gitpod-self-hosted.com` is the DOMAIN to access Gitpod which routes to `127.0.0.1` localhost IP address. To use another host network IP Address, the `DOMAIN` environment can be set accordingly via an `-e` flag in the above command. This is useful to share access to the Gitpod Self-Hosted instance running on your machine within your local network. For Example, `192.168.0.42` Host Network IP would be `192-168-0-42.nip.io`, set by appending `-e DOMAIN=192-168-0-42.nip.io`.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/local-preview","loc":{"lines":{"from":35,"to":45}}}}],["1416",{"pageContent":"## 2. Accessing Gitpod\n\n> **Note:** It usually takes around 5 minutes to go from the `starting Gitpod` status to `Gitpod is running`. Among other things, this will depend on the speed of your internet connection. Once Gitpod is ready, it will look as follows:\n\n![gitpod is ready](/images/docs/self-hosted/local-preview-ready.png)\n\nAs this is a self-signed instance of Gitpod, the Gitpod root CA cert has to be imported into your browser manually to access the full functionality of Gitpod. The certificate can be retrieved by running the following:\n\n```bash\ndocker cp gitpod:/var/gitpod/gitpod-ca.crt $HOME/gitpod-ca.crt","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/local-preview","loc":{"lines":{"from":47,"to":56}}}}],["1417",{"pageContent":"```\n\nThis certificate is saved at `$HOME/gitpod-ca.crt` and can then be loaded into your browser. Most browsers also require a restart before they can start to use the imported certificate. For instructions on how to load the certificate, choose your setup below:\n\n<details>\n  <summary  class=\"text-p-medium\">Chrome on Windows</summary>\n\n<div class=\"not-prose\" style=\"position: relative; padding-bottom: 56.25%; height: 0;\"><iframe src=\"https://www.loom.com/embed/1814061fbd9c4be7b18d8ae8919cabc6\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%;\"></iframe></div>\n</details>\n<details>\n  <summary  class=\"text-p-medium\">Edge on Windows</summary>","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/local-preview","loc":{"lines":{"from":57,"to":67}}}}],["1418",{"pageContent":"<div class=\"not-prose\" style=\"position: relative; padding-bottom: 56.25%; height: 0;\"><iframe src=\"https://www.loom.com/embed/ee3051ac367140c3a2f60cd4e15a0192\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%;\"></iframe></div>\n\n</details>\n\n<details>\n  <summary  class=\"text-p-medium\">Firefox on Windows</summary>\n\n<div class=\"not-prose\" style=\"position: relative; padding-bottom: 56.25%; height: 0;\"><iframe src=\"https://www.loom.com/embed/513796d28a2647dba2cdd8f9312d4f98\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%;\"></iframe></div>\n\n</details>\n\n<details>\n  <summary  class=\"text-p-medium\">Google Chrome on MacOS</summary>","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/local-preview","loc":{"lines":{"from":69,"to":81}}}}],["1419",{"pageContent":"</details>\n\n<details>\n  <summary  class=\"text-p-medium\">Google Chrome on MacOS</summary>\n\n<div class=\"not-prose\" style=\"position: relative; padding-bottom: 56.25%; height: 0;\"><iframe src=\"https://www.loom.com/embed/39e870e6f91c4f5bad1550f3647fed29\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%;\"></iframe></div>\n\n</details>\n\n<details >\n  <summary  class=\"text-p-medium\">Mozilla Firefox on MacOS</summary>\n\n<div class=\"not-prose\" style=\"position: relative; padding-bottom: 56.25%; height: 0;\"><iframe src=\"https://www.loom.com/embed/2ce25cf844744359ae2b14263d9c2fb0\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%;\"></iframe></div>\n\n</details>\n\n<br/>","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/local-preview","loc":{"lines":{"from":81,"to":97}}}}],["1420",{"pageContent":"</details>\n\n<br/>\n\nOnce the certificate is loaded and Gitpod is ready, the URL to access the Gitpod instance would be `https://preview.gitpod-self-hosted.com` unless the `DOMAIN` environment is overridden in which case the same has to be used.\n\nYou should be greeted by the following screen:\n\n![welcome screen](/images/docs/self-hosted/welcome-screen.png)\n\nYou will then be asked to configure a git integration:\n\n![git integration setup](/images/docs/self-hosted/git-integration-setup.png)\n\nThis git integration will also serve as the way that you and your users get authenticated against your Gitpod installation. You can find out more in the [Integrations](/docs/integrations) section.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/local-preview","loc":{"lines":{"from":97,"to":111}}}}],["1421",{"pageContent":"> **Important:** Public (SaaS) Source Control Management Systems (SCMs) (i.e. [GitLab.com](http://Gitlab.com), [GitHub.com](http://github.com/) and [Bitbucket.org](http://Bitbucket.org)) are **not** integrated by default with a Self-Hosted Gitpod instance because OAuth apps are tied to domains. Therefore, these public SCMs need to be integrated manually with an OAuth application you specifically create for your domain. This is done similarly to how it is done for the private/self-hosted versions of each SCM. As such their respective guides also apply here:\n>\n> -   Follow [these](/docs/configure/authentication/gitlab#registering-a-self-hosted-gitlab-installation) steps to integrate [`GitLab.com`](https://gitlab.com/) with your self-hosted Gitpod instance. You will need to enter `gitlab.com` as the `Provider Host Name` in the New Git Integration Modal.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/local-preview","loc":{"lines":{"from":113,"to":115}}}}],["1422",{"pageContent":"> -   Follow [these](/docs/configure/authentication/github-enterprise) steps to integrate [`GitHub.com`](http://github.com) with your self-hosted Gitpod instance. You will need to enter `github.com` as the `Provider Host Name` in the New Git Integration Modal.\n> -   Follow [these](/docs/configure/authentication/bitbucket-server) steps to integrate [`Bitbucket.org`](https://bitbucket.org/) with your self-hosted Gitpod instance. Select `Bitbucket` as the `Provider Type` in the New Git Integration Modal. For bitbucket.org this requires configuring an \"OAuth consumer\" on a \"workspace\". This is slightly different from the documented Bitbucket Server integration. See [gitpod PR #9894](https://github.com/gitpod-io/gitpod/pull/9894#pullrequestreview-969013833) for an example.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/local-preview","loc":{"lines":{"from":116,"to":117}}}}],["1423",{"pageContent":"> **Note:** Your first workspace start can take a bit of time because the workspace image first needs to be built and then downloaded. Subsequent workspace starts should be much quicker.\n\nOnce you are all set up, you can visit the [getting started with Gitpod page](/docs/introduction/getting-started) to start learning about using Gitpod.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/local-preview","loc":{"lines":{"from":119,"to":121}}}}],["1424",{"pageContent":"---\nsection: self-hosted/latest\nsubsection: troubleshooting\ntitle: Manage Cluster Nodes\n---\n\n# Manage Cluster Nodes\n\n> ⚠️ **Gitpod Self-hosted is [no longer supported](/blog/introducing-gitpod-dedicated)**\n>\n> The last update of Gitpod Self-hosted product was [November 2022](/changelog/november-self-hosted-release). Users can still request our [free community license](/community-license) however there will be no support or updates to the product. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n\nSometimes nodes become unhealthy, or you need to prevent the autoscaler from removing the node from your cluster.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/manage-cluster-nodes","loc":{"lines":{"from":1,"to":13}}}}],["1425",{"pageContent":"## Avoiding Node Scale-down\n\nIf you wish to cordon a node with terminating workspaces, or, keep a node so you have time to manually backup user data:\n\n```shell\n# reference: https://github.com/kubernetes/autoscaler/blob/master/cluster-autoscaler/FAQ.md#how-can-i-prevent-cluster-autoscaler-from-scaling-down-a-particular-node\n$ kubectl annotate node <nodename> cluster-autoscaler.kubernetes.io/scale-down-disabled=true\n```\n\n## Handling Unhealthy Nodes\n\nPrevent new workspaces from being scheduled to a node if they become unhealthy:\n\n```shell\n$ kubectl cordon <nodename>\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/manage-cluster-nodes","loc":{"lines":{"from":15,"to":30}}}}],["1426",{"pageContent":"---\nsection: self-hosted/latest\nsubsection: operational-guides\ntitle: Monitoring Gitpod Self-Hosted\n---\n\n> This guide aims at helping you set up basic monitoring of your Gitpod instance. In the end, you will have a continuous, high-level view of the health of your installation that you can monitor and alert on to respond to any issues quicker.\n\n# Monitoring\n\n> ⚠️ **Gitpod Self-hosted is [no longer supported](/blog/introducing-gitpod-dedicated)**\n>\n> The last update of Gitpod Self-hosted product was [November 2022](/changelog/november-self-hosted-release). Users can still request our [free community license](/community-license) however there will be no support or updates to the product. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/monitoring","loc":{"lines":{"from":1,"to":13}}}}],["1427",{"pageContent":"Once you have Gitpod self-hosted up and running, the next step is making sure it _continues_ to run as expected. This guide shows you how to set up a monitoring solution that consumes the data that Gitpod produces in order to help you understand the overall state of your Gitpod installation.\n\n> **Note** All metrics shown on this page are experimental and might change in the future.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/monitoring","loc":{"lines":{"from":15,"to":17}}}}],["1428",{"pageContent":"## Metrics collection\n\nSeveral components of Gitpod expose metrics using the [Prometheus exposition format](https://prometheus.io/docs/concepts/data_model/), but for this guide, we'll focus on the most important one that makes sure that Workspaces are starting and running reasonably.\n\nGitpod is all about Workspaces, so the information that you want to keep an eye on is:\n\n-   How many workspaces are currently running.\n-   Workspaces are starting.\n-   Workspaces are starting in a reasonable time frame.\n-   Running workspaces don't stop unexpectedly.\n\n`ws-manager` is the component responsible for measuring and exposing such data, so you want to make sure that your Prometheus instance is scraping metrics from this specific component. Metrics are exposed through port `9500`, at the `/metrics` endpoint.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/monitoring","loc":{"lines":{"from":19,"to":30}}}}],["1429",{"pageContent":"We recommend using the [Prometheus-Operator](https://github.com/prometheus-operator/prometheus-operator) and the [ServiceMonitor](https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api.md#servicemonitorspec) or [PodMonitor](https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api.md#podmonitorspec) CRDs to simplify the configuration surface.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/monitoring","loc":{"lines":{"from":32,"to":32}}}}],["1430",{"pageContent":"## Dashboards and Alerts\n\nTo have all useful data available and presented in a friendly way, it is recommend building [Grafana Dashboards](https://grafana.com/grafana/dashboards/) with the most important metrics (the ones shown in this guide). If you prefer, you can [import](https://grafana.com/docs/grafana/latest/dashboards/export-import/#import-dashboard) [one of our examples](https://github.com/gitpod-io/gitpod/blob/main/operations/observability/mixins/self-hosted/dashboards/examples/overview.json) as a baseline to your own dashboards.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/monitoring","loc":{"lines":{"from":34,"to":36}}}}],["1431",{"pageContent":"Alerting can be done with [Prometheus itself](https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/). If you are using the Prometheus-Operator as we recommended, you can also use the [PrometheusRule](https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api.md#prometheusrulespec) CRD to simplify alerting configuration. The [Alertmanager](https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api.md#alertmanagerspec) CRD can be used to configure alert routing to different popular platform such as [PagerDuty](https://www.pagerduty.com/) or [Slack](https://slack.com/).","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/monitoring","loc":{"lines":{"from":38,"to":38}}}}],["1432",{"pageContent":"## What you should keep an eye on\n\n### How many workspaces are currently running\n\nTo discover how many workspaces are currently running, use the [PromQL query](https://prometheus.io/docs/prometheus/latest/querying/basics/) below:\n\n```promql\nsum(gitpod_ws_manager_workspace_phase_total{phase=\"RUNNING\"}) by (type)\n```\n\n`gitpod_ws_manager_workspace_phase_total` is a [Gauge](https://prometheus.io/docs/concepts/metric_types/#gauge). Although not suitable for alerting (because the amount of workspaces say little about your installation's health), with this query, you're able to tell how many workspaces, prebuilds and imagebuilds are running. This can be good information to tell how saturated your Gitpod instance is.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/monitoring","loc":{"lines":{"from":40,"to":50}}}}],["1433",{"pageContent":"### Workspaces are starting\n\nThe metric for this one is very similar to the one mentioned above, we're just changing the phase to `PENDING` instead of `RUNNING`.\n\n```promql\nsum(gitpod_ws_manager_workspace_phase_total{phase=\"PENDING\"}) by (type)\n```\n\nThis metric is a good candidate for alerting. If this number is steadily going up, it means that Workspaces are having a hard time getting to the `RUNNING` state, which is a good indicator of bad user experience. A good threshold changes from organization to organization, it is recommended to periodically review this alert's threshold as the usage of Gitpod increases or decreases.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/monitoring","loc":{"lines":{"from":52,"to":60}}}}],["1434",{"pageContent":"### Workspaces are starting in a reasonable time frame\n\nTo ensure a good user experience, you'll also want to make sure that Workspaces are starting swiftly! [Histograms](https://prometheus.io/docs/concepts/metric_types/#histogram) are used to capture this information. With histograms, it's possible to measure different percentiles and capture a high-level overview and outliers at the same time.\n\nExample queries are shown below:\n\n```promql\n# 95th percentile\nhistogram_quantile(0.95,\n    sum(rate(gitpod_ws_manager_workspace_startup_seconds_bucket{type=\"REGULAR\"}[5m])) by (le)\n)\n\n# 50th percentile\nhistogram_quantile(0.5,\n    sum(rate(gitpod_ws_manager_workspace_startup_seconds_bucket{type=\"REGULAR\"}[5m])) by (le)\n)","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/monitoring","loc":{"lines":{"from":62,"to":77}}}}],["1435",{"pageContent":"```\n\nSluggishness, depending on how bad it is, can be even worst than a fast failure. For that reason, alerting on workspaces taking too long to start is a good idea. It is suggested to collect feedback from users of your Gitpod installation to decide the correct thresholds for the alert on this metric.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/monitoring","loc":{"lines":{"from":78,"to":80}}}}],["1436",{"pageContent":"### Running workspaces don't stop unexpectedly\n\nLast but not less important, you want to make sure that running workspaces do not fail and stop abruptly. `ws-manager` exposes a [counter](https://prometheus.io/docs/concepts/metric_types/#counter) that counts all workspace failures, making it possible to measure workspace failure rate (i.e. how many workspaces are failing per second).\n\nThe query is shown below:\n\n```promql\nsum(rate(gitpod_ws_manager_workspace_stops_total{reason=\"failed\"}[5m])) by (type)\n```\n\nThe goal is that this metric stays as close to 0 as possible. If it starts to increase it means something is going wrong! Alerting can be set for high error rates, but just like the ones above the threshold will come from experience operating Gitpod. It is suggested to periodically review the threshold as your installation increases or decreases usage.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/monitoring","loc":{"lines":{"from":82,"to":92}}}}],["1437",{"pageContent":"## Troubleshooting\n\nPlease refer to the [troubleshooting](https://www.gitpod.io/docs/configure/self-hosted/latest/troubleshooting) docs.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/monitoring","loc":{"lines":{"from":94,"to":96}}}}],["1438",{"pageContent":"---\nsection: self-hosted/latest\nsubsection: operational-guides\ntitle: Operational Guides\n---\n\n# Operational Guides\n\n> ⚠️ **Gitpod Self-hosted is [no longer supported](/blog/introducing-gitpod-dedicated)**\n>\n> The last update of Gitpod Self-hosted product was [November 2022](/changelog/november-self-hosted-release). Users can still request our [free community license](/community-license) however there will be no support or updates to the product. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n\nThis section has the guides you need to operate Gitpod:","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/operational-guides","loc":{"lines":{"from":1,"to":13}}}}],["1439",{"pageContent":"This section has the guides you need to operate Gitpod:\n\n-   [How to update Gitpod](./updating) - This guide shows you how to update Gitpod\n-   [How to monitor Gitpod](./monitoring) - This guide shows you how to set up monitoring via metrics for your Gitpod installation\n-   [How to configure workspace resources](./configuring-workspace-resources) - This guide shows you how to configure workspace resources to ensure performance and reliability\n-   [How to backup and restore Gitpod](./backup-restore) - This guide shows you how to back up and then restore your Gitpod installation for [disaster recovery](./disaster-recovery) purposes","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/operational-guides","loc":{"lines":{"from":13,"to":18}}}}],["1440",{"pageContent":"---\nsection: self-hosted/latest\nsubsection: troubleshooting\ntitle: Prevent Workspace Starts\n---\n\n# Prevent Workspace Starts\n\n> ⚠️ **Gitpod Self-hosted is [no longer supported](/blog/introducing-gitpod-dedicated)**\n>\n> The last update of Gitpod Self-hosted product was [November 2022](/changelog/november-self-hosted-release). Users can still request our [free community license](/community-license) however there will be no support or updates to the product. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n\nIt may be necessary for you to prevent users from starting Gitpod workspaces (in a `<namespace>`). Please see the [update guide](./updating) for more information.\n\n> It is required to prevent workspace starts when updating Gitpod and using the [Single Cluster Reference Architecture](../latest/reference-architecture/single-cluster-ref-arch) because it is not highly-available.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/prevent-workspace-starts","loc":{"lines":{"from":1,"to":15}}}}],["1441",{"pageContent":"This can be done with `kubectl`, after which, users won't be able to start workspaces until the `ws-manager` pod is running again.\n\n> **Caution:** You must [stop running workspaces](./stop-workspaces) and wait for them to terminate before proceeding. Failure to do so can result in user data loss, because the workspaces will not be able to reliably back-up.\n\nTo scale-down the `ws-manager` component and prevent workspace starts:\n\n```shell\nkubectl scale --replicas=0 deployment/ws-manager -n <namespace>","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/prevent-workspace-starts","loc":{"lines":{"from":17,"to":24}}}}],["1442",{"pageContent":"```\n\nAfter which, users will receive an error when trying to start workspaces. Once Gitpod is redeployed, this change will be reset automatically and workspaces will be allowed to start again.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/prevent-workspace-starts","loc":{"lines":{"from":25,"to":27}}}}],["1443",{"pageContent":"---\nsection: self-hosted/latest\nsubsection: reference\ntitle: Reference\n---\n\n# Gitpod Self-Hosted Reference\n\n> ⚠️ **Gitpod Self-hosted is [no longer supported](/blog/introducing-gitpod-dedicated)**\n>\n> The last update of Gitpod Self-hosted product was [November 2022](/changelog/november-self-hosted-release). Users can still request our [free community license](/community-license) however there will be no support or updates to the product. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n\nReference information for Gitpod Self-Hosted:","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference","loc":{"lines":{"from":1,"to":13}}}}],["1444",{"pageContent":"Reference information for Gitpod Self-Hosted:\n\n-   [Requirements](./requirements) - Information on which components Gitpod requires\n-   [Product compatibility Matrix](/docs/references/compatibility?admin) - Information on which versions of components do and do not work with Gitpod\n-   [Releases](./releases) - Information about how Gitpod is released\n-   [Telemetry](./telemetry) - Information about the telemetry that is gathered\n-   [Upgrade Guides](./upgrade-guides) - Information to take into account when upgrading to a specific version","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference","loc":{"lines":{"from":13,"to":19}}}}],["1445",{"pageContent":"---\nsection: self-hosted/latest\nsubsection: reference\ntitle: Gitpod Self-Hosted Requirements\n---\n\n# Gitpod Self-Hosted Requirements\n\n> ⚠️ **Gitpod Self-hosted is [no longer supported](/blog/introducing-gitpod-dedicated)**\n>\n> The last update of Gitpod Self-hosted product was [November 2022](/changelog/november-self-hosted-release). Users can still request our [free community license](/community-license) however there will be no support or updates to the product. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n\nGitpod has certain expectations on the characteristics of the cluster it is running on as well as the (software) components connected to it.\n\n> Please refer to the [product compatibility matrix](/docs/references/compatibility?admin) for the supported types and versions of these components.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/requirements","loc":{"lines":{"from":1,"to":15}}}}],["1446",{"pageContent":"## Cluster Requirements\n\n![cluster requirements](/images/docs/self-hosted/cluster-requirements.png)\n\n<!-- raw editable diagram can be found under static/images/docs/self-hosted/cluster-requirements.excalidraw -->\n\n### Reference Architectures\n\nWe have created a set of [reference architectures](/docs/configure/self-hosted/latest/reference-architecture) for all the major cloud providers that fulfill the requirements below. These are intended as a starting point for you to create an environment to install Gitpod into. If you wish to use K3s, please refer to the [k3s guide](/docs/configure/self-hosted/latest/cluster-set-up/on-k3s). Please see the [product compatibility matrix](/docs/references/compatibility?admin) for the current level of k3s support.\n\n### Supported Kubernetes Versions and distributions\n\nPlease refer to the [product compatibility matrix](/docs/references/compatibility?admin) for supported Kubernetes versions and distributions.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/requirements","loc":{"lines":{"from":17,"to":29}}}}],["1447",{"pageContent":"### Node Affinity Labels Requirements\n\nYour Kubernetes cluster must have node(s) with the following labels applied to them:\n\n-   `gitpod.io/workload_meta=true`\n-   `gitpod.io/workload_ide=true`\n-   `gitpod.io/workload_workspace_services=true`\n-   `gitpod.io/workload_workspace_regular=true`\n-   `gitpod.io/workload_workspace_headless=true`\n\nIt is recommended to have a minimum of two node pools, grouping the `meta` and `ide` nodes into one node pool and `workspace` related nodes into another. These two groups of workloads have different performance characteristics. Separating them into node pools after the fact is more difficult and incurs downtime. A further improvement is to also separate the headless workspaces (these are [prebuilds](/docs/configure/projects/prebuilds)) and regular workspaces into separate node pools. Prebuilds can use up a lot of compute and this might impact regular workspaces if they are running on the same node.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/requirements","loc":{"lines":{"from":31,"to":41}}}}],["1448",{"pageContent":"### Node and Container Requirements\n\nThese are the components expected on each node (see [product compatibility matrix](/docs/references/compatibility?admin) for supported versions):\n\n-   Ubuntu Linux\n-   Calico for the networking overlay and network policy\n-   Containerd\n-   At least 4 vCPU and 16GB of RAM\n\n### Kubernetes Privilege Requirements\n\nYour Kubernetes cluster must allow Gitpod to run privileged pods, as Gitpod depends on these privileges to provide workspace isolation.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/requirements","loc":{"lines":{"from":43,"to":54}}}}],["1449",{"pageContent":"### Load Balancer Requirements\n\nGitpod uses [`LoadBalancer` type services](https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer) to expose the Gitpod Dashboard, browser-based IDEs, and SSH connections used by desktop IDEs. Your Kubernetes cluster must be able to provision layer 4 or layer 7 load balancers for `LoadBalancer` type services that can route HTTP(S) connections to Gitpod services. If you intend to use desktop IDEs or SSH to workspaces then your cluster must also be able to provision layer 4 load balancers that can route SSH connection to Gitpod services.\n\nAll supported Kubernetes distributions provide load balancers that meet Gitpod's needs. For more information see the Kubernetes distribution documentation below:","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/requirements","loc":{"lines":{"from":56,"to":60}}}}],["1450",{"pageContent":"All supported Kubernetes distributions provide load balancers that meet Gitpod's needs. For more information see the Kubernetes distribution documentation below:\n\n-   [Google Kubernetes Engine](https://cloud.google.com/kubernetes-engine/docs/concepts/service-load-balancer)\n-   Amazon Elastic Kubernetes Engine:\n    -   Layer 4/7 (default): [Classic Load Balancer](https://aws.amazon.com/premiumsupport/knowledge-center/eks-kubernetes-services-cluster/)\n    -   Layer 4 only: [Network Load Balancing](https://docs.aws.amazon.com/eks/latest/userguide/network-load-balancing.html)\n-   [Microsoft Azure Kubernetes Service](https://docs.microsoft.com/en-us/azure/aks/concepts-network)\n-   [K3s](https://rancher.com/docs/k3s/latest/en/networking/#service-load-balancer)","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/requirements","loc":{"lines":{"from":60,"to":67}}}}],["1451",{"pageContent":"## Required Components\n\nGitpod relies on certain components and services for it to function. By default, most of these can be automatically installed in-cluster during installation. However, you can also configure Gitpod to use your own version of these that may or may not live inside the cluster. We recommend using external components when running Gitpod for sustained usage because this avoids the risk of data loss when the cluster goes down.\n\n> Please refer to the [product compatibility matrix](/docs/references/compatibility?admin) for the supported types and versions of these components.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/requirements","loc":{"lines":{"from":69,"to":73}}}}],["1452",{"pageContent":"| Component                                                                                                            | Required?                      |\n| -------------------------------------------------------------------------------------------------------------------- | ------------------------------ |\n| [Bucket Storage](/docs/configure/self-hosted/latest/requirements#bucket-storage)                                     | Use default or bring your own  |\n| [Database](/docs/configure/self-hosted/latest/requirements#database)                                                 | Use default or bring your own  |\n| [Image Registry](/docs/configure/self-hosted/latest/requirements#image-registry)                                     | Use default or bring your own  |\n| [Source Control Management System](/docs/configure/self-hosted/latest/requirements#source-control-management-system) | Yes (cloud or self-hosted SCM) |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/requirements","loc":{"lines":{"from":75,"to":80}}}}],["1453",{"pageContent":"| [Source Control Management System](/docs/configure/self-hosted/latest/requirements#source-control-management-system) | Yes (cloud or self-hosted SCM) |\n| [Cert-manager](/docs/configure/self-hosted/latest/requirements#cert-manager)                                         | Yes                            |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/requirements","loc":{"lines":{"from":80,"to":81}}}}],["1454",{"pageContent":"### Bucket Storage\n\nBy default, MinIO is installed in the cluster to store static content and to back an in-cluster image registry. During the installation process you can also configure Gitpod to use an external storage providers like S3.\n\n### Database\n\nGitpod uses a MySQL database to store user data. By default Gitpod ships with a MySQL database built-in and data is stored using a Kubernetes PersistentVolume. For production settings, we recommend operating your own MySQL database (version v5.7 or newer). Which database is used can be configured during installation. <!--- todo: Is this true? How do you configure this? --->","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/requirements","loc":{"lines":{"from":83,"to":89}}}}],["1455",{"pageContent":"### Image Registry\n\nGitpod relies on an image registry to store images used to start workspaces. By default, a docker based image registry backed by MiniIO is installed in the cluster (this can be configured during the installation). However, Gitpod is also compatible with any registry that implements the [Docker Registry HTTP API V2](https://docs.docker.com/registry/spec/api/) specification.\n\n### Source Control Management System\n\nGitpod expects to be connected to a Source Control Management System (SCM) such as GitLab in order to function. You can find out more about which SCMs are supported and how to connect to them in the [Integrations](/docs/configure/authentication) section. You will also be guided through connecting your SCM once you access your Gitpod installation for the first time.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/requirements","loc":{"lines":{"from":91,"to":97}}}}],["1456",{"pageContent":"### Cert Manager\n\n[Cert-manager](https://cert-manager.io/) must be installed in your cluster before you can install Gitpod. It is used to create and manage certificates needed to secure communication between the various internal Gitpod components. It can also be used to fetch a TLS certificate for your Gitpod instance from Let's Encrypt for example. Please consider the [cert-manager documentation](https://cert-manager.io/docs/) on how to install it.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/requirements","loc":{"lines":{"from":99,"to":101}}}}],["1457",{"pageContent":"---\nsection: self-hosted/latest\nsubsection: installation-guides\ntitle: Resource Configuration\n---\n\n# How To Configure Gitpod To Work With Certain External Components\n\n> ⚠️ **Gitpod Self-hosted is [no longer supported](/blog/introducing-gitpod-dedicated)**\n>\n> The last update of Gitpod Self-hosted product was [November 2022](/changelog/november-self-hosted-release). Users can still request our [free community license](/community-license) however there will be no support or updates to the product. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n\nGitpod has three resource dependencies that are required to function correctly. For convenience, you can use the in-cluster dependencies, but you should use external resources for a high-performance application.\n\nThis page highlights some of the common gotchas found when working with cloud resources and how to overcome them.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/resource-configuration","loc":{"lines":{"from":1,"to":15}}}}],["1458",{"pageContent":"## Container Registry\n\n### [Amazon Elastic Container Registry (ECR)](https://aws.amazon.com/ecr/)\n\nAmazon ECR does not fully implement the [Docker v2 API](https://docs.docker.com/registry/spec/api), namely it does not automatically create the remote image if it does not already exist when pushed. For that reason, ECR is not supported with Gitpod.\n\nWhen using AWS, you should select an in-cluster registry and use S3 as your in-cluster storage provider. This will use the in-cluster registry as a facade for an S3 bucket where all the images will be stored.\n\nIf using a region other than `us-east-1`, you will need to change the endpoint to be `s3.<region>.amazonaws.com`.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/resource-configuration","loc":{"lines":{"from":17,"to":25}}}}],["1459",{"pageContent":"### [Google Container Registry (GCR)](https://cloud.google.com/container-registry)\n\n> This example uses the format `gcr.io`, which is the global hostnames. This can be swapped with any of the [regional hostnames](https://cloud.google.com/container-registry/docs/pushing-and-pulling) and it will work in the same way.\n\nGoogle Container Registry authentication requires specific configuration. The \"Container registry URL\" will be in a format similar to `gcr.io/<project-name>/gitpod`. In order for the authentication to work, you must also enter the \"Container registry server\". This will always be your GCR hostname, eg `gcr.io`.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/resource-configuration","loc":{"lines":{"from":27,"to":31}}}}],["1460",{"pageContent":"### [Google Artifact Registry (GAR)](https://cloud.google.com/artifact-registry)\n\nAs with [GCR](#google-container-registry-gcr), Google Artifact Registry requires both the \"Container registry URL\" and \"Container registry server\" to be completed. The URL will be in the format `<region>-docker.pkg.dev/<project-name>/gitpod` and the server address will be `<region>-docker.pkg.dev`.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/resource-configuration","loc":{"lines":{"from":33,"to":35}}}}],["1461",{"pageContent":"---\nsection: self-hosted/latest\nsubsection: troubleshooting\ntitle: Stop Workspaces\n---\n\n# Stop Workspaces\n\n> ⚠️ **Gitpod Self-hosted is [no longer supported](/blog/introducing-gitpod-dedicated)**\n>\n> The last update of Gitpod Self-hosted product was [November 2022](/changelog/november-self-hosted-release). Users can still request our [free community license](/community-license) however there will be no support or updates to the product. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n\nSometimes it becomes necessary to stop Gitpod workspaces (in a `<namespace>`). Usually this needs to be done when updating Gitpod. Please see the [update guide](./updating) for more information.\n\nThis can be done with `kubectl`, and when done so, the IDE is closed, data in `/workspace` is backed up, and then the pod finally terminates.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/stop-workspaces","loc":{"lines":{"from":1,"to":15}}}}],["1462",{"pageContent":"## A Single Workspace\n\n```shell\n$ kubectl delete pods <workspace-or-headless-pod-name> -n <namespace>\n```\n\n## All Workspaces\n\n> **Caution**: This will delete all actively running workspaces.\n\nCan be done prior to outage windows, or for troubleshooting.\n\n```shell\n$ kubectl delete pods -l component=workspace -n <namespace>\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/stop-workspaces","loc":{"lines":{"from":17,"to":31}}}}],["1463",{"pageContent":"---\nsection: self-hosted/latest\nsubsection: troubleshooting\ntitle: Support Bundles\n---\n\n# Generating a Support Bundle\n\nSomething is wrong with your Gitpod installation? This guide shows you how you can create a support bundle.\n\nAt first, you need to start the installation admin console. In a terminal with configured `kubectl` run the following command (`<namespace>` is the Kubernetes namespace your Gitpod installation has been installed to):\n\n```shell\n$ kubectl kots admin-console --namespace <namespace>","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/support-bundle","loc":{"lines":{"from":1,"to":14}}}}],["1464",{"pageContent":"```\n\nOpen your favorite browser and go to `http://localhost:8800` (port `8800` is opened on your node on `localhost` only--you may want to forward the port to your workstation to access the admin console). Enter your password and click on “Troubleshoot” in the top menu. Click “Analyze Gitpod” to create a support bundle that contains relevant logs and configs.\n\n![kots-troubleshoot](/images/docs/self-hosted/kots-troubleshoot.png)\n\nCreating the support bundle will take some while. Once it is ready, you can inspect the content. Nothing will be shared with us unless you have explicitly chosen to do so.\n\n![kots-troubleshoot](/images/docs/self-hosted/kots-support-bundle-analysis.png)","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/support-bundle","loc":{"lines":{"from":15,"to":23}}}}],["1465",{"pageContent":"---\nsection: self-hosted/latest\nsubsection: reference\ntitle: Telemetry in Gitpod Self-Hosted\n---\n\n# Telemetry\n\n> ⚠️ **Gitpod Self-hosted is [no longer supported](/blog/introducing-gitpod-dedicated)**\n>\n> The last update of Gitpod Self-hosted product was [November 2022](/changelog/november-self-hosted-release). Users can still request our [free community license](/community-license) however there will be no support or updates to the product. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).e interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n> Read [our blog on Gitpod Dedicated](/blog/introducing-gitpod-dedicated) to learn why we made the decision to discontinue self-hosted.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/telemetry","loc":{"lines":{"from":1,"to":12}}}}],["1466",{"pageContent":"We optionally collect telemetry from Gitpod Self-Hosted installations to better understand the needs and use cases of the Gitpod community. Collected telemetry contains simple usage statistics like the number of users and workspaces. Our [Privacy Policy](https://www.gitpod.io/privacy) describes in detail how we use this data.\n\nTo provide individualized support to enterprise customers we optionally collect a customer ID. This customer ID provides insights into enterprise adoption of Gitpod and helps us ensure that customers get the best value from their installations. Self-hosted installations using the community license do not have a customer ID and will be anonymous.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/telemetry","loc":{"lines":{"from":14,"to":16}}}}],["1467",{"pageContent":"## Controlling your telemetry\n\nYou can preview your usage telemetry, control how much information you share, and enable/disable all usage telemetry on `Settings` tab on the `Admin` dashboard. To anonymize your usage telemetry, uncheck the **Include customer ID in telemetry** option. To fully disable telemetry, uncheck the **Enable usage telemetry** option.\n\nA preview of your usage telemetry is available on the settings page to provide transparency about the data we'd like to collect.\n\n![Enable Service Ping in Admin Settings](/images/docs/self-hosted/telemetry-setting.png)","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/telemetry","loc":{"lines":{"from":18,"to":24}}}}],["1468",{"pageContent":"---\nsection: self-hosted/latest\nsubsection: troubleshooting\ntitle: Troubleshooting\n---\n\n# Troubleshooting Self-Hosted Gitpod\n\n> ⚠️ **Gitpod Self-hosted is [no longer supported](/blog/introducing-gitpod-dedicated)**\n>\n> The last update of Gitpod Self-hosted product was [November 2022](/changelog/november-self-hosted-release). Users can still request our [free community license](/community-license) however there will be no support or updates to the product. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n\nSomething is wrong with your Gitpod installation? Please refer to the following troubleshooting resources. You can also take a look at our [support page](/support) to learn how to reach our community and support team for help.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/troubleshooting","loc":{"lines":{"from":1,"to":13}}}}],["1469",{"pageContent":"-   [Generating a Support Bundle](./support-bundle)\n-   [Gitpod provided Config Patches](./config-patches)\n-   [Stop running workspaces](./stop-workspaces)\n-   [Prevent workspace starts](/docs/configure/self-hosted/latest/prevent-workspace-starts)\n-   [Manage cluster nodes](/docs/configure/self-hosted/latest/manage-cluster-nodes)","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/troubleshooting","loc":{"lines":{"from":15,"to":19}}}}],["1470",{"pageContent":"---\nsection: self-hosted/latest\nsubsection: operational-guides\ntitle: Updating Gitpod Self-Hosted\n---\n\n# How to Update your Gitpod Installation\n\n> ⚠️ **Gitpod Self-hosted is [no longer supported](/blog/introducing-gitpod-dedicated)**\n>\n> The last update of Gitpod Self-hosted product was [November 2022](/changelog/november-self-hosted-release). Users can still request our [free community license](/community-license) however there will be no support or updates to the product. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n\nAt first, you must decide on an [update strategy](#update-strategies), and follow related instructions.\n\nAfter following instructions for your desired update strategy, you need to start the installation admin console. In a terminal with configured `kubectl` run the following command (`<namespace>` is the Kubernetes namespace your Gitpod installation has been installed to):","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/updating","loc":{"lines":{"from":1,"to":15}}}}],["1471",{"pageContent":"```shell\n$ kubectl kots admin-console --namespace <namespace>","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/updating","loc":{"lines":{"from":17,"to":18}}}}],["1472",{"pageContent":"```\n\nOpen `http://localhost:8800` (port `8800` is opened on your node on `localhost` only—you may want to forward the port to your workstation to access the admin console). Enter your password. Click on “Check for update”.\n\n> **Note:** For air gapped installations, you need to click `Upload a new version` to upload a new version and then deploy it. A new version is made available to you to download via the download portal provided to you by Gitpod.\n\nWhen an update is available, you will be asked to deploy the new version. You can run preflight checks on the new version and when you press deploy your current running version will be updated.\n\nIn most cases, updates should work without further effort - and your existing data is carried over. In some cases (with breaking changes) we will provide instructions on how to upgrade to a specific version in our [Update Guides](../latest/upgrade-guides).","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/updating","loc":{"lines":{"from":19,"to":27}}}}],["1473",{"pageContent":"> Gitpod allows you to [apply custom labels, annotations and environment variables to your resources](./advanced/customization). When using this feature, you will need to manually delete resources that have immutable labels on them for updates to take effect. See the [documentation](./advanced/customization#limitations) for full details.\n\n![kots-admin-dashboard](/images/docs/self-hosted/kots-admin-dashboard.png)","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/updating","loc":{"lines":{"from":29,"to":31}}}}],["1474",{"pageContent":"## Update Strategies\n\nYou can deploy different strategies to update your Gitpod instance. Each strategy comes with trade-offs regarding downtime, risk, and cost. In any case, you should ensure that the chosen strategy matches your (company’s) risk profile and that every part of your update strategy (incl. rollbacks) is regularly practiced.\n\nPlease refer to [Update Guides](../latest/upgrade-guides) to check for breaking changes that need to be handled as part of your upgrade.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/updating","loc":{"lines":{"from":33,"to":37}}}}],["1475",{"pageContent":"### Maintenance Window (Higher downtime, low risk and medium cost) - Recommended\n\n> **Important:** [Single Cluster Reference Architecture](../latest/reference-architecture/single-cluster-ref-arch) is not highly-available, please [stop workspaces](./stop-workspaces) and [prevent workspace starts](./prevent-workspace-starts) prior to proceeding.\n\nIn this strategy, you have scheduled maintenance windows where you take down your entire Gitpod installation, update it, test it, and then make it available again. Ideally, this is done during times of low demand, e.g. outside of work hours.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/updating","loc":{"lines":{"from":39,"to":43}}}}],["1476",{"pageContent":"### Secondary Staging Deployment (medium downtime, lower risk, higher cost)\n\n> **Important:** [Single Cluster Reference Architecture](../latest/reference-architecture/single-cluster-ref-arch) is not highly-available, please [stop workspaces](./stop-workspaces) and [prevent workspace starts](./prevent-workspace-starts) prior to proceeding.\n\nIn this strategy, you run the newest version of Gitpod on a secondary (staging) cluster to ensure compatibility/fitness of the newest version within your specific environment. Given that you are testing on a secondary cluster, you save on downtime in your primary cluster. If you are confident in the release, you can then also apply the update to your primary cluster. Given that workspace startups may fail for a brief period _during_ the update process, a maintenance window (albeit smaller) will still be required.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/updating","loc":{"lines":{"from":45,"to":49}}}}],["1477",{"pageContent":"### Live update (not available, yet)\n\n> **Important:** Please check back soon, we're planning high-availability [reference architecture](../latest/reference-architecture).\n\nThe [Single Cluster Reference Architecture](../latest/reference-architecture/single-cluster-ref-arch) does not support live update. Please choose another update strategy.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/updating","loc":{"lines":{"from":51,"to":55}}}}],["1478",{"pageContent":"---\nsection: self-hosted/latest\nsubsection: reference\ntitle: Upgrade Guides and Breaking Changes\n---\n\n# Upgrade Guides and Breaking Changes\n\n> ⚠️ **Gitpod Self-hosted is [no longer supported](/blog/introducing-gitpod-dedicated)**\n>\n> The last update of Gitpod Self-hosted product was [November 2022](/changelog/november-self-hosted-release). Users can still request our [free community license](/community-license) however there will be no support or updates to the product. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n\nThis page informs you if there are specific considerations to take into account when upgrading to a specific version. If no breaking changes and thus specific recommendations when updating are mentioned here (or if they do not apply to you), please follow the normal upgrade procedure mentioned on the [Updating your Gitpod Installation](../latest/updating) page.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/upgrade-guides","loc":{"lines":{"from":1,"to":13}}}}],["1479",{"pageContent":"## 2022.09\n\n### Security\n\nThis release includes security fixes addressing information leakage in logs; see the [security announcement log](https://www.gitpod.io/security/log) for more information.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/upgrade-guides","loc":{"lines":{"from":15,"to":19}}}}],["1480",{"pageContent":"### Breaking Changes\n\n-   [Single Cluster Reference Architecture](https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/single-cluster-ref-arch) changes:\n    -   Regular workspaces and headless workspaces are isolated to separate node pools to help avoid noisy neighbor issues between the two and guarantee maximum performance for workspaces\n    -   Workspace Services (such as `ws-manager`) are deployed to the services nodepool to prevent potential service degradation from high `ws-daemon` memory use.\n    -   We've increased the default node size to 16 core / 64 GB nodes. This is to allow for more workspaces per node, and avoid the scenario where there is just one workspace per node. We've also added [documentation](https://www.gitpod.io/docs/configure/self-hosted/latest/configuring-workspace-resources) to detail our recommendations around workspace resources.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/upgrade-guides","loc":{"lines":{"from":21,"to":26}}}}],["1481",{"pageContent":"## 2022.08\n\n> There is no expected impact from these changes if using KOTS. These are documented for transparency purposes only.\n> **Custom labels from the pod selector labels removed**\n\n[11954](https://github.com/gitpod-io/gitpod/pull/11954): remove custom labels from the pod selector labels. This removes this [limitation](https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/customization#limitations) so this is a long-term improvement. The impact of this should be handled transparently for you by the KOTS installer.\n\n**Usage of PodSecurityPolicies removed**","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/upgrade-guides","loc":{"lines":{"from":28,"to":35}}}}],["1482",{"pageContent":"**Usage of PodSecurityPolicies removed**\n\n[12336](https://github.com/gitpod-io/gitpod/pull/12336): Removal of PodSecurityPolicies. These were deprecated from Kubernetes 1.21 and removed from 1.25. This allows Gitpod to run on Kubernetes 1.25+, which is scheduled for imminent release. If you have PodSecurityPolicies enabled on your cluster, we suggest you disable them as soon as possible. If an installation is deployed to a cluster with PSPs enabled, you will need to add `experimental.common.usePodSecurityPolicies = true` to a [config-patch file](./config-patches) - however, do note that this is deprecated and exists to ease the transition away from PSPs.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/upgrade-guides","loc":{"lines":{"from":35,"to":37}}}}],["1483",{"pageContent":"## 2022.07\n\n### Setting the service type of the proxy component\n\nYou can now configure the service type of the proxy service in the installation UI (see image below) - you do not need to upload a `.yaml` file as a [config patch](./config-patches) anymore to configure this. However, having it in the config patch will still work until December.\n\n![proxy service type UI](/images/docs/self-hosted/proxy-service-type-ui.png)","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/upgrade-guides","loc":{"lines":{"from":39,"to":45}}}}],["1484",{"pageContent":"### Setting the default workspace image and which image registries the default image can be pulled from\n\nWe've moved the configuration of the default workspace image and the default base image registry whitelist out of the experimental section of the [config-patch](../latest/config-patches) file. The latter was also renamed. Using them in the experimental section will still work for the time being (until approx. December 2022).\n\n**Before:**\n\n```yaml\nexperimental:\n    webApp:\n        server:\n            defaultBaseImageRegistryWhitelist:\n                - <allowed registries>\n        workspaceDefaults:\n            workspaceImage: <path to your default workspace image>\n```\n\n**After:**\n\n```yaml\nworkspace:\n    workspaceImage: <path to your default workspace image>\ncontainerRegistry:\n    privateBaseImageAllowList:\n        - <allowed registries>\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/upgrade-guides","loc":{"lines":{"from":47,"to":71}}}}],["1485",{"pageContent":"---\nsection: help/contribute\ntitle: Contribute Content\ndescription: Guidance for contributing content that helps others learn and adopt Gitpod. Share your tips, tricks, experiences and project use cases through blog posts, videos and presentations.\n---\n\n# Contribute Content\n\nCreating content (blog posts, YouTube and TikTok videos, presentations and demos) that shares tips+tricks and your experiences with Gitpod is amongst one of the most impactful ways you can help contribute. Everyone at Gitpod including our founders, engineers and product managers loves [reading](https://ghuntley.com/anywhere/) and [watching](https://www.youtube.com/watch?v=XLOwNev0TM0&t=18s) content created by people in our community.\n\nGitpod maintains an invitational showcase of community contributed guides which are used to highlight content that is hosted elsewhere. Please do not raise pull-requests to the website that adds guides or blog posts without prior discussion and consent.","metadata":{"source":"https://www.gitpod.io/docs/help/contribute/content","loc":{"lines":{"from":1,"to":11}}}}],["1486",{"pageContent":"Instead follow the IndieWeb guidelines of [POSSE](https://indieweb.org/POSSE) when authoring content by posting first on your own site/channel. By posting content first on your own site/channel then a direct feedback cycle forms between you and your readership through ownership of your content that helps you to improve your content.\n\nAfter the content has been published please:\n\n1. Send a tweet that mentions the [@Gitpod](http://twitter.com/gitpod) Twitter account which will broadcast the content internally within the company.\n\n1. Add a link to the content at https://github.com/shaal/awesome-gitpod\n\nThanks 🧡","metadata":{"source":"https://www.gitpod.io/docs/help/contribute/content","loc":{"lines":{"from":13,"to":21}}}}],["1487",{"pageContent":"---\nsection: help/contribute\ntitle: Contribute Documentation\ndescription: Guidance for contributing updates and improvements to the Gitpod documentation which helps others learn and adopt Gitpod.\n---\n\n# Contribute Documentation\n\nGitpod has a dedicated team that looks after our documentation. You can help improve our documentation by:\n\n-   Using the feedback widget at the bottom of each page in our documentation. All feedback is recorded into a spreadsheet and we use this information to drive the process to improve the Gitpod documentation.\n-   Submitting documentation updates via the \"Edit on Gitpod button\" (top right on every page) when you learn something that you think other developers would also benefit from.\n\nWe 🧡 the people who are involved in this project, and we’d love to help you with onboarding. Drop by the `#contributing` channel on the [Gitpod Discord server](https://www.gitpod.io/chat) and _ask for help_.","metadata":{"source":"https://www.gitpod.io/docs/help/contribute/documentation","loc":{"lines":{"from":1,"to":14}}}}],["1488",{"pageContent":"---\nsection: help/contribute\ntitle: Code style\n---\n\n# Code Style\n\n## Go\n\nWe typically follow the [Uber Go Style Guide](https://github.com/uber-go/guide/blob/master/style.md) as our north star as the guide is comprehensive but not overburdening, easy to read and pretty good. Here's how our codebase differs:\n\n-   Gitpod uses `xerrors` for error wrapping instead of `pkg/errors`\n\n## TypeScript\n\nTBA","metadata":{"source":"https://www.gitpod.io/docs/help/contribute/features-and-patches/code-style","loc":{"lines":{"from":1,"to":16}}}}],["1489",{"pageContent":"---\nsection: help/contribute\ntitle: Commit Message Convention\n---\n\n# Commit Message Convention\n\nWe do not yet have an established convention but one is [currently being discussed](https://www.notion.so/gitpod/Commit-Message-Convention-f1dac0d4dba6405c9086077c0fd65814).","metadata":{"source":"https://www.gitpod.io/docs/help/contribute/features-and-patches/commit-message-convention","loc":{"lines":{"from":1,"to":8}}}}],["1490",{"pageContent":"---\nsection: help/contribute\ntitle: Contribute Features & Patches\ndescription: Guidance for contributing features and patches to Gitpod.\n---\n\n# Contribute Features & Patches\n\nGitpod is developed as an open core product under an [OSI-approved open source license](https://github.com/gitpod-io/gitpod), making the majority of functionality freely usable and distributable, even for commercial use. As is typical with open core enterprise features are developed under a non OSI-approved license. Where contributions are not trivial (\"de minimis\") Gitpod requires contributors to sign a contributors license agreement before we will be able to merge your contribution.","metadata":{"source":"https://www.gitpod.io/docs/help/contribute/features-and-patches","loc":{"lines":{"from":1,"to":9}}}}],["1491",{"pageContent":"Gitpodders have built-in the open for the last decade. Transparency is key and as a company Gitpod strives to be as open about as many things as possible. This refers to both developing Gitpod in the open (public issues, public roadmap, public milestones) as well as how employees interact on a personal level with other human beings. Gitpodders are strong believers in the benefits that an open culture provides. At Gitpod we are open-minded, inclusive, transparent, and curious. We always remain students of the game, not masters of the game.\n\n-   [Code Style](features-and-patches/code-style)\n-   [Commit message convention](features-and-patches/commit-message-convention)\n-   [Submitting a pull request](features-and-patches/submitting-a-pull-request)\n\nWe 🧡 the people who are involved in this project, and we’d love to help you with onboarding. Drop by the `#contributing` channel on the [Gitpod Discord server](https://www.gitpod.io/chat) and _ask for help_.","metadata":{"source":"https://www.gitpod.io/docs/help/contribute/features-and-patches","loc":{"lines":{"from":11,"to":17}}}}],["1492",{"pageContent":"---\nsection: help/contribute\ntitle: Submitting a pull request\ndescription: Guidance for submitting a pull request to Gitpod.\n---\n\n# Submitting a pull request\n\nBefore you submit your pull request, please:\n\n-   If you are considering submitting a pull-request that is more than a simple fix, open a discussion on GitHub first with your proposal.\n-   Search [GitHub](https://github.com/gitpod-io/gitpod/pulls) for an open or closed Pull Request that relates to your submission.\n\nMake your changes in a new git branch:\n\n```shell\ngit checkout -b my-fix-branch main\n```\n\n-   Follow our [Coding Style](code-style).\n-   Create your patch, **including appropriate test cases and documentation**.\n-   Run the test suite.\n-   Commit your changes using a descriptive commit message that follows our [commit message conventions](commit-message-convention).\n\n```shell\ngit commit -a","metadata":{"source":"https://www.gitpod.io/docs/help/contribute/features-and-patches/submitting-a-pull-request","loc":{"lines":{"from":1,"to":26}}}}],["1493",{"pageContent":"```\n\nNote: the optional commit `-a` command line option will automatically \"add\" and \"rm\" edited files.\n\n-   Build your changes locally to ensure all the tests pass.\n\n-   Push your branch to GitHub:\n\n```shell\ngit push origin my-fix-branch\n```\n\nIn GitHub, send a pull request to `gitpod-io:main`.\n\nIf we suggest changes, then:\n\n-   Make the required updates.\n-   Re-run the test suite to ensure tests are still passing.\n-   Commit your changes to your branch (e.g. `my-fix-branch`).\n-   Push the changes to your GitHub repository (this will update your Pull Request).\n\nThat's it! Thank you for your contribution!","metadata":{"source":"https://www.gitpod.io/docs/help/contribute/features-and-patches/submitting-a-pull-request","loc":{"lines":{"from":27,"to":48}}}}],["1494",{"pageContent":"## [Optional] Submitting a pull request with Gitpod\n\nBefore you submit your pull request, please:\n\n-   If you are considering submitting a pull-request that is more than a simple fix, open a discussion on GitHub first with your proposal.\n-   Search [GitHub](https://github.com/gitpod-io/gitpod/pulls) for an open or closed Pull Request that relates to your submission.\n\nIf we suggest changes, then:\n\n-   Make the required updates.\n-   Re-run the test suite to ensure tests are still passing.\n-   Commit your changes to your branch (e.g. `my-fix-branch`).\n-   Push the changes to your GitHub repository (this will update your Pull Request).\n\nThat's it! Thank you for your contribution!","metadata":{"source":"https://www.gitpod.io/docs/help/contribute/features-and-patches/submitting-a-pull-request","loc":{"lines":{"from":50,"to":64}}}}],["1495",{"pageContent":"---\nsection: quickstart\ntitle: Agda template\n---\n\n# Agda Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [Agda](https://github.com/gitpod-io/template-agda) template.\n\nThe following guide will:\n\n-   Walk you through a real world example with an existing Gitpod config\n-   Introduce you to prebuilds\n-   Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n## Step 1: Clone Git repository\n\n-   Create a new repository based on the [Agda template](https://github.com/gitpod-io/template-agda/generate).\n-   Name it e.g. `my-agda-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/agda","loc":{"lines":{"from":1,"to":21}}}}],["1496",{"pageContent":"## Step 1: Clone Git repository\n\n-   Create a new repository based on the [Agda template](https://github.com/gitpod-io/template-agda/generate).\n-   Name it e.g. `my-agda-template`.\n\n## Step 2: Install the Gitpod app\n\n-   Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n    Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for Maven or NPM downloading the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/agda","loc":{"lines":{"from":21,"to":30}}}}],["1497",{"pageContent":"## Step 3: First prebuild\n\n-   Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/<my-agda-template>`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/agda","loc":{"lines":{"from":32,"to":38}}}}],["1498",{"pageContent":"## Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/agda","loc":{"lines":{"from":40,"to":52}}}}],["1499",{"pageContent":"![Browser Extension](/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/agda","loc":{"lines":{"from":52,"to":66}}}}],["1500",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/agda","loc":{"lines":{"from":68,"to":70}}}}],["1501",{"pageContent":"## Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n-   [Getting started with your own project](/docs/configure)\n-   [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/agda","loc":{"lines":{"from":72,"to":77}}}}],["1502",{"pageContent":"---\nsection: quickstart\ntitle: C template\n---\n\n# C Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [C](https://github.com/gitpod-io/template-c) template.\n\nThe following guide will:\n\n-   Walk you through a real world example with an existing Gitpod config\n-   Introduce you to prebuilds\n-   Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n## Step 1: Clone Git repository\n\n-   Create a new repository based on the [C template](https://github.com/gitpod-io/template-c/generate).\n-   Name it e.g. `my-c-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/c","loc":{"lines":{"from":1,"to":21}}}}],["1503",{"pageContent":"## Step 1: Clone Git repository\n\n-   Create a new repository based on the [C template](https://github.com/gitpod-io/template-c/generate).\n-   Name it e.g. `my-c-template`.\n\n## Step 2: Install Gitpod app\n\n-   Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n    Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for installation of dependencies from the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/c","loc":{"lines":{"from":21,"to":30}}}}],["1504",{"pageContent":"## Step 3: First prebuild\n\n-   Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/my-c-template`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/c","loc":{"lines":{"from":32,"to":38}}}}],["1505",{"pageContent":"## Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/c","loc":{"lines":{"from":40,"to":52}}}}],["1506",{"pageContent":"![Browser Extension](/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/c","loc":{"lines":{"from":52,"to":66}}}}],["1507",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/c","loc":{"lines":{"from":68,"to":70}}}}],["1508",{"pageContent":"## Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n-   [Getting started with your own project](/docs/configure)\n-   [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/c","loc":{"lines":{"from":72,"to":77}}}}],["1509",{"pageContent":"---\nsection: quickstart\ntitle: Clojure template\n---\n\n# Clojure Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [Clojure](https://github.com/gitpod-io/template-clojure) template.\n\nThe following guide will:\n\n-   Walk you through a real world example with an existing Gitpod config\n-   Introduce you to prebuilds\n-   Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n## Step 1: Clone Git repository\n\n-   Create a new repository based on the [Clojure template](https://github.com/gitpod-io/template-clojure/generate).\n-   Name it e.g. `my-clojure-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/clojure","loc":{"lines":{"from":1,"to":21}}}}],["1510",{"pageContent":"## Step 1: Clone Git repository\n\n-   Create a new repository based on the [Clojure template](https://github.com/gitpod-io/template-clojure/generate).\n-   Name it e.g. `my-clojure-template`.\n\n## Step 2: Install Gitpod app\n\n-   Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n    Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for installation of dependencies from the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/clojure","loc":{"lines":{"from":21,"to":30}}}}],["1511",{"pageContent":"## Step 3: First prebuild\n\n-   Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/my-clojure-template`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/clojure","loc":{"lines":{"from":32,"to":38}}}}],["1512",{"pageContent":"## Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/clojure","loc":{"lines":{"from":40,"to":52}}}}],["1513",{"pageContent":"![Browser Extension](/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/clojure","loc":{"lines":{"from":52,"to":66}}}}],["1514",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/clojure","loc":{"lines":{"from":68,"to":70}}}}],["1515",{"pageContent":"## Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n-   [Getting started with your own project](/docs/configure)\n-   [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/clojure","loc":{"lines":{"from":72,"to":77}}}}],["1516",{"pageContent":"---\nsection: quickstart\ntitle: Coq template\n---\n\n# Coq Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [Coq](https://github.com/gitpod-io/template-coq) template.\n\nThe following guide will:\n\n-   Walk you through a real world example with an existing Gitpod config\n-   Introduce you to prebuilds\n-   Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n### Step 1: Clone Git repository\n\n-   Create a new repository based on the [Coq template](https://github.com/gitpod-io/template-coq/generate).\n-   Name it e.g. `my-coq-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/coq","loc":{"lines":{"from":1,"to":21}}}}],["1517",{"pageContent":"### Step 1: Clone Git repository\n\n-   Create a new repository based on the [Coq template](https://github.com/gitpod-io/template-coq/generate).\n-   Name it e.g. `my-coq-template`.\n\n### Step 2: Install Gitpod app\n\n-   Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n    Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for installation of dependencies from the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/coq","loc":{"lines":{"from":21,"to":30}}}}],["1518",{"pageContent":"### Step 3: First prebuild\n\n-   Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/my-coq-template`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/coq","loc":{"lines":{"from":32,"to":38}}}}],["1519",{"pageContent":"### Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/coq","loc":{"lines":{"from":40,"to":52}}}}],["1520",{"pageContent":"![Browser Extension](/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/coq","loc":{"lines":{"from":52,"to":66}}}}],["1521",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/coq","loc":{"lines":{"from":68,"to":70}}}}],["1522",{"pageContent":"## Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n-   [Getting started with your own project](/docs/configure)\n-   [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/coq","loc":{"lines":{"from":72,"to":77}}}}],["1523",{"pageContent":"---\nsection: quickstart\ntitle: C++ CMake template\n---\n\n# C++ CMake Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [C++ CMake](https://github.com/gitpod-io/template-cpp) template.\n\nThe following guide will:\n\n-   Walk you through a real world example with an existing Gitpod config\n-   Introduce you to prebuilds\n-   Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n### Step 1: Clone Git repository\n\n-   Create a new repository based on the [C template](https://github.com/gitpod-io/template-cpp/generate).\n-   Name it e.g. `my-cpp-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/cpp","loc":{"lines":{"from":1,"to":21}}}}],["1524",{"pageContent":"### Step 1: Clone Git repository\n\n-   Create a new repository based on the [C template](https://github.com/gitpod-io/template-cpp/generate).\n-   Name it e.g. `my-cpp-template`.\n\n### Step 2: Install Gitpod app\n\n-   Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n    Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for installation of dependencies from the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/cpp","loc":{"lines":{"from":21,"to":30}}}}],["1525",{"pageContent":"### Step 3: First prebuild\n\n-   Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/my-cpp-template`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/cpp","loc":{"lines":{"from":32,"to":38}}}}],["1526",{"pageContent":"### Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/cpp","loc":{"lines":{"from":40,"to":52}}}}],["1527",{"pageContent":"![Browser Extension](/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/cpp","loc":{"lines":{"from":52,"to":66}}}}],["1528",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/cpp","loc":{"lines":{"from":68,"to":70}}}}],["1529",{"pageContent":"## Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n-   [Getting started with your own project](/docs/configure)\n-   [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/cpp","loc":{"lines":{"from":72,"to":77}}}}],["1530",{"pageContent":"---\nsection: quickstart\ntitle: Datasette template\n---\n\n# Datasette Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [Datasette](https://github.com/gitpod-io/template-datasette) template.\n\nThe following guide will:\n\n-   Walk you through a real world example with an existing Gitpod config\n-   Introduce you to prebuilds\n-   Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n## Step 1: Clone Git repository\n\n-   Create a new repository based on the [Datasette template](https://github.com/gitpod-io/template-datasette/generate).\n-   Name it e.g. `my-datasette-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/datasette","loc":{"lines":{"from":1,"to":21}}}}],["1531",{"pageContent":"## Step 1: Clone Git repository\n\n-   Create a new repository based on the [Datasette template](https://github.com/gitpod-io/template-datasette/generate).\n-   Name it e.g. `my-datasette-template`.\n\n## Step 2: Install the Gitpod app\n\n-   Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n    Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for Maven or NPM downloading the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/datasette","loc":{"lines":{"from":21,"to":30}}}}],["1532",{"pageContent":"## Step 3: First prebuild\n\n-   Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/<my-datasette-template>`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/datasette","loc":{"lines":{"from":32,"to":38}}}}],["1533",{"pageContent":"## Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/datasette","loc":{"lines":{"from":40,"to":52}}}}],["1534",{"pageContent":"![Browser Extension](/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/datasette","loc":{"lines":{"from":52,"to":66}}}}],["1535",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/datasette","loc":{"lines":{"from":68,"to":70}}}}],["1536",{"pageContent":"## Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n-   [Getting started with your own project](/docs/configure)\n-   [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/datasette","loc":{"lines":{"from":72,"to":77}}}}],["1537",{"pageContent":"---\nsection: quickstart\ntitle: Deno template\n---\n\n# Deno Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [Deno](https://github.com/gitpod-io/template-typescript-deno) template.\n\nThe following guide will:\n\n-   Walk you through a real world example with an existing Gitpod config\n-   Introduce you to prebuilds\n-   Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n## Step 1: Clone Git repository\n\n-   Create a new repository based on the [Deno template](https://github.com/gitpod-io/template-typescript-deno/generate).\n-   Name it e.g. `my-typescript-deno-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/deno","loc":{"lines":{"from":1,"to":21}}}}],["1538",{"pageContent":"## Step 2: Install Gitpod app\n\n-   Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n    Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for Maven or NPM downloading the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/deno","loc":{"lines":{"from":23,"to":27}}}}],["1539",{"pageContent":"## Step 3: First prebuild\n\n-   Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/my-typescript-deno-template`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/deno","loc":{"lines":{"from":29,"to":35}}}}],["1540",{"pageContent":"## Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/deno","loc":{"lines":{"from":37,"to":49}}}}],["1541",{"pageContent":"![Browser Extension](/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/deno","loc":{"lines":{"from":49,"to":63}}}}],["1542",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/deno","loc":{"lines":{"from":65,"to":67}}}}],["1543",{"pageContent":"## Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n-   [Getting started with your own project](/docs/configure)\n-   [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/deno","loc":{"lines":{"from":69,"to":74}}}}],["1544",{"pageContent":"---\nsection: quickstart\ntitle: Docker Compose template\n---\n\n# Docker Compose Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [Docker Compose](https://github.com/gitpod-io/template-docker-compose) template.\n\nThe following guide will:\n\n-   Walk you through a real world example with an existing Gitpod config\n-   Introduce you to prebuilds\n-   Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n## Step 1: Clone Git repository\n\n-   Create a new repository based on the [Docker Compose template](https://github.com/gitpod-io/template-docker-compose/generate).\n-   Name it e.g. `my-docker-compose-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/docker-compose","loc":{"lines":{"from":1,"to":21}}}}],["1545",{"pageContent":"## Step 2: Install the Gitpod app\n\n-   Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n    Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for Maven or NPM downloading the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/docker-compose","loc":{"lines":{"from":23,"to":27}}}}],["1546",{"pageContent":"## Step 3: First prebuild\n\n-   Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/<my-docker-compose-template>`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/docker-compose","loc":{"lines":{"from":29,"to":35}}}}],["1547",{"pageContent":"## Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/docker-compose","loc":{"lines":{"from":37,"to":49}}}}],["1548",{"pageContent":"![Browser Extension](/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/docker-compose","loc":{"lines":{"from":49,"to":63}}}}],["1549",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/docker-compose","loc":{"lines":{"from":65,"to":67}}}}],["1550",{"pageContent":"## Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n-   [Getting started with your own project](/docs/configure)\n-   [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/docker-compose","loc":{"lines":{"from":69,"to":74}}}}],["1551",{"pageContent":"---\nsection: quickstart\ntitle: C# .NET template\n---\n\n# C# .NET Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [C# .NET](https://github.com/gitpod-io/example-dotnet-core) template.\n\nThe following guide will:\n\n-   Walk you through a real world example with an existing Gitpod config\n-   Introduce you to prebuilds\n-   Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n### Step 1: Clone Git repository\n\n-   Create a new repository based on the [C# template](https://github.com/gitpod-io/example-dotnet-core/generate).\n-   Name it e.g. `my-dotnet-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/dotnet","loc":{"lines":{"from":1,"to":21}}}}],["1552",{"pageContent":"### Step 1: Clone Git repository\n\n-   Create a new repository based on the [C# template](https://github.com/gitpod-io/example-dotnet-core/generate).\n-   Name it e.g. `my-dotnet-template`.\n\n### Step 2: Install Gitpod app\n\n-   Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n    Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for installation of dependencies from the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/dotnet","loc":{"lines":{"from":21,"to":30}}}}],["1553",{"pageContent":"### Step 3: First prebuild\n\n-   Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/my-dotnet-template`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/dotnet","loc":{"lines":{"from":32,"to":38}}}}],["1554",{"pageContent":"### Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/dotnet","loc":{"lines":{"from":40,"to":52}}}}],["1555",{"pageContent":"![Browser Extension](/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/dotnet","loc":{"lines":{"from":52,"to":66}}}}],["1556",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/dotnet","loc":{"lines":{"from":68,"to":70}}}}],["1557",{"pageContent":"## Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n-   [Getting started with your own project](/docs/configure)\n-   [Git Integrations](/docs/integrations)\n-   [.NET in Gitpod](/docs/introduction/languages/dotnet)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/dotnet","loc":{"lines":{"from":72,"to":78}}}}],["1558",{"pageContent":"---\nsection: quickstart\ntitle: Drupal template\n---\n\n# Drupal Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [Drupal](https://github.com/gitpod-io/template-php-drupal-ddev) template.\n\nThe following guide will:\n\n-   Walk you through a real world example with an existing Gitpod config\n-   Introduce you to prebuilds\n-   Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n## Step 1: Clone Git repository\n\n-   Create a new repository based on the [Drupal template](https://github.com/gitpod-io/template-php-drupal-ddev/generate).\n-   Name it e.g. `my-drupal-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/drupal","loc":{"lines":{"from":1,"to":21}}}}],["1559",{"pageContent":"## Step 1: Clone Git repository\n\n-   Create a new repository based on the [Drupal template](https://github.com/gitpod-io/template-php-drupal-ddev/generate).\n-   Name it e.g. `my-drupal-template`.\n\n## Step 2: Install the Gitpod app\n\n-   Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n    Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for Maven or NPM downloading the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/drupal","loc":{"lines":{"from":21,"to":30}}}}],["1560",{"pageContent":"## Step 3: First prebuild\n\n-   Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/<my-drupal-template>`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/drupal","loc":{"lines":{"from":32,"to":38}}}}],["1561",{"pageContent":"## Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/drupal","loc":{"lines":{"from":40,"to":52}}}}],["1562",{"pageContent":"![Browser Extension](/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/drupal","loc":{"lines":{"from":52,"to":66}}}}],["1563",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/drupal","loc":{"lines":{"from":68,"to":70}}}}],["1564",{"pageContent":"## Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n-   [Getting started with your own project](/docs/configure)\n-   [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/drupal","loc":{"lines":{"from":72,"to":77}}}}],["1565",{"pageContent":"---\nsection: quickstart\ntitle: Elixir template\n---\n\n# Elixir Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with an [Elixir](https://github.com/gitpod-io/template-elixir) template.\n\n> Thank you [@tnb24](https://github.com/tnb24) for creating the repository 🙏!\n\nThe following guide will:\n\n-   Walk you through a real world example with an existing Gitpod config\n-   Introduce you to prebuilds\n-   Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n## Step 1: Clone Git repository\n\n-   Create a new repository based on the [Elixir template](https://github.com/gitpod-io/template-elixir/generate).\n-   Name it e.g. `my-elixir-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/elixir","loc":{"lines":{"from":1,"to":23}}}}],["1566",{"pageContent":"## Step 1: Clone Git repository\n\n-   Create a new repository based on the [Elixir template](https://github.com/gitpod-io/template-elixir/generate).\n-   Name it e.g. `my-elixir-template`.\n\n## Step 2: Install Gitpod app\n\n-   Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n    Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for Maven or NPM downloading the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/elixir","loc":{"lines":{"from":23,"to":32}}}}],["1567",{"pageContent":"## Step 3: First prebuild\n\n-   Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/my-elixir-template`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/elixir","loc":{"lines":{"from":34,"to":40}}}}],["1568",{"pageContent":"## Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/elixir","loc":{"lines":{"from":42,"to":54}}}}],["1569",{"pageContent":"![Browser Extension](/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/elixir","loc":{"lines":{"from":54,"to":68}}}}],["1570",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/elixir","loc":{"lines":{"from":70,"to":72}}}}],["1571",{"pageContent":"## Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n-   [Getting started with your own project](/docs/configure)\n-   [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/elixir","loc":{"lines":{"from":74,"to":79}}}}],["1572",{"pageContent":"---\nsection: quickstart\ntitle: Elm template\n---\n\n# Elm Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with an [Elm](https://github.com/avh4/gitpod-template-elm) template.\n\n> Thank you [@avh4](https://github.com/avh4) for creating the repository 🙏!\n\nThe following guide will:\n\n-   Walk you through a real world example with an existing Gitpod config\n-   Introduce you to prebuilds\n-   Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n## Step 1: Clone Git repository\n\n-   Create a new repository based on the [Elm template](https://github.com/avh4/gitpod-template-elm/generate).\n-   Name it e.g. `my-elm-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/elm","loc":{"lines":{"from":1,"to":23}}}}],["1573",{"pageContent":"## Step 1: Clone Git repository\n\n-   Create a new repository based on the [Elm template](https://github.com/avh4/gitpod-template-elm/generate).\n-   Name it e.g. `my-elm-template`.\n\n## Step 2: Install Gitpod app\n\n-   Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n    Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for Maven or NPM downloading the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/elm","loc":{"lines":{"from":23,"to":32}}}}],["1574",{"pageContent":"## Step 3: First prebuild\n\n-   Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/my-elm-template`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/elm","loc":{"lines":{"from":34,"to":40}}}}],["1575",{"pageContent":"## Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/elm","loc":{"lines":{"from":42,"to":54}}}}],["1576",{"pageContent":"![Browser Extension](/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/elm","loc":{"lines":{"from":54,"to":68}}}}],["1577",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/elm","loc":{"lines":{"from":70,"to":72}}}}],["1578",{"pageContent":"## Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n-   [Getting started with your own project](/docs/configure)\n-   [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/elm","loc":{"lines":{"from":74,"to":79}}}}],["1579",{"pageContent":"---\nsection: quickstart\ntitle: Flask template\n---\n\n# Flask Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [Flask](https://github.com/gitpod-io/template-python-flask) template.\n\nThe following guide will:\n\n-   Walk you through a real world example with an existing Gitpod config\n-   Introduce you to prebuilds\n-   Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n## Step 1: Clone Git repository\n\n-   Create a new repository based on the [Flask template](https://github.com/gitpod-io/template-python-flask/generate).\n-   Name it e.g. `my-flask-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/flask","loc":{"lines":{"from":1,"to":21}}}}],["1580",{"pageContent":"## Step 1: Clone Git repository\n\n-   Create a new repository based on the [Flask template](https://github.com/gitpod-io/template-python-flask/generate).\n-   Name it e.g. `my-flask-template`.\n\n## Step 2: Install the Gitpod app\n\n-   Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n    Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for Maven or NPM downloading the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/flask","loc":{"lines":{"from":21,"to":30}}}}],["1581",{"pageContent":"## Step 3: First prebuild\n\n-   Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/<my-flask-template>`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/flask","loc":{"lines":{"from":32,"to":38}}}}],["1582",{"pageContent":"## Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/flask","loc":{"lines":{"from":40,"to":52}}}}],["1583",{"pageContent":"![Browser Extension](/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/flask","loc":{"lines":{"from":52,"to":66}}}}],["1584",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/flask","loc":{"lines":{"from":68,"to":70}}}}],["1585",{"pageContent":"## Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n-   [Getting started with your own project](/docs/configure)\n-   [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/flask","loc":{"lines":{"from":72,"to":77}}}}],["1586",{"pageContent":"---\nsection: quickstart\ntitle: Flutter template\n---\n\n# Flutter Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [Flutter](https://github.com/gitpod-io/template-flutter) template.\n\nThe following guide will:\n\n-   Walk you through a real world example with an existing Gitpod config\n-   Introduce you to prebuilds\n-   Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n### Step 1: Clone Git repository\n\n-   Create a new repository based on the [Flutter template](https://github.com/gitpod-io/template-flutter/generate).\n-   Name it e.g. `my-flutter-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/flutter","loc":{"lines":{"from":1,"to":21}}}}],["1587",{"pageContent":"### Step 1: Clone Git repository\n\n-   Create a new repository based on the [Flutter template](https://github.com/gitpod-io/template-flutter/generate).\n-   Name it e.g. `my-flutter-template`.\n\n### Step 2: Install Gitpod app\n\n-   Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n    Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for installation of dependencies from the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/flutter","loc":{"lines":{"from":21,"to":30}}}}],["1588",{"pageContent":"### Step 3: First prebuild\n\n-   Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/my-flutter-template`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/flutter","loc":{"lines":{"from":32,"to":38}}}}],["1589",{"pageContent":"### Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/flutter","loc":{"lines":{"from":40,"to":52}}}}],["1590",{"pageContent":"![Browser Extension](/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/flutter","loc":{"lines":{"from":52,"to":66}}}}],["1591",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/flutter","loc":{"lines":{"from":68,"to":70}}}}],["1592",{"pageContent":"## Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n-   [Getting started with your own project](/docs/configure)\n-   [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/flutter","loc":{"lines":{"from":72,"to":77}}}}],["1593",{"pageContent":"---\nsection: quickstart\ntitle: Go template\n---\n\n# Go Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [Golang](https://github.com/gitpod-io/template-golang-cli) template.\n\nThe following guide will:\n\n-   Walk you through a real world example with an existing Gitpod config\n-   Introduce you to prebuilds\n-   Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n## Step 1: Clone Git repository\n\n-   Create a new repository based on the [Go template](https://github.com/gitpod-io/template-golang-cli/generate).\n-   Name it e.g. `my-go-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/go","loc":{"lines":{"from":1,"to":21}}}}],["1594",{"pageContent":"## Step 1: Clone Git repository\n\n-   Create a new repository based on the [Go template](https://github.com/gitpod-io/template-golang-cli/generate).\n-   Name it e.g. `my-go-template`.\n\n## Step 2: Install Gitpod app\n\n-   Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n    Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for Maven or NPM downloading the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/go","loc":{"lines":{"from":21,"to":30}}}}],["1595",{"pageContent":"## Step 3: First prebuild\n\n-   Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/template-golang-cli`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/go","loc":{"lines":{"from":32,"to":38}}}}],["1596",{"pageContent":"## Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/go","loc":{"lines":{"from":40,"to":52}}}}],["1597",{"pageContent":"![Browser Extension](/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/go","loc":{"lines":{"from":52,"to":66}}}}],["1598",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/go","loc":{"lines":{"from":68,"to":70}}}}],["1599",{"pageContent":"## Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n-   [Getting started with your own project](/docs/configure)\n-   [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/go","loc":{"lines":{"from":72,"to":77}}}}],["1600",{"pageContent":"---\nsection: quickstart\ntitle: Grain template\n---\n\n# Grain Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [Grain](https://github.com/gitpod-io/template-grain) template.\n\nThe following guide will:\n\n-   Walk you through a real world example with an existing Gitpod config\n-   Introduce you to prebuilds\n-   Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n### Step 1: Clone Git repository\n\n-   Create a new repository based on the [Grain template](https://github.com/gitpod-io/template-grain/generate).\n-   Name it e.g. `my-grain-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/grain","loc":{"lines":{"from":1,"to":21}}}}],["1601",{"pageContent":"### Step 1: Clone Git repository\n\n-   Create a new repository based on the [Grain template](https://github.com/gitpod-io/template-grain/generate).\n-   Name it e.g. `my-grain-template`.\n\n### Step 2: Install Gitpod app\n\n-   Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n    Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for installation of dependencies from the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/grain","loc":{"lines":{"from":21,"to":30}}}}],["1602",{"pageContent":"### Step 3: First prebuild\n\n-   Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/my-grain-template`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/grain","loc":{"lines":{"from":32,"to":38}}}}],["1603",{"pageContent":"### Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/grain","loc":{"lines":{"from":40,"to":52}}}}],["1604",{"pageContent":"![Browser Extension](/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/grain","loc":{"lines":{"from":52,"to":66}}}}],["1605",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/grain","loc":{"lines":{"from":68,"to":70}}}}],["1606",{"pageContent":"## Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n-   [Getting started with your own project](/docs/configure)\n-   [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/grain","loc":{"lines":{"from":72,"to":77}}}}],["1607",{"pageContent":"---\nsection: quickstart\ntitle: Haskell template\n---\n\n# Haskell Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [Haskell](https://github.com/gitpod-io/template-haskell) template.\n\nThe following guide will:\n\n-   Walk you through a real world example with an existing Gitpod config\n-   Introduce you to prebuilds\n-   Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n## Step 1: Clone Git repository\n\n-   Create a new repository based on the [Haskell template](https://github.com/gitpod-io/template-haskell/generate).\n-   Name it e.g. `my-haskell-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/haskell","loc":{"lines":{"from":1,"to":21}}}}],["1608",{"pageContent":"## Step 1: Clone Git repository\n\n-   Create a new repository based on the [Haskell template](https://github.com/gitpod-io/template-haskell/generate).\n-   Name it e.g. `my-haskell-template`.\n\n## Step 2: Install the Gitpod app\n\n-   Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n    Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for Maven or NPM downloading the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/haskell","loc":{"lines":{"from":21,"to":30}}}}],["1609",{"pageContent":"## Step 3: First prebuild\n\n-   Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/<my-haskell-template>`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/haskell","loc":{"lines":{"from":32,"to":38}}}}],["1610",{"pageContent":"## Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/haskell","loc":{"lines":{"from":40,"to":52}}}}],["1611",{"pageContent":"![Browser Extension](/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/haskell","loc":{"lines":{"from":52,"to":66}}}}],["1612",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/haskell","loc":{"lines":{"from":68,"to":70}}}}],["1613",{"pageContent":"## Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n-   [Getting started with your own project](/docs/configure)\n-   [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/haskell","loc":{"lines":{"from":72,"to":77}}}}],["1614",{"pageContent":"---\nsection: quickstart\ntitle: IHP template\n---\n\n# IHP Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with the official [IHP template](https://github.com/gitpod-io/template-ihp).\n\nThe following guide will:\n\n-   Walk you through a real world example with an existing Gitpod config\n-   Introduce you to prebuilds\n-   Demonstrate the benefits of ephemeral development environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n## Step 1: Clone Git repository\n\n-   Create a new repository based on the [IHP template](https://github.com/gitpod-io/template-ihp/generate).\n-   Name it e.g. `my-ihp-app`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/ihp","loc":{"lines":{"from":1,"to":21}}}}],["1615",{"pageContent":"## Step 1: Clone Git repository\n\n-   Create a new repository based on the [IHP template](https://github.com/gitpod-io/template-ihp/generate).\n-   Name it e.g. `my-ihp-app`.\n\n## Step 2: Install the Gitpod app\n\n-   Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n    Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for Maven or NPM downloading the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/ihp","loc":{"lines":{"from":21,"to":30}}}}],["1616",{"pageContent":"## Step 3: First prebuild\n\n-   Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/<my-ihp-app>`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/ihp","loc":{"lines":{"from":32,"to":38}}}}],["1617",{"pageContent":"## Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured development environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/ihp","loc":{"lines":{"from":40,"to":52}}}}],["1618",{"pageContent":"![Browser Extension](/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/ihp","loc":{"lines":{"from":52,"to":66}}}}],["1619",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/ihp","loc":{"lines":{"from":68,"to":70}}}}],["1620",{"pageContent":"## Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n-   [Getting started with your own project](/docs/configure)\n-   [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/ihp","loc":{"lines":{"from":72,"to":77}}}}],["1621",{"pageContent":"---\nsection: getting-started\ntitle: Quickstart\n---\n\n<script lang=\"ts\">\n  import PopularQuickstart from \"$lib/components/docs/quickstart/popular-quickstart.svelte\";\n  import QuickstartSearch from \"$lib/components/docs/quickstart/quickstart-search.svelte\";\n  import OpenGraph from \"$lib/components/open-graph.svelte\";\n</script>\n\n<OpenGraph\ndata={{\n    description:\n      \"Learn how to start using Gitpod on an example project/template that is hosted on GitHub in less than 5 minutes. Get up and running with Gitpod quickly.\",\n    title: \"Quickstart - Gitpod\",\n    keywords: \"template, get started, example\",\n  }}\n/>\n\n# Quickstart","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart","loc":{"lines":{"from":1,"to":21}}}}],["1622",{"pageContent":"# Quickstart\n\nLearn how to start using Gitpod on an example project that is hosted on GitHub in less than 5 minutes. For simplicity we use GitHub as the git hoster but the steps outlined work equally well for GitLab and Bitbucket. This section helps you understand the features and advantages of Gitpod in a learning environment. All templates are pre-configured to use Gitpod and ready-to-code:","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart","loc":{"lines":{"from":21,"to":23}}}}],["1623",{"pageContent":"## Templates\n\n### Popular Templates\n\n<PopularQuickstart />\n\n### Find your template\n\n<QuickstartSearch />\n\n<br>\n\n💡 Find more such templates on [Gitpod Samples](https://github.com/gitpod-samples)\n\n## Installing the Gitpod browser extension\n\nYou can install the Gitpod browser extension in any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browser such as Google Chrome, Microsoft Edge, Brave, and others, or in [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/).\n\nThe Gitpod extension adds a Gitpod button on every project and branch across GitLab, GitHub, and Bitbucket so that you can easily open a new workspace for any project.\n\n![Browser Extension](/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart","loc":{"lines":{"from":25,"to":47}}}}],["1624",{"pageContent":"## Next Steps\n\nWith Gitpod you start treating your dev environments as something ephemeral: you start them, you code, you push your code, and you forget about them. For your next task, you'll use a fresh dev environment.\n\n-   [Getting started with your own project](/docs/introduction/getting-started)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart","loc":{"lines":{"from":49,"to":53}}}}],["1625",{"pageContent":"---\nsection: quickstart\ntitle: Java template\n---\n\n# Java Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [Java Spring](https://github.com/gitpod-io/spring-petclinic) template.\n\nThe following guide will:\n\n-   Walk you through a real world example with an existing Gitpod config\n-   Introduce you to prebuilds\n-   Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n## Step 1: Clone Git repository\n\n-   Create a new repository based on the [Java template](https://github.com/gitpod-io/spring-petclinic/generate).\n-   Name it e.g. `my-java-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/java","loc":{"lines":{"from":1,"to":21}}}}],["1626",{"pageContent":"## Step 1: Clone Git repository\n\n-   Create a new repository based on the [Java template](https://github.com/gitpod-io/spring-petclinic/generate).\n-   Name it e.g. `my-java-template`.\n\n## Step 2: Install Gitpod app\n\n-   Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n    Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for Maven or NPM downloading the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/java","loc":{"lines":{"from":21,"to":30}}}}],["1627",{"pageContent":"## Step 3: First prebuild\n\n-   Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/spring-petclinic`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/java","loc":{"lines":{"from":32,"to":38}}}}],["1628",{"pageContent":"## Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/java","loc":{"lines":{"from":40,"to":52}}}}],["1629",{"pageContent":"![Browser Extension](/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/java","loc":{"lines":{"from":52,"to":66}}}}],["1630",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/java","loc":{"lines":{"from":68,"to":70}}}}],["1631",{"pageContent":"## Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n-   [Getting started with your own project](/docs/configure)\n-   [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/java","loc":{"lines":{"from":72,"to":77}}}}],["1632",{"pageContent":"---\nsection: quickstart\ntitle: Julia template\n---\n\n# Julia Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [Julia](https://github.com/gitpod-io/template-julia) template.\n\nThe following guide will:\n\n-   Walk you through a real world example with an existing Gitpod config\n-   Introduce you to prebuilds\n-   Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n## Step 1: Clone Git repository\n\n-   Create a new repository based on the [Julia template](https://github.com/gitpod-io/template-julia/generate).\n-   Name it e.g. `my-julia-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/julia","loc":{"lines":{"from":1,"to":21}}}}],["1633",{"pageContent":"## Step 1: Clone Git repository\n\n-   Create a new repository based on the [Julia template](https://github.com/gitpod-io/template-julia/generate).\n-   Name it e.g. `my-julia-template`.\n\n## Step 2: Install Gitpod app\n\n-   Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n    Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for Julia packages downloading from the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/julia","loc":{"lines":{"from":21,"to":30}}}}],["1634",{"pageContent":"## Step 3: First prebuild\n\n-   Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/my-julia-template`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/julia","loc":{"lines":{"from":32,"to":38}}}}],["1635",{"pageContent":"## Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/julia","loc":{"lines":{"from":40,"to":52}}}}],["1636",{"pageContent":"![Browser Extension](/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/julia","loc":{"lines":{"from":52,"to":66}}}}],["1637",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/julia","loc":{"lines":{"from":68,"to":70}}}}],["1638",{"pageContent":"## Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n-   [Getting started with your own project](/docs/configure)\n-   [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/julia","loc":{"lines":{"from":72,"to":77}}}}],["1639",{"pageContent":"---\nsection: quickstart\ntitle: Laravel template\n---\n\n# Laravel Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [Laravel](https://github.com/gitpod-io/template-php-laravel-mysql) template.\n\nThe following guide will:\n\n-   Walk you through a real world example with an existing Gitpod config\n-   Introduce you to prebuilds\n-   Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n## Step 1: Clone Git repository\n\n-   Create a new repository based on the [Laravel template](https://github.com/gitpod-io/template-php-laravel-mysql/generate).\n-   Name it e.g. `my-laravel-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/laravel","loc":{"lines":{"from":1,"to":21}}}}],["1640",{"pageContent":"## Step 2: Install the Gitpod app\n\n-   Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n    Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for Maven or NPM downloading the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/laravel","loc":{"lines":{"from":23,"to":27}}}}],["1641",{"pageContent":"## Step 3: First prebuild\n\n-   Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/<my-laravel-template>`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/laravel","loc":{"lines":{"from":29,"to":35}}}}],["1642",{"pageContent":"## Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/laravel","loc":{"lines":{"from":37,"to":49}}}}],["1643",{"pageContent":"![Browser Extension](/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/laravel","loc":{"lines":{"from":49,"to":63}}}}],["1644",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/laravel","loc":{"lines":{"from":65,"to":67}}}}],["1645",{"pageContent":"## Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n-   [Getting started with your own project](/docs/configure)\n-   [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/laravel","loc":{"lines":{"from":69,"to":74}}}}],["1646",{"pageContent":"---\nsection: quickstart\ntitle: NextJS template\n---\n\n# NextJS Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [NextJS](https://github.com/gitpod-io/template-nextjs) template.\n\nThe following guide will:\n\n-   Walk you through a real world example with an existing Gitpod config\n-   Introduce you to prebuilds\n-   Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n### Step 1: Clone Git repository\n\n-   Create a new repository based on the [NextJS template](https://github.com/gitpod-io/template-nextjs/generate).\n-   Name it e.g. `my-nextjs-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/nextjs","loc":{"lines":{"from":1,"to":21}}}}],["1647",{"pageContent":"### Step 1: Clone Git repository\n\n-   Create a new repository based on the [NextJS template](https://github.com/gitpod-io/template-nextjs/generate).\n-   Name it e.g. `my-nextjs-template`.\n\n### Step 2: Install Gitpod app\n\n-   Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n    Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for installation of dependencies from the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/nextjs","loc":{"lines":{"from":21,"to":30}}}}],["1648",{"pageContent":"### Step 3: First prebuild\n\n-   Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/my-nextjs-template`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/nextjs","loc":{"lines":{"from":32,"to":38}}}}],["1649",{"pageContent":"### Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/nextjs","loc":{"lines":{"from":40,"to":52}}}}],["1650",{"pageContent":"![Browser Extension](/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/nextjs","loc":{"lines":{"from":52,"to":66}}}}],["1651",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/nextjs","loc":{"lines":{"from":68,"to":70}}}}],["1652",{"pageContent":"## Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n-   [Getting started with your own project](/docs/configure)\n-   [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/nextjs","loc":{"lines":{"from":72,"to":77}}}}],["1653",{"pageContent":"---\nsection: quickstart\ntitle: Nix template\n---\n\n# Nix Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [Nix](https://github.com/gitpod-io/template-nix) template.\n\nThe following guide will:\n\n-   Walk you through a real world example with an existing Gitpod config\n-   Introduce you to prebuilds\n-   Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n## Step 1: Clone Git repository\n\n-   Create a new repository based on the [Nix template](https://github.com/gitpod-io/template-nix/generate).\n-   Name it e.g. `my-nix-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/nix","loc":{"lines":{"from":1,"to":21}}}}],["1654",{"pageContent":"## Step 1: Clone Git repository\n\n-   Create a new repository based on the [Nix template](https://github.com/gitpod-io/template-nix/generate).\n-   Name it e.g. `my-nix-template`.\n\n## Step 2: Install the Gitpod app\n\n-   Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n    Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for Maven or NPM downloading the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/nix","loc":{"lines":{"from":21,"to":30}}}}],["1655",{"pageContent":"## Step 3: First prebuild\n\n-   Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/<my-nix-template>`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/nix","loc":{"lines":{"from":32,"to":38}}}}],["1656",{"pageContent":"## Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/nix","loc":{"lines":{"from":40,"to":52}}}}],["1657",{"pageContent":"![Browser Extension](/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/nix","loc":{"lines":{"from":52,"to":66}}}}],["1658",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/nix","loc":{"lines":{"from":68,"to":70}}}}],["1659",{"pageContent":"## Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n-   [Getting started with your own project](/docs/configure)\n-   [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/nix","loc":{"lines":{"from":72,"to":77}}}}],["1660",{"pageContent":"---\nsection: quickstart\ntitle: OCaml template\n---\n\n# Ocaml Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [OCaml](https://github.com/gitpod-io/template-ocaml) template.\n\nThe following guide will:\n\n-   Walk you through a real world example with an existing Gitpod config\n-   Introduce you to prebuilds\n-   Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n## Step 1: Clone Git repository\n\n-   Create a new repository based on the [OCaml template](https://github.com/gitpod-io/template-ocaml/generate).\n-   Name it e.g. `my-ocaml-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/ocaml","loc":{"lines":{"from":1,"to":21}}}}],["1661",{"pageContent":"## Step 1: Clone Git repository\n\n-   Create a new repository based on the [OCaml template](https://github.com/gitpod-io/template-ocaml/generate).\n-   Name it e.g. `my-ocaml-template`.\n\n## Step 2: Install the Gitpod app\n\n-   Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n    Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for Maven or NPM downloading the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/ocaml","loc":{"lines":{"from":21,"to":30}}}}],["1662",{"pageContent":"## Step 3: First prebuild\n\n-   Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/<my-ocaml-template>`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/ocaml","loc":{"lines":{"from":32,"to":38}}}}],["1663",{"pageContent":"## Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/ocaml","loc":{"lines":{"from":40,"to":52}}}}],["1664",{"pageContent":"![Browser Extension](/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/ocaml","loc":{"lines":{"from":52,"to":66}}}}],["1665",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/ocaml","loc":{"lines":{"from":68,"to":70}}}}],["1666",{"pageContent":"## Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n-   [Getting started with your own project](/docs/configure)\n-   [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/ocaml","loc":{"lines":{"from":72,"to":77}}}}],["1667",{"pageContent":"---\nsection: quickstart\ntitle: Perl template\n---\n\n# Perl Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [Perl](https://github.com/gitpod-io/template-perl) template.\n\nThe following guide will:\n\n-   Walk you through a real world example with an existing Gitpod config\n-   Introduce you to prebuilds\n-   Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n## Step 1: Clone Git repository\n\n-   Create a new repository based on the [Perl template](https://github.com/gitpod-io/template-perl/generate).\n-   Name it e.g. `my-perl-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/perl","loc":{"lines":{"from":1,"to":21}}}}],["1668",{"pageContent":"## Step 1: Clone Git repository\n\n-   Create a new repository based on the [Perl template](https://github.com/gitpod-io/template-perl/generate).\n-   Name it e.g. `my-perl-template`.\n\n## Step 2: Install Gitpod app\n\n-   Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n    Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for CPAN downloading the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/perl","loc":{"lines":{"from":21,"to":30}}}}],["1669",{"pageContent":"## Step 3: First prebuild\n\n-   Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/my-perl-template`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/perl","loc":{"lines":{"from":32,"to":38}}}}],["1670",{"pageContent":"## Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/perl","loc":{"lines":{"from":40,"to":52}}}}],["1671",{"pageContent":"![Browser Extension](/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/perl","loc":{"lines":{"from":52,"to":66}}}}],["1672",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/perl","loc":{"lines":{"from":68,"to":70}}}}],["1673",{"pageContent":"## Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n-   [Getting started with your own project](/docs/configure)\n-   [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/perl","loc":{"lines":{"from":72,"to":77}}}}],["1674",{"pageContent":"---\nsection: quickstart\ntitle: PlanetScale template\n---\n\n# PlanetScale Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [PlanetScale](https://github.com/Shulammite-Aso/template-planetscale) template.\n\nThe following guide will:\n\n-   Walk you through a real world example with an existing Gitpod config\n-   Introduce you to prebuilds\n-   Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n## Step 1: Clone Git repository\n\n-   Create a new repository based on the [PlanetScale template](https://github.com/Shulammite-Aso/template-planetscale/generate).\n-   Name it e.g. `my-planetscale-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/planetscale","loc":{"lines":{"from":1,"to":21}}}}],["1675",{"pageContent":"## Step 2: Install the Gitpod app\n\n-   Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n    Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for Maven or NPM downloading the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/planetscale","loc":{"lines":{"from":23,"to":27}}}}],["1676",{"pageContent":"## Step 3: First prebuild\n\n-   Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/<my-planetscale-template>`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/planetscale","loc":{"lines":{"from":29,"to":35}}}}],["1677",{"pageContent":"## Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/planetscale","loc":{"lines":{"from":37,"to":49}}}}],["1678",{"pageContent":"![Browser Extension](/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/planetscale","loc":{"lines":{"from":49,"to":63}}}}],["1679",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/planetscale","loc":{"lines":{"from":65,"to":67}}}}],["1680",{"pageContent":"## Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n-   [Getting started with your own project](/docs/configure)\n-   [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/planetscale","loc":{"lines":{"from":69,"to":74}}}}],["1681",{"pageContent":"---\nsection: quickstart\ntitle: Python template\n---\n\n# Python Django Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [Python](https://github.com/gitpod-io/template-python-django) template.\n\nThe following guide will:\n\n-   Walk you through a real world example with an existing Gitpod config\n-   Introduce you to prebuilds\n-   Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n## Step 1: Clone Git repository\n\n-   Create a new repository based on the [Python template](https://github.com/gitpod-io/template-python-django/generate).\n-   Name it e.g. `my-python-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/python","loc":{"lines":{"from":1,"to":21}}}}],["1682",{"pageContent":"## Step 1: Clone Git repository\n\n-   Create a new repository based on the [Python template](https://github.com/gitpod-io/template-python-django/generate).\n-   Name it e.g. `my-python-template`.\n\n## Step 2: Install the Gitpod app\n\n-   Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n    Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for Maven or NPM downloading the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/python","loc":{"lines":{"from":21,"to":30}}}}],["1683",{"pageContent":"## Step 3: First prebuild\n\n-   Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/<my-python-template>`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/python","loc":{"lines":{"from":32,"to":38}}}}],["1684",{"pageContent":"## Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/python","loc":{"lines":{"from":40,"to":52}}}}],["1685",{"pageContent":"![Browser Extension](/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/python","loc":{"lines":{"from":52,"to":66}}}}],["1686",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/python","loc":{"lines":{"from":68,"to":70}}}}],["1687",{"pageContent":"## Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n-   [Getting started with your own project](/docs/configure)\n-   [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/python","loc":{"lines":{"from":72,"to":77}}}}],["1688",{"pageContent":"---\nsection: quickstart\ntitle: React template\n---\n\n# React Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [React](https://github.com/gitpod-io/template-typescript-react) template.\n\nThe following guide will:\n\n-   Walk you through a real world example with an existing Gitpod config\n-   Introduce you to prebuilds\n-   Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n## Step 1: Clone Git repository\n\n-   Create a new repository based on the [React template](https://github.com/gitpod-io/template-typescript-react/generate).\n-   Name it e.g. `my-react-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/react","loc":{"lines":{"from":1,"to":21}}}}],["1689",{"pageContent":"## Step 1: Clone Git repository\n\n-   Create a new repository based on the [React template](https://github.com/gitpod-io/template-typescript-react/generate).\n-   Name it e.g. `my-react-template`.\n\n## Step 2: Install the Gitpod app\n\n-   Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n    Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for Maven or NPM downloading the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/react","loc":{"lines":{"from":21,"to":30}}}}],["1690",{"pageContent":"## Step 3: First prebuild\n\n-   Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/<my-react-template>`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/react","loc":{"lines":{"from":32,"to":38}}}}],["1691",{"pageContent":"## Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/react","loc":{"lines":{"from":40,"to":52}}}}],["1692",{"pageContent":"![Browser Extension](/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/react","loc":{"lines":{"from":52,"to":66}}}}],["1693",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/react","loc":{"lines":{"from":68,"to":70}}}}],["1694",{"pageContent":"## Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n-   [Getting started with your own project](/docs/configure)\n-   [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/react","loc":{"lines":{"from":72,"to":77}}}}],["1695",{"pageContent":"---\nsection: quickstart\ntitle: Ruby on Rails template\n---\n\n# Ruby on Rails Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [Ruby on Rails](https://github.com/gitpod-io/template-ruby-on-rails-postgres) template.\n\nThe following guide will:\n\n-   Walk you through a real world example with an existing Gitpod config\n-   Introduce you to prebuilds\n-   Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n## Step 1: Clone Git repository\n\n-   Create a new repository based on the [Ruby on Rails template](https://github.com/gitpod-io/template-ruby-on-rails-postgres/generate).\n-   Name it e.g. `my-ruby-on-rails-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/ruby-on-rails","loc":{"lines":{"from":1,"to":21}}}}],["1696",{"pageContent":"## Step 2: Install the Gitpod app\n\n-   Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n    Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for Maven or NPM downloading the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/ruby-on-rails","loc":{"lines":{"from":23,"to":27}}}}],["1697",{"pageContent":"## Step 3: First prebuild\n\n-   Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/<my-ruby-on-rails-template>`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/ruby-on-rails","loc":{"lines":{"from":29,"to":35}}}}],["1698",{"pageContent":"## Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/ruby-on-rails","loc":{"lines":{"from":37,"to":49}}}}],["1699",{"pageContent":"![Browser Extension](/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/ruby-on-rails","loc":{"lines":{"from":49,"to":63}}}}],["1700",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/ruby-on-rails","loc":{"lines":{"from":65,"to":67}}}}],["1701",{"pageContent":"## Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n-   [Getting started with your own project](/docs/configure)\n-   [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/ruby-on-rails","loc":{"lines":{"from":69,"to":74}}}}],["1702",{"pageContent":"---\nsection: quickstart\ntitle: Rust template\n---\n\n# Rust Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [Rust](https://github.com/gitpod-io/template-rust-cli) template.\n\nThe following guide will:\n\n-   Walk you through a real world example with an existing Gitpod config\n-   Introduce you to prebuilds\n-   Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n## Step 1: Clone Git repository\n\n-   Create a new repository based on the [Rust template](https://github.com/gitpod-io/template-rust-cli/generate).\n-   Name it e.g. `my-rust-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/rust","loc":{"lines":{"from":1,"to":21}}}}],["1703",{"pageContent":"## Step 1: Clone Git repository\n\n-   Create a new repository based on the [Rust template](https://github.com/gitpod-io/template-rust-cli/generate).\n-   Name it e.g. `my-rust-template`.\n\n## Step 2: Install Gitpod app\n\n-   Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n    Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for Maven or NPM downloading the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/rust","loc":{"lines":{"from":21,"to":30}}}}],["1704",{"pageContent":"## Step 3: First prebuild\n\n-   Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/my-rust-template`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/rust","loc":{"lines":{"from":32,"to":38}}}}],["1705",{"pageContent":"## Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/rust","loc":{"lines":{"from":40,"to":52}}}}],["1706",{"pageContent":"![Browser Extension](/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/rust","loc":{"lines":{"from":52,"to":66}}}}],["1707",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/rust","loc":{"lines":{"from":68,"to":70}}}}],["1708",{"pageContent":"## Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n-   [Getting started with your own project](/docs/configure)\n-   [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/rust","loc":{"lines":{"from":72,"to":77}}}}],["1709",{"pageContent":"---\nsection: quickstart\ntitle: Scala template\n---\n\n# Scala Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [Scala](https://github.com/gitpod-io/template-scala) template.\n\nThe following guide will:\n\n-   Walk you through a real world example with an existing Gitpod config\n-   Introduce you to prebuilds\n-   Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n## Step 1: Clone Git repository\n\n-   Create a new repository based on the [Scala template](https://github.com/gitpod-io/template-scala/generate).\n-   Name it e.g. `my-scala-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/scala","loc":{"lines":{"from":1,"to":21}}}}],["1710",{"pageContent":"## Step 1: Clone Git repository\n\n-   Create a new repository based on the [Scala template](https://github.com/gitpod-io/template-scala/generate).\n-   Name it e.g. `my-scala-template`.\n\n## Step 2: Install the Gitpod app\n\n-   Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n    Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for Maven or NPM downloading the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/scala","loc":{"lines":{"from":21,"to":30}}}}],["1711",{"pageContent":"## Step 3: First prebuild\n\n-   Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/<my-scala-template>`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/scala","loc":{"lines":{"from":32,"to":38}}}}],["1712",{"pageContent":"## Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/scala","loc":{"lines":{"from":40,"to":52}}}}],["1713",{"pageContent":"![Browser Extension](/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/scala","loc":{"lines":{"from":52,"to":66}}}}],["1714",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/scala","loc":{"lines":{"from":68,"to":70}}}}],["1715",{"pageContent":"## Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n-   [Getting started with your own project](/docs/configure)\n-   [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/scala","loc":{"lines":{"from":72,"to":77}}}}],["1716",{"pageContent":"---\nsection: quickstart\ntitle: Svelte template\n---\n\n# Svelte Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [SvelteJS](https://github.com/gitpod-io/template-sveltejs) template.\n\nThe following guide will:\n\n-   Walk you through a real world example with an existing Gitpod config\n-   Introduce you to prebuilds\n-   Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n## Step 1: Clone Git repository\n\n-   Create a new repository based on the [SvelteJS template](https://github.com/gitpod-io/template-sveltejs/generate).\n-   Name it e.g. `my-svelte-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/svelte","loc":{"lines":{"from":1,"to":21}}}}],["1717",{"pageContent":"## Step 1: Clone Git repository\n\n-   Create a new repository based on the [SvelteJS template](https://github.com/gitpod-io/template-sveltejs/generate).\n-   Name it e.g. `my-svelte-template`.\n\n## Step 2: Install Gitpod app\n\n-   Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n    Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for Maven or NPM downloading the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/svelte","loc":{"lines":{"from":21,"to":30}}}}],["1718",{"pageContent":"## Step 3: First prebuild\n\n-   Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/my-svelte-template`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/svelte","loc":{"lines":{"from":32,"to":38}}}}],["1719",{"pageContent":"## Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/svelte","loc":{"lines":{"from":40,"to":52}}}}],["1720",{"pageContent":"![Browser Extension](/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/svelte","loc":{"lines":{"from":52,"to":66}}}}],["1721",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/svelte","loc":{"lines":{"from":68,"to":70}}}}],["1722",{"pageContent":"## Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n-   [Getting started with your own project](/docs/configure)\n-   [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/svelte","loc":{"lines":{"from":72,"to":77}}}}],["1723",{"pageContent":"---\nsection: quickstart\ntitle: SvelteKit template\n---\n\n# SvelteKit Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [SvelteKit](https://github.com/gitpod-io/template-sveltekit) template.\n\nThe following guide will:\n\n-   Walk you through a real world example with an existing Gitpod config\n-   Introduce you to prebuilds\n-   Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n## Step 1: Clone Git repository\n\n-   Create a new repository based on the [SvelteKit template](https://github.com/gitpod-io/template-sveltekit/generate).\n-   Name it e.g. `my-sveltekit-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/sveltekit","loc":{"lines":{"from":1,"to":21}}}}],["1724",{"pageContent":"## Step 1: Clone Git repository\n\n-   Create a new repository based on the [SvelteKit template](https://github.com/gitpod-io/template-sveltekit/generate).\n-   Name it e.g. `my-sveltekit-template`.\n\n## Step 2: Install Gitpod app\n\n-   Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n    Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for Maven or NPM downloading the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/sveltekit","loc":{"lines":{"from":21,"to":30}}}}],["1725",{"pageContent":"## Step 3: First prebuild\n\n-   Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/my-svelte-template`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/sveltekit","loc":{"lines":{"from":32,"to":38}}}}],["1726",{"pageContent":"## Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/sveltekit","loc":{"lines":{"from":40,"to":52}}}}],["1727",{"pageContent":"![Browser Extension](/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/sveltekit","loc":{"lines":{"from":52,"to":66}}}}],["1728",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/sveltekit","loc":{"lines":{"from":68,"to":70}}}}],["1729",{"pageContent":"## Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n-   [Getting started with your own project](/docs/configure)\n-   [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/sveltekit","loc":{"lines":{"from":72,"to":77}}}}],["1730",{"pageContent":"---\nsection: quickstart\ntitle: TLA+ template\n---\n\n# TLA+ Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [TLA+](https://github.com/gitpod-io/template-tlaplus) template.\n\nThe following guide will:\n\n-   Walk you through a real world example with an existing Gitpod config\n-   Introduce you to prebuilds\n-   Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n### Step 1: Clone Git repository\n\n-   Create a new repository based on the [TLA+ template](https://github.com/gitpod-io/template-tlaplus/generate).\n-   Name it e.g. `my-tlaplus-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/tlaplus","loc":{"lines":{"from":1,"to":21}}}}],["1731",{"pageContent":"### Step 1: Clone Git repository\n\n-   Create a new repository based on the [TLA+ template](https://github.com/gitpod-io/template-tlaplus/generate).\n-   Name it e.g. `my-tlaplus-template`.\n\n### Step 2: Install Gitpod app\n\n-   Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n    Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for installation of dependencies from the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/tlaplus","loc":{"lines":{"from":21,"to":30}}}}],["1732",{"pageContent":"### Step 3: First prebuild\n\n-   Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/my-nextjs-template`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/tlaplus","loc":{"lines":{"from":32,"to":38}}}}],["1733",{"pageContent":"### Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/tlaplus","loc":{"lines":{"from":40,"to":52}}}}],["1734",{"pageContent":"![Browser Extension](/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/tlaplus","loc":{"lines":{"from":52,"to":66}}}}],["1735",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/tlaplus","loc":{"lines":{"from":68,"to":70}}}}],["1736",{"pageContent":"## Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n-   [Getting started with your own project](/docs/configure)\n-   [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/tlaplus","loc":{"lines":{"from":72,"to":77}}}}],["1737",{"pageContent":"---\nsection: quickstart\ntitle: Node/TypeScript/Express template\n---\n\n# Node/TypeScript/Express Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [Node/TypeScript/Express](https://github.com/gitpod-io/template-typescript-node) template.\n\nThe following guide will:\n\n-   Walk you through a real world example with an existing Gitpod config\n-   Introduce you to prebuilds\n-   Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n## Step 1: Clone Git repository\n\n-   Create a new repository based on the [Node/TypeScript template](https://github.com/gitpod-io/template-typescript-node/generate).\n-   Name it e.g. `my-typescript-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/typescript","loc":{"lines":{"from":1,"to":21}}}}],["1738",{"pageContent":"## Step 2: Install Gitpod app\n\n-   Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n    Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for Maven or NPM downloading from the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/typescript","loc":{"lines":{"from":23,"to":27}}}}],["1739",{"pageContent":"## Step 3: First prebuild\n\n-   Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/my-typescript-template`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/typescript","loc":{"lines":{"from":29,"to":35}}}}],["1740",{"pageContent":"## Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/typescript","loc":{"lines":{"from":37,"to":49}}}}],["1741",{"pageContent":"![Browser Extension](/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/typescript","loc":{"lines":{"from":49,"to":63}}}}],["1742",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/typescript","loc":{"lines":{"from":65,"to":67}}}}],["1743",{"pageContent":"## Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n-   [Getting started with your own project](/docs/configure)\n-   [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/typescript","loc":{"lines":{"from":69,"to":74}}}}],["1744",{"pageContent":"---\nsection: quickstart\ntitle: Wasp template\n---\n\n# Wasp Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [Wasp](https://github.com/gitpod-io/template-wasp) template.\n\nThe following guide will:\n\n-   Walk you through a real world example with an existing Gitpod config\n-   Introduce you to prebuilds\n-   Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n## Step 1: Clone Git repository\n\n-   Create a new repository based on the [Wasp template](https://github.com/gitpod-io/template-wasp/generate).\n-   Name it e.g. `my-wasp-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/wasp","loc":{"lines":{"from":1,"to":21}}}}],["1745",{"pageContent":"## Step 1: Clone Git repository\n\n-   Create a new repository based on the [Wasp template](https://github.com/gitpod-io/template-wasp/generate).\n-   Name it e.g. `my-wasp-template`.\n\n## Step 2: Install the Gitpod app\n\n-   Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n    Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for Maven or NPM downloading the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/wasp","loc":{"lines":{"from":21,"to":30}}}}],["1746",{"pageContent":"## Step 3: First prebuild\n\n-   Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/<my-wasp-template>`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/wasp","loc":{"lines":{"from":32,"to":38}}}}],["1747",{"pageContent":"## Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/wasp","loc":{"lines":{"from":40,"to":52}}}}],["1748",{"pageContent":"![Browser Extension](/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/wasp","loc":{"lines":{"from":52,"to":66}}}}],["1749",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/wasp","loc":{"lines":{"from":68,"to":70}}}}],["1750",{"pageContent":"## Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n-   [Getting started with your own project](/docs/configure)\n-   [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/wasp","loc":{"lines":{"from":72,"to":77}}}}],["1751",{"pageContent":"---\nsection: quickstart\ntitle: Wordpress template\n---\n\n# Wordpress Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [Wordpress](https://github.com/gitpod-io/template-wordpress) template.\n\nThe following guide will:\n\n-   Walk you through a real world example with an existing Gitpod config\n-   Introduce you to prebuilds\n-   Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n### Step 1: Clone Git repository\n\n-   Create a new repository based on the [Wordpress template](https://github.com/gitpod-io/template-wordpress/generate).\n-   Name it e.g. `my-wordpress-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/wordpress","loc":{"lines":{"from":1,"to":21}}}}],["1752",{"pageContent":"### Step 1: Clone Git repository\n\n-   Create a new repository based on the [Wordpress template](https://github.com/gitpod-io/template-wordpress/generate).\n-   Name it e.g. `my-wordpress-template`.\n\n### Step 2: Install Gitpod app\n\n-   Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n    Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for installation of dependencies from the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/wordpress","loc":{"lines":{"from":21,"to":30}}}}],["1753",{"pageContent":"### Step 3: First prebuild\n\n-   Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/my-wordpress-template`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/wordpress","loc":{"lines":{"from":32,"to":38}}}}],["1754",{"pageContent":"### Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/wordpress","loc":{"lines":{"from":40,"to":52}}}}],["1755",{"pageContent":"![Browser Extension](/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/wordpress","loc":{"lines":{"from":52,"to":66}}}}],["1756",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/wordpress","loc":{"lines":{"from":68,"to":70}}}}],["1757",{"pageContent":"## Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n-   [Getting started with your own project](/docs/configure)\n-   [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/wordpress","loc":{"lines":{"from":72,"to":77}}}}],["1758",{"pageContent":"---\nsection: quickstart\ntitle: Yasm template\n---\n\n# Yasm Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [Yasm](https://github.com/gitpod-io/template-yasm) template.\n\nThe following guide will:\n\n-   Walk you through a real world example with an existing Gitpod config\n-   Introduce you to prebuilds\n-   Demonstrate the benefits of ephemeral development environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n## Step 1: Clone Git repository\n\n-   Create a new repository based on the [C template](https://github.com/gitpod-io/template-c/generate).\n-   Name it e.g. `my-yasm-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/yasm","loc":{"lines":{"from":1,"to":21}}}}],["1759",{"pageContent":"## Step 1: Clone Git repository\n\n-   Create a new repository based on the [C template](https://github.com/gitpod-io/template-c/generate).\n-   Name it e.g. `my-yasm-template`.\n\n## Step 2: Install Gitpod app\n\n-   Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n    Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for installation of dependencies from the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/yasm","loc":{"lines":{"from":21,"to":30}}}}],["1760",{"pageContent":"## Step 3: First prebuild\n\n-   Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/my-yasm-template`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/yasm","loc":{"lines":{"from":32,"to":38}}}}],["1761",{"pageContent":"## Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured development environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/yasm","loc":{"lines":{"from":40,"to":52}}}}],["1762",{"pageContent":"![Browser Extension](/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/yasm","loc":{"lines":{"from":52,"to":66}}}}],["1763",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/yasm","loc":{"lines":{"from":68,"to":70}}}}],["1764",{"pageContent":"## Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n-   [Getting started with your own project](/docs/configure)\n-   [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/yasm","loc":{"lines":{"from":72,"to":77}}}}],["1765",{"pageContent":"---\nsection: quickstart\ntitle: X11 VNC template\n---\n\n# X11 VNC Quickstart\n\nLearn how to set-up and understand the benefits of Gitpod **in less than 5 min** with our [X11 VNC](https://github.com/gitpod-io/template-x11-vnc) template.\n\nThe following guide will:\n\n-   Walk you through a real world example with an existing Gitpod config\n-   Introduce you to prebuilds\n-   Demonstrate the benefits of ephemeral developer environments\n\nFor simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.\n\n### Step 1: Clone Git repository\n\n-   Create a new repository based on the [X11 VNC template](https://github.com/gitpod-io/template-x11-vnc/generate).\n-   Name it e.g. `my-x11-vnc-template`.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/x11-vnc","loc":{"lines":{"from":1,"to":21}}}}],["1766",{"pageContent":"### Step 1: Clone Git repository\n\n-   Create a new repository based on the [X11 VNC template](https://github.com/gitpod-io/template-x11-vnc/generate).\n-   Name it e.g. `my-x11-vnc-template`.\n\n### Step 2: Install Gitpod app\n\n-   Install the [Gitpod App](https://github.com/apps/gitpod-io/installations/new).\n\n    Gitpod's GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you don't have to wait for installation of dependencies from the internet when you want to start coding.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/x11-vnc","loc":{"lines":{"from":21,"to":30}}}}],["1767",{"pageContent":"### Step 3: First prebuild\n\n-   Start your first workspace with a prebuild by prefixing **https://gitpod.io#prebuild/** to the URL of the repository.\n\nThe revised URL is: `https://gitpod.io/#prebuild/https://github.com/<github_username>/my-x11-vnc-template`\n\nGitpod displays the prebuild progress status by running the `init` commands in the _.gitpod.yml_ file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see [prebuilds](/docs/configure/projects/prebuilds).","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/x11-vnc","loc":{"lines":{"from":32,"to":38}}}}],["1768",{"pageContent":"### Step 4: Enjoy being ready-to-code 🤙\n\nOnce the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.\n\nOther developers made their setup even more productive and supercharged their workflows with the following quick steps:\n\n1. **Installing the browser extension**\n\nYou can install the Gitpod browser extension on any [Chromium-based](https://chrome.google.com/webstore/detail/gitpod-online-ide/dodmmooeoklaejobgleioelladacbeki) browsers such as Microsoft Edge, Brave, Chrome, and others, or on a [Firefox](https://addons.mozilla.org/firefox/addon/gitpod/) browser.\n\nThe extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with `gitpod.io/#` so that you can easily open a new workspace from any Git context.\n\n![Browser Extension](/images/docs/browser-extension-lense.png)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/x11-vnc","loc":{"lines":{"from":40,"to":52}}}}],["1769",{"pageContent":"![Browser Extension](/images/docs/browser-extension-lense.png)\n\nIf you prefer to not install browser extensions then you can use the Gitpod [browser bookmarklet](/docs/configure/user-settings/browser-bookmarklet) instead.\n\nFor our partner GitLab we have a native integration into their UI that you can enable here.\n\n2. **Add your favorite VS Code themes and extensions**\n\nYou have access to all Visual Studio Code extensions published under the vendor neutral [Open VSX registry](https://open-vsx.org/). Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.\n\nChanges you make in your workspace such as themes and extensions are synced automatically to other workspaces.\n\n3. **Start throwing away workspaces like paper towels**\n\nYou can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/x11-vnc","loc":{"lines":{"from":52,"to":66}}}}],["1770",{"pageContent":"You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.\n\nTry it out and open 3 workspaces on the same context (e.g. on main or on an issue). 🤓","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/x11-vnc","loc":{"lines":{"from":68,"to":70}}}}],["1771",{"pageContent":"## Next Steps\n\nYou've successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:\n\n-   [Getting started with your own project](/docs/configure)\n-   [Git Integrations](/docs/integrations)","metadata":{"source":"https://www.gitpod.io/docs/introduction/getting-started/quickstart/x11-vnc","loc":{"lines":{"from":72,"to":77}}}}],["1772",{"pageContent":"---\nsection: self-hosted/helm-deprecated\ntitle: Configure the database used by your Gitpod installation\n---\n\n# Configure the database used by your Gitpod installation\n\n> ⚠️ **Deprecated Content**\n>\n> The content of this page assumes you are using Helm, which is now deprecated. Please use the [Installer](../../latest) instead.\n\nGitpod uses a MySQL database to store user data. By default Gitpod ships with a MySQL database built-in. If you operate your own MySQL database (which we'd recommend in a production setting) you can use that one. You have the following options:\n\n-   Integrated database: If not disabled, this MySQL database is installed in a Kubernetes pod as a part of Gitpod’s Helm chart.\n    The database uses a Kubernetes PersistentVolume. We do not recommend using this option for a production setting.\n\n-   Own MySQL database: Gitpod requires MySQL in version 5.7 or newer.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/database","loc":{"lines":{"from":1,"to":17}}}}],["1773",{"pageContent":"-   Own MySQL database: Gitpod requires MySQL in version 5.7 or newer.\n\nThis chart installs a MySQL database that gets Gitpod up and running but is not suitable for production (the data is lost on each restart of the DB pod). To connect to a proper MySQL installation:","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/database","loc":{"lines":{"from":17,"to":19}}}}],["1774",{"pageContent":"1.  Copy the DB init scripts into your local folder:\n    ```bash\n    mkdir -p gpinstall\n    echo exit | docker run -v $PWD/gpinstall:/workspace -u $(id -u) -i gcr.io/gitpod-io/self-hosted/installer:latest bash\n    mkdir -p ./db-init\n    cp gpinstall/gitpod/helm/gitpod/config/db/init/*.sql ./db-init/\n    rm -Rf gpinstall\n    ```\n1.  Initialize your MySQL database using the SQL files in `config/db/init/`. E.g. in a mysql session connected to your database server run:\n    ```sql\n    SET @gitpodDbPassword = IFNULL(@gitpodDbPassword, 'your-password-goes-here');\n    source db-init/00-testdb-user.sql;\n    source db-init/01-create-user.sql;\n    source db-init/02-create-and-init-sessions-db.sql;\n    source db-init/03-recreate-gitpod-db.sql;\n    ```\n1.  Merge the following into your `values.custom.yaml`:\n\n    ```yaml\n    db:\n        host: db\n        port: 3306\n        password: your-password-goes-here\n\n    # Disable built-in MySQL instance\n    mysql:\n        enabled: false","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/database","loc":{"lines":{"from":21,"to":47}}}}],["1775",{"pageContent":"```\n\n1.  Do a `helm upgrade --install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.10.0` to apply the changes.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/database","loc":{"lines":{"from":48,"to":50}}}}],["1776",{"pageContent":"---\nsection: self-hosted/helm-deprecated\ntitle: Configure the authentication used by your Gitpod Self-Hosted installation\n---\n\n# Configure the authentication used by your Gitpod Self-Hosted installation\n\n> ⚠️ **Deprecated Content**\n>\n> The content of this page assumes you are using Helm, which is now deprecated. Please use the [Installer](../../latest) instead.\n\nGitpod does not implement user authentication itself, but integrates with other auth provider using [OAuth2](https://oauth.net/2/).\nUsually your Git hosting solution (e.g. GitHub or GitLab) acts as the OAuth auth provider. This way we control access to Gitpod while at\nthe same time making sure every user has proper access to their Git repository.\n\nGitpod supports the following authentication providers:","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/authentication","loc":{"lines":{"from":1,"to":16}}}}],["1777",{"pageContent":"Gitpod supports the following authentication providers:\n\n-   github.com\n-   GitHub Enterprise in version 2.16.x and higher\n-   gitlab.com\n-   GitLab Community Edition in version 11.7.x and higher\n-   GitLab Enterprise Edition in version 11.7.x and higher\n-   Bitbucket — coming soon\n-   Custom Auth Provider – Inquiry TypeFox for a quote","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/authentication","loc":{"lines":{"from":16,"to":24}}}}],["1778",{"pageContent":"## GitHub\n\nTo authenticate your users with GitHub you need to create a [GitHub OAuth App](https://developer.github.com/apps/building-oauth-apps/creating-an-oauth-app/).\nFollow the guide linked above and:\n\n-   set \"Authentication callback URL\" to after replacing example.com with your domain name:\n\n    https://example.com/auth/github/callback\n\n-   copy the following values and configure them in `values.yaml`:\n    -   `clientId`\n    -   `clientSecret`","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/authentication","loc":{"lines":{"from":26,"to":37}}}}],["1779",{"pageContent":"## GitLab\n\nTo authenticate your users with GitLab you need to create an [GitLab OAuth application](https://docs.gitlab.com/ee/integration/oauth_provider.html).\nFollow the guide linked above and:\n\n-   set \"Authentication callback URL\" to:\n\n    https://<your-domain.com>/auth/<gitlab.com-OR-your-gitlab.com>/callback\n\n-   set \"Scopes\" to `api`, `read_user` and `read_repository`.\n-   copy the following values and configure them in `values.yaml`:\n    -   `clientId` is the \"Application ID\" from the GitLab OAuth application\n    -   `clientSecret` is the \"Secret\" from the GitLab OAuth application","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/authentication","loc":{"lines":{"from":39,"to":51}}}}],["1780",{"pageContent":"---\nsection: self-hosted/helm-deprecated\ntitle: Configure the Docker registry used by your Gitpod Self-Hosted installation\n---\n\n# Configure the Docker registry used by your Gitpod Self-Hosted installation\n\n> ⚠️ **Deprecated Content**\n>\n> The content of this page assumes you are using Helm, which is now deprecated. Please use the [Installer](../../latest) instead.\n\nGitpod builds Docker images during workspace startup. This enables custom Dockerfiles as part of your workspace config, but is also required for Gitpod itself to function.\nTo this end, Gitpod requires a container registry where it can push the images it builds.\n\nBy default Gitpod ships with a built-in Docker registry. If you operate your own Docker registry (which we'd recommend in a production setting) you can use that one. You have the following options:","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/docker-registry","loc":{"lines":{"from":1,"to":15}}}}],["1781",{"pageContent":"By default Gitpod ships with a built-in Docker registry. If you operate your own Docker registry (which we'd recommend in a production setting) you can use that one. You have the following options:\n\n-   Integrated Docker registry: If not disabled, this Docker registry is installed in a Kubernetes Pod as a dependency of Gitpod’s Helm chart.\n    The Docker registry requires a Kubernetes PersistentVolume. This registry is not recommended to be used for production.\n-   Own Docker registry: Gitpod can connect to your own Docker registry. Compared to its built-in counterpart this enables performance gains and access to otherwise private images.\n\nThis helm chart can either deploy its own registry (default but requires [HTTPS certs](./ingress)) or use an existing one.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/docker-registry","loc":{"lines":{"from":15,"to":21}}}}],["1782",{"pageContent":"## Configuration\n\nTo connect to an existing Docker registry, perform the following steps:\n\n1.  Merge the following into your `values.custom.yaml`:\n\n    ```yaml\n    components:\n        imageBuilder:\n            registryCerts: []\n            registry:\n                # name must not end with a \"/\"\n                name: your.registry.com/gitpod\n                secretName: image-builder-registry-secret\n                path: secrets/registry-auth.json\n\n        workspace:\n            pullSecret:\n                secretName: image-builder-registry-secret\n\n    docker-registry:\n        enabled: false","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/docker-registry","loc":{"lines":{"from":23,"to":44}}}}],["1783",{"pageContent":"```\n\n    Replace `your.registry.com/gitpod` with the domain your registry is available at.\n\n    > Note that Helm does _not_ merge hierarchies in a single file. Please make sure there is only ever _one_ `components` hierarchy or the last one overwrites all previous values.\n\n2.  Persist your registry authentication token to the `secrets/` folder.\n\n    ```bash\n    mkdir -p secrets\n    docker login your.registry.com/gitpod\n    cp ~/.docker/config.json secrets/registry-auth.json","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/docker-registry","loc":{"lines":{"from":45,"to":56}}}}],["1784",{"pageContent":"```\n\n    > This does not work for Google Cloud Registries because their login tokens are short-lived. See the [example](#example-google-cloud-registry-credentials) below on how to configure it.\n\n3.  Do a `helm upgrade --install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.10.0` to apply the changes.\n\nMake sure the resulting JSON file contains the credentials (there should be an `auths` section containing them as base64 encoded string).\n\nIf that's not the case you might have a credential store/helper set up (e.g. on macOS the _Securely store Docker logins in macOS keychain_ setting).","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/docker-registry","loc":{"lines":{"from":57,"to":65}}}}],["1785",{"pageContent":"### Example Google Cloud Registry Credentials\n\nPrerequisites:\n\n-   `gcloud` [installed](https://cloud.google.com/sdk/docs/quickstart) and [authenticated](https://cloud.google.com/sdk/gcloud/reference/auth/login)\n\nHow to use Google Cloud Registry as Docker registry for Gitpod:\n\n1.  Go to <a class=\"no-nowrap\" href=\"https://console.cloud.google.com/gcr/images/%3Cyour-project-id%3E?project=%3Cyour-project-id%3E\">https://console.cloud.google.com/gcr/images/\\<your-project-id>?project=\\<your-project-id></your-project-id></your-project-id></a> and hit \"Enable Registry API\" (if not already enabled).\n\n1.  Execute the following commands:\n\n    ```bash\n    export PROJECT_ID=\"<your-project-id>\"","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/docker-registry","loc":{"lines":{"from":67,"to":80}}}}],["1786",{"pageContent":"1.  Execute the following commands:\n\n    ```bash\n    export PROJECT_ID=\"<your-project-id>\"\n\n    gcloud iam service-accounts create gitpod-registry-full --project=$PROJECT_ID\n    gcloud projects add-iam-policy-binding $PROJECT_ID --member=\"serviceAccount:gitpod-registry-full@$PROJECT_ID.iam.gserviceaccount.com\" --role=roles/storage.admin\n    gcloud iam service-accounts keys create gitpod-registry-full-key.json --iam-account=gitpod-registry-full@$PROJECT_ID.iam.gserviceaccount.com\n\n    echo \"{\\\"auths\\\":{\\\"gcr.io\\\": {\\\"auth\\\": \\\"$(echo -n \"$(echo -n \"_json_key:\"; cat gitpod-registry-full-key.json)\" | base64 -w 0)\\\"}}}\" > secrets/registry-auth.json","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/docker-registry","loc":{"lines":{"from":80,"to":89}}}}],["1787",{"pageContent":"```\n\n    This should result in a `secrets/registry-auth.json` like this:\n\n    ```json\n    {\n    \t\"auths\": {\n    \t\t\"gcr.io\": {\n    \t\t\t\"auth\": \"<long-base64-string>\"\n    \t\t}\n    \t}\n    }\n    ```\n\n    > If you want to use the localized versions of gcr.io (eu.gcr.io, for instance) make sure to update the json file accordingly.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/docker-registry","loc":{"lines":{"from":90,"to":104}}}}],["1788",{"pageContent":"---\nsection: self-hosted/helm-deprecated\ntitle: Configuring Gitpod Self-Hosted\n---\n\n# Configuring Gitpod Self-Hosted\n\n> ⚠️ **Deprecated Content**\n>\n> The content of this page assumes you are using Helm, which is now deprecated. Please use the [Installer](../latest) instead.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration","loc":{"lines":{"from":1,"to":10}}}}],["1789",{"pageContent":"> ⚠️ **Deprecated Content**\n>\n> The content of this page assumes you are using Helm, which is now deprecated. Please use the [Installer](../latest) instead.\n\n-   [Configure the database used by your Gitpod Self-Hosted installation](./configuration/database)\n-   [Configure the Docker registry used by your Gitpod Self-Hosted installation](./configuration/docker-registry)\n-   [Configure the ingress to your Gitpod Self-Hosted installation](./configuration/ingress)\n-   [Configure the Kubernetes nodes in your Gitpod Self-Hosted installation](./configuration/nodes)\n-   [Configure the storage used by your Gitpod installation](./configuration/storage)\n-   [Configure the Gitpod Workspaces in your Gitpod Self-Hosted installation](./configuration/workspaces)\n-   [Configure the authentication used by your Gitpod Self-Hosted installation](./configuration/authentication)\n-   [Configure the VSX registry used by your Gitpod Self-Hosted installation](./configuration/vsx-registry)","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration","loc":{"lines":{"from":10,"to":21}}}}],["1790",{"pageContent":"---\nsection: self-hosted/helm-deprecated\ntitle: Configure the ingress to your Gitpod installation\n---\n\n# Configure the ingress to your Gitpod installation\n\n> ⚠️ **Deprecated Content**\n>\n> The content of this page assumes you are using Helm, which is now deprecated. Please use the [Installer](../../latest) instead.\n\nConfiguring ingress into your Gitpod installation requires two things:\n\n-   three DNS entries pointing at the IP of Gitpod's proxy service, and\n-   HTTPS certificates.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/ingress","loc":{"lines":{"from":1,"to":15}}}}],["1791",{"pageContent":"## 1. DNS Entries\n\nGitpod requires a domain resolvable by some nameserver (typically a public domain name, e.g. `your-domain.com`).\nAs Gitpod launches services and workspaces on additional subdomains it also needs two wildcard domains.\nFor example:\n\n    your-domain.com\n    *.your-domain.com\n    *.ws.your-domain.com\n\nInstalling Gitpod on a subdomain works as well. For example:\n\n    gitpod.your-domain.com\n    *.gitpod.your-domain.com\n    *.ws.gitpod.your-domain.com\n\n1.  Setup `A` records for all three (sub)domains. To learn your installation's IP run:\n\n    ```bash\n    kubectl describe svc proxy | grep -i ingress\n    ```\n\n1.  Merge the following into your `values.custom.yaml` file:\n    ```yaml\n    hostname: your-domain.com\n    components:\n        proxy:\n            loadBalancerIP: <your-IP>\n    ```\n    Specifying the `loadBalancerIP` make sure it stays the same across all redeploys.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/ingress","loc":{"lines":{"from":17,"to":46}}}}],["1792",{"pageContent":"## 2. HTTPS\n\nGitpod requires HTTPS certificates to function properly. We recommend using [Let's Encrypt](https://letsencrypt.org/) for retrieving certificates as we do for [gitpod.io](https://gitpod.io).\n\n> Important: The HTTPS certificates for your domain must include `your-domain.com`, `*.your-domain.com` and `*.ws.your-domain.com`. Beware that wildcard certificates are valid for one level only (i.e. `*.a.com` is not valid for `c.b.a.com`).\n\nTo configure the HTTPS certificates for your domain","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/ingress","loc":{"lines":{"from":48,"to":54}}}}],["1793",{"pageContent":"To configure the HTTPS certificates for your domain\n\n1.  [Generate certificates](#using-lets-encrypt-to-generate-https-certificates) and put your certificate files under `secrets/https-certificates/`:\n    ```text\n    secrets/https-certificates:\n      |- tls.crt\n      |- tls.key\n    ```\n2.  Generate the [dhparams.pem](https://security.stackexchange.com/questions/94390/whats-the-purpose-of-dh-parameters) file using:\n    ```bash\n    openssl dhparam -out secrets/https-certificates/dhparams.pem 2048\n    ```\n3.  Create a kubernetes secret using:\n    ```bash\n    kubectl create secret generic https-certificates --from-file=secrets/https-certificates\n    ```\n4.  Afterwards, do an `helm upgrade --install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.10.0` to apply the changes.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/ingress","loc":{"lines":{"from":54,"to":70}}}}],["1794",{"pageContent":"### Using Let's Encrypt to generate HTTPS certificates\n\nThe most accessible means of obtaining HTTPS certificates is using [Let's Encrypt](https://letsencrypt.org/). It provides free certificates to anybody who can prove ownership of a domain.\nLet's Encrypt offers a program called [certbot](https://certbot.eff.org/) to make acquiring certificates as straightforward as possible.\n\nAssuming you have [certbot](https://certbot.eff.org/) installed, the following script will generate and configure the required certificates (notice the placeholders):\n\n```bash\nexport DOMAIN=your-domain.com\nexport EMAIL=your@email.here\nexport WORKDIR=$PWD/letsencrypt\n\ncertbot certonly \\\n    --config-dir $WORKDIR/config \\\n    --work-dir $WORKDIR/work \\\n    --logs-dir $WORKDIR/logs \\\n    --manual \\\n    --preferred-challenges=dns \\\n    --email $EMAIL \\\n    --server https://acme-v02.api.letsencrypt.org/directory \\\n    --agree-tos \\\n    -d *.ws.$DOMAIN \\\n    -d *.$DOMAIN \\\n    -d $DOMAIN","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/ingress","loc":{"lines":{"from":72,"to":95}}}}],["1795",{"pageContent":"# move them into place\nmkdir -p secrets/https-certificates\ncp $WORKDIR/config/live/fullchain.pem secrets/https-certificates/tls.crt\ncp $WORKDIR/config/live/privkey.pem secrets/https-certificates/tls.key","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/ingress","loc":{"lines":{"from":97,"to":100}}}}],["1796",{"pageContent":"```\n\n> Note: Do not refrain if `certbot` fails on first execution: Depending on the challenge used you might have to restart it _once_.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/ingress","loc":{"lines":{"from":101,"to":103}}}}],["1797",{"pageContent":"---\nsection: self-hosted/helm-deprecated\ntitle: Configure the Kubernetes nodes in your Gitpod Self-Hosted installation\n---\n\n# Configure the Kubernetes nodes in your Gitpod Self-Hosted installation\n\n> ⚠️ **Deprecated Content**\n>\n> The content of this page assumes you are using Helm, which is now deprecated. Please use the [Installer](../../latest) instead.\n\nConfigure the nodes (computers or virtual machines) that Kubernetes runs Gitpod's workspace pods on.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/nodes","loc":{"lines":{"from":1,"to":12}}}}],["1798",{"pageContent":"## Assign workload to Nodes\n\nGitpod schedules two kinds of workloads: the Gitpod installation itself (which we refer to as _meta_) and the workspaces. Ideally both types of workloads run on separate nodes to make makes scaling easier.\nDepending on your cluster size that may not be feasible though. Either way, you need two node labels in your cluster:\n\n-   `gitpod.io/workload_meta=true` which marks the \"meta\" nodes and\n-   `gitpod.io/workload_workspace=true ` which marks the workspace nodes.\n\nIf you want to \"mix 'n match\", i.e., don't separate the nodes, you can simply run:\n\n```bash\nkubectl label node --all gitpod.io/workload_meta=true gitpod.io/workload_workspace=true\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/nodes","loc":{"lines":{"from":14,"to":26}}}}],["1799",{"pageContent":"## Node Filesystem Layout\n\nGitpod relies on the node's filesystem for making workspace content available, as well as for storing Theia. By default workspace data is placed in `/data` and Theia is copied to `/theia`. Depending on your node setup the root filesystem maybe **read-only** or **slow**.\nWe recommend you change those two paths so that they're located on an SSD or some other form of fast local storage.\n\nTo do this:","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/nodes","loc":{"lines":{"from":28,"to":33}}}}],["1800",{"pageContent":"To do this:\n\n1.  Merge the following into your `values.custom.yaml`:\n    ```yaml\n    components:\n        imageBuilder:\n            # The image builder deploys a Docker-in-Docker-daemon. By default that Docker daemon works in an empty-dir on the node.\n            # Depending on the types of node you operate that may cause image builds to fail or not perform well. We recommend you give the Docker daemon\n            # fast storage on the node, e.g. an SSD.\n            hostDindData: /mnt/disks/ssd0/docker\n        wsDaemon:\n            # Workspace data is stored on the nodes. This setting configures where on the node the workspace data lives.\n            # The faster this location is (in terms of IO) the faster workspaces will initialize.\n            hostWorkspaceArea: /mnt/disks/ssd0/workspaces\n    ```\n2.  Do a `helm upgrade --install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.10.0` to apply the changes.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/nodes","loc":{"lines":{"from":33,"to":48}}}}],["1801",{"pageContent":"> Note that Helm does _not_ merge hierarchies in a single file. Please make sure there is only ever _one_ `components` hierarchy or the last one overwrites all previous values.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/nodes","loc":{"lines":{"from":50,"to":50}}}}],["1802",{"pageContent":"---\nsection: self-hosted/helm-deprecated\ntitle: Configure the storage used by your Gitpod installation\n---\n\n# Configure the storage used by your Gitpod installation\n\n> ⚠️ **Deprecated Content**\n>\n> The content of this page assumes you are using Helm, which is now deprecated. Please use the [Installer](../../latest) instead.\n\nGitpod uses bucket storage to persist the contents of workspaces. Each workspace is tarballed into a single archive file which is then uploaded to a separate bucket.\n\nBy default Gitpod installs [MinIO](https://min.io/) as built-in bucket storage which uses a [persistent volume](https://kubernetes.io/docs/concepts/storage/persistent-volumes/) to store workspace content.\n\nFor more complex use case we recommend configuring more permanent means of persistence by either:","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/storage","loc":{"lines":{"from":1,"to":16}}}}],["1803",{"pageContent":"For more complex use case we recommend configuring more permanent means of persistence by either:\n\n-   Configure the contained MinIO-instance to serve as a [gateway](https://github.com/minio/minio/tree/master/docs/gateway) OR configure one of a [wide range of storage backends](https://kubernetes.io/docs/concepts/storage/persistent-volumes/#types-of-persistent-volumes).\n-   Bring your own storage bucket: Configure Gitpod to either connect to:\n    -   your own installation of MinIO\n    -   a Google Cloud Storage compatible storage solution","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/storage","loc":{"lines":{"from":16,"to":21}}}}],["1804",{"pageContent":"## a) Configure custom MinIO instance\n\n1.  Create a file `values.custom.yaml` with this content:\n\n    ```yaml\n    components:\n        contentService:\n            remoteStorage:\n                kind: minio\n                minio:\n                    endpoint: your-minio-installation.somewhere-else.com:8080\n                    accessKey: enterKeyHere\n                    secretKey: superSecretKeyGoesHere\n                    tmpdir: /tmp\n\n    # Disable built-in minio instance\n    minio:\n        enabled: false\n    ```\n\n2.  Redeploy Gitpod using `helm upgrade --install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.10.0` to apply the changes\n\n    > Note that Helm does _not_ merge hierarchies in a single file. Please make sure there is only ever _one_ `components` hierarchy or the last one overwrites all previous values.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/storage","loc":{"lines":{"from":23,"to":45}}}}],["1805",{"pageContent":"## b) Configure the built-in MinIO instance\n\n1.  Consult the chart's documentation at https://helm.min.io/\n2.  Create a file `values.custom.yaml` with this content:\n    ```yaml\n    minio:\n        accessKey: add-a-radom-access-key-here\n        secretKey: add-a-radom-secret-key-here\n        # insert custom config here\n    ```\n3.  Redeploy Gitpod using `helm upgrade --install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.10.0` to apply the changes","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/storage","loc":{"lines":{"from":47,"to":57}}}}],["1806",{"pageContent":"---\nsection: self-hosted/helm-deprecated\ntitle: Configure the VSX registry used by your Gitpod Self-Hosted installation\n---\n\n# Configure the VSX registry used by your Gitpod Self-Hosted installation\n\n> ⚠️ **Deprecated Content**\n>\n> The content of this page assumes you are using Helm, which is now deprecated. Please use the [Installer](../../latest) instead.\n\nGitpod uses the public [OpenVSX](https://open-vsx.org) registry as only products produced by Microsoft may access the Visual Studio Code Marketplace. This document explains how Gitpod Self-Hosted can be configured in air-gapped scenarios to connect to a private OpenVSX registry.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/vsx-registry","loc":{"lines":{"from":1,"to":12}}}}],["1807",{"pageContent":"## Configuration\n\nTo connect to private OpenVSX registry, perform the following steps:\n\n1.  Merge the following into your `values.custom.yaml`:\n\n    ```yaml\n    components:\n        openVsxProxy:\n            vsxRegistryUrl: open-vsx.org\n    ```\n\n    Replace `open-vsx.org` with the domain your registry is available at.\n\n2.  Do a `helm upgrade --install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.10.0` to apply the changes.\n\n## Additional resources\n\n-   https://github.com/gitpod-io/gitpod/blob/cfb528c5daf5115b666ec7404bfe25d9fc9598d6/chart/values.yaml#L137","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/vsx-registry","loc":{"lines":{"from":14,"to":32}}}}],["1808",{"pageContent":"---\nsection: self-hosted/helm-deprecated\ntitle: Configure the Gitpod Workspaces in your Gitpod Self-Hosted installation\n---\n\n# Workspaces\n\n> ⚠️ **Deprecated Content**\n>\n> The content of this page assumes you are using Helm, which is now deprecated. Please use the [Installer](../../latest) instead.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/workspaces","loc":{"lines":{"from":1,"to":10}}}}],["1809",{"pageContent":"## Sizing\n\nGitpod schedules workspaces as Kubernetes pods. Each workspace pod requests a certain amount of memory which directly affects how many workspaces are scheduled on a single node.\nIf you want to change the default sizing (~ 8GiB per workspace) you should\n\n1.  Merge the following into your `values.custom.yaml`:","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/workspaces","loc":{"lines":{"from":12,"to":17}}}}],["1810",{"pageContent":"```yaml\n    # workspaceSizing configures the resources available to each workspace. These settings directly impact how\n    # desenly we pack workspaces on nodes where workspacesPerNode = memoryAvailable(node) / memoryRequest.\n    #\n    # Beware: if a workspace exceeds its memoryLimit, some of its processes may be terminated (OOM-kill) which\n    # results in a broken user experience.\n    workspaceSizing:\n        requests:\n            cpu: '1m'\n            memory: '2.25Gi'\n            storage: '5Gi'\n        limits:\n            cpu: '5'\n            memory: '12Gi'\n        dynamic:\n            # Gitpod supports dynamic CPU limiting. We express those limits in \"buckets of CPU time\" (jiffies where 1 jiffie is 1% of a vCPU).\n            # Each bucket has a limit (i.e. max CPU rate in jiffies/sec, 100 jiffies/sec = 1 vCPU).\n            #\n            # For example:\n            #   # three minutes of 5 CPUs: 5 [numCPU] * 100 [jiffies/sec] * (3 * 60) [seconds] = 90000","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/workspaces","loc":{"lines":{"from":19,"to":38}}}}],["1811",{"pageContent":"#\n            # For example:\n            #   # three minutes of 5 CPUs: 5 [numCPU] * 100 [jiffies/sec] * (3 * 60) [seconds] = 90000\n            #   - budget: 90000\n            #     limit: 500\n            #   # five minutes  of 4 CPUs: 4 [numCPU] * 100 [jiffies/sec] * (5 * 60) [seconds] = 120000\n            #   - budget: 120000\n            #     limit: 400\n            #   # remainder of 2 CPUs where a user has to stay below sustained use of 1.8 CPUs for 5 minutes:\n            #   #                       1.8 [numCPU] * 100 [jiffies/sec] * (5 * 60) [seconds] = 54000\n            #   - budget: 54000\n            #     limit: 200\n            #\n            # if there are no buckets configured, the dynamic CPU limiting is disabled.\n            cpu:\n                buckets: []\n                samplingPeriod: '10s'\n                controlPeriod: '15m'","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/workspaces","loc":{"lines":{"from":38,"to":55}}}}],["1812",{"pageContent":"```\n\n2.  Do a `helm upgrade --install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.10.0` to apply the changes.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/configuration/workspaces","loc":{"lines":{"from":56,"to":58}}}}],["1813",{"pageContent":"---\nsection: self-hosted/helm-deprecated\ntitle: Installing Gitpod Self-Hosted\n---\n\n# Install Gitpod Self-Hosted\n\n> ⚠️ **Deprecated Content**\n>\n> The content of this page assumes you are using Helm, which is now deprecated. Please use the [Installer](../latest) instead.\n\n-   [Install Gitpod Self-Hosted on Kubernetes](./installation/on-kubernetes)","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/installation","loc":{"lines":{"from":1,"to":12}}}}],["1814",{"pageContent":"---\nsection: self-hosted/helm-deprecated\ntitle: Install Gitpod Self-Hosted on Kubernetes\n---\n\n# Install Gitpod Self-Hosted on Kubernetes\n\n> ⚠️ **Deprecated Content**\n>\n> The content of this page assumes you are using Helm, which is now deprecated. Please use the [Installer](../../latest) instead.\n\nThis section describes how to install Gitpod on any Kubernetes cluster using [Helm](https://helm.sh). This is the most flexible and generic way of installing Gitpod. The chart for stable releases resides in Helm repository [charts.gitpod.io](https://charts.gitpod.io), charts for branch-builds can be found [here](#install-branch-build), and the source of the charts is in our [public git repository](https://github.com/gitpod-io/gitpod/blob/main/chart/).","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/installation/on-kubernetes","loc":{"lines":{"from":1,"to":12}}}}],["1815",{"pageContent":"For some platforms we offer [Terraform](https://www.terraform.io/) scripts that ease the infrastructure setup. Once the script has created the necessary infrastructure it will output a `values.terraform.yaml` that contains infrastructure-specific configuration for the `helm` deployment.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/installation/on-kubernetes","loc":{"lines":{"from":14,"to":14}}}}],["1816",{"pageContent":"## Prerequisites\n\nSee [Installation requirements for Gitpod Self-Hosted](../requirements).","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/installation/on-kubernetes","loc":{"lines":{"from":16,"to":18}}}}],["1817",{"pageContent":"## Installation\n\nTo install Gitpod in your Kubernetes cluster, follow these steps:\n\n1. Create a file `values.custom.yaml` with the following content (please replace the keys/secrets, for instance with `openssl rand -hex 20`):\n\n    ```yaml\n    docker-registry:\n        authentication:\n            username: gitpod\n            password: your-registry-password\n    rabbitmq:\n        auth:\n            username: your-rabbitmq-user\n            password: your-secret-rabbitmq-password\n    minio:\n        accessKey: your-random-access-key\n        secretKey: your-random-secret-key\n    ```\n\n    You should replace the keys with 2 different random strings unique for your installation.\n\n1. Run the following commands in your local terminal:\n\n    ```bash\n    helm repo add gitpod.io https://charts.gitpod.io\n\n    helm repo update\n\n    helm install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.10.0","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/installation/on-kubernetes","loc":{"lines":{"from":20,"to":49}}}}],["1818",{"pageContent":"```\n\n1. Configure [domain and https](../configuration/ingress).\n\n1. Run `kubectl get pods` and verify that all pods are in state `RUNNING`. If some are not, please see the [Troubleshooting Guide](../troubleshooting).\n\n1. Go to `https://<your-domain.com>` and follow the steps to complete the installation.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/installation/on-kubernetes","loc":{"lines":{"from":50,"to":56}}}}],["1819",{"pageContent":"## Upgrade\n\n1.  Check the [Upgrade Guide](../updating) and follow the steps outlined there.\n\n1.  Run the update\n\n    ```bash\n    helm install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.10.0\n    ```\n\n1.  Run `kubectl get pods` and verify that all pods are in state `RUNNING`. If some are not, please see the [Troubleshooting Guide](../troubleshooting).\n\n## Recommended Configuration\n\nBy default, the Helm chart installs a working Gitpod installation in a lot of scenarios. Yet, there are certain things you might want to review when installing Gitpod for long term use and/or a bigger audience:\n\n-   [**Database**](../configuration/database): Configure where Gitpod stores all internal runtime data.\n-   [**Storage**](../configuration/storage): Configure where Gitpod persists workspace content.\n-   [**Docker Registry**](../configuration/docker-registry): Configure where Gitpod stores workspace images.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/installation/on-kubernetes","loc":{"lines":{"from":58,"to":76}}}}],["1820",{"pageContent":"## Customization\n\nFurther customizations:\n\n-   [**Kubernetes Nodes**](../configuration/nodes): Configure file system layout and the workspace's node associativity.\n-   [**Workspaces**](../configuration/workspaces): Configure workspace sizing.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/installation/on-kubernetes","loc":{"lines":{"from":78,"to":83}}}}],["1821",{"pageContent":"---\nsection: self-hosted/helm-deprecated\ntitle: Installation requirements for Gitpod Self-Hosted\n---\n\n# Installation requirements for Gitpod Self-Hosted\n\n> ⚠️ **Deprecated Content**\n>\n> The content of this page assumes you are using Helm, which is now deprecated. Please use the [Installer](../latest) instead.\n\nThis page details the software and hardware requirements for installing Gitpod Self-Hosted on your own infrastructure.\n\n## Supported Kubernetes distributions\n\nGitpod Self-Hosted runs well on:\n\n-   Amazon Elastic Kubernetes Service\n-   Google Kubernetes Engine\n-   K3s\n-   Microsoft Azure Kubernetes Service","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/requirements","loc":{"lines":{"from":1,"to":21}}}}],["1822",{"pageContent":"## Supported Kubernetes distributions\n\nGitpod Self-Hosted runs well on:\n\n-   Amazon Elastic Kubernetes Service\n-   Google Kubernetes Engine\n-   K3s\n-   Microsoft Azure Kubernetes Service\n\n## Incompatible Kubernetes distributions\n\nThese platforms do not currently work with Gitpod Self-Hosted but we would like to support them in the future. Gitpod is an open-source project, maybe you could contribute the required changes to help get them working sooner?\n\n-   [Red Hat® OpenShift®](https://github.com/gitpod-io/gitpod/issues/5409)\n-   [Rancher Kubernetes Engine (RKE)](https://github.com/gitpod-io/gitpod/issues/5410)\n\nIf you are considering purchasing a commercial license for Gitpod Self-Hosted and need one of the above platforms then please [contact us](/contact/sales) to start discussions about making support for them happen sooner.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/requirements","loc":{"lines":{"from":21,"to":37}}}}],["1823",{"pageContent":"## Minimum Kubernetes requirements\n\nWe strongly recommend deploying a dedicated kubernetes cluster just for Gitpod Self-Hosted.\n\nHere are the minimum requirements:\n\n-   Either Ubuntu 18.04 with ≥ v5.4 kernel or Ubuntu 20.04 with ≥ v5.4 kernel.\n-   Calico for the networking overlay and network policy.\n-   Kubernetes ≥ 1.18.\n-   containerd ≥ 1.2.\n-   helm ≥ 3.6.\n\n## Minimum compute resources\n\nIf you want to run Gitpod Self-Hosted at home we recommend at minimum 2vCPU's and 8GB of memory. For a better experience we recommend at least 4vCPUs and 16GB RAM for workspace nodes. For cost efficiency, we recommend enabling cluster-autoscaling when running on a commercial cloud provider.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/requirements","loc":{"lines":{"from":39,"to":53}}}}],["1824",{"pageContent":"## Runtime requirements\n\n### DNS\n\nGitpod requires a domain (or sub-domain on a domain) that is resolvable by your name servers. As Gitpod launches services and workspaces on additional subdomains it also needs two wildcard domains.\n\nFor example:\n\n```\nyour-domain.com\n*.your-domain.com\n*.ws.your-domain.com\n```\n\nor\n\n```\ngitpod.your-domain.com\n*.gitpod.your-domain.com\n*.ws.gitpod.your-domain.com\n```\n\n### Ingress\n\n-   Gitpod is designed to serve traffic directly to your local network or internet.\n-   Wrapping Gitpod Self-Hosted behind proxies such as nginx or configurations where URLs are rewritten are not supported.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/requirements","loc":{"lines":{"from":55,"to":80}}}}],["1825",{"pageContent":"### SSL\n\n-   Gitpod requires trusted HTTPS certificates. While there is no hard requirement on any certificate authority, we recommend using an [ACME certificate](https://caddyserver.com/docs/automatic-https#acme-challenges) issuer (such as [ZeroSSL](https://zerossl.com) or [LetsEncrypt](https://letsencrypt.org)) to automatically renew and install certificates as we do for [gitpod.io](https://gitpod.io).\n-   Installation of Gitpod with SSL certificates signed with your own CA are not currently supported. This scenario is desired and we would welcome help getting [this community pull-request](https://github.com/gitpod-io/gitpod/pull/2984) merged.\n-   The HTTPS certificates for your domain must include `your-domain.com`, `*.your-domain.com` and `*.ws.your-domain.com`. Beware that wildcard certificates are valid for one level only (i.e. `*.a.com` is not valid for `c.b.a.com`)\n\n### Storage\n\n-   Either Google Cloud Storage or Amazon S3 or MinIO Storage.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/requirements","loc":{"lines":{"from":82,"to":90}}}}],["1826",{"pageContent":"### Storage\n\n-   Either Google Cloud Storage or Amazon S3 or MinIO Storage.\n\n### Database\n\n-   Gitpod uses a MySQL database to store user data.\n-   By default Gitpod ships with a MySQL database built-in and data is stored using a Kubernetes PersistentVolume.\n-   For production settings, we recommend operating your own MySQL database (version v5.7 or newer).","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/requirements","loc":{"lines":{"from":90,"to":98}}}}],["1827",{"pageContent":"## Supported web browsers\n\nGitpod Self-Hosted works with the following browsers:\n\n-   Mozilla Firefox\n-   Google Chrome\n-   Apple Safari (iPad OS and Desktop)\n-   Microsoft Edge (Chromium)","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/requirements","loc":{"lines":{"from":100,"to":107}}}}],["1828",{"pageContent":"---\nsection: self-hosted/helm-deprecated\ntitle: Troubleshooting Gitpod Self-Hosted\n---\n\n# Troubleshooting Gitpod Self-Hosted\n\n> ⚠️ **Deprecated Content**\n>\n> The content of this page assumes you are using Helm, which is now deprecated. Please use the [Installer](../latest) instead.\n\nThis section should solve all errors that might come up during installation of Gitpod.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/troubleshooting","loc":{"lines":{"from":1,"to":12}}}}],["1829",{"pageContent":"## 1. `ws-daemon` is stuck in `Init: 0/1`\n\n`kubectl describe pod ws-daemon-...` gives:\n`MountVolume.SetUp failed for volume \"node-fs1\" : hostPath type check failed: /run/containerd/io.containerd.runtime.v1.linux/k8s.io is not a directory`","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/troubleshooting","loc":{"lines":{"from":14,"to":17}}}}],["1830",{"pageContent":"### Solution\n\n1.  `ssh` onto the node, `mount | grep rootfs` and find the directory where your containers are stored. Common paths are:\n\n    -   `/run/containerd/io.containerd.runtime.v1.linux/k8s.io`\n    -   `/run/containerd/io.containerd.runtime.v1.linux/moby`\n    -   `/run/containerd/io.containerd.runtime.v2.task/k8s.io`\n\n2.  _Merge_ the following into your `values.custom.yaml`:\n\n    ```\n    components:\n      wsDaemon:\n        containerRuntime:\n          nodeRoots:\n          - <your path here>\n    ```\n\n3.  Do an `helm upgrade --install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.10.0` to apply the changes.\n\n> Example: For `k3s` a common configuration looks like this:\n\n```yaml\ncomponents:\n    wsDaemon:\n        containerRuntime:\n            containerd:\n                socket: /var/run/k3s/containerd/containerd.sock\n            nodeRoots:\n                - /var/run/k3s/containerd/io.containerd.runtime.v2.task/k8s.io\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/troubleshooting","loc":{"lines":{"from":19,"to":49}}}}],["1831",{"pageContent":"## 2. `helm install` fails with: \"minio access key is required, please add a value to your values.yaml\"\n\nSince `0.7.0` minio requires custom credentials to be configured.\n\n### Solution\n\n1.  Follow the [Upgrade Guide](./updating).\n\n## 3. After upgrade, the `minio` Pod is stuck in `ContainerCreating`\n\nThis is caused by a bug in the minio Helm chart which blocks itself on updates.\n\n### Solution\n\n1.  `kubectl scale deployments/minio --replicas=0`\n\n1.  `kubectl scale deployments/minio --replicas=1`\n\n1.  Wait until the pod comes up.\n\n## 3. `agent-smith` daemonset fails in deployment\n\nIn the v0.10.0 release `agent-smith` is [incorrectly enabled](https://github.com/gitpod-io/gitpod/issues/4885#issuecomment-884205801) in Gitpod Self-Hosted.\n\n### Solution\n\nAdd the following to your `values.yaml` file to disable agent-smith:\n\n```yaml\ncomponents:\n    agentSmith:\n        disabled: true\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/troubleshooting","loc":{"lines":{"from":51,"to":83}}}}],["1832",{"pageContent":"## 4. Workspaces stopping once container image downloaded\n\nThis may be caused by your host operating system not supporting shiftfs. Check the `ws-daemon` logs for an error message like `\"error\",\"message\":\"cannot mount shiftfs mark\"` to confirm.\n\nFurther proof can be found by checking if the shiftfs kernel module is present on your host operating system:\n\n```shell\nfind /lib/modules/ -name '*shiftfs*'\n```\n\nIf this returns nothing, shiftfs is not supported by your instance and you will need to use fuse instead.\n\n### Solution\n\nAdd the following to your `values.yaml` file to use fuse-overlayfs:\n\n```yaml\ncomponents:\n    wsDaemon:\n        userNamespaces:\n            fsShift: fuse\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/troubleshooting","loc":{"lines":{"from":85,"to":106}}}}],["1833",{"pageContent":"## 5. Create workspace results in `7 PERMISSION_DENIED: cannot resolve workspace image` error\n\n<!-- svelte-ignore a11y-img-redundant-alt -->\n\n![Request createWorkspace failed with message: 7 PERMISSION_DENIED: cannot resolve workspace image: not authorized Unknown Error](/images/docs/self-hosted/troubleshooting/registry-unauthorized.jpeg)\n\nIf you are using the internal Docker registry, you will need to specify the username and password so your Gitpod instance can access it.\n\n### Solution\n\nAdd the following to your `values.yaml` file to authorize the Docker registry:\n\n```yaml\ncomponents:\n    docker-registry:\n        authentication:\n            username: gitpod\n            password: gitpod\n```\n\n> Replace these with your own values.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/troubleshooting","loc":{"lines":{"from":108,"to":128}}}}],["1834",{"pageContent":"---\nsection: self-hosted/helm-deprecated\ntitle: Updating Gitpod Self-Hosted\n---\n\n# Updating Gitpod Self-Hosted\n\n> ⚠️ **Deprecated Content**\n>\n> The content of this page assumes you are using Helm, which is now deprecated. Please use the [Installer](../latest) instead.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/updating","loc":{"lines":{"from":1,"to":10}}}}],["1835",{"pageContent":"## Upgrading Gitpod from v0.9.0 to v0.10.0\n\n### default registry now requires password and username\n\nGitpod by default ships with an in-cluster docker-registry. If you use that one (instead of an external one), add the following to your `values.custom.yaml`:\n\n```yaml\ndocker-registry:\n    authentication:\n        username: gitpod\n        password: your-registry-password\n```\n\nAfterwards, a full redeploy is required (your DB and workspace state is kept in a PV):\n\n```bash\nhelm del gitpod\nhelm upgrade --install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.10.0\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/updating","loc":{"lines":{"from":12,"to":30}}}}],["1836",{"pageContent":"### Certificate file names changed\n\nThe file names we expect in a secret has changed. Before we'd require the default names Let's Encrypt would use. Since 0.10.0 we require a `tls.key` and a `tls.crt`.\nTo adjust this in your existing installation:\n\n1. execute the following inside your config folder:\n\n```\nmv secrets/https-certificates/fullchain.pem secrets/https-certificates/tls.crt\nmv secrets/https-certificates/privkey.pem secrets/https-certificates/tls.key\n```\n\n2. Upgrade your installation again:\n\n```bash\nhelm install -f values.custom.yaml gitpod gitpod.io/gitpod --version=0.10.0\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/updating","loc":{"lines":{"from":32,"to":48}}}}],["1837",{"pageContent":"## Upgrading Gitpod from v0.8.0 to v0.10.0\n\nWith version 0.10.0 there is one change that requires user action regarding the RabbitMQ messagebus:\n\n### RabbitMQ now requires explicitly set password and username\n\nGitpod uses a RabbitMQ installation for distributing messages between components. So far that has been using default credentials if not configured otherwise. With v0.10.0 this is now explicitly required.\nTo do so add the following to your `values.custom.yaml`:\n\n```\nrabbitmq:\n  auth:\n    username: your-rabbitmq-user\n    password: your-secret-rabbitmq-password\n```\n\nIf this is not present, `helm` will fail with the following message:\n\n> RabbitMQ username is required, please add a value to your values.yaml or with the helm flag --set rabbitmq.auth.username=xxxxx","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/updating","loc":{"lines":{"from":50,"to":68}}}}],["1838",{"pageContent":"## Upgrading Gitpod from v0.6.0 to v0.7.0\n\nWith version 0.7.0 there are two major changes that require a user action. Both relate to the remote storage.\n\n### Built-in MinIO is now accessible at minio.your-gitpod-domain.com\n\nWhen you install Gitpod on your own Kubernetes installation, it brings a built-in MinIO object storage (unless disabled). As of v0.7.0, the built-in MinIO instance is accessible at https://minio.your-gitpod-domain.com. That's the reason that (for security reasons) we do not set a default access and secret key for the built-in MinIO installation anymore. That means, you need to add your own random keys in your values files like this:\n\n```\nminio:\n  accessKey: add-a-radom-access-key-here\n  secretKey: add-a-radom-secret-key-here\n```\n\nIf you don't do this, `helm` will fail with the following message:\n\n> minio access key is required, please add a value to your values.yaml","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/updating","loc":{"lines":{"from":70,"to":86}}}}],["1839",{"pageContent":"### Remote storage config has been moved to a new component\n\nIf you have a custom remote storage config (e.g. you use your own MinIO instance or the Google Cloud Storage), you need to move the config from the component `wsDaemon` to the new component `contentService`. See the [Storage Guide](./configuration/storage) for an example.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/helm-deprecated/updating","loc":{"lines":{"from":88,"to":90}}}}],["1840",{"pageContent":"---\nsection: self-hosted/latest\nsubsection: installation-guides\ntitle: Install Gitpod in an Air-Gapped Network\n---\n\n# Install Gitpod in an Air Gapped Network\n\n> ⚠️ **Gitpod Self-hosted is [no longer supported](/blog/introducing-gitpod-dedicated)**\n>\n> The last update of Gitpod Self-hosted product was [November 2022](/changelog/november-self-hosted-release). Users can still request our [free community license](/community-license) however there will be no support or updates to the product. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n\n> **Note:** Installing Gitpod in an air gapped network is a feature limited to our [Professional Plan](https://www.gitpod.io/self-hosted). We support air-gap mode for paying customers only.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/air-gap","loc":{"lines":{"from":1,"to":13}}}}],["1841",{"pageContent":"> **Note:** Installing Gitpod in an air gapped network is a feature limited to our [Professional Plan](https://www.gitpod.io/self-hosted). We support air-gap mode for paying customers only.\n\nIn this guide, we expect you to have a cluster up and running that [meets the requirements](../requirements) and have the [required components](../requirements) installed and configured (at least cert-manager is needed).","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/air-gap","loc":{"lines":{"from":13,"to":15}}}}],["1842",{"pageContent":"## Preparation\n\nBefore you can start with the installation, you need to prepare the following:\n\n1. You need to have a Docker registry available in your network where you can push images to and where your Kubernetes cluster can pull images from.\n1. You need to download installation bundles.\n\nWe provide you with a URL and password to a download portal. There you will find the following bundles that you need to download:\n\n1. KOTS CLI package `kots_linux_amd64.tar.gz` <br/> (provides you with the `kubectl kots` CLI binary)\n2. KOTS Airgap Bundle `kotsadm.tar.gz` <br/> (provides you with the Docker images you need for the Gitpod KOTS installer)\n3. Gitpod Airgap Bundle `gitpod-<version>.airgap` <br/> (provides you with the Gitpod Docker images)\n\n![kots-airgap-download](/images/docs/self-hosted/kots-airgap-download.png)\n\nCopy the KOTS CLI package as well as the KOTS Airgap Bundle to the machine where you are able to run `kubectl`.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/air-gap","loc":{"lines":{"from":17,"to":32}}}}],["1843",{"pageContent":"## Install KOTS CLI\n\nUnpack the KOTS CLI package `kots_linux_amd64.tar.gz`, rename the binary `kots` to `kubectl-kots`, and copy it to `/usr/local/bin/` (or to any other folder that is in your `PATH`).\n\nNow, you should be able to run the following command:\n\n```shell\n$ kubectl kots help\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/air-gap","loc":{"lines":{"from":34,"to":42}}}}],["1844",{"pageContent":"## Install Gitpod\n\nAt first, you need to push the images that are needed for the installation admin console to your registry.\n\n```bash\n$ kubectl kots admin-console push-images \\\n    ./kotsadm.tar.gz \\\n    <registry> \\\n    --registry-username <username> \\\n    --registry-password <password>","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/air-gap","loc":{"lines":{"from":44,"to":53}}}}],["1845",{"pageContent":"```\n\nReplace the following placeholder:\n\n| Placeholder  |                                                                                                           |\n| ------------ | --------------------------------------------------------------------------------------------------------- |\n| `<registry>` | The registry URI in the form `<host>:<port>/<namespace>`,<br/> e.g. `my-registry.example.com:443/gitpod`. |\n| `<username>` | The username for the registry that has write access (is allowed to push).                                 |\n| `<password>` | The password to the username.                                                                             |\n\nNext, you can start installing Gitpod like this:\n\n```bash\n$ kubectl kots install gitpod \\\n    --kotsadm-namespace <namespace> \\\n    --kotsadm-registry <registry> \\\n    --registry-username <username> \\\n    --registry-password <password>","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/air-gap","loc":{"lines":{"from":54,"to":71}}}}],["1846",{"pageContent":"```\n\nReplace the following placeholder:\n\n| Placeholder   |                                                                          |\n| ------------- | ------------------------------------------------------------------------ |\n| `<namespace>` | Namespace that is used in the registry URI above.                        |\n| `<registry>`  | The hostname of your registry, e.g. `my-registry.example.com:443`.       |\n| `<username>`  | The username for the registry that has read access (is allowed to pull). |\n| `<password>`  | The password to the username.                                            |\n\nYou will be asked for the namespace you want to install Gitpod to as well as a password for the admin console. After some time, you will see the following output:\n\n```\n  • Press Ctrl+C to exit\n  • Go to http://localhost:8800 to access the Admin Console","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/air-gap","loc":{"lines":{"from":72,"to":87}}}}],["1847",{"pageContent":"```\n\nOpen your favorite browser and go to `http://localhost:8800` (port `8800` is opened on your node on `localhost` only--you may want to forward the port to your workstation in order to access the admin console).\n\nNow, you will be asked for the password and the license. On the next page, you have to set:\n\n-   the hostname of your registry (e.g. `my-registry.example.com:443`),\n-   username and password (read access), as well as\n-   the namespace that you used in the registry URI above (e.g. `gitpod`).\n\nClick on “choose a bundle to upload” and select your `gitpod-<version>.airgap` file on your local computer. Then hit the “Upload airgap bundle” button.\n\n![kots-airgap-upload](/images/docs/self-hosted/kots-airgap-upload.png)\n\nUploading this file and pushing the images to your registry will take a while (could take several hours depending on your internet connection). Grab a cup of coffee or tea and wait for it to be ready. ☕","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/air-gap","loc":{"lines":{"from":88,"to":102}}}}],["1848",{"pageContent":"Once the images has been pushed to your registry, you can continue to install Gitpod as described in the [installation guide](/docs/configure/self-hosted/latest/installing-gitpod). Happy coding!","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/air-gap","loc":{"lines":{"from":104,"to":104}}}}],["1849",{"pageContent":"---\nsection: self-hosted/latest\nsubsection: installation-guides\ntitle: Component Customization\n---\n\n# Component Customization\n\n> ⚠️ **Gitpod Self-hosted is [no longer supported](/blog/introducing-gitpod-dedicated)**\n>\n> The last update of Gitpod Self-hosted product was [November 2022](/changelog/november-self-hosted-release). Users can still request our [free community license](/community-license) however there will be no support or updates to the product. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n\nIn this guide, we expect you to have a cluster up and running that [meets the requirements](../requirements) and has the [required components](../requirements) installed and configured (at least cert-manager is needed).\n\nThis guide assumes that you are using our default installation method from our [installation guide](/docs/configure/self-hosted/latest/installing-gitpod).","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/components","loc":{"lines":{"from":1,"to":15}}}}],["1850",{"pageContent":"## Rationale\n\nGitpod self-hosted is built to work by default, but it also has to be incredibly flexible. Our installation defaults will work for the vast majority of users, but there will be occassions when it does not. In order to add more flexibility, you have the ability to customise some of Gitpod's components.\n\nIn your KOTS dashboard, you will need to enable advanced options. This will enable the \"Components\" section.\n\n![kots-advanced](/images/docs/self-hosted/kots-advanced.png)","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/components","loc":{"lines":{"from":17,"to":23}}}}],["1851",{"pageContent":"### Proxy service type\n\nAll web traffic enters the application through the `Proxy` component. By default, this is a `LoadBalancer` type which will expose the application through the cloud provider's load balancer.\n\nUnder certain circumstances, this may be undesirable. Under the \"Advanced\" section, you may select a different service type - all [Kubernetes service types](https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types) are supported, except `ExternalName`. If you are using anything other than `LoadBalancer`, you are responsible for configuring your network to route traffic through to the `proxy` service.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/components","loc":{"lines":{"from":25,"to":29}}}}],["1852",{"pageContent":"---\nsection: self-hosted/latest\ntitle: Applying custom annotations, labels and environment variables\n---\n\n# Applying custom annotations, labels and environment variables\n\n> ⚠️ **Gitpod Self-hosted is [no longer supported](/blog/introducing-gitpod-dedicated)**\n>\n> The last update of Gitpod Self-hosted product was [November 2022](/changelog/november-self-hosted-release). Users can still request our [free community license](/community-license) however there will be no support or updates to the product. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n\nIn this guide, we expect you to have a cluster up and running that [meets the requirements](../requirements) and has the [required components](../requirements) installed and configured (at least cert-manager is needed).\n\nThis guide assumes that you are using our default installation method from our [installation guide](/docs/configure/self-hosted/latest/installing-gitpod).","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/customization","loc":{"lines":{"from":1,"to":14}}}}],["1853",{"pageContent":"## Rationale\n\nThere are times when it is necessary to add custom annotations, environment variables and labels to your installation in order to add it to your environment. For example, one may need to support specific monitoring and observability software or want to target a specific load balancer type.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/customization","loc":{"lines":{"from":16,"to":18}}}}],["1854",{"pageContent":"## Configuration\n\nBefore you start, you will need to create a YAML file that is subsequently used to describe your customizations. The structure is based upon the standard Kubernetes resource definition.\n\nOnce created, this file can be uploaded to the Installation Admin UI during installation under the advanced features section (bottom).\n\n![kots-advanced-customization](/images/docs/self-hosted/kots-advanced-customization.png)","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/customization","loc":{"lines":{"from":20,"to":26}}}}],["1855",{"pageContent":"### Annotations and labels\n\nFor these to be applied to a resource, these must match the `apiVersion`, `kind` and `metadata.name` properties of the target resource. These accept any value that is valid as per the Kubernetes specifications and also an `*` as a wildcard.\n\nAny properties in `metadata.annotations` and `metadata.labels` are then applied to the matching resource(s). These are key/value maps, where both key and value are strings.\n\n**IMPORTANT** You cannot directly customize the properties on a `Pod`. Instead, these will inherit the annotation/label customization from its parent (`Deployment`, `DaemonSet`, `StatefulSet`, `Job` etc).\n\n### Environment variables\n\nFor environment variables, these must match `metadata.name`. `apiVersion` and `kind` are ignored as these are only implemented on resources with containers.\n\nAny properties in `spec.env` are then applied. These should have a `name` and `value` as per the Kubernetes specification.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/customization","loc":{"lines":{"from":28,"to":40}}}}],["1856",{"pageContent":"## Example Configuration\n\n```yaml\ncustomization:\n    - apiVersion: '*'\n      kind: '*'\n      metadata:\n          name: '*'\n          annotations:\n              appliedToAll: value\n              hello: world\n          labels:\n              appliedToAll: value\n              hello: world\n    - apiVersion: 'apps/v1'\n      kind: 'Deployment'\n      metadata:\n          name: 'ws-manager'\n          annotations:\n              hello: ws-manager\n          labels:\n              hello: ws-manager\n      spec:\n          env:\n              - name: HELLO\n                value: world","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/customization","loc":{"lines":{"from":42,"to":67}}}}],["1857",{"pageContent":"```\n\nThis example would generate the following spec (these are simplified for readability reasons):","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/customization","loc":{"lines":{"from":68,"to":70}}}}],["1858",{"pageContent":"```yaml\n---\n# apps/v1/DaemonSet ws-daemon\napiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n    labels:\n        app: gitpod # system-value\n        component: ws-daemon # system-value\n        appliedToAll: value\n        hello: world\n    annotations:\n        appliedToAll: value\n        hello: world\n    name: ws-daemon\n---\n# apps/v1/Deployment ws-manager\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n    labels:\n        app: gitpod\n        component: ws-manager\n        appliedToAll: value\n        hello: ws-manager\n    annotations:\n        appliedToAll: value\n        hello: ws-manager\n    name: ws-manager\nspec:\n    template:\n        # The custom annotations/labels are inherited from the Deployment spec\n        metadata:\n            annotations:\n                appliedToAll: value\n                gitpod.io/checksum_config: xxxx\n                hello: ws-manager\n            labels:\n                app: gitpod\n                component: ws-manager\n                appliedToAll: value","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/customization","loc":{"lines":{"from":72,"to":112}}}}],["1859",{"pageContent":"hello: ws-manager\n            labels:\n                app: gitpod\n                component: ws-manager\n                appliedToAll: value\n                hello: ws-manager\n            name: ws-manager\n        spec:\n            containers:\n                - env:\n                      - name: HELLO\n                        value: world","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/customization","loc":{"lines":{"from":112,"to":123}}}}],["1860",{"pageContent":"```\n\nIn the event of multiple matches, the final matching customization is applied. Therefore, it is a good idea to structure your customization from least to most specific.\n\n> **Important:** System-generated values will never be overridden.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/customization","loc":{"lines":{"from":124,"to":128}}}}],["1861",{"pageContent":"## AWS Proxy Service Example\n\nThis is an example configuration for working with [AWS Load Balancer Controllers](https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.4/) of the [Network Load Balancer](https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.4/guide/service/nlb/) variety, when deployed in [AWS EKS](https://aws.amazon.com/eks/). This example creates a load balancer with a public IP, references two subnets: `[subnet-012e8ff1de0654321,subnet-0a6d28629bc123456]`, tunes timeouts, and ensures the tags `project:gitpod-docs` and `team:cs` are applied to the AWS resources it creates.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/customization","loc":{"lines":{"from":130,"to":132}}}}],["1862",{"pageContent":"```yaml\n---\ncustomization:\n    - apiVersion: '*'\n      kind: 'Service'\n      metadata:\n          name: 'proxy'\n          annotations:\n              service.beta.kubernetes.io/aws-load-balancer-scheme: 'internet-facing'\n              service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: 'instance'\n              service.beta.kubernetes.io/aws-load-balancer-subnets: 'subnet-012e8ff1de0654321,subnet-0a6d28629bc123456'\n              alb.ingress.kubernetes.io/load-balancer-attributes: 'idle_timeout.timeout_seconds=3600'\n              service.beta.kubernetes.io/aws-load-balancer-additional-resource-tags: 'project=gitpod-docs,team=cs'\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/customization","loc":{"lines":{"from":134,"to":147}}}}],["1863",{"pageContent":"## Limitations\n\n> This limitation has been removed as of [`2022.08.0`](https://github.com/gitpod-io/gitpod/releases/tag/2022.08.0).\n\nLabels are immutable on some Kubernetes resources, such as `Deployments`, `DaemonSets` and `StatefulSets`.\n\nIf you wish to change a label on one of these resources, you must destroy that resource first. This can be achieved by running `kubectl delete <resource> --namespace <namespace> <name>` prior to running the KOTS deployment.\n\nIn the event of there being multiple resources that need to be amended, you can run `helm uninstall --namespace <namespace> gitpod`. If you are using an in-cluster database or object storage, you should not run this command without taking a backup of your persistent volumes first.\n\n> **WARNING:** If deleting Kubernetes resources, your Gitpod instance is likely to become inaccessible and unstable. This should not be attempted while it is being used for normal development as data loss is likely.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/customization","loc":{"lines":{"from":149,"to":159}}}}],["1864",{"pageContent":"---\nsection: self-hosted/latest\nsubsection: installation-guides\ntitle: Private Registries\n---\n\n# Setting an installation-wide default workspace image\n\n> ⚠️ **Gitpod Self-hosted is [no longer supported](/blog/introducing-gitpod-dedicated)**\n>\n> The last update of Gitpod Self-hosted product was [November 2022](/changelog/november-self-hosted-release). Users can still request our [free community license](/community-license) however there will be no support or updates to the product. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n\nThis guide describes how to set a default workspace image that will apply to your entire Gitpod Self-Hosted installation. Please refer to the [Docker image documentation](/docs/configure/workspaces/workspace-image) for more information about workspace images.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/default-workspace-image","loc":{"lines":{"from":1,"to":13}}}}],["1865",{"pageContent":"> **Note:** there are two ways of setting an image for a workspace: via the installation-wide default `workspaceImage` (mentioned here) and the [`.gitpod.yml` file](/docs/references/gitpod-yml). The `.gitpod.yml` file will take precedence if both are set.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/default-workspace-image","loc":{"lines":{"from":15,"to":15}}}}],["1866",{"pageContent":"## Setting a default workspace image\n\n> **Note:** this will apply to your entire installation. If you are using a private registry for your image, please ensure you add it to the allow list and provide credentials for it - for guidance, see [using private registries](/docs/configure/self-hosted/latest/advanced/private-registries).\n\nCurrently, the default workspace image can only be set via the [config patch](/docs/configure/self-hosted/latest/config-patches). In the future, we plan to also allow you to set this via the installation UI.\n\n```yaml\nworkspace:\n    workspaceImage: string\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/default-workspace-image","loc":{"lines":{"from":17,"to":26}}}}],["1867",{"pageContent":"---\nsection: self-hosted/latest\nsubsection: installation-guides\ntitle: Setting up your EKS cluster with dual ALB + NLB load balancers\n---\n\n# Setting up your EKS cluster with dual ALB + NLB load balancers\n\n> ⚠️ **Gitpod Self-hosted is [no longer supported](/blog/introducing-gitpod-dedicated)**\n>\n> The last update of Gitpod Self-hosted product was [November 2022](/changelog/november-self-hosted-release). Users can still request our [free community license](/community-license) however there will be no support or updates to the product. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/eks-with-alb-and-nlb","loc":{"lines":{"from":1,"to":11}}}}],["1868",{"pageContent":"If you are unable to use an AWS classic load balancer (CLB) (e.g. because you want to use SSL Certificates generated by AWS) you need to set up an Application Load Balancer (ALB) for HTTPS traffic (e.g. when using VS Code in the browser). If you wish to use Desktop IDEs together with Gitpod Self-Hosted, which use SSH for networking, and thus require a Level 4 load balancer, you also need to create a Network Load balancer (NLB) (which is a Level 4 load balancer that can handle ssh traffic). AWS' ALB is a level 7 load balancer and can only handle HTTPS traffic.\n\nThis guide shows how to install both an ALB and an NLB into an EKS cluster. It is meant to be used as a supplement to the [Single Cluster Reference Architecture (AWS)](../reference-architecture/single-cluster-ref-arch) which only installs a CLB by default. You will configure your DNS to point ssh traffic to the NLB and HTTPS traffic to the ALB.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/eks-with-alb-and-nlb","loc":{"lines":{"from":13,"to":15}}}}],["1869",{"pageContent":"> **Note:** This guide assumes that you will be using AWS to manage your SSL certificates.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/eks-with-alb-and-nlb","loc":{"lines":{"from":17,"to":17}}}}],["1870",{"pageContent":"## Setting up an ALB and NLB","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/eks-with-alb-and-nlb","loc":{"lines":{"from":19,"to":19}}}}],["1871",{"pageContent":"### 0. Node configuration\n\nBecause we need to use an internal CA for communication that has to be distributed to the nodes, we need to ensure all managed nodes have `/etc/containerd/certs.d` in their `/etc/containerd/config.toml` to load the self-signed certificate used for internal communication.\n\n```toml\n[plugins.\"io.containerd.grpc.v1.cri\".registry]\n  config_path = \"/etc/containerd/certs.d\"\n```\n\nThese are two examples to enforce this:\n\n1. Use python to insert the values into the toml file respecting the formatting:\n\n```shell\napt-get update && apt-get install -y python3-pip\npip3 install toml mergedeep\n/usr/bin/env python3 - << EOF > /var/log/update-containerd-config-out.txt 2>&1\nimport toml\nfrom mergedeep import merge\nc = toml.load('/etc/containerd/config.toml')\nmerge(c, {'plugins': {'io.containerd.grpc.v1.cri': {'registry': {'config_path': '/etc/containerd/certs.d'}}}})\nwith open('/etc/containerd/config.toml', 'w') as f:\n  toml.dump(c, f)\nEOF\nservice containerd restart","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/eks-with-alb-and-nlb","loc":{"lines":{"from":21,"to":45}}}}],["1872",{"pageContent":"```\n\n2. Bruteforce method that will just append the lines to `/etc/containerd/config.toml` which will work if there are no other registry settings present in your config.toml file\n\n```\ncat << CONFIG >> /etc/containerd/config.toml\n\n[plugins.\"io.containerd.grpc.v1.cri\".registry]\nconfig_path = \"/etc/containerd/certs.d\"\n\nCONFIG\n\nservice containerd restart","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/eks-with-alb-and-nlb","loc":{"lines":{"from":46,"to":58}}}}],["1873",{"pageContent":"```\n\n<details>\n  <summary  class=\"text-p-medium\">Example of a complete overridebootstrap command</summary>\n\n```yaml\noverrideBootstrapCommand: |\n    #!/bin/bash\n    set -x\n    export CLUSTERNAME=gitpod\n    export NODEGROUP=services\n    export CONTAINER_RUNTIME=containerd\n    declare -a LABELS=(\n    eks.amazonaws.com/nodegroup=\"${NODEGROUP}\"\n        gitpod.io/workload_meta=true\n        gitpod.io/workload_ide=true\n      )\n      export USE_MAX_PODS=false\n      export KUBELET_EXTRA_ARGS=\"$(printf -- \"--node-labels=%s\" $(IFS=$','; echo \"${LABELS[*]}\"))\"\n    /etc/eks/bootstrap.sh ${CLUSTERNAME} --use-max-pods false\n\n    # Update containerd config while waiting on https://github.com/gitpod-io/gitpod/issues/11005","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/eks-with-alb-and-nlb","loc":{"lines":{"from":59,"to":80}}}}],["1874",{"pageContent":"# Update containerd config while waiting on https://github.com/gitpod-io/gitpod/issues/11005\n\n    apt-get update && apt-get install -y python3-pip\n    pip3 install toml mergedeep\n    /usr/bin/env python3 - << EOF > /var/log/update-containerd-config-out.txt 2>&1\n    import toml\n    from mergedeep import merge\n    c = toml.load('/etc/containerd/config.toml')\n    merge(c, {'plugins': {'io.containerd.grpc.v1.cri': {'registry': {'config_path': '/etc/containerd/certs.d'}}}})\n    with open('/etc/containerd/config.toml', 'w') as f:\n      toml.dump(c, f)\n    EOF\n    service containerd restart","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/eks-with-alb-and-nlb","loc":{"lines":{"from":80,"to":92}}}}],["1875",{"pageContent":"```\n\n</details>","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/eks-with-alb-and-nlb","loc":{"lines":{"from":93,"to":95}}}}],["1876",{"pageContent":"### 1. Install AWS load balancer controller\n\nInstall the AWS [load balancer controller](https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.4/). The below example assumes you have created the user `aws-load-balancer-controller` with the correct [IAM permissions already](https://docs.aws.amazon.com/eks/latest/userguide/aws-load-balancer-controller.html). `--set hostNetwork=true` is required by Calico.\n\n```shell\nhelm repo add eks https://aws.github.io/eks-charts\nhelm repo update\nhelm upgrade aws-load-balancer-controller \\\n    eks/aws-load-balancer-controller \\\n    --atomic \\\n    --cleanup-on-fail \\\n    --install \\\n    --reset-values \\\n    --namespace kube-system \\\n    --set clusterName=<insert cluster name> \\\n    --set serviceAccount.create=false \\\n    --set serviceAccount.name=aws-load-balancer-controller \\\n    --set hostNetwork=true\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/eks-with-alb-and-nlb","loc":{"lines":{"from":97,"to":115}}}}],["1877",{"pageContent":"### 2. Install Gitpod\n\nEnsure that you've created all the required components as per [the reference architecture guide](../reference-architecture/single-cluster-ref-arch): [Object Storage](../reference-architecture/single-cluster-ref-arch#object-storage), [OCI Image Registry](../reference-architecture/single-cluster-ref-arch#oci-image-registry), [Database](../reference-architecture/single-cluster-ref-arch#database). Then [install Gitpod](../reference-architecture/single-cluster-ref-arch#install-gitpod). While configuring your Gitpod installation, make sure to check 'use self-signed certificate'. Make sure that you select `node port` as the service type for the proxy service in the components section of the installation UI (this assumes you are using version 2022.07 or later):\n\n![proxy service type](/images/docs/self-hosted/proxy-service-type-ui.png)\n\nYou will also need to make sure that the \"allow login via SSH\" box is ticked:\n\n![ssh gateway](/images/docs/self-hosted/ssh-gateway.png)","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/eks-with-alb-and-nlb","loc":{"lines":{"from":117,"to":125}}}}],["1878",{"pageContent":"### 3. Create alb-ingresss.yaml\n\nUpdate the `alb-ingress.yaml` below with your site-specific options (you need to customize anything tagged with `<..>`):\n\n**alb-ingress.yaml**","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/eks-with-alb-and-nlb","loc":{"lines":{"from":127,"to":131}}}}],["1879",{"pageContent":"```yaml\n---\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n    annotations:\n        kubernetes.io/ingress.class: alb\n        alb.ingress.kubernetes.io/actions.ssl-redirect: |-\n            {\n              \"Type\": \"redirect\",\n              \"RedirectConfig\": {\n                \"Protocol\": \"HTTPS\",\n                \"Port\": \"443\",\n                \"StatusCode\": \"HTTP_301\"\n              }\n            }\n        alb.ingress.kubernetes.io/backend-protocol: HTTPS\n        alb.ingress.kubernetes.io/healthcheck-protocol: HTTPS\n        alb.ingress.kubernetes.io/listen-ports: |-\n            [{\n              \"HTTP\": 80\n            }, {\n              \"HTTPS\": 443\n            }]\n        alb.ingress.kubernetes.io/load-balancer-attributes: idle_timeout.timeout_seconds=3600\n        alb.ingress.kubernetes.io/tags: Purpose=Gitpod,Service=proxy\n        alb.ingress.kubernetes.io/target-group-attributes: deregistration_delay.timeout_seconds=30","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/eks-with-alb-and-nlb","loc":{"lines":{"from":133,"to":159}}}}],["1880",{"pageContent":"alb.ingress.kubernetes.io/tags: Purpose=Gitpod,Service=proxy\n        alb.ingress.kubernetes.io/target-group-attributes: deregistration_delay.timeout_seconds=30\n        alb.ingress.kubernetes.io/target-node-labels: gitpod.io/workload_meta=true\n        alb.ingress.kubernetes.io/target-type: instance\n        alb.ingress.kubernetes.io/ssl-policy: ELBSecurityPolicy-FS-1-2-Res-2020-10\n        alb.ingress.kubernetes.io/certificate-arn: <YOUR-AWS-SSL-PROVIDED_CERTIFICATE>\n        alb.ingress.kubernetes.io/scheme: <SET THIS -> internet-facing or internal>\n        alb.ingress.kubernetes.io/load-balancer-name: <GITPOD-LOAD-BALANCER-NAME>\n    name: gitpod\nspec:\n    defaultBackend:\n        service:\n            name: proxy\n            port:\n                number: 80\n    rules:\n        - http:\n              paths:\n                  - backend:\n                        service:\n                            name: proxy\n                            port:\n                                number: 443","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/eks-with-alb-and-nlb","loc":{"lines":{"from":159,"to":181}}}}],["1881",{"pageContent":"- backend:\n                        service:\n                            name: proxy\n                            port:\n                                number: 443\n                    path: /\n                    pathType: Prefix\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/eks-with-alb-and-nlb","loc":{"lines":{"from":181,"to":188}}}}],["1882",{"pageContent":"### 4. Install ALB and NLB\n\nInstall the ALB (for HTTPS traffic) and NLB (for SSH traffic) using the .yaml file customized above as well as this one:\n\n**nlb-ssh-service.yaml**","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/eks-with-alb-and-nlb","loc":{"lines":{"from":190,"to":194}}}}],["1883",{"pageContent":"```yaml\n---\napiVersion: v1\nkind: Service\nmetadata:\n    name: gitpod-ssh\n    labels:\n        app: gitpod\n        component: ws-proxy-ssh\n    annotations:\n        service.beta.kubernetes.io/aws-load-balancer-name: gitpod-ssh-gateway\n        service.beta.kubernetes.io/aws-load-balancer-type: external\n        service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: 'instance'\n        service.beta.kubernetes.io/aws-load-balancer-ip-address-type: ipv4\n        service.beta.kubernetes.io/aws-load-balancer-backend-protocol: tcp\n        service.beta.kubernetes.io/aws-load-balancer-target-node-labels: gitpod.io/workload_workspace_services=true\n        service.beta.kubernetes.io/aws-load-balancer-target-group-attributes: stickiness.enabled=true,stickiness.type=source_ip,preserve_client_ip.enabled=true\n        service.beta.kubernetes.io/aws-load-balancer-additional-resource-tags: Project=gitpod-alb\nspec:\n    ports:\n        - name: ssh\n          protocol: TCP\n          port: 22","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/eks-with-alb-and-nlb","loc":{"lines":{"from":196,"to":218}}}}],["1884",{"pageContent":"service.beta.kubernetes.io/aws-load-balancer-additional-resource-tags: Project=gitpod-alb\nspec:\n    ports:\n        - name: ssh\n          protocol: TCP\n          port: 22\n          targetPort: 2200\n    selector:\n        app: gitpod\n        component: ws-proxy\n    type: LoadBalancer","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/eks-with-alb-and-nlb","loc":{"lines":{"from":218,"to":228}}}}],["1885",{"pageContent":"```\n\n```\nkubectl apply -f alb-ingress.yaml\nkubectl apply -f nlb-ssh-service.yaml\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/eks-with-alb-and-nlb","loc":{"lines":{"from":229,"to":234}}}}],["1886",{"pageContent":"### 5. Check if installed properly\n\nIf installed properly, then this should be the shell output given the command below:\n\n```bash\n> kubectl get ingress gitpod -n gitpod\nNAME     CLASS    HOSTS   ADDRESS                                                   PORTS   AGE\ngitpod   <none>   *       gitpod-airgap-alb-339697413.eu-west-1.elb.amazonaws.com   80      41s\n\n> kubectl get service gitpod-ssh -n gitpod\nNAME         TYPE           CLUSTER-IP       EXTERNAL-IP                                                       PORT(S)        AGE\ngitpod-ssh   LoadBalancer   172.20.162.102   gitpod-ssh-gateway-6588d186387780e5.elb.eu-west-1.amazonaws.com   22:30003/TCP   76s\n```\n\n### 6. Update DNS records\n\nUpdate DNS as follows to point to your newly created loadbalancers depending on the type of traffic:\n\n```\ngitpod.domain.com           --> ALB ADDRESS\n*.gitpod.domain.com         --> ALB ADDRESS\n*.ssh.ws.gitpod.domain.com  --> NLB ADDRESS\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/eks-with-alb-and-nlb","loc":{"lines":{"from":236,"to":258}}}}],["1887",{"pageContent":"---\nsection: self-hosted/latest\nsubsection: installation-guides\ntitle: Advanced Installation of Gitpod Self-Hosted\n---\n\n# Advanced Installation of Gitpod Self-Hosted\n\n> ⚠️ **Gitpod Self-hosted is [no longer supported](/blog/introducing-gitpod-dedicated)**\n>\n> The last update of Gitpod Self-hosted product was [November 2022](/changelog/november-self-hosted-release). Users can still request our [free community license](/community-license) however there will be no support or updates to the product. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n\nHere you can find advanced topics related to installing Gitpod:","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced","loc":{"lines":{"from":1,"to":13}}}}],["1888",{"pageContent":"Here you can find advanced topics related to installing Gitpod:\n\n-   [TLS configuration for Gitpod Self-Hosted](./advanced/tls)\n-   [Install Gitpod on an Air Gapped Network](./advanced/air-gap)\n-   [Configuring popular container registries](./advanced/resource-configuration)\n-   [Setting a default workspace image](./advanced/default-workspace-image)\n-   [Using private image registries with Gitpod Self-Hosted](./advanced/private-registries)\n-   [Setting up your EKS cluster with dual ALB + NLB load balancers](./advanced/eks-with-alb-and-nlb)\n-   [Applying custom annotations, labels and environment variables](./advanced/customization)\n-   [Component Customization](./advanced/components)\n<!-- The above should be removed as soon as we have most customers using the default method (a.k.a. replicated flow) -->","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced","loc":{"lines":{"from":13,"to":23}}}}],["1889",{"pageContent":"---\nsection: self-hosted/latest\nsubsection: installation-guides\ntitle: Private Registries\n---\n\n# Using private image registries with Gitpod Self-Hosted\n\n> ⚠️ **Gitpod Self-hosted is [no longer supported](/blog/introducing-gitpod-dedicated)**\n>\n> The last update of Gitpod Self-hosted product was [November 2022](/changelog/november-self-hosted-release). Users can still request our [free community license](/community-license) however there will be no support or updates to the product. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n\nThis guide outlines the considerations to take when using images for workspaces that originate from private image registries that are not stored in the image registry already configured in the KOTS Installation UI. This is useful when, for example, you want to pull private base images from one registry and then store the built images in another.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/private-registries","loc":{"lines":{"from":1,"to":13}}}}],["1890",{"pageContent":"Please refer to the [Docker image documentation](/docs/configure/workspaces/workspace-image) for more information about workspace images.\n\n> **Note:** there are two ways of setting an image for a workspace: via the installation-wide [default `workspaceImage`](./default-workspace-image) and the [`.gitpod.yml` file](/docs/references/gitpod-yml). The `.gitpod.yml` file will take precedence if both are set.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/private-registries","loc":{"lines":{"from":15,"to":17}}}}],["1891",{"pageContent":"## Credentials\n\nTo access private registries, Gitpod needs to have the corresponding access credentials. These can be supplied in the KOTS installation UI:\n\n![registry credentials UI](/images/docs/self-hosted/private-registry-credentials.png)\n\n## Allowlist\n\nGitpod also has an allow list for private base image registries. Any private image registry that is used throughout an installation needs to be on this allowlist.\n\n> **Important:** Any registry for which credentials are supplied is automatically added to this allowlist!\n\nRegistries can be added to the allowlist via the [config patch](/docs/configure/self-hosted/latest/config-patches) in the following format:\n\n```yaml\ncontainerRegistry:\n    privateBaseImageAllowList:\n        - <your_registry-url.com>\n        - <another_registry-url.com>\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/private-registries","loc":{"lines":{"from":19,"to":38}}}}],["1892",{"pageContent":"---\nsection: self-hosted/latest\nsubsection: installation-guides\ntitle: Resource Configuration\n---\n\n# How To Configure Gitpod To Work With Certain External Components\n\n> ⚠️ **Gitpod Self-hosted is [no longer supported](/blog/introducing-gitpod-dedicated)**\n>\n> The last update of Gitpod Self-hosted product was [November 2022](/changelog/november-self-hosted-release). Users can still request our [free community license](/community-license) however there will be no support or updates to the product. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n\nGitpod has three resource dependencies that are required to function correctly. For convenience, you can use the in-cluster dependencies, but you should use external resources for a high-performance application.\n\nThis page highlights some of the common gotchas found when working with cloud resources and how to overcome them.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/resource-configuration","loc":{"lines":{"from":1,"to":15}}}}],["1893",{"pageContent":"## Container Registry\n\n### [Amazon Elastic Container Registry (ECR)](https://aws.amazon.com/ecr/)\n\nAmazon ECR does not fully implement the [Docker v2 API](https://docs.docker.com/registry/spec/api), namely it does not automatically create the remote image if it does not already exist when pushed. For that reason, ECR is not supported with Gitpod.\n\nWhen using AWS, you should select an in-cluster registry and use S3 as your in-cluster storage provider. This will use the in-cluster registry as a facade for an S3 bucket where all the images will be stored.\n\nIf using a region other than `us-east-1`, you will need to change the endpoint to be `s3.<region>.amazonaws.com`.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/resource-configuration","loc":{"lines":{"from":17,"to":25}}}}],["1894",{"pageContent":"### [Google Container Registry (GCR)](https://cloud.google.com/container-registry)\n\n> This example uses the format `gcr.io`, which is the global hostnames. This can be swapped with any of the [regional hostnames](https://cloud.google.com/container-registry/docs/pushing-and-pulling) and it will work in the same way.\n\nGoogle Container Registry authentication requires specific configuration. The \"Container registry URL\" will be in a format similar to `gcr.io/<project-name>/gitpod`. In order for the authentication to work, you must also enter the \"Container registry server\". This will always be your GCR hostname, eg `gcr.io`.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/resource-configuration","loc":{"lines":{"from":27,"to":31}}}}],["1895",{"pageContent":"### [Google Artifact Registry (GAR)](https://cloud.google.com/artifact-registry)\n\nAs with [GCR](#google-container-registry-gcr), Google Artifact Registry requires both the \"Container registry URL\" and \"Container registry server\" to be completed. The URL will be in the format `<region>-docker.pkg.dev/<project-name>/gitpod` and the server address will be `<region>-docker.pkg.dev`.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/resource-configuration","loc":{"lines":{"from":33,"to":35}}}}],["1896",{"pageContent":"---\nsection: self-hosted/latest\nsubsection: installation-guides\ntitle: TLS configuration for Gitpod Self-Hosted\n---\n\n# TLS configuration for Gitpod Self-Hosted\n\n> ⚠️ **Gitpod Self-hosted is [no longer supported](/blog/introducing-gitpod-dedicated)**\n>\n> The last update of Gitpod Self-hosted product was [November 2022](/changelog/november-self-hosted-release). Users can still request our [free community license](/community-license) however there will be no support or updates to the product. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n\nTo run your own Gitpod instance, you need a TLS certificate for your Gitpod domain. There are three options to provide these TLS certificates.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/tls","loc":{"lines":{"from":1,"to":13}}}}],["1897",{"pageContent":"## Option 1: Cert-Manager\n\nConfigure cert-manager to issue these certificates (usually with a DNS-01 challenge and services like [Let's encrypt](https://letsencrypt.org/)). See the [installation guide](/docs/configure/self-hosted/latest/installing-gitpod#prerequisites)) for more information.\n\n![kots-tls-cert-manager](/images/docs/self-hosted/kots-tls-cert-manager.png)\n\n<p align=\"center\"><em>TLS certificates configuration options during the installation process</em></p>","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/tls","loc":{"lines":{"from":15,"to":21}}}}],["1898",{"pageContent":"## Option 2: Self-signed by Gitpod\n\n_We usually do not recommend this option for production usage._\n\nLet Gitpod generate self-signed certificates for your installation. This option can be used in case your load balancer does the TLS termination or for testing settings. For the latter case, you need to add the custom [CA](https://en.wikipedia.org/wiki/Certificate_authority) to your browser to let it accept the self-signed certificate. Use this command to export the CA:\n\n```\n$ kubectl get secrets -n <namespace> ca-issuer-ca -o jsonpath='{.data.ca\\.crt}' | base64 -d > ~/ca.crt\n```\n\n![kots-tls-self-signed](/images/docs/self-hosted/kots-tls-self-signed.png)","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/tls","loc":{"lines":{"from":23,"to":33}}}}],["1899",{"pageContent":"## Option 3: Bring your own certificate\n\n> ⚠️ **Limitation**\n>\n> Adding custom CA certificates is currently _not_ supported on **Google Kubernetes Engine (GKE)** because on GKE `containerd` does not support custom certificates.\n\nUpload your own TLS certificate, key, and (optionally) CA certificate. When your TLS certificate is signed by a publicly accepted TLS authority, you just need to upload your certificate and key. In case it is a self-signed certificate (e.g. signed by a corporate CA), you also need to upload your CA.\n\n![kots-tls-bring-own](/images/docs/self-hosted/kots-tls-bring-own.png)","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/advanced/tls","loc":{"lines":{"from":35,"to":43}}}}],["1900",{"pageContent":"---\nsection: self-hosted/latest\ntitle: Amazon Elastic Kubernetes Service (EKS)\n---\n\n# How to Create a Cluster on Amazon Elastic Kubernetes Service (EKS)\n\n> ⚠️ **Gitpod Self-hosted is [no longer supported](/blog/introducing-gitpod-dedicated)**\n>\n> The last update of Gitpod Self-hosted product was [November 2022](/changelog/november-self-hosted-release). Users can still request our [free community license](/community-license) however there will be no support or updates to the product. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n\n> This guide has been deprecated. Please use the [Single Cluster Reference Architecture](../reference-architecture/single-cluster-ref-arch) instead.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/cluster-set-up/on-amazon-eks","loc":{"lines":{"from":1,"to":12}}}}],["1901",{"pageContent":"---\nsection: self-hosted/latest\ntitle: Google Kubernetes Engine (GKE)\n---\n\n# How to Create a Cluster on Google Kubernetes Engine (GKE)\n\n> ⚠️ **Gitpod Self-hosted is [no longer supported](/blog/introducing-gitpod-dedicated)**\n>\n> The last update of Gitpod Self-hosted product was [November 2022](/changelog/november-self-hosted-release). Users can still request our [free community license](/community-license) however there will be no support or updates to the product. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n\n> This guide has been deprecated. Please use the [Single Cluster Reference Architecture](../reference-architecture/single-cluster-ref-arch) instead.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/cluster-set-up/on-gke","loc":{"lines":{"from":1,"to":12}}}}],["1902",{"pageContent":"---\nsection: self-hosted/latest\nsubsection: installation-guides\ntitle: K3s Cluster for Gitpod Self-Hosted\n---\n\n# How to Create a Cluster with K3s\n\n> ⚠️ **Gitpod Self-hosted is [no longer supported](/blog/introducing-gitpod-dedicated)**\n>\n> The last update of Gitpod Self-hosted product was [November 2022](/changelog/november-self-hosted-release). Users can still request our [free community license](/community-license) however there will be no support or updates to the product. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n\nIn this guide, we show you how to set up a Kubernetes cluster with [K3s](https://k3s.io/) that is ready to install Gitpod. In this example we expect to have at least 2 nodes with Ubuntu 20.04 (a single node setup would work as well, see hint below):","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/cluster-set-up/on-k3s","loc":{"lines":{"from":1,"to":13}}}}],["1903",{"pageContent":"-   `node0`: main node where the Gitpod service pods will be deployed to\n-   `node1`: worker node where the Gitpod workspace pods will be deployed to\n-   optional: one or more additional worker nodes `node2` … `nodeN`\n\nOn each node, we [install K3s](https://rancher.com/docs/k3s/latest/en/installation/). We configure K3s by setting the following environment variables on the nodes.\n\nK3s config for main node `node0`:\n\n```shell\nexport INSTALL_K3S_EXEC=\"server --disable traefik --flannel-backend=none --node-label gitpod.io/workload_meta=true --node-label gitpod.io/workload_ide=true\"\nexport K3S_CLUSTER_SECRET=\"<your random secret string that is the same on all nodes>\"","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/cluster-set-up/on-k3s","loc":{"lines":{"from":15,"to":25}}}}],["1904",{"pageContent":"```\n\nK3s config for all other nodes:\n\n```shell\nexport INSTALL_K3S_EXEC=\"agent --node-label gitpod.io/workload_workspace_services=true --node-label gitpod.io/workload_workspace_regular=true --node-label gitpod.io/workload_workspace_headless=true\"\nexport K3S_CLUSTER_SECRET=\"<your random secret string that is the same on all nodes>\"\nexport K3S_URL=\"https://node0:6443\"\n```\n\n**Hint:** _In case you would like to set up a single node cluster (only the main node) add the `--node-label` arguments of the bottom \"other\" nodes config to the `INSTALL_K3S_EXEC` variable of the main node config._\n\nAfter setting the environment variables, install K3s on every node like this:\n\n```shell\n$ curl -sfL https://get.k3s.io | sh -","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/cluster-set-up/on-k3s","loc":{"lines":{"from":26,"to":41}}}}],["1905",{"pageContent":"```\n\nNow, you have to install [Calico](https://www.tigera.io/project-calico/). Download the [Calico manifest](https://docs.projectcalico.org/manifests/calico-vxlan.yaml) and add the following line to the `plugins` section of the `cni_network_config`:\n\n```json\n\"container_settings\": { \"allow_ip_forwarding\": true }","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/cluster-set-up/on-k3s","loc":{"lines":{"from":42,"to":47}}}}],["1906",{"pageContent":"```\n\nThe section in the `calico-vxlan.yaml` file should look like this:\n\n```json\n[...]\n  cni_network_config: |-\n    {\n      \"name\": \"k8s-pod-network\",\n      \"cniVersion\": \"0.3.1\",\n      \"plugins\": [\n        {\n          \"type\": \"calico\",\n          \"log_level\": \"info\",\n          \"log_file_path\": \"/var/log/calico/cni/cni.log\",\n          \"datastore_type\": \"kubernetes\",\n          \"nodename\": \"__KUBERNETES_NODE_NAME__\",\n          \"mtu\": __CNI_MTU__,\n          \"ipam\": {\n              \"type\": \"calico-ipam\"\n          },\n          \"policy\": {\n              \"type\": \"k8s\"\n          },\n          \"kubernetes\": {\n              \"kubeconfig\": \"__KUBECONFIG_FILEPATH__\"\n          },\n          \"container_settings\": { \"allow_ip_forwarding\": true }\n        },\n[...]\n```\n\nCopy that file to `node0` in the following folder (create folder if missing):\n\n```\n/var/lib/rancher/k3s/server/manifests/","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/cluster-set-up/on-k3s","loc":{"lines":{"from":48,"to":83}}}}],["1907",{"pageContent":"```\n\nCopy that file to `node0` in the following folder (create folder if missing):\n\n```\n/var/lib/rancher/k3s/server/manifests/\n```\n\nThat's it. Your K3s cluster is ready to install Gitpod. The next step is to install cert-manager. Just follow the instructions of the [installation guide](/docs/configure/self-hosted/latest/installing-gitpod#prerequisites) to install !","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/cluster-set-up/on-k3s","loc":{"lines":{"from":83,"to":91}}}}],["1908",{"pageContent":"---\nsection: self-hosted/latest\ntitle: Microsoft Azure Kubernetes Service (AKS)\n---\n\n# How to Create a Cluster on Microsoft Azure Kubernetes Service (AKS)\n\n> ⚠️ **Gitpod Self-hosted is [no longer supported](/blog/introducing-gitpod-dedicated)**\n>\n> The last update of Gitpod Self-hosted product was [November 2022](/changelog/november-self-hosted-release). Users can still request our [free community license](/community-license) however there will be no support or updates to the product. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).\n\nInstructions on how to create a Microsoft AKS environment that is ready to install Gitpod are located in the [gitpod-io/gitpod-microsoft-aks-guide](https://github.com/gitpod-io/gitpod-microsoft-aks-guide) repository on GitHub. The installation process takes around twenty minutes. In the end, the following resources are created:","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/cluster-set-up/on-microsoft-aks","loc":{"lines":{"from":1,"to":12}}}}],["1909",{"pageContent":"-   An Microsoft AKS cluster running Kubernetes v1.21.\n-   An Microsoft Azure load balancer.\n-   An Microsoft Azure DNS zone.\n-   An Microsoft Azure container registry.\n-   MySQL will be provided by Helm under [#5508](https://github.com/gitpod-io/gitpod/issues/5508) solved.\n-   Minio will be used until Microsoft [Azure storage gateway](https://github.com/gitpod-io/gitpod-azure-aks-guide/issues/1) is configured.\n-   Installation of [calico](https://docs.projectcalico.org) as CNI and NetworkPolicy implementation\n-   Installation of [cert-manager](https://cert-manager.io/) for self-signed SSL certificates\n\nUpon completion, this script will print the config for the resources created (including passwords) and what is the [next relevant step](/docs/configure/self-hosted/latest/installing-gitpod#install-gitpod) in the installation process. Note that you will be able to skip steps 2 and 3 in the getting started guide because the script can do these steps for you.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/cluster-set-up/on-microsoft-aks","loc":{"lines":{"from":14,"to":23}}}}],["1910",{"pageContent":"---\nsection: self-hosted/latest\nsubsection: installation-guides\ntitle: Self-Hosted Reference Architectures\n---\n\n<script lang=\"ts\">\n  import Pill from \"$lib/components/pill.svelte\";\n  </script>\n\n# Reference Architectures\n\n> ⚠️ **Gitpod Self-hosted is [no longer supported](/blog/introducing-gitpod-dedicated)**\n>\n> The last update of Gitpod Self-hosted product was [November 2022](/changelog/november-self-hosted-release). Users can still request our [free community license](/community-license) however there will be no support or updates to the product. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture","loc":{"lines":{"from":1,"to":15}}}}],["1911",{"pageContent":"Below you will find reference architectures supported and recommended by Gitpod for different situations and all major cloud providers. They help you create the infrastructure needed to run Gitpod Self-Hosted and come in the form of a guide and terraform configuration. These are used to create the infrastructure for our nightly testing and fulfil the [requirements](../latest/requirements) Gitpod has on a cluster.\n\n> **Note:** You should see these reference architectures as a starting point for creating infrastructure that works with both Gitpod and your own infrastructure requirements and policies. However, the further you deviate from these recommended architectures, the higher the potential for Gitpod to not behave as expected.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture","loc":{"lines":{"from":17,"to":19}}}}],["1912",{"pageContent":"|                                                                                                                                                                            |                                                                                       |\n| -------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------- |\n| [**Proof-of-Value Reference Architecture**](./reference-architecture/proof-of-value)<Pill variant=\"orange\" text=\"alpha\" class=\"ml-1.5\"/>                                   | Aimed at creating a minimal set of infrastructure for evaluation and testing purposes |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture","loc":{"lines":{"from":21,"to":23}}}}],["1913",{"pageContent":"| [**Single-Cluster Reference Architecture for Production Purposes**](./reference-architecture/single-cluster-ref-arch) <Pill variant=\"orange\" text=\"alpha\" class=\"ml-1.5\"/> | Aimed at creating hardened infrastructure for a continuous operation of Gitpod        |\n| <p style=\"font-size: var(--p-small); font-weight: 500;\"> Multi-Cluster High-Availiability Reference Architecture <Pill variant=\"pink\" text=\"planned\" class=\"ml-1.5\"/></p>  |                                                                                       |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture","loc":{"lines":{"from":24,"to":25}}}}],["1914",{"pageContent":"---\nsection: self-hosted/latest\nsubsection: installation-guides\ntitle: 'Proof-of-Value Reference Architecture'\n---\n\n<script lang=\"ts\">\n  import CloudPlatformToggle from \"$lib/components/docs/cloud-platform-toggle.svelte\";\n  import Preparations from \"./_chunks/preparations.md\";\n  import Networking from \"./_chunks/networking.md\";\n  import BigPill from \"$lib/components/big-pill.svelte\";\n</script>\n\n# Proof-of-Value Reference Architecture\n\n> ⚠️ **Gitpod Self-hosted is [no longer supported](/blog/introducing-gitpod-dedicated)**\n>\n> The last update of Gitpod Self-hosted product was [November 2022](/changelog/november-self-hosted-release). Users can still request our [free community license](/community-license) however there will be no support or updates to the product. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":1,"to":18}}}}],["1915",{"pageContent":"|               |                                                                                                                                                                                                                                                                                                                  |\n| ------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Status:       | <BigPill text=\"alpha\" variant=\"pink\" class=\"ml-1.5\" />                                                                                                                                                                                                                                                           |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":20,"to":22}}}}],["1916",{"pageContent":"| Intended for: | Trying out Gitpod in a representative way but with only the minimum of infrastructure required                                                                                                                                                                                                                   |\n| Limitations:  | - Not intended for long-term, production usage <br/> - Higher risk of data loss due to in-cluster dependencies - if you lose your cluster, you may lose your data <br/> - Data is not carried over when moving to the [Single Cluster Reference Architecture](./single-cluster-ref-arch) for production purposes |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":23,"to":24}}}}],["1917",{"pageContent":"## Overview\n\nThis reference architecture provides you with a setup where all components that are needed to operate Gitpod are deployed within the Kubernetes cluster. In contrast to a production-oriented setup, this means that the required database, object storage, well as a registry are deployed for you within the cluster. All cluster services and workspaces are deployed on a single autoscaling node group.\n\n> If you are looking for a scalable and reliable way to run Gitpod, please take a look at our [Single Cluster Reference Architecture](./single-cluster-ref-arch).\n\n## Cloud Provider Preparations\n\n<Preparations />","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":26,"to":34}}}}],["1918",{"pageContent":"## Kubernetes Cluster\n\nThe heart of this reference architecture is a **Kubernetes cluster** where all components are deployed to. This cluster has a single node pool that needs to have all of the following labels:\n\n-   `gitpod.io/workload_meta=true`\n-   `gitpod.io/workload_ide=true`\n-   `gitpod.io/workload_workspace_services=true`\n-   `gitpod.io/workload_workspace_regular=true`\n-   `gitpod.io/workload_workspace_headless=true`\n\nThe following table gives an overview of the node types for the different cloud providers that are used by this reference architecture.\n\n|                  | GCP               | AWS           |\n| ---------------- | ----------------- | ------------- |\n| Gitpod Node Pool | `n2d-standard-16` | `m6i.4xlarge` |\n\n<CloudPlatformToggle id=\"cloud-platform-toggle-cluster\">\n\n<div slot=\"gcp\">\n\nFirst, we [create a **service account**](https://cloud.google.com/iam/docs/creating-managing-service-accounts) for the cluster. The service account needs to have the following roles:","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":36,"to":56}}}}],["1919",{"pageContent":"First, we [create a **service account**](https://cloud.google.com/iam/docs/creating-managing-service-accounts) for the cluster. The service account needs to have the following roles:\n\n| Roles                         |\n| ----------------------------- |\n| roles/logging.logWriter       |\n| roles/monitoring.metricWriter |\n| roles/container.admin         |\n\nRun the following commands to create the service account:\n\n```bash\nGKE_SA=gitpod-gke\nGKE_SA_EMAIL=\"${GKE_SA}\"@\"${PROJECT_NAME}\".iam.gserviceaccount.com\ngcloud iam service-accounts create \"${GKE_SA}\" --display-name \"${GKE_SA}\"\ngcloud projects add-iam-policy-binding \"${PROJECT_NAME}\" --member serviceAccount:\"${GKE_SA_EMAIL}\" --role=\"roles/logging.logWriter\"\ngcloud projects add-iam-policy-binding \"${PROJECT_NAME}\" --member serviceAccount:\"${GKE_SA_EMAIL}\" --role=\"roles/monitoring.metricWriter\"\ngcloud projects add-iam-policy-binding \"${PROJECT_NAME}\" --member serviceAccount:\"${GKE_SA_EMAIL}\" --role=\"roles/container.admin\"","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":56,"to":72}}}}],["1920",{"pageContent":"```\n\nAfter that, we [create a **Kubernetes cluster**](https://cloud.google.com/kubernetes-engine/docs/how-to/creating-a-regional-cluster).","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":73,"to":75}}}}],["1921",{"pageContent":"|                   |                                                                                                                                                                                                                        |\n| ----------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Image Type        | `UBUNTU_CONTAINERD`                                                                                                                                                                                                    |\n| Machine Type      | `n2d-standard-16`                                                                                                                                                                                                      |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":77,"to":80}}}}],["1922",{"pageContent":"| Cluster Version   | Choose latest from [regular channel](https://cloud.google.com/kubernetes-engine/docs/release-notes-regular)                                                                                                            |\n| Enable            | Autoscaling,<br/>Autorepair,<br/>IP Alias,<br/>Network Policy                                                                                                                                                          |\n| Disable           | Autoupgrade<br/>`metadata=disable-legacy-endpoints=true`                                                                                                                                                               |\n| Create Subnetwork | `gitpod-${CLUSTER_NAME}`                                                                                                                                                                                               |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":81,"to":84}}}}],["1923",{"pageContent":"| Number of nodes   | 1                                                                                                                                                                                                                      |\n| Min Nodes         | 1                                                                                                                                                                                                                      |\n| Max Nodes         | 50                                                                                                                                                                                                                     |\n| Max Pods per Node | 110                                                                                                                                                                                                                    |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":85,"to":88}}}}],["1924",{"pageContent":"| Addons            | HorizontalPodAutoscaling,<br/>NodeLocalDNS,<br/>NetworkPolicy                                                                                                                                                          |\n| Scopes            | `gke-default`,<br/>`https://www.googleapis.com/auth/ndev.clouddns.readwrite`                                                                                                                                           |\n| Region            | Choose your [region and zones](https://cloud.google.com/compute/docs/regions-zones)                                                                                                                                    |\n| Node Labels       | `gitpod.io/workload_meta=true`,<br/>`gitpod.io/workload_ide=true`,<br/>`gitpod.io/workload_workspace_services=true`,<br/>`gitpod.io/workload_workspace_regular=true`,<br/>`gitpod.io/workload_workspace_headless=true` |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":89,"to":92}}}}],["1925",{"pageContent":"```bash\nCLUSTER_NAME=gitpod\nREGION=us-central1-b\nGKE_VERSION=1.21.12","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":94,"to":97}}}}],["1926",{"pageContent":"gcloud container clusters \\\n    create \"${CLUSTER_NAME}\" \\\n    --disk-type=\"pd-ssd\" \\\n    --disk-size=\"100GB\" \\\n    --image-type=\"UBUNTU_CONTAINERD\" \\\n    --machine-type=\"n2d-standard-16\" \\\n    --cluster-version=\"${GKE_VERSION}\" \\\n    --zone=\"${ZONE}\" \\\n    --service-account \"${GKE_SA_EMAIL}\" \\\n    --num-nodes=1 \\\n    --no-enable-basic-auth \\\n    --enable-autoscaling \\\n    --enable-autorepair \\\n    --no-enable-autoupgrade \\\n    --enable-ip-alias \\\n    --enable-network-policy \\\n    --create-subnetwork name=\"gitpod-${CLUSTER_NAME}\" \\\n    --metadata=disable-legacy-endpoints=true \\\n    --scopes=\"gke-default,https://www.googleapis.com/auth/ndev.clouddns.readwrite\" \\\n    --node-labels=\"gitpod.io/workload_meta=true,gitpod.io/workload_ide=true,gitpod.io/workload_workspace_services=true,gitpod.io/workload_workspace_regular=true,gitpod.io/workload_workspace_headless=true\" \\\n    --min-nodes=1 \\\n    --max-nodes=50 \\\n    --addons=HorizontalPodAutoscaling,NodeLocalDNS,NetworkPolicy","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":99,"to":121}}}}],["1927",{"pageContent":"```\n\nNow, you can **connect `kubectl`** to your newly created cluster.\n\n```bash\ngcloud container clusters get-credentials --zone=\"${ZONE}\" \"${CLUSTER_NAME}\"\n```\n\nAfter that, you need to create cluster role bindings to allow the current user to create new RBAC rules.\n\n```bash\nkubectl create clusterrolebinding cluster-admin-binding \\\n    --clusterrole=cluster-admin \\\n    --user=\"$(gcloud config get-value core/account)\"","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":122,"to":135}}}}],["1928",{"pageContent":"```\n\n</div>\n\n<div slot=\"aws\">\n\nFor `eksctl`, configuring the cluster and the node groups cannot happen simultaneously. You need to deploy the cluster control plane first, do modifications to the network stack (Calico), and then provision the node groups. This ensures you have the maximum number of pods available (110 in most cases) to run Gitpod workspaces.\n\nThe example `eksctl` config file includes services accounts that might not be relevant to a particular deployment, but are included for reference.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":136,"to":144}}}}],["1929",{"pageContent":"The example `eksctl` config file includes services accounts that might not be relevant to a particular deployment, but are included for reference.\n\n-   `cert-manager` provided for the required cert-manager tooling. If using DNS-01 challenges for Let's Encrypt with a Route53 zone, then enable the cert-manager `wellKnownPolicies` or ensure one exists with permissions to modify records in the zone\n-   `aws-load-balancer-controller` enables ELB creation for LoadBalancer services and integration with AWS Application Load Balancers\n-   `cluster-autoscaler` connects to the AWS autoscaler\n-   `ebs-csi-controller-sa` enables provisioning of the EBS volumes for PVC storage\n-   `external-dns` creates DNS records for external-facing Gitpod services\n\nProvided below is a complete `eksctl` configuration file that will deploy all the components required for an EKS installation to support Gitpod. All references to a `gitpod-cluster.yaml` file refer to this reference.\n\n**`gitpod-cluster.yaml`**","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":144,"to":154}}}}],["1930",{"pageContent":"**`gitpod-cluster.yaml`**\n\n```yaml\napiVersion: eksctl.io/v1alpha5\nkind: ClusterConfig\nmetadata:\n    name: gitpod-pov\n    region: eu-west-1\n    version: '1.22'\n    # Update tags on your other Gitpod AWS resources (such as securitygroup rules)\n    # to match these tags.\n    tags:\n        department: eng\n        team: selfhosted\n        owner: alt\n        project: gitpod-pov\n\niam:\n    withOIDC: true","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":154,"to":172}}}}],["1931",{"pageContent":"iam:\n    withOIDC: true\n\n    serviceAccounts:\n        - metadata:\n              name: aws-load-balancer-controller\n              namespace: kube-system\n          wellKnownPolicies:\n              awsLoadBalancerController: true\n        - metadata:\n              name: ebs-csi-controller-sa\n              namespace: kube-system\n          wellKnownPolicies:\n              ebsCSIController: true\n        - metadata:\n              name: cluster-autoscaler\n              namespace: kube-system\n          wellKnownPolicies:\n              autoScaler: true\n        - metadata:\n              name: cert-manager\n              namespace: cert-manager\n          wellKnownPolicies:\n              certManager: true\n        - metadata:\n              name: external-dns\n              namespace: external-dns\n          wellKnownPolicies:\n              externalDNS: true","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":172,"to":200}}}}],["1932",{"pageContent":"# Uncomment and update for your region if you wish to use fewer availability zones\n# availabilityZones:\n#   - eu-west-1a\n#   - eu-west-1b\n#   - eu-west-1c\n\n# By default we create a dedicated VPC for the cluster\n# You can use an existing VPC by supplying private and/or public subnets. Please check\n# https://eksctl.io/usage/vpc-networking/#use-existing-vpc-other-custom-configuration\nvpc:\n    autoAllocateIPv6: false\n    nat:\n        # For production environments use HighlyAvailable, for an initial deployment Single adequate\n        # HighlyAvailable will consume 3 Elastic IPs so ensure your region has capacity before using\n        # https://eksctl.io/usage/vpc-networking/#nat-gateway\n        gateway: Single","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":202,"to":217}}}}],["1933",{"pageContent":"# Cluster endpoints and public access\n    # Private access ensures that nodes can communicate internally in case of NAT failure\n    # For customizing for your environment review https://eksctl.io/usage/vpc-cluster-access/\n    clusterEndpoints:\n        privateAccess: true\n        publicAccess: true\n    publicAccessCIDRs: ['0.0.0.0/0']\n\n# Logging settings\ncloudWatch:\n    clusterLogging:\n        enableTypes: ['*']\n\n# Nodegroups / Compute settings\nmanagedNodeGroups:\n    - name: default\n      amiFamily: Ubuntu2004\n      spot: false\n      instanceTypes: ['m6i.4xlarge']\n      desiredCapacity: 1\n      minSize: 1\n      maxSize: 50\n      maxPodsPerNode: 110\n      disableIMDSv1: false\n      volumeSize: 512\n      volumeType: gp3\n      volumeIOPS: 6000\n      volumeThroughput: 500\n      ebsOptimized: true\n      privateNetworking: true\n      propagateASGTags: true","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":219,"to":249}}}}],["1934",{"pageContent":"iam:\n          attachPolicyARNs:\n              - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly\n              - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy\n              - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy\n              - arn:aws:iam::aws:policy/ElasticLoadBalancingFullAccess\n              - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore\n\n      tags:\n          k8s.io/cluster-autoscaler/enabled: 'true'\n          # Important - If you change the name of your EKS cluster from the\n          # default cluster name (\"gitpod-pov\"), update this tag to match\n          # your cluster (`k8s.io/cluster-autoscaler/<cluster-name>: \"owned\"`)\n          #\n          # For example: `k8s.io/cluster-autoscaler/gitpod-corp-pov: \"owned\"`\n          k8s.io/cluster-autoscaler/gitpod-pov: 'owned'","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":251,"to":266}}}}],["1935",{"pageContent":"labels:\n          gitpod.io/workload_meta: 'true'\n          gitpod.io/workload_ide: 'true'\n          gitpod.io/workload_workspace_regular: 'true'\n          gitpod.io/workload_workspace_services: 'true'\n          gitpod.io/workload_workspace_headless: 'true'\n\n      preBootstrapCommands:\n          - echo \"export USE_MAX_PODS=false\" >> /etc/profile.d/bootstrap.sh\n          - echo \"export CONTAINER_RUNTIME=containerd\" >> /etc/profile.d/bootstrap.sh\n          - sed -i '/^set -o errexit/a\\\\nsource /etc/profile.d/bootstrap.sh' /etc/eks/bootstrap.sh","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":268,"to":278}}}}],["1936",{"pageContent":"```\n\nTo ensure there are enough IPs and networking policy enforcement is in place, this proof of value reference architecture uses Calico for networking. To enable Calico in an EKS installation it must be done after the control plane has been provisioned and before the nodegroups have been created.\n\nFirst: Run `eksctl` with the `--without-nodegroup` flag to provision just the control plane defined in the `gitpod-cluster.yaml`:\n\n```bash\neksctl create cluster --without-nodegroup --config-file gitpod-cluster.yaml","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":279,"to":286}}}}],["1937",{"pageContent":"```\n\nThis should result in the following output:\n\n```\n2022-08-11 22:10:23 [ℹ]  eksctl version 0.107.0\n2022-08-11 22:10:23 [ℹ]  using region eu-west-1\n2022-08-11 22:10:23 [ℹ]  setting availability zones to [eu-west-1b eu-west-1a eu-west-1c]\n2022-08-11 22:10:23 [ℹ]  subnets for eu-west-1b - public:192.168.0.0/19 private:192.168.96.0/19\n2022-08-11 22:10:23 [ℹ]  subnets for eu-west-1a - public:192.168.32.0/19 private:192.168.128.0/19\n2022-08-11 22:10:23 [ℹ]  subnets for eu-west-1c - public:192.168.64.0/19 private:192.168.160.0/19\n2022-08-11 22:10:23 [ℹ]  using Kubernetes version 1.22\n[...]\n2022-08-11 22:27:06 [✔]  EKS cluster \"gitpod-pov\" in \"eu-west-1\" region is ready\n```\n\nAfter this command finishes, check that `eksctl` also created the kubeconfig properly by running the command `kubectl get pods -n kube-system`. If deployed correctly one should see the list of pods in a pending state.\n\n```bash\nkubectl get pods -n kube-system","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":287,"to":306}}}}],["1938",{"pageContent":"```\n\nThis should result in:\n\n```\nNAME                       READY   STATUS    RESTARTS   AGE\ncoredns-5947f47f5f-79vqv   0/1     Pending   0          22m\ncoredns-5947f47f5f-97f8m   0/1     Pending   0          22m\n```\n\n**Calico Installation**\n\nThis is following the instructions provided by [Tigera](https://projectcalico.docs.tigera.io/getting-started/kubernetes/managed-public-cloud/eks).\n\nTo install Calico, first remove the default AWS-provided networking component:\n\n```bash\nkubectl delete daemonset -n kube-system aws-node\n```\n\nInstall the Calico manifest:\n\n```bash\nkubectl apply -f https://projectcalico.docs.tigera.io/manifests/calico-vxlan.yaml\n```\n\nNow configure Calico for EKS-specific support with the following command:\n\n```bash\nkubectl -n kube-system set env daemonset/calico-node FELIX_AWSSRCDSTCHECK=Disable","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":307,"to":336}}}}],["1939",{"pageContent":"```\n\nNow configure Calico for EKS-specific support with the following command:\n\n```bash\nkubectl -n kube-system set env daemonset/calico-node FELIX_AWSSRCDSTCHECK=Disable\n```\n\n**SSH Access to nodegroups**\n\n`eksctl` allows for [ssh keys](https://eksctl.io/usage/schema/#managedNodeGroups-ssh) to be added to your nodegroups for troubleshooting. By default, the `gitpod-cluster.yaml` does not configure this. AWS Systems Manager is enabled by default, allowing for connectivity [through multiple methods](https://docs.aws.amazon.com/systems-manager/latest/userguide/session-manager-working-with-sessions-start.html) to each instance in your nodegroup.\n\n**Create the gitpod nodegroup**\n\nOnce the Calico CNI has been provisioned the gitpod nodegroup can be created.\n\nCreate the Gitpod nodegroup:\n\n```bash\neksctl create nodegroup --include=default --config-file gitpod-cluster.yaml","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":336,"to":355}}}}],["1940",{"pageContent":"```\n\nThis should result in:\n\n```\n2022-08-11 22:52:10 [ℹ]  nodegroup \"default\" will use \"ami-0733d755ed2c97a4d\" [Ubuntu2004/1.22]\n2022-08-11 22:52:13 [ℹ]  combined include rules: default\n2022-08-11 22:52:13 [ℹ]  1 nodegroup (default) was included (based on the include/exclude rules)\n2022-08-11 22:52:13 [ℹ]  will create a CloudFormation stack for each of 1 managed nodegroups in cluster \"gitpod-pov\"\n[...]\n2022-08-11 22:56:53 [ℹ]  node \"ip-192-168-104-44.eu-west-1.compute.internal\" is ready\n2022-08-11 22:56:53 [✔]  created 1 managed nodegroup(s) in cluster \"gitpod-pov\"\n2022-08-11 22:56:57 [ℹ]  checking security group configuration for all nodegroups\n2022-08-11 22:56:57 [ℹ]  all nodegroups have up-to-date cloudformation templates","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":356,"to":369}}}}],["1941",{"pageContent":"```\n\nYou can verify that your installation was deployed properly with the custom `kubectl` command provided below which will let you review maxpods, kernel and containerd versions to ensure they are meeting [our minimum requirements](../../latest/cluster-set-up) as intended.\n\n```bash\nkubectl get nodes -o=custom-columns=\"NAME:.metadata.name,\\\nRUNTIME:.status.nodeInfo.containerRuntimeVersion,\\\nMAXPODS:.status.capacity.pods,\\\nKERNEL:.status.nodeInfo.kernelVersion,\\\nAMIFAMILY:.status.nodeInfo.osImage,\\\nK8S:.status.nodeInfo.kubeletVersion,\\\nInstance-ID:.spec.providerID\"","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":370,"to":381}}}}],["1942",{"pageContent":"```\n\n**Enable cluster autoscaling**\n\nGitpod's resource usage will vary depending on the number of active workspaces and image prebuilds during the day. The use of a cluster autoscaler is recommended to provision and remove EKS nodes on demand.\n\n```bash\nCLUSTER_NAME=\"gitpod-pov\"\nAWS_REGION=\"eu-west-1\"","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":382,"to":390}}}}],["1943",{"pageContent":"```bash\nCLUSTER_NAME=\"gitpod-pov\"\nAWS_REGION=\"eu-west-1\"\n\nhelm repo add autoscaler https://kubernetes.github.io/autoscaler\nhelm repo update\nhelm upgrade \\\n    --atomic \\\n    --cleanup-on-fail \\\n    --install \\\n    --namespace kube-system \\\n    --reset-values \\\n    --wait \\\n    --set cloudProvider=aws \\\n    --set awsRegion=$AWS_REGION \\\n    --set autoDiscovery.clusterName=$CLUSTER_NAME \\\n    --set rbac.serviceAccount.create=false \\\n    --set rbac.serviceAccount.name=cluster-autoscaler \\\n    --set securityContext.fsGroup=65534 \\\n    --set extraArgs.skip-nodes-with-local-storage=false \\\n    --set extraArgs.skip-nodes-with-system-pods=false \\\n    --set extraArgs.expander=least-waste \\\n    --set extraArgs.balance-similar-node-groups=true \\\n    --set extraArgs.scale-down-utilization-threshold=0.2 \\\n    --set extraArgs.v=2 \\\n    autoscaler autoscaler/cluster-autoscaler","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":390,"to":415}}}}],["1944",{"pageContent":"```\n\n**Deleting the cluster**\n\nWhen deleting this cluster following your proof of value evaluation, any additional resources added to the VPC will need to be deleted before deleting the cluster, otherwise, cloudformations will fail to delete the VPC and complete deleting the cluster. The alternative is to create a VPC managed separately and install EKS using the additions for working [with existing VPCs](https://eksctl.io/usage/vpc-networking/#use-existing-vpc-other-custom-configuration) in `eksctl`.\n\nFull removal of the installed components would look something like this (commands are grouped for brevity):\n\n```bash\neksctl delete cluster --name gitpod --force --disable-nodegroup-eviction --wait","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":416,"to":425}}}}],["1945",{"pageContent":"#### The following removal steps are optional; if you plan on creating another Gitpod installation then the S3 bucket,\n#### access account, key, and policy can be kept for later use.\n\n#### delete s3 resources\naws s3 rm s3://${S3_BUCKET_NAME} --recursive\naws s3 rb s3://${S3_BUCKET_NAME} --force\n\n#### delete iam resources\naws iam detach-user-policy --user-name gitpod-s3-access --policy-arn 'arn:aws:iam::12344:policy/gitpod_s3_access_policy'\n\n# delete access keys:\naws iam list-access-keys --user-name gitpod-s3-access\naws iam delete-access-key --user-name gitpod-s3-access --access-key-id AKI---------\naws iam delete-user --user-name gitpod-s3-access\n\n# ensure that nothing else is attached to this policy\naws iam list-entities-for-policy --policy-arn 'arn:aws:iam::12344:policy/gitpod_s3_access_policy'\naws iam delete-policy --policy-arn 'arn:aws:iam::12344:policy/gitpod_s3_access_policy'\n```\n\n</div>\n\n</CloudPlatformToggle>","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":427,"to":449}}}}],["1946",{"pageContent":"## Networking\n\n<Networking />","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":451,"to":453}}}}],["1947",{"pageContent":"## Install Gitpod\n\nCongratulations. You have set up your cluster. Now, you are ready to install Gitpod. Follow the instructions of the [installation guide](/docs/configure/self-hosted/latest/installing-gitpod).\n\nIf you followed the steps to create your infrastructure of this guide, you need to use the following config settings for your Gitpod installation:\n\n| General settings |                    |\n| ---------------- | ------------------ |\n| Domain name      | value of `$DOMAIN` |\n\nKeep cert-manager selected for the TLS certificates options.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":455,"to":465}}}}],["1948",{"pageContent":"| TLS certificates            | &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |\n| --------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| Self-signed TLS certificate | no                                                                                                                                                                                                                       |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":467,"to":469}}}}],["1949",{"pageContent":"| cert-manager                | yes                                                                                                                                                                                                                      |\n| Issuer name                 | `gitpod-issuer`                                                                                                                                                                                                          |\n| Issuer type                 | Select “cluster issuer”                                                                                                                                                                                                  |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":470,"to":472}}}}],["1950",{"pageContent":"| Additional features                                                     | &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":474,"to":474}}}}],["1951",{"pageContent":"| ----------------------------------------------------------------------- ||","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":475,"to":475}}}}],["1952",{"pageContent":"| Allow login to your workspace via SSH (if you wish to use desktop IDEs) | ✅|","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/proof-of-value","loc":{"lines":{"from":476,"to":476}}}}],["1953",{"pageContent":"---\nsection: self-hosted/latest\nsubsection: installation-guides\ntitle: 'Single-Cluster Reference Architecture'\n---\n\n<script lang=\"ts\">\n\n  import Overview from \"./_chunks/overview.md\";\n  import Preparations from \"./_chunks/preparations.md\";\n  import Cluster from \"./_chunks/cluster.md\";\n  import Networking from \"./_chunks/networking.md\";\n  import Registry from \"./_chunks/registry.md\";\n  import Database from \"./_chunks/database.md\";\n  import Storage from \"./_chunks/storage.md\";\n  import Install from \"./_chunks/install.md\";\n  import BigPill from \"$lib/components/big-pill.svelte\";\n  import Tooltip from \"$lib/components/tooltip.svelte\";\n</script>\n\n# Single-Cluster Reference Architecture for Production Purposes","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/single-cluster-ref-arch","loc":{"lines":{"from":1,"to":21}}}}],["1954",{"pageContent":"# Single-Cluster Reference Architecture for Production Purposes\n\n> ⚠️ **Gitpod Self-hosted is [no longer supported](/blog/introducing-gitpod-dedicated)**\n>\n> The last update of Gitpod Self-hosted product was [November 2022](/changelog/november-self-hosted-release). Users can still request our [free community license](/community-license) however there will be no support or updates to the product. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/single-cluster-ref-arch","loc":{"lines":{"from":21,"to":25}}}}],["1955",{"pageContent":"|                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        |                                                                                                                                                                                                                                                                                                                                                                                                                             |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/single-cluster-ref-arch","loc":{"lines":{"from":27,"to":27}}}}],["1956",{"pageContent":"| ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/single-cluster-ref-arch","loc":{"lines":{"from":28,"to":28}}}}],["1957",{"pageContent":"| Status:                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                | <BigPill text=\"alpha\" class=\"ml-1.5\" />                                                                                                                                                                                                                                                                                                                                                                                     |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/single-cluster-ref-arch","loc":{"lines":{"from":29,"to":29}}}}],["1958",{"pageContent":"| Intended for:                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          | Continous usage of Gitpod at a company-wide scale in a reliable way by leveraging popular cloud provider services such as S3 and RDS.                                                                                                                                                                                                                                                                                       |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/single-cluster-ref-arch","loc":{"lines":{"from":30,"to":30}}}}],["1959",{"pageContent":"| Limitations:                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           | - This is bound to a single cluster. Deploying in several regions currently requires setting up several Gitpod installations <br /> - Creates external dependencies for Gitpod componenents (object storage, registry, database) <br /> - This is not highly available and requires downtime to upgrade (high availability requires a governed workspace cluster, which is beyond the scope of this reference architecture) |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/single-cluster-ref-arch","loc":{"lines":{"from":31,"to":31}}}}],["1960",{"pageContent":"| Terraform: <Tooltip title=\"These terraform configurations enable you to create the architecture described in <br /> this document in an automated way. We use these scripts internally to test new <br />releases against this architecture. They should be seen as examples that you can <br /> use to create your own environment.\"/>                                                                                                                                                                | - [Example Terraform configuration for GCP](https://github.com/gitpod-io/gitpod/tree/main/install/infra/single-cluster/gcp) <br /> - [Example Terraform configuration for AWS](https://github.com/gitpod-io/gitpod/tree/main/install/infra/single-cluster/aws)                                                                                                                                                              |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/single-cluster-ref-arch","loc":{"lines":{"from":32,"to":32}}}}],["1961",{"pageContent":"| Cost Estimates: <Tooltip title=\"These cost estimates do not include egress. However, we typically see egress cost to be an <br />additional 15% on top of the estimates here.  These estimates are just examples, <br /> the exact cost will depend on your set-up and usage profile - your cost <em>will</em> deviate.  <br />With  the configuration in these estimates, you are able to run 36 concurrent basic <br />  workspaces - assuming the same density as currently used in Gitpod SaaS.\"/> | High-level cost estimates\\*: <br /> - [GCP](https://cloudpricingcalculator.appspot.com#!?id=53d776be-60fa-4fe9-a64b-ae4c80e74645) <br /> - [AWS](https://calculator.aws/#/estimate?id=6df1417288724042faf49eed70fb8ea0f6e80c13)                                                                                                                                                                                             |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/single-cluster-ref-arch","loc":{"lines":{"from":33,"to":33}}}}],["1962",{"pageContent":"This guide describes a single-cluster reference architecture for Gitpod aimed at production environments: continuous deployments of Gitpod used in anger by your engineers. It consists of a Kubernetes cluster, cert-manager, external MySQL database, external OCI image registry, and external object storage. It includes instructions on how to set up this reference architecture on the officially supported cloud providers.\n\nThis reference architecture can be used as a blueprint for your Gitpod installation: Start with this reference architecture and adapt it to your needs. The reference architecture as described in this guide is what Gitpod supports, and is used to test against every self-hosted Gitpod release.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/single-cluster-ref-arch","loc":{"lines":{"from":35,"to":37}}}}],["1963",{"pageContent":"To use Gitpod, you also need a Git source code management system (SCM) like GitLab, GitHub, or Bitbucket. You will find the supported SCMs in the [product compatibility matrix](/docs/references/compatibility?admin) your own SCM is beyond the scope of this guide. However, you can simply use the cloud versions of GitLab, GitHub, or Bitbucket as well as the possible existing installation in your corporate network.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/single-cluster-ref-arch","loc":{"lines":{"from":39,"to":39}}}}],["1964",{"pageContent":"## Overview\n\n<Overview />\n\n## Cloud Provider Preparations\n\n<Preparations />\n\n## Kubernetes Cluster\n\n<Cluster />\n\n## Networking\n\n<Networking />\n\n## Object Storage\n\n<Storage />\n\n## OCI Image Registry\n\n<Registry />\n\n## Database\n\n<Database />\n\n## Install Gitpod\n\n<Install />","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/single-cluster-ref-arch","loc":{"lines":{"from":41,"to":71}}}}],["1965",{"pageContent":"---\nsection: self-hosted/latest\nsubsection: reference\ntitle: Self-Hosted Gitpod Releases and Versioning\n---\n\n# Self-Hosted Gitpod Releases and Versioning\n\n> ⚠️ **Gitpod Self-hosted is [no longer supported](/blog/introducing-gitpod-dedicated)**\n>\n> The last update of Gitpod Self-hosted product was [November 2022](/changelog/november-self-hosted-release). Users can still request our [free community license](/community-license) however there will be no support or updates to the product. If you are interested in an isolated, private installation of Gitpod, take a look at [Gitpod Dedicated](/dedicated).","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/releases","loc":{"lines":{"from":1,"to":11}}}}],["1966",{"pageContent":"### Release Policy\n\nGitpod Self-Hosted is released once a month, usually at the end of each month. The versioning schema is: `YYYY.MM.V`. Each new version of self-hosted Gitpod includes all of the changes made to Gitpod up to the release date. This means that the self-hosted version of Gitpod is at most one month behind the SaaS version. Outside of the regular monthly releases, hot-fix releases are possible to add functionality or fix bugs. Hot fix releases increment the `V` in the aforementioned versioning schema.\n\n### Support Policy\n\nGitpod is committed to supporting the last 2 versions of self-hosted Gitpod with patches and security updates.\n\n### Roll out Policy\n\nNew versions are first rolled out to all users that are on the `community` license, i.e. are on the stable branch. Customers with a paid license receive the newest version one week later.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/releases","loc":{"lines":{"from":13,"to":23}}}}],["1967",{"pageContent":"### Testing Policy\n\n<!-- ToDo: link to reference architecture once this is shipped -->\n\nFor each release, we validate that core Gitpod workflows function as expected via a series of automated and manual tests. These tests are performed on different Gitpod installations running on our [reference architectures](../latest/reference-architecture). This should help ensure that Gitpod works for you, assuming your architecture is close to the reference architecture.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/releases","loc":{"lines":{"from":25,"to":29}}}}],["1968",{"pageContent":"---\nlayout: false\n---\n\n<script lang=\"ts\">\n  import CloudPlatformToggle from \"$lib/components/docs/cloud-platform-toggle.svelte\";\n</script>\n\nThe heart of this reference architecture is a **Kubernetes cluster** where all Gitpod components are deployed to. This cluster consists of three node pools:\n\n1. **Services Node Pool**: The Gitpod “app” with all its services is deployed to these nodes. These services provide the users with the dashboard and manage the provisioning of workspaces.\n2. **Regular Workspaces Node Pool**: Gitpod deploys the actual workspaces (where the actual developer work is happening) to these nodes.\n3. **Headless Workspace Node Pool**: Gitpod deploys the imagebuild and prebuild workspaces (where build work generally demands more CPU and disk) to these needs.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":1,"to":13}}}}],["1969",{"pageContent":"Gitpod services, headless, and regular workspaces have vastly differing resource and isolation requirements. These workloads are separated onto different node pools to provide a better quality of service and security guarantees.\n\nYou need to assign the following labels to the node pools to enforce that the Gitpod components are scheduled to the proper node pools:","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":15,"to":17}}}}],["1970",{"pageContent":"You need to assign the following labels to the node pools to enforce that the Gitpod components are scheduled to the proper node pools:\n\n| Node Pool                    | Labels                                                                                                              |\n| ---------------------------- | ------------------------------------------------------------------------------------------------------------------- |\n| Services Node Pool           | `gitpod.io/workload_meta=true`,<br/>`gitpod.io/workload_ide=true`,<br/>`gitpod.io/workload_workspace_services=true` |\n| Regular Workspace Node Pool  | `gitpod.io/workload_workspace_regular=true`                                                                         |\n| Headless Workspace Node Pool | `gitpod.io/workload_workspace_headless=true`                                                                        |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":17,"to":23}}}}],["1971",{"pageContent":"The following table gives an overview of the node types for the different cloud providers that are used by this reference architecture.\n\n|                              | GCP               | AWS           | Azure             |\n| ---------------------------- | ----------------- | ------------- | ----------------- |\n| Services Node Pool           | `n2d-standard-4`  | `m6i.xlarge`  | `Standard_D4_v4`  |\n| Regular Workspace Node Pool  | `n2d-standard-16` | `m6i.4xlarge` | `Standard_D16_v4` |\n| Headless Workspace Node Pool | `n2d-standard-16` | `m6i.4xlarge` | `Standard_D16_v4` |\n\n<CloudPlatformToggle id=\"cloud-platform-toggle-cluster\">\n\n<div slot=\"gcp\">\n\nFirst, we [create a **service account**](https://cloud.google.com/iam/docs/creating-managing-service-accounts) for the cluster. The service account needs to have the following roles:","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":25,"to":37}}}}],["1972",{"pageContent":"First, we [create a **service account**](https://cloud.google.com/iam/docs/creating-managing-service-accounts) for the cluster. The service account needs to have the following roles:\n\n| Roles                         |\n| ----------------------------- |\n| roles/storage.admin           |\n| roles/logging.logWriter       |\n| roles/monitoring.metricWriter |\n| roles/container.admin         |\n\nRun the following commands to create the service account:","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":37,"to":46}}}}],["1973",{"pageContent":"Run the following commands to create the service account:\n\n```bash\nGKE_SA=gitpod-gke\nGKE_SA_EMAIL=\"${GKE_SA}\"@\"${PROJECT_NAME}\".iam.gserviceaccount.com\ngcloud iam service-accounts create \"${GKE_SA}\" --display-name \"${GKE_SA}\"\ngcloud projects add-iam-policy-binding \"${PROJECT_NAME}\" --member serviceAccount:\"${GKE_SA_EMAIL}\" --role=\"roles/storage.admin\"\ngcloud projects add-iam-policy-binding \"${PROJECT_NAME}\" --member serviceAccount:\"${GKE_SA_EMAIL}\" --role=\"roles/logging.logWriter\"\ngcloud projects add-iam-policy-binding \"${PROJECT_NAME}\" --member serviceAccount:\"${GKE_SA_EMAIL}\" --role=\"roles/monitoring.metricWriter\"\ngcloud projects add-iam-policy-binding \"${PROJECT_NAME}\" --member serviceAccount:\"${GKE_SA_EMAIL}\" --role=\"roles/container.admin\"","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":46,"to":55}}}}],["1974",{"pageContent":"```\n\nAfter that, we [create a **Kubernetes cluster**](https://cloud.google.com/kubernetes-engine/docs/how-to/creating-a-regional-cluster).","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":56,"to":58}}}}],["1975",{"pageContent":"|                           |                                                                                                             |\n| ------------------------- | ----------------------------------------------------------------------------------------------------------- |\n| Image Type                | `UBUNTU_CONTAINERD`                                                                                         |\n| Machine Type              | `e2-standard-2`                                                                                             |\n| Cluster Version           | Choose latest from [regular channel](https://cloud.google.com/kubernetes-engine/docs/release-notes-regular) |\n| Enable                    | Autoscaling,<br/>Autorepair,<br/>IP Alias,<br/>Network Policy                                               |\n| Disable                   | Autoupgrade<br/>`metadata=disable-legacy-endpoints=true`                                                    |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":60,"to":66}}}}],["1976",{"pageContent":"| Disable                   | Autoupgrade<br/>`metadata=disable-legacy-endpoints=true`                                                    |\n| Create Subnetwork         | `gitpod-${CLUSTER_NAME}`                                                                                    |\n| Max Pods per Node         | 10                                                                                                          |\n| Default Max Pods per Node | 110                                                                                                         |\n| Min Nodes                 | 0                                                                                                           |\n| Max Nodes                 | 1                                                                                                           |\n| Addons                    | HorizontalPodAutoscaling,<br/>NodeLocalDNS,<br/>NetworkPolicy                                               |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":66,"to":72}}}}],["1977",{"pageContent":"| Addons                    | HorizontalPodAutoscaling,<br/>NodeLocalDNS,<br/>NetworkPolicy                                               |\n| Region                    | Choose your [region and zones](https://cloud.google.com/compute/docs/regions-zones)                         |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":72,"to":73}}}}],["1978",{"pageContent":"```bash\nCLUSTER_NAME=gitpod\nREGION=us-central1\nGKE_VERSION=1.22.12-gke.1200\n\ngcloud container clusters \\\n    create \"${CLUSTER_NAME}\" \\\n    --disk-type=\"pd-ssd\" --disk-size=\"50GB\" \\\n    --image-type=\"UBUNTU_CONTAINERD\" \\\n    --machine-type=\"e2-standard-2\" \\\n    --cluster-version=\"${GKE_VERSION}\" \\\n    --region=\"${REGION}\" \\\n    --service-account \"${GKE_SA_EMAIL}\" \\\n    --num-nodes=1 \\\n    --no-enable-basic-auth \\\n    --enable-autoscaling \\\n    --enable-autorepair \\\n    --no-enable-autoupgrade \\\n    --enable-ip-alias \\\n    --enable-network-policy \\\n    --create-subnetwork name=\"gitpod-${CLUSTER_NAME}\" \\\n    --metadata=disable-legacy-endpoints=true \\\n    --max-pods-per-node=110 \\\n    --default-max-pods-per-node=110 \\\n    --min-nodes=0 \\\n    --max-nodes=1 \\\n    --addons=HorizontalPodAutoscaling,NodeLocalDNS,NetworkPolicy","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":75,"to":101}}}}],["1979",{"pageContent":"```\n\nUnfortunately, you cannot create a cluster without the default node pool. Since we need a custom node pool, you need to remove the default one.\n\n<!-- Can we re-use the default node pool instead? → https://github.com/gitpod-io/website/pull/2106#discussion_r893885815 -->\n\n```bash\ngcloud --quiet container node-pools delete default-pool \\\n    --cluster=\"${CLUSTER_NAME}\" --region=\"${REGION}\"","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":102,"to":110}}}}],["1980",{"pageContent":"```\n\nNow, we are [creating a **node pool**](https://cloud.google.com/kubernetes-engine/docs/how-to/node-pools) **for the Gitpod services**.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":111,"to":113}}}}],["1981",{"pageContent":"|                   |                                                                                     |\n| ----------------- | ----------------------------------------------------------------------------------- |\n| Image Type        | `UBUNTU_CONTAINERD`                                                                 |\n| Machine Type      | `n2d-standard-4`                                                                    |\n| Enable            | Autoscaling<br/>Autorepair<br/>IP Alias<br/>Network Policy                          |\n| Disable           | Autoupgrade<br/>`metadata=disable-legacy-endpoints=true`                            |\n| Create Subnetwork | `gitpod-${CLUSTER_NAME}`                                                            |\n| Number of nodes   | 1                                                                                   |\n| Min Nodes         | 1                                                                                   |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":115,"to":123}}}}],["1982",{"pageContent":"| Min Nodes         | 1                                                                                   |\n| Max Nodes         | 50                                                                                  |\n| Max Pods per Node | 110                                                                                 |\n| Scopes            | `gke-default`,<br/>`https://www.googleapis.com/auth/ndev.clouddns.readwrite`        |\n| Region            | Choose your [region and zones](https://cloud.google.com/compute/docs/regions-zones) |\n| Node Labels       | `gitpod.io/workload_meta=true`,<br/>`gitpod.io/workload_ide=true`                   |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":123,"to":128}}}}],["1983",{"pageContent":"```bash\ngcloud container node-pools \\\n    create \"workload-services\" \\\n    --cluster=\"${CLUSTER_NAME}\" \\\n    --disk-type=\"pd-ssd\" \\\n    --disk-size=\"100GB\" \\\n    --image-type=\"UBUNTU_CONTAINERD\" \\\n    --machine-type=\"n2d-standard-4\" \\\n    --num-nodes=1 \\\n    --no-enable-autoupgrade \\\n    --enable-autorepair \\\n    --enable-autoscaling \\\n    --metadata disable-legacy-endpoints=true \\\n    --scopes=\"gke-default,https://www.googleapis.com/auth/ndev.clouddns.readwrite\" \\\n    --node-labels=\"gitpod.io/workload_meta=true,gitpod.io/workload_ide=true,gitpod.io/workload_workspace_services=true\" \\\n    --max-pods-per-node=110 \\\n    --min-nodes=1 \\\n    --max-nodes=4 \\\n    --region=\"${REGION}\"","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":130,"to":148}}}}],["1984",{"pageContent":"```\n\nWe are also creating a **node pool for the Gitpod regular workspaces**.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":149,"to":151}}}}],["1985",{"pageContent":"|                   |                                                                                     |\n| ----------------- | ----------------------------------------------------------------------------------- |\n| Image Type        | `UBUNTU_CONTAINERD`                                                                 |\n| Machine Type      | `n2d-standard-16`                                                                   |\n| Enable            | Autoscaling,<br/>Autorepair,<br/>IP Alias,<br/>Network Policy                       |\n| Disable           | Autoupgrade<br/>`metadata=disable-legacy-endpoints=true`                            |\n| Create Subnetwork | `gitpod-${CLUSTER_NAME}`                                                            |\n| Number of nodes   | 1                                                                                   |\n| Min Nodes         | 1                                                                                   |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":153,"to":161}}}}],["1986",{"pageContent":"| Min Nodes         | 1                                                                                   |\n| Max Nodes         | 50                                                                                  |\n| Max Pods per Node | 110                                                                                 |\n| Scopes            | `gke-default`,<br/>`https://www.googleapis.com/auth/ndev.clouddns.readwrite`        |\n| Region            | Choose your [region and zones](https://cloud.google.com/compute/docs/regions-zones) |\n| Node Labels       | `gitpod.io/workload_workspace_regular=true`                                         |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":161,"to":166}}}}],["1987",{"pageContent":"```bash\ngcloud container node-pools \\\n    create \"workload-regular-workspaces\" \\\n    --cluster=\"${CLUSTER_NAME}\" \\\n    --disk-type=\"pd-ssd\" \\\n    --disk-size=\"512GB\" \\\n    --image-type=\"UBUNTU_CONTAINERD\" \\\n    --machine-type=\"n2d-standard-16\" \\\n    --num-nodes=1 \\\n    --no-enable-autoupgrade \\\n    --enable-autorepair \\\n    --enable-autoscaling \\\n    --metadata disable-legacy-endpoints=true \\\n    --scopes=\"gke-default,https://www.googleapis.com/auth/ndev.clouddns.readwrite\" \\\n    --node-labels=\"gitpod.io/workload_workspace_regular=true\" \\\n    --max-pods-per-node=110 \\\n    --min-nodes=1 \\\n    --max-nodes=50 \\\n    --region=\"${REGION}\"","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":168,"to":186}}}}],["1988",{"pageContent":"```\n\nWe are also creating a **node pool for the Gitpod headless workspaces**.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":187,"to":189}}}}],["1989",{"pageContent":"|                   |                                                                                     |\n| ----------------- | ----------------------------------------------------------------------------------- |\n| Image Type        | `UBUNTU_CONTAINERD`                                                                 |\n| Machine Type      | `n2d-standard-16`                                                                   |\n| Enable            | Autoscaling,<br/>Autorepair,<br/>IP Alias,<br/>Network Policy                       |\n| Disable           | Autoupgrade<br/>`metadata=disable-legacy-endpoints=true`                            |\n| Create Subnetwork | `gitpod-${CLUSTER_NAME}`                                                            |\n| Number of nodes   | 1                                                                                   |\n| Min Nodes         | 1                                                                                   |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":189,"to":197}}}}],["1990",{"pageContent":"| Min Nodes         | 1                                                                                   |\n| Max Nodes         | 50                                                                                  |\n| Max Pods per Node | 110                                                                                 |\n| Scopes            | `gke-default`,<br/>`https://www.googleapis.com/auth/ndev.clouddns.readwrite`        |\n| Region            | Choose your [region and zones](https://cloud.google.com/compute/docs/regions-zones) |\n| Node Labels       | `gitpod.io/workload_workspace_headless=true`                                        |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":235,"to":240}}}}],["1991",{"pageContent":"```bash\ngcloud container node-pools \\\n    create \"workload-headless-workspaces\" \\\n    --cluster=\"${CLUSTER_NAME}\" \\\n    --disk-type=\"pd-ssd\" \\\n    --disk-size=\"512GB\" \\\n    --image-type=\"UBUNTU_CONTAINERD\" \\\n    --machine-type=\"n2d-standard-16\" \\\n    --num-nodes=1 \\\n    --no-enable-autoupgrade \\\n    --enable-autorepair \\\n    --enable-autoscaling \\\n    --metadata disable-legacy-endpoints=true \\\n    --scopes=\"gke-default,https://www.googleapis.com/auth/ndev.clouddns.readwrite\" \\\n    --node-labels=\"gitpod.io/workload_workspace_headless=true\" \\\n    --max-pods-per-node=110 \\\n    --min-nodes=1 \\\n    --max-nodes=50 \\\n    --region=\"${REGION}\"","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":242,"to":260}}}}],["1992",{"pageContent":"```\n\nNow, you can **connect `kubectl`** to your newly created cluster.\n\n```bash\ngcloud container clusters get-credentials --region=\"${REGION}\" \"${CLUSTER_NAME}\"\n```\n\nAfter that, you need to create cluster role bindings to allow the current user to create new RBAC rules.\n\n```bash\nkubectl create clusterrolebinding cluster-admin-binding \\\n    --clusterrole=cluster-admin \\\n    --user=\"$(gcloud config get-value core/account)\"","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":261,"to":274}}}}],["1993",{"pageContent":"```\n\n</div>\n<div slot=\"aws\">\n\n> **Note:** By default, when Gitpod is being installed using the instructions here, EKS will create a classic load balancer that you can point your DNS entries at. If you are unable to use a AWS Classic Load Balancer (e.g. because you use SSL certificates generated by AWS), please follow [the Setting up your EKS cluster with dual ALB + NLB load balancers guide](../advanced/eks-with-alb-and-nlb) _alongside_ this reference architecture guide.\n\nFor `eksctl`, configuring the cluster and the node groups cannot happen simultaneously. You need to deploy the cluster control plane first, do modifications to the network stack (Calico), and then provision the node groups. This ensures you have the maximum number of pods available (110 in most cases) to run Gitpod workspaces.\n\nThe example `eksctl` config file includes services accounts that might not be relevant to a particular deployment, but are included for reference.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":275,"to":284}}}}],["1994",{"pageContent":"The example `eksctl` config file includes services accounts that might not be relevant to a particular deployment, but are included for reference.\n\n-   `cert-manager` provided for the required cert-manager tooling. If using DNS-01 challenges for Let's Encrypt with a Route53 zone, then enable the cert-manager `wellKnownPolicies` or ensure one exists with permissions to modify records in the zone\n-   `aws-load-balancer-controller` enables ELB creation for LoadBalancer services and integration with AWS Application Load Balancers\n-   `cluster-autoscaler` connects to the AWS autoscaler\n-   `ebs-csi-controller-sa` enables provisioning of the EBS volumes for PVC storage\n\nProvided below is a complete `eksctl` configuration file that will deploy all the components required for an EKS installation to support Gitpod. All references to a `gitpod-cluster.yaml` file refer to this reference.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":284,"to":291}}}}],["1995",{"pageContent":"`eksctl` will be configuring the VPC and networking along with creating the EKS cluster itself, if you need to use pre-existing networking provisioned by another team or department, refer to the [custom VPC documentation](https://eksctl.io/usage/vpc-networking/#use-existing-vpc-other-custom-configuration).\n\n<details>\n  <summary  class=\"text-p-medium\">Note on AMI Usage</summary>\n\nIn this reference example, the Ubuntu2004 AMI family is used instead of listing a specific AMI ID. This simplifies portability and allows for the use of the built-in bootstrap command instead of having to create a custom one. If you want to do more customization of your bootstrap command or use a static AMI, first, replace `amiFamily: Ubuntu2004` with `ami: ami-customid` where `ami-customid` is from Ubuntu's EKS AMI list or the output from the below command. You will then replace `preBootstrapCommands` with your bootstrap script under a new section labeled `overrideBootstrapCommand`.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":293,"to":298}}}}],["1996",{"pageContent":"```bash\naws ec2 describe-images --owners 099720109477 \\\n    --filters 'Name=name,Values=ubuntu-eks/k8s_1.22/images/*' \\\n    --query 'sort_by(Images,&CreationDate)[-1].ImageId' \\\n    --executable-users all \\\n    --output text --region us-west-2","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":300,"to":305}}}}],["1997",{"pageContent":"```\n\nRefer to `eksctl`'s documentation on [AMI Family](https://eksctl.io/usage/custom-ami-support/) for more information on its behavior.\n\n</details>\n\n<br/>\n\n**`gitpod-cluster.yaml`**\n\n```yaml\napiVersion: eksctl.io/v1alpha5\nkind: ClusterConfig\nmetadata:\n    name: gitpod\n    region: eu-west-1\n    version: '1.22'\n    # update tags to ensure all generated resources have atleast these tags applied\n    tags:\n        department: demo\n        project: gitpod\n\niam:\n    withOIDC: true","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":306,"to":329}}}}],["1998",{"pageContent":"iam:\n    withOIDC: true\n\n    serviceAccounts:\n        - metadata:\n              name: aws-load-balancer-controller\n              namespace: kube-system\n          wellKnownPolicies:\n              awsLoadBalancerController: true\n        - metadata:\n              name: ebs-csi-controller-sa\n              namespace: kube-system\n          wellKnownPolicies:\n              ebsCSIController: true\n        - metadata:\n              name: cluster-autoscaler\n              namespace: kube-system\n          wellKnownPolicies:\n              autoScaler: true\n        - metadata:\n              name: cert-manager\n              namespace: cert-manager\n          wellKnownPolicies:\n              certManager: true\n        - metadata:\n              name: external-dns\n              namespace: external-dns\n          wellKnownPolicies:\n              externalDNS: true","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":329,"to":357}}}}],["1999",{"pageContent":"# Uncomment and update for your region if you wish to use fewer availability zones\n# availabilityZones:\n#   - eu-west-1a\n#   - eu-west-1b\n#   - eu-west-1c\n\n# By default we create a dedicated VPC for the cluster\n# You can use an existing VPC by supplying private and/or public subnets. Please check\n# https://eksctl.io/usage/vpc-networking/#use-existing-vpc-other-custom-configuration\nvpc:\n    autoAllocateIPv6: false\n    nat:\n        # For production environments use HighlyAvailable, for an initial deployment Single adequate\n        # HighlyAvailable will consume 3 Elastic IPs so ensure your region has capacity before using\n        # https://eksctl.io/usage/vpc-networking/#nat-gateway\n        gateway: Single","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":359,"to":374}}}}],["2000",{"pageContent":"# Cluster endpoints and public access\n    # Private access ensures that nodes can communicate internally in case of NAT failure\n    # For customizing for your environment review https://eksctl.io/usage/vpc-cluster-access/\n    clusterEndpoints:\n        privateAccess: true\n        publicAccess: true\n    publicAccessCIDRs: ['0.0.0.0/0']\n\n# Logging settings\ncloudWatch:\n    clusterLogging:\n        enableTypes: ['*']\n\n# Nodegroups / Compute settings\nmanagedNodeGroups:\n    - name: services\n      amiFamily: Ubuntu2004\n      spot: false\n      instanceTypes: ['m6i.xlarge']\n      desiredCapacity: 2\n      minSize: 1\n      maxSize: 4\n      maxPodsPerNode: 110\n      disableIMDSv1: false\n      volumeSize: 300\n      volumeType: gp3\n      volumeIOPS: 6000\n      volumeThroughput: 500\n      ebsOptimized: true\n      privateNetworking: true\n      propagateASGTags: true","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":376,"to":406}}}}],["2001",{"pageContent":"iam:\n          attachPolicyARNs:\n              - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly\n              - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy\n              - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy\n              - arn:aws:iam::aws:policy/ElasticLoadBalancingFullAccess\n              - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore\n\n      tags:\n          k8s.io/cluster-autoscaler/enabled: 'true'\n          # Important - If you change the name of your EKS cluster from the\n          # default cluster name (\"gitpod\"), update this tag to match\n          # your cluster (`k8s.io/cluster-autoscaler/<cluster-name>: \"owned\"`)\n          #\n          # For example: `k8s.io/cluster-autoscaler/gitpod-corp: \"owned\"`\n          k8s.io/cluster-autoscaler/gitpod: 'owned'\n\n      labels:\n          gitpod.io/workload_meta: 'true'\n          gitpod.io/workload_ide: 'true'\n          gitpod.io/workload_workspace_services: 'true'","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":408,"to":428}}}}],["2002",{"pageContent":"labels:\n          gitpod.io/workload_meta: 'true'\n          gitpod.io/workload_ide: 'true'\n          gitpod.io/workload_workspace_services: 'true'\n\n      preBootstrapCommands:\n          - echo \"export USE_MAX_PODS=false\" >> /etc/profile.d/bootstrap.sh\n          - echo \"export CONTAINER_RUNTIME=containerd\" >> /etc/profile.d/bootstrap.sh\n          - sed -i '/^set -o errexit/a\\\\nsource /etc/profile.d/bootstrap.sh' /etc/eks/bootstrap.sh\n\n    - name: regular-workspaces\n      amiFamily: Ubuntu2004\n      spot: false\n      instanceTypes: ['m6i.4xlarge']\n      desiredCapacity: 2\n      minSize: 1\n      maxSize: 50\n      maxPodsPerNode: 110\n      disableIMDSv1: false\n      volumeSize: 512\n      volumeType: gp3\n      volumeIOPS: 6000\n      volumeThroughput: 500\n      ebsOptimized: true\n      privateNetworking: true\n      propagateASGTags: true","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":428,"to":453}}}}],["2003",{"pageContent":"iam:\n          attachPolicyARNs:\n              - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly\n              - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy\n              - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy\n              - arn:aws:iam::aws:policy/ElasticLoadBalancingFullAccess\n              - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore\n\n      tags:\n          k8s.io/cluster-autoscaler/enabled: 'true'\n          # Important - If you change the name of your EKS cluster from the\n          # default cluster name (\"gitpod\"), update the tag below to match\n          # your cluster (`k8s.io/cluster-autoscaler/<cluster-name>: \"owned\"`)\n          #\n          # For example: `k8s.io/cluster-autoscaler/gitpod-corp: \"owned\"`\n          k8s.io/cluster-autoscaler/gitpod: 'owned'\n\n      labels:\n          gitpod.io/workload_workspace_regular: 'true'","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":455,"to":473}}}}],["2004",{"pageContent":"labels:\n          gitpod.io/workload_workspace_regular: 'true'\n\n      preBootstrapCommands:\n          - echo \"export USE_MAX_PODS=false\" >> /etc/profile.d/bootstrap.sh\n          - echo \"export CONTAINER_RUNTIME=containerd\" >> /etc/profile.d/bootstrap.sh\n          - sed -i '/^set -o errexit/a\\\\nsource /etc/profile.d/bootstrap.sh' /etc/eks/bootstrap.sh\n    - name: headless-workspaces\n      amiFamily: Ubuntu2004\n      spot: false\n      instanceTypes: ['m6i.4xlarge']\n      desiredCapacity: 2\n      minSize: 1\n      maxSize: 50\n      maxPodsPerNode: 110\n      disableIMDSv1: false\n      volumeSize: 512\n      volumeType: gp3\n      volumeIOPS: 6000\n      volumeThroughput: 500\n      ebsOptimized: true\n      privateNetworking: true\n      propagateASGTags: true","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":473,"to":495}}}}],["2005",{"pageContent":"iam:\n          attachPolicyARNs:\n              - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly\n              - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy\n              - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy\n              - arn:aws:iam::aws:policy/ElasticLoadBalancingFullAccess\n              - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore\n\n      tags:\n          k8s.io/cluster-autoscaler/enabled: 'true'\n          # Important - If you change the name of your EKS cluster from the\n          # default cluster name (\"gitpod\"), update the tag below to match\n          # your cluster (`k8s.io/cluster-autoscaler/<cluster-name>: \"owned\"`)\n          #\n          # For example: `k8s.io/cluster-autoscaler/gitpod-corp: \"owned\"`\n          k8s.io/cluster-autoscaler/gitpod: 'owned'\n\n      labels:\n          gitpod.io/workload_workspace_headless: 'true'","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":497,"to":515}}}}],["2006",{"pageContent":"labels:\n          gitpod.io/workload_workspace_headless: 'true'\n\n      preBootstrapCommands:\n          - echo \"export USE_MAX_PODS=false\" >> /etc/profile.d/bootstrap.sh\n          - echo \"export CONTAINER_RUNTIME=containerd\" >> /etc/profile.d/bootstrap.sh\n          - sed -i '/^set -o errexit/a\\\\nsource /etc/profile.d/bootstrap.sh' /etc/eks/bootstrap.sh","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":515,"to":521}}}}],["2007",{"pageContent":"```\n\nTo ensure there are enough IPs and networking policy enforcement is in place, this reference architecture uses Calico for networking. To enable Calico in an EKS installation it must be done after the control plane has been provisioned and before the nodegroups have been created.\n\nFirst: Run `eksctl` with the `--without-nodegroup` flag to provision just the control plane defined in the `gitpod-cluster.yaml`:\n\n```bash\neksctl create cluster --without-nodegroup --config-file gitpod-cluster.yaml","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":522,"to":529}}}}],["2008",{"pageContent":"```\n\nThis should result in the following output:\n\n```bash\n2022-06-24 09:54:59 [ℹ]  eksctl version 0.102.0-dev+3229f126.2022-06-17T12:44:20Z\n2022-06-24 09:54:59 [ℹ]  using region eu-west-1\n2022-06-24 09:54:59 [ℹ]  setting availability zones to [eu-west-1c eu-west-1a eu-west-1b]\n2022-06-24 09:54:59 [ℹ]  subnets for eu-west-1c - public:192.168.0.0/19 private:192.168.96.0/19\n2022-06-24 09:54:59 [ℹ]  subnets for eu-west-1a - public:192.168.32.0/19 private:192.168.128.0/19\n2022-06-24 09:54:59 [ℹ]  subnets for eu-west-1b - public:192.168.64.0/19 private:192.168.160.0/19\n2022-06-24 09:54:59 [ℹ]  using Kubernetes version 1.22\n[...]\n2022-06-24 10:11:30 [✔]  EKS cluster \"gitpod\" in \"eu-west-1\" region is ready\n```\n\nAfter this command finishes, check that `eksctl` also created the kubeconfig properly by running the command `kubectl get pods -n kube-system`. If deployed correctly one should see the list of pods in a pending state.\n\n```bash\nkubectl get pods -n kube-system","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":530,"to":549}}}}],["2009",{"pageContent":"```\n\nThis should result in:\n\n```bash\nNAME                       READY   STATUS    RESTARTS   AGE\ncoredns-5947f47f5f-69lvv   0/1     Pending   0          26m\ncoredns-5947f47f5f-srm5t   0/1     Pending   0          26m\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":550,"to":558}}}}],["2010",{"pageContent":"### Calico Installation\n\nThis is following the instructions provided by [Tigera](https://projectcalico.docs.tigera.io/getting-started/kubernetes/managed-public-cloud/eks).\n\nTo install Calico, first remove the default AWS-provided networking component:\n\n```bash\nkubectl delete daemonset -n kube-system aws-node\n```\n\nInstall the Calico manifest:\n\n```bash\nkubectl apply -f https://projectcalico.docs.tigera.io/manifests/calico-vxlan.yaml\n```\n\nNow configure Calico for EKS-specific support with the following command:\n\n```bash\nkubectl -n kube-system set env daemonset/calico-node FELIX_AWSSRCDSTCHECK=Disable\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":560,"to":580}}}}],["2011",{"pageContent":"### Additional Network configuration\n\nTo use RDS in the VPC you will need security groups created and associated with the Services nodegroup before it is launched. RDS does not have to be deployed yet but an additional security group for the Services nodegroup needs to be created and added to your `gitpod-cluster.yaml` before continuing.\n\nGet the ID of the cluster `eksctl` just created. If you kept the tag `project=gitpod` in the `gitpod-cluster.yaml` file, retrieve the id and cidr block with:\n\n```bash\naws ec2 describe-vpcs --filters \"Name=tag:project,Values=gitpod\" --query 'Vpcs[*].[VpcId, CidrBlock]'\n```\n\nThis should result in:\n\n```bash\n[\n    [\n        \"<VPC ID similar to: vpc-09a109f23dad0a298>\",\n        \"192.168.0.0/16\"\n    ]\n]","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":582,"to":600}}}}],["2012",{"pageContent":"```\n\nThis should result in:\n\n```bash\n[\n    [\n        \"<VPC ID similar to: vpc-09a109f23dad0a298>\",\n        \"192.168.0.0/16\"\n    ]\n]\n```\n\nCreate the new security group (we do not need to have rules added to it yet) using the vpc-id from above, note how tags are auto-populated to the security group as well:\n\n```bash\naws ec2 create-security-group --description 'Gitpod Services Nodegroup' --group-name 'gitpod-services' \\\n--vpc-id <!add VPC ID from above here!> --tag-specifications 'ResourceType=security-group,Tags=[{Key=Name,Value=gitpod-services-sg},{Key=project,Value=gitpod},{Key=department,Value=demo}]'\n```\n\nThis should return something similar to:\n\n```bash\n{\n    \"GroupId\": \"<GroupID, similar to: sg-04b9a5f403307efe5>\",\n    \"Tags\": [\n        {\n            \"Key\": \"project\",\n            \"Value\": \"gitpod\"\n        },\n        {\n            \"Key\": \"department\",\n            \"Value\": \"demo\"\n        }\n    ]\n}","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":600,"to":635}}}}],["2013",{"pageContent":"```\n\nUpdate your `gitpod-cluster.yaml` to add the `GroupId` from the previous command to the `securityGroups.attachIDs` list in the `services` `managedNodeGroups`:\n\n```yaml\nsecurityGroups:\n    attachIDs: ['<Add your GroupId here, similar to: sg-04b9a5f403307efe5']\n```\n\nStore the `GroupID` for easier reuse when creating the RDS instance later in this guide:\n\n```bash\nexport SERVICES_SECURITYGROUP_ID=\"<add GroupID from above here, similar to: sg-04b9a5f403307efe5>\"\n```\n\nIf you destroy this cluster and recreate it, you will need to redo the above step as the old security group would have been deleted along with the VPC.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":636,"to":651}}}}],["2014",{"pageContent":"### SSH Access to nodegroups\n\n`eksctl` allows for [ssh keys](https://eksctl.io/usage/schema/#managedNodeGroups-ssh) to be added to your nodegroups for troubleshooting. By default, the `gitpod-cluster.yaml` does not configure this. AWS Systems Manager is enabled by default, allowing for connectivity [through multiple methods](https://docs.aws.amazon.com/systems-manager/latest/userguide/session-manager-working-with-sessions-start.html) to each instance in your nodegroup.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":653,"to":655}}}}],["2015",{"pageContent":"### Create nodegroups\n\nTo ensure that if there are problems deploying the services nodegroup (you provided an incorrect security group ID for example) it can be deleted easily and not require having to delete a partially deployed workspaces nodegroup, create it before the workspaces nodegroup.\n\nCreate the services nodegroups with `eksctl create nodegroup --include=services --config-file gitpod-cluster.yaml`:\n\n```bash\neksctl create nodegroup --include=services --config-file gitpod-cluster.yaml","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":657,"to":664}}}}],["2016",{"pageContent":"```\n\nThis should result in:\n\n```bash\n2022-06-24 13:42:01 [ℹ]  nodegroup \"services\" will use \"ami-0793b4124359a6ad7\" [Ubuntu2004/1.22]\n2022-06-24 13:42:01 [ℹ]  nodegroup \"regular-workspaces\" will use \"ami-0793b4124359a6ad7\" [Ubuntu2004/1.22]\n2022-06-24 13:42:01 [ℹ]  nodegroup \"headless-workspaces\" will use \"ami-0793b4124359a6ad7\" [Ubuntu2004/1.22]\n2022-06-24 13:42:03 [ℹ]  combined include rules: services\n2022-06-24 13:42:03 [ℹ]  1 nodegroup (services) was included (based on the include/exclude rules)\n2022-06-24 13:42:03 [ℹ]  will create a CloudFormation stack for each of 1 managed nodegroups in cluster \"gitpod\"\n[...]\n2022-06-24 13:46:22 [✔]  created 1 managed nodegroup(s) in cluster \"gitpod\"\n2022-06-24 13:46:24 [ℹ]  checking security group configuration for all nodegroups\n2022-06-24 13:46:24 [ℹ]  all nodegroups have up-to-date cloudformation templates","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":665,"to":679}}}}],["2017",{"pageContent":"```\n\nCreate the workspaces nodegroups second if the services are deployed correctly.\n\n```bash\neksctl create nodegroup --include=regular-workspaces,headless-workspaces --config-file gitpod-cluster.yaml","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":680,"to":685}}}}],["2018",{"pageContent":"```\n\n```bash\n2022-06-24 13:55:08 [ℹ]  nodegroup \"services\" will use \"ami-0793b4124359a6ad7\" [Ubuntu2004/1.22]\n2022-06-24 13:55:08 [ℹ]  nodegroup \"regular-workspaces\" will use \"ami-0793b4124359a6ad7\" [Ubuntu2004/1.22]\n2022-06-24 13:55:08 [ℹ]  nodegroup \"headless-workspaces\" will use \"ami-0793b4124359a6ad7\" [Ubuntu2004/1.22]\n2022-06-24 13:55:13 [ℹ]  1 existing nodegroup(s) (services) will be excluded\n2022-06-24 13:55:13 [ℹ]  combined include rules: regular-workspaces,headless-workspaces\n2022-06-24 13:55:13 [ℹ]  2 nodegroups (headless-workspaces, regular-workspaces) were included (based on the include/exclude rules)\n2022-06-24 13:55:13 [ℹ]  will create a CloudFormation stack for each of 2 managed nodegroups in cluster \"gitpod\"\n[...]\n2022-06-24 13:59:10 [✔]  created 2 managed nodegroup(s) in cluster \"gitpod\"\n2022-06-24 13:59:13 [ℹ]  checking security group configuration for all nodegroups\n2022-06-24 13:59:13 [ℹ]  all nodegroups have up-to-date cloudformation templates","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":686,"to":699}}}}],["2019",{"pageContent":"```\n\nYou can verify that your installation was deployed properly with the custom `kubectl` command provided below which will let you review maxpods, kernel and containerd versions to ensure they are meeting [our minimum requirements](../../latest/requirements) as intended.\n\n```bash\nkubectl get nodes -o=custom-columns=\"NAME:.metadata.name,\\\nNODEGROUP:.metadata.labels.eks\\.amazonaws\\.com/nodegroup,\\\nRUNTIME:.status.nodeInfo.containerRuntimeVersion,\\\nMAXPODS:.status.capacity.pods,\\\nKERNEL:.status.nodeInfo.kernelVersion,\\\nAMIFAMILY:.status.nodeInfo.osImage,\\\nK8S:.status.nodeInfo.kubeletVersion,\\\nInstance-ID:.spec.providerID\"\n```\n\nBecause of how EKS launches instances, coredns may end up running on a single node, which is against best practices. Before continuing to the next steps, restart coredns to ensure it is running on two nodes.\n\n```bash\nkubectl rollout restart deployment.apps/coredns -n kube-system\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":700,"to":719}}}}],["2020",{"pageContent":"### Enable cluster autoscaling\n\nGitpod's resource usage will vary depending on the number of active workspaces and image prebuilds during the day. The use of a cluster autoscaler is recommended to scale EKS nodes on demand and thus minimize the cost you pay.\n\n```bash\nCLUSTER_NAME=\"gitpod\"\nAWS_REGION=\"eu-west-1\"","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":721,"to":727}}}}],["2021",{"pageContent":"```bash\nCLUSTER_NAME=\"gitpod\"\nAWS_REGION=\"eu-west-1\"\n\nhelm repo add autoscaler https://kubernetes.github.io/autoscaler\nhelm repo update\nhelm upgrade \\\n    --atomic \\\n    --cleanup-on-fail \\\n    --install \\\n    --namespace kube-system \\\n    --reset-values \\\n    --wait \\\n    --set cloudProvider=aws \\\n    --set awsRegion=$AWS_REGION \\\n    --set autoDiscovery.clusterName=$CLUSTER_NAME \\\n    --set rbac.serviceAccount.create=false \\\n    --set rbac.serviceAccount.name=cluster-autoscaler \\\n    --set securityContext.fsGroup=65534 \\\n    --set extraArgs.skip-nodes-with-local-storage=false \\\n    --set extraArgs.skip-nodes-with-system-pods=false \\\n    --set extraArgs.expander=least-waste \\\n    --set extraArgs.balance-similar-node-groups=true \\\n    --set extraArgs.scale-down-utilization-threshold=0.2 \\\n    --set extraArgs.v=2 \\\n    autoscaler autoscaler/cluster-autoscaler\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":727,"to":753}}}}],["2022",{"pageContent":"### Deleting the cluster\n\nIn the future to delete this cluster any additional resources added to the VPC will need to be deleted before deleting the cluster, otherwise, cloudformations will fail to delete the VPC and complete deleting the cluster. The alternative is to create a VPC managed separately and install EKS using the additions for working [with existing VPCs](https://eksctl.io/usage/vpc-networking/#use-existing-vpc-other-custom-configuration) in `eksctl`.\n\nThe order resources to delete if created:\n\n-   RDS First\n-   RDS security group\n-   Services Nodegroup\n-   Services security group\n-   eksctl delete cluster\n\nFull removal of these installed components would look something like this (commands are grouped for brevity):\n\n```bash","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":755,"to":769}}}}],["2023",{"pageContent":"#### delete RDS resources\naws rds delete-db-instance --db-instance-identifier gitpod-instance --skip-final-snapshot --delete-automated-backups\naws ec2 delete-security-group --group-id sg-0e538ccac25bb1387\naws rds delete-db-subnet-group --db-subnet-group-name gitpod-rds\n\n#### delete the services node group\neksctl delete nodegroup --name services --cluster gitpod --disable-eviction --parallel 4 --max-grace-period 0s --wait\n\n#### delete the security group added for rds\naws ec2 delete-security-group --group-id sg-04b9a5f403307efe5\neksctl delete cluster --name gitpod --force --disable-nodegroup-eviction --wait\n\n#### The following removal steps are optional; if you plan on creating another Gitpod installation then the S3 bucket,\n#### access account, key, and policy can be kept for later use.\n\n#### delete s3 resources\naws s3 rm s3://${S3_BUCKET_NAME} --recursive\naws s3 rb s3://${S3_BUCKET_NAME} --force","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":770,"to":787}}}}],["2024",{"pageContent":"#### delete iam resources\naws iam detach-user-policy --user-name gitpod-s3-access --policy-arn 'arn:aws:iam::12344:policy/gitpod_s3_access_policy'\n\n# delete access keys:\naws iam list-access-keys --user-name gitpod-s3-access\naws iam delete-access-key --user-name gitpod-s3-access --access-key-id AKI---------\naws iam delete-user --user-name gitpod-s3-access\n\n# ensure that nothing else is attached to this policy\naws iam list-entities-for-policy --policy-arn 'arn:aws:iam::12344:policy/gitpod_s3_access_policy'\naws iam delete-policy --policy-arn 'arn:aws:iam::12344:policy/gitpod_s3_access_policy'","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":789,"to":799}}}}],["2025",{"pageContent":"```\n\n</div>\n\n<div slot=\"azure\">\n\nThis section will create a Kubernetes cluster based on the latest supported version of AKS, create node pools for Gitpod services, regular workspaces, and headless workspaces, and will fetch cluster credentials.\n\nFirst, determine the latest version of AKS suitable for Gitpod.\n\n> Gitpod supports Kubernetes 1.21 or later, but using the latest supported version of AKS is recommended.\n\n```bash\nAKS_VERSION=$(az aks get-versions \\\n    --location $LOCATION \\\n    --query \"orchestrators[?contains(orchestratorVersion, '1.24.')].orchestratorVersion | [-1]\" -o tsv)","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":800,"to":815}}}}],["2026",{"pageContent":"```\n\nCreate the AKS cluster and a default node pool. Gitpod services and other supporting components will run on this node pool.\n\n```bash\naz aks create \\\n    --name \"${CLUSTER_NAME}\" \\\n    --nodepool-name \"services\" \\\n    --location \"${LOCATION}\" \\\n    --resource-group \"${RESOURCE_GROUP}\" \\\n    --kubernetes-version \"${AKS_VERSION}\" \\\n    --network-plugin kubenet \\\n    --network-policy calico \\\n    --enable-cluster-autoscaler \\\n    --enable-managed-identity \\\n    --min-count \"1\" \\\n    --max-count \"4\" \\\n    --max-pods \"110\" \\\n    --node-osdisk-size \"100\" \\\n    --node-vm-size \"Standard_D4_v4\" \\\n    --nodepool-labels \\\n        gitpod.io/workload_meta=true \\\n        gitpod.io/workload_ide=true \\\n        gitpod.io/workload_workspace_services=true \\\n    --no-ssh-key \\\n    --vm-set-type \"VirtualMachineScaleSets\"","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":816,"to":841}}}}],["2027",{"pageContent":"```\n\nCreate a node pool for regular workspaces.\n\n```bash\naz aks nodepool add \\\n    --name \"regularws\" \\\n    --cluster-name \"${CLUSTER_NAME}\" \\\n    --resource-group \"${RESOURCE_GROUP}\" \\\n    --kubernetes-version \"${AKS_VERSION}\" \\\n    --labels gitpod.io/workload_workspace_regular=true \\\n    --enable-cluster-autoscaler \\\n    --min-count \"1\" \\\n    --max-count \"50\" \\\n    --max-pods \"110\" \\\n    --node-osdisk-size \"512\" \\\n    --node-vm-size \"Standard_D16_v4\"\n```\n\nCreate a node pool for headless workspaces.\n\n```bash\naz aks nodepool add \\\n    --name \"headlessws\" \\\n    --cluster-name \"${CLUSTER_NAME}\" \\\n    --resource-group \"${RESOURCE_GROUP}\" \\\n    --kubernetes-version \"${AKS_VERSION}\" \\\n    --labels gitpod.io/workload_workspace_headless=true \\\n    --enable-cluster-autoscaler \\\n    --node-count \"1\" \\\n    --min-count \"1\" \\\n    --max-count \"50\" \\\n    --max-pods \"110\" \\\n    --node-osdisk-size \"512\" \\\n    --node-vm-size \"Standard_D16_v4\"","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":842,"to":876}}}}],["2028",{"pageContent":"```\n\nAfter the cluster and node pools have been created, fetch the AKS credentials. These credentials will be used to install external-dns, cert-manager, and install Gitpod itself.\n\n```bash\naz aks get-credentials \\\n    --name \"${CLUSTER_NAME}\" \\\n    --resource-group \"${RESOURCE_GROUP}\" \\\n    --overwrite-existing\n```\n\n</div>\n\n</CloudPlatformToggle>","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/cluster","loc":{"lines":{"from":877,"to":890}}}}],["2029",{"pageContent":"---\nlayout: false\n---\n\n<script lang=\"ts\">\n  import CloudPlatformToggle from \"$lib/components/docs/cloud-platform-toggle.svelte\";\n</script>\n\nGitpod uses a **relational database management system** to store structural data. Gitpod supports MySQL. The database is a central component in Gitpod where all metadata about users and workspaces as well as settings of the Gitpod instance (such as auth providers) are stored. That makes the database a critical component. In case of a database outage, you will not be able to log in, use the Gitpod dashboard, or start workspaces.\n\nIn this reference architecture, we use managed MYSQL databases provided by cloud providers.\n\n> Gitpod requires your database instance to have a database named `gitpod` in it.\n\n<CloudPlatformToggle id=\"cloud-platform-toggle-database\">\n<div slot=\"gcp\">\n\nAs a relational database, we create a [Google Cloud SQL instance](https://cloud.google.com/sql) with MySQL 5.7. Use the following commands to create the database instance:","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/database","loc":{"lines":{"from":1,"to":18}}}}],["2030",{"pageContent":"As a relational database, we create a [Google Cloud SQL instance](https://cloud.google.com/sql) with MySQL 5.7. Use the following commands to create the database instance:\n\n```bash\nMYSQL_INSTANCE_NAME=gitpod-mysql\ngcloud sql instances create \"${MYSQL_INSTANCE_NAME}\" \\\n    --database-version=MYSQL_5_7 \\\n    --storage-size=20 \\\n    --storage-auto-increase \\\n    --tier=db-n1-standard-2 \\\n    --region=\"${REGION}\" \\\n    --replica-type=FAILOVER \\\n    --enable-bin-log\n\ngcloud sql instances patch \"${MYSQL_INSTANCE_NAME}\" --database-flags \\\n            explicit_defaults_for_timestamp=off","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/database","loc":{"lines":{"from":18,"to":32}}}}],["2031",{"pageContent":"```\n\nAfter that, we create the database named `gitpod` as well as a dedicated Gitpod database user with a random password.\n\n```bash\ngcloud sql databases create gitpod --instance=\"${MYSQL_INSTANCE_NAME}\"\n\nMYSQL_GITPOD_USERNAME=gitpod\nMYSQL_GITPOD_PASSWORD=$(openssl rand -base64 20)\ngcloud sql users create \"${MYSQL_GITPOD_USERNAME}\" \\\n    --instance=\"${MYSQL_INSTANCE_NAME}\" \\\n    --password=\"${MYSQL_GITPOD_PASSWORD}\"\n```\n\nFinally, you need to create a service account that has the `roles/cloudsql.client` role:\n\n```bash\nMYSQL_SA=gitpod-mysql\nMYSQL_SA_EMAIL=\"${MYSQL_SA}\"@\"${PROJECT_NAME}\".iam.gserviceaccount.com\ngcloud iam service-accounts create \"${MYSQL_SA}\" --display-name \"${MYSQL_SA}\"\ngcloud projects add-iam-policy-binding \"${PROJECT_NAME}\" \\\n    --member serviceAccount:\"${MYSQL_SA_EMAIL}\" --role=\"roles/cloudsql.client\"","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/database","loc":{"lines":{"from":33,"to":54}}}}],["2032",{"pageContent":"```\n\nSave the service account key to the file `./mysql-credentials.json`:\n\n```bash\ngcloud iam service-accounts keys create --iam-account \"${MYSQL_SA_EMAIL}\" \\\n    ./mysql-credentials.json\n```\n\n</div>\n<div slot=\"aws\">\n\nWe will create an RDS MySQL `db.m5g.large` instance running MySQL 5.7. Before deploying an RDS instance, additional configuration has to be done to the VPC created by the `eksctl` command:","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/database","loc":{"lines":{"from":55,"to":67}}}}],["2033",{"pageContent":"### Create an RDS security group\n\nFirst, find the subnet IDs for the public subnets in your environment. For deploying RDS in private subnets replace true with false in the below command:\n\n```bash\naws ec2 describe-subnets \\\n    --filters \"Name=tag:project,Values=gitpod\" \\\n    --query 'Subnets[?MapPublicIpOnLaunch==`true`] | [*].[SubnetId, AvailabilityZone, CidrBlock, MapPublicIpOnLaunch]'\n```\n\nThis should give you an output similar to the following:\n\n```bash\n[\n    [\n        \"<SubnetID, similar to: subnet-0686443f3f2782453>\",\n        \"eu-west-1a\",\n        \"192.168.64.0/19\",\n        true\n    ],\n    [\n        \"<SubnetID, similar to: subnet-010ea25d0e398f6df>\",\n        \"eu-west-1c\",\n        \"192.168.0.0/19\",\n        true\n    ],\n    [\n        \"<SubnetID, similar to: subnet-0f0370a5697d85df2>\",\n        \"eu-west-1b\",\n        \"192.168.32.0/19\",\n        true\n    ]\n]","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/database","loc":{"lines":{"from":69,"to":101}}}}],["2034",{"pageContent":"```\n\nUsing the three subnet IDs, create an RDS subnet group, with the name `gitpod-rds`:\n\n```bash\naws rds create-db-subnet-group \\\n    --db-subnet-group-name gitpod-rds \\\n    --db-subnet-group-description \"Subnet for the Gitpod RDS deployment in VPC\" \\\n    --subnet-ids '[ \"<SubnetID 1 from above, similar to: subnet-0686443f3f2782453>\", \"SubnetID 2 from above, similar to: subnet-010ea25d0e398f6df>\", \"SubnetID 3 from above, similar to: subnet-0f0370a5697d85df2>\" ]' \\\n    --tags Key=project,Value=gitpod\n```\n\nNow you will need to create a security group for the RDS instance, running a similar command as before. Note you can get your vpc-id via:\n\n```bash\naws ec2 describe-vpcs --filters \"Name=tag:project,Values=gitpod\" --query 'Vpcs[*].[VpcId, CidrBlock]'","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/database","loc":{"lines":{"from":102,"to":117}}}}],["2035",{"pageContent":"```\n\nCreate the security group for the RDS instance:\n\n```bash\naws ec2 create-security-group --description 'Gitpod RDS' --group-name 'gitpod-rds' \\\n    --vpc-id <your VPC ID, similar to: vpc-09a109f23dad0a298> \\\n    --tag-specifications 'ResourceType=security-group,Tags=[{Key=Name,Value=gitpod-rds-sg},{Key=project,Value=gitpod},{Key=department,Value=demo}]'\n```\n\nThis should return an output that is similar to:\n\n```bash\n{\n    \"GroupId\": \"<GroupID similar to: sg-0e538ccac25bb1387>\",\n    \"Tags\": [\n        {\n            \"Key\": \"project\",\n            \"Value\": \"gitpod\"\n        },\n        {\n            \"Key\": \"department\",\n            \"Value\": \"demo\"\n        }\n    ]\n}","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/database","loc":{"lines":{"from":118,"to":143}}}}],["2036",{"pageContent":"```\n\nYou can now update the ingress policy for the RDS group to allow for incoming connections from the Services nodegroup on port 3306, the MySQL port. This uses the services security group ID stored in an environment variable in the cluster section above:\n\n```bash\naws ec2 authorize-security-group-ingress \\\n    --group-id <RDS securitygroup ID from above> \\\n    --protocol tcp --port 3306 \\\n    --source-group ${SERVICES_SECURITYGROUP_ID}\\\n    --tag-specifications 'ResourceType=security-group-rule,Tags=[{Key=Name,Value=rds-access},{Key=project,Value=gitpod},{Key=department,Value=demo}]'\n```\n\nNow you can create a password to use for MySQL. This will be required for the creation of the RDS instance and later for use by the Gitpod installer:\n\n```bash\nexport MYSQL_GITPOD_PW=$(openssl rand -hex 18)\necho $MYSQL_GITPOD_PW","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/database","loc":{"lines":{"from":144,"to":160}}}}],["2037",{"pageContent":"```\n\nNow you can create the [Multi-AZ RDS instance](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.MultiAZSingleStandby.html) using the MySQL password, the security group, and RDS subnet you created in the previous steps:\n\n```bash\naws rds create-db-instance \\\n    --db-name gitpod \\\n    --db-instance-identifier gitpod-instance \\\n    --db-instance-class db.m5.large \\\n    --db-subnet-group-name gitpod-rds \\\n    --vpc-security-group-ids sg-0e538ccac25bb1387 \\\n    --multi-az \\\n    --engine mysql \\\n    --allocated-storage 20 \\\n    --max-allocated-storage 120 \\\n    --master-username gitpod \\\n    --master-user-password $MYSQL_GITPOD_PW \\\n    --engine-version 5.7 \\\n    --tags Key=project,Value=gitpod Key=Name,Value=Gitpod-MySQLDB,Key=department,Value=demo","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/database","loc":{"lines":{"from":161,"to":179}}}}],["2038",{"pageContent":"```\n\nThis should return an output similar to the following:\n\n```bash\n{\n    \"DBInstance\": {\n        \"DBInstanceIdentifier\": \"gitpod-instance\",\n        \"DBInstanceClass\": \"db.m5.large\",\n        \"Engine\": \"mysql\",\n        \"DBInstanceStatus\": \"creating\",\n        \"MasterUsername\": \"gitpod\",\n        \"DBName\": \"gitpod\",\n        \"AllocatedStorage\": 20,\n        \"PreferredBackupWindow\": \"22:11-22:41\",\n        \"BackupRetentionPeriod\": 1,\n        \"DBSecurityGroups\": [],\n        \"VpcSecurityGroups\": [\n[...]\n```\n\nTo check whether instance creation has compeleted, and to retrieve the URL to use, run this command:\n\n```bash\naws rds describe-db-instances \\\n    --db-instance-identifier gitpod-instance \\\n    --query 'DBInstances[0].[DBInstanceStatus,Endpoint.Address]'\n```\n\nReturning:\n\n```bash\n[\n    \"modifying\",\n    \"<instance endpoint, similar to: gitpod-instance.coynfywwqpjg.eu-west-1.rds.amazonaws.com>\"\n]","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/database","loc":{"lines":{"from":180,"to":215}}}}],["2039",{"pageContent":"```\n\nReturning:\n\n```bash\n[\n    \"modifying\",\n    \"<instance endpoint, similar to: gitpod-instance.coynfywwqpjg.eu-west-1.rds.amazonaws.com>\"\n]\n```\n\nStore the MySQL instance endpoint for later use in the Gitpod installer:\n\n```bash\nexport MYSQL_RDS_ENDPOINT=\"$(aws rds describe-db-instances --db-instance-identifier gitpod-instance --query 'DBInstances[0].Endpoint.Address' --output text)\"","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/database","loc":{"lines":{"from":215,"to":229}}}}],["2040",{"pageContent":"```\n\n</div>\n\n<div slot=\"azure\">\n\nThis section will create an Azure MySQL server instance and database for Gitpod. This external database is required to run a Gitpod cluster for production purposes. Using a dedicated MySQL instance for Gitpod is recommended but a pre-existing MySQL instance may be used if it can host databases named `gitpod` and `gitpod-sessions`.\n\nFirst, set a MySQL server name. Azure MySQL server names must be universally unique; we recommend using a random value to avoid conflicts. Note this value for later use.\n\n```bash\nexport MYSQL_INSTANCE_NAME=\"gitpod$(openssl rand -hex 4)\"\necho \"$MYSQL_INSTANCE_NAME\"\n```\n\nSet the gitpod MySQL username and password. The username of `gitpod` is recommended but is not required.\n\n```bash\nexport MYSQL_GITPOD_USERNAME=\"gitpod\"\nexport MYSQL_GITPOD_PASSWORD=$(openssl rand -base64 20)\necho \"$MYSQL_GITPOD_PASSWORD\"","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/database","loc":{"lines":{"from":230,"to":250}}}}],["2041",{"pageContent":"```\n\nWith the generated instance name and password, create the Azure MySQL server.\n\n```bash\n az mysql server create \\\n    --name \"${MYSQL_INSTANCE_NAME}\" \\\n    --resource-group \"${RESOURCE_GROUP}\" \\\n    --location \"${LOCATION}\" \\\n    --admin-user \"${MYSQL_USERNAME}\" \\\n    --admin-password \"${MYSQL_GITPOD_PASSWORD}\" \\\n    --auto-grow Enabled \\\n    --public Enabled \\\n    --sku-name GP_Gen5_2 \\\n    --ssl-enforcement Disabled \\\n    --storage-size 20480 \\\n    --version \"5.7\"\n```\n\nAfter creating the MySQL server create a database called `gitpod`. When Gitpod is installed it will create an additional database called `gitpod-sessions`.\n\n```bash\naz mysql db create \\\n  --name gitpod \\\n  --resource-group \"${RESOURCE_GROUP}\" \\\n  --server-name \"${MYSQL_INSTANCE_NAME}\"","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/database","loc":{"lines":{"from":251,"to":276}}}}],["2042",{"pageContent":"```\n\nCreate a MySQL firewall rule allowing access from your AKS cluster to the MySQL database.\n\n> 💡 MySQL firewall rules with a start IP address of `0.0.0.0` and an end IP address of `0.0.0.0` restrict access to Azure resources. This is necessary to allow your Kubernetes cluster to connect to the database.\n> See the [Azure MySQL firewall API documentation](https://docs.microsoft.com/en-us/azure/mysql/single-server/concepts-firewall-rules#connecting-from-azure) for more information.\n\n```bash\naz mysql server firewall-rule create \\\n --name \"Azure_Resources\" \\\n --server-name \"${MYSQL_INSTANCE_NAME}\" \\\n --resource-group \"${RESOURCE_GROUP}\" \\\n --start-ip-address \"0.0.0.0\" \\\n --end-ip-address \"0.0.0.0\"\n```\n\n</div>\n\n</CloudPlatformToggle>","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/database","loc":{"lines":{"from":277,"to":295}}}}],["2043",{"pageContent":"---\nlayout: false\n---\n\n<script lang=\"ts\">\n  import CloudPlatformToggle from \"$lib/components/docs/cloud-platform-toggle.svelte\";\n</script>\n\nCongratulations. You have set up your cluster. Now, you are ready to install Gitpod. Follow the instructions in the [installation guide](/docs/configure/self-hosted/latest/installing-gitpod#install-gitpod).\n\n<CloudPlatformToggle id=\"cloud-platform-toggle-install\">\n<div slot=\"gcp\">\n\nIf you followed the steps to create your infrastructure on GCP of this guide, you need to use the following config settings for your Gitpod installation:\n\n| General settings |                         |\n| ---------------- | ----------------------- |\n| Domain name      | value of `$DOMAIN_NAME` |\n\nUn-select the in-cluster container registry checkbox.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/install","loc":{"lines":{"from":1,"to":20}}}}],["2044",{"pageContent":"| Container registry          |                                                                                                          |\n| --------------------------- | -------------------------------------------------------------------------------------------------------- |\n| In-cluster                  | no                                                                                                       |\n| Container registry URL      | `gcr.io/${PROJECT_NAME}/gitpod`<br/>(replace `${PROJECT_NAME}` with your GCP project name)               |\n| Container registry server   | `gcr.io`                                                                                                 |\n| Container registry username | `_json_key`                                                                                              |\n| Container registry password | Content of file `./gs-credentials.json`<br/>Remove linebreaks, e.g. with `jq -c . ./gs-credentials.json` |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/install","loc":{"lines":{"from":22,"to":28}}}}],["2045",{"pageContent":"Un-select the in-cluster MySQL checkbox.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/install","loc":{"lines":{"from":30,"to":30}}}}],["2046",{"pageContent":"| Database                 |                                                                                              |\n| ------------------------ | -------------------------------------------------------------------------------------------- |\n| In-cluster               | no                                                                                           |\n| Google Cloud SQL Proxy   | yes                                                                                          |\n| CloudSQL connection name | `${PROJECT_NAME}:${REGION}:${MYSQL_INSTANCE_NAME}`<br/>Replace variables with actual values! |\n| Username                 | value of `${MYSQL_GITPOD_USERNAME}`                                                          |\n| Password                 | value of `${MYSQL_GITPOD_PASSWORD}`                                                          |\n| GCP service account key  | Upload file `./mysql-credentials.json`                                                       |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/install","loc":{"lines":{"from":32,"to":39}}}}],["2047",{"pageContent":"Select `GCP` as object storage provider.\n\n| Object storage      |                                     |\n| ------------------- | ----------------------------------- |\n| Storage provider    | GCP                                 |\n| Storage region      | value of `${REGION}`                |\n| Project ID          | value of `${PROJECT_NAME}`          |\n| Service account key | Upload file `./gs-credentials.json` |\n\nKeep cert-manager selected for the TLS certificates options.\n\n| TLS certificates            |                         |\n| --------------------------- | ----------------------- |\n| Self-signed TLS certificate | no                      |\n| cert-manager                | yes                     |\n| Issuer name                 | `gitpod-issuer`         |\n| Issuer type                 | Select “cluster issuer” |\n\n</div>\n\n<div slot=\"aws\">","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/install","loc":{"lines":{"from":41,"to":61}}}}],["2048",{"pageContent":"</div>\n\n<div slot=\"aws\">\n\nIf you followed the steps to create your infrastructure on the AWS portion of this guide, you need to use the following config settings for your Gitpod installation:\n\n| General Settings |                         |\n| ---------------- | ----------------------- |\n| Domain name      | value of `$DOMAIN_NAME` |\n\nSelect the in-cluster registry checkbox, and select the **S3** storage provider.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/install","loc":{"lines":{"from":61,"to":71}}}}],["2049",{"pageContent":"Select the in-cluster registry checkbox, and select the **S3** storage provider.\n\n| Container registry |                                                                                                      |\n| ------------------ | ---------------------------------------------------------------------------------------------------- |\n| Storage region     | The S3 bucket region (such as `eu-west-1`)                                                           |\n| Storage endpoint   | `s3.${S3_BUCKET_REGION}.amazonaws.com`<br/>(Replace `${S3_BUCKET_REGION}` with the s3 bucket region) |\n| S3 bucket name     | value of `${S3_BUCKET_NAME}`                                                                         |\n| S3 access key      | value of `AccessKeyId`                                                                               |\n| S3 secret key      | value of `SecretAccessKey`                                                                           |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/install","loc":{"lines":{"from":71,"to":79}}}}],["2050",{"pageContent":"Unselect the **Use MySQL in-cluster** checkbox and also make sure that the **Use Google Cloud SQL Proxy** checkbox is not selected.\n\n| Database |                                  |\n| -------- | -------------------------------- |\n| Hostname | value of `${MYSQL_RDS_ENDPOINT}` |\n| Username | `gitpod`                         |\n| Password | value of `${MYSQL_GITPOD_PW}`    |\n\nSelect **S3** as the object storage provider.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/install","loc":{"lines":{"from":81,"to":89}}}}],["2051",{"pageContent":"Select **S3** as the object storage provider.\n\n| Object storage   |                                                                                                      |\n| ---------------- | ---------------------------------------------------------------------------------------------------- |\n| Storage region   | The S3 bucket region (such as `eu-west-1`)                                                           |\n| Storage endpoint | `s3.${S3_BUCKET_REGION}.amazonaws.com`<br/>(Replace `${S3_BUCKET_REGION}` with the s3 bucket region) |\n| S3 bucket name   | value of `${S3_BUCKET_NAME}`                                                                         |\n| S3 access key    | value of `AccessKeyId`                                                                               |\n| S3 secret key    | value of `SecretAccessKey`                                                                           |\n\nKeep cert-manager selected for the TLS certificates options.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/install","loc":{"lines":{"from":89,"to":99}}}}],["2052",{"pageContent":"Keep cert-manager selected for the TLS certificates options.\n\n| TLS certificates            |                         |\n| --------------------------- | ----------------------- |\n| Self-signed TLS certificate | no                      |\n| cert-manager                | yes                     |\n| Issuer name                 | `gitpod-issuer`         |\n| Issuer type                 | Select “cluster issuer” |\n\n</div>\n\n<div slot=\"azure\">\n\nIf you followed the steps to create your infrastructure on the Azure portion of this guide, use the following config settings for your Gitpod installation:\n\n| General Settings |                         |\n| ---------------- | ----------------------- |\n| Domain name      | value of `$DOMAIN_NAME` |\n\nUn-select the in-cluster container registry checkbox.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/install","loc":{"lines":{"from":99,"to":118}}}}],["2053",{"pageContent":"| General Settings |                         |\n| ---------------- | ----------------------- |\n| Domain name      | value of `$DOMAIN_NAME` |\n\nUn-select the in-cluster container registry checkbox.\n\n| Container registry          |                                       |\n| --------------------------- | ------------------------------------- |\n| In-cluster                  | no                                    |\n| Container registry URL      | Value of `${AZURE_REGISTRY_URL}`      |\n| Container registry server   | Leave empty                           |\n| Container registry username | Value of `${AZURE_REGISTRY_USERNAME}` |\n| Container registry password | Value of `${AZURE_REGISTRY_PASSWORD}` |\n\nUn-select the in-cluster MySQL checkbox.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/install","loc":{"lines":{"from":118,"to":132}}}}],["2054",{"pageContent":"| Database               |                                                                                                                        |\n| ---------------------- | ---------------------------------------------------------------------------------------------------------------------- |\n| In-cluster             | no                                                                                                                     |\n| Google Cloud SQL Proxy | unchecked                                                                                                              |\n| Host                   | `${MYSQL_INSTANCE_NAME}.mysql.database.azure.com` <br/>(Replace `${MYSQL_INSTANCE_NAME}` with the Azure database name) |\n| Username               | Value of `${MYSQL_GITPOD_USERNAME}@${MYSQL_INSTANCE_NAME}`                                                             |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/install","loc":{"lines":{"from":134,"to":139}}}}],["2055",{"pageContent":"| Username               | Value of `${MYSQL_GITPOD_USERNAME}@${MYSQL_INSTANCE_NAME}`                                                             |\n| Password               | value of `${MYSQL_GITPOD_PASSWORD}`                                                                                    |\n| Password               | Use default value (`3306`)                                                                                             |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/install","loc":{"lines":{"from":139,"to":141}}}}],["2056",{"pageContent":"Select **Azure** as the object storage provider.\n\n| Object storage |                                    |\n| -------------- | ---------------------------------- |\n| Storage region | value of `${LOCATION}`             |\n| Account name   | value of `${STORAGE_ACCOUNT_NAME}` |\n| Access key     | value of `${STORAGE_ACCOUNT_KEY}`  |\n\nKeep cert-manager selected for the TLS certificates options.\n\n| TLS certificates            |                         |\n| --------------------------- | ----------------------- |\n| Self-signed TLS certificate | no                      |\n| cert-manager                | yes                     |\n| Issuer name                 | `gitpod-issuer`         |\n| Issuer type                 | Select “cluster issuer” |\n\n</div>\n\n</CloudPlatformToggle>","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/install","loc":{"lines":{"from":143,"to":162}}}}],["2057",{"pageContent":"---\nlayout: false\n---\n\n<script lang=\"ts\">\n  import CloudPlatformToggle from \"$lib/components/docs/cloud-platform-toggle.svelte\";\n</script>\n\nFor each Gitpod installation, you need a **domain**. In this guide, we use `gitpod.example.com` as a placeholder for your domain. Gitpod also uses different subdomains for some components as well as dynamically for the running workspaces. That's why you need to configure your DNS server and your TLS certificates for your Gitpod domain with the following wildcards:\n\n```\ngitpod.example.com\n*.gitpod.example.com\n*.ws.gitpod.example.com\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/networking","loc":{"lines":{"from":1,"to":15}}}}],["2058",{"pageContent":"### Cluster ports\n\nThe entry point for all traffic is the `proxy` component which has a service of type `LoadBalancer` that allows inbound traffic on ports 80 (HTTP) and 443 (HTTPS) as well as port 22 (SSH access to the workspaces).\n\nSSH access is required to work with desktop IDEs, such as [VS Code Desktop](/docs/references/ides-and-editors/vscode) and JetBrains via [JetBrains Gateway](/docs/integrations/jetbrains-gateway). To enable SSH, your **load balancer** needs to be capable of working with [L4 protocols](https://en.wikipedia.org/wiki/OSI_model#Layer_4:_Transport_layer).\n\n<CloudPlatformToggle id=\"cloud-platform-toggle-networking\">\n<div slot=\"gcp\">\n\nIn this guide, we use [load balancing through a standalone network endpoint group (NEG)](https://cloud.google.com/kubernetes-engine/docs/how-to/standalone-neg). For this, the Gitpod proxy service will get the following annotation by default:\n\n```bash\ncloud.google.com/neg: '{\"exposed_ports\": {\"80\":{},\"443\": {}}}'","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/networking","loc":{"lines":{"from":17,"to":29}}}}],["2059",{"pageContent":"```\n\nFor Gitpod, we support Calico as CNI only. You need to make sure that you DO NOT use [GKE Dataplan V2](https://cloud.google.com/kubernetes-engine/docs/concepts/dataplane-v2). That means, do not add the `--enable-dataplane-v2` flag during the cluster creation.\n\n</div>\n<div slot=\"aws\">\n\nIt is suggested to create a dedicated VPC (and EKS instance) for Gitpod. `eksctl` can do this for you, but if VPCs have to be configured separately, follow `eksctl`’s [suggestions](https://eksctl.io/usage/vpc-configuration/).\n\n> **Note**: You can also customize `eksctl`’s [vpc](https://eksctl.io/usage/vpc-subnet-settings/#custom-subnet-topology) creation to suit your existing configurations.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/networking","loc":{"lines":{"from":30,"to":39}}}}],["2060",{"pageContent":"> **Note**: You can also customize `eksctl`’s [vpc](https://eksctl.io/usage/vpc-subnet-settings/#custom-subnet-topology) creation to suit your existing configurations.\n\nThe VPC needs public and private subnets. All managed node groups and Gitpod services should run in the private subnet. Inbound access to the services should be through ALB/ELB services auto-provisioned by AWS based on the configuration used (standard LoadBalancer roles or creation of an Ingress). If running a jump host or VPN endpoint, it should be deployed in the public subnet.\n\n> By default, when Gitpod is being installed, EKS will create a classic load balancer that you can point your DNS entries at. If you are unable to use a AWS Classic Load Balancer (e.g. because you use SSL certificates generated by AWS), please follow [the Setting up your EKS cluster with dual ALB + NLB load balancers guide](../advanced/eks-with-alb-and-nlb) _alongside_ this reference architecture guide.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/networking","loc":{"lines":{"from":39,"to":43}}}}],["2061",{"pageContent":"If installing Calico, follow their [installation steps](https://projectcalico.docs.tigera.io/getting-started/kubernetes/managed-public-cloud/eks) and ensure you modify the `hostNetwork: True` option on the cert-manager installation options later.\n\n</div>\n<div slot=\"azure\">\n\nAzure automatically provisions [Azure public load balancers](https://docs.microsoft.com/en-us/azure/aks/load-balancer-standard) that load balance public Gitpod services and provide public Internet connectivity for Gitpod's workloads. No additional configuration is required.\n\n</div>\n\n</CloudPlatformToggle>","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/networking","loc":{"lines":{"from":45,"to":54}}}}],["2062",{"pageContent":"### External DNS\n\nYou also need to configure your **DNS server**. If you have your own DNS server for your domain, make sure the domain with all wildcards points to your load balancer.\n\nCreating a dedicated DNS zone is recommended when using cert-manager or external-dns but is not required. A pre-existing DNS zone may be used as long as the **cert-manager** and/or **external-dns** services are authorized to manage DNS records within that zone. If you are providing your own TLS certificates and will manually create A records pointing to Gitpod's public load balancer IP addresses then creating a zone is unnecessary.\n\n<CloudPlatformToggle id=\"cloud-platform-toggle-dns\">\n<div slot=\"gcp\">\n\nIn this reference architecture, we use [Google Cloud DNS](https://cloud.google.com/dns) for domain name resolution. To automatically configure Cloud DNS, we use [External DNS for Kubernetes](https://github.com/kubernetes-sigs/external-dns).","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/networking","loc":{"lines":{"from":56,"to":65}}}}],["2063",{"pageContent":"First, we need a **service account** with role `roles/dns.admin`. This service account is needed by cert-manager to alter the DNS settings for the DNS-01 resolution.\n\n```bash\nDNS_SA=gitpod-dns01-solver\nDNS_SA_EMAIL=\"${DNS_SA}\"@\"${PROJECT_NAME}\".iam.gserviceaccount.com\ngcloud iam service-accounts create \"${DNS_SA}\" --display-name \"${DNS_SA}\"\ngcloud projects add-iam-policy-binding \"${PROJECT_NAME}\" \\\n    --member serviceAccount:\"${DNS_SA_EMAIL}\" --role=\"roles/dns.admin\"","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/networking","loc":{"lines":{"from":67,"to":74}}}}],["2064",{"pageContent":"```\n\nSave the service account key to the file `./dns-credentials.json`:\n\n```bash\ngcloud iam service-accounts keys create --iam-account \"${DNS_SA_EMAIL}\" \\\n    ./dns-credentials.json\n```\n\nAfter that, we create a [managed zone](https://cloud.google.com/dns/docs/zones).\n\n```bash\nDOMAIN=gitpod.example.com\ngcloud dns managed-zones create \"${CLUSTER_NAME}\" \\\n    --dns-name \"${DOMAIN}.\" \\\n    --description \"Automatically managed zone by kubernetes.io/external-dns\"","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/networking","loc":{"lines":{"from":75,"to":90}}}}],["2065",{"pageContent":"```\n\nNow we are ready to install External DNS. Please refer to the [External DNS GKE docs](https://github.com/kubernetes-sigs/external-dns/blob/master/docs/tutorials/gke.md).\n\n<details>\n  <summary  class=\"text-p-medium\">Example on how to install External DNS with helm</summary>\n\n```bash\nhelm repo add bitnami https://charts.bitnami.com/bitnami\nhelm repo update\nhelm upgrade \\\n    --atomic \\\n    --cleanup-on-fail \\\n    --create-namespace \\\n    --install \\\n    --namespace external-dns \\\n    --reset-values \\\n    --set provider=google \\\n    --set google.project=\"${PROJECT_NAME}\" \\\n    --set logFormat=json \\\n    --set google.serviceAccountSecretKey=dns-credentials.json \\\n    --wait \\\n    external-dns \\\n    bitnami/external-dns","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/networking","loc":{"lines":{"from":91,"to":114}}}}],["2066",{"pageContent":"```\n\n</details>\n\nDepending on what your DNS setup for your domain looks like, you most probably want to configure the nameservers for your domain. Run the following command to get a list of nameservers used by your Cloud DNS setup:\n\n```bash\ngcloud dns managed-zones describe ${CLUSTER_NAME} --format json | jq '.nameServers'\n```\n\n</div>\n<div slot=\"aws\">\n\nIf a Route53 zone has not yet been created, you can do so with the following command (replace `gitpod.example.com.` with the intended zone):\n\n```bash\nDOMAIN_NAME=\"gitpod.example.com\"\nexport ROUTE53_CALLER=$(cat /proc/sys/kernel/random/uuid)\naws route53 create-hosted-zone \\\n    --name \"${DOMAIN_NAME}.\" \\\n    --caller-reference $ROUTE53_CALLER \\\n    --hosted-zone-config Comment=\"gitpod-zone\"\n```\n\nOnce the domain has been provisioned, you can get the details with the following command and record the `Id` for later usage:\n\n```bash\naws route53 list-hosted-zones --query \"HostedZones[?Name==\\`$DOMAIN_NAME.\\`]\"","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/networking","loc":{"lines":{"from":115,"to":142}}}}],["2067",{"pageContent":"```\n\nWhich should return something like:\n\n```bash\n[\n    {\n        \"Id\": \"/hostedzone/Z1230498123094\",\n        \"Name\": \"gitpod.example.com.\",\n        \"CallerReference\": \"c43f5dfd-87d9-45fc-bb1f-33bf35d8244b\",\n        \"Config\": {\n            \"Comment\": \"\",\n            \"PrivateZone\": false\n        },\n        \"ResourceRecordSetCount\": 10\n    }\n]\n```\n\nStore this hosted zone in a variable for later use by external-dns and cert-manager:\n\n```bash\nHOSTED_ZONE_ID=\"$(aws route53 list-hosted-zones-by-name \\\n    --dns-name \"$DOMAIN_NAME.\" \\\n    --query \"HostedZones[0].Id\" \\\n    --output json \\\n    --out text)\"","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/networking","loc":{"lines":{"from":143,"to":169}}}}],["2068",{"pageContent":"```\n\nThen install external-dns so that DNS records will be automatically created for Gitpod services. This can be ignored if you are managing DNS records yourself.\n\n<!--\nexternal-dns helm chart notes:\n\n- `eksctl` is responsible for creating the external-dns Kubernetes service account and attaching\n  an AWS IAM role to to the external-dns service account. The helm chart assumes that the service\n  account has been pre-created (`--set serviceAccount.create=false`)\n- For security purposes external-dns runs with a [UID of 65534](https://github.com/kubernetes-sigs/external-dns/blob/v0.12.2/Dockerfile#L35-L37)\n- EKS IAM roles for service accounts expose AWS token files into the container; as external-dns\n  is running as a non-root user the `fsGroup` setting must be set to change the ownership of the\n  AWS token file to match the UID of the external-dns process.\n\nSee also: https://aws.amazon.com/premiumsupport/knowledge-center/eks-set-up-externaldns/\n-->","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/networking","loc":{"lines":{"from":170,"to":186}}}}],["2069",{"pageContent":"See also: https://aws.amazon.com/premiumsupport/knowledge-center/eks-set-up-externaldns/\n-->\n\n```bash\nhelm repo add bitnami https://charts.bitnami.com/bitnami\nhelm repo update\nhelm upgrade \\\n    --atomic \\\n    --cleanup-on-fail \\\n    --create-namespace \\\n    --install \\\n    --namespace external-dns \\\n    --reset-values \\\n    --wait \\\n    --set provider=aws \\\n    --set aws.zoneType=public \\\n    --set txtOwnerId=\"$HOSTED_ZONE_ID\" \\\n    --set \"domainFilters[0]=$DOMAIN_NAME\" \\\n    --set serviceAccount.create=false \\\n    --set serviceAccount.name=external-dns \\\n    --set podSecurityContext.fsGroup=65534 \\\n    external-dns \\\n    bitnami/external-dns","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/networking","loc":{"lines":{"from":186,"to":208}}}}],["2070",{"pageContent":"```\n\nWith Route53 created, you can now proceed to install cert-manager. Cert-manager is needed for Gitpod's internal networking even if you are managing DNS yourself.\n\n</div>\n\n<div slot=\"azure\">\n\nThis section will create an Azure managed zone, grant the AKS cluster permission to manage records in that zone, and install external-dns.\n\nBegin by creating a new Azure managed zone. For example, if you plan on hosting Gitpod at `gitpod.svcs.example.com` then create a managed zone called `svcs.example.com`.\n\n```bash\nDOMAIN_NAME=\"svcs.example.com\"\naz network dns zone create --name $DOMAIN_NAME --resource-group $RESOURCE_GROUP","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/networking","loc":{"lines":{"from":209,"to":223}}}}],["2071",{"pageContent":"```\n\nAuthorize the AKS cluster to control DNS records in the zone:\n\n```bash\nZONE_ID=$(az network dns zone show --name \"${DOMAIN_NAME}\" --resource-group \"${RESOURCE_GROUP}\" --query \"id\" -o tsv)\nKUBELET_OBJECT_ID=$(az aks show --name \"${CLUSTER_NAME}\" --resource-group \"${RESOURCE_GROUP}\" --query \"identityProfile.kubeletidentity.objectId\" -o tsv)\n\naz role assignment create \\\n    --assignee \"${KUBELET_OBJECT_ID}\" \\\n    --role \"DNS Zone Contributor\" \\\n    --scope \"${ZONE_ID}\"","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/networking","loc":{"lines":{"from":224,"to":235}}}}],["2072",{"pageContent":"```\n\n> This role assignment uses [AKS Kubelet Identity](https://cert-manager.io/docs/configuration/acme/dns01/azuredns/#managed-identity-using-aks-kubelet-identity)\n> to authorizes the entire AKS cluster to manage DNS records in the given zone, including cert-manager and external-dns.\n\nLook up the AKS kubelet client identity; external-dns will use this identity when authenticating to the Azure API.\n\n```bash\nKUBELET_CLIENT_ID=$(az aks show --name \"${CLUSTER_NAME}\" --resource-group \"${RESOURCE_GROUP}\" --query \"identityProfile.kubeletidentity.clientId\" -o tsv)","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/networking","loc":{"lines":{"from":236,"to":244}}}}],["2073",{"pageContent":"```\n\nThen install the external-dns Helm chart:\n\n```bash\nhelm repo add bitnami https://charts.bitnami.com/bitnami\nhelm repo update\nhelm upgrade \\\n    --install \\\n    --atomic \\\n    --wait \\\n    --cleanup-on-fail \\\n    --create-namespace \\\n    --namespace external-dns \\\n    --reset-values \\\n    --set provider=azure \\\n    --set azure.resourceGroup=\"${RESOURCE_GROUP}\" \\\n    --set azure.subscriptionId=\"${AZURE_SUBSCRIPTION_ID}\" \\\n    --set azure.tenantId=\"${AZURE_TENANT_ID}\" \\\n    --set azure.useManagedIdentityExtension=true \\\n    --set azure.userAssignedIdentityID=\"${KUBELET_CLIENT_ID}\" \\\n    --set logFormat=json \\\n    external-dns \\\n    bitnami/external-dns\n```\n\n</div>\n\n</CloudPlatformToggle>","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/networking","loc":{"lines":{"from":245,"to":273}}}}],["2074",{"pageContent":"### cert-manager\n\nGitpod uses TLS secure external traffic bound for Gitpod as well as identifying, authorizing, and securing internal traffic between Gitpod's internal components. While you can provide your own TLS certificate for securing external connections to Gitpod, cert-manager is required to generate internal TLS certificates.\n\nRefer to the [cert-manager DNS01 docs](https://cert-manager.io/docs/configuration/acme/dns01/) for more information.\n\n<CloudPlatformToggle>\n<div slot=\"gcp\">\n\nExample on how to install cert-manager on GCP:\n\n```bash\nhelm repo add jetstack https://charts.jetstack.io\nhelm repo update\nhelm upgrade \\\n    --atomic \\\n    --cleanup-on-fail \\\n    --create-namespace \\\n    --install \\\n    --namespace cert-manager \\\n    --reset-values \\\n    --set installCRDs=true \\\n    --set 'extraArgs={--dns01-recursive-nameservers-only=true,--dns01-recursive-nameservers=8.8.8.8:53\\,1.1.1.1:53}' \\\n    --wait \\\n    cert-manager \\\n    jetstack/cert-manager","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/networking","loc":{"lines":{"from":275,"to":300}}}}],["2075",{"pageContent":"```\n\n</div>\n<div slot=\"aws\">\n\nDue to the networking behavior and service accounts in EKS, cert-manager needs a different installation procedure. First, install cert-manager with the following command:\n\n```bash\nhelm repo add jetstack https://charts.jetstack.io\nhelm repo update\nhelm upgrade \\\n    --atomic \\\n    --cleanup-on-fail \\\n    --create-namespace \\\n    --install \\\n    --namespace cert-manager \\\n    --reset-values \\\n    --set installCRDs=true \\\n    --set 'extraArgs={--dns01-recursive-nameservers-only=true,--dns01-recursive-nameservers=8.8.8.8:53\\,1.1.1.1:53}' \\\n    --set webhook.hostNetwork=true \\\n    --set webhook.securePort=10260 \\\n    --set serviceAccount.create=false \\\n    --set serviceAccount.name=cert-manager \\\n    --wait \\\n    cert-manager \\\n    jetstack/cert-manager","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/networking","loc":{"lines":{"from":301,"to":326}}}}],["2076",{"pageContent":"```\n\nOnce the installation has completed, you will need to update the cert-manager security context setting for the service account provisioned for cert-manager by `eksctl`:\n\n```bash\nkubectl patch deployment cert-manager -n cert-manager -p \\\n  '{\"spec\":{\"template\":{\"spec\":{\"securityContext\":{\"fsGroup\":1001,\"runAsNonRoot\": true}}}}}'\n\n```\n\n</div>\n\n<div slot=\"azure\">\n\nInstall cert-manager with the following command:\n\n```bash\nhelm repo add jetstack https://charts.jetstack.io\nhelm repo update\nhelm upgrade \\\n    --install \\\n    --atomic \\\n    --wait \\\n    --cleanup-on-fail \\\n    --create-namespace \\\n    --namespace='cert-manager' \\\n    --reset-values \\\n    --set installCRDs=true \\\n    --set 'extraArgs={--dns01-recursive-nameservers-only=true,--dns01-recursive-nameservers=8.8.8.8:53\\,1.1.1.1:53}' \\\n    cert-manager \\\n    jetstack/cert-manager\n```\n\n</div>\n</CloudPlatformToggle>","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/networking","loc":{"lines":{"from":327,"to":361}}}}],["2077",{"pageContent":"### TLS certificate\n\nIn this reference architecture, we use cert-manager to also create **TLS certificates for the Gitpod domain**. Since we need wildcard certificates for the subdomains, you must use the [DNS-01 challenge](https://letsencrypt.org/docs/challenge-types/#dns-01-challenge).\n\nUsing a certificate issued by Let's Encrypt is recommended as it minimizes overhead involving TLS certificates and managing CA certificate trust, but is not required. If you already have TLS certificates for your Gitpod installation with suitable DNS names you can skip this step and use your own certificates during the installation.\n\n<CloudPlatformToggle id=\"cloud-platform-toggle-cert-manager-tls\">\n<div slot=\"gcp\">\n\nNow, we are configuring [Google Cloud DNS for the DNS-01 challenge](https://cert-manager.io/docs/configuration/acme/dns01/google/). For this, we need to create a secret that contains the key for the DNS service account:","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/networking","loc":{"lines":{"from":363,"to":372}}}}],["2078",{"pageContent":"```bash\nCLOUD_DNS_SECRET=clouddns-dns01-solver\nkubectl create secret generic \"${CLOUD_DNS_SECRET}\" \\\n    --namespace=cert-manager \\\n    --from-file=key.json=\"./dns-credentials.json\"","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/networking","loc":{"lines":{"from":374,"to":378}}}}],["2079",{"pageContent":"```\n\nAfter that, we are telling cert-manager which service account it should use:\n\n```bash\nkubectl annotate serviceaccount --namespace=cert-manager cert-manager \\\n    --overwrite \"iam.gke.io/gcp-service-account=${DNS_SA_EMAIL}\"\n```\n\nThe next step is to create an issuer. In this guide, we create a cluster issuer. Create a file `issuer.yaml` like this:\n\n```yaml\n# Replace $LETSENCRYPT_EMAIL with your email and $PROJECT_NAME with your GCP project name\napiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n    name: gitpod-issuer\nspec:\n    acme:\n        email: $LETSENCRYPT_EMAIL\n        server: https://acme-v02.api.letsencrypt.org/directory\n        privateKeySecretRef:\n            name: issuer-account-key\n        solvers:\n            - dns01:\n                  cloudDNS:\n                      project: $PROJECT_NAME\n```\n\n… and run:\n\n```bash\nkubectl apply -f issuer.yaml","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/networking","loc":{"lines":{"from":379,"to":411}}}}],["2080",{"pageContent":"```\n\n</div>\n<div slot=\"aws\">\n\nIf using `eksctl` and the cert-manager service account along with well-known policies AND you have your intended zone hosted in Route53, then follow the [cert-manager](https://cert-manager.io/docs/configuration/acme/dns01/route53/) configuration steps. An example cluster issuer using the hosted zone and cert-manager service account created by `eksctl` is below:\n\n```yaml\n# Replace $LETSENCRYPT_EMAIL with your email and $DOMAIN_NAME with your gitpod domain name (eg.`gitpod.$DOMAIN_NAME`)\napiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n    name: gitpod-issuer\nspec:\n    acme:\n        server: https://acme-v02.api.letsencrypt.org/directory\n        email: $LETSENCRYPT_EMAIL\n        privateKeySecretRef:\n            name: letsencrypt\n        solvers:\n            - selector:\n                  dnsZones:\n                      - $DOMAIN_NAME\n              dns01:\n                  route53:\n                      region: us-east-1","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/networking","loc":{"lines":{"from":412,"to":437}}}}],["2081",{"pageContent":"```\n\n> ⚠️ In contrast to most AWS services, Route53 does _not_ support regional endpoints. When creating your ClusterIssuer\n> be careful to use the `us-east-1` region for all regions other than the Beijing and Ningxia Regions, and `cn-northwest-1`\n> region for the Beijing and Ningxia regions.\n>\n> See the [AWS Route53 endpoints and quotas documentation](https://docs.aws.amazon.com/general/latest/gr/r53.html) for more information.\n\n</div>\n\n<div slot=\"azure\">\n\nThis section will create a cert-manager ClusterIssuer that will generate publicly trusted certificates using Let's Encrypt.\n\nFirst, determine your Azure subscription ID. You can typically determine your subscription ID from your Azure CLI credentials.\n\n```bash\nAZURE_SUBSCRIPTION_ID=\"$(az account subscription list --query '[0].subscriptionId' --output tsv)\"","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/networking","loc":{"lines":{"from":438,"to":455}}}}],["2082",{"pageContent":"```\n\nThen create a file named `issuer.yaml` containing the following content, expanding the `$AZURE_SUBSCRIPTION_ID`, `$RESOURCE_GROUP`, and `$DOMAIN_NAME` variables:\n\n```yaml\napiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n    name: gitpod-issuer\nspec:\n    acme:\n        server: https://acme-v02.api.letsencrypt.org/directory\n        privateKeySecretRef:\n            name: issuer-account-key\n        solvers:\n            - dns01:\n                  azureDNS:\n                      subscriptionID: $AZURE_SUBSCRIPTION_ID\n                      resourceGroupName: $RESOURCE_GROUP\n                      hostedZoneName: $DOMAIN_NAME\n```\n\nThen apply the ClusterIssuer resource:\n\n```bash\nkubectl apply -f issuer.yaml","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/networking","loc":{"lines":{"from":456,"to":481}}}}],["2083",{"pageContent":"```\n\nThen apply the ClusterIssuer resource:\n\n```bash\nkubectl apply -f issuer.yaml\n```\n\n> This example ClusterIssuer depends on [Azure Managed Identity](https://docs.microsoft.com/en-us/azure/active-directory/managed-identities-azure-resources/overview) to authorize requests from cert-manager to the AzureDNS API.\n> Refer to the [cert-manager AzureDNS DNS01](https://cert-manager.io/docs/configuration/acme/dns01/azuredns/) documentation for more information on cert-manager API authorization.\n\n</CloudPlatformToggle>","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/networking","loc":{"lines":{"from":481,"to":492}}}}],["2084",{"pageContent":"---\nlayout: false\n---\n\n![Reference Architecture Overview](/images/docs/self-hosted/reference-architecture/ReferenceArchitecture.png)\n\nThe diagram above gives an overview of the reference architecture. Starting from the user’s workstation, access is provided using a layer 4 (L4) load balancer. An internal proxy distributes this traffic within Gitpod.\n\nThe cluster-external components are accessed by a specific set of components as shown in the diagram. The external components are:\n\n-   **MySQL database**\n-   **Source Control Management (SCM)**, e.g. GitLab, GitHub, GitHub Enterprise, BitBucket, or BitBucket Server\n-   **Object Storage**, e.g. Google Cloud Storage or Amazon S3\n-   **OCI Image Registry**, e.g. Google Artifact Registry.<br/>\n    _Note: This registry is used by Gitpod to cache images, and store images it builds on behalf of users. This is **not** the registry that contains the images of Gitpod’s services._","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/overview","loc":{"lines":{"from":1,"to":15}}}}],["2085",{"pageContent":"In addition, the diagram indicates the different node pools within the cluster. Notice that we separate any user workloads from Gitpod’s services (except for `ws-daemon`). In this reference architecture, we create two node pools: the services node pool (upper half in the diagram) and the workspaces node pool (lower half in the diagram).","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/overview","loc":{"lines":{"from":17,"to":17}}}}],["2086",{"pageContent":"---\nlayout: false\n---\n\n<script lang=\"ts\">\n  import CloudPlatformToggle from \"$lib/components/docs/cloud-platform-toggle.svelte\";\n</script>\n\nYou need to prepare your workstation and your cloud provider (e.g. creating a project and preparing service accounts) to be able to replicate this reference architecture.\n\nIndependent of the cloud provider you are using, you need to have `kubectl` installed on your workstation and configured to access your cluster after creation.\n\n<CloudPlatformToggle id=\"cloud-platform-toggle-preparations\">\n\n<div slot=\"gcp\">","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/preparations","loc":{"lines":{"from":1,"to":15}}}}],["2087",{"pageContent":"<CloudPlatformToggle id=\"cloud-platform-toggle-preparations\">\n\n<div slot=\"gcp\">\n\nIn order to deploy Gitpod on the [Google Kubernetes Engine (GKE)](https://cloud.google.com/kubernetes-engine) of the [Google Cloud Platform (GCP)](https://cloud.google.com/docs), you need to create and configure a project for your installation. In this guide, we give you examples of how to create the needed resources by using the command line tool `gcloud`. To follow these examples make sure you have [installed the `gcloud` CLI](https://cloud.google.com/sdk/docs/install) and [logged in to your Google Cloud account](https://cloud.google.com/sdk/gcloud/reference/auth/login). You can also use the [GCP Console](https://console.cloud.google.com/) or the API instead. In that case, please refer to the linked Google docs.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/preparations","loc":{"lines":{"from":15,"to":19}}}}],["2088",{"pageContent":"First, [create a GCP project](https://cloud.google.com/resource-manager/docs/creating-managing-projects) and [enable billing](https://cloud.google.com/billing/docs/concepts) (you have to enable billing to enable GKE). You can freely choose a name for your project (hereinafter referred to as environment variable `PROJECT_NAME`). You also need the billing account ID (referred to as `BILLING_ACCOUNT`). To see available lDs, run [`gcloud alpha billing accounts list`](https://cloud.google.com/sdk/gcloud/reference/alpha/billing/accounts/list).\n\n```bash\nPROJECT_NAME=gitpod\ngcloud projects create \"${PROJECT_NAME}\" --set-as-default\n\nBILLING_ACCOUNT=0X0X0X-0X0X0X-0X0X0X\ngcloud alpha billing projects link \"${PROJECT_NAME}\" \\\n    --billing-account \"${BILLING_ACCOUNT}\"","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/preparations","loc":{"lines":{"from":21,"to":29}}}}],["2089",{"pageContent":"```\n\nYou can verify that the proper project has been set as default with this command:\n\n```bash\ngcloud config get-value project","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/preparations","loc":{"lines":{"from":30,"to":35}}}}],["2090",{"pageContent":"```\n\nAfter you created your project, you need to enable the following services in this project:","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/preparations","loc":{"lines":{"from":36,"to":38}}}}],["2091",{"pageContent":"| Services                         |                                                                                              |                                                                                              |\n| -------------------------------- | -------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------- |\n| cloudbilling.googleapis.com      | [Google Billing API](https://cloud.google.com/billing/docs/reference/rest)                   | Billing is required to set up a GKE cluster.                                                 |\n| containerregistry.googleapis.com | [Docker container images registry](https://cloud.google.com/container-registry)              | Enable this service such that Gitpod can push workspace images to that repository.           |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/preparations","loc":{"lines":{"from":40,"to":43}}}}],["2092",{"pageContent":"| iam.googleapis.com               | [Identity and Access Management (IAM) API](https://cloud.google.com/iam/docs/reference/rest) | To create and use service accounts for the setup.                                            |\n| compute.googleapis.com           | [Google Compute Engine API](https://cloud.google.com/compute/docs/reference/rest/v1)         | The Google Compute Engine empowers to run virtual machines (VMs) for the Kubernetes cluster. |\n| container.googleapis.com         | [Kubernetes Engine API](https://cloud.google.com/kubernetes-engine/docs/reference/rest)      | The Kubernetes engine is where we will deploy Gitpod to.                                     |\n| dns.googleapis.com               | [Cloud DNS](https://cloud.google.com/dns/docs/reference/v1)                                  | Cloud DNS is used in this reference architecture so set up the domain name resolution.       |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/preparations","loc":{"lines":{"from":44,"to":47}}}}],["2093",{"pageContent":"| sqladmin.googleapis.com          | [Cloud SQL Admin API](https://cloud.google.com/sql/docs/mysql/admin-api)                     | Cloud SQL for MySQL is used as database service in this reference architecture.              |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/preparations","loc":{"lines":{"from":48,"to":48}}}}],["2094",{"pageContent":"Run these commands to enable the services:\n\n```bash\ngcloud services enable cloudbilling.googleapis.com\ngcloud services enable containerregistry.googleapis.com\ngcloud services enable iam.googleapis.com\ngcloud services enable compute.googleapis.com\ngcloud services enable container.googleapis.com\ngcloud services enable dns.googleapis.com\ngcloud services enable sqladmin.googleapis.com","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/preparations","loc":{"lines":{"from":50,"to":59}}}}],["2095",{"pageContent":"```\n\nNow, you are prepared to create your Kubernetes cluster.\n\n</div>\n\n<div slot=\"aws\">\n\nTo deploy Gitpod on [Amazon Elastic Kubernetes Service (Amazon EKS)](https://docs.aws.amazon.com/eks/latest/userguide/what-is-eks.html), you must have an Amazon account that has permissions to deploy EKS and the underlying component services, which can include:\n\n-   VPCs\n-   Subnets\n-   Internet Gateways\n-   EC2 Instances\n-   Autoscaling Groups\n-   Elastic Load Balancers\n\nSpecifically for Gitpod's use, you will also need permissions to create these additional components:\n\n-   Route53 DNS Zone for the intended Gitpod domain name (for use with Let's Encrypt certificate generation)\n-   RDS Instance running MySQL 5.7 for Gitpod's database\n-   S3 Bucket: Hosting Gitpod's workspace images and object storage\n-   AWS IAM Service account: To enable access to the S3 bucket\n\nThis guide uses the following tools:","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/preparations","loc":{"lines":{"from":60,"to":84}}}}],["2096",{"pageContent":"This guide uses the following tools:\n\n-   [AWS CLI](https://aws.amazon.com/cli/) for creating none EKS specific services\n-   [EKS CLI `eksctl`](https://eksctl.io/) for creating the EKS cluster and nodegroups themselves\n\nAmazon has a brief run-through on how to [deploy a basic cluster](https://docs.aws.amazon.com/eks/latest/userguide/getting-started-eksctl.html) using the `eksctl` tooling if you'd like to familiarize yourself before deploying the Gitpod reference architecture.\n\nMake sure you are logged in and are connected to the proper AWS account. Ensure AWS is configured and working with the command `aws sts get-caller-identity`. For later steps you will need to ensure that `kubectl` is [properly configured to authenticate to the newly provisioned EKS environment](https://docs.aws.amazon.com/eks/latest/userguide/create-kubeconfig.html).\n\n**AWS Region Setting**","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/preparations","loc":{"lines":{"from":84,"to":93}}}}],["2097",{"pageContent":"**AWS Region Setting**\n\nAll commands that follow assume you have set an environment variable of `AWS_REGION` to your appropriate region or have it configured in your profile already and so will not include `--region` or `--profile` when running the `aws` command. Refer to the [AWS CLI documentation](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-envvars.html) for more information.\n\n</div>\n\n<div slot=\"azure\">\n\nTo deploy Gitpod on [Azure Kubernetes Service](https://docs.microsoft.com/en-us/azure/aks/intro-kubernetes), you must have an Azure subscription and account with permission deploy AKS clusters and associated component services, including the following:\n\n-   AKS Clusters\n-   Virtual networks\n-   MySQL Databases\n-   Storage accounts\n-   Azure Container Registries\n-   Load balancers\n-   Azure DNS managed domains (and rights to assign roles on managed zones)\n-   Rights to make role assignments in Azure Active Directory","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/preparations","loc":{"lines":{"from":93,"to":110}}}}],["2098",{"pageContent":"This guide uses the Azure CLI to create resources for your Gitpod installation and requires active Azure credentials. Credentials can be fetched by one of the following options:\n\n-   [Sign in interactively](https://learn.microsoft.com/en-us/cli/azure/authenticate-azure-cli#sign-in-interactively)\n-   [Sign in with a Service Principal](https://learn.microsoft.com/en-us/cli/azure/authenticate-azure-cli#sign-in-with-a-service-principal) (recommended for production installations)\n\n**Tools**\n\nThis guide uses the following tools:\n\n-   [Azure CLI](https://docs.microsoft.com/en-us/cli/azure/get-started-with-azure-cli)\n\nIf `kubectl` is not present the Azure CLI can be used to install `kubectl`:\n\n```bash\nsudo az aks install-cli","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/preparations","loc":{"lines":{"from":112,"to":126}}}}],["2099",{"pageContent":"```\n\n**Location and Resource Group**\n\nAzure uses _resource groups_ to logically group related resources. This guide uses a dedicated resource group for the Gitpod AKS cluster and all component resources. Creating a new resource group for Gitpod resources is recommended but a pre-existing resource group may be used if necessary.\n\nSet environment variables indicating the resource group and location where Gitpod resources will be created:\n\n```bash\nexport RESOURCE_GROUP=\"gitpod\"\nexport LOCATION=\"centralus\"\n```\n\nThen create a new resource group:\n\n```bash\naz group create --location $LOCATION --name \"$RESOURCE_GROUP\"\n```\n\n</div>\n\n</CloudPlatformToggle>","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/preparations","loc":{"lines":{"from":127,"to":148}}}}],["2100",{"pageContent":"---\nlayout: false\n---\n\n<script lang=\"ts\">\n  import CloudPlatformToggle from \"$lib/components/docs/cloud-platform-toggle.svelte\";\n</script>\n\nKubernetes clusters pull their components from an **image registry**. In Gitpod, image registries are used for three different purposes:\n\n1. Pulling the actual Gitpod software (components like `server`, `image-builder`, etc.).\n2. Pulling base images for workspaces. This is either a default [workspace-full](https://hub.docker.com/r/gitpod/workspace-full) image or the image that is configured in the `.gitpod.yml` resp. `.gitpod.Dockerfile` in the repo.\n3. Pushing individual workspace images that are built for workspaces during image start. That are for example custom images that are defined in a `.gitpod.Dockerfile` in the repo. These images are pulled by Kubernetes after image building to provision the workspace. This is the only case where Gitpod needs write access to push images.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/registry","loc":{"lines":{"from":1,"to":13}}}}],["2101",{"pageContent":"We use a different registry for each of the three items in this reference architecture. The Gitpod images (1) are pulled from a public Google Container Registry we provide. The workspace base image (2) is pulled from Docker Hub (or from the location that is set in the Dockerfile of the corresponding repo). For the individual workspace images (3), we create an image registry that is provided by the used cloud provider. You could also configure Gitpod to use the same registry for all cases. That is particularly useful for [air-gap installations](../advanced/air-gap) where you have access to an internal image registry only.\n\n<CloudPlatformToggle id=\"cloud-platform-toggle-registry\">\n<div slot=\"gcp\">","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/registry","loc":{"lines":{"from":15,"to":18}}}}],["2102",{"pageContent":"<CloudPlatformToggle id=\"cloud-platform-toggle-registry\">\n<div slot=\"gcp\">\n\nBy enabling the service `containerregistry.googleapis.com` (see above), your project provides you with an OCI Image Registry. As credentials, we need the [object storage](#object-storage) service account key that we will create below. Therefore, there is no further action needed to use the registry in Gitpod.\n\n</div>\n<div slot=\"aws\">\n\nECR is currently not supported, so configuring the registry will require using an S3 bucket. You can reuse the same S3 bucket used for object storage or a separate one. The steps would be identical in creation, just use different names for both the bucket and the IAM user account.\n\n> Please refer to the [Object Storage](./single-cluster-ref-arch#object-storage) section for instructions on how to create an S3 bucket. You can re-use the bucket created there as your registry storage backe-end.","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/registry","loc":{"lines":{"from":18,"to":28}}}}],["2103",{"pageContent":"To configure Gitpod to use the bucket created, ensure you select `In-cluster Registry`, and `S3 storage` in the installation UI. Then input the values of the bucket you've created. When setting the endpoint, please include the region such that `s3.amazonaws.com` becomes `s3.eu-west-1.amazonaws.com`.\n\n</div>\n\n<div slot=\"azure\">\n\nThis section will create an Amazon Container Registry for workspace images.\n\nFirst, generate a name for the ACR instance. ACR instance names must be unique; using a random suffix is recommended but any unique registry name is sufficient.\n\n```bash\nREGISTRY_NAME=\"gitpod$(openssl rand -hex 4)\"","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/registry","loc":{"lines":{"from":30,"to":41}}}}],["2104",{"pageContent":"```\n\nNote the value of `$REGISTRY_NAME` for later use.\n\nCreate the container registry:\n\n```bash\naz acr create \\\n  --admin-enabled true \\\n  --location \"${LOCATION}\" \\\n  --name \"${REGISTRY_NAME}\" \\\n  --resource-group \"${RESOURCE_GROUP}\" \\\n  --sku Premium\n```\n\nThe registry server, username, and password will be needed when Gitpod is installed; note these values for later.\n\n```bash\nAZURE_REGISTRY_URL=$(az acr show \\\n    --name \"${REGISTRY_NAME}\" \\\n    --output tsv \\\n    --query loginServer \\\n    --resource-group \"${RESOURCE_GROUP}\")\n\nAZURE_REGISTRY_USERNAME=$(az acr credential show \\\n    --name \"${REGISTRY_NAME}\" \\\n    --output tsv \\\n    --query username \\\n    --resource-group \"${RESOURCE_GROUP}\")\n\nAZURE_REGISTRY_PASSWORD=$(az acr credential show \\\n    --name \"${REGISTRY_NAME}\" \\\n    --output tsv \\\n    --query \"passwords[0].value\" \\\n    --resource-group \"${RESOURCE_GROUP}\")\n```\n\n</div>\n\n</CloudPlatformToggle>","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/registry","loc":{"lines":{"from":42,"to":81}}}}],["2105",{"pageContent":"---\nlayout: false\n---\n\n<script lang=\"ts\">\n  import CloudPlatformToggle from \"$lib/components/docs/cloud-platform-toggle.svelte\";\n</script>\n\nGitpod uses **object storage** to store blob data. This includes workspace backups that are created when a workspace stops and are used to restore state upon restart. Different user settings like IDE preferences are also stored this way.\n\nThis reference architecture uses managed object storage commonly offered by all cloud providers.\n\n<CloudPlatformToggle id=\"cloud-platform-toggle-object-storage\">\n<div slot=\"gcp\">\n\nFor each Gitpod user, their own bucket will be created at runtime. For this reason, Gitpod needs proper rights to create buckets in the object storage. Create a service account that has the following roles:\n\n| Roles                     |\n| ------------------------- |\n| roles/storage.admin       |\n| roles/storage.objectAdmin |","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/storage","loc":{"lines":{"from":1,"to":21}}}}],["2106",{"pageContent":"| Roles                     |\n| ------------------------- |\n| roles/storage.admin       |\n| roles/storage.objectAdmin |\n\n```bash\nOBJECT_STORAGE_SA=gitpod-storage\nOBJECT_STORAGE_SA_EMAIL=\"${OBJECT_STORAGE_SA}\"@\"${PROJECT_NAME}\".iam.gserviceaccount.com\ngcloud iam service-accounts create \"${OBJECT_STORAGE_SA}\" --display-name \"${OBJECT_STORAGE_SA}\"\ngcloud projects add-iam-policy-binding \"${PROJECT_NAME}\" \\\n    --member serviceAccount:\"${OBJECT_STORAGE_SA_EMAIL}\" --role=\"roles/storage.admin\"\ngcloud projects add-iam-policy-binding \"${PROJECT_NAME}\" \\\n    --member serviceAccount:\"${OBJECT_STORAGE_SA_EMAIL}\" --role=\"roles/storage.objectAdmin\"","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/storage","loc":{"lines":{"from":21,"to":33}}}}],["2107",{"pageContent":"```\n\nSave the service account key to the file `./gs-credentials.json`:\n\n```bash\ngcloud iam service-accounts keys create --iam-account \"${OBJECT_STORAGE_SA_EMAIL}\" \\\n    ./gs-credentials.json\n```\n\n</div>\n<div slot=\"aws\">\n\nBelow, we create one S3 bucket and one IAM User service account to access it. These credentials and the bucket are used for both object storage and storing the workspace images via a Registry frontend deployed in Gitpod (and when Gitpod is installed). The bucket has to have a globally unique name.\n\n```bash\nexport S3_BUCKET_NAME=\"suitably-tired-puma-registry\"\necho ${S3_BUCKET_NAME}\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/storage","loc":{"lines":{"from":34,"to":51}}}}],["2108",{"pageContent":"### Create the S3 Bucket and ensure it is private\n\nCreate an S3 bucket using the following command:\n\n```bash\naws s3api create-bucket \\\n    --bucket ${S3_BUCKET_NAME} \\\n    --region eu-west-1 --create-bucket-configuration LocationConstraint=eu-west-1 \\\n    --object-ownership BucketOwnerEnforced\naws s3api put-public-access-block \\\n    --bucket ${S3_BUCKET_NAME} \\\n    --public-access-block-configuration \"BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true\"\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/storage","loc":{"lines":{"from":53,"to":65}}}}],["2109",{"pageContent":"### Create an IAM user for credentials with access just to this bucket\n\n```bash\naws iam create-user \\\n  --user-name gitpod-s3-access \\\n  --tags Key=project,Value=gitpod\n```\n\nSave the following file as `S3_policy.json`, replacing `${S3_BUCKET_NAME}` with the S3 bucket you created:\n\n```json\n{\n\t\"Statement\": [\n\t\t{\n\t\t\t\"Action\": [\n\t\t\t\t\"s3:ListBucketMultipartUploads\",\n\t\t\t\t\"s3:ListBucket\",\n\t\t\t\t\"s3:GetBucketLocation\"\n\t\t\t],\n\t\t\t\"Effect\": \"Allow\",\n\t\t\t\"Resource\": [\"arn:aws:s3:::${S3_BUCKET_NAME}>\"],\n\t\t\t\"Sid\": \"\"\n\t\t},\n\t\t{\n\t\t\t\"Action\": [\n\t\t\t\t\"s3:PutObject\",\n\t\t\t\t\"s3:ListMultipartUploadParts\",\n\t\t\t\t\"s3:GetObject\",\n\t\t\t\t\"s3:DeleteObject\",\n\t\t\t\t\"s3:AbortMultipartUpload\"\n\t\t\t],\n\t\t\t\"Effect\": \"Allow\",\n\t\t\t\"Resource\": [\"arn:aws:s3:::${S3_BUCKET_NAME}/*\"],\n\t\t\t\"Sid\": \"\"\n\t\t}\n\t],\n\t\"Version\": \"2012-10-17\"\n}","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/storage","loc":{"lines":{"from":67,"to":104}}}}],["2110",{"pageContent":"```\n\nCreate the policy, taking note of the ARN in the output:\n\n```bash\naws iam create-policy \\\n    --policy-name gitpod_s3_access_policy \\\n    --policy-document <file://S3_policy.json> \\\n    --tags Key=project,Value=gitpod\n```\n\nThis should result in the following output:\n\n```bash\n{\n    \"Policy\": {\n        \"PolicyName\": \"gitpod_s3_access_policy\",\n        \"PolicyId\": \"ANPA2B3JAS5KQGN6MQRMW\",\n        \"Arn\": \"arn:aws:iam::691173103445:policy/gitpod_s3_access_policy\",\n        \"Path\": \"/\",\n        \"DefaultVersionId\": \"v1\",\n        \"AttachmentCount\": 0,\n        \"PermissionsBoundaryUsageCount\": 0,\n        \"IsAttachable\": true,\n        \"CreateDate\": \"2022-06-24T14:31:30+00:00\",\n        \"UpdateDate\": \"2022-06-24T14:31:30+00:00\",\n        \"Tags\": [\n            {\n                \"Key\": \"project\",\n                \"Value\": \"gitpod\"\n            }\n        ]\n    }\n}","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/storage","loc":{"lines":{"from":105,"to":138}}}}],["2111",{"pageContent":"```\n\nAttach the policy to the IAM user you just created:\n\n```bash\naws iam attach-user-policy \\\n    --user-name gitpod-s3-access \\\n    --policy-arn '<arn from above, similar to: arn:aws:iam::691173103445:policy/gitpod_s3_access_policy>'\n```","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/storage","loc":{"lines":{"from":139,"to":147}}}}],["2112",{"pageContent":"### Create and store a user access token\n\nCreate an access key with the following command, and securely record the resulting `AccessKeyId` and `SecretAccessKey` fields:\n\n```bash\naws iam create-access-key --user-name gitpod-s3-access\n```\n\nThis should result in an output similar to the following:\n\n```bash\n{\n    \"AccessKey\": {\n        \"UserName\": \"gitpod-s3-access\",\n        \"AccessKeyId\": \"<accessKeyId>\",\n        \"Status\": \"Active\",\n        \"SecretAccessKey\": \"<SecretAccessKey>\",\n        \"CreateDate\": \"2022-06-24T14:37:40+00:00\"\n    }\n}","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/storage","loc":{"lines":{"from":149,"to":168}}}}],["2113",{"pageContent":"```\n\nTo test that these credentials provide write access to the S3 bucket, open a new shell session and configure it to use the `AccessKeyId` and `SecretAccessKey` you've just retrieved, and attempt to upload a file and then delete it:\n\n```sh\nexport AWS_ACCESS_KEY_ID=<accessKeyId>\nexport AWS_SECRET_ACCESS_KEY=<SecretAccessKey>\naws s3 ls s3://${S3_BUCKET_NAME}\necho \"hello world\" > gitpod_test.txt\naws s3 cp gitpod_test.txt s3://${S3_BUCKET_NAME}\n# => upload: ./gitpod_test.txt to s3://$S3_BUCKET_NAME/gitpod_test.txt\naws s3 ls s3://${S3_BUCKET_NAME}\n# => 2022-06-24 15:50:20         12 gitpod_test.txt\naws s3 rm s3://${S3_BUCKET_NAME}/gitpod_test.txt\n# => delete: s3://$S3_BUCKET_NAME/gitpod_test.txt\naws s3 ls s3://${S3_BUCKET_NAME}\n# => *nothing returns if empty*\n```\n\nTo avoid impacting any further calls to AWS, unset the environment variables created:\n\n```bash\nunset AWS_ACCESS_KEY_ID\nunset AWS_SECRET_ACCESS_KEY","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/storage","loc":{"lines":{"from":169,"to":192}}}}],["2114",{"pageContent":"```\n\nTo avoid impacting any further calls to AWS, unset the environment variables created:\n\n```bash\nunset AWS_ACCESS_KEY_ID\nunset AWS_SECRET_ACCESS_KEY\n```\n\n</div>\n\n<div slot=\"azure\">\n\nThis section will create an Azure storage account for Gitpod object storage and backups.\n\nGenerate a name for the Azure storage account. The Azure storage account name must be globally unique; using a random suffix is recommended but any unique value can be used.\n\n```bash\nexport STORAGE_ACCOUNT_NAME=\"gitpod$(openssl rand -hex 4)\"\necho \"$STORAGE_ACCOUNT_NAME\"\n```\n\nNote the value of `$STORAGE_ACCOUNT_NAME` for later use.\n\nCreate the storage account:\n\n```bash\naz storage account create \\\n  --access-tier Hot \\\n  --kind StorageV2 \\\n  --location \"${LOCATION}\" \\\n  --name \"${STORAGE_ACCOUNT_NAME}\" \\\n  --resource-group \"${RESOURCE_GROUP}\" \\\n  --sku Standard_LRS","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/storage","loc":{"lines":{"from":192,"to":225}}}}],["2115",{"pageContent":"```\n\nAfter creating the storage account, grant access to Gitpod cluster to that storage account.\n\n```bash\nKUBELET_PRINCIPAL_ID=$(az aks show --name \"${CLUSTER_NAME}\" --resource-group \"${RESOURCE_GROUP}\" --query \"identityProfile.kubeletidentity.objectId\" -o tsv)\n\nSTORAGE_ACCOUNT_ID=$(az storage account show \\\n  --name \"${STORAGE_ACCOUNT_NAME}\" \\\n  --output tsv \\\n  --query id \\\n  --resource-group \"${RESOURCE_GROUP}\")\n\naz role assignment create \\\n    --assignee \"${KUBELET_PRINCIPAL_ID}\" \\\n    --role \"Storage Blob Data Contributor\" \\\n    --scope \"${STORAGE_ACCOUNT_ID}\"\n```\n\nNote the storage account key for later use.\n\n```bash\nSTORAGE_ACCOUNT_KEY=$(az storage account keys list \\\n    --account-name \"${STORAGE_ACCOUNT_NAME}\" \\\n    --resource-group \"${RESOURCE_GROUP}\" \\\n    --query '[?keyName==`key1`].value' \\\n    --output tsv\n)\n```\n\n</div>\n\n</CloudPlatformToggle>","metadata":{"source":"https://www.gitpod.io/docs/configure/self-hosted/latest/reference-architecture/_chunks/storage","loc":{"lines":{"from":226,"to":258}}}}]]